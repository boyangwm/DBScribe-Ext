
package fina2.web;

import javax.ejb.*;
import fina2.bank.Bank;
import fina2.bank.BankPK;
import fina2.bank.BankGroup;
import fina2.bank.BankGroupHome;
import fina2.i18n.Language;
import fina2.i18n.LanguageHome;
import fina2.bank.LicenceType ;
import fina2.bank.LicenceTypeHome;
import fina2.bank.BankType;
import fina2.bank.BankTypeHome;
import fina2.period.PeriodType;
import fina2.period.PeriodTypeHome;
import fina2.returns.ReturnType;
import fina2.returns.ReturnTypeHome;
import fina2.returns.Schedule;
import fina2.returns.ReturnDefinition;
import fina2.returns.ReturnDefinitionPK;
import fina2.period.Period;
import fina2.period.PeriodPK;
import fina2.FinaException;
import fina2.returns.ScheduleHome;
import fina2.bank.BankHome;
import fina2.returns.ReturnDefinitionHome;
import fina2.period.PeriodHome;
import fina2.returns.SchedulePK;
import fina2.returns.ReturnTypePK;
import fina2.returns.ReturnSessionHome;
import fina2.returns.ReturnSession;
import fina2.period.PeriodTypePK;
import fina2.metadata.MDTConstants;
import fina2.metadata.MDTNode;
import fina2.metadata.MDTNodeHome;
import fina2.metadata.MDTNodePK;
import fina2.metadata.MDTSession;
import fina2.metadata.MDTSessionHome;
import fina2.ui.menu.Menu;
import fina2.ui.menu.MenuConstants;
import fina2.ui.menu.MenuHome;
import fina2.ui.menu.MenuPK;
import fina2.security.Role;
import fina2.security.RoleHome;
import fina2.security.RolePK;
import fina2.security.UserSessionHome;
import fina2.security.UserSession;
import fina2.security.User;
import fina2.security.UserHome;
import fina2.security.UserPK;
import fina2.CodeNotUniqueException;
import fina2.bank.BankGroupPK;
import fina2.bank.BankTypePK;
import fina2.bank.LicenceHome;
import fina2.bank.Licence;
import fina2.bank.LicencePK;
import fina2.bank.LicenceTypePK;
import fina2.bank.BankManag;
import fina2.bank.BankManagHome;
import fina2.bank.BankManagPK;
import fina2.bank.ManagingBodyPK;
import fina2.bank.Branch;
import fina2.bank.BranchHome;
import fina2.bank.BranchPK;
import fina2.bank.BranchManag;
import fina2.bank.BranchManagHome;
import fina2.bank.BranchManagPK;
import fina2.bank.BankRegionPK;

import java.rmi.RemoteException;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;
import javax.transaction.UserTransaction;
import javax.naming.NamingException;
import java.util.Properties;
import java.util.Collection;
import java.util.List;
import javax.transaction.SystemException;
/**
 * Created Nov 5, 2003 12:09:51 PM
 * Code generated by the Sun ONE Studio EJB Builder
 * @author zbokuchava
 */


public class UtilitiesSessionBean implements javax.ejb.SessionBean {
    private javax.ejb.SessionContext context;
    
    
    Properties messages=null;
    /**
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext aContext) {
        context=aContext;
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() {
        
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() {
        
    }
    
    
    /**
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() {
        
    }
    
    
    /**
     * See section 7.10.3 of the EJB 2.0 specification
     */
    public void ejbCreate() {
        
    }
    
    public void bankGroupAmend(fina2.bank.BankGroup bankGroup, Handle langHandle, String code, String desc) throws javax.transaction.SystemException, fina2.CodeNotUniqueException {
        
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(bankGroup == null) {
                InitialContext ctx= new InitialContext();
                Object ref = ctx.lookup("fina2/bank/LicenceType");
                //                    Object ref = ((javax.naming.Context)context).lookup("fina2/bank/LicenceType");
                
                BankGroupHome home = (BankGroupHome)PortableRemoteObject.narrow(ref, BankGroupHome.class);
                bankGroup = home.create();
            }
            bankGroup.setCode(code);
            bankGroup.setDescription(langHandle,desc);
            trans.commit();
        } catch(fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            throw e;
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
            
        }
    }
    public java.lang.String getString(java.lang.String key) {
        String s = messages.getProperty(key);
        return s;
    }
    
    public java.lang.String getString(String key,String def) {
        String s = messages.getProperty(key);
        if(s==null)
            return def;
        return s;
    }
    
    /** Getter for property messages.
     * @return Value of property messages.
     *
     */
    public Properties getMessages() {
        return messages;
    }
    
    /** Setter for property messages.
     * @param messages New value of property messages.
     *
     */
    public void setMessages(Properties messages) {
        this.messages = messages;
    }
    public void languageAmend(Language lang, Handle langHandle, String code, String desc, String fontFace,int fontSize, String dateFormat, String numberFormat, String htmlCharset, String xmlEncoding) throws RemoteException, javax.transaction.SystemException, fina2.CodeNotUniqueException {
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(lang == null) {
                InitialContext ctx= new InitialContext();
                //                Object ref = ((javax.naming.Context)context).lookup("fina2/bank/LicenceType");
                Object ref = ctx.lookup("fina2/bank/LicenceType");
                LanguageHome home = (LanguageHome)PortableRemoteObject.narrow(ref, LanguageHome.class);
                lang = home.create();
            }
            lang.setCode(code);
            lang.setDescription(desc);
            lang.setFontFace(fontFace);
            lang.setFontSize(fontSize);
            lang.setDateFormat(dateFormat);
            lang.setNumberFormat(numberFormat);
            lang.setHtmlCharset(htmlCharset);
            lang.setXmlEncoding(xmlEncoding);
            
            trans.commit();
        } catch(fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            throw e;
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
            
        }
    }
    
    public void licenseTypeAmend(LicenceType licenseType, Handle langHandle, String desc) throws fina2.FinaException, RemoteException, javax.transaction.SystemException {
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(licenseType == null) {
                InitialContext ctx= new InitialContext();
                Object ref = ctx.lookup("fina2/bank/LicenceType");
                LicenceTypeHome home = (LicenceTypeHome)PortableRemoteObject.narrow(ref, LicenceTypeHome.class);
                licenseType = home.create();
            }
            licenseType.setDescription(langHandle, desc);
            trans.commit();
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
        }
    }
    public void bankTypeAmend(fina2.bank.BankType bankType, Handle langHandle, String code, String desc) throws javax.transaction.SystemException, fina2.CodeNotUniqueException {
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(bankType == null) {
                InitialContext ctx= new InitialContext();
                //                Object ref = ((javax.naming.Context)context).lookup("fina2/bank/BankType");
                Object ref = ctx.lookup("fina2/bank/BankType");
                BankTypeHome home = (BankTypeHome)PortableRemoteObject.narrow(ref, BankTypeHome.class);
                bankType = home.create();
            }
            bankType.setCode(code);
            bankType.setDescription(langHandle,desc);
            trans.commit();
        } catch(fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            throw e;
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
            
        }
    }
    
    public void periodTypeAmend(fina2.period.PeriodType periodType, javax.ejb.Handle langHandle, java.lang.String code, java.lang.String desc)  throws javax.transaction.SystemException, fina2.CodeNotUniqueException {
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(periodType== null) {
                InitialContext ctx=new InitialContext();
                Object ref = ctx.lookup("fina2/period/PeriodType");
                PeriodTypeHome home = (PeriodTypeHome)PortableRemoteObject.narrow(ref, PeriodTypeHome.class);
                periodType = home.create();
            }
            periodType.setCode(code);
            periodType.setDescription(langHandle,desc);
            trans.commit();
        } catch(fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            throw e;
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
            
        }
    }
    public void returnTypeAmend(fina2.returns.ReturnType returnType, Handle langHandle, String code, String desc) throws javax.transaction.SystemException, fina2.CodeNotUniqueException {
        UserTransaction trans = context.getUserTransaction();
        try {
            trans.begin();
            if(returnType== null) {
                InitialContext ctx=new InitialContext();
                Object ref = ctx.lookup("fina2/returns/ReturnType");
                //                Object ref = ((javax.naming.Context)context).lookup("fina2/returns/ReturnType");
                ReturnTypeHome home = (ReturnTypeHome)PortableRemoteObject.narrow(ref, ReturnTypeHome.class);
                returnType = home.create();
            }
            returnType.setCode(code);
            returnType.setDescription(langHandle,desc);
            trans.commit();
        } catch(fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            throw e;
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            throw new EJBException(e);
            
        }
    }
    
    //    public void scheduleAmend(Schedule schedule, Bank bank, ReturnDefinition definition, Period period, Handle langHandle, String id, String doa) throws javax.transaction.SystemException, fina2.CodeNotUniqueException {
    public void scheduleAmend(Handle langHandle, int scheduleID, int bankID, int rdID, int periodID, String doa)
    throws javax.transaction.SystemException, fina2.CodeNotUniqueException,
    NamingException, RemoteException,FinderException, fina2.FinaException, RemoveException {
        UserTransaction trans =null;
        Schedule schedule=null;
        Bank bank = null;
        ReturnDefinition definition = null;
        Period period =null;
        
        try {
            InitialContext ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/returns/Schedule");
            ScheduleHome home = (ScheduleHome)PortableRemoteObject.narrow(ref, ScheduleHome.class);
            
            ref = ctx.lookup("fina2/bank/Bank");
            BankHome bankHome = (BankHome)PortableRemoteObject.narrow(ref, BankHome.class);
            ref = ctx.lookup("fina2/returns/ReturnDefinition");
            ReturnDefinitionHome definitionHome = (ReturnDefinitionHome)PortableRemoteObject.narrow(ref, ReturnDefinitionHome.class);
            ref = ctx.lookup("fina2/period/Period");
            PeriodHome periodHome = (PeriodHome)PortableRemoteObject.narrow(ref, PeriodHome.class);
            
            if(scheduleID!=-1) {
                schedule = home.findByPrimaryKey(new SchedulePK(new Integer(scheduleID).intValue()));
                
                bank = bankHome.findByPrimaryKey(new BankPK(bankID));
                
                
                definition = definitionHome.findByPrimaryKey(new ReturnDefinitionPK(rdID));
                
                
                period = periodHome.findByPrimaryKey(new PeriodPK(periodID));
            }
            try {
                if(schedule == null) {
                    if(bankID==-1)
                        throw new FinaException("fina2.returns.bankRequired");
                    else
                        bank = bankHome.findByPrimaryKey(new BankPK(bankID));
                    if(rdID==-1)
                        throw new FinaException("fina2.returns.returnDefinitionRequired");
                    else
                        definition = definitionHome.findByPrimaryKey(new ReturnDefinitionPK(rdID));
                    
                    if(periodID==-1)
                        throw new FinaException("fina2.returns.periodRequired");
                    else
                        period = periodHome.findByPrimaryKey(new PeriodPK(periodID));
                    
                    schedule = home.create(
                    new BankPK(bankID),
                    new ReturnDefinitionPK(rdID),
                    new PeriodPK(periodID)
                    );
                }
            }
            catch(fina2.FinaException e) {
                e.printStackTrace();
                throw e;
            } catch(Exception e) {
                e.printStackTrace();
                throw new EJBException(e);
            }
            
            trans = context.getUserTransaction();
            
            trans.begin();
            if(bank != null) {
                schedule.setBankPK((BankPK)bank.getPrimaryKey());
            } else {
                throw new FinaException("fina2.returns.bankRequired");
            }
            if(definition != null) {
                schedule.setReturnDefinitionPK((ReturnDefinitionPK)definition.getPrimaryKey());
            } else {
                throw new FinaException("fina2.returns.returnDefinitionRequired");
            }
            if(period != null) {
                schedule.setPeriodPK((PeriodPK)period.getPrimaryKey());
            } else {
                throw new FinaException("fina2.returns.periodRequired");
            }
            Integer del = new Integer(doa);
            schedule.setDelay(del.intValue());
            trans.commit();
        }
        catch(fina2.FinaException e) {
            if(schedule != null) {
                schedule.remove();
                schedule = null;
            }
            e.printStackTrace();
            if(trans!=null)
                trans.rollback();
            throw e;
        } catch(EJBException e) {
            if(schedule != null) {
                schedule.remove();
                schedule = null;
            }
            e.printStackTrace();
            if(trans!=null)
                trans.rollback();
            throw e;
            
        } catch(Exception e) {
            if(schedule != null) {
                schedule.remove();
                schedule = null;
            }
            e.printStackTrace();
            if(trans!=null)
                trans.rollback();
            throw new EJBException(e);
            
        }
    }
    public void returnDefinitionAmend(Handle langHandle, int id, String code, String desc, int typeID, Collection tables)
    throws javax.transaction.SystemException, fina2.CodeNotUniqueException,
    NamingException, RemoteException,FinderException, fina2.FinaException, RemoveException {
        UserTransaction trans =null;
        ReturnDefinition returnDefinition=null;
        InitialContext ctx=new InitialContext();
        Object ref = ctx.lookup("fina2/returns/ReturnDefinition");
        ReturnDefinitionHome home = (ReturnDefinitionHome)PortableRemoteObject.narrow(ref, ReturnDefinitionHome.class);
        
        try {
            if(id== -1) {
                returnDefinition = home.create();
            }
            else
                returnDefinition = home.findByPrimaryKey(new ReturnDefinitionPK(new Integer(id).intValue()));
            
        } catch(Exception e) {
            e.printStackTrace();
            if(id == -1)
                returnDefinition = null;
            throw new EJBException(e);
        }
        
        try {
            trans = context.getUserTransaction();
            trans.begin();
            returnDefinition.setCode(code);
            returnDefinition.setDescription(langHandle,desc);
            
            if(typeID != -1)
                returnDefinition.setType(new ReturnTypePK(new Integer(typeID).intValue()));
            
            ref = ctx.lookup("fina2/returns/ReturnSession");
            ReturnSessionHome returnSessionHome = (ReturnSessionHome)PortableRemoteObject.narrow(ref, ReturnSessionHome.class);
            ReturnSession returnSession = returnSessionHome.create();
            returnSession.setDefinitionTables(langHandle, (ReturnDefinitionPK)returnDefinition.getPrimaryKey(), tables);
            trans.commit();
        } catch(java.rmi.RemoteException e) {//fina2.CodeNotUniqueException e) {
            e.printStackTrace();
            trans.rollback();
            if(returnDefinition == null) {
                returnDefinition.remove();
                returnDefinition = null;
            }
            throw new FinaException("fina2.returns.returnDefinitionCodeNotUnique");
        } catch(Exception e) {
            e.printStackTrace();
            trans.rollback();
            if(returnDefinition == null) {
                returnDefinition.remove();
                returnDefinition = null;
            }
            throw new EJBException(e);
        }
    }
    public void periodDefinitionAmend(Handle langHandle, int id, int typeID, String periodNumber, String fromDate, String toDate)
    throws javax.transaction.SystemException, fina2.CodeNotUniqueException,
    NamingException, RemoteException,FinderException, fina2.FinaException, RemoveException {
        
        if(typeID == -1) return;
        UserTransaction trans =null;
        Period period=null;
        InitialContext ctx=new InitialContext();
        Object ref = ctx.lookup("fina2/period/Period");
        PeriodHome home = (PeriodHome)PortableRemoteObject.narrow(ref, PeriodHome.class);
        try {
            try {
                if(id == -1) {
                    period = home.create();
                }
                else {
                    PeriodPK pk = new PeriodPK(new Integer(id).intValue());
                    period = home.findByPrimaryKey(pk);
                }
            } catch(Exception e) {
                e.printStackTrace();
                if(id == -1)
                    period = null;
                throw e;
            }
            trans = context.getUserTransaction();
            trans.begin();
            
            try {
                
                if(typeID != -1)
                    period.setType(new PeriodTypePK(typeID));
                period.setPeriodNumber(periodNumber);
                period.setFromDate(langHandle, fromDate);
                period.setToDate(langHandle, toDate);
                trans.commit();
            } catch(fina2.CodeNotUniqueException e) {
                e.printStackTrace();
                trans.rollback();
                if(period == null) {
                    period.remove();
                    period = null;
                }
                throw new FinaException("fina2.period.periodNotUnique");
            } catch(java.text.ParseException e) {
                e.printStackTrace();
                trans.rollback();
                if(period == null) {
                    period.remove();
                    period = null;
                }
                throw new FinaException("fina2.invalidDateFormat");
            } catch(Exception e) {
                e.printStackTrace();
                trans.rollback();
                if(period == null) {
                    period.remove();
                    period = null;
                }
                throw new EJBException(e);
            }
        } catch(EJBException e) {
            throw e;
        } catch(Exception e) {
            throw new EJBException(e);
        }
    }
    public void test() throws RemoteException {
    }
    
    //vano
    public void mdtNodeAmend(Handle langHandle,int node,int parent,String code,String description,int type,int evalMethod,
    boolean required,Collection compRules) throws RemoteException,fina2.FinaException {
        UserTransaction trans =null;
        MDTNode nodeObj=null;
        MDTNode parentObj=null;
        InitialContext ctx=null;
        Object ref=null;
        MDTNodeHome home=null;
        MDTSession session=null;
        
        try {
            ctx=new InitialContext();
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not create context");
        }
        
        try {
            ref = ctx.lookup("fina2/metadata/MDTNode");
            home = (MDTNodeHome)PortableRemoteObject.narrow(ref, MDTNodeHome.class);
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not lookup fina2/metadata/MDTNode");
        }
        
        if(node!=-1) {
            try {
                nodeObj=home.findByPrimaryKey(new MDTNodePK(node));
            }
            catch(FinderException fe) {
                throw new FinaException("fina2.metadata.nodeNotFound");
            }
        }
        
        try {
            ref = ctx.lookup("fina2/metadata/MDTSession");
            MDTSessionHome sessionHome = (MDTSessionHome)PortableRemoteObject.narrow(ref, MDTSessionHome.class);
            
            session = sessionHome.create();
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not lookup fina2/metadata/MDTSession");
        }
        catch(CreateException ce) {
            ce.printStackTrace();
            throw new RemoteException("Could not create MDTSessionHome object");
        }
        
        try {
            trans = context.getUserTransaction();
            trans.begin();
            
            if(nodeObj == null) {
                nodeObj = home.create(new MDTNodePK(parent));
                nodeObj.setType(MDTConstants.NODETYPE_NODE);
            }
            
            nodeObj.setDescription(
            langHandle,
            description
            );
            try {
                if(code.length()>0)
                    nodeObj.setCode(code);
                else
                    nodeObj.setCode(String.valueOf(((MDTNodePK)nodeObj.getPrimaryKey()).getId()));
            }
            catch(Exception e) {
                throw new FinaException("fina2.metadata.codeNotUnique");
            }
            
            switch(type) {
                case 0:
                    nodeObj.setDataType(MDTConstants.DATATYPE_NUMERIC);
                    break;
                case 1:
                    nodeObj.setDataType(MDTConstants.DATATYPE_TEXT);
                    break;
            }
            
            switch(evalMethod) {
                case 0:
                    nodeObj.setEvalMethod(0);
                    break;
                case 1:
                    nodeObj.setEvalMethod(MDTConstants.EVAL_SUM);
                    break;
                case 2:
                    nodeObj.setEvalMethod(MDTConstants.EVAL_AVERAGE);
                    break;
                case 3:
                    nodeObj.setEvalMethod(MDTConstants.EVAL_MIN);
                    break;
                case 4:
                    nodeObj.setEvalMethod(MDTConstants.EVAL_MAX);
                    break;
                case 5:
                    nodeObj.setEvalMethod(MDTConstants.EVAL_EQUATION);
                    break;
            }
            
            nodeObj.setRequired(required ? 1 : 0);
            
            session.setComparisons((MDTNodePK)nodeObj.getPrimaryKey(), compRules);
            trans.commit();
        }
        catch(FinaException e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw e;
        }
        //        catch(CodeNotUniqueException cnue)
        //        {
        //            if(trans!=null)
        //            {
        //                try
        //                {
        //                    trans.rollback();
        //                }
        //                catch(SystemException ignored){}
        //            }
        //            throw new FinaException("fina2.metadata.codeNotUnique");
        //        }
        catch(Exception e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw new RemoteException("System Error",e);
        }
        
    }
    
    public void mdtInputAmend(Handle langHandle,int node,int parent,String code,String description,int type,
    boolean required,Collection compRules) throws  RemoteException,fina2.FinaException {
        UserTransaction trans =null;
        MDTNode nodeObj=null;
        MDTNode parentObj=null;
        InitialContext ctx=null;
        MDTNodeHome home = null;
        Object ref = null;
        MDTSession session =null;
        try {
            ctx=new InitialContext();
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not create context");
        }
            
        try{
            ref = ctx.lookup("fina2/metadata/MDTNode");
            home = (MDTNodeHome)PortableRemoteObject.narrow(ref, MDTNodeHome.class);
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not lookup fina2/metadata/MDTNode");
        }
            
        if(node!=-1) {
            try{
                nodeObj=home.findByPrimaryKey(new MDTNodePK(node));
            }
            catch(FinderException fe) {
                throw new FinaException("fina2.metadata.nodeNotFound");
            }
        }
            /*if(parent!=-1)
            {
                parentObj=home.findByPrimaryKey(new MDTNodePK(parent));
            }*/
        try{
            ref = ctx.lookup("fina2/metadata/MDTSession");
            MDTSessionHome sessionHome = (MDTSessionHome)PortableRemoteObject.narrow(ref, MDTSessionHome.class);
            
            session = sessionHome.create();
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not lookup fina2/metadata/MDTSession");
        }
        catch(CreateException ce) {
            ce.printStackTrace();
            throw new RemoteException("Could not create MDTSessionHome object");
        }
        try{
            trans = context.getUserTransaction();
            trans.begin();

            if(nodeObj == null) {
                nodeObj = home.create(new MDTNodePK(parent));
                nodeObj.setType(MDTConstants.NODETYPE_INPUT);
            }

            nodeObj.setDescription(
            langHandle,
            description
            );
                
            try{
                if(code.length()>0)
                    nodeObj.setCode(code);
                else
                    nodeObj.setCode(String.valueOf(((MDTNodePK)nodeObj.getPrimaryKey()).getId()));
            }
            catch(Exception e) {
                throw new FinaException("fina2.metadata.codeNotUnique");
            }
                
            switch(type) {
                case 0:
                    nodeObj.setDataType(MDTConstants.DATATYPE_NUMERIC);
                    break;
                case 1:
                    nodeObj.setDataType(MDTConstants.DATATYPE_TEXT);
                    break;
            }

            nodeObj.setRequired(required ? 1 : 0);

            session.setComparisons((MDTNodePK)nodeObj.getPrimaryKey(), compRules);

            trans.commit(); 
//////////////////
        }
        catch(FinaException e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw e;
        }
        catch(Exception e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw new RemoteException("System Error",e);
        }
    }
    
    public void mdtVariableAmend(Handle langHandle,int node,int parent,String code,String description,String source,List refNodes,
    boolean required,Collection compRules) throws  RemoteException, fina2.FinaException {
        UserTransaction trans =null;
        MDTNode nodeObj=null;
        MDTNode parentObj=null;
        InitialContext ctx=null;
        MDTSession session=null;
        MDTNodeHome home =null;
        MDTSessionHome sessionHome =null;
        try {
            ctx=new InitialContext();
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not create context");
        }
        
        try {
            Object ref = ctx.lookup("fina2/metadata/MDTNode");
            home = (MDTNodeHome)PortableRemoteObject.narrow(ref, MDTNodeHome.class);
            
            ref = ctx.lookup("fina2/metadata/MDTSession");
            sessionHome = (MDTSessionHome)PortableRemoteObject.narrow(ref, MDTSessionHome.class);
        }
        catch(NamingException ne) {
            ne.printStackTrace();
            throw new RemoteException("Could not lookup fina2/metadata/MDTNode or fina2/metadata/MDTSession");
        }
        
        try {
            session = sessionHome.create();
        }
        catch(CreateException ce) {
            ce.printStackTrace();
            throw new RemoteException("Could not create MDTSessionHome object");
        }
        
        try {
            trans = context.getUserTransaction();
            trans.begin();
            
            if(node!=-1) {
                nodeObj=home.findByPrimaryKey(new MDTNodePK(node));
            }
            /*if(parent!=-1)
            {
                parentObj=home.findByPrimaryKey(new MDTNodePK(parent));
            }*/
            
            
            if(nodeObj == null) {
                nodeObj = home.create(new MDTNodePK(parent));
                nodeObj.setType(MDTConstants.NODETYPE_VARIABLE);
            }
            nodeObj.setDescription(
            langHandle,
            description
            );
            try {
                if(code.length()>0)
                    nodeObj.setCode(code);
                else
                    nodeObj.setCode(String.valueOf(((MDTNodePK)nodeObj.getPrimaryKey()).getId()));
            }
            catch(Exception e) {
                throw new FinaException("fina2.metadata.codeNotUnique");
            }
            
            if(refNodes!=null) {
                nodeObj.setEquation(source);
                session.setDependentNodes(
                (MDTNodePK)nodeObj.getPrimaryKey(),
                refNodes
                );
            }
            
            nodeObj.setRequired(required ? 1 : 0);
            
            session.setComparisons((MDTNodePK)nodeObj.getPrimaryKey(), compRules);
            trans.commit();
        }
        
        catch(fina2.FinaException e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw e;
        }
        catch(Exception e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException ignored)
                {}
            }
            throw new RemoteException("System Error",e);
        }
    }
    public void menuAmend(Handle langHandle,int node,int parent,String description) throws RemoteException,RemoveException,FinderException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        System.out.println("menuAmend");
        Menu nodeObj=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/ui/menu/Menu");
            MenuHome home = (MenuHome)PortableRemoteObject.narrow(ref, MenuHome.class);
            
            if(node!=-1) {
                nodeObj=home.findByPrimaryKey(new MenuPK(node));
            }
            else {
                nodeObj = home.create(new MenuPK(parent));
            }
            trans = context.getUserTransaction();
            
            try {
                trans.begin();
                nodeObj.setDescription(langHandle, description);
                trans.commit();
            }
            catch(Exception e) {
                trans.rollback();
                throw e;
            }
        }
        catch(Exception e) {
            e.printStackTrace();
            throw new EJBException(e);
        }
    }
    
    public void menuItemAmend(Handle langHandle,int node,int parent,String description,int type,String action,String app) throws RemoteException,RemoveException,FinderException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        Menu nodeObj=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/ui/menu/Menu");
            MenuHome home = (MenuHome)PortableRemoteObject.narrow(ref, MenuHome.class);
            
            if(node!=-1) {
                nodeObj=home.findByPrimaryKey(new MenuPK(node));
            }
            else {
                nodeObj = home.create(new MenuPK(parent));
            }
            trans = context.getUserTransaction();
            System.out.println("type="+type);
            try {
                trans.begin();
                nodeObj.setDescription(langHandle, description);
                switch(type) {
                    case 0:
                        nodeObj.setType(MenuConstants.MENU_ACTION_TYPE);
                        nodeObj.setActionKey(action);
                        break;
                    case 1:
                        nodeObj.setType(MenuConstants.MENU_APPLICATION_TYPE);
                        nodeObj.setApplication(app);
                        break;
                }
                
                trans.commit();
            }
            catch(Exception e) {
                trans.rollback();
                throw e;
            }
        }
        catch(Exception e) {
            e.printStackTrace();
            throw new EJBException(e);
        }
    }
    public void roleAmend(Handle langHandle,int roleID,String description,Collection permissions) throws RemoteException,fina2.FinaException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        Role roleObj=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/security/Role");
            RoleHome home = (RoleHome)PortableRemoteObject.narrow(ref, RoleHome.class);
            
            ref = ctx.lookup("fina2/security/UserSession");
            UserSessionHome sessionHome = (UserSessionHome)PortableRemoteObject.narrow(ref, UserSessionHome.class);
            
            UserSession userSession = sessionHome.create();
            
            trans = context.getUserTransaction();
            
            trans.begin();
            
            if(roleID!=-1) {
                roleObj=home.findByPrimaryKey(new RolePK(roleID));
            }
            else {
                roleObj = home.create();
            }
            
            
            roleObj.setDescription(langHandle, description);
            userSession.setRolePermissions((RolePK)roleObj.getPrimaryKey(),permissions);
            
            trans.commit();
        }
        catch(CodeNotUniqueException e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(Exception e1)
                {}
            }
            e.printStackTrace();
            throw new fina2.FinaException("fina2.security.roleNotUnique");
        }
        catch(Exception e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(Exception e1)
                {}
            }
            e.printStackTrace();
            throw new RemoteException("System Error", e);
        }
    }
    
    public void userAmend(Handle langHandle,int userID,String login,String pass,String name,String title,String phone,String email,Collection roles,Collection permissions,Collection banks,Collection reports) throws RemoteException,fina2.FinaException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        User userObj=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/security/User");
            UserHome home = (UserHome)PortableRemoteObject.narrow(ref, UserHome.class);
            
            trans = context.getUserTransaction();
            trans.begin();
            
            if(userID!=-1) {
                userObj=home.findByPrimaryKey(new UserPK(userID));
            }
            else {
                userObj = home.create();
            }
            
            ref = ctx.lookup("fina2/security/UserSession");
            UserSessionHome sessionHome = (UserSessionHome)PortableRemoteObject.narrow(ref, UserSessionHome.class);
            
            UserSession userSession = sessionHome.create();
            
            userObj.setLogin(login);
            userObj.setPassword(pass);
            userObj.setName(langHandle, name);
            userObj.setTitle(langHandle,title);
            userObj.setPhone(phone);
            userObj.setEmail(email);
            
            userSession.setUserRoles((UserPK)userObj.getPrimaryKey(),roles);
            userSession.setUserPermissions((UserPK)userObj.getPrimaryKey(),permissions);
            userSession.setUserBanksPermissionsRows((UserPK)userObj.getPrimaryKey(),banks);
            userSession.setUserReportsPermissionsRows((UserPK)userObj.getPrimaryKey(),reports);
            
            trans.commit();
            //                }
            //                catch(Exception e)
            //                {
            //                    trans.rollback();
            //                    throw e;
            //                }
        }
        catch(CodeNotUniqueException e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(Exception e1)
                {}
            }
            e.printStackTrace();
            throw new fina2.FinaException("fina2.security.loginNotUnique");
        }
        catch(Exception e) {
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(Exception e1)
                {}
            }
            e.printStackTrace();
            throw new RemoteException("System Error", e);
        }
    }
    public void bankAmend(Handle langHandle,Handle userHandle,int bankID,int groupID,String code,String shortName,String swift,String name,String address,String phone,String fax,String email,String telex,int typeID) throws RemoteException,FinderException,CodeNotUniqueException,RemoveException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        Bank bank=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/bank/Bank");
            
            BankHome home = (BankHome)PortableRemoteObject.narrow(ref, BankHome.class);
            
            Object refUser = ctx.lookup("fina2/security/UserSession");
            UserSessionHome homeUser = (UserSessionHome)PortableRemoteObject.narrow(refUser, UserSessionHome.class);
            
            UserSession sessionUser = homeUser.create();
            
            if(bankID==-1) {
                bank = home.create();
                sessionUser.setUserBank((fina2.security.UserPK)((fina2.security.User)userHandle.getEJBObject()).getPrimaryKey(), (BankPK)bank.getPrimaryKey());
            }
            else {
                bank=home.findByPrimaryKey(new BankPK(bankID));
            }
            
            trans = context.getUserTransaction();
            trans.begin();
            
            bank.setGroupPK(new BankGroupPK(groupID));
            bank.setCode(code);
            bank.setShortName(langHandle, shortName);
            bank.setSwiftCode(swift);
            bank.setName(langHandle, name);
            bank.setAddress(langHandle, address);
            bank.setPhone(phone);
            bank.setFax(fax);
            bank.setEmail(email);
            bank.setTelex(telex);
            bank.setTypePK(new BankTypePK(typeID));
            
            trans.commit();
        }
        catch(Exception e) {
            e.printStackTrace();
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException se) {
                    se.printStackTrace();
                    throw new EJBException(se.getMessage());
                }
            }
            if(bankID==-1 && bank!=null) {
                bank.remove();
                bank=null;
            }
            throw new EJBException(e.getMessage());
        }
    }
    
    public void licenseAmend(Handle langHandle,int bankID,int licenseID,int typeID,String code,String ldate,String lcdate,String reason,boolean oper) throws RemoteException,FinderException,RemoveException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        Licence license=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/bank/Licence");
            
            LicenceHome home = (LicenceHome)PortableRemoteObject.narrow(ref, LicenceHome.class);
            
            if(licenseID==-1) {
                license=home.create();
                license.setBankPK(new BankPK(bankID));
            }
            else {
                license=home.findByPrimaryKey(new LicencePK(licenseID));
            }
            
            trans = context.getUserTransaction();
            trans.begin();
            
            license.setTypePK(new LicenceTypePK(typeID));
            license.setCode(code);
            license.setDate(langHandle, ldate);
            license.setDateOfChange(langHandle,lcdate);
            license.setReason(langHandle, reason);
            license.setOperational(oper ? 1 : 0);
            
            trans.commit();
        }
        catch(Exception e) {
            e.printStackTrace();
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException se) {
                    se.printStackTrace();
                    throw new EJBException(se.getMessage());
                }
            }
            if(licenseID==-1 && license!=null) {
                license.remove();
                license=null;
            }
            throw new EJBException(e.getMessage());
        }
    }
    
    public void bankManagAmend(Handle langHandle,int bankID,int managID,int managBodyID,String name,String lastName,String post,String phone,String appdate,String candate,String regform1,String regform2,String regform3,String comment1,String comment2) throws RemoteException,FinderException,RemoveException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        BankManag manag=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/bank/BankManag");
            
            BankManagHome home = (BankManagHome)PortableRemoteObject.narrow(ref, BankManagHome.class);
            
            if(managID==-1) {
                manag=home.create();
                manag.setBankPK(new BankPK(bankID));
            }
            else {
                manag=home.findByPrimaryKey(new BankManagPK(managID));
            }
            
            trans = context.getUserTransaction();
            trans.begin();
            
            manag.setName(langHandle,name);
            manag.setLasttName(langHandle,lastName);
            manag.setManagingBodyPK(new ManagingBodyPK(managBodyID));
            manag.setPost(langHandle,post);
            manag.setPhone(phone);
            manag.setDate(langHandle,appdate);
            manag.setDateOfChange(langHandle,candate);
            manag.setRegistration1(langHandle, regform1);
            manag.setRegistration2(langHandle, regform2);
            manag.setRegistration3(langHandle, regform3);
            manag.setComments1(langHandle, comment1);
            manag.setComments2(langHandle, comment2);
            trans.commit();
        }
        catch(Exception e) {
            e.printStackTrace();
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException se) {
                    se.printStackTrace();
                    throw new EJBException(se.getMessage());
                }
            }
            if(managID==-1 && manag!=null) {
                manag.remove();
                manag=null;
            }
            throw new EJBException(e.getMessage());
        }
    }
    
    public void branchAmend(Handle langHandle,int bankID,int branchID,int regionID,String branchName,String shortName,String branchAddress,String estdate,String candate,String comment)  throws RemoteException,FinderException,RemoveException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        Branch branch=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/bank/Branch");
            
            BranchHome home = (BranchHome)PortableRemoteObject.narrow(ref, BranchHome.class);
            
            if(branchID==-1) {
                branch=home.create();
                branch.setBankPK(new BankPK(bankID));
            }
            else {
                branch=home.findByPrimaryKey(new BranchPK(branchID));
            }
            
            trans = context.getUserTransaction();
            trans.begin();
            
            branch.setName(langHandle, branchName);
            branch.setBankRegionPK(new BankRegionPK(regionID));
            branch.setShortName(langHandle,shortName);
            branch.setAddress(langHandle, branchAddress);
            branch.setDate(langHandle, estdate);
            branch.setDateOfChange(langHandle,candate);
            branch.setComments(langHandle, comment);
            
            trans.commit();
            
        }
        catch(Exception e) {
            e.printStackTrace();
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException se) {
                    se.printStackTrace();
                    throw new EJBException(se.getMessage());
                }
            }
            if(branchID==-1 && branch!=null) {
                branch.remove();
                branch=null;
            }
            throw new EJBException(e.getMessage());
        }
    }
    public void branchManagAmend(Handle langHandle,int bankID,int managID,int managBodyID,String name,String lastName,String post,String phone,String appdate,String candate,String regform1,String regform2,String regform3,String comment1,String comment2) throws RemoteException,FinderException,RemoveException {
        UserTransaction trans =null;
        InitialContext ctx=null;
        
        BranchManag manag=null;
        
        try {
            ctx=new InitialContext();
            Object ref = ctx.lookup("fina2/bank/BranchManag");
            
            BranchManagHome home = (BranchManagHome)PortableRemoteObject.narrow(ref, BranchManagHome.class);
            
            if(managID==-1) {
                manag=home.create();
                manag.setBranchPK(new BranchPK(bankID));
            }
            else {
                manag=home.findByPrimaryKey(new BranchManagPK(managID));
            }
            
            trans = context.getUserTransaction();
            trans.begin();
            
            manag.setName(langHandle,name);
            manag.setLasttName(langHandle,lastName);
            manag.setManagingBodyPK(new ManagingBodyPK(managBodyID));
            manag.setPost(langHandle,post);
            manag.setPhone(phone);
            manag.setDate(langHandle,appdate);
            manag.setDateOfChange(langHandle,candate);
            manag.setRegistration1(langHandle, regform1);
            manag.setRegistration2(langHandle, regform2);
            manag.setRegistration3(langHandle, regform3);
            manag.setComments1(langHandle, comment1);
            manag.setComments2(langHandle, comment2);
            trans.commit();
        }
        catch(Exception e) {
            e.printStackTrace();
            if(trans!=null) {
                try {
                    trans.rollback();
                }
                catch(SystemException se) {
                    se.printStackTrace();
                    throw new EJBException(se.getMessage());
                }
            }
            if(managID==-1 && manag!=null) {
                manag.remove();
                manag=null;
            }
            throw new EJBException(e.getMessage());
        }
    }
    //end vano
}


