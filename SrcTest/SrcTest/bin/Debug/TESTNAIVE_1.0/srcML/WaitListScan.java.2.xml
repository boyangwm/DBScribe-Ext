<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\WaitListScan.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<comment type="block" format="javadoc" pos:line="3" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<class><specifier pos:line="5" pos:column="1">public</specifier> class <name pos:line="5" pos:column="14">WaitListScan</name> <super><implements pos:line="5" pos:column="27">implements <name pos:line="5" pos:column="38">Runnable</name></implements></super><block pos:line="5" pos:column="46">{

	<function><type><annotation pos:line="7" pos:column="9">@<name pos:line="7" pos:column="10">Override</name></annotation>
	<specifier pos:line="8" pos:column="9">public</specifier> <name pos:line="8" pos:column="16">void</name></type> <name pos:line="8" pos:column="21">run</name><parameter_list pos:line="8" pos:column="24">()</parameter_list> <block pos:line="8" pos:column="27">{
		<expr_stmt><expr><call><name><name pos:line="9" pos:column="17">System</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">out</name><op:operator pos:line="9" pos:column="27">.</op:operator><name pos:line="9" pos:column="28">println</name></name><argument_list pos:line="9" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="9" pos:column="36">"Starting a new scan"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="10" pos:column="17">WaitList</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">scanWaitList</name></name><argument_list pos:line="10" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="11" pos:column="17">System</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">out</name><op:operator pos:line="11" pos:column="27">.</op:operator><name pos:line="11" pos:column="28">println</name></name><argument_list pos:line="11" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="11" pos:column="36">"Scanning cycle complete"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="12" pos:column="17">try <block pos:line="12" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="13" pos:column="25">Thread</name><op:operator pos:line="13" pos:column="31">.</op:operator><name pos:line="13" pos:column="32">sleep</name></name><argument_list pos:line="13" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="13" pos:column="38">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="14" pos:column="25">Thread</name><op:operator pos:line="14" pos:column="31">.</op:operator><name pos:line="14" pos:column="32">yield</name></name><argument_list pos:line="14" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="15" pos:column="19">catch <parameter_list pos:line="15" pos:column="25">(<param><decl><type><name pos:line="15" pos:column="26">InterruptedException</name></type> <name pos:line="15" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="15" pos:column="50">{
			<expr_stmt><expr><call><name><name pos:line="16" pos:column="25">System</name><op:operator pos:line="16" pos:column="31">.</op:operator><name pos:line="16" pos:column="32">out</name><op:operator pos:line="16" pos:column="35">.</op:operator><name pos:line="16" pos:column="36">println</name></name><argument_list pos:line="16" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="44">"Scanning Interrupted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="17" pos:column="25">e</name><op:operator pos:line="17" pos:column="26">.</op:operator><name pos:line="17" pos:column="27">printStackTrace</name></name><argument_list pos:line="17" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
}</block></class>
</unit>
