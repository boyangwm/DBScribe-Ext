<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Admin.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">Connection</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">SQLException</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="10" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="15" pos:column="1">/*************** ADMIN.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">Admin</name> <super><extends pos:line="17" pos:column="20">extends <name pos:line="17" pos:column="28">Employee</name></extends></super> <block pos:line="17" pos:column="37">{


	<comment type="block" pos:line="20" pos:column="9">/* this constructor calls the employee class constructor by UIN */</comment>
	<constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">Admin</name><parameter_list pos:line="21" pos:column="21">(<param><decl><type><name pos:line="21" pos:column="22">int</name></type> <name pos:line="21" pos:column="26">UIN</name></decl></param>)</parameter_list> <throws pos:line="21" pos:column="31">throws <argument><expr><name pos:line="21" pos:column="38">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="21" pos:column="66">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">super</name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="23" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block" pos:line="26" pos:column="9">/*
	 * addAdmin function takes in the inputs of the name of the employee and the
	 * department object.
	 * 
	 * checks if the department object is not null
	 * 
	 * calls the add into the database which returns(int) the added UIN.
	 * 
	 * with the retrieved UIN, it is then added into the employee table.
	 * 
	 * if returns true then it is successfully added
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name pos:line="40" pos:column="23">boolean</name></type> <name pos:line="40" pos:column="31">addAdmin</name><parameter_list pos:line="40" pos:column="39">(<param><decl><type><name pos:line="40" pos:column="40">String</name></type> <name pos:line="40" pos:column="47">name</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="53">Department</name></type> <name pos:line="40" pos:column="64">dept</name></decl></param>)</parameter_list> <throws pos:line="40" pos:column="70">throws <argument><expr><name pos:line="40" pos:column="77">loginDetailsnotAdded</name></expr></argument></throws> <block pos:line="40" pos:column="98">{

		<decl_stmt><decl><type><name pos:line="42" pos:column="17">boolean</name></type> <name pos:line="42" pos:column="25">isAdded</name> <init pos:line="42" pos:column="33">= <expr><lit:literal type="boolean" pos:line="42" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="42" pos:column="42">//create a boolean value for returning. set it to false</comment>

		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">dept</name> <op:operator pos:line="44" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="44" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="44" pos:column="34"> <block pos:line="44" pos:column="35">{
			<comment type="line" pos:line="45" pos:column="25">//if the dept object is null then return false</comment>
			<return pos:line="46" pos:column="25">return <expr><lit:literal type="boolean" pos:line="46" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">name</name> <op:operator pos:line="49" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="49" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="49" pos:column="34"> <block pos:line="49" pos:column="35">{
			<comment type="line" pos:line="50" pos:column="25">//if the name is null then return false</comment>
			<return pos:line="51" pos:column="25">return <expr><lit:literal type="boolean" pos:line="51" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><call><name><name pos:line="54" pos:column="21">name</name><op:operator pos:line="54" pos:column="25">.</op:operator><name pos:line="54" pos:column="26">length</name></name><argument_list pos:line="54" pos:column="32">()</argument_list></call><op:operator pos:line="54" pos:column="34">==</op:operator><lit:literal type="number" pos:line="54" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="54" pos:column="38"> <block pos:line="54" pos:column="39">{
			<comment type="line" pos:line="55" pos:column="25">//if the name is null then return false</comment>
			<return pos:line="56" pos:column="25">return <expr><lit:literal type="boolean" pos:line="56" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="59" pos:column="17">int</name></type> <name pos:line="59" pos:column="21">addedUIN</name> <init pos:line="59" pos:column="30">= <expr><call><name><name pos:line="59" pos:column="32">Employee</name><op:operator pos:line="59" pos:column="40">.</op:operator><name pos:line="59" pos:column="41">addIntoDatabase</name></name><argument_list pos:line="59" pos:column="56">(<argument><expr><name pos:line="59" pos:column="57">name</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="63">dept</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="59" pos:column="72">//add the admin into the database with the name, dept and position ID</comment>

		<decl_stmt><decl><type><name pos:line="61" pos:column="17">boolean</name></type> <name pos:line="61" pos:column="25">isAddedtoEmp</name> <init pos:line="61" pos:column="38">= <expr><call><name><name pos:line="61" pos:column="40">Employee</name><op:operator pos:line="61" pos:column="48">.</op:operator><name pos:line="61" pos:column="49">addEmployee</name></name><argument_list pos:line="61" pos:column="60">(<argument><expr><name pos:line="61" pos:column="61">addedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="61" pos:column="71">//returns true if added</comment>

		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">isAddedtoEmp</name></expr>)</condition><then pos:line="63" pos:column="34">
			<expr_stmt><expr><name pos:line="64" pos:column="25">isAdded</name> <op:operator pos:line="64" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="64" pos:column="35">true</lit:literal></expr>;</expr_stmt></then></if><comment type="line" pos:line="64" pos:column="40">//return true</comment>

		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">isAdded</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="69" pos:column="9">/*
	 * getAllAdmin function returns an arraylist of the admins from the
	 * database.
	 * 
	 * It retrieves the data from the people table.
	 */</comment>
	<function><type><specifier pos:line="75" pos:column="9">public</specifier> <specifier pos:line="75" pos:column="16">static</specifier> <name><name pos:line="75" pos:column="23">ArrayList</name><argument_list pos:line="75" pos:column="32">&lt;<argument><name pos:line="75" pos:column="33">Admin</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="40">getAllAdmin</name><parameter_list pos:line="75" pos:column="51">()</parameter_list> <block pos:line="75" pos:column="54">{
		<comment type="line" pos:line="76" pos:column="17">// if(Professor == null)</comment>
		<comment type="line" pos:line="77" pos:column="17">// throw new NullPointerException();</comment>

		<decl_stmt><decl><type><name><name pos:line="79" pos:column="17">ArrayList</name><argument_list pos:line="79" pos:column="26">&lt;<argument><name pos:line="79" pos:column="27">Admin</name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="34">getAllAdmin</name> <init pos:line="79" pos:column="46">= <expr><op:operator pos:line="79" pos:column="48">new</op:operator> <call><name><name pos:line="79" pos:column="52">ArrayList</name><argument_list pos:line="79" pos:column="61">&lt;<argument><name pos:line="79" pos:column="62">Admin</name></argument>&gt;</argument_list></name><argument_list pos:line="79" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="79" pos:column="71">//declare a arraylist</comment>

		<try pos:line="81" pos:column="17">try <block pos:line="81" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="82" pos:column="25">Connection</name></type> <name pos:line="82" pos:column="36">conn</name> <init pos:line="82" pos:column="41">= <expr><call><name><name pos:line="82" pos:column="43">Database</name><op:operator pos:line="82" pos:column="51">.</op:operator><name pos:line="82" pos:column="52">getConnection</name></name><argument_list pos:line="82" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="82" pos:column="68">//establish a connection</comment>

			<try pos:line="84" pos:column="25">try <block pos:line="84" pos:column="29">{
				<if pos:line="85" pos:column="33">if <condition pos:line="85" pos:column="36">(<expr><name pos:line="85" pos:column="37">conn</name> <op:operator pos:line="85" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="85" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="85" pos:column="50"> <block pos:line="85" pos:column="51">{

					<comment type="line" pos:line="87" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="88" pos:column="41">String</name></type> <name pos:line="88" pos:column="48">adminSelect</name> <init pos:line="88" pos:column="60">= <expr><lit:literal type="string" pos:line="88" pos:column="62">"Select *"</lit:literal> <op:operator pos:line="88" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="88" pos:column="75">" FROM people"</lit:literal>
							<op:operator pos:line="89" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="89" pos:column="59">" WHERE PositionID=1"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="90" pos:column="41">PreparedStatement</name></type> <name pos:line="90" pos:column="59">statement</name> <init pos:line="90" pos:column="69">= <expr><call><name><name pos:line="90" pos:column="71">conn</name><op:operator pos:line="90" pos:column="75">.</op:operator><name pos:line="90" pos:column="76">prepareStatement</name></name><argument_list pos:line="90" pos:column="92">(<argument><expr><name pos:line="90" pos:column="93">adminSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="91" pos:column="41">ResultSet</name></type> <name pos:line="91" pos:column="51">rs</name> <init pos:line="91" pos:column="54">= <expr><call><name><name pos:line="91" pos:column="56">statement</name><op:operator pos:line="91" pos:column="65">.</op:operator><name pos:line="91" pos:column="66">executeQuery</name></name><argument_list pos:line="91" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="91" pos:column="81">//execute the query</comment>

					<while pos:line="93" pos:column="41">while <condition pos:line="93" pos:column="47">(<expr><call><name><name pos:line="93" pos:column="48">rs</name><op:operator pos:line="93" pos:column="50">.</op:operator><name pos:line="93" pos:column="51">next</name></name><argument_list pos:line="93" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="93" pos:column="59">{
						
						<expr_stmt><expr><call><name><name pos:line="95" pos:column="49">DBAnnotation</name><op:operator pos:line="95" pos:column="61">.</op:operator><name pos:line="95" pos:column="62">annoate</name></name><argument_list pos:line="95" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="70">"retreivedAdminUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="95" pos:column="90">"people"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="95" pos:column="99">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="95" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="96" pos:column="49">int</name></type> <name pos:line="96" pos:column="53">retreivedAdminUIN</name> <init pos:line="96" pos:column="71">= <expr><call><name><name pos:line="96" pos:column="73">rs</name><op:operator pos:line="96" pos:column="75">.</op:operator><name pos:line="96" pos:column="76">getInt</name></name><argument_list pos:line="96" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="83">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="96" pos:column="90">//get the UIN and store it in a variable</comment>
						<decl_stmt><decl><type><name pos:line="97" pos:column="49">Admin</name></type> <name pos:line="97" pos:column="55">admins</name></decl>;</decl_stmt>
						<try pos:line="98" pos:column="49">try <block pos:line="98" pos:column="53">{
							<expr_stmt><expr><name pos:line="99" pos:column="57">admins</name> <op:operator pos:line="99" pos:column="64">=</op:operator> <op:operator pos:line="99" pos:column="66">new</op:operator> <call><name pos:line="99" pos:column="70">Admin</name><argument_list pos:line="99" pos:column="75">(<argument><expr><name pos:line="99" pos:column="76">retreivedAdminUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="99" pos:column="95">//put the retrieved UIN and put it in the admin object</comment>
							<expr_stmt><expr><call><name><name pos:line="100" pos:column="57">getAllAdmin</name><op:operator pos:line="100" pos:column="68">.</op:operator><name pos:line="100" pos:column="69">add</name></name><argument_list pos:line="100" pos:column="72">(<argument><expr><name pos:line="100" pos:column="73">admins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="100" pos:column="81">//add it to the arraylist</comment>
							
							<expr_stmt><expr><call><name><name pos:line="102" pos:column="57">DBAnnotation</name><op:operator pos:line="102" pos:column="69">.</op:operator><name pos:line="102" pos:column="70">annoate</name></name><argument_list pos:line="102" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="78">"adminUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="95">"People"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="105">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="102" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="103" pos:column="57">String</name></type> <name pos:line="103" pos:column="64">adminUserName</name><init pos:line="103" pos:column="77">=<expr><call><name><name pos:line="103" pos:column="78">admins</name><op:operator pos:line="103" pos:column="84">.</op:operator><name pos:line="103" pos:column="85">getUserName</name></name><argument_list pos:line="103" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>	
							
							<expr_stmt><expr><call><name><name pos:line="105" pos:column="57">System</name><op:operator pos:line="105" pos:column="63">.</op:operator><name pos:line="105" pos:column="64">out</name><op:operator pos:line="105" pos:column="67">.</op:operator><name pos:line="105" pos:column="68">println</name></name><argument_list pos:line="105" pos:column="75">(<argument><expr><name pos:line="105" pos:column="76">adminUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block> 
						<comment type="line" pos:line="108" pos:column="49">//catch the person does not exist exception</comment>
						<catch pos:line="109" pos:column="49">catch <parameter_list pos:line="109" pos:column="55">(<param><decl><type><name pos:line="109" pos:column="56">PersonDoesNotExistException</name></type> <name pos:line="109" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="87">{
							<comment type="line" pos:line="110" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="111" pos:column="57">e</name><op:operator pos:line="111" pos:column="58">.</op:operator><name pos:line="111" pos:column="59">printStackTrace</name></name><argument_list pos:line="111" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
						
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="119" pos:column="25">//catch the SQl exception</comment>
			<catch pos:line="120" pos:column="25">catch <parameter_list pos:line="120" pos:column="31">(<param><decl><type><name pos:line="120" pos:column="32">SQLException</name></type> <name pos:line="120" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">System</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">out</name><op:operator pos:line="121" pos:column="43">.</op:operator><name pos:line="121" pos:column="44">println</name></name><argument_list pos:line="121" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="52">"Error fetching all the professors"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">System</name><op:operator pos:line="122" pos:column="39">.</op:operator><name pos:line="122" pos:column="40">out</name><op:operator pos:line="122" pos:column="43">.</op:operator><name pos:line="122" pos:column="44">println</name></name><argument_list pos:line="122" pos:column="51">(<argument><expr><call><name><name pos:line="122" pos:column="52">e</name><op:operator pos:line="122" pos:column="53">.</op:operator><name pos:line="122" pos:column="54">getMessage</name></name><argument_list pos:line="122" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="123" pos:column="33">e</name><op:operator pos:line="123" pos:column="34">.</op:operator><name pos:line="123" pos:column="35">printStackTrace</name></name><argument_list pos:line="123" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="126" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
			<finally pos:line="128" pos:column="25">finally <block pos:line="128" pos:column="33">{
				<comment type="line" pos:line="129" pos:column="33">// Database.commitTransaction(conn);</comment>
			}</block></finally></try>

			<return pos:line="132" pos:column="25">return <expr><name pos:line="132" pos:column="32">getAllAdmin</name></expr>;</return>
		}</block>

		<finally pos:line="135" pos:column="17">finally <block pos:line="135" pos:column="25">{
		}</block></finally></try>

	}</block></function>

	<comment type="block" pos:line="140" pos:column="9">/*
	 * updateAdminUserName function takes in the inputs of the new user name of
	 * the admin 
	 * calls the boolean function update username from the people class with the new passed new username and the initialized objects
	 * username.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">boolean</name></type> <name pos:line="151" pos:column="24">updateAdminUserName</name><parameter_list pos:line="151" pos:column="43">(<param><decl><type><name pos:line="151" pos:column="44">String</name></type> <name pos:line="151" pos:column="51">userName</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="61">{

		<decl_stmt><decl><type><name pos:line="153" pos:column="17">boolean</name></type> <name pos:line="153" pos:column="25">isUpdated</name> <init pos:line="153" pos:column="35">= <expr><lit:literal type="boolean" pos:line="153" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="153" pos:column="43">//create a boolean value for returning. set it to false</comment>


		<try pos:line="156" pos:column="17">try <block pos:line="156" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="157" pos:column="25">Connection</name></type> <name pos:line="157" pos:column="36">conn</name> <init pos:line="157" pos:column="41">= <expr><call><name><name pos:line="157" pos:column="43">Database</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">getConnection</name></name><argument_list pos:line="157" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="157" pos:column="68">//establish the connection</comment>

			<try pos:line="159" pos:column="25">try <block pos:line="159" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="161" pos:column="33">boolean</name></type> <name pos:line="161" pos:column="41">ifAddedInLogin</name> <init pos:line="161" pos:column="56">= <expr><call><name><name pos:line="161" pos:column="58">People</name><op:operator pos:line="161" pos:column="64">.</op:operator><name pos:line="161" pos:column="65">updateUserNameIntoLoginTable</name></name><argument_list pos:line="161" pos:column="93">(<argument><expr><name pos:line="161" pos:column="94">userName</name></expr></argument>, <argument><expr><call><name><name pos:line="161" pos:column="104">this</name><op:operator pos:line="161" pos:column="108">.</op:operator><name pos:line="161" pos:column="109">getUserName</name></name><argument_list pos:line="161" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="161" pos:column="124">//update the username inthe login table</comment>
				<if pos:line="162" pos:column="33">if <condition pos:line="162" pos:column="36">(<expr><name pos:line="162" pos:column="37">ifAddedInLogin</name></expr>)</condition><then pos:line="162" pos:column="52">
					<expr_stmt><expr><name pos:line="163" pos:column="41">isUpdated</name> <op:operator pos:line="163" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="163" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if><comment type="line" pos:line="163" pos:column="58">//if updated set true</comment>

			}</block>
			<comment type="line" pos:line="166" pos:column="25">//catch block</comment>
			<catch pos:line="167" pos:column="25">catch <parameter_list pos:line="167" pos:column="31">(<param><decl><type><name pos:line="167" pos:column="32">Exception</name></type> <name pos:line="167" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="167" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="168" pos:column="33">System</name><op:operator pos:line="168" pos:column="39">.</op:operator><name pos:line="168" pos:column="40">out</name><op:operator pos:line="168" pos:column="43">.</op:operator><name pos:line="168" pos:column="44">println</name></name><argument_list pos:line="168" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="169" pos:column="33">e</name><op:operator pos:line="169" pos:column="34">.</op:operator><name pos:line="169" pos:column="35">printStackTrace</name></name><argument_list pos:line="169" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="170" pos:column="33">System</name><op:operator pos:line="170" pos:column="39">.</op:operator><name pos:line="170" pos:column="40">out</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">println</name></name><argument_list pos:line="170" pos:column="51">(<argument><expr><name pos:line="170" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="174" pos:column="17">//catch block</comment>
		<catch pos:line="175" pos:column="17">catch <parameter_list pos:line="175" pos:column="23">(<param><decl><type><name pos:line="175" pos:column="24">Exception</name></type> <name pos:line="175" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="175" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="176" pos:column="25">System</name><op:operator pos:line="176" pos:column="31">.</op:operator><name pos:line="176" pos:column="32">out</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">println</name></name><argument_list pos:line="176" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="177" pos:column="25">e</name><op:operator pos:line="177" pos:column="26">.</op:operator><name pos:line="177" pos:column="27">printStackTrace</name></name><argument_list pos:line="177" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="178" pos:column="25">System</name><op:operator pos:line="178" pos:column="31">.</op:operator><name pos:line="178" pos:column="32">out</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">println</name></name><argument_list pos:line="178" pos:column="43">(<argument><expr><name pos:line="178" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="181" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="183" pos:column="17">finally <block pos:line="183" pos:column="25">{

			<comment type="line" pos:line="185" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="188" pos:column="17">return <expr><name pos:line="188" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="192" pos:column="9">/*
	 * updateAdminName function takes in the inputs of the new name of the admin
	 * 
	 * calls the boolean function update name from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="203" pos:column="9">public</specifier> <name pos:line="203" pos:column="16">boolean</name></type> <name pos:line="203" pos:column="24">updateAdminName</name><parameter_list pos:line="203" pos:column="39">(<param><decl><type><name pos:line="203" pos:column="40">String</name></type> <name pos:line="203" pos:column="47">name</name></decl></param>)</parameter_list> <block pos:line="203" pos:column="53">{

		<decl_stmt><decl><type><name pos:line="205" pos:column="17">boolean</name></type> <name pos:line="205" pos:column="25">isUpdated</name> <init pos:line="205" pos:column="35">= <expr><lit:literal type="boolean" pos:line="205" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="207" pos:column="17">try <block pos:line="207" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="208" pos:column="25">Connection</name></type> <name pos:line="208" pos:column="36">conn</name> <init pos:line="208" pos:column="41">= <expr><call><name><name pos:line="208" pos:column="43">Database</name><op:operator pos:line="208" pos:column="51">.</op:operator><name pos:line="208" pos:column="52">getConnection</name></name><argument_list pos:line="208" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="208" pos:column="68">//create a boolean value for returning. set it to false</comment>

			<try pos:line="210" pos:column="25">try <block pos:line="210" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="212" pos:column="33">boolean</name></type> <name pos:line="212" pos:column="41">ifUpdatedInPeople</name> <init pos:line="212" pos:column="59">= <expr><call><name><name pos:line="212" pos:column="61">People</name><op:operator pos:line="212" pos:column="67">.</op:operator><name pos:line="212" pos:column="68">updateNameIntoPeopleTable</name></name><argument_list pos:line="212" pos:column="93">(<argument><expr><name pos:line="212" pos:column="94">name</name></expr></argument>, <argument><expr><call><name><name pos:line="212" pos:column="100">this</name><op:operator pos:line="212" pos:column="104">.</op:operator><name pos:line="212" pos:column="105">getUIN</name></name><argument_list pos:line="212" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="212" pos:column="115">//update name in the people table</comment>
				<if pos:line="213" pos:column="33">if <condition pos:line="213" pos:column="36">(<expr><name pos:line="213" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="213" pos:column="55">
					<expr_stmt><expr><name pos:line="214" pos:column="41">isUpdated</name> <op:operator pos:line="214" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="214" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if><comment type="line" pos:line="214" pos:column="58">//if added then set true</comment>

			}</block>
			<comment type="line" pos:line="217" pos:column="25">//catch block for the exception</comment>
			<catch pos:line="218" pos:column="25">catch <parameter_list pos:line="218" pos:column="31">(<param><decl><type><name pos:line="218" pos:column="32">Exception</name></type> <name pos:line="218" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">System</name><op:operator pos:line="219" pos:column="39">.</op:operator><name pos:line="219" pos:column="40">out</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">println</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">e</name><op:operator pos:line="220" pos:column="34">.</op:operator><name pos:line="220" pos:column="35">printStackTrace</name></name><argument_list pos:line="220" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">System</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">out</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">println</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="225" pos:column="17">//catch block</comment>
		<catch pos:line="226" pos:column="17">catch <parameter_list pos:line="226" pos:column="23">(<param><decl><type><name pos:line="226" pos:column="24">Exception</name></type> <name pos:line="226" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="226" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="227" pos:column="25">System</name><op:operator pos:line="227" pos:column="31">.</op:operator><name pos:line="227" pos:column="32">out</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">println</name></name><argument_list pos:line="227" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="228" pos:column="25">e</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">printStackTrace</name></name><argument_list pos:line="228" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="229" pos:column="25">System</name><op:operator pos:line="229" pos:column="31">.</op:operator><name pos:line="229" pos:column="32">out</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">println</name></name><argument_list pos:line="229" pos:column="43">(<argument><expr><name pos:line="229" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="233" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="235" pos:column="17">finally <block pos:line="235" pos:column="25">{

			<comment type="line" pos:line="237" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="240" pos:column="17">return <expr><name pos:line="240" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="244" pos:column="9">/*
	 * updateAdminDept function takes in the inputs of the newdept of the admin
	 * * calls the boolean function update dept from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier pos:line="255" pos:column="9">public</specifier> <name pos:line="255" pos:column="16">boolean</name></type> <name pos:line="255" pos:column="24">updateAdminDept</name><parameter_list pos:line="255" pos:column="39">(<param><decl><type><name pos:line="255" pos:column="40">int</name></type> <name pos:line="255" pos:column="44">deptID</name></decl></param>)</parameter_list> <block pos:line="255" pos:column="52">{

		<decl_stmt><decl><type><name pos:line="257" pos:column="17">boolean</name></type> <name pos:line="257" pos:column="25">isUpdated</name> <init pos:line="257" pos:column="35">= <expr><lit:literal type="boolean" pos:line="257" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="257" pos:column="43">//create a boolean value for returning. set it to false</comment>


		<try pos:line="260" pos:column="17">try <block pos:line="260" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="261" pos:column="25">Connection</name></type> <name pos:line="261" pos:column="36">conn</name> <init pos:line="261" pos:column="41">= <expr><call><name><name pos:line="261" pos:column="43">Database</name><op:operator pos:line="261" pos:column="51">.</op:operator><name pos:line="261" pos:column="52">getConnection</name></name><argument_list pos:line="261" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="261" pos:column="68">//establish a connection</comment>

			<try pos:line="263" pos:column="25">try <block pos:line="263" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="265" pos:column="33">boolean</name></type> <name pos:line="265" pos:column="41">ifUpdatedInPeople</name> <init pos:line="265" pos:column="59">= <expr><call><name><name pos:line="265" pos:column="61">People</name><op:operator pos:line="265" pos:column="67">.</op:operator><name pos:line="265" pos:column="68">updateDeptIntoPeopleTable</name></name><argument_list pos:line="265" pos:column="93">(<argument><expr><name pos:line="265" pos:column="94">deptID</name></expr></argument>, <argument><expr><call><name><name pos:line="265" pos:column="102">this</name><op:operator pos:line="265" pos:column="106">.</op:operator><name pos:line="265" pos:column="107">getUIN</name></name><argument_list pos:line="265" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="265" pos:column="117">//update dept in people table</comment>
				<if pos:line="266" pos:column="33">if <condition pos:line="266" pos:column="36">(<expr><name pos:line="266" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="266" pos:column="55">
					<expr_stmt><expr><name pos:line="267" pos:column="41">isUpdated</name> <op:operator pos:line="267" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="267" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if><comment type="line" pos:line="267" pos:column="58">//set the return type to true</comment>

			}</block>
			<comment type="line" pos:line="270" pos:column="25">//catch block</comment>
			<catch pos:line="271" pos:column="25">catch <parameter_list pos:line="271" pos:column="31">(<param><decl><type><name pos:line="271" pos:column="32">Exception</name></type> <name pos:line="271" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="272" pos:column="33">System</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">out</name><op:operator pos:line="272" pos:column="43">.</op:operator><name pos:line="272" pos:column="44">println</name></name><argument_list pos:line="272" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="273" pos:column="33">e</name><op:operator pos:line="273" pos:column="34">.</op:operator><name pos:line="273" pos:column="35">printStackTrace</name></name><argument_list pos:line="273" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="274" pos:column="33">System</name><op:operator pos:line="274" pos:column="39">.</op:operator><name pos:line="274" pos:column="40">out</name><op:operator pos:line="274" pos:column="43">.</op:operator><name pos:line="274" pos:column="44">println</name></name><argument_list pos:line="274" pos:column="51">(<argument><expr><name pos:line="274" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="278" pos:column="17">//catch block</comment>
		<catch pos:line="279" pos:column="17">catch <parameter_list pos:line="279" pos:column="23">(<param><decl><type><name pos:line="279" pos:column="24">Exception</name></type> <name pos:line="279" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="279" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="280" pos:column="25">System</name><op:operator pos:line="280" pos:column="31">.</op:operator><name pos:line="280" pos:column="32">out</name><op:operator pos:line="280" pos:column="35">.</op:operator><name pos:line="280" pos:column="36">println</name></name><argument_list pos:line="280" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="280" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="281" pos:column="25">e</name><op:operator pos:line="281" pos:column="26">.</op:operator><name pos:line="281" pos:column="27">printStackTrace</name></name><argument_list pos:line="281" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="282" pos:column="25">System</name><op:operator pos:line="282" pos:column="31">.</op:operator><name pos:line="282" pos:column="32">out</name><op:operator pos:line="282" pos:column="35">.</op:operator><name pos:line="282" pos:column="36">println</name></name><argument_list pos:line="282" pos:column="43">(<argument><expr><name pos:line="282" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="286" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="288" pos:column="17">finally <block pos:line="288" pos:column="25">{

			<comment type="line" pos:line="290" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="293" pos:column="17">return <expr><name pos:line="293" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="297" pos:column="9">/*
	 * All admin functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>

	<function><type><specifier pos:line="303" pos:column="9">public</specifier> <specifier pos:line="303" pos:column="16">static</specifier> <name pos:line="303" pos:column="23">void</name></type> <name pos:line="303" pos:column="28">main</name><parameter_list pos:line="303" pos:column="32">(<param><decl><type><name><name pos:line="303" pos:column="33">String</name><index pos:line="303" pos:column="39">[]</index></name></type> <name pos:line="303" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="48">{


	}</block></function>

}</block></class>
</unit>
