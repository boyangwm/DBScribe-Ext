<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\CalculateByEducation.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SQLException</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Collections</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">HashMap</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">tada</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">interfaces</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">CalcImplInterface</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">CalculateByEducationInterface</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">interfaces</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">util</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="18" pos:column="1">/**
 * CalculateByEducation.java
 * Purpose: Calculates average income and average weekly wage for
 * 	requirements 4 &amp; 9
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="27" pos:column="1">/**
 * Object to perform all calculations necessary to calculate
 * 	average income and average weekly wage by all or by a given
 * 	education level contained in the database.  Uses Hash
 *  Maps and offloads processing to the JVM to overcome inherent
 *  inefficiencies in the Derby database thus significantly improving
 *  performance.
 */</comment>
<class><specifier pos:line="35" pos:column="1">public</specifier> class <name pos:line="35" pos:column="14">CalculateByEducation</name> <super><implements pos:line="35" pos:column="35">implements  <name pos:line="35" pos:column="47">CalculateByEducationInterface</name></implements></super><block pos:line="35" pos:column="76">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">ResultSet</name></type> <name pos:line="36" pos:column="19">results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">Statement</name></type> <name pos:line="37" pos:column="19">statement</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc" pos:line="39" pos:column="9">/**
	 * Returns a list with all the Education Levels contained in the database.
	 * &lt;p&gt;
	 * @return				An ArrayList&lt;String&gt; of all education levels.
	 */</comment>
	<function><type><annotation pos:line="44" pos:column="9">@<name pos:line="44" pos:column="10">TaDaMethod</name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">variablesToTrack</name> <op:operator pos:line="44" pos:column="38">=</op:operator> <block pos:line="44" pos:column="40">{<expr><lit:literal type="string" pos:line="44" pos:column="41">"education"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">correspondingDatabaseAttribute</name> <op:operator pos:line="44" pos:column="86">=</op:operator><block pos:line="44" pos:column="87">{<expr><lit:literal type="string" pos:line="44" pos:column="88">"education.education"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="45" pos:column="9">public</specifier> <name><name pos:line="45" pos:column="16">ArrayList</name><argument_list pos:line="45" pos:column="25">&lt;<argument><name pos:line="45" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="34">getEducationLevelList</name><parameter_list pos:line="45" pos:column="55">()</parameter_list> <block pos:line="45" pos:column="58">{
		<decl_stmt><decl><type><name><name pos:line="46" pos:column="17">ArrayList</name><argument_list pos:line="46" pos:column="26">&lt;<argument><name pos:line="46" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="35">educationList</name> <init pos:line="46" pos:column="49">= <expr><op:operator pos:line="46" pos:column="51">new</op:operator> <call><name><name pos:line="46" pos:column="55">ArrayList</name><argument_list pos:line="46" pos:column="64">&lt;<argument><name pos:line="46" pos:column="65">String</name></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">String</name></type> <name pos:line="47" pos:column="24">education</name></decl>;</decl_stmt>
		
		<try pos:line="49" pos:column="17">try<block pos:line="49" pos:column="20">{
			<expr_stmt><expr><name pos:line="50" pos:column="25">statement</name> <op:operator pos:line="50" pos:column="35">=</op:operator> <call><name><name pos:line="50" pos:column="37">Factory</name><op:operator pos:line="50" pos:column="44">.</op:operator><name pos:line="50" pos:column="45">getConnection</name></name><argument_list pos:line="50" pos:column="58">()</argument_list></call><op:operator pos:line="50" pos:column="60">.</op:operator><call><name pos:line="50" pos:column="61">createStatement</name><argument_list pos:line="50" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><name pos:line="51" pos:column="17">results</name> <op:operator pos:line="51" pos:column="25">=</op:operator> <call><name><name pos:line="51" pos:column="27">statement</name><op:operator pos:line="51" pos:column="36">.</op:operator><name pos:line="51" pos:column="37">executeQuery</name></name><argument_list pos:line="51" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="50">"SELECT DISTINCT EDUCATION from education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    	<while pos:line="53" pos:column="17">while<condition pos:line="53" pos:column="22">(<expr><call><name><name pos:line="53" pos:column="23">results</name><op:operator pos:line="53" pos:column="30">.</op:operator><name pos:line="53" pos:column="31">next</name></name><argument_list pos:line="53" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="53" pos:column="38">{
	    		<expr_stmt><expr><name pos:line="54" pos:column="25">education</name> <op:operator pos:line="54" pos:column="35">=</op:operator> <call><name><name pos:line="54" pos:column="37">results</name><op:operator pos:line="54" pos:column="44">.</op:operator><name pos:line="54" pos:column="45">getString</name></name><argument_list pos:line="54" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="55">"EDUCATION"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    	<if pos:line="55" pos:column="25">if<condition pos:line="55" pos:column="27">(<expr><name pos:line="55" pos:column="28">education</name> <op:operator pos:line="55" pos:column="38">!=</op:operator> <lit:literal type="null" pos:line="55" pos:column="41">null</lit:literal></expr>)</condition><then><block pos:line="55" pos:column="46">{
		    		<expr_stmt><expr><name pos:line="56" pos:column="33">education</name> <op:operator pos:line="56" pos:column="43">=</op:operator> <call><name><name pos:line="56" pos:column="45">education</name><op:operator pos:line="56" pos:column="54">.</op:operator><name pos:line="56" pos:column="55">trim</name></name><argument_list pos:line="56" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
		    		<if pos:line="57" pos:column="33">if<condition pos:line="57" pos:column="35">(<expr><op:operator pos:line="57" pos:column="36">!</op:operator><call><name><name pos:line="57" pos:column="37">educationList</name><op:operator pos:line="57" pos:column="50">.</op:operator><name pos:line="57" pos:column="51">contains</name></name><argument_list pos:line="57" pos:column="59">(<argument><expr><name pos:line="57" pos:column="60">education</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="57" pos:column="71">{
		    			<expr_stmt><expr><call><name><name pos:line="58" pos:column="41">educationList</name><op:operator pos:line="58" pos:column="54">.</op:operator><name pos:line="58" pos:column="55">add</name></name><argument_list pos:line="58" pos:column="58">(<argument><expr><name pos:line="58" pos:column="59">education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    		}</block></then></if>
		    	}</block></then></if>
	    	}</block></while>
	    	
	    	
			
		}</block> <catch pos:line="65" pos:column="19">catch <parameter_list pos:line="65" pos:column="25">(<param><decl><type><name pos:line="65" pos:column="26">SQLException</name></type> <name pos:line="65" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="42">{
			<while pos:line="66" pos:column="25">while <condition pos:line="66" pos:column="31">(<expr><name pos:line="66" pos:column="32">e</name> <op:operator pos:line="66" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="66" pos:column="37">null</lit:literal></expr>)</condition> <block pos:line="66" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">System</name><op:operator pos:line="67" pos:column="39">.</op:operator><name pos:line="67" pos:column="40">err</name><op:operator pos:line="67" pos:column="43">.</op:operator><name pos:line="67" pos:column="44">println</name></name><argument_list pos:line="67" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="52">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="68" pos:column="33">System</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">err</name><op:operator pos:line="68" pos:column="43">.</op:operator><name pos:line="68" pos:column="44">println</name></name><argument_list pos:line="68" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="52">"  SQL State:  "</lit:literal> <op:operator pos:line="68" pos:column="69">+</op:operator> <call><name><name pos:line="68" pos:column="71">e</name><op:operator pos:line="68" pos:column="72">.</op:operator><name pos:line="68" pos:column="73">getSQLState</name></name><argument_list pos:line="68" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="69" pos:column="33">System</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">err</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">println</name></name><argument_list pos:line="69" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="52">"  Error Code: "</lit:literal> <op:operator pos:line="69" pos:column="69">+</op:operator> <call><name><name pos:line="69" pos:column="71">e</name><op:operator pos:line="69" pos:column="72">.</op:operator><name pos:line="69" pos:column="73">getErrorCode</name></name><argument_list pos:line="69" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="70" pos:column="33">System</name><op:operator pos:line="70" pos:column="39">.</op:operator><name pos:line="70" pos:column="40">err</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">println</name></name><argument_list pos:line="70" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="52">"  Message:    "</lit:literal> <op:operator pos:line="70" pos:column="69">+</op:operator> <call><name><name pos:line="70" pos:column="71">e</name><op:operator pos:line="70" pos:column="72">.</op:operator><name pos:line="70" pos:column="73">getMessage</name></name><argument_list pos:line="70" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="71" pos:column="33">// for stack traces, refer to derby.log or uncomment this:</comment>
				<comment type="line" pos:line="72" pos:column="33">// e.printStackTrace(System.err);</comment>
				<expr_stmt><expr><name pos:line="73" pos:column="33">e</name> <op:operator pos:line="73" pos:column="35">=</op:operator> <call><name><name pos:line="73" pos:column="37">e</name><op:operator pos:line="73" pos:column="38">.</op:operator><name pos:line="73" pos:column="39">getNextException</name></name><argument_list pos:line="73" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></catch></try>
		
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">Collections</name><op:operator pos:line="77" pos:column="28">.</op:operator><name pos:line="77" pos:column="29">sort</name></name><argument_list pos:line="77" pos:column="33">(<argument><expr><name pos:line="77" pos:column="34">educationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="78" pos:column="17">return <expr><name pos:line="78" pos:column="24">educationList</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="81" pos:column="9">/**
	 * Checks if an education level is contained in the database
	 * &lt;p&gt;
	 * @param 				A String of an education level to test
	 * @return				Boolean true / false answer
	 */</comment>
	<function><type><specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">boolean</name></type> <name pos:line="87" pos:column="24">isInEducationList</name><parameter_list pos:line="87" pos:column="41">(<param><decl><type><name pos:line="87" pos:column="42">String</name></type> <name pos:line="87" pos:column="49">education</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="60">{
		<decl_stmt><decl><type><name><name pos:line="88" pos:column="17">ArrayList</name><argument_list pos:line="88" pos:column="26">&lt;<argument><name pos:line="88" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="35">educationList</name> <init pos:line="88" pos:column="49">= <expr><call><name pos:line="88" pos:column="51">getEducationLevelList</name><argument_list pos:line="88" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="89" pos:column="17">for(<init><decl><type><name pos:line="89" pos:column="21">String</name></type> <name pos:line="89" pos:column="28">i</name> <range pos:line="89" pos:column="30">: <expr><name pos:line="89" pos:column="32">educationList</name></expr></range></decl></init>)<block pos:line="89" pos:column="46">{
			<if pos:line="90" pos:column="25">if<condition pos:line="90" pos:column="27">(<expr><name pos:line="90" pos:column="28">education</name> <op:operator pos:line="90" pos:column="38">!=</op:operator> <lit:literal type="null" pos:line="90" pos:column="41">null</lit:literal> <op:operator pos:line="90" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="90" pos:column="49">i</name><op:operator pos:line="90" pos:column="50">.</op:operator><name pos:line="90" pos:column="51">equalsIgnoreCase</name></name><argument_list pos:line="90" pos:column="67">(<argument><expr><call><name><name pos:line="90" pos:column="68">education</name><op:operator pos:line="90" pos:column="77">.</op:operator><name pos:line="90" pos:column="78">trim</name></name><argument_list pos:line="90" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="90" pos:column="86">{
				<return pos:line="91" pos:column="33">return <expr><lit:literal type="boolean" pos:line="91" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="94" pos:column="17">return <expr><lit:literal type="boolean" pos:line="94" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="97" pos:column="9">/**
	 * Calculates average income for a given education level
	 * &lt;p&gt;
	 * @param 				A String of an education level to request
	 * 						Warning: This method does not check if the 
	 * 							education string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInEducationList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">double</name></type> <name pos:line="111" pos:column="23">calculateIncomeByEducationLevel</name><parameter_list pos:line="111" pos:column="54">(<param><decl><type><name pos:line="111" pos:column="55">String</name></type> <name pos:line="111" pos:column="62">education</name></decl></param>)</parameter_list><block pos:line="111" pos:column="72">{
		<return pos:line="112" pos:column="17">return <expr><call><name pos:line="112" pos:column="24">calculateValue</name><argument_list pos:line="112" pos:column="38">(<argument><expr><name pos:line="112" pos:column="39">education</name></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="50">Factory</name><op:operator pos:line="112" pos:column="57">.</op:operator><name pos:line="112" pos:column="58">getYearlyImpl</name></name><argument_list pos:line="112" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="115" pos:column="9">/**
	 * Calculates average weekly wage for a given education level
	 * &lt;p&gt;
	 * @param 				A String of an education level to request
	 * 						Warning: This method does not check if the 
	 * 							education string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInEducationList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">double</name></type> <name pos:line="129" pos:column="23">calculateWeeklyWageByEducationLevel</name><parameter_list pos:line="129" pos:column="58">(<param><decl><type><name pos:line="129" pos:column="59">String</name></type> <name pos:line="129" pos:column="66">education</name></decl></param>)</parameter_list><block pos:line="129" pos:column="76">{
		<return pos:line="130" pos:column="17">return <expr><call><name pos:line="130" pos:column="24">calculateValue</name><argument_list pos:line="130" pos:column="38">(<argument><expr><name pos:line="130" pos:column="39">education</name></expr></argument>, <argument><expr><call><name><name pos:line="130" pos:column="50">Factory</name><op:operator pos:line="130" pos:column="57">.</op:operator><name pos:line="130" pos:column="58">getWeeklyImpl</name></name><argument_list pos:line="130" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="133" pos:column="9">/**
	 * Calculates average income for all education levels
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 * 
	 */</comment>
	<function><type><specifier pos:line="141" pos:column="9">public</specifier> <name pos:line="141" pos:column="16">double</name></type> <name pos:line="141" pos:column="23">calculateIncomeByAllEducationLevels</name><parameter_list pos:line="141" pos:column="58">()</parameter_list><block pos:line="141" pos:column="60">{
		<return pos:line="142" pos:column="17">return <expr><call><name pos:line="142" pos:column="24">calculateValue</name><argument_list pos:line="142" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="39">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="142" pos:column="46">Factory</name><op:operator pos:line="142" pos:column="53">.</op:operator><name pos:line="142" pos:column="54">getYearlyImpl</name></name><argument_list pos:line="142" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="145" pos:column="9">/**
	 * Calculates average weekly wage for all education levels
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 * 
	 */</comment>
	<function><type><specifier pos:line="153" pos:column="9">public</specifier> <name pos:line="153" pos:column="16">double</name></type> <name pos:line="153" pos:column="23">calculateWeeklyWageByAllEducationLevels</name><parameter_list pos:line="153" pos:column="62">()</parameter_list><block pos:line="153" pos:column="64">{
		<return pos:line="154" pos:column="17">return <expr><call><name pos:line="154" pos:column="24">calculateValue</name><argument_list pos:line="154" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="39">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="154" pos:column="46">Factory</name><op:operator pos:line="154" pos:column="53">.</op:operator><name pos:line="154" pos:column="54">getWeeklyImpl</name></name><argument_list pos:line="154" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><annotation pos:line="157" pos:column="9">@<name pos:line="157" pos:column="10">TaDaMethod</name><argument_list pos:line="157" pos:column="20">(<argument><expr><name pos:line="157" pos:column="21">variablesToTrack</name> <op:operator pos:line="157" pos:column="38">=</op:operator><block pos:line="157" pos:column="39">{<expr><lit:literal type="string" pos:line="157" pos:column="40">"ssn1"</lit:literal></expr><op:operator pos:line="157" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="48">"education1"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="60">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="62">"weekWage"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="72">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="74">"workWeeks"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="85">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="87">"ssn2"</lit:literal></expr></argument>}</block></expr></argument>, 
			<argument><expr><name pos:line="158" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="158" pos:column="56">=</op:operator> <block pos:line="158" pos:column="58">{<expr><lit:literal type="string" pos:line="158" pos:column="59">"education.ssn"</lit:literal></expr><op:operator pos:line="158" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="76">"education.education"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="97">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="99">"job.weekwage"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="113">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="115">"job.workweeks"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="130">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="132">"job.ssn"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="159" pos:column="9">private</specifier> <name pos:line="159" pos:column="17">double</name></type> <name pos:line="159" pos:column="24">calculateValue</name><parameter_list pos:line="159" pos:column="38">(<param><decl><type><name pos:line="159" pos:column="39">String</name></type> <name pos:line="159" pos:column="46">educationIn</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="59">CalcImplInterface</name></type> <name pos:line="159" pos:column="77">type</name></decl></param>)</parameter_list><block pos:line="159" pos:column="82">{
		<decl_stmt><decl><type><name><name pos:line="160" pos:column="17">HashMap</name><argument_list pos:line="160" pos:column="24">&lt;<argument><name pos:line="160" pos:column="25">Integer</name></argument>, <argument><name pos:line="160" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="160" pos:column="42">ssnEducation</name> <init pos:line="160" pos:column="55">= <expr><op:operator pos:line="160" pos:column="57">new</op:operator> <call><name><name pos:line="160" pos:column="61">HashMap</name><argument_list pos:line="160" pos:column="68">&lt;<argument><name pos:line="160" pos:column="69">Integer</name></argument>, <argument><name pos:line="160" pos:column="78">String</name></argument>&gt;</argument_list></name><argument_list pos:line="160" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="161" pos:column="17">ArrayList</name><argument_list pos:line="161" pos:column="26">&lt;<argument><name pos:line="161" pos:column="27">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="59">educationWageAL</name> <init pos:line="161" pos:column="75">= <expr><op:operator pos:line="161" pos:column="77">new</op:operator> <call><name><name pos:line="161" pos:column="81">ArrayList</name><argument_list pos:line="161" pos:column="90">&lt;<argument><name pos:line="161" pos:column="91">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name><argument_list pos:line="161" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">int</name></type> <name pos:line="163" pos:column="21">ssn1</name></decl><op:operator pos:line="163" pos:column="25">,</op:operator> <decl><type ref="prev"/><name pos:line="163" pos:column="27">ssn2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="164" pos:column="17">String</name></type> <name pos:line="164" pos:column="24">education1</name></decl><op:operator pos:line="164" pos:column="34">,</op:operator> <decl><type ref="prev"/><name pos:line="164" pos:column="36">education2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">int</name></type> <name pos:line="165" pos:column="21">weekWage</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int</name></type> <name pos:line="166" pos:column="21">workWeeks</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">double</name></type> <name pos:line="167" pos:column="24">sum</name> <init pos:line="167" pos:column="28">= <expr><lit:literal type="number" pos:line="167" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="168" pos:column="17">double</name></type> <name pos:line="168" pos:column="24">count</name> <init pos:line="168" pos:column="30">= <expr><lit:literal type="number" pos:line="168" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">double</name></type> <name pos:line="169" pos:column="24">returnValue</name> <init pos:line="169" pos:column="36">= <expr><lit:literal type="number" pos:line="169" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="171" pos:column="17">if<condition pos:line="171" pos:column="19">(<expr><name pos:line="171" pos:column="20">educationIn</name> <op:operator pos:line="171" pos:column="32">==</op:operator> <lit:literal type="null" pos:line="171" pos:column="35">null</lit:literal></expr>)</condition><then><block pos:line="171" pos:column="40">{
			<expr_stmt><expr><name pos:line="172" pos:column="25">educationIn</name> <op:operator pos:line="172" pos:column="37">=</op:operator> <lit:literal type="string" pos:line="172" pos:column="39">""</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="173" pos:column="19">else <block pos:line="173" pos:column="24">{
			<expr_stmt><expr><name pos:line="174" pos:column="25">educationIn</name> <op:operator pos:line="174" pos:column="37">=</op:operator> <call><name><name pos:line="174" pos:column="39">educationIn</name><op:operator pos:line="174" pos:column="50">.</op:operator><name pos:line="174" pos:column="51">trim</name></name><argument_list pos:line="174" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		
		<try pos:line="178" pos:column="17">try<block pos:line="178" pos:column="20">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">statement</name> <op:operator pos:line="179" pos:column="35">=</op:operator> <call><name><name pos:line="179" pos:column="37">Factory</name><op:operator pos:line="179" pos:column="44">.</op:operator><name pos:line="179" pos:column="45">getConnection</name></name><argument_list pos:line="179" pos:column="58">()</argument_list></call><op:operator pos:line="179" pos:column="60">.</op:operator><call><name pos:line="179" pos:column="61">createStatement</name><argument_list pos:line="179" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><name pos:line="180" pos:column="17">results</name> <op:operator pos:line="180" pos:column="25">=</op:operator> <call><name><name pos:line="180" pos:column="27">statement</name><op:operator pos:line="180" pos:column="36">.</op:operator><name pos:line="180" pos:column="37">executeQuery</name></name><argument_list pos:line="180" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="50">"SELECT SSN, EDUCATION from education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="181" pos:column="17">while<condition pos:line="181" pos:column="22">(<expr><call><name><name pos:line="181" pos:column="23">results</name><op:operator pos:line="181" pos:column="30">.</op:operator><name pos:line="181" pos:column="31">next</name></name><argument_list pos:line="181" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="181" pos:column="38">{
	    		<if pos:line="182" pos:column="25">if<condition pos:line="182" pos:column="27">(<expr><call><name><name pos:line="182" pos:column="28">results</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">getString</name></name><argument_list pos:line="182" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="46">"SSN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="53">!=</op:operator> <lit:literal type="null" pos:line="182" pos:column="56">null</lit:literal> <op:operator pos:line="182" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="182" pos:column="64">results</name><op:operator pos:line="182" pos:column="71">.</op:operator><name pos:line="182" pos:column="72">getString</name></name><argument_list pos:line="182" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="82">"EDUCATION"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="95">!=</op:operator> <lit:literal type="null" pos:line="182" pos:column="98">null</lit:literal></expr>)</condition><then><block pos:line="182" pos:column="103">{
	    			<expr_stmt><expr><name pos:line="183" pos:column="33">ssn1</name> <op:operator pos:line="183" pos:column="38">=</op:operator> <call><name><name pos:line="183" pos:column="40">results</name><op:operator pos:line="183" pos:column="47">.</op:operator><name pos:line="183" pos:column="48">getInt</name></name><argument_list pos:line="183" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="55">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    		<expr_stmt><expr><name pos:line="184" pos:column="33">education1</name> <op:operator pos:line="184" pos:column="44">=</op:operator> <call><name><name pos:line="184" pos:column="46">results</name><op:operator pos:line="184" pos:column="53">.</op:operator><name pos:line="184" pos:column="54">getString</name></name><argument_list pos:line="184" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="64">"EDUCATION"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="184" pos:column="76">.</op:operator><call><name pos:line="184" pos:column="77">trim</name><argument_list pos:line="184" pos:column="81">()</argument_list></call></expr>;</expr_stmt>
		    		<expr_stmt><expr><call><name><name pos:line="185" pos:column="33">ssnEducation</name><op:operator pos:line="185" pos:column="45">.</op:operator><name pos:line="185" pos:column="46">put</name></name><argument_list pos:line="185" pos:column="49">(<argument><expr><name pos:line="185" pos:column="50">ssn1</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="56">education1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></then></if>
	    	}</block></while>
	    	
	    	<expr_stmt><expr><name pos:line="189" pos:column="17">results</name> <op:operator pos:line="189" pos:column="25">=</op:operator> <call><name><name pos:line="189" pos:column="27">statement</name><op:operator pos:line="189" pos:column="36">.</op:operator><name pos:line="189" pos:column="37">executeQuery</name></name><argument_list pos:line="189" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="50">"SELECT SSN, WEEKWAGE, WORKWEEKS from job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="190" pos:column="17">while<condition pos:line="190" pos:column="22">(<expr><call><name><name pos:line="190" pos:column="23">results</name><op:operator pos:line="190" pos:column="30">.</op:operator><name pos:line="190" pos:column="31">next</name></name><argument_list pos:line="190" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="190" pos:column="38">{
	    		
	    		<expr_stmt><expr><name pos:line="192" pos:column="25">weekWage</name> <op:operator pos:line="192" pos:column="34">=</op:operator> <call><name><name pos:line="192" pos:column="36">results</name><op:operator pos:line="192" pos:column="43">.</op:operator><name pos:line="192" pos:column="44">getInt</name></name><argument_list pos:line="192" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="51">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="193" pos:column="25">workWeeks</name> <op:operator pos:line="193" pos:column="35">=</op:operator> <call><name><name pos:line="193" pos:column="37">results</name><op:operator pos:line="193" pos:column="44">.</op:operator><name pos:line="193" pos:column="45">getInt</name></name><argument_list pos:line="193" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="52">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="194" pos:column="25">ssn2</name> <op:operator pos:line="194" pos:column="30">=</op:operator> <call><name><name pos:line="194" pos:column="32">results</name><op:operator pos:line="194" pos:column="39">.</op:operator><name pos:line="194" pos:column="40">getInt</name></name><argument_list pos:line="194" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="47">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="195" pos:column="25">education2</name> <op:operator pos:line="195" pos:column="36">=</op:operator> <op:operator pos:line="195" pos:column="38">(</op:operator><name pos:line="195" pos:column="39">String</name><op:operator pos:line="195" pos:column="45">)</op:operator> <call><name><name pos:line="195" pos:column="47">ssnEducation</name><op:operator pos:line="195" pos:column="59">.</op:operator><name pos:line="195" pos:column="60">get</name></name><argument_list pos:line="195" pos:column="63">(<argument><expr><name pos:line="195" pos:column="64">ssn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		
	    		<expr_stmt><expr><call><name><name pos:line="197" pos:column="25">type</name><op:operator pos:line="197" pos:column="29">.</op:operator><name pos:line="197" pos:column="30">addToArrayList</name></name><argument_list pos:line="197" pos:column="44">(<argument><expr><name pos:line="197" pos:column="45">educationWageAL</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="62">education2</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="74">weekWage</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="84">workWeeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		
	    	}</block></while>
	    	
	    	<for pos:line="201" pos:column="17">for(<init><decl><type><name pos:line="201" pos:column="21">TypeWageDataStructureInterface</name></type> <name pos:line="201" pos:column="52">i</name> <range pos:line="201" pos:column="54">: <expr><name pos:line="201" pos:column="56">educationWageAL</name></expr></range></decl></init>)<block pos:line="201" pos:column="72">{
	    		<decl_stmt><decl><type><name pos:line="202" pos:column="25">double</name></type> <name pos:line="202" pos:column="32">result</name> <init pos:line="202" pos:column="39">= <expr><call><name><name pos:line="202" pos:column="41">type</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">calculateAverage</name></name><argument_list pos:line="202" pos:column="62">(<argument><expr><name pos:line="202" pos:column="63">educationIn</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="76">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="203" pos:column="33">if<condition pos:line="203" pos:column="35">(<expr><name pos:line="203" pos:column="36">result</name> <op:operator pos:line="203" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="203" pos:column="45">0</lit:literal></expr>)</condition><then><block pos:line="203" pos:column="47">{
					<expr_stmt><expr><name pos:line="204" pos:column="41">sum</name> <op:operator pos:line="204" pos:column="45">=</op:operator> <name pos:line="204" pos:column="47">sum</name> <op:operator pos:line="204" pos:column="51">+</op:operator> <name pos:line="204" pos:column="53">result</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="205" pos:column="41">count</name><op:operator pos:line="205" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
	    	}</block></for>
	    		
	    	
	        <if pos:line="210" pos:column="17">if<condition pos:line="210" pos:column="19">(<expr><name pos:line="210" pos:column="20">count</name> <op:operator pos:line="210" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="210" pos:column="29">0</lit:literal></expr>)</condition><then><block pos:line="210" pos:column="31">{
	        	<expr_stmt><expr><name pos:line="211" pos:column="25">returnValue</name> <op:operator pos:line="211" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="211" pos:column="39">0</lit:literal></expr>;</expr_stmt>
	        }</block></then>
	        <else pos:line="213" pos:column="17">else <block pos:line="213" pos:column="22">{
	        	<expr_stmt><expr><name pos:line="214" pos:column="25">returnValue</name> <op:operator pos:line="214" pos:column="37">=</op:operator> <name pos:line="214" pos:column="39">sum</name> <op:operator pos:line="214" pos:column="43">/</op:operator> <name pos:line="214" pos:column="45">count</name></expr>;</expr_stmt>
	        }</block></else></if>

		}</block> <catch pos:line="217" pos:column="19">catch<parameter_list pos:line="217" pos:column="24">(<param><decl><type><name pos:line="217" pos:column="25">SQLException</name></type> <name pos:line="217" pos:column="38">e</name></decl></param>)</parameter_list> <block pos:line="217" pos:column="41">{
			<while pos:line="218" pos:column="25">while <condition pos:line="218" pos:column="31">(<expr><name pos:line="218" pos:column="32">e</name> <op:operator pos:line="218" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="218" pos:column="37">null</lit:literal></expr>)</condition> <block pos:line="218" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">System</name><op:operator pos:line="219" pos:column="39">.</op:operator><name pos:line="219" pos:column="40">err</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">println</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="52">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">System</name><op:operator pos:line="220" pos:column="39">.</op:operator><name pos:line="220" pos:column="40">err</name><op:operator pos:line="220" pos:column="43">.</op:operator><name pos:line="220" pos:column="44">println</name></name><argument_list pos:line="220" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="52">"  SQL State:  "</lit:literal> <op:operator pos:line="220" pos:column="69">+</op:operator> <call><name><name pos:line="220" pos:column="71">e</name><op:operator pos:line="220" pos:column="72">.</op:operator><name pos:line="220" pos:column="73">getSQLState</name></name><argument_list pos:line="220" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">System</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">err</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">println</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="52">"  Error Code: "</lit:literal> <op:operator pos:line="221" pos:column="69">+</op:operator> <call><name><name pos:line="221" pos:column="71">e</name><op:operator pos:line="221" pos:column="72">.</op:operator><name pos:line="221" pos:column="73">getErrorCode</name></name><argument_list pos:line="221" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="222" pos:column="33">System</name><op:operator pos:line="222" pos:column="39">.</op:operator><name pos:line="222" pos:column="40">err</name><op:operator pos:line="222" pos:column="43">.</op:operator><name pos:line="222" pos:column="44">println</name></name><argument_list pos:line="222" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="52">"  Message:    "</lit:literal> <op:operator pos:line="222" pos:column="69">+</op:operator> <call><name><name pos:line="222" pos:column="71">e</name><op:operator pos:line="222" pos:column="72">.</op:operator><name pos:line="222" pos:column="73">getMessage</name></name><argument_list pos:line="222" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="223" pos:column="33">// for stack traces, refer to derby.log or uncomment this:</comment>
				<comment type="line" pos:line="224" pos:column="33">// e.printStackTrace(System.err);</comment>
				<expr_stmt><expr><name pos:line="225" pos:column="33">e</name> <op:operator pos:line="225" pos:column="35">=</op:operator> <call><name><name pos:line="225" pos:column="37">e</name><op:operator pos:line="225" pos:column="38">.</op:operator><name pos:line="225" pos:column="39">getNextException</name></name><argument_list pos:line="225" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></catch></try>

	    <return pos:line="229" pos:column="13">return <expr><call><name><name pos:line="229" pos:column="20">Factory</name><op:operator pos:line="229" pos:column="27">.</op:operator><name pos:line="229" pos:column="28">getRoundMethod</name></name><argument_list pos:line="229" pos:column="42">(<argument><expr><name pos:line="229" pos:column="43">returnValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>
