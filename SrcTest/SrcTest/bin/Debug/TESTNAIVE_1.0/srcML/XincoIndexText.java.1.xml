<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\index\filetypes\XincoIndexText.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2005 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoIndexText
 *
 * Description:     indexing text files 
 *
 * Original Author: Alexander Manes
 * Date:            2005/02/05
 *
 * Modifications:
 * 
 * Who?             When?             What?
 * -                -                 -
 *
 *************************************************************
 */</comment>
<package pos:line="36" pos:column="1">package <name><name pos:line="36" pos:column="9">com</name><op:operator pos:line="36" pos:column="12">.</op:operator><name pos:line="36" pos:column="13">bluecubs</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">xinco</name><op:operator pos:line="36" pos:column="27">.</op:operator><name pos:line="36" pos:column="28">index</name><op:operator pos:line="36" pos:column="33">.</op:operator><name pos:line="36" pos:column="34">filetypes</name></name>;</package>

<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">java</name><op:operator pos:line="38" pos:column="12">.</op:operator><name pos:line="38" pos:column="13">io</name><op:operator pos:line="38" pos:column="15">.</op:operator><name pos:line="38" pos:column="16">BufferedReader</name></name>;</import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">io</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">File</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">io</name><op:operator pos:line="40" pos:column="15">.</op:operator><name pos:line="40" pos:column="16">FileInputStream</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">java</name><op:operator pos:line="41" pos:column="12">.</op:operator><name pos:line="41" pos:column="13">io</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">InputStreamReader</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">java</name><op:operator pos:line="42" pos:column="12">.</op:operator><name pos:line="42" pos:column="13">io</name><op:operator pos:line="42" pos:column="15">.</op:operator><name pos:line="42" pos:column="16">Reader</name></name>;</import>

<class><specifier pos:line="44" pos:column="1">public</specifier> class <name pos:line="44" pos:column="14">XincoIndexText</name> <super><implements pos:line="44" pos:column="29">implements <name pos:line="44" pos:column="40">XincoIndexFileType</name></implements></super> <block pos:line="44" pos:column="59">{

    <constructor><specifier pos:line="46" pos:column="5">public</specifier> <name pos:line="46" pos:column="12">XincoIndexText</name><parameter_list pos:line="46" pos:column="26">()</parameter_list> <block pos:line="46" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">super</name><argument_list pos:line="47" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier pos:line="50" pos:column="5">public</specifier> <name pos:line="50" pos:column="12">Reader</name></type> <name pos:line="50" pos:column="19">getFileContentReader</name><parameter_list pos:line="50" pos:column="39">(<param><decl><type><name pos:line="50" pos:column="40">File</name></type> <name pos:line="50" pos:column="45">f</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">Reader</name></type> <name pos:line="51" pos:column="16">reader</name> <init pos:line="51" pos:column="23">= <expr><lit:literal type="null" pos:line="51" pos:column="25">null</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">FileInputStream</name></type> <name pos:line="52" pos:column="25">is</name> <init pos:line="52" pos:column="28">= <expr><lit:literal type="null" pos:line="52" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>
        <try pos:line="53" pos:column="9">try <block pos:line="53" pos:column="13">{
            <expr_stmt><expr><name pos:line="54" pos:column="13">is</name> <op:operator pos:line="54" pos:column="16">=</op:operator> <op:operator pos:line="54" pos:column="18">new</op:operator> <call><name pos:line="54" pos:column="22">FileInputStream</name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">reader</name> <op:operator pos:line="55" pos:column="20">=</op:operator> <op:operator pos:line="55" pos:column="22">new</op:operator> <call><name pos:line="55" pos:column="26">BufferedReader</name><argument_list pos:line="55" pos:column="40">(<argument><expr><op:operator pos:line="55" pos:column="41">new</op:operator> <call><name pos:line="55" pos:column="45">InputStreamReader</name><argument_list pos:line="55" pos:column="62">(<argument><expr><name pos:line="55" pos:column="63">is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="56" pos:column="11">catch <parameter_list pos:line="56" pos:column="17">(<param><decl><type><name pos:line="56" pos:column="18">Exception</name></type> <name pos:line="56" pos:column="28">fe</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="32">{
            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><name pos:line="57" pos:column="17">reader</name> <op:operator pos:line="57" pos:column="24">!=</op:operator> <lit:literal type="null" pos:line="57" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="57" pos:column="32"> <block pos:line="57" pos:column="33">{
                <try pos:line="58" pos:column="17">try <block pos:line="58" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="59" pos:column="21">reader</name><op:operator pos:line="59" pos:column="27">.</op:operator><name pos:line="59" pos:column="28">close</name></name><argument_list pos:line="59" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="60" pos:column="19">catch <parameter_list pos:line="60" pos:column="25">(<param><decl><type><name pos:line="60" pos:column="26">Exception</name></type> <name pos:line="60" pos:column="36">re</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="40">{
                }</block></catch></try>
            }</block></then></if>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name pos:line="63" pos:column="17">is</name> <op:operator pos:line="63" pos:column="20">!=</op:operator> <lit:literal type="null" pos:line="63" pos:column="23">null</lit:literal></expr>)</condition><then pos:line="63" pos:column="28"> <block pos:line="63" pos:column="29">{
                <try pos:line="64" pos:column="17">try <block pos:line="64" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="65" pos:column="21">is</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">close</name></name><argument_list pos:line="65" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="66" pos:column="19">catch <parameter_list pos:line="66" pos:column="25">(<param><decl><type><name pos:line="66" pos:column="26">Exception</name></type> <name pos:line="66" pos:column="36">ise</name></decl></param>)</parameter_list> <block pos:line="66" pos:column="41">{
                }</block></catch></try>
            }</block></then></if>
            <expr_stmt><expr><name pos:line="69" pos:column="13">reader</name> <op:operator pos:line="69" pos:column="20">=</op:operator> <lit:literal type="null" pos:line="69" pos:column="22">null</lit:literal></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">reader</name></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="74" pos:column="5">public</specifier> <name pos:line="74" pos:column="12">String</name></type> <name pos:line="74" pos:column="19">getFileContentString</name><parameter_list pos:line="74" pos:column="39">(<param><decl><type><name pos:line="74" pos:column="40">File</name></type> <name pos:line="74" pos:column="45">f</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="48">{
        <return pos:line="75" pos:column="9">return <expr><lit:literal type="null" pos:line="75" pos:column="16">null</lit:literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>
