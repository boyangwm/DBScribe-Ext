<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\JobTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>
<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">LinkedHashMap</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">org</name><op:operator pos:line="4" pos:column="11">.</op:operator><name pos:line="4" pos:column="12">junit</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Test</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">com</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">umas</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">code</name></name>.*;</import>

<class><specifier pos:line="7" pos:column="1">public</specifier> class <name pos:line="7" pos:column="14">JobTest</name> <block pos:line="7" pos:column="22">{

	<function><type><annotation pos:line="9" pos:column="9">@<name pos:line="9" pos:column="10">Test</name></annotation>
	<specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">testJob</name><parameter_list pos:line="10" pos:column="28">()</parameter_list> <block pos:line="10" pos:column="31">{

		<decl_stmt><decl><type><name pos:line="12" pos:column="17">Job</name></type> <name pos:line="12" pos:column="21">job</name> <init pos:line="12" pos:column="25">= <expr><op:operator pos:line="12" pos:column="27">new</op:operator> <call><name pos:line="12" pos:column="31">Job</name><argument_list pos:line="12" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="12" pos:column="35">15</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">assertNotNull</name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		
	}</block></function>
	
	<function><type><annotation pos:line="18" pos:column="9">@<name pos:line="18" pos:column="10">Test</name></annotation>
	<specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">testJob1</name><parameter_list pos:line="19" pos:column="29">()</parameter_list> <block pos:line="19" pos:column="32">{

		<decl_stmt><decl><type><name pos:line="21" pos:column="17">Job</name></type> <name pos:line="21" pos:column="21">job</name><init pos:line="21" pos:column="24">= <expr><op:operator pos:line="21" pos:column="26">new</op:operator> <call><name pos:line="21" pos:column="30">Job</name><argument_list pos:line="21" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="34">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">assertEquals</name><argument_list pos:line="22" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="22" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="22" pos:column="41">job</name><op:operator pos:line="22" pos:column="44">.</op:operator><name pos:line="22" pos:column="45">getPostedByUIN</name></name><argument_list pos:line="22" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		
	}</block></function>
	
	<function><type><annotation pos:line="27" pos:column="9">@<name pos:line="27" pos:column="10">Test</name></annotation>
	<specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">void</name></type> <name pos:line="28" pos:column="21">testPostJob1</name><parameter_list pos:line="28" pos:column="33">()</parameter_list> <block pos:line="28" pos:column="36">{

		<try pos:line="30" pos:column="17">try <block pos:line="30" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">int</name></type> <name pos:line="31" pos:column="29">check</name><init pos:line="31" pos:column="34">=<expr><call><name><name pos:line="31" pos:column="35">Job</name><op:operator pos:line="31" pos:column="38">.</op:operator><name pos:line="31" pos:column="39">postJob</name></name><argument_list pos:line="31" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="31" pos:column="47">451</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="31" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="31" pos:column="55">2.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="31" pos:column="60">2.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="65">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="71">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="77">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="84">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="31" pos:column="91">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">assertEquals</name><argument_list pos:line="32" pos:column="37">(<argument><expr><op:operator pos:line="32" pos:column="38">-</op:operator><lit:literal type="number" pos:line="32" pos:column="39">1</lit:literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="42">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="33" pos:column="19">catch <parameter_list pos:line="33" pos:column="25">(<param><decl><type><name><name pos:line="33" pos:column="26">Job</name><op:operator pos:line="33" pos:column="29">.</op:operator><name pos:line="33" pos:column="30">NoPermissionException</name></name></type> <name pos:line="33" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="55">{
			<comment type="line" pos:line="34" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="35" pos:column="25">e</name><op:operator pos:line="35" pos:column="26">.</op:operator><name pos:line="35" pos:column="27">printStackTrace</name></name><argument_list pos:line="35" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		
	}</block></function>

	<function><type><annotation pos:line="41" pos:column="9">@<name pos:line="41" pos:column="10">Test</name></annotation>
	<specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">testUpdateJob1</name><parameter_list pos:line="42" pos:column="35">()</parameter_list> <block pos:line="42" pos:column="38">{
		
		
		<try pos:line="45" pos:column="17">try <block pos:line="45" pos:column="21">{
			
			<decl_stmt><decl><type><name pos:line="47" pos:column="25">boolean</name></type> <name pos:line="47" pos:column="33">check</name><init pos:line="47" pos:column="38">=<expr><call><name><name pos:line="47" pos:column="39">Job</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">updateJob</name></name><argument_list pos:line="47" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="53">597</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="61">4.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="47" pos:column="69">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="47" pos:column="76">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="47" pos:column="82">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="47" pos:column="88">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="47" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">assertTrue</name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="49" pos:column="19">catch <parameter_list pos:line="49" pos:column="25">(<param><decl><type><name><name pos:line="49" pos:column="26">Job</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">NoPermissionException</name></name></type> <name pos:line="49" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="55">{
			<comment type="line" pos:line="50" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">e</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">printStackTrace</name></name><argument_list pos:line="51" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="55" pos:column="9">@<name pos:line="55" pos:column="10">Test</name></annotation>
	<specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">testUpdateJob2</name><parameter_list pos:line="56" pos:column="35">()</parameter_list> <block pos:line="56" pos:column="38">{
		
		<try pos:line="58" pos:column="17">try <block pos:line="58" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="59" pos:column="25">boolean</name></type> <name pos:line="59" pos:column="33">check</name><init pos:line="59" pos:column="38">=<expr><call><name><name pos:line="59" pos:column="39">Job</name><op:operator pos:line="59" pos:column="42">.</op:operator><name pos:line="59" pos:column="43">updateJob</name></name><argument_list pos:line="59" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="59" pos:column="53">451</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="61">4.0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="69">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="76">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="82">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="88">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">assertFalse</name><argument_list pos:line="60" pos:column="36">(<argument><expr><name pos:line="60" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="61" pos:column="19">catch <parameter_list pos:line="61" pos:column="25">(<param><decl><type><name><name pos:line="61" pos:column="26">Job</name><op:operator pos:line="61" pos:column="29">.</op:operator><name pos:line="61" pos:column="30">NoPermissionException</name></name></type> <name pos:line="61" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="55">{
			<comment type="line" pos:line="62" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">e</name><op:operator pos:line="63" pos:column="26">.</op:operator><name pos:line="63" pos:column="27">printStackTrace</name></name><argument_list pos:line="63" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>


	<function><type><annotation pos:line="68" pos:column="9">@<name pos:line="68" pos:column="10">Test</name></annotation>
	<specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">testCheckEligibility1</name><parameter_list pos:line="69" pos:column="42">()</parameter_list> <block pos:line="69" pos:column="45">{

		<decl_stmt><decl><type><name pos:line="71" pos:column="17">boolean</name></type> <name pos:line="71" pos:column="25">check</name><init pos:line="71" pos:column="30">=<expr><call><name><name pos:line="71" pos:column="31">Job</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">checkEligibility</name></name><argument_list pos:line="71" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="52">597</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">assertTrue</name><argument_list pos:line="72" pos:column="27">(<argument><expr><name pos:line="72" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="75" pos:column="9">@<name pos:line="75" pos:column="10">Test</name></annotation>
	<specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">testCheckEligibility2</name><parameter_list pos:line="76" pos:column="42">()</parameter_list> <block pos:line="76" pos:column="45">{

		<decl_stmt><decl><type><name pos:line="78" pos:column="17">boolean</name></type> <name pos:line="78" pos:column="25">check</name><init pos:line="78" pos:column="30">=<expr><call><name><name pos:line="78" pos:column="31">Job</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">checkEligibility</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="78" pos:column="52">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">assertFalse</name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="82" pos:column="9">@<name pos:line="82" pos:column="10">Test</name></annotation>
	<specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">testAddToJobRoster</name><parameter_list pos:line="83" pos:column="39">()</parameter_list> <block pos:line="83" pos:column="42">{
		<comment type="line" pos:line="84" pos:column="17">//cannot test this functionality as it would cause inconsistency in the database.</comment>
	}</block></function>


	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">testGetAllJobsBySingleProfessor1</name><parameter_list pos:line="89" pos:column="53">()</parameter_list> <block pos:line="89" pos:column="56">{

		<decl_stmt><decl><type><name pos:line="91" pos:column="17">Professor</name></type> <name pos:line="91" pos:column="27">prof</name></decl>;</decl_stmt>
		<try pos:line="92" pos:column="17">try <block pos:line="92" pos:column="21">{
			<expr_stmt><expr><name pos:line="93" pos:column="25">prof</name> <op:operator pos:line="93" pos:column="30">=</op:operator> <op:operator pos:line="93" pos:column="32">new</op:operator> <call><name pos:line="93" pos:column="36">Professor</name><argument_list pos:line="93" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="93" pos:column="46">597</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name pos:line="94" pos:column="25">LinkedHashMap</name><argument_list pos:line="94" pos:column="38">&lt;<argument><name pos:line="94" pos:column="39">Integer</name></argument>, <argument><name pos:line="94" pos:column="48">Job</name></argument>&gt;</argument_list></name></type> <name pos:line="94" pos:column="53">getAllJobsByCheck</name><init pos:line="94" pos:column="70">=<expr><call><name><name pos:line="94" pos:column="71">Job</name><op:operator pos:line="94" pos:column="74">.</op:operator><name pos:line="94" pos:column="75">getAllJobsBySingleProfessor</name></name><argument_list pos:line="94" pos:column="102">(<argument><expr><name pos:line="94" pos:column="103">prof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">assertNotNull</name><argument_list pos:line="95" pos:column="38">(<argument><expr><name pos:line="95" pos:column="39">getAllJobsByCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="96" pos:column="19">catch <parameter_list pos:line="96" pos:column="25">(<param><decl><type><name><name pos:line="96" pos:column="26">Student</name><op:operator pos:line="96" pos:column="33">.</op:operator><name pos:line="96" pos:column="34">AccessDeniedException</name></name></type> | <type><name><name pos:line="96" pos:column="58">People</name><op:operator pos:line="96" pos:column="64">.</op:operator><name pos:line="96" pos:column="65">PersonDoesNotExistException</name></name></type> <name pos:line="96" pos:column="93">e</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="96">{
			<comment type="line" pos:line="97" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">e</name><op:operator pos:line="98" pos:column="26">.</op:operator><name pos:line="98" pos:column="27">printStackTrace</name></name><argument_list pos:line="98" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try> 
		
	}</block></function>
	
	<function><type><annotation pos:line="103" pos:column="9">@<name pos:line="103" pos:column="10">Test</name></annotation>
	<specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">testGetAllJobsBySingleProfessor2</name><parameter_list pos:line="104" pos:column="53">()</parameter_list> <block pos:line="104" pos:column="56">{

		<decl_stmt><decl><type><name pos:line="106" pos:column="17">Professor</name></type> <name pos:line="106" pos:column="27">prof</name></decl>;</decl_stmt>
		<try pos:line="107" pos:column="17">try <block pos:line="107" pos:column="21">{
			<expr_stmt><expr><name pos:line="108" pos:column="25">prof</name> <op:operator pos:line="108" pos:column="30">=</op:operator> <op:operator pos:line="108" pos:column="32">new</op:operator> <call><name pos:line="108" pos:column="36">Professor</name><argument_list pos:line="108" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="108" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name pos:line="109" pos:column="25">LinkedHashMap</name><argument_list pos:line="109" pos:column="38">&lt;<argument><name pos:line="109" pos:column="39">Integer</name></argument>, <argument><name pos:line="109" pos:column="48">Job</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="53">getAllJobsByCheck</name><init pos:line="109" pos:column="70">=<expr><call><name><name pos:line="109" pos:column="71">Job</name><op:operator pos:line="109" pos:column="74">.</op:operator><name pos:line="109" pos:column="75">getAllJobsBySingleProfessor</name></name><argument_list pos:line="109" pos:column="102">(<argument><expr><name pos:line="109" pos:column="103">prof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">assertNull</name><argument_list pos:line="110" pos:column="35">(<argument><expr><name pos:line="110" pos:column="36">getAllJobsByCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="111" pos:column="19">catch <parameter_list pos:line="111" pos:column="25">(<param><decl><type><name><name pos:line="111" pos:column="26">Student</name><op:operator pos:line="111" pos:column="33">.</op:operator><name pos:line="111" pos:column="34">AccessDeniedException</name></name></type> | <type><name><name pos:line="111" pos:column="58">People</name><op:operator pos:line="111" pos:column="64">.</op:operator><name pos:line="111" pos:column="65">PersonDoesNotExistException</name></name></type> <name pos:line="111" pos:column="93">e</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="96">{
			<comment type="line" pos:line="112" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="113" pos:column="25">e</name><op:operator pos:line="113" pos:column="26">.</op:operator><name pos:line="113" pos:column="27">printStackTrace</name></name><argument_list pos:line="113" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try> 
		
	}</block></function>

}</block></class>
</unit>
