<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\ui\SubMenuChoices19_24.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">ui</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">com</name><op:operator pos:line="3" pos:column="11">.</op:operator><name pos:line="3" pos:column="12">riskIt</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">controller</name><op:operator pos:line="3" pos:column="29">.</op:operator><name pos:line="3" pos:column="30">Requirements19_24</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Scanner</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">HashMap</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">interfaces</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">CalculateByOccupationOrIndustryCodeInterface</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">util</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Factory</name></name>;</import>

<comment type="block" format="javadoc" pos:line="10" pos:column="1">/**
 * SubMenuChoices19_24
 * Purpose: UI Component for Requirements (main menu options) 19-24.
 * 
 * @author Selma Tiganj
 * @version 1.0 7-13-09
 */</comment>

<class><specifier pos:line="18" pos:column="1">public</specifier> class <name pos:line="18" pos:column="14">SubMenuChoices19_24</name> <block pos:line="18" pos:column="34">{

	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">Scanner</name></type> <name pos:line="20" pos:column="25">in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <name pos:line="21" pos:column="17">Requirements19_24</name></type> <name pos:line="21" pos:column="35">RequestManager</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">SubMenuChoices19_24</name><parameter_list pos:line="23" pos:column="35">()</parameter_list>
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">in</name> <op:operator pos:line="25" pos:column="20">=</op:operator> <op:operator pos:line="25" pos:column="22">new</op:operator> <call><name pos:line="25" pos:column="26">Scanner</name><argument_list pos:line="25" pos:column="33">(<argument><expr><name><name pos:line="25" pos:column="34">System</name><op:operator pos:line="25" pos:column="40">.</op:operator><name pos:line="25" pos:column="41">in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<expr_stmt><expr><name pos:line="26" pos:column="17">RequestManager</name> <op:operator pos:line="26" pos:column="32">=</op:operator> <op:operator pos:line="26" pos:column="34">new</op:operator> <call><name pos:line="26" pos:column="38">Requirements19_24</name><argument_list pos:line="26" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
<comment type="line" pos:line="29" pos:column="1">//  ########################### FIND TOP STATES ###################################</comment>

    <function><type><specifier pos:line="31" pos:column="5">public</specifier> <name pos:line="31" pos:column="12">void</name></type> <name pos:line="31" pos:column="17">FindTopStatesMenu</name><parameter_list pos:line="31" pos:column="34">(<param><decl><type><name pos:line="31" pos:column="35">String</name></type> <name pos:line="31" pos:column="42">selection</name></decl></param>)</parameter_list>
    <block pos:line="32" pos:column="5">{
		
    	<decl_stmt><decl><type><name pos:line="34" pos:column="9">int</name></type> <name pos:line="34" pos:column="13">choice</name> <init pos:line="34" pos:column="20">= <expr><lit:literal type="number" pos:line="34" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">String</name></type> <name pos:line="35" pos:column="16">getChoice</name> <init pos:line="35" pos:column="26">= <expr><lit:literal type="string" pos:line="35" pos:column="28">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">String</name></type> <name pos:line="36" pos:column="16">category</name><init pos:line="36" pos:column="24">=<expr><lit:literal type="string" pos:line="36" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name><name pos:line="38" pos:column="9">ArrayList</name><argument_list pos:line="38" pos:column="18">&lt;<argument><name pos:line="38" pos:column="19">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="28">code</name> <init pos:line="38" pos:column="33">= <expr><op:operator pos:line="38" pos:column="35">new</op:operator> <call><name><name pos:line="38" pos:column="39">ArrayList</name><argument_list pos:line="38" pos:column="48">&lt;<argument><name pos:line="38" pos:column="49">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="38" pos:column="61">// this is needed to have one function for search by code and category </comment>

		<do pos:line="40" pos:column="17">do
		<block pos:line="41" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">System</name><op:operator pos:line="42" pos:column="31">.</op:operator><name pos:line="42" pos:column="32">out</name><op:operator pos:line="42" pos:column="35">.</op:operator><name pos:line="42" pos:column="36">println</name></name><argument_list pos:line="42" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="44">"\n\n1. Find the top 5 states that have the most workers for given "</lit:literal> <op:operator pos:line="42" pos:column="113">+</op:operator> <name pos:line="42" pos:column="115">selection</name> <op:operator pos:line="42" pos:column="125">+</op:operator> <lit:literal type="string" pos:line="42" pos:column="127">" category"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">System</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">out</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">println</name></name><argument_list pos:line="43" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="44">"2. Find the top 5 states that have the most workers for given "</lit:literal> <op:operator pos:line="43" pos:column="109">+</op:operator> <name pos:line="43" pos:column="111">selection</name> <op:operator pos:line="43" pos:column="121">+</op:operator> <lit:literal type="string" pos:line="43" pos:column="123">" code"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="44" pos:column="25">System</name><op:operator pos:line="44" pos:column="31">.</op:operator><name pos:line="44" pos:column="32">out</name><op:operator pos:line="44" pos:column="35">.</op:operator><name pos:line="44" pos:column="36">println</name></name><argument_list pos:line="44" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="44">"3. Display all "</lit:literal> <op:operator pos:line="44" pos:column="62">+</op:operator> <name pos:line="44" pos:column="64">selection</name> <op:operator pos:line="44" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="44" pos:column="76">" codes with associated "</lit:literal> <op:operator pos:line="44" pos:column="102">+</op:operator> <name pos:line="44" pos:column="104">selection</name> <op:operator pos:line="44" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="44" pos:column="116">" category names"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="45" pos:column="25">System</name><op:operator pos:line="45" pos:column="31">.</op:operator><name pos:line="45" pos:column="32">out</name><op:operator pos:line="45" pos:column="35">.</op:operator><name pos:line="45" pos:column="36">println</name></name><argument_list pos:line="45" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="44">"0. Return to the previous menu"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">System</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">out</name><op:operator pos:line="46" pos:column="35">.</op:operator><name pos:line="46" pos:column="36">print</name></name><argument_list pos:line="46" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="42">"Enter your choice : "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <try pos:line="47" pos:column="22">try<block pos:line="47" pos:column="25">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">getChoice</name> <op:operator pos:line="48" pos:column="35">=</op:operator> <call><name><name pos:line="48" pos:column="37">in</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">nextLine</name></name><argument_list pos:line="48" pos:column="48">()</argument_list></call></expr>;</expr_stmt>	
			
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">System</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">out</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">println</name></name><argument_list pos:line="50" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if pos:line="52" pos:column="25">if<condition pos:line="52" pos:column="27">(<expr><call><name><name pos:line="52" pos:column="28">getChoice</name><op:operator pos:line="52" pos:column="37">.</op:operator><name pos:line="52" pos:column="38">length</name></name><argument_list pos:line="52" pos:column="44">()</argument_list></call> <op:operator pos:line="52" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="52" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="52" pos:column="51">
				<expr_stmt><expr><name pos:line="53" pos:column="33">choice</name> <op:operator pos:line="53" pos:column="40">=</op:operator> <call><name><name pos:line="53" pos:column="42">Integer</name><op:operator pos:line="53" pos:column="49">.</op:operator><name pos:line="53" pos:column="50">parseInt</name></name><argument_list pos:line="53" pos:column="58">(<argument><expr><name pos:line="53" pos:column="59">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="54" pos:column="25">else
				<expr_stmt><expr><name pos:line="55" pos:column="33">choice</name> <op:operator pos:line="55" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="55" pos:column="42">0</lit:literal></expr>;</expr_stmt></else></if>
		     }</block><catch pos:line="56" pos:column="23">catch<parameter_list pos:line="56" pos:column="28">(<param><decl><type><name pos:line="56" pos:column="29">NumberFormatException</name></type> <name pos:line="56" pos:column="51">e</name></decl></param>)</parameter_list><block pos:line="56" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="57" pos:column="33">System</name><op:operator pos:line="57" pos:column="39">.</op:operator><name pos:line="57" pos:column="40">out</name><op:operator pos:line="57" pos:column="43">.</op:operator><name pos:line="57" pos:column="44">println</name></name><argument_list pos:line="57" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="52">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="58" pos:column="33">choice</name> <op:operator pos:line="58" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="58" pos:column="42">0</lit:literal></expr>;</expr_stmt>
	             }</block></catch></try>	
			<switch pos:line="60" pos:column="25">switch<condition pos:line="60" pos:column="31">(<expr><name pos:line="60" pos:column="32">choice</name></expr>)</condition>
			<block pos:line="61" pos:column="25">{
                        <case pos:line="62" pos:column="25">case <expr><lit:literal type="number" pos:line="62" pos:column="30">0</lit:literal></expr>:
					<break pos:line="63" pos:column="41">break;</break>
			</case><case pos:line="64" pos:column="25">case <expr><lit:literal type="number" pos:line="64" pos:column="30">1</lit:literal></expr>:
					<expr_stmt><expr><call><name><name pos:line="65" pos:column="41">System</name><op:operator pos:line="65" pos:column="47">.</op:operator><name pos:line="65" pos:column="48">out</name><op:operator pos:line="65" pos:column="51">.</op:operator><name pos:line="65" pos:column="52">print</name></name><argument_list pos:line="65" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="58">"Please enter the "</lit:literal> <op:operator pos:line="65" pos:column="78">+</op:operator> <name pos:line="65" pos:column="80">selection</name> <op:operator pos:line="65" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="65" pos:column="92">" category: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                                        <if pos:line="66" pos:column="41">if <condition pos:line="66" pos:column="44">(<expr><call><name><name pos:line="66" pos:column="45">in</name><op:operator pos:line="66" pos:column="47">.</op:operator><name pos:line="66" pos:column="48">hasNextInt</name></name><argument_list pos:line="66" pos:column="58">()</argument_list></call></expr>)</condition><then pos:line="66" pos:column="61"> <block pos:line="66" pos:column="62">{
                                                <expr_stmt><expr><call><name><name pos:line="67" pos:column="49">System</name><op:operator pos:line="67" pos:column="55">.</op:operator><name pos:line="67" pos:column="56">out</name><op:operator pos:line="67" pos:column="59">.</op:operator><name pos:line="67" pos:column="60">println</name></name><argument_list pos:line="67" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="68">"Invalid Input: "</lit:literal> <op:operator pos:line="67" pos:column="86">+</op:operator> <call><name><name pos:line="67" pos:column="88">in</name><op:operator pos:line="67" pos:column="90">.</op:operator><name pos:line="67" pos:column="91">nextLine</name></name><argument_list pos:line="67" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></then><else pos:line="68" pos:column="42">else<block pos:line="68" pos:column="46">{
                    			        <expr_stmt><expr><name pos:line="69" pos:column="49">category</name> <op:operator pos:line="69" pos:column="58">=</op:operator>  <call><name><name pos:line="69" pos:column="61">in</name><op:operator pos:line="69" pos:column="63">.</op:operator><name pos:line="69" pos:column="64">nextLine</name></name><argument_list pos:line="69" pos:column="72">()</argument_list></call></expr> ;</expr_stmt>                             
                    			        <expr_stmt><expr><call><name><name pos:line="70" pos:column="49">RequestManager</name><op:operator pos:line="70" pos:column="63">.</op:operator><name pos:line="70" pos:column="64">FindTopStatesByCategory</name></name><argument_list pos:line="70" pos:column="87">(<argument><expr><name pos:line="70" pos:column="88">selection</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="99">category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></else></if>
					<break pos:line="72" pos:column="41">break;</break>
			</case><case pos:line="73" pos:column="25">case <expr><lit:literal type="number" pos:line="73" pos:column="30">2</lit:literal></expr>: 
                                     <try pos:line="74" pos:column="38">try<block pos:line="74" pos:column="41">{
                  			<expr_stmt><expr><call><name><name pos:line="75" pos:column="41">System</name><op:operator pos:line="75" pos:column="47">.</op:operator><name pos:line="75" pos:column="48">out</name><op:operator pos:line="75" pos:column="51">.</op:operator><name pos:line="75" pos:column="52">print</name></name><argument_list pos:line="75" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="58">"Please enter the "</lit:literal> <op:operator pos:line="75" pos:column="78">+</op:operator> <name pos:line="75" pos:column="80">selection</name> <op:operator pos:line="75" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="75" pos:column="92">" code: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                  			<expr_stmt><expr><name pos:line="76" pos:column="41">getChoice</name> <op:operator pos:line="76" pos:column="51">=</op:operator>  <call><name><name pos:line="76" pos:column="54">in</name><op:operator pos:line="76" pos:column="56">.</op:operator><name pos:line="76" pos:column="57">nextLine</name></name><argument_list pos:line="76" pos:column="65">()</argument_list></call></expr> ;</expr_stmt> 
                  			<if pos:line="77" pos:column="41">if<condition pos:line="77" pos:column="43">(<expr><call><name><name pos:line="77" pos:column="44">getChoice</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">length</name></name><argument_list pos:line="77" pos:column="60">()</argument_list></call> <op:operator pos:line="77" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="77" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="77" pos:column="67">
                	  			<expr_stmt><expr><call><name><name pos:line="78" pos:column="49">code</name><op:operator pos:line="78" pos:column="53">.</op:operator><name pos:line="78" pos:column="54">add</name></name><argument_list pos:line="78" pos:column="57">(<argument><expr><call><name><name pos:line="78" pos:column="58">Integer</name><op:operator pos:line="78" pos:column="65">.</op:operator><name pos:line="78" pos:column="66">parseInt</name></name><argument_list pos:line="78" pos:column="74">(<argument><expr><name pos:line="78" pos:column="75">getChoice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			      		<else pos:line="79" pos:column="41">else
			    	  		<expr_stmt><expr><call><name><name pos:line="80" pos:column="49">code</name><op:operator pos:line="80" pos:column="53">.</op:operator><name pos:line="80" pos:column="54">add</name></name><argument_list pos:line="80" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if> 
                                                                
                  			<expr_stmt><expr><call><name><name pos:line="82" pos:column="41">RequestManager</name><op:operator pos:line="82" pos:column="55">.</op:operator><name pos:line="82" pos:column="56">FindTopStatesByCode</name></name><argument_list pos:line="82" pos:column="75">(<argument><expr><name pos:line="82" pos:column="76">selection</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="87">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name pos:line="83" pos:column="41">code</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">clear</name></name><argument_list pos:line="83" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				     }</block><catch pos:line="84" pos:column="39">catch<parameter_list pos:line="84" pos:column="44">(<param><decl><type><name pos:line="84" pos:column="45">NumberFormatException</name></type> <name pos:line="84" pos:column="67">e</name></decl></param>)</parameter_list><block pos:line="84" pos:column="69">{
				         <expr_stmt><expr><call><name><name pos:line="85" pos:column="42">System</name><op:operator pos:line="85" pos:column="48">.</op:operator><name pos:line="85" pos:column="49">out</name><op:operator pos:line="85" pos:column="52">.</op:operator><name pos:line="85" pos:column="53">println</name></name><argument_list pos:line="85" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="61">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                             }</block></catch></try>
					<break pos:line="87" pos:column="41">break;</break>
                        </case><case pos:line="88" pos:column="25">case <expr><lit:literal type="number" pos:line="88" pos:column="30">3</lit:literal></expr>:
                                     <if pos:line="89" pos:column="38">if<condition pos:line="89" pos:column="40">( <expr><call><name><name pos:line="89" pos:column="42">selection</name><op:operator pos:line="89" pos:column="51">.</op:operator><name pos:line="89" pos:column="52">equals</name></name><argument_list pos:line="89" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="59">"occupation"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="73">
                                         <expr_stmt><expr><call><name pos:line="90" pos:column="42">displayOccupationMap</name><argument_list pos:line="90" pos:column="62">()</argument_list></call></expr>;</expr_stmt></then>
                                     <else pos:line="91" pos:column="38">else
                                         <expr_stmt><expr><call><name pos:line="92" pos:column="42">displayIndustryMap</name><argument_list pos:line="92" pos:column="60">()</argument_list></call></expr>;</expr_stmt></else></if>
                                       <break pos:line="93" pos:column="40">break;</break>  
			
			</case><default pos:line="95" pos:column="25">default:
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">System</name><op:operator pos:line="96" pos:column="47">.</op:operator><name pos:line="96" pos:column="48">out</name><op:operator pos:line="96" pos:column="51">.</op:operator><name pos:line="96" pos:column="52">println</name></name><argument_list pos:line="96" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="60">"You chose invalid option. Please try again..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="97" pos:column="33">break;</break>				 
			
			</default>}</block></switch>
                    
		}</block>while<condition pos:line="101" pos:column="23">(<expr><name pos:line="101" pos:column="24">choice</name> <op:operator pos:line="101" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="101" pos:column="33">0</lit:literal> <op:operator pos:line="101" pos:column="35">&amp;&amp;</op:operator> <name pos:line="101" pos:column="38">choice</name> <op:operator pos:line="101" pos:column="45">&lt;</op:operator> <lit:literal type="number" pos:line="101" pos:column="47">4</lit:literal></expr>)</condition>;</do>
     }</block></function>	

    
 <comment type="line" pos:line="105" pos:column="2">// #########################RECOMMEND BEST STATE TO WORK ######################</comment>

    <function><type><specifier pos:line="107" pos:column="5">public</specifier> <name pos:line="107" pos:column="12">void</name></type> <name pos:line="107" pos:column="17">RecommendBestStateToWorkMenu</name><parameter_list pos:line="107" pos:column="45">()</parameter_list><block pos:line="107" pos:column="47">{

     <decl_stmt><decl><type><name pos:line="109" pos:column="6">int</name></type> <name pos:line="109" pos:column="10">ssn</name> <init pos:line="109" pos:column="14">= <expr><lit:literal type="number" pos:line="109" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name pos:line="110" pos:column="6">String</name></type> <name pos:line="110" pos:column="13">getChoice</name> <init pos:line="110" pos:column="23">= <expr><lit:literal type="string" pos:line="110" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>

     <do pos:line="112" pos:column="6">do
     <block pos:line="113" pos:column="6">{
    	 <expr_stmt><expr><call><name><name pos:line="114" pos:column="10">System</name><op:operator pos:line="114" pos:column="16">.</op:operator><name pos:line="114" pos:column="17">out</name><op:operator pos:line="114" pos:column="20">.</op:operator><name pos:line="114" pos:column="21">print</name></name><argument_list pos:line="114" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="27">"Please enter 9 digits user's SSN or enter 0 to return to previous menu: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="115" pos:column="9">getChoice</name> <op:operator pos:line="115" pos:column="19">=</op:operator> <call><name><name pos:line="115" pos:column="21">in</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">nextLine</name></name><argument_list pos:line="115" pos:column="32">()</argument_list></call></expr>;</expr_stmt>	
			
        <expr_stmt><expr><call><name><name pos:line="117" pos:column="9">System</name><op:operator pos:line="117" pos:column="15">.</op:operator><name pos:line="117" pos:column="16">out</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">println</name></name><argument_list pos:line="117" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="28">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<try pos:line="118" pos:column="9">try<block pos:line="118" pos:column="12">{		
            <if pos:line="119" pos:column="13">if<condition pos:line="119" pos:column="15">(<expr><call><name><name pos:line="119" pos:column="16">getChoice</name><op:operator pos:line="119" pos:column="25">.</op:operator><name pos:line="119" pos:column="26">length</name></name><argument_list pos:line="119" pos:column="32">()</argument_list></call> <op:operator pos:line="119" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="119" pos:column="38">9</lit:literal></expr> )</condition><then><block pos:line="119" pos:column="41">{                 
        		<expr_stmt><expr><name pos:line="120" pos:column="25">ssn</name> <op:operator pos:line="120" pos:column="29">=</op:operator> <call><name><name pos:line="120" pos:column="31">Integer</name><op:operator pos:line="120" pos:column="38">.</op:operator><name pos:line="120" pos:column="39">parseInt</name></name><argument_list pos:line="120" pos:column="47">(<argument><expr><name pos:line="120" pos:column="48">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">RequestManager</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">RecommendBestStateToWork</name></name><argument_list pos:line="121" pos:column="64">(<argument><expr><name pos:line="121" pos:column="65">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="123" pos:column="13">else <if pos:line="123" pos:column="18">if <condition pos:line="123" pos:column="21">(<expr><call><name><name pos:line="123" pos:column="22">getChoice</name><op:operator pos:line="123" pos:column="31">.</op:operator><name pos:line="123" pos:column="32">length</name></name><argument_list pos:line="123" pos:column="38">()</argument_list></call><op:operator pos:line="123" pos:column="40">&gt;</op:operator><lit:literal type="number" pos:line="123" pos:column="41">0</lit:literal></expr>)</condition><then><block pos:line="123" pos:column="43">{
                <expr_stmt><expr><name pos:line="124" pos:column="17">ssn</name> <op:operator pos:line="124" pos:column="21">=</op:operator> <call><name><name pos:line="124" pos:column="23">Integer</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">parseInt</name></name><argument_list pos:line="124" pos:column="39">(<argument><expr><name pos:line="124" pos:column="40">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="125" pos:column="17">if<condition pos:line="125" pos:column="19">(<expr><name pos:line="125" pos:column="20">ssn</name><op:operator pos:line="125" pos:column="23">!=</op:operator><lit:literal type="number" pos:line="125" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="125" pos:column="27">
                 <expr_stmt><expr><call><name><name pos:line="126" pos:column="18">System</name><op:operator pos:line="126" pos:column="24">.</op:operator><name pos:line="126" pos:column="25">out</name><op:operator pos:line="126" pos:column="28">.</op:operator><name pos:line="126" pos:column="29">println</name></name><argument_list pos:line="126" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="37">"You entered invalid SSN."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if></else></if>
        }</block><catch pos:line="128" pos:column="10">catch<parameter_list pos:line="128" pos:column="15">(<param><decl><type><name pos:line="128" pos:column="16">NumberFormatException</name></type> <name pos:line="128" pos:column="38">e</name></decl></param>)</parameter_list><block pos:line="128" pos:column="40">{
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">System</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">out</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">println</name></name><argument_list pos:line="129" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="44">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>	   

     }</block>while<condition pos:line="132" pos:column="12">(<expr><name pos:line="132" pos:column="13">ssn</name> <op:operator pos:line="132" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="132" pos:column="19">0</lit:literal></expr> )</condition>;</do>
  }</block></function>


<comment type="line" pos:line="136" pos:column="1">//############################## COMPUTE AVERAGE EDUCATION ###################</comment>

    <function><type><specifier pos:line="138" pos:column="5">public</specifier> <name pos:line="138" pos:column="12">void</name></type> <name pos:line="138" pos:column="17">ComputeAverageEducationMenu</name><parameter_list pos:line="138" pos:column="44">()</parameter_list>
    <block pos:line="139" pos:column="5">{
	    <decl_stmt><decl><type><name pos:line="140" pos:column="13">String</name></type> <name pos:line="140" pos:column="20">getChoice</name> <init pos:line="140" pos:column="30">= <expr><lit:literal type="string" pos:line="140" pos:column="32">""</lit:literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="141" pos:column="13">int</name></type> <name pos:line="141" pos:column="17">choice</name> <init pos:line="141" pos:column="24">=<expr><lit:literal type="number" pos:line="141" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="142" pos:column="13">int</name></type> <name pos:line="142" pos:column="17">code</name><init pos:line="142" pos:column="21">=<expr><lit:literal type="number" pos:line="142" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="143" pos:column="13">String</name></type> <name pos:line="143" pos:column="20">selection</name><init pos:line="143" pos:column="29">=<expr><lit:literal type="string" pos:line="143" pos:column="30">""</lit:literal></expr></init></decl>;</decl_stmt>

		<do pos:line="145" pos:column="17">do
		<block pos:line="146" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">System</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">out</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">println</name></name><argument_list pos:line="147" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="44">"1. Compute average education level by industry"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="148" pos:column="25">System</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">out</name><op:operator pos:line="148" pos:column="35">.</op:operator><name pos:line="148" pos:column="36">println</name></name><argument_list pos:line="148" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="44">"2. Compute average education level by occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="149" pos:column="25">System</name><op:operator pos:line="149" pos:column="31">.</op:operator><name pos:line="149" pos:column="32">out</name><op:operator pos:line="149" pos:column="35">.</op:operator><name pos:line="149" pos:column="36">println</name></name><argument_list pos:line="149" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="44">"3. Display all industry codes with associated industry category names"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="150" pos:column="25">System</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">out</name><op:operator pos:line="150" pos:column="35">.</op:operator><name pos:line="150" pos:column="36">println</name></name><argument_list pos:line="150" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="44">"4. Display all occupation codes with associated occupation category names"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            		<expr_stmt><expr><call><name><name pos:line="151" pos:column="25">System</name><op:operator pos:line="151" pos:column="31">.</op:operator><name pos:line="151" pos:column="32">out</name><op:operator pos:line="151" pos:column="35">.</op:operator><name pos:line="151" pos:column="36">println</name></name><argument_list pos:line="151" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="44">"0. Return to the previous menu"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="152" pos:column="25">System</name><op:operator pos:line="152" pos:column="31">.</op:operator><name pos:line="152" pos:column="32">out</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">print</name></name><argument_list pos:line="152" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="42">"Enter your choice : "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="153" pos:column="25">getChoice</name> <op:operator pos:line="153" pos:column="35">=</op:operator> <call><name><name pos:line="153" pos:column="37">in</name><op:operator pos:line="153" pos:column="39">.</op:operator><name pos:line="153" pos:column="40">nextLine</name></name><argument_list pos:line="153" pos:column="48">()</argument_list></call></expr>;</expr_stmt>	
			
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">System</name><op:operator pos:line="155" pos:column="31">.</op:operator><name pos:line="155" pos:column="32">out</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">println</name></name><argument_list pos:line="155" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     <try pos:line="156" pos:column="22">try<block pos:line="156" pos:column="25">{
			<if pos:line="157" pos:column="25">if<condition pos:line="157" pos:column="27">(<expr><call><name><name pos:line="157" pos:column="28">getChoice</name><op:operator pos:line="157" pos:column="37">.</op:operator><name pos:line="157" pos:column="38">length</name></name><argument_list pos:line="157" pos:column="44">()</argument_list></call> <op:operator pos:line="157" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="157" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="157" pos:column="51">
				<expr_stmt><expr><name pos:line="158" pos:column="33">choice</name> <op:operator pos:line="158" pos:column="40">=</op:operator> <call><name><name pos:line="158" pos:column="42">Integer</name><op:operator pos:line="158" pos:column="49">.</op:operator><name pos:line="158" pos:column="50">parseInt</name></name><argument_list pos:line="158" pos:column="58">(<argument><expr><name pos:line="158" pos:column="59">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="159" pos:column="25">else
				<expr_stmt><expr><name pos:line="160" pos:column="33">choice</name> <op:operator pos:line="160" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="160" pos:column="42">0</lit:literal></expr>;</expr_stmt></else></if>
                     }</block><catch pos:line="161" pos:column="23">catch<parameter_list pos:line="161" pos:column="28">(<param><decl><type><name pos:line="161" pos:column="29">NumberFormatException</name></type> <name pos:line="161" pos:column="51">e</name></decl></param>)</parameter_list><block pos:line="161" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">System</name><op:operator pos:line="162" pos:column="39">.</op:operator><name pos:line="162" pos:column="40">out</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">println</name></name><argument_list pos:line="162" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="52">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="163" pos:column="33">choice</name> <op:operator pos:line="163" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="163" pos:column="42">0</lit:literal></expr>;</expr_stmt>
	             }</block></catch></try> 
			
			<switch pos:line="166" pos:column="25">switch<condition pos:line="166" pos:column="31">(<expr><name pos:line="166" pos:column="32">choice</name></expr>)</condition>
			<block pos:line="167" pos:column="25">{
            <case pos:line="168" pos:column="13">case <expr><lit:literal type="number" pos:line="168" pos:column="18">0</lit:literal></expr>:
                   <break pos:line="169" pos:column="20">break;</break>
			</case><case pos:line="170" pos:column="25">case <expr><lit:literal type="number" pos:line="170" pos:column="30">1</lit:literal></expr>: 
                   		<expr_stmt><expr><call><name><name pos:line="171" pos:column="33">System</name><op:operator pos:line="171" pos:column="39">.</op:operator><name pos:line="171" pos:column="40">out</name><op:operator pos:line="171" pos:column="43">.</op:operator><name pos:line="171" pos:column="44">print</name></name><argument_list pos:line="171" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="50">"Please enter the industry code:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       	<expr_stmt><expr><name pos:line="172" pos:column="33">getChoice</name> <op:operator pos:line="172" pos:column="43">=</op:operator> <call><name><name pos:line="172" pos:column="45">in</name><op:operator pos:line="172" pos:column="47">.</op:operator><name pos:line="172" pos:column="48">nextLine</name></name><argument_list pos:line="172" pos:column="56">()</argument_list></call></expr>;</expr_stmt>                              
			       	<expr_stmt><expr><call><name><name pos:line="173" pos:column="33">System</name><op:operator pos:line="173" pos:column="39">.</op:operator><name pos:line="173" pos:column="40">out</name><op:operator pos:line="173" pos:column="43">.</op:operator><name pos:line="173" pos:column="44">println</name></name><argument_list pos:line="173" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       	<expr_stmt><expr><name pos:line="174" pos:column="33">selection</name> <op:operator pos:line="174" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="174" pos:column="45">"industry"</lit:literal></expr>;</expr_stmt>
                                <try pos:line="175" pos:column="33">try<block pos:line="175" pos:column="36">{
			       	 <if pos:line="176" pos:column="34">if<condition pos:line="176" pos:column="36">(<expr><call><name><name pos:line="176" pos:column="37">getChoice</name><op:operator pos:line="176" pos:column="46">.</op:operator><name pos:line="176" pos:column="47">length</name></name><argument_list pos:line="176" pos:column="53">()</argument_list></call> <op:operator pos:line="176" pos:column="56">&gt;</op:operator> <lit:literal type="number" pos:line="176" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="176" pos:column="60">
			       	   <expr_stmt><expr><name pos:line="177" pos:column="36">code</name> <op:operator pos:line="177" pos:column="41">=</op:operator> <call><name><name pos:line="177" pos:column="43">Integer</name><op:operator pos:line="177" pos:column="50">.</op:operator><name pos:line="177" pos:column="51">parseInt</name></name><argument_list pos:line="177" pos:column="59">(<argument><expr><name pos:line="177" pos:column="60">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>	                              
                   		 <expr_stmt><expr><call><name><name pos:line="178" pos:column="34">RequestManager</name><op:operator pos:line="178" pos:column="48">.</op:operator><name pos:line="178" pos:column="49">ComputeAverageEducationString</name></name><argument_list pos:line="178" pos:column="78">(<argument><expr><name pos:line="178" pos:column="79">selection</name></expr></argument>,<argument><expr><name pos:line="178" pos:column="89">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block><catch pos:line="179" pos:column="34">catch<parameter_list pos:line="179" pos:column="39">(<param><decl><type><name pos:line="179" pos:column="40">NumberFormatException</name></type> <name pos:line="179" pos:column="62">e</name></decl></param>)</parameter_list><block pos:line="179" pos:column="64">{
			             <expr_stmt><expr><call><name><name pos:line="180" pos:column="38">System</name><op:operator pos:line="180" pos:column="44">.</op:operator><name pos:line="180" pos:column="45">out</name><op:operator pos:line="180" pos:column="48">.</op:operator><name pos:line="180" pos:column="49">println</name></name><argument_list pos:line="180" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="57">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                        }</block></catch></try>
			       <break pos:line="182" pos:column="32">break;</break>
			</case><case pos:line="183" pos:column="25">case <expr><lit:literal type="number" pos:line="183" pos:column="30">2</lit:literal></expr>: 
                   	       	<expr_stmt><expr><call><name><name pos:line="184" pos:column="33">System</name><op:operator pos:line="184" pos:column="39">.</op:operator><name pos:line="184" pos:column="40">out</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">print</name></name><argument_list pos:line="184" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="50">"Please enter the occupation code:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       	<expr_stmt><expr><name pos:line="185" pos:column="33">getChoice</name> <op:operator pos:line="185" pos:column="43">=</op:operator> <call><name><name pos:line="185" pos:column="45">in</name><op:operator pos:line="185" pos:column="47">.</op:operator><name pos:line="185" pos:column="48">nextLine</name></name><argument_list pos:line="185" pos:column="56">()</argument_list></call></expr>;</expr_stmt>                              
			       	<expr_stmt><expr><call><name><name pos:line="186" pos:column="33">System</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">out</name><op:operator pos:line="186" pos:column="43">.</op:operator><name pos:line="186" pos:column="44">println</name></name><argument_list pos:line="186" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       	<expr_stmt><expr><name pos:line="187" pos:column="33">selection</name> <op:operator pos:line="187" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="187" pos:column="45">"occupation"</lit:literal></expr>;</expr_stmt>
                                <try pos:line="188" pos:column="33">try<block pos:line="188" pos:column="36">{
			       	  <if pos:line="189" pos:column="35">if<condition pos:line="189" pos:column="37">(<expr><call><name><name pos:line="189" pos:column="38">getChoice</name><op:operator pos:line="189" pos:column="47">.</op:operator><name pos:line="189" pos:column="48">length</name></name><argument_list pos:line="189" pos:column="54">()</argument_list></call> <op:operator pos:line="189" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="189" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="189" pos:column="61">
				     <expr_stmt><expr><name pos:line="190" pos:column="38">code</name> <op:operator pos:line="190" pos:column="43">=</op:operator> <call><name><name pos:line="190" pos:column="45">Integer</name><op:operator pos:line="190" pos:column="52">.</op:operator><name pos:line="190" pos:column="53">parseInt</name></name><argument_list pos:line="190" pos:column="61">(<argument><expr><name pos:line="190" pos:column="62">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>	                              
                   		  <expr_stmt><expr><call><name><name pos:line="191" pos:column="35">RequestManager</name><op:operator pos:line="191" pos:column="49">.</op:operator><name pos:line="191" pos:column="50">ComputeAverageEducationString</name></name><argument_list pos:line="191" pos:column="79">(<argument><expr><name pos:line="191" pos:column="80">selection</name></expr></argument>,<argument><expr><name pos:line="191" pos:column="90">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block><catch pos:line="192" pos:column="34">catch<parameter_list pos:line="192" pos:column="39">(<param><decl><type><name pos:line="192" pos:column="40">NumberFormatException</name></type> <name pos:line="192" pos:column="62">e</name></decl></param>)</parameter_list><block pos:line="192" pos:column="64">{
			              <expr_stmt><expr><call><name><name pos:line="193" pos:column="39">System</name><op:operator pos:line="193" pos:column="45">.</op:operator><name pos:line="193" pos:column="46">out</name><op:operator pos:line="193" pos:column="49">.</op:operator><name pos:line="193" pos:column="50">println</name></name><argument_list pos:line="193" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="58">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                        }</block></catch></try>
			       <break pos:line="195" pos:column="32">break;</break>

                        </case><case pos:line="197" pos:column="25">case <expr><lit:literal type="number" pos:line="197" pos:column="30">3</lit:literal></expr>:
                               <expr_stmt><expr><call><name pos:line="198" pos:column="32">displayIndustryMap</name><argument_list pos:line="198" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
                               <break pos:line="199" pos:column="32">break;</break>
                        </case><case pos:line="200" pos:column="25">case <expr><lit:literal type="number" pos:line="200" pos:column="30">4</lit:literal></expr>:
                               <expr_stmt><expr><call><name pos:line="201" pos:column="32">displayOccupationMap</name><argument_list pos:line="201" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                               <break pos:line="202" pos:column="32">break;</break>
			</case><default pos:line="203" pos:column="25">default:
					<expr_stmt><expr><call><name><name pos:line="204" pos:column="41">System</name><op:operator pos:line="204" pos:column="47">.</op:operator><name pos:line="204" pos:column="48">out</name><op:operator pos:line="204" pos:column="51">.</op:operator><name pos:line="204" pos:column="52">println</name></name><argument_list pos:line="204" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="60">"Invalid option. Please try again..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="205" pos:column="33">break;</break>					
					 			
			</default>}</block></switch>
            
		}</block>while<condition pos:line="209" pos:column="23">(<expr><name pos:line="209" pos:column="24">choice</name> <op:operator pos:line="209" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="209" pos:column="33">0</lit:literal> <op:operator pos:line="209" pos:column="35">&amp;&amp;</op:operator> <name pos:line="209" pos:column="38">choice</name><op:operator pos:line="209" pos:column="44">&lt;</op:operator><lit:literal type="number" pos:line="209" pos:column="45">5</lit:literal></expr>)</condition>;</do>
  }</block></function>	

<comment type="line" pos:line="212" pos:column="1">//############################## FIND OCCUPATION/INDUSTRY WITH HIGHEST/LOWES EDUCATION ###################</comment>

    <function><type><specifier pos:line="214" pos:column="5">public</specifier> <name pos:line="214" pos:column="12">void</name></type> <name pos:line="214" pos:column="17">FindOccIndustryWithHighestLowestEducationMenu</name><parameter_list pos:line="214" pos:column="62">()</parameter_list>
    <block pos:line="215" pos:column="5">{
	    <decl_stmt><decl><type><name pos:line="216" pos:column="13">String</name></type> <name pos:line="216" pos:column="20">getChoice</name> <init pos:line="216" pos:column="30">= <expr><lit:literal type="string" pos:line="216" pos:column="32">""</lit:literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="217" pos:column="13">int</name></type> <name pos:line="217" pos:column="17">choice</name> <init pos:line="217" pos:column="24">=<expr><lit:literal type="number" pos:line="217" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

		<do pos:line="219" pos:column="17">do
		<block pos:line="220" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="221" pos:column="25">System</name><op:operator pos:line="221" pos:column="31">.</op:operator><name pos:line="221" pos:column="32">out</name><op:operator pos:line="221" pos:column="35">.</op:operator><name pos:line="221" pos:column="36">println</name></name><argument_list pos:line="221" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="44">"\n\n1. Find industries in which workers have the highest and lowest education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">System</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">out</name><op:operator pos:line="222" pos:column="35">.</op:operator><name pos:line="222" pos:column="36">println</name></name><argument_list pos:line="222" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="44">"2. Find occupations in which workers have the highest and lowest education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            		<expr_stmt><expr><call><name><name pos:line="223" pos:column="25">System</name><op:operator pos:line="223" pos:column="31">.</op:operator><name pos:line="223" pos:column="32">out</name><op:operator pos:line="223" pos:column="35">.</op:operator><name pos:line="223" pos:column="36">println</name></name><argument_list pos:line="223" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="44">"0. Return to the previous menu"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="224" pos:column="25">System</name><op:operator pos:line="224" pos:column="31">.</op:operator><name pos:line="224" pos:column="32">out</name><op:operator pos:line="224" pos:column="35">.</op:operator><name pos:line="224" pos:column="36">print</name></name><argument_list pos:line="224" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="42">"Enter your choice : "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="225" pos:column="25">getChoice</name> <op:operator pos:line="225" pos:column="35">=</op:operator> <call><name><name pos:line="225" pos:column="37">in</name><op:operator pos:line="225" pos:column="39">.</op:operator><name pos:line="225" pos:column="40">nextLine</name></name><argument_list pos:line="225" pos:column="48">()</argument_list></call></expr>;</expr_stmt>	
			
			<expr_stmt><expr><call><name><name pos:line="227" pos:column="25">System</name><op:operator pos:line="227" pos:column="31">.</op:operator><name pos:line="227" pos:column="32">out</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">println</name></name><argument_list pos:line="227" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="228" pos:column="25">System</name><op:operator pos:line="228" pos:column="31">.</op:operator><name pos:line="228" pos:column="32">out</name><op:operator pos:line="228" pos:column="35">.</op:operator><name pos:line="228" pos:column="36">println</name></name><argument_list pos:line="228" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <try pos:line="229" pos:column="22">try<block pos:line="229" pos:column="25">{
			<if pos:line="230" pos:column="25">if<condition pos:line="230" pos:column="27">(<expr><call><name><name pos:line="230" pos:column="28">getChoice</name><op:operator pos:line="230" pos:column="37">.</op:operator><name pos:line="230" pos:column="38">length</name></name><argument_list pos:line="230" pos:column="44">()</argument_list></call> <op:operator pos:line="230" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="230" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="230" pos:column="51">
				<expr_stmt><expr><name pos:line="231" pos:column="33">choice</name> <op:operator pos:line="231" pos:column="40">=</op:operator> <call><name><name pos:line="231" pos:column="42">Integer</name><op:operator pos:line="231" pos:column="49">.</op:operator><name pos:line="231" pos:column="50">parseInt</name></name><argument_list pos:line="231" pos:column="58">(<argument><expr><name pos:line="231" pos:column="59">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="232" pos:column="25">else
				<expr_stmt><expr><name pos:line="233" pos:column="33">choice</name> <op:operator pos:line="233" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="233" pos:column="42">0</lit:literal></expr>;</expr_stmt></else></if>
                     }</block><catch pos:line="234" pos:column="23">catch<parameter_list pos:line="234" pos:column="28">(<param><decl><type><name pos:line="234" pos:column="29">NumberFormatException</name></type> <name pos:line="234" pos:column="51">e</name></decl></param>)</parameter_list><block pos:line="234" pos:column="53">{
			             <expr_stmt><expr><call><name><name pos:line="235" pos:column="38">System</name><op:operator pos:line="235" pos:column="44">.</op:operator><name pos:line="235" pos:column="45">out</name><op:operator pos:line="235" pos:column="48">.</op:operator><name pos:line="235" pos:column="49">println</name></name><argument_list pos:line="235" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="57">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                     <expr_stmt><expr><name pos:line="236" pos:column="38">choice</name> <op:operator pos:line="236" pos:column="45">=</op:operator> <lit:literal type="number" pos:line="236" pos:column="47">0</lit:literal></expr>;</expr_stmt>
	             }</block></catch></try>
			
			<switch pos:line="239" pos:column="25">switch<condition pos:line="239" pos:column="31">(<expr><name pos:line="239" pos:column="32">choice</name></expr>)</condition>
			<block pos:line="240" pos:column="25">{
             	<case pos:line="241" pos:column="17">case <expr><lit:literal type="number" pos:line="241" pos:column="22">0</lit:literal></expr>:
                          <break pos:line="242" pos:column="27">break;</break>
             	</case><case pos:line="243" pos:column="17">case <expr><lit:literal type="number" pos:line="243" pos:column="22">1</lit:literal></expr>: 	                              
             		<expr_stmt><expr><call><name><name pos:line="244" pos:column="25">RequestManager</name><op:operator pos:line="244" pos:column="39">.</op:operator><name pos:line="244" pos:column="40">FindCccupationIndustryWithHighestLowestEducation</name></name><argument_list pos:line="244" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="89">"industry"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       <break pos:line="245" pos:column="32">break;</break>
             	</case><case pos:line="246" pos:column="17">case <expr><lit:literal type="number" pos:line="246" pos:column="22">2</lit:literal></expr>: 
             		<expr_stmt><expr><call><name><name pos:line="247" pos:column="25">RequestManager</name><op:operator pos:line="247" pos:column="39">.</op:operator><name pos:line="247" pos:column="40">FindCccupationIndustryWithHighestLowestEducation</name></name><argument_list pos:line="247" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="89">"occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			       <break pos:line="248" pos:column="32">break;</break>
             	</case><default pos:line="249" pos:column="17">default:
             		<expr_stmt><expr><call><name><name pos:line="250" pos:column="25">System</name><op:operator pos:line="250" pos:column="31">.</op:operator><name pos:line="250" pos:column="32">out</name><op:operator pos:line="250" pos:column="35">.</op:operator><name pos:line="250" pos:column="36">println</name></name><argument_list pos:line="250" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="44">"Invalid option. Please try again..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="251" pos:column="33">break;</break>					
					 			
			</default>}</block></switch>
		}</block>while<condition pos:line="254" pos:column="23">(<expr><name pos:line="254" pos:column="24">choice</name> <op:operator pos:line="254" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="254" pos:column="33">0</lit:literal> <op:operator pos:line="254" pos:column="35">&amp;&amp;</op:operator> <name pos:line="254" pos:column="38">choice</name><op:operator pos:line="254" pos:column="44">&lt;</op:operator><lit:literal type="number" pos:line="254" pos:column="45">3</lit:literal></expr>)</condition>;</do>
    }</block></function>	
    
 <comment type="line" pos:line="257" pos:column="2">// #########################CALCULATE LIKELINESS TO MOVE FACTOR ######################</comment>

    <function><type><specifier pos:line="259" pos:column="5">public</specifier> <name pos:line="259" pos:column="12">void</name></type> <name pos:line="259" pos:column="17">CalculateLikelinessToMoveFactorMenu</name><parameter_list pos:line="259" pos:column="52">()</parameter_list><block pos:line="259" pos:column="54">{

     <decl_stmt><decl><type><name pos:line="261" pos:column="6">int</name></type> <name pos:line="261" pos:column="10">ssn</name> <init pos:line="261" pos:column="14">= <expr><lit:literal type="number" pos:line="261" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name pos:line="262" pos:column="6">String</name></type> <name pos:line="262" pos:column="13">getChoice</name> <init pos:line="262" pos:column="23">= <expr><lit:literal type="string" pos:line="262" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>

     <do pos:line="264" pos:column="6">do
     <block pos:line="265" pos:column="6">{
    	 <expr_stmt><expr><call><name><name pos:line="266" pos:column="10">System</name><op:operator pos:line="266" pos:column="16">.</op:operator><name pos:line="266" pos:column="17">out</name><op:operator pos:line="266" pos:column="20">.</op:operator><name pos:line="266" pos:column="21">print</name></name><argument_list pos:line="266" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="27">"Please enter 9 digits user's SSN or enter 0 to return to previous menu: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="267" pos:column="9">getChoice</name> <op:operator pos:line="267" pos:column="19">=</op:operator> <call><name><name pos:line="267" pos:column="21">in</name><op:operator pos:line="267" pos:column="23">.</op:operator><name pos:line="267" pos:column="24">nextLine</name></name><argument_list pos:line="267" pos:column="32">()</argument_list></call></expr>;</expr_stmt>	
			
        <expr_stmt><expr><call><name><name pos:line="269" pos:column="9">System</name><op:operator pos:line="269" pos:column="15">.</op:operator><name pos:line="269" pos:column="16">out</name><op:operator pos:line="269" pos:column="19">.</op:operator><name pos:line="269" pos:column="20">println</name></name><argument_list pos:line="269" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="28">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<try pos:line="270" pos:column="9">try<block pos:line="270" pos:column="12">{		
            <if pos:line="271" pos:column="13">if<condition pos:line="271" pos:column="15">(<expr><call><name><name pos:line="271" pos:column="16">getChoice</name><op:operator pos:line="271" pos:column="25">.</op:operator><name pos:line="271" pos:column="26">length</name></name><argument_list pos:line="271" pos:column="32">()</argument_list></call> <op:operator pos:line="271" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="271" pos:column="38">9</lit:literal></expr> )</condition><then><block pos:line="271" pos:column="41">{
        	<expr_stmt><expr><name pos:line="272" pos:column="17">ssn</name> <op:operator pos:line="272" pos:column="21">=</op:operator> <call><name><name pos:line="272" pos:column="23">Integer</name><op:operator pos:line="272" pos:column="30">.</op:operator><name pos:line="272" pos:column="31">parseInt</name></name><argument_list pos:line="272" pos:column="39">(<argument><expr><name pos:line="272" pos:column="40">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name><name pos:line="273" pos:column="17">RequestManager</name><op:operator pos:line="273" pos:column="31">.</op:operator><name pos:line="273" pos:column="32">CalculateLikelinessToMoveFactor</name></name><argument_list pos:line="273" pos:column="63">(<argument><expr><name pos:line="273" pos:column="64">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="275" pos:column="13">else <if pos:line="275" pos:column="18">if <condition pos:line="275" pos:column="21">(<expr><call><name><name pos:line="275" pos:column="22">getChoice</name><op:operator pos:line="275" pos:column="31">.</op:operator><name pos:line="275" pos:column="32">length</name></name><argument_list pos:line="275" pos:column="38">()</argument_list></call><op:operator pos:line="275" pos:column="40">&gt;</op:operator><lit:literal type="number" pos:line="275" pos:column="41">0</lit:literal></expr>)</condition><then><block pos:line="275" pos:column="43">{
                <expr_stmt><expr><name pos:line="276" pos:column="17">ssn</name> <op:operator pos:line="276" pos:column="21">=</op:operator> <call><name><name pos:line="276" pos:column="23">Integer</name><op:operator pos:line="276" pos:column="30">.</op:operator><name pos:line="276" pos:column="31">parseInt</name></name><argument_list pos:line="276" pos:column="39">(<argument><expr><name pos:line="276" pos:column="40">getChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="277" pos:column="17">if<condition pos:line="277" pos:column="19">(<expr><name pos:line="277" pos:column="20">ssn</name><op:operator pos:line="277" pos:column="23">!=</op:operator><lit:literal type="number" pos:line="277" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="277" pos:column="27">
                 <expr_stmt><expr><call><name><name pos:line="278" pos:column="18">System</name><op:operator pos:line="278" pos:column="24">.</op:operator><name pos:line="278" pos:column="25">out</name><op:operator pos:line="278" pos:column="28">.</op:operator><name pos:line="278" pos:column="29">println</name></name><argument_list pos:line="278" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="37">"You entered invalid SSN."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if></else></if>
        }</block><catch pos:line="280" pos:column="10">catch<parameter_list pos:line="280" pos:column="15">(<param><decl><type><name pos:line="280" pos:column="16">NumberFormatException</name></type> <name pos:line="280" pos:column="38">e</name></decl></param>)</parameter_list><block pos:line="280" pos:column="40">{
			             <expr_stmt><expr><call><name><name pos:line="281" pos:column="38">System</name><op:operator pos:line="281" pos:column="44">.</op:operator><name pos:line="281" pos:column="45">out</name><op:operator pos:line="281" pos:column="48">.</op:operator><name pos:line="281" pos:column="49">println</name></name><argument_list pos:line="281" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="281" pos:column="57">"Invalid input!!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>	   

     }</block>while<condition pos:line="284" pos:column="12">(<expr><name pos:line="284" pos:column="13">ssn</name> <op:operator pos:line="284" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="284" pos:column="19">0</lit:literal></expr> )</condition>;</do>

  }</block></function> 

 <comment type="line" pos:line="288" pos:column="2">// ############################## Display Helper Methods ######################################</comment>

   <function><type><specifier pos:line="290" pos:column="4">private</specifier> <name pos:line="290" pos:column="12">void</name></type> <name pos:line="290" pos:column="17">displayOccupationMap</name><parameter_list pos:line="290" pos:column="37">()</parameter_list><block pos:line="290" pos:column="39">{
           <decl_stmt><decl><type><name><name pos:line="291" pos:column="12">HashMap</name><argument_list pos:line="291" pos:column="19">&lt;<argument><name pos:line="291" pos:column="20">Integer</name></argument>,<argument><name pos:line="291" pos:column="28">String</name></argument>&gt;</argument_list></name></type> <name pos:line="291" pos:column="36">occupationMap</name> <init pos:line="291" pos:column="50">= <expr><lit:literal type="null" pos:line="291" pos:column="52">null</lit:literal></expr></init></decl>;</decl_stmt>
           
           <comment type="line" pos:line="293" pos:column="12">// Get Occupation Map </comment>
	   <if pos:line="294" pos:column="12">if <condition pos:line="294" pos:column="15">(<expr><name pos:line="294" pos:column="16">occupationMap</name> <op:operator pos:line="294" pos:column="30">==</op:operator> <lit:literal type="null" pos:line="294" pos:column="33">null</lit:literal></expr>)</condition><then><block pos:line="294" pos:column="38">{
	        	<expr_stmt><expr><name pos:line="295" pos:column="25">occupationMap</name> <op:operator pos:line="295" pos:column="39">=</op:operator> <call><name><name pos:line="295" pos:column="41">Factory</name><op:operator pos:line="295" pos:column="48">.</op:operator><name pos:line="295" pos:column="49">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="295" pos:column="87">()</argument_list></call><op:operator pos:line="295" pos:column="89">.</op:operator><call><name pos:line="295" pos:column="90">getOccupationCodeAndNameMap</name><argument_list pos:line="295" pos:column="117">()</argument_list></call></expr>;</expr_stmt>
	   }</block></then></if>
 	   <for pos:line="297" pos:column="12">for(<init><decl><type><name pos:line="297" pos:column="16">int</name></type> <name pos:line="297" pos:column="20">i</name> <init pos:line="297" pos:column="22">= <expr><lit:literal type="number" pos:line="297" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="297" pos:column="27">i</name> <op:operator pos:line="297" pos:column="29">&lt;</op:operator> <call><name><name pos:line="297" pos:column="31">occupationMap</name><op:operator pos:line="297" pos:column="44">.</op:operator><name pos:line="297" pos:column="45">size</name></name><argument_list pos:line="297" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="297" pos:column="53">i</name> <op:operator pos:line="297" pos:column="55">++</op:operator></expr></incr>)<block pos:line="297" pos:column="58">{
		   <decl_stmt><decl><type><name pos:line="298" pos:column="20">String</name></type> <name pos:line="298" pos:column="27">stringToInsert</name> <init pos:line="298" pos:column="42">= <expr><lit:literal type="string" pos:line="298" pos:column="44">" : "</lit:literal></expr></init></decl>;</decl_stmt>
		   <if pos:line="299" pos:column="20">if<condition pos:line="299" pos:column="22">(<expr><name pos:line="299" pos:column="23">i</name> <op:operator pos:line="299" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="299" pos:column="27">10</lit:literal></expr>)</condition><then><block pos:line="299" pos:column="30">{
			   <expr_stmt><expr><name pos:line="300" pos:column="28">stringToInsert</name> <op:operator pos:line="300" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="300" pos:column="45">" "</lit:literal> <op:operator pos:line="300" pos:column="49">+</op:operator> <name pos:line="300" pos:column="51">stringToInsert</name></expr>;</expr_stmt>
		   }</block></then></if>
		   <expr_stmt><expr><call><name><name pos:line="302" pos:column="20">System</name><op:operator pos:line="302" pos:column="26">.</op:operator><name pos:line="302" pos:column="27">out</name><op:operator pos:line="302" pos:column="30">.</op:operator><name pos:line="302" pos:column="31">println</name></name><argument_list pos:line="302" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="39">"Occupation code "</lit:literal> <op:operator pos:line="302" pos:column="58">+</op:operator> <name pos:line="302" pos:column="60">i</name> <op:operator pos:line="302" pos:column="62">+</op:operator> <name pos:line="302" pos:column="64">stringToInsert</name> <op:operator pos:line="302" pos:column="79">+</op:operator> <call><name><name pos:line="302" pos:column="81">occupationMap</name><op:operator pos:line="302" pos:column="94">.</op:operator><name pos:line="302" pos:column="95">get</name></name><argument_list pos:line="302" pos:column="98">(<argument><expr><name pos:line="302" pos:column="99">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   }</block></for>
 	   <expr_stmt><expr><call><name><name pos:line="304" pos:column="12">System</name><op:operator pos:line="304" pos:column="18">.</op:operator><name pos:line="304" pos:column="19">out</name><op:operator pos:line="304" pos:column="22">.</op:operator><name pos:line="304" pos:column="23">println</name></name><argument_list pos:line="304" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
	
    <function><type><specifier pos:line="307" pos:column="5">private</specifier> <name pos:line="307" pos:column="13">void</name></type> <name pos:line="307" pos:column="18">displayIndustryMap</name><parameter_list pos:line="307" pos:column="36">()</parameter_list><block pos:line="307" pos:column="38">{
           <decl_stmt><decl><type><name><name pos:line="308" pos:column="12">HashMap</name><argument_list pos:line="308" pos:column="19">&lt;<argument><name pos:line="308" pos:column="20">Integer</name></argument>, <argument><name pos:line="308" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="308" pos:column="37">industryMap</name> <init pos:line="308" pos:column="49">= <expr><lit:literal type="null" pos:line="308" pos:column="51">null</lit:literal></expr></init></decl>;</decl_stmt>
          
           <comment type="line" pos:line="310" pos:column="12">// Get Industry Map </comment>
           <if pos:line="311" pos:column="12">if <condition pos:line="311" pos:column="15">(<expr><name pos:line="311" pos:column="16">industryMap</name> <op:operator pos:line="311" pos:column="28">==</op:operator> <lit:literal type="null" pos:line="311" pos:column="31">null</lit:literal></expr>)</condition><then><block pos:line="311" pos:column="36">{
	        	<expr_stmt><expr><name pos:line="312" pos:column="25">industryMap</name> <op:operator pos:line="312" pos:column="37">=</op:operator> <call><name><name pos:line="312" pos:column="39">Factory</name><op:operator pos:line="312" pos:column="46">.</op:operator><name pos:line="312" pos:column="47">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="312" pos:column="85">()</argument_list></call><op:operator pos:line="312" pos:column="87">.</op:operator><call><name pos:line="312" pos:column="88">getIndustryCodeAndNameMap</name><argument_list pos:line="312" pos:column="113">()</argument_list></call></expr>;</expr_stmt>
	   }</block></then></if>
 
 	   <for pos:line="315" pos:column="12">for(<init><decl><type><name pos:line="315" pos:column="16">int</name></type> <name pos:line="315" pos:column="20">i</name> <init pos:line="315" pos:column="22">= <expr><lit:literal type="number" pos:line="315" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="315" pos:column="27">i</name> <op:operator pos:line="315" pos:column="29">&lt;</op:operator> <call><name><name pos:line="315" pos:column="31">industryMap</name><op:operator pos:line="315" pos:column="42">.</op:operator><name pos:line="315" pos:column="43">size</name></name><argument_list pos:line="315" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="315" pos:column="51">i</name> <op:operator pos:line="315" pos:column="53">++</op:operator></expr></incr>)<block pos:line="315" pos:column="56">{
		   <decl_stmt><decl><type><name pos:line="316" pos:column="20">String</name></type> <name pos:line="316" pos:column="27">stringToInsert</name> <init pos:line="316" pos:column="42">= <expr><lit:literal type="string" pos:line="316" pos:column="44">" : "</lit:literal></expr></init></decl>;</decl_stmt>
		   <if pos:line="317" pos:column="20">if<condition pos:line="317" pos:column="22">(<expr><name pos:line="317" pos:column="23">i</name> <op:operator pos:line="317" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="317" pos:column="27">10</lit:literal></expr>)</condition><then><block pos:line="317" pos:column="30">{
			   <expr_stmt><expr><name pos:line="318" pos:column="28">stringToInsert</name> <op:operator pos:line="318" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="318" pos:column="45">" "</lit:literal> <op:operator pos:line="318" pos:column="49">+</op:operator> <name pos:line="318" pos:column="51">stringToInsert</name></expr>;</expr_stmt>
		   }</block></then></if>
		   <expr_stmt><expr><call><name><name pos:line="320" pos:column="20">System</name><op:operator pos:line="320" pos:column="26">.</op:operator><name pos:line="320" pos:column="27">out</name><op:operator pos:line="320" pos:column="30">.</op:operator><name pos:line="320" pos:column="31">println</name></name><argument_list pos:line="320" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="320" pos:column="39">"Industry code "</lit:literal> <op:operator pos:line="320" pos:column="56">+</op:operator> <name pos:line="320" pos:column="58">i</name> <op:operator pos:line="320" pos:column="60">+</op:operator> <name pos:line="320" pos:column="62">stringToInsert</name> <op:operator pos:line="320" pos:column="77">+</op:operator> <call><name><name pos:line="320" pos:column="79">industryMap</name><op:operator pos:line="320" pos:column="90">.</op:operator><name pos:line="320" pos:column="91">get</name></name><argument_list pos:line="320" pos:column="94">(<argument><expr><name pos:line="320" pos:column="95">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   }</block></for>
 	   <expr_stmt><expr><call><name><name pos:line="322" pos:column="12">System</name><op:operator pos:line="322" pos:column="18">.</op:operator><name pos:line="322" pos:column="19">out</name><op:operator pos:line="322" pos:column="22">.</op:operator><name pos:line="322" pos:column="23">println</name></name><argument_list pos:line="322" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>   
}</block></class>    


 </unit>
