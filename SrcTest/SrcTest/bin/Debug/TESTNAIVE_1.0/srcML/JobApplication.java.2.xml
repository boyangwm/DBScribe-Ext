<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\JobApplication.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">LinkedHashMap</name></name>;</import>

<comment type="block" format="javadoc" pos:line="9" pos:column="1">/**
* @author Akshay
* 
*/</comment>

<comment type="block" format="javadoc" pos:line="14" pos:column="1">/*************** JOBAPPLICATION.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="16" pos:column="1">public</specifier> class <name pos:line="16" pos:column="14">JobApplication</name> <block pos:line="16" pos:column="29">{

	<comment type="line" pos:line="18" pos:column="9">// class variables mainly uses by the job application class</comment>
	
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">protected</specifier> <name pos:line="20" pos:column="19">int</name></type> <name pos:line="20" pos:column="23">ApplicationID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">protected</specifier> <name pos:line="21" pos:column="19">int</name></type> <name pos:line="21" pos:column="23">UIN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="22" pos:column="9">protected</specifier> <name pos:line="22" pos:column="19">double</name></type> <name pos:line="22" pos:column="26">workEx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">protected</specifier> <name pos:line="23" pos:column="19">boolean</name></type> <name pos:line="23" pos:column="27">skill1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="24" pos:column="9">protected</specifier> <name pos:line="24" pos:column="19">boolean</name></type> <name pos:line="24" pos:column="27">skill2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="25" pos:column="9">protected</specifier> <name pos:line="25" pos:column="19">boolean</name></type> <name pos:line="25" pos:column="27">skill3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="26" pos:column="9">protected</specifier> <name pos:line="26" pos:column="19">boolean</name></type> <name pos:line="26" pos:column="27">skill4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="27" pos:column="9">protected</specifier> <name pos:line="27" pos:column="19">boolean</name></type> <name pos:line="27" pos:column="27">skill5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="28" pos:column="9">protected</specifier> <name pos:line="28" pos:column="19">float</name></type> <name pos:line="28" pos:column="25">scaledScore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">String</name></type> <name pos:line="29" pos:column="16">SQLPeopleSelect</name> <init pos:line="29" pos:column="32">= <expr><lit:literal type="string" pos:line="29" pos:column="34">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">String</name></type> <name pos:line="30" pos:column="16">SQLPeopleReSelect</name> <init pos:line="30" pos:column="34">= <expr><lit:literal type="string" pos:line="30" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="block" pos:line="32" pos:column="9">/*-----------------------------------GETTERS AND SETTERS START-----------------------------------*/</comment>
	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">int</name></type> <name pos:line="33" pos:column="20">getApplicationID</name><parameter_list pos:line="33" pos:column="36">()</parameter_list> <block pos:line="33" pos:column="39">{
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">ApplicationID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">setApplicationID</name><parameter_list pos:line="37" pos:column="37">(<param><decl><type><name pos:line="37" pos:column="38">int</name></type> <name pos:line="37" pos:column="42">applicationID</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="57">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">ApplicationID</name> <op:operator pos:line="38" pos:column="31">=</op:operator> <name pos:line="38" pos:column="33">applicationID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">int</name></type> <name pos:line="41" pos:column="20">getUIN</name><parameter_list pos:line="41" pos:column="26">()</parameter_list> <block pos:line="41" pos:column="29">{
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">UIN</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">setUIN</name><parameter_list pos:line="45" pos:column="27">(<param><decl><type><name pos:line="45" pos:column="28">int</name></type> <name pos:line="45" pos:column="32">uIN</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="37">{
		<expr_stmt><expr><name pos:line="46" pos:column="17">UIN</name> <op:operator pos:line="46" pos:column="21">=</op:operator> <name pos:line="46" pos:column="23">uIN</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">double</name></type> <name pos:line="49" pos:column="23">getWorkEx</name><parameter_list pos:line="49" pos:column="32">()</parameter_list> <block pos:line="49" pos:column="35">{
		<return pos:line="50" pos:column="17">return <expr><name pos:line="50" pos:column="24">workEx</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">setWorkEx</name><parameter_list pos:line="53" pos:column="30">(<param><decl><type><name pos:line="53" pos:column="31">double</name></type> <name pos:line="53" pos:column="38">workEx</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="46">{
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">this</name><op:operator pos:line="54" pos:column="21">.</op:operator><name pos:line="54" pos:column="22">workEx</name></name> <op:operator pos:line="54" pos:column="29">=</op:operator> <name pos:line="54" pos:column="31">workEx</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">boolean</name></type> <name pos:line="57" pos:column="24">isSkill1</name><parameter_list pos:line="57" pos:column="32">()</parameter_list> <block pos:line="57" pos:column="35">{
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">skill1</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">setSkill1</name><parameter_list pos:line="61" pos:column="30">(<param><decl><type><name pos:line="61" pos:column="31">boolean</name></type> <name pos:line="61" pos:column="39">skill1</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">this</name><op:operator pos:line="62" pos:column="21">.</op:operator><name pos:line="62" pos:column="22">skill1</name></name> <op:operator pos:line="62" pos:column="29">=</op:operator> <name pos:line="62" pos:column="31">skill1</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">boolean</name></type> <name pos:line="65" pos:column="24">isSkill2</name><parameter_list pos:line="65" pos:column="32">()</parameter_list> <block pos:line="65" pos:column="35">{
		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">skill2</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">setSkill2</name><parameter_list pos:line="69" pos:column="30">(<param><decl><type><name pos:line="69" pos:column="31">boolean</name></type> <name pos:line="69" pos:column="39">skill2</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">this</name><op:operator pos:line="70" pos:column="21">.</op:operator><name pos:line="70" pos:column="22">skill2</name></name> <op:operator pos:line="70" pos:column="29">=</op:operator> <name pos:line="70" pos:column="31">skill2</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">boolean</name></type> <name pos:line="73" pos:column="24">isSkill3</name><parameter_list pos:line="73" pos:column="32">()</parameter_list> <block pos:line="73" pos:column="35">{
		<return pos:line="74" pos:column="17">return <expr><name pos:line="74" pos:column="24">skill3</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">void</name></type> <name pos:line="77" pos:column="21">setSkill3</name><parameter_list pos:line="77" pos:column="30">(<param><decl><type><name pos:line="77" pos:column="31">boolean</name></type> <name pos:line="77" pos:column="39">skill3</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">this</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">skill3</name></name> <op:operator pos:line="78" pos:column="29">=</op:operator> <name pos:line="78" pos:column="31">skill3</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">boolean</name></type> <name pos:line="81" pos:column="24">isSkill4</name><parameter_list pos:line="81" pos:column="32">()</parameter_list> <block pos:line="81" pos:column="35">{
		<return pos:line="82" pos:column="17">return <expr><name pos:line="82" pos:column="24">skill4</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="85" pos:column="9">public</specifier> <name pos:line="85" pos:column="16">void</name></type> <name pos:line="85" pos:column="21">setSkill4</name><parameter_list pos:line="85" pos:column="30">(<param><decl><type><name pos:line="85" pos:column="31">boolean</name></type> <name pos:line="85" pos:column="39">skill4</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="86" pos:column="17">this</name><op:operator pos:line="86" pos:column="21">.</op:operator><name pos:line="86" pos:column="22">skill4</name></name> <op:operator pos:line="86" pos:column="29">=</op:operator> <name pos:line="86" pos:column="31">skill4</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">boolean</name></type> <name pos:line="89" pos:column="24">isSkill5</name><parameter_list pos:line="89" pos:column="32">()</parameter_list> <block pos:line="89" pos:column="35">{
		<return pos:line="90" pos:column="17">return <expr><name pos:line="90" pos:column="24">skill5</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="93" pos:column="9">public</specifier> <name pos:line="93" pos:column="16">void</name></type> <name pos:line="93" pos:column="21">setSkill5</name><parameter_list pos:line="93" pos:column="30">(<param><decl><type><name pos:line="93" pos:column="31">boolean</name></type> <name pos:line="93" pos:column="39">skill5</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="94" pos:column="17">this</name><op:operator pos:line="94" pos:column="21">.</op:operator><name pos:line="94" pos:column="22">skill5</name></name> <op:operator pos:line="94" pos:column="29">=</op:operator> <name pos:line="94" pos:column="31">skill5</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="97" pos:column="9">public</specifier> <name pos:line="97" pos:column="16">float</name></type> <name pos:line="97" pos:column="22">getScaledScore</name><parameter_list pos:line="97" pos:column="36">()</parameter_list> <block pos:line="97" pos:column="39">{
		<return pos:line="98" pos:column="17">return <expr><name pos:line="98" pos:column="24">scaledScore</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">setScaledScore</name><parameter_list pos:line="101" pos:column="35">(<param><decl><type><name pos:line="101" pos:column="36">float</name></type> <name pos:line="101" pos:column="42">scaledScore</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="55">{
		<expr_stmt><expr><name><name pos:line="102" pos:column="17">this</name><op:operator pos:line="102" pos:column="21">.</op:operator><name pos:line="102" pos:column="22">scaledScore</name></name> <op:operator pos:line="102" pos:column="34">=</op:operator> <name pos:line="102" pos:column="36">scaledScore</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">String</name></type> <name pos:line="105" pos:column="23">getSQLPeopleSelect</name><parameter_list pos:line="105" pos:column="41">()</parameter_list> <block pos:line="105" pos:column="44">{
		<return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">SQLPeopleSelect</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">setSQLPeopleSelect</name><parameter_list pos:line="109" pos:column="39">(<param><decl><type><name pos:line="109" pos:column="40">String</name></type> <name pos:line="109" pos:column="47">sQLPeopleSelect</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="64">{
		<expr_stmt><expr><name pos:line="110" pos:column="17">SQLPeopleSelect</name> <op:operator pos:line="110" pos:column="33">=</op:operator> <name pos:line="110" pos:column="35">sQLPeopleSelect</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">String</name></type> <name pos:line="113" pos:column="23">getSQLPeopleReSelect</name><parameter_list pos:line="113" pos:column="43">()</parameter_list> <block pos:line="113" pos:column="46">{
		<return pos:line="114" pos:column="17">return <expr><name pos:line="114" pos:column="24">SQLPeopleReSelect</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">setSQLPeopleReSelect</name><parameter_list pos:line="117" pos:column="41">(<param><decl><type><name pos:line="117" pos:column="42">String</name></type> <name pos:line="117" pos:column="49">sQLPeopleReSelect</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="68">{
		<expr_stmt><expr><name pos:line="118" pos:column="17">SQLPeopleReSelect</name> <op:operator pos:line="118" pos:column="35">=</op:operator> <name pos:line="118" pos:column="37">sQLPeopleReSelect</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="121" pos:column="9">/*-----------------------------------GETTERS AND SETTERS END-----------------------------------*/</comment>
	
	<comment type="block" pos:line="123" pos:column="9">/*job application class constructor takes in the UIN
	 * 
	 * initializes all the other variables that can be used by the class*/</comment>
	<constructor><specifier pos:line="126" pos:column="9">public</specifier> <name pos:line="126" pos:column="16">JobApplication</name><parameter_list pos:line="126" pos:column="30">(<param><decl><type><name pos:line="126" pos:column="31">int</name></type> <name pos:line="126" pos:column="35">UIN</name></decl></param>)</parameter_list> <throws pos:line="126" pos:column="40">throws <argument><expr><name><name pos:line="126" pos:column="47">People</name><op:operator pos:line="126" pos:column="53">.</op:operator><name pos:line="126" pos:column="54">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="126" pos:column="82">{

		<decl_stmt><decl><type><name pos:line="128" pos:column="17">boolean</name></type> <name pos:line="128" pos:column="25">check</name> <init pos:line="128" pos:column="31">= <expr><call><name><name pos:line="128" pos:column="33">Student</name><op:operator pos:line="128" pos:column="40">.</op:operator><name pos:line="128" pos:column="41">checkIfStudent</name></name><argument_list pos:line="128" pos:column="55">(<argument><expr><name pos:line="128" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="128" pos:column="61">// checking if the UIn passed is the student</comment>
		<expr_stmt><expr><call><name><name pos:line="129" pos:column="17">System</name><op:operator pos:line="129" pos:column="23">.</op:operator><name pos:line="129" pos:column="24">out</name><op:operator pos:line="129" pos:column="27">.</op:operator><name pos:line="129" pos:column="28">println</name></name><argument_list pos:line="129" pos:column="35">(<argument><expr><name pos:line="129" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="130" pos:column="17">if <condition pos:line="130" pos:column="20">(<expr><op:operator pos:line="130" pos:column="21">!</op:operator><name pos:line="130" pos:column="22">check</name></expr>)</condition><then pos:line="130" pos:column="28"> <block pos:line="130" pos:column="29">{
			<throw pos:line="131" pos:column="25">throw <expr><op:operator pos:line="131" pos:column="31">new</op:operator> <call><name><name pos:line="131" pos:column="35">People</name><op:operator pos:line="131" pos:column="41">.</op:operator><name pos:line="131" pos:column="42">PersonDoesNotExistException</name></name><argument_list pos:line="131" pos:column="69">()</argument_list></call></expr>;</throw><comment type="line" pos:line="131" pos:column="72">//if the UIN is not students then an exception is thrown</comment>
		}</block></then></if>

		<try pos:line="134" pos:column="17">try <block pos:line="134" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="135" pos:column="25">Connection</name></type> <name pos:line="135" pos:column="36">conn</name> <init pos:line="135" pos:column="41">= <expr><call><name><name pos:line="135" pos:column="43">Database</name><op:operator pos:line="135" pos:column="51">.</op:operator><name pos:line="135" pos:column="52">getConnection</name></name><argument_list pos:line="135" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="135" pos:column="68">//get connection</comment>

			<try pos:line="137" pos:column="25">try <block pos:line="137" pos:column="29">{

				<if pos:line="139" pos:column="33">if <condition pos:line="139" pos:column="36">(<expr><name pos:line="139" pos:column="37">conn</name> <op:operator pos:line="139" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="139" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="139" pos:column="50"> <block pos:line="139" pos:column="51">{

					<expr_stmt><expr><name pos:line="141" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="141" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="141" pos:column="59">"Select * From applicationdetails where ApplicantUIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="141" pos:column="116">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="144" pos:column="33">PreparedStatement</name></type> <name pos:line="144" pos:column="51">stmtForSelect</name> <init pos:line="144" pos:column="65">= <expr><call><name><name pos:line="144" pos:column="67">conn</name><op:operator pos:line="144" pos:column="71">.</op:operator><name pos:line="144" pos:column="72">prepareStatement</name></name><argument_list pos:line="144" pos:column="88">(<argument><expr><name pos:line="144" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">stmtForSelect</name><op:operator pos:line="145" pos:column="46">.</op:operator><name pos:line="145" pos:column="47">setInt</name></name><argument_list pos:line="145" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="145" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="145" pos:column="62">//set the UIN</comment>

				<decl_stmt><decl><type><name pos:line="147" pos:column="33">ResultSet</name></type> <name pos:line="147" pos:column="43">rs</name> <init pos:line="147" pos:column="46">= <expr><call><name><name pos:line="147" pos:column="48">stmtForSelect</name><op:operator pos:line="147" pos:column="61">.</op:operator><name pos:line="147" pos:column="62">executeQuery</name></name><argument_list pos:line="147" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="147" pos:column="77">//execute the query</comment>

				<if pos:line="149" pos:column="33">if <condition pos:line="149" pos:column="36">(<expr><call><name><name pos:line="149" pos:column="37">rs</name><op:operator pos:line="149" pos:column="39">.</op:operator><name pos:line="149" pos:column="40">first</name></name><argument_list pos:line="149" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="149" pos:column="48"> <block pos:line="149" pos:column="49">{

					<comment type="line" pos:line="151" pos:column="41">//if the resultset is not empty then </comment>
					
					<expr_stmt><expr><call><name><name pos:line="153" pos:column="41">DBAnnotation</name><op:operator pos:line="153" pos:column="53">.</op:operator><name pos:line="153" pos:column="54">annoate</name></name><argument_list pos:line="153" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="62">"retreivedApplicationID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="88">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="110">"ApplicationID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="153" pos:column="127">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="154" pos:column="41">int</name></type> <name pos:line="154" pos:column="45">retreivedApplicationID</name><init pos:line="154" pos:column="67">=<expr><call><name><name pos:line="154" pos:column="68">rs</name><op:operator pos:line="154" pos:column="70">.</op:operator><name pos:line="154" pos:column="71">getInt</name></name><argument_list pos:line="154" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="78">"ApplicationID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="156" pos:column="41">DBAnnotation</name><op:operator pos:line="156" pos:column="53">.</op:operator><name pos:line="156" pos:column="54">annoate</name></name><argument_list pos:line="156" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="62">"RetrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="156" pos:column="78">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="156" pos:column="100">"ApplicantUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="156" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="157" pos:column="41">int</name></type> <name pos:line="157" pos:column="45">RetrievedUIN</name> <init pos:line="157" pos:column="58">= <expr><call><name><name pos:line="157" pos:column="60">rs</name><op:operator pos:line="157" pos:column="62">.</op:operator><name pos:line="157" pos:column="63">getInt</name></name><argument_list pos:line="157" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="70">"ApplicantUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="157" pos:column="86">//---retreive the UIN</comment>
					
					<expr_stmt><expr><call><name><name pos:line="159" pos:column="41">DBAnnotation</name><op:operator pos:line="159" pos:column="53">.</op:operator><name pos:line="159" pos:column="54">annoate</name></name><argument_list pos:line="159" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="62">"RetrievedWorkEx"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="103">"WorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="159" pos:column="121">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="160" pos:column="41">Double</name></type> <name pos:line="160" pos:column="48">RetrievedWorkEx</name> <init pos:line="160" pos:column="64">= <expr><call><name><name pos:line="160" pos:column="66">rs</name><op:operator pos:line="160" pos:column="68">.</op:operator><name pos:line="160" pos:column="69">getDouble</name></name><argument_list pos:line="160" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="79">"WorkExperience"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="160" pos:column="97">//---retreive the work Ex</comment>
					
					<expr_stmt><expr><call><name><name pos:line="162" pos:column="41">DBAnnotation</name><op:operator pos:line="162" pos:column="53">.</op:operator><name pos:line="162" pos:column="54">annoate</name></name><argument_list pos:line="162" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="62">"retreivedSkill1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="103">"Skillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="162" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="163" pos:column="41">boolean</name></type> <name pos:line="163" pos:column="49">retreivedSkill1</name> <init pos:line="163" pos:column="65">= <expr><call><name><name pos:line="163" pos:column="67">rs</name><op:operator pos:line="163" pos:column="69">.</op:operator><name pos:line="163" pos:column="70">getBoolean</name></name><argument_list pos:line="163" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="81">"Skillset1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="163" pos:column="94">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name pos:line="165" pos:column="41">DBAnnotation</name><op:operator pos:line="165" pos:column="53">.</op:operator><name pos:line="165" pos:column="54">annoate</name></name><argument_list pos:line="165" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="62">"retreivedSkill2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="103">"Skillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="165" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="166" pos:column="41">boolean</name></type> <name pos:line="166" pos:column="49">retreivedSkill2</name> <init pos:line="166" pos:column="65">= <expr><call><name><name pos:line="166" pos:column="67">rs</name><op:operator pos:line="166" pos:column="69">.</op:operator><name pos:line="166" pos:column="70">getBoolean</name></name><argument_list pos:line="166" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="81">"Skillset2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="166" pos:column="94">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name pos:line="168" pos:column="41">DBAnnotation</name><op:operator pos:line="168" pos:column="53">.</op:operator><name pos:line="168" pos:column="54">annoate</name></name><argument_list pos:line="168" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="62">"retreivedSkill3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="168" pos:column="103">"Skillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="168" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="169" pos:column="41">boolean</name></type> <name pos:line="169" pos:column="49">retreivedSkill3</name> <init pos:line="169" pos:column="65">= <expr><call><name><name pos:line="169" pos:column="67">rs</name><op:operator pos:line="169" pos:column="69">.</op:operator><name pos:line="169" pos:column="70">getBoolean</name></name><argument_list pos:line="169" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="81">"Skillset3"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="169" pos:column="94">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name pos:line="171" pos:column="41">DBAnnotation</name><op:operator pos:line="171" pos:column="53">.</op:operator><name pos:line="171" pos:column="54">annoate</name></name><argument_list pos:line="171" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="62">"retreivedSkill4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="103">"Skillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="171" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="172" pos:column="41">boolean</name></type> <name pos:line="172" pos:column="49">retreivedSkill4</name> <init pos:line="172" pos:column="65">= <expr><call><name><name pos:line="172" pos:column="67">rs</name><op:operator pos:line="172" pos:column="69">.</op:operator><name pos:line="172" pos:column="70">getBoolean</name></name><argument_list pos:line="172" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="81">"Skillset4"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="172" pos:column="94">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">DBAnnotation</name><op:operator pos:line="174" pos:column="53">.</op:operator><name pos:line="174" pos:column="54">annoate</name></name><argument_list pos:line="174" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="62">"retreivedSkill5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="81">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="103">"Skillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="174" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="175" pos:column="41">boolean</name></type> <name pos:line="175" pos:column="49">retreivedSkill5</name> <init pos:line="175" pos:column="65">= <expr><call><name><name pos:line="175" pos:column="67">rs</name><op:operator pos:line="175" pos:column="69">.</op:operator><name pos:line="175" pos:column="70">getBoolean</name></name><argument_list pos:line="175" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="81">"Skillset5"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="175" pos:column="94">//---retreive the skills</comment>
					
					<expr_stmt><expr><call><name><name pos:line="177" pos:column="41">DBAnnotation</name><op:operator pos:line="177" pos:column="53">.</op:operator><name pos:line="177" pos:column="54">annoate</name></name><argument_list pos:line="177" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="62">"retreivedScaledScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="86">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="108">"Scaledscore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="177" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="178" pos:column="41">float</name></type> <name pos:line="178" pos:column="47">retreivedScaledScore</name> <init pos:line="178" pos:column="68">= <expr><call><name><name pos:line="178" pos:column="70">rs</name><op:operator pos:line="178" pos:column="72">.</op:operator><name pos:line="178" pos:column="73">getFloat</name></name><argument_list pos:line="178" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="82">"Scaledscore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="178" pos:column="97">//---retreive the scaled score</comment>

					<comment type="line" pos:line="180" pos:column="41">//initilaize the class variables to the UIN specific</comment>
					
					<expr_stmt><expr><name><name pos:line="182" pos:column="41">this</name><op:operator pos:line="182" pos:column="45">.</op:operator><name pos:line="182" pos:column="46">ApplicationID</name></name> <op:operator pos:line="182" pos:column="60">=</op:operator> <name pos:line="182" pos:column="62">retreivedApplicationID</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="183" pos:column="41">this</name><op:operator pos:line="183" pos:column="45">.</op:operator><name pos:line="183" pos:column="46">UIN</name></name> <op:operator pos:line="183" pos:column="50">=</op:operator> <name pos:line="183" pos:column="52">RetrievedUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="184" pos:column="41">this</name><op:operator pos:line="184" pos:column="45">.</op:operator><name pos:line="184" pos:column="46">workEx</name></name> <op:operator pos:line="184" pos:column="53">=</op:operator> <name pos:line="184" pos:column="55">RetrievedWorkEx</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="185" pos:column="41">this</name><op:operator pos:line="185" pos:column="45">.</op:operator><name pos:line="185" pos:column="46">skill1</name></name> <op:operator pos:line="185" pos:column="53">=</op:operator> <name pos:line="185" pos:column="55">retreivedSkill1</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="186" pos:column="41">this</name><op:operator pos:line="186" pos:column="45">.</op:operator><name pos:line="186" pos:column="46">skill2</name></name> <op:operator pos:line="186" pos:column="53">=</op:operator> <name pos:line="186" pos:column="55">retreivedSkill2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="187" pos:column="41">this</name><op:operator pos:line="187" pos:column="45">.</op:operator><name pos:line="187" pos:column="46">skill3</name></name> <op:operator pos:line="187" pos:column="53">=</op:operator> <name pos:line="187" pos:column="55">retreivedSkill3</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="188" pos:column="41">this</name><op:operator pos:line="188" pos:column="45">.</op:operator><name pos:line="188" pos:column="46">skill4</name></name> <op:operator pos:line="188" pos:column="53">=</op:operator> <name pos:line="188" pos:column="55">retreivedSkill4</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="189" pos:column="41">this</name><op:operator pos:line="189" pos:column="45">.</op:operator><name pos:line="189" pos:column="46">skill5</name></name> <op:operator pos:line="189" pos:column="53">=</op:operator> <name pos:line="189" pos:column="55">retreivedSkill5</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="190" pos:column="41">this</name><op:operator pos:line="190" pos:column="45">.</op:operator><name pos:line="190" pos:column="46">scaledScore</name></name> <op:operator pos:line="190" pos:column="58">=</op:operator> <name pos:line="190" pos:column="60">retreivedScaledScore</name></expr>;</expr_stmt>
				}</block></then>

				<else pos:line="193" pos:column="33">else <block pos:line="193" pos:column="38">{
					<comment type="line" pos:line="194" pos:column="41">//no job application exists</comment>
					<expr_stmt><expr><call><name><name pos:line="195" pos:column="41">System</name><op:operator pos:line="195" pos:column="47">.</op:operator><name pos:line="195" pos:column="48">out</name><op:operator pos:line="195" pos:column="51">.</op:operator><name pos:line="195" pos:column="52">println</name></name><argument_list pos:line="195" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="60">"job application for "</lit:literal> <op:operator pos:line="195" pos:column="83">+</op:operator> <name pos:line="195" pos:column="85">UIN</name><op:operator pos:line="195" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="195" pos:column="90">" does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="200" pos:column="25">//catch block</comment>
			<catch pos:line="201" pos:column="25">catch <parameter_list pos:line="201" pos:column="31">(<param><decl><type><name pos:line="201" pos:column="32">SQLException</name></type> <name pos:line="201" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">e</name><op:operator pos:line="202" pos:column="34">.</op:operator><name pos:line="202" pos:column="35">printStackTrace</name></name><argument_list pos:line="202" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="203" pos:column="33">System</name><op:operator pos:line="203" pos:column="39">.</op:operator><name pos:line="203" pos:column="40">out</name><op:operator pos:line="203" pos:column="43">.</op:operator><name pos:line="203" pos:column="44">println</name></name><argument_list pos:line="203" pos:column="51">(<argument><expr><name pos:line="203" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="207" pos:column="25">finally <block pos:line="207" pos:column="33">{

				<comment type="line" pos:line="209" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="212" pos:column="17">//catch block</comment>
		<catch pos:line="213" pos:column="17">catch <parameter_list pos:line="213" pos:column="23">(<param><decl><type><name pos:line="213" pos:column="24">Exception</name></type> <name pos:line="213" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="213" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="214" pos:column="25">e</name><op:operator pos:line="214" pos:column="26">.</op:operator><name pos:line="214" pos:column="27">printStackTrace</name></name><argument_list pos:line="214" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="215" pos:column="25">System</name><op:operator pos:line="215" pos:column="31">.</op:operator><name pos:line="215" pos:column="32">out</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">println</name></name><argument_list pos:line="215" pos:column="43">(<argument><expr><name pos:line="215" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="218" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="220" pos:column="17">finally <block pos:line="220" pos:column="25">{

			<comment type="line" pos:line="222" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>
	
	<comment type="block" pos:line="227" pos:column="9">/*add application details ADDS if the application details of the student with their required credentials
	 * 
	 *  the return type is boolean 
	 *  
	 *  throws the person does not exist exception*/</comment>
	<function><type><specifier pos:line="232" pos:column="9">public</specifier> <specifier pos:line="232" pos:column="16">static</specifier> <name pos:line="232" pos:column="23">boolean</name></type> <name pos:line="232" pos:column="31">addApplicationDetails</name><parameter_list pos:line="232" pos:column="52">(<param><decl><type><name pos:line="232" pos:column="53">int</name></type> <name pos:line="232" pos:column="57">UIN</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="62">double</name></type> <name pos:line="232" pos:column="69">workExp</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="78">boolean</name></type> <name pos:line="232" pos:column="86">skill1</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="94">boolean</name></type> <name pos:line="232" pos:column="102">skill2</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="110">boolean</name></type> <name pos:line="232" pos:column="118">skill3</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="126">boolean</name></type> <name pos:line="232" pos:column="134">skill4</name></decl></param>, <param><decl><type><name pos:line="232" pos:column="142">boolean</name></type> <name pos:line="232" pos:column="150">skill5</name></decl></param>)</parameter_list> <throws pos:line="232" pos:column="158">throws <argument><expr><name><name pos:line="232" pos:column="165">People</name><op:operator pos:line="232" pos:column="171">.</op:operator><name pos:line="232" pos:column="172">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="232" pos:column="200">{

		<decl_stmt><decl><type><name pos:line="234" pos:column="17">boolean</name></type> <name pos:line="234" pos:column="25">check</name> <init pos:line="234" pos:column="31">= <expr><call><name><name pos:line="234" pos:column="33">Student</name><op:operator pos:line="234" pos:column="40">.</op:operator><name pos:line="234" pos:column="41">checkIfStudent</name></name><argument_list pos:line="234" pos:column="55">(<argument><expr><name pos:line="234" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="234" pos:column="61">//checks if student</comment>
		<if pos:line="235" pos:column="17">if <condition pos:line="235" pos:column="20">(<expr><op:operator pos:line="235" pos:column="21">!</op:operator><name pos:line="235" pos:column="22">check</name></expr>)</condition><then pos:line="235" pos:column="28"> <block pos:line="235" pos:column="29">{
			<throw pos:line="236" pos:column="25">throw <expr><op:operator pos:line="236" pos:column="31">new</op:operator> <call><name><name pos:line="236" pos:column="35">People</name><op:operator pos:line="236" pos:column="41">.</op:operator><name pos:line="236" pos:column="42">PersonDoesNotExistException</name></name><argument_list pos:line="236" pos:column="69">()</argument_list></call></expr>;</throw><comment type="line" pos:line="236" pos:column="72">//thorw the exception</comment>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="238" pos:column="17">boolean</name></type> <name pos:line="238" pos:column="25">isAdded</name> <init pos:line="238" pos:column="33">= <expr><lit:literal type="boolean" pos:line="238" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="239" pos:column="17">try <block pos:line="239" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="240" pos:column="25">Connection</name></type> <name pos:line="240" pos:column="36">conn</name> <init pos:line="240" pos:column="41">= <expr><call><name><name pos:line="240" pos:column="43">Database</name><op:operator pos:line="240" pos:column="51">.</op:operator><name pos:line="240" pos:column="52">getConnection</name></name><argument_list pos:line="240" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="240" pos:column="68">//get the connection</comment>

			<try pos:line="242" pos:column="25">try <block pos:line="242" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="244" pos:column="33">boolean</name></type> <name pos:line="244" pos:column="41">isExisting</name> <init pos:line="244" pos:column="52">= <expr><call><name pos:line="244" pos:column="54">addApplicationDetailsCheck</name><argument_list pos:line="244" pos:column="80">(<argument><expr><name pos:line="244" pos:column="81">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="244" pos:column="86">//if the application detaisl already exist</comment>

				<if pos:line="246" pos:column="33">if <condition pos:line="246" pos:column="36">(<expr><name pos:line="246" pos:column="37">isExisting</name></expr>)</condition><then pos:line="246" pos:column="48"> <block pos:line="246" pos:column="49">{
					<comment type="line" pos:line="247" pos:column="41">//if the application details exist then return false</comment>
					<return pos:line="248" pos:column="41">return <expr><lit:literal type="boolean" pos:line="248" pos:column="48">false</lit:literal></expr>;</return>

				}</block></then>

				<else pos:line="252" pos:column="33">else <block pos:line="252" pos:column="38">{
					<comment type="line" pos:line="253" pos:column="41">//calculate the scaled score by passing the work ex and the skills score</comment>
					<decl_stmt><decl><type><name pos:line="254" pos:column="41">double</name></type> <name pos:line="254" pos:column="48">getScore</name> <init pos:line="254" pos:column="57">= <expr><call><name pos:line="254" pos:column="59">calculateScaledScore</name><argument_list pos:line="254" pos:column="79">(<argument><expr><name pos:line="254" pos:column="80">UIN</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="85">workExp</name></expr></argument>,<argument><expr><name pos:line="254" pos:column="93">skill1</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="101">skill2</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="109">skill3</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="117">skill4</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="125">skill5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="line" pos:line="256" pos:column="41">//insert into the database with the calculated scaled score</comment>
					<expr_stmt><expr><call><name><name pos:line="257" pos:column="41">System</name><op:operator pos:line="257" pos:column="47">.</op:operator><name pos:line="257" pos:column="48">out</name><op:operator pos:line="257" pos:column="51">.</op:operator><name pos:line="257" pos:column="52">println</name></name><argument_list pos:line="257" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="60">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="258" pos:column="41">String</name></type> <name pos:line="258" pos:column="48">SQLPeopleInsert</name> <init pos:line="258" pos:column="64">= <expr><lit:literal type="string" pos:line="258" pos:column="66">"Insert into applicationdetails (applicantUIN, WorkExperience, Skillset1, Skillset2, Skillset3, Skillset4, Skillset5, Scaledscore) Values (?,?,?,?,?,?,?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="259" pos:column="41">PreparedStatement</name></type> <name pos:line="259" pos:column="59">stmt</name> <init pos:line="259" pos:column="64">= <expr><call><name><name pos:line="259" pos:column="66">conn</name><op:operator pos:line="259" pos:column="70">.</op:operator><name pos:line="259" pos:column="71">prepareStatement</name></name><argument_list pos:line="259" pos:column="87">(<argument><expr><name pos:line="259" pos:column="88">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="line" pos:line="261" pos:column="41">//set the values to be put into the query</comment>
					<expr_stmt><expr><call><name><name pos:line="262" pos:column="41">stmt</name><op:operator pos:line="262" pos:column="45">.</op:operator><name pos:line="262" pos:column="46">setInt</name></name><argument_list pos:line="262" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="262" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="263" pos:column="41">stmt</name><op:operator pos:line="263" pos:column="45">.</op:operator><name pos:line="263" pos:column="46">setDouble</name></name><argument_list pos:line="263" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="263" pos:column="56">2</lit:literal></expr></argument>, <argument><expr><name pos:line="263" pos:column="59">workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="264" pos:column="41">stmt</name><op:operator pos:line="264" pos:column="45">.</op:operator><name pos:line="264" pos:column="46">setBoolean</name></name><argument_list pos:line="264" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="264" pos:column="57">3</lit:literal></expr></argument>, <argument><expr><name pos:line="264" pos:column="60">skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="265" pos:column="41">stmt</name><op:operator pos:line="265" pos:column="45">.</op:operator><name pos:line="265" pos:column="46">setBoolean</name></name><argument_list pos:line="265" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="265" pos:column="57">4</lit:literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="60">skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="266" pos:column="41">stmt</name><op:operator pos:line="266" pos:column="45">.</op:operator><name pos:line="266" pos:column="46">setBoolean</name></name><argument_list pos:line="266" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="266" pos:column="57">5</lit:literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="60">skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="267" pos:column="41">stmt</name><op:operator pos:line="267" pos:column="45">.</op:operator><name pos:line="267" pos:column="46">setBoolean</name></name><argument_list pos:line="267" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="267" pos:column="57">6</lit:literal></expr></argument>, <argument><expr><name pos:line="267" pos:column="60">skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="268" pos:column="41">stmt</name><op:operator pos:line="268" pos:column="45">.</op:operator><name pos:line="268" pos:column="46">setBoolean</name></name><argument_list pos:line="268" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="268" pos:column="57">7</lit:literal></expr></argument>, <argument><expr><name pos:line="268" pos:column="60">skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="269" pos:column="41">stmt</name><op:operator pos:line="269" pos:column="45">.</op:operator><name pos:line="269" pos:column="46">setDouble</name></name><argument_list pos:line="269" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="269" pos:column="56">8</lit:literal></expr></argument>, <argument><expr><name pos:line="269" pos:column="59">getScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="270" pos:column="41">System</name><op:operator pos:line="270" pos:column="47">.</op:operator><name pos:line="270" pos:column="48">out</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">println</name></name><argument_list pos:line="270" pos:column="59">(<argument><expr><name pos:line="270" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="271" pos:column="41">int</name></type> <name pos:line="271" pos:column="45">i</name> <init pos:line="271" pos:column="47">= <expr><call><name><name pos:line="271" pos:column="49">stmt</name><op:operator pos:line="271" pos:column="53">.</op:operator><name pos:line="271" pos:column="54">executeUpdate</name></name><argument_list pos:line="271" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="271" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="273" pos:column="41">DBAnnotation</name><op:operator pos:line="273" pos:column="53">.</op:operator><name pos:line="273" pos:column="54">annoate</name></name><argument_list pos:line="273" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="69">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="91">"applicantUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="273" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>											
					<expr_stmt><expr><call><name><name pos:line="274" pos:column="41">DBAnnotation</name><op:operator pos:line="274" pos:column="53">.</op:operator><name pos:line="274" pos:column="54">annoate</name></name><argument_list pos:line="274" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="62">"workExp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="73">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="95">"WorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="274" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="275" pos:column="41">DBAnnotation</name><op:operator pos:line="275" pos:column="53">.</op:operator><name pos:line="275" pos:column="54">annoate</name></name><argument_list pos:line="275" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="62">"skill1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="94">"Skillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="275" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="276" pos:column="41">DBAnnotation</name><op:operator pos:line="276" pos:column="53">.</op:operator><name pos:line="276" pos:column="54">annoate</name></name><argument_list pos:line="276" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="62">"skill2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="94">"Skillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="276" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="277" pos:column="41">DBAnnotation</name><op:operator pos:line="277" pos:column="53">.</op:operator><name pos:line="277" pos:column="54">annoate</name></name><argument_list pos:line="277" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="62">"skill3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="94">"Skillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="277" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
					<expr_stmt><expr><call><name><name pos:line="278" pos:column="41">DBAnnotation</name><op:operator pos:line="278" pos:column="53">.</op:operator><name pos:line="278" pos:column="54">annoate</name></name><argument_list pos:line="278" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="62">"skill4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="94">"Skillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="278" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="279" pos:column="41">DBAnnotation</name><op:operator pos:line="279" pos:column="53">.</op:operator><name pos:line="279" pos:column="54">annoate</name></name><argument_list pos:line="279" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="62">"skill5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="279" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="279" pos:column="94">"Skillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="279" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name pos:line="280" pos:column="41">DBAnnotation</name><op:operator pos:line="280" pos:column="53">.</op:operator><name pos:line="280" pos:column="54">annoate</name></name><argument_list pos:line="280" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="280" pos:column="62">"getScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="74">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="96">"ScaledScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="280" pos:column="111">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					
					<expr_stmt><expr><call><name><name pos:line="282" pos:column="41">System</name><op:operator pos:line="282" pos:column="47">.</op:operator><name pos:line="282" pos:column="48">out</name><op:operator pos:line="282" pos:column="51">.</op:operator><name pos:line="282" pos:column="52">println</name></name><argument_list pos:line="282" pos:column="59">(<argument><expr><name pos:line="282" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="283" pos:column="41">System</name><op:operator pos:line="283" pos:column="47">.</op:operator><name pos:line="283" pos:column="48">out</name><op:operator pos:line="283" pos:column="51">.</op:operator><name pos:line="283" pos:column="52">println</name></name><argument_list pos:line="283" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name pos:line="285" pos:column="41">Database</name><op:operator pos:line="285" pos:column="49">.</op:operator><name pos:line="285" pos:column="50">commitTransaction</name></name><argument_list pos:line="285" pos:column="67">(<argument><expr><name pos:line="285" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="285" pos:column="74">//commit the transaction</comment>
					<expr_stmt><expr><name pos:line="286" pos:column="41">isAdded</name> <op:operator pos:line="286" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="286" pos:column="51">true</lit:literal></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="291" pos:column="25">//catch block</comment>
			<catch pos:line="292" pos:column="25">catch <parameter_list pos:line="292" pos:column="31">(<param><decl><type><name pos:line="292" pos:column="32">SQLException</name></type> <name pos:line="292" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="292" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="293" pos:column="33">System</name><op:operator pos:line="293" pos:column="39">.</op:operator><name pos:line="293" pos:column="40">out</name><op:operator pos:line="293" pos:column="43">.</op:operator><name pos:line="293" pos:column="44">println</name></name><argument_list pos:line="293" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="293" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="294" pos:column="33">e</name><op:operator pos:line="294" pos:column="34">.</op:operator><name pos:line="294" pos:column="35">printStackTrace</name></name><argument_list pos:line="294" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="295" pos:column="33">System</name><op:operator pos:line="295" pos:column="39">.</op:operator><name pos:line="295" pos:column="40">out</name><op:operator pos:line="295" pos:column="43">.</op:operator><name pos:line="295" pos:column="44">println</name></name><argument_list pos:line="295" pos:column="51">(<argument><expr><name pos:line="295" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="299" pos:column="17">//catch block</comment>
		<catch pos:line="300" pos:column="17">catch <parameter_list pos:line="300" pos:column="23">(<param><decl><type><name pos:line="300" pos:column="24">Exception</name></type> <name pos:line="300" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="300" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="301" pos:column="25">System</name><op:operator pos:line="301" pos:column="31">.</op:operator><name pos:line="301" pos:column="32">out</name><op:operator pos:line="301" pos:column="35">.</op:operator><name pos:line="301" pos:column="36">println</name></name><argument_list pos:line="301" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="302" pos:column="25">e</name><op:operator pos:line="302" pos:column="26">.</op:operator><name pos:line="302" pos:column="27">printStackTrace</name></name><argument_list pos:line="302" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="303" pos:column="25">System</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">out</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">println</name></name><argument_list pos:line="303" pos:column="43">(<argument><expr><name pos:line="303" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="307" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="309" pos:column="17">finally <block pos:line="309" pos:column="25">{

			<comment type="line" pos:line="311" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="314" pos:column="17">return <expr><name pos:line="314" pos:column="24">isAdded</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="317" pos:column="9">/*this function mainly check if the passed UIn exists the job application table or not
	 * 
	 * the return type is boolean 
	 * 
	 * the UIN is passed for checking*/</comment>
	<function><type><specifier pos:line="322" pos:column="9">public</specifier> <specifier pos:line="322" pos:column="16">static</specifier> <name pos:line="322" pos:column="23">boolean</name></type> <name pos:line="322" pos:column="31">addApplicationDetailsCheck</name><parameter_list pos:line="322" pos:column="57">(<param><decl><type><name pos:line="322" pos:column="58">int</name></type> <name pos:line="322" pos:column="62">UIN</name></decl></param>)</parameter_list> <block pos:line="322" pos:column="67">{

		<decl_stmt><decl><type><name pos:line="324" pos:column="17">boolean</name></type> <name pos:line="324" pos:column="25">isExisting</name> <init pos:line="324" pos:column="36">= <expr><lit:literal type="boolean" pos:line="324" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="324" pos:column="44">//create a boolean value for returning. set it to false</comment>


		<try pos:line="327" pos:column="17">try <block pos:line="327" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="328" pos:column="25">Connection</name></type> <name pos:line="328" pos:column="36">conn</name> <init pos:line="328" pos:column="41">= <expr><call><name><name pos:line="328" pos:column="43">Database</name><op:operator pos:line="328" pos:column="51">.</op:operator><name pos:line="328" pos:column="52">getConnection</name></name><argument_list pos:line="328" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="328" pos:column="68">//get the conn</comment>
			<decl_stmt><decl><type><name pos:line="329" pos:column="25">String</name></type> <name pos:line="329" pos:column="32">SQLAppSelect</name> <init pos:line="329" pos:column="45">= <expr><lit:literal type="string" pos:line="329" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="331" pos:column="25">try <block pos:line="331" pos:column="29">{

				<expr_stmt><expr><name pos:line="333" pos:column="33">SQLAppSelect</name> <op:operator pos:line="333" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="333" pos:column="48">"Select ApplicationID From applicationdetails where ApplicantUIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="333" pos:column="117">//write the query</comment>
				<decl_stmt><decl><type><name pos:line="334" pos:column="33">PreparedStatement</name></type> <name pos:line="334" pos:column="51">stmt</name> <init pos:line="334" pos:column="56">= <expr><call><name><name pos:line="334" pos:column="58">conn</name><op:operator pos:line="334" pos:column="62">.</op:operator><name pos:line="334" pos:column="63">prepareStatement</name></name><argument_list pos:line="334" pos:column="79">(<argument><expr><name pos:line="334" pos:column="80">SQLAppSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="335" pos:column="33">stmt</name><op:operator pos:line="335" pos:column="37">.</op:operator><name pos:line="335" pos:column="38">setInt</name></name><argument_list pos:line="335" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="335" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="335" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="335" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="336" pos:column="33">ResultSet</name></type> <name pos:line="336" pos:column="43">rs</name> <init pos:line="336" pos:column="46">= <expr><call><name><name pos:line="336" pos:column="48">stmt</name><op:operator pos:line="336" pos:column="52">.</op:operator><name pos:line="336" pos:column="53">executeQuery</name></name><argument_list pos:line="336" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="336" pos:column="68">//execute the query</comment>

				<if pos:line="338" pos:column="33">if <condition pos:line="338" pos:column="36">(<expr><call><name><name pos:line="338" pos:column="37">rs</name><op:operator pos:line="338" pos:column="39">.</op:operator><name pos:line="338" pos:column="40">first</name></name><argument_list pos:line="338" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="338" pos:column="48"> <block pos:line="338" pos:column="49">{
					<comment type="line" pos:line="339" pos:column="41">//if the application exists for the UIN return true</comment>
					<return pos:line="340" pos:column="41">return <expr><lit:literal type="boolean" pos:line="340" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="344" pos:column="25">//catch SQL exception block</comment>
			<catch pos:line="345" pos:column="25">catch <parameter_list pos:line="345" pos:column="31">(<param><decl><type><name pos:line="345" pos:column="32">SQLException</name></type> <name pos:line="345" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="345" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">System</name><op:operator pos:line="346" pos:column="39">.</op:operator><name pos:line="346" pos:column="40">out</name><op:operator pos:line="346" pos:column="43">.</op:operator><name pos:line="346" pos:column="44">println</name></name><argument_list pos:line="346" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="346" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="347" pos:column="33">e</name><op:operator pos:line="347" pos:column="34">.</op:operator><name pos:line="347" pos:column="35">printStackTrace</name></name><argument_list pos:line="347" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="348" pos:column="33">System</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">out</name><op:operator pos:line="348" pos:column="43">.</op:operator><name pos:line="348" pos:column="44">println</name></name><argument_list pos:line="348" pos:column="51">(<argument><expr><name pos:line="348" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="352" pos:column="17">//catch block </comment>
		<catch pos:line="353" pos:column="17">catch <parameter_list pos:line="353" pos:column="23">(<param><decl><type><name pos:line="353" pos:column="24">Exception</name></type> <name pos:line="353" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="353" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="354" pos:column="25">System</name><op:operator pos:line="354" pos:column="31">.</op:operator><name pos:line="354" pos:column="32">out</name><op:operator pos:line="354" pos:column="35">.</op:operator><name pos:line="354" pos:column="36">println</name></name><argument_list pos:line="354" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="354" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="355" pos:column="25">e</name><op:operator pos:line="355" pos:column="26">.</op:operator><name pos:line="355" pos:column="27">printStackTrace</name></name><argument_list pos:line="355" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="356" pos:column="25">System</name><op:operator pos:line="356" pos:column="31">.</op:operator><name pos:line="356" pos:column="32">out</name><op:operator pos:line="356" pos:column="35">.</op:operator><name pos:line="356" pos:column="36">println</name></name><argument_list pos:line="356" pos:column="43">(<argument><expr><name pos:line="356" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="359" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="361" pos:column="17">finally <block pos:line="361" pos:column="25">{

			<comment type="line" pos:line="363" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>
		<return pos:line="365" pos:column="17">return <expr><name pos:line="365" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="369" pos:column="9">/*this function mainly calculates the scaled score with the credentials passed for ewach student who fills the application
	 * 
	 * the return tpye is double
	 * 
	 * */</comment>
	<function><type><specifier pos:line="374" pos:column="9">public</specifier> <specifier pos:line="374" pos:column="16">static</specifier> <name pos:line="374" pos:column="23">double</name></type> <name pos:line="374" pos:column="30">calculateScaledScore</name><parameter_list pos:line="374" pos:column="50">(<param><decl><type><name pos:line="374" pos:column="51">int</name></type> <name pos:line="374" pos:column="55">UIN</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="60">double</name></type> <name pos:line="374" pos:column="67">workExp</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="76">boolean</name></type> <name pos:line="374" pos:column="84">skill1</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="92">boolean</name></type> <name pos:line="374" pos:column="100">skill2</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="108">boolean</name></type> <name pos:line="374" pos:column="116">skill3</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="124">boolean</name></type> <name pos:line="374" pos:column="132">skill4</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="140">boolean</name></type> <name pos:line="374" pos:column="148">skill5</name></decl></param>)</parameter_list> <block pos:line="374" pos:column="156">{

		<comment type="line" pos:line="376" pos:column="17">//declare the scores and initiliaize to 0;</comment>
		<decl_stmt><decl><type><name pos:line="377" pos:column="17">int</name></type> <name pos:line="377" pos:column="21">skillScore1</name> <init pos:line="377" pos:column="33">= <expr><lit:literal type="number" pos:line="377" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="378" pos:column="17">int</name></type> <name pos:line="378" pos:column="21">skillScore2</name> <init pos:line="378" pos:column="33">= <expr><lit:literal type="number" pos:line="378" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="379" pos:column="17">int</name></type> <name pos:line="379" pos:column="21">skillScore3</name> <init pos:line="379" pos:column="33">= <expr><lit:literal type="number" pos:line="379" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="380" pos:column="17">int</name></type> <name pos:line="380" pos:column="21">skillScore4</name> <init pos:line="380" pos:column="33">= <expr><lit:literal type="number" pos:line="380" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="381" pos:column="17">int</name></type> <name pos:line="381" pos:column="21">skillScore5</name> <init pos:line="381" pos:column="33">= <expr><lit:literal type="number" pos:line="381" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="382" pos:column="17">double</name></type> <name pos:line="382" pos:column="24">scaledScore</name> <init pos:line="382" pos:column="36">= <expr><lit:literal type="number" pos:line="382" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="383" pos:column="17">double</name></type> <name pos:line="383" pos:column="24">retreivedGPA</name> <init pos:line="383" pos:column="37">= <expr><lit:literal type="number" pos:line="383" pos:column="39">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="385" pos:column="17">//set the sclaed score for each skill that is selected</comment>
		<if pos:line="386" pos:column="17">if <condition pos:line="386" pos:column="20">(<expr><name pos:line="386" pos:column="21">skill1</name></expr>)</condition><then pos:line="386" pos:column="28">
			<expr_stmt><expr><name pos:line="387" pos:column="25">skillScore1</name> <op:operator pos:line="387" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="387" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="388" pos:column="17">if <condition pos:line="388" pos:column="20">(<expr><name pos:line="388" pos:column="21">skill2</name></expr>)</condition><then pos:line="388" pos:column="28">
			<expr_stmt><expr><name pos:line="389" pos:column="25">skillScore2</name> <op:operator pos:line="389" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="389" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="390" pos:column="17">if <condition pos:line="390" pos:column="20">(<expr><name pos:line="390" pos:column="21">skill3</name></expr>)</condition><then pos:line="390" pos:column="28">
			<expr_stmt><expr><name pos:line="391" pos:column="25">skillScore3</name> <op:operator pos:line="391" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="391" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="392" pos:column="17">if <condition pos:line="392" pos:column="20">(<expr><name pos:line="392" pos:column="21">skill4</name></expr>)</condition><then pos:line="392" pos:column="28">
			<expr_stmt><expr><name pos:line="393" pos:column="25">skillScore4</name> <op:operator pos:line="393" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="393" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="394" pos:column="17">if <condition pos:line="394" pos:column="20">(<expr><name pos:line="394" pos:column="21">skill5</name></expr>)</condition><then pos:line="394" pos:column="28">
			<expr_stmt><expr><name pos:line="395" pos:column="25">skillScore5</name> <op:operator pos:line="395" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="395" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name pos:line="397" pos:column="17">scaledScore</name> <op:operator pos:line="397" pos:column="29">=</op:operator> <name pos:line="397" pos:column="31">skillScore1</name> <op:operator pos:line="397" pos:column="43">+</op:operator> <name pos:line="397" pos:column="45">skillScore2</name> <op:operator pos:line="397" pos:column="57">+</op:operator> <name pos:line="397" pos:column="59">skillScore3</name> <op:operator pos:line="397" pos:column="71">+</op:operator> <name pos:line="397" pos:column="73">skillScore4</name>
				<op:operator pos:line="398" pos:column="33">+</op:operator> <name pos:line="398" pos:column="35">skillScore5</name></expr>;</expr_stmt>

		<comment type="line" pos:line="400" pos:column="17">//if the work ex is persent then add the it to the scaled score</comment>
		<if pos:line="401" pos:column="17">if <condition pos:line="401" pos:column="20">(<expr><name pos:line="401" pos:column="21">workExp</name> <op:operator pos:line="401" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="401" pos:column="32">1.0</lit:literal> <op:operator pos:line="401" pos:column="36">&amp;&amp;</op:operator> <name pos:line="401" pos:column="39">workExp</name> <op:operator pos:line="401" pos:column="47">&lt;=</op:operator> <lit:literal type="number" pos:line="401" pos:column="50">1.5</lit:literal></expr>)</condition><then pos:line="401" pos:column="54">
			<expr_stmt><expr><name pos:line="402" pos:column="25">scaledScore</name> <op:operator pos:line="402" pos:column="37">=</op:operator> <name pos:line="402" pos:column="39">scaledScore</name> <op:operator pos:line="402" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="402" pos:column="53">0.25</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="404" pos:column="17">if <condition pos:line="404" pos:column="20">(<expr><name pos:line="404" pos:column="21">workExp</name> <op:operator pos:line="404" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="404" pos:column="32">1.51</lit:literal> <op:operator pos:line="404" pos:column="37">&amp;&amp;</op:operator> <name pos:line="404" pos:column="40">workExp</name> <op:operator pos:line="404" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="404" pos:column="51">2.0</lit:literal></expr>)</condition><then pos:line="404" pos:column="55">
			<expr_stmt><expr><name pos:line="405" pos:column="25">scaledScore</name> <op:operator pos:line="405" pos:column="37">=</op:operator> <name pos:line="405" pos:column="39">scaledScore</name> <op:operator pos:line="405" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="405" pos:column="53">0.50</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="407" pos:column="17">if <condition pos:line="407" pos:column="20">(<expr><name pos:line="407" pos:column="21">workExp</name> <op:operator pos:line="407" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="407" pos:column="32">2.01</lit:literal> <op:operator pos:line="407" pos:column="37">&amp;&amp;</op:operator> <name pos:line="407" pos:column="40">workExp</name> <op:operator pos:line="407" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="407" pos:column="51">2.50</lit:literal></expr>)</condition><then pos:line="407" pos:column="56">
			<expr_stmt><expr><name pos:line="408" pos:column="25">scaledScore</name> <op:operator pos:line="408" pos:column="37">=</op:operator> <name pos:line="408" pos:column="39">scaledScore</name> <op:operator pos:line="408" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="408" pos:column="53">0.75</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="410" pos:column="17">if <condition pos:line="410" pos:column="20">(<expr><name pos:line="410" pos:column="21">workExp</name> <op:operator pos:line="410" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="410" pos:column="31">2.51</lit:literal></expr>)</condition><then pos:line="410" pos:column="36">
			<expr_stmt><expr><name pos:line="411" pos:column="25">scaledScore</name> <op:operator pos:line="411" pos:column="37">=</op:operator> <name pos:line="411" pos:column="39">scaledScore</name> <op:operator pos:line="411" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="411" pos:column="53">1.0</lit:literal></expr>;</expr_stmt></then></if>

		<comment type="line" pos:line="413" pos:column="17">// get the GPA factor here</comment>

		<decl_stmt><decl><type><name pos:line="415" pos:column="17">Student</name></type> <name pos:line="415" pos:column="25">getStudentGPA</name></decl>;</decl_stmt>
		<try pos:line="416" pos:column="17">try <block pos:line="416" pos:column="21">{
			<expr_stmt><expr><name pos:line="417" pos:column="25">getStudentGPA</name> <op:operator pos:line="417" pos:column="39">=</op:operator> <op:operator pos:line="417" pos:column="41">new</op:operator> <call><name pos:line="417" pos:column="45">Student</name><argument_list pos:line="417" pos:column="52">(<argument><expr><name pos:line="417" pos:column="53">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="419" pos:column="25">DBAnnotation</name><op:operator pos:line="419" pos:column="37">.</op:operator><name pos:line="419" pos:column="38">annoate</name></name><argument_list pos:line="419" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="419" pos:column="46">"retreivedGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="419" pos:column="62">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="419" pos:column="73">"GPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="419" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="420" pos:column="25">retreivedGPA</name> <op:operator pos:line="420" pos:column="38">=</op:operator> <call><name><name pos:line="420" pos:column="40">getStudentGPA</name><op:operator pos:line="420" pos:column="53">.</op:operator><name pos:line="420" pos:column="54">getGPA</name></name><argument_list pos:line="420" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
			
		}</block> <catch pos:line="422" pos:column="19">catch <parameter_list pos:line="422" pos:column="25">(<param><decl><type><name><name pos:line="422" pos:column="26">People</name><op:operator pos:line="422" pos:column="32">.</op:operator><name pos:line="422" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="422" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="422" pos:column="64">{
			<comment type="line" pos:line="423" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="424" pos:column="25">e</name><op:operator pos:line="424" pos:column="26">.</op:operator><name pos:line="424" pos:column="27">printStackTrace</name></name><argument_list pos:line="424" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<comment type="line" pos:line="427" pos:column="17">//add the retrieved GPA to the scaled score</comment>
		
		<if pos:line="429" pos:column="17">if <condition pos:line="429" pos:column="20">(<expr><name pos:line="429" pos:column="21">retreivedGPA</name> <op:operator pos:line="429" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="429" pos:column="37">3.70</lit:literal> <op:operator pos:line="429" pos:column="42">&amp;&amp;</op:operator> <name pos:line="429" pos:column="45">retreivedGPA</name> <op:operator pos:line="429" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="429" pos:column="61">4.0</lit:literal></expr>)</condition><then pos:line="429" pos:column="65">
			<expr_stmt><expr><name pos:line="430" pos:column="25">scaledScore</name> <op:operator pos:line="430" pos:column="37">=</op:operator> <name pos:line="430" pos:column="39">scaledScore</name> <op:operator pos:line="430" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="430" pos:column="53">4</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="432" pos:column="17">if <condition pos:line="432" pos:column="20">(<expr><name pos:line="432" pos:column="21">retreivedGPA</name> <op:operator pos:line="432" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="432" pos:column="37">3.60</lit:literal> <op:operator pos:line="432" pos:column="42">&amp;&amp;</op:operator> <name pos:line="432" pos:column="45">retreivedGPA</name> <op:operator pos:line="432" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="432" pos:column="61">3.69</lit:literal></expr>)</condition><then pos:line="432" pos:column="66">
			<expr_stmt><expr><name pos:line="433" pos:column="25">scaledScore</name> <op:operator pos:line="433" pos:column="37">=</op:operator> <name pos:line="433" pos:column="39">scaledScore</name> <op:operator pos:line="433" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="433" pos:column="53">3.5</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="435" pos:column="17">if <condition pos:line="435" pos:column="20">(<expr><name pos:line="435" pos:column="21">retreivedGPA</name> <op:operator pos:line="435" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="435" pos:column="37">3.50</lit:literal> <op:operator pos:line="435" pos:column="42">&amp;&amp;</op:operator> <name pos:line="435" pos:column="45">retreivedGPA</name> <op:operator pos:line="435" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="435" pos:column="61">3.59</lit:literal></expr>)</condition><then pos:line="435" pos:column="66">
			<expr_stmt><expr><name pos:line="436" pos:column="25">scaledScore</name> <op:operator pos:line="436" pos:column="37">=</op:operator> <name pos:line="436" pos:column="39">scaledScore</name> <op:operator pos:line="436" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="436" pos:column="53">3.3</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="438" pos:column="17">if <condition pos:line="438" pos:column="20">(<expr><name pos:line="438" pos:column="21">retreivedGPA</name> <op:operator pos:line="438" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="438" pos:column="37">3.30</lit:literal> <op:operator pos:line="438" pos:column="42">&amp;&amp;</op:operator> <name pos:line="438" pos:column="45">retreivedGPA</name> <op:operator pos:line="438" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="438" pos:column="61">3.49</lit:literal></expr>)</condition><then pos:line="438" pos:column="66">
			<expr_stmt><expr><name pos:line="439" pos:column="25">scaledScore</name> <op:operator pos:line="439" pos:column="37">=</op:operator> <name pos:line="439" pos:column="39">scaledScore</name> <op:operator pos:line="439" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="439" pos:column="53">3.15</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="441" pos:column="17">if <condition pos:line="441" pos:column="20">(<expr><name pos:line="441" pos:column="21">retreivedGPA</name> <op:operator pos:line="441" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="441" pos:column="37">3.00</lit:literal> <op:operator pos:line="441" pos:column="42">&amp;&amp;</op:operator> <name pos:line="441" pos:column="45">retreivedGPA</name> <op:operator pos:line="441" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="441" pos:column="61">3.29</lit:literal></expr>)</condition><then pos:line="441" pos:column="66">
			<expr_stmt><expr><name pos:line="442" pos:column="25">scaledScore</name> <op:operator pos:line="442" pos:column="37">=</op:operator> <name pos:line="442" pos:column="39">scaledScore</name> <op:operator pos:line="442" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="442" pos:column="53">3.0</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="444" pos:column="17">if <condition pos:line="444" pos:column="20">(<expr><name pos:line="444" pos:column="21">retreivedGPA</name> <op:operator pos:line="444" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="444" pos:column="37">2.90</lit:literal> <op:operator pos:line="444" pos:column="42">&amp;&amp;</op:operator> <name pos:line="444" pos:column="45">retreivedGPA</name> <op:operator pos:line="444" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="444" pos:column="61">2.99</lit:literal></expr>)</condition><then pos:line="444" pos:column="66">
			<expr_stmt><expr><name pos:line="445" pos:column="25">scaledScore</name> <op:operator pos:line="445" pos:column="37">=</op:operator> <name pos:line="445" pos:column="39">scaledScore</name> <op:operator pos:line="445" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="445" pos:column="53">2.75</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="447" pos:column="17">if <condition pos:line="447" pos:column="20">(<expr><name pos:line="447" pos:column="21">retreivedGPA</name> <op:operator pos:line="447" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="447" pos:column="37">2.80</lit:literal> <op:operator pos:line="447" pos:column="42">&amp;&amp;</op:operator> <name pos:line="447" pos:column="45">retreivedGPA</name> <op:operator pos:line="447" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="447" pos:column="61">2.89</lit:literal></expr>)</condition><then pos:line="447" pos:column="66">
			<expr_stmt><expr><name pos:line="448" pos:column="25">scaledScore</name> <op:operator pos:line="448" pos:column="37">=</op:operator> <name pos:line="448" pos:column="39">scaledScore</name> <op:operator pos:line="448" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="448" pos:column="53">2.55</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="450" pos:column="17">if <condition pos:line="450" pos:column="20">(<expr><name pos:line="450" pos:column="21">retreivedGPA</name> <op:operator pos:line="450" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="450" pos:column="37">2.70</lit:literal> <op:operator pos:line="450" pos:column="42">&amp;&amp;</op:operator> <name pos:line="450" pos:column="45">retreivedGPA</name> <op:operator pos:line="450" pos:column="58">&lt;=</op:operator> <lit:literal type="number" pos:line="450" pos:column="61">2.79</lit:literal></expr>)</condition><then pos:line="450" pos:column="66">
			<expr_stmt><expr><name pos:line="451" pos:column="25">scaledScore</name> <op:operator pos:line="451" pos:column="37">=</op:operator> <name pos:line="451" pos:column="39">scaledScore</name> <op:operator pos:line="451" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="451" pos:column="53">2.30</lit:literal></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name><name pos:line="453" pos:column="17">System</name><op:operator pos:line="453" pos:column="23">.</op:operator><name pos:line="453" pos:column="24">out</name><op:operator pos:line="453" pos:column="27">.</op:operator><name pos:line="453" pos:column="28">println</name></name><argument_list pos:line="453" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="453" pos:column="36">"Scaled score of student is: "</lit:literal> <op:operator pos:line="453" pos:column="67">+</op:operator> <name pos:line="453" pos:column="69">scaledScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:line="455" pos:column="17">return <expr><name pos:line="455" pos:column="24">scaledScore</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="459" pos:column="9">/*retreive matching details of the surdent for any new job posted
	 * 
	 * passed are the credentials for the job
	 * 
	 * the return type is a linkedhashmap*/</comment>
	<function><type><specifier pos:line="464" pos:column="9">public</specifier> <specifier pos:line="464" pos:column="16">static</specifier> <name><name pos:line="464" pos:column="23">LinkedHashMap</name><argument_list pos:line="464" pos:column="36">&lt;<argument><name pos:line="464" pos:column="37">Integer</name></argument>, <argument><name pos:line="464" pos:column="46">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="464" pos:column="55">retreiveMatchingStudents</name><parameter_list pos:line="464" pos:column="79">(<param><decl><type><name pos:line="464" pos:column="80">double</name></type> <name pos:line="464" pos:column="87">GPA</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="92">double</name></type> <name pos:line="464" pos:column="99">workExp</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="108">boolean</name></type> <name pos:line="464" pos:column="116">skill1</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="124">boolean</name></type> <name pos:line="464" pos:column="132">skill2</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="140">boolean</name></type> <name pos:line="464" pos:column="148">skill3</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="156">boolean</name></type> <name pos:line="464" pos:column="164">skill4</name></decl></param>, <param><decl><type><name pos:line="464" pos:column="172">boolean</name></type> <name pos:line="464" pos:column="180">skill5</name></decl></param>)</parameter_list> <block pos:line="464" pos:column="188">{

		<decl_stmt><decl><type><name><name pos:line="466" pos:column="17">LinkedHashMap</name><argument_list pos:line="466" pos:column="30">&lt;<argument><name pos:line="466" pos:column="31">Integer</name></argument>, <argument><name pos:line="466" pos:column="40">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="466" pos:column="49">selectedStudents</name> <init pos:line="466" pos:column="66">= <expr><op:operator pos:line="466" pos:column="68">new</op:operator> <call><name><name pos:line="466" pos:column="72">LinkedHashMap</name><argument_list pos:line="466" pos:column="85">&lt;<argument><name pos:line="466" pos:column="86">Integer</name></argument>, <argument><name pos:line="466" pos:column="95">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="466" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="466" pos:column="106">//initialize a hashmap</comment>
		<decl_stmt><decl><type><name pos:line="467" pos:column="17">int</name></type> <name pos:line="467" pos:column="21">counter</name> <init pos:line="467" pos:column="29">= <expr><lit:literal type="number" pos:line="467" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="469" pos:column="17">try <block pos:line="469" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="470" pos:column="25">Connection</name></type> <name pos:line="470" pos:column="36">conn</name> <init pos:line="470" pos:column="41">= <expr><call><name><name pos:line="470" pos:column="43">Database</name><op:operator pos:line="470" pos:column="51">.</op:operator><name pos:line="470" pos:column="52">getConnection</name></name><argument_list pos:line="470" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="470" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="471" pos:column="25">String</name></type> <name pos:line="471" pos:column="32">SQLPeopleSelect</name> <init pos:line="471" pos:column="48">= <expr><lit:literal type="string" pos:line="471" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="472" pos:column="25">try <block pos:line="472" pos:column="29">{

				<if pos:line="474" pos:column="33">if <condition pos:line="474" pos:column="36">(<expr><name pos:line="474" pos:column="37">conn</name> <op:operator pos:line="474" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="474" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="474" pos:column="50"> <block pos:line="474" pos:column="51">{
					<comment type="line" pos:line="475" pos:column="41">// set the limit to 10 student retrievals</comment>
					<expr_stmt><expr><name pos:line="476" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="476" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="476" pos:column="59">"Select applicationdetails.ApplicantUIN "</lit:literal>
							<op:operator pos:line="477" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="59">"From applicationdetails inner join student on "</lit:literal>
							<op:operator pos:line="478" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="478" pos:column="59">"student.UIN=applicationdetails.ApplicantUIN where student.GPA&gt;=? and "</lit:literal>
							<op:operator pos:line="479" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="479" pos:column="59">"applicationdetails.WorkExperience&gt;=? and applicationdetails.SkillSet1=? and "</lit:literal>
							<op:operator pos:line="480" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="480" pos:column="59">"applicationdetails.SkillSet2=? and applicationdetails.SkillSet3=? and "</lit:literal>
							<op:operator pos:line="481" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="481" pos:column="59">"applicationdetails.SkillSet4=? and applicationdetails.SkillSet5=? "</lit:literal>
							<op:operator pos:line="482" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="482" pos:column="59">"and applicationdetails.ApplicantUIN not in "</lit:literal>
							<op:operator pos:line="483" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="483" pos:column="59">"(select UIN from employee where employee.UIN=applicationdetails.ApplicantUIN)"</lit:literal>
							<op:operator pos:line="484" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="484" pos:column="59">"ORDER BY "</lit:literal>
							<op:operator pos:line="485" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="485" pos:column="59">"applicationdetails.Scaledscore DESC LIMIT 10;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="488" pos:column="33">PreparedStatement</name></type> <name pos:line="488" pos:column="51">stmtForSelect</name> <init pos:line="488" pos:column="65">= <expr><call><name><name pos:line="488" pos:column="67">conn</name><op:operator pos:line="488" pos:column="71">.</op:operator><name pos:line="488" pos:column="72">prepareStatement</name></name><argument_list pos:line="488" pos:column="88">(<argument><expr><name pos:line="488" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<comment type="line" pos:line="490" pos:column="33">// set the values for the query</comment>
				
				<expr_stmt><expr><call><name><name pos:line="492" pos:column="33">stmtForSelect</name><op:operator pos:line="492" pos:column="46">.</op:operator><name pos:line="492" pos:column="47">setDouble</name></name><argument_list pos:line="492" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="492" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="492" pos:column="60">GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="493" pos:column="33">stmtForSelect</name><op:operator pos:line="493" pos:column="46">.</op:operator><name pos:line="493" pos:column="47">setDouble</name></name><argument_list pos:line="493" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="493" pos:column="57">2</lit:literal></expr></argument>, <argument><expr><name pos:line="493" pos:column="60">workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="494" pos:column="33">stmtForSelect</name><op:operator pos:line="494" pos:column="46">.</op:operator><name pos:line="494" pos:column="47">setBoolean</name></name><argument_list pos:line="494" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="494" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name pos:line="494" pos:column="61">skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="495" pos:column="33">stmtForSelect</name><op:operator pos:line="495" pos:column="46">.</op:operator><name pos:line="495" pos:column="47">setBoolean</name></name><argument_list pos:line="495" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="495" pos:column="58">4</lit:literal></expr></argument>, <argument><expr><name pos:line="495" pos:column="61">skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">stmtForSelect</name><op:operator pos:line="496" pos:column="46">.</op:operator><name pos:line="496" pos:column="47">setBoolean</name></name><argument_list pos:line="496" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="496" pos:column="58">5</lit:literal></expr></argument>, <argument><expr><name pos:line="496" pos:column="61">skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="497" pos:column="33">stmtForSelect</name><op:operator pos:line="497" pos:column="46">.</op:operator><name pos:line="497" pos:column="47">setBoolean</name></name><argument_list pos:line="497" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="497" pos:column="58">6</lit:literal></expr></argument>, <argument><expr><name pos:line="497" pos:column="61">skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="498" pos:column="33">stmtForSelect</name><op:operator pos:line="498" pos:column="46">.</op:operator><name pos:line="498" pos:column="47">setBoolean</name></name><argument_list pos:line="498" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="498" pos:column="58">7</lit:literal></expr></argument>, <argument><expr><name pos:line="498" pos:column="61">skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="500" pos:column="33">ResultSet</name></type> <name pos:line="500" pos:column="43">rs</name> <init pos:line="500" pos:column="46">= <expr><call><name><name pos:line="500" pos:column="48">stmtForSelect</name><op:operator pos:line="500" pos:column="61">.</op:operator><name pos:line="500" pos:column="62">executeQuery</name></name><argument_list pos:line="500" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>

				<while pos:line="502" pos:column="33">while <condition pos:line="502" pos:column="39">(<expr><call><name><name pos:line="502" pos:column="40">rs</name><op:operator pos:line="502" pos:column="42">.</op:operator><name pos:line="502" pos:column="43">next</name></name><argument_list pos:line="502" pos:column="47">()</argument_list></call></expr>)</condition> <block pos:line="502" pos:column="51">{
					<comment type="line" pos:line="503" pos:column="41">//retreive the UINS</comment>
					
					<expr_stmt><expr><call><name><name pos:line="505" pos:column="41">DBAnnotation</name><op:operator pos:line="505" pos:column="53">.</op:operator><name pos:line="505" pos:column="54">annoate</name></name><argument_list pos:line="505" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="505" pos:column="62">"selectedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="505" pos:column="77">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="505" pos:column="99">"ApplicantUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="505" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="506" pos:column="41">int</name></type> <name pos:line="506" pos:column="45">selectedUIN</name> <init pos:line="506" pos:column="57">= <expr><call><name><name pos:line="506" pos:column="59">rs</name><op:operator pos:line="506" pos:column="61">.</op:operator><name pos:line="506" pos:column="62">getInt</name></name><argument_list pos:line="506" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="506" pos:column="69">"ApplicantUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><name pos:line="508" pos:column="41">counter</name><op:operator pos:line="508" pos:column="48">++</op:operator></expr>;</expr_stmt>

					<decl_stmt><decl><type><name pos:line="510" pos:column="41">Student</name></type> <name pos:line="510" pos:column="49">chosenStudents</name> <init pos:line="510" pos:column="64">= <expr><op:operator pos:line="510" pos:column="66">new</op:operator> <call><name pos:line="510" pos:column="70">Student</name><argument_list pos:line="510" pos:column="77">(<argument><expr><name pos:line="510" pos:column="78">selectedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="510" pos:column="91">//pass the UIN to the student constructor to get the details in the object</comment>
					
					<expr_stmt><expr><call><name><name pos:line="512" pos:column="41">DBAnnotation</name><op:operator pos:line="512" pos:column="53">.</op:operator><name pos:line="512" pos:column="54">annoate</name></name><argument_list pos:line="512" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="512" pos:column="62">"chosenUINs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="512" pos:column="76">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="512" pos:column="87">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="512" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="513" pos:column="41">int</name></type> <name pos:line="513" pos:column="45">chosenUINs</name><init pos:line="513" pos:column="55">=<expr><call><name><name pos:line="513" pos:column="56">chosenStudents</name><op:operator pos:line="513" pos:column="70">.</op:operator><name pos:line="513" pos:column="71">getUIN</name></name><argument_list pos:line="513" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="515" pos:column="41">selectedStudents</name><op:operator pos:line="515" pos:column="57">.</op:operator><name pos:line="515" pos:column="58">put</name></name><argument_list pos:line="515" pos:column="61">(<argument><expr><name pos:line="515" pos:column="62">chosenUINs</name></expr></argument>,<argument><expr><name pos:line="515" pos:column="73">chosenStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="515" pos:column="89">//add it to the linkedhashmap</comment>
					<expr_stmt><expr><call><name><name pos:line="516" pos:column="41">System</name><op:operator pos:line="516" pos:column="47">.</op:operator><name pos:line="516" pos:column="48">out</name><op:operator pos:line="516" pos:column="51">.</op:operator><name pos:line="516" pos:column="52">println</name></name><argument_list pos:line="516" pos:column="59">(<argument><expr><name pos:line="516" pos:column="60">chosenUINs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></while>

			}</block>
			<comment type="line" pos:line="521" pos:column="25">//catch block for SQL exception</comment>
			<catch pos:line="522" pos:column="25">catch <parameter_list pos:line="522" pos:column="31">(<param><decl><type><name pos:line="522" pos:column="32">SQLException</name></type> <name pos:line="522" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="522" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="523" pos:column="33">System</name><op:operator pos:line="523" pos:column="39">.</op:operator><name pos:line="523" pos:column="40">out</name><op:operator pos:line="523" pos:column="43">.</op:operator><name pos:line="523" pos:column="44">println</name></name><argument_list pos:line="523" pos:column="51">(<argument><expr><name pos:line="523" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="528" pos:column="17">//catch block</comment>
		<catch pos:line="529" pos:column="17">catch <parameter_list pos:line="529" pos:column="23">(<param><decl><type><name pos:line="529" pos:column="24">Exception</name></type> <name pos:line="529" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="529" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="530" pos:column="25">System</name><op:operator pos:line="530" pos:column="31">.</op:operator><name pos:line="530" pos:column="32">out</name><op:operator pos:line="530" pos:column="35">.</op:operator><name pos:line="530" pos:column="36">println</name></name><argument_list pos:line="530" pos:column="43">(<argument><expr><name pos:line="530" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="533" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
																	here the finally block does not contain any general statements*/</comment>
		<finally pos:line="535" pos:column="17">finally <block pos:line="535" pos:column="25">{

			<comment type="line" pos:line="537" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="540" pos:column="17">return <expr><name pos:line="540" pos:column="24">selectedStudents</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="543" pos:column="9">/*retreive matching details of the student for any new job posted, in this the students who had been previously selected and sent the email will be neglected
	 * 
	 * passed are the credentials for the job
	 * 
	 * the return type is a linkedhashmap*/</comment>
	<function><type><specifier pos:line="548" pos:column="9">public</specifier> <specifier pos:line="548" pos:column="16">static</specifier> <name><name pos:line="548" pos:column="23">LinkedHashMap</name><argument_list pos:line="548" pos:column="36">&lt;<argument><name pos:line="548" pos:column="37">Integer</name></argument>, <argument><name pos:line="548" pos:column="46">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="548" pos:column="55">rePost</name><parameter_list pos:line="548" pos:column="61">(<param><decl><type><name pos:line="548" pos:column="62">double</name></type> <name pos:line="548" pos:column="69">GPA</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="74">double</name></type> <name pos:line="548" pos:column="81">workExp</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="90">boolean</name></type> <name pos:line="548" pos:column="98">skill1</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="106">boolean</name></type> <name pos:line="548" pos:column="114">skill2</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="122">boolean</name></type> <name pos:line="548" pos:column="130">skill3</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="138">boolean</name></type> <name pos:line="548" pos:column="146">skill4</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="154">boolean</name></type> <name pos:line="548" pos:column="162">skill5</name></decl></param>, <param><decl><type><name pos:line="548" pos:column="170">Job</name></type> <name pos:line="548" pos:column="174">job</name></decl></param>)</parameter_list> <block pos:line="548" pos:column="179">{

		<decl_stmt><decl><type><name><name pos:line="550" pos:column="17">LinkedHashMap</name><argument_list pos:line="550" pos:column="30">&lt;<argument><name pos:line="550" pos:column="31">Integer</name></argument>, <argument><name pos:line="550" pos:column="40">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="550" pos:column="49">selectedStudents</name> <init pos:line="550" pos:column="66">= <expr><op:operator pos:line="550" pos:column="68">new</op:operator> <call><name><name pos:line="550" pos:column="72">LinkedHashMap</name><argument_list pos:line="550" pos:column="85">&lt;<argument><name pos:line="550" pos:column="86">Integer</name></argument>, <argument><name pos:line="550" pos:column="95">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="550" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="550" pos:column="106">//initialize a hashmap</comment>
		<decl_stmt><decl><type><name pos:line="551" pos:column="17">int</name></type> <name pos:line="551" pos:column="21">counter</name> <init pos:line="551" pos:column="29">= <expr><lit:literal type="number" pos:line="551" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="553" pos:column="17">try <block pos:line="553" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="554" pos:column="25">Connection</name></type> <name pos:line="554" pos:column="36">conn</name> <init pos:line="554" pos:column="41">= <expr><call><name><name pos:line="554" pos:column="43">Database</name><op:operator pos:line="554" pos:column="51">.</op:operator><name pos:line="554" pos:column="52">getConnection</name></name><argument_list pos:line="554" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="554" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="555" pos:column="25">String</name></type> <name pos:line="555" pos:column="32">SQLPeopleSelect</name> <init pos:line="555" pos:column="48">= <expr><lit:literal type="string" pos:line="555" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="556" pos:column="25">try <block pos:line="556" pos:column="29">{

				<if pos:line="558" pos:column="33">if <condition pos:line="558" pos:column="36">(<expr><name pos:line="558" pos:column="37">conn</name> <op:operator pos:line="558" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="558" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="558" pos:column="50"> <block pos:line="558" pos:column="51">{

					<comment type="line" pos:line="560" pos:column="41">// set the limit to 10</comment>
					<expr_stmt><expr><name pos:line="561" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="561" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="561" pos:column="59">"Select applicationdetails.ApplicantUIN "</lit:literal>
							<op:operator pos:line="562" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="562" pos:column="59">"From applicationdetails inner join student on "</lit:literal>
							<op:operator pos:line="563" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="563" pos:column="59">"student.UIN=applicationdetails.ApplicantUIN where student.GPA&gt;=? and "</lit:literal>
							<op:operator pos:line="564" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="564" pos:column="59">"applicationdetails.WorkExperience&gt;=? and applicationdetails.SkillSet1=? and "</lit:literal>
							<op:operator pos:line="565" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="565" pos:column="59">"applicationdetails.SkillSet2=? and applicationdetails.SkillSet3=? and "</lit:literal>
							<op:operator pos:line="566" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="566" pos:column="59">"applicationdetails.SkillSet4=? and applicationdetails.SkillSet5=? "</lit:literal>
							<op:operator pos:line="567" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="567" pos:column="59">"and applicationdetails.ApplicantUIN not in "</lit:literal>
							<op:operator pos:line="568" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="568" pos:column="59">"(select UIN from employee where employee.UIN=applicationdetails.ApplicantUIN)"</lit:literal>
							<op:operator pos:line="569" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="569" pos:column="59">" and applicationdetails.ApplicantUIN not in "</lit:literal>
							<op:operator pos:line="570" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="570" pos:column="59">"(select UIN from jobroster where applicationdetails.ApplicantUIN=jobroster.UIN and JobID=?)"</lit:literal>
							<op:operator pos:line="571" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="571" pos:column="59">"ORDER BY "</lit:literal>
							<op:operator pos:line="572" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="572" pos:column="59">"applicationdetails.Scaledscore DESC LIMIT 10;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="575" pos:column="33">PreparedStatement</name></type> <name pos:line="575" pos:column="51">stmtForSelect</name> <init pos:line="575" pos:column="65">= <expr><call><name><name pos:line="575" pos:column="67">conn</name><op:operator pos:line="575" pos:column="71">.</op:operator><name pos:line="575" pos:column="72">prepareStatement</name></name><argument_list pos:line="575" pos:column="88">(<argument><expr><name pos:line="575" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<comment type="line" pos:line="577" pos:column="33">//set the values for the query</comment>
				<expr_stmt><expr><call><name><name pos:line="578" pos:column="33">stmtForSelect</name><op:operator pos:line="578" pos:column="46">.</op:operator><name pos:line="578" pos:column="47">setDouble</name></name><argument_list pos:line="578" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="578" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="578" pos:column="60">GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="579" pos:column="33">stmtForSelect</name><op:operator pos:line="579" pos:column="46">.</op:operator><name pos:line="579" pos:column="47">setDouble</name></name><argument_list pos:line="579" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="579" pos:column="57">2</lit:literal></expr></argument>, <argument><expr><name pos:line="579" pos:column="60">workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="580" pos:column="33">stmtForSelect</name><op:operator pos:line="580" pos:column="46">.</op:operator><name pos:line="580" pos:column="47">setBoolean</name></name><argument_list pos:line="580" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="580" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name pos:line="580" pos:column="61">skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="581" pos:column="33">stmtForSelect</name><op:operator pos:line="581" pos:column="46">.</op:operator><name pos:line="581" pos:column="47">setBoolean</name></name><argument_list pos:line="581" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="581" pos:column="58">4</lit:literal></expr></argument>, <argument><expr><name pos:line="581" pos:column="61">skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="582" pos:column="33">stmtForSelect</name><op:operator pos:line="582" pos:column="46">.</op:operator><name pos:line="582" pos:column="47">setBoolean</name></name><argument_list pos:line="582" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="582" pos:column="58">5</lit:literal></expr></argument>, <argument><expr><name pos:line="582" pos:column="61">skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="583" pos:column="33">stmtForSelect</name><op:operator pos:line="583" pos:column="46">.</op:operator><name pos:line="583" pos:column="47">setBoolean</name></name><argument_list pos:line="583" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="583" pos:column="58">6</lit:literal></expr></argument>, <argument><expr><name pos:line="583" pos:column="61">skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="584" pos:column="33">stmtForSelect</name><op:operator pos:line="584" pos:column="46">.</op:operator><name pos:line="584" pos:column="47">setBoolean</name></name><argument_list pos:line="584" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="584" pos:column="58">7</lit:literal></expr></argument>, <argument><expr><name pos:line="584" pos:column="61">skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="585" pos:column="33">stmtForSelect</name><op:operator pos:line="585" pos:column="46">.</op:operator><name pos:line="585" pos:column="47">setInt</name></name><argument_list pos:line="585" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="585" pos:column="54">8</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="585" pos:column="57">job</name><op:operator pos:line="585" pos:column="60">.</op:operator><name pos:line="585" pos:column="61">getJobID</name></name><argument_list pos:line="585" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="586" pos:column="33">System</name><op:operator pos:line="586" pos:column="39">.</op:operator><name pos:line="586" pos:column="40">out</name><op:operator pos:line="586" pos:column="43">.</op:operator><name pos:line="586" pos:column="44">println</name></name><argument_list pos:line="586" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="586" pos:column="52">"++++++++++"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="588" pos:column="33">ResultSet</name></type> <name pos:line="588" pos:column="43">rs</name> <init pos:line="588" pos:column="46">= <expr><call><name><name pos:line="588" pos:column="48">stmtForSelect</name><op:operator pos:line="588" pos:column="61">.</op:operator><name pos:line="588" pos:column="62">executeQuery</name></name><argument_list pos:line="588" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="588" pos:column="77">//execute the query</comment>
				<expr_stmt><expr><call><name><name pos:line="589" pos:column="33">System</name><op:operator pos:line="589" pos:column="39">.</op:operator><name pos:line="589" pos:column="40">out</name><op:operator pos:line="589" pos:column="43">.</op:operator><name pos:line="589" pos:column="44">println</name></name><argument_list pos:line="589" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="589" pos:column="52">"++++++++++"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<while pos:line="591" pos:column="33">while <condition pos:line="591" pos:column="39">(<expr><call><name><name pos:line="591" pos:column="40">rs</name><op:operator pos:line="591" pos:column="42">.</op:operator><name pos:line="591" pos:column="43">next</name></name><argument_list pos:line="591" pos:column="47">()</argument_list></call></expr>)</condition> <block pos:line="591" pos:column="51">{
					<comment type="line" pos:line="592" pos:column="41">//retrieve the UIN</comment>
					
					<expr_stmt><expr><call><name><name pos:line="594" pos:column="41">DBAnnotation</name><op:operator pos:line="594" pos:column="53">.</op:operator><name pos:line="594" pos:column="54">annoate</name></name><argument_list pos:line="594" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="594" pos:column="62">"selectedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="594" pos:column="77">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="594" pos:column="99">"ApplicantUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="594" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="595" pos:column="41">int</name></type> <name pos:line="595" pos:column="45">selectedUIN</name> <init pos:line="595" pos:column="57">= <expr><call><name><name pos:line="595" pos:column="59">rs</name><op:operator pos:line="595" pos:column="61">.</op:operator><name pos:line="595" pos:column="62">getInt</name></name><argument_list pos:line="595" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="595" pos:column="69">"ApplicantUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><name pos:line="597" pos:column="41">counter</name><op:operator pos:line="597" pos:column="48">++</op:operator></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="598" pos:column="41">Student</name></type> <name pos:line="598" pos:column="49">chosenStudents</name> <init pos:line="598" pos:column="64">= <expr><op:operator pos:line="598" pos:column="66">new</op:operator> <call><name pos:line="598" pos:column="70">Student</name><argument_list pos:line="598" pos:column="77">(<argument><expr><name pos:line="598" pos:column="78">selectedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="598" pos:column="91">//pass it to the constructor to get the object details</comment>
					
					<expr_stmt><expr><call><name><name pos:line="600" pos:column="41">DBAnnotation</name><op:operator pos:line="600" pos:column="53">.</op:operator><name pos:line="600" pos:column="54">annoate</name></name><argument_list pos:line="600" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="600" pos:column="62">"chosenUINs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="600" pos:column="76">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="600" pos:column="87">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="600" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="601" pos:column="41">int</name></type> <name pos:line="601" pos:column="45">chosenUINs</name><init pos:line="601" pos:column="55">=<expr><call><name><name pos:line="601" pos:column="56">chosenStudents</name><op:operator pos:line="601" pos:column="70">.</op:operator><name pos:line="601" pos:column="71">getUIN</name></name><argument_list pos:line="601" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="603" pos:column="41">selectedStudents</name><op:operator pos:line="603" pos:column="57">.</op:operator><name pos:line="603" pos:column="58">put</name></name><argument_list pos:line="603" pos:column="61">(<argument><expr><name pos:line="603" pos:column="62">chosenUINs</name></expr></argument>,<argument><expr><name pos:line="603" pos:column="73">chosenStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="603" pos:column="89">//add it to the hashmap</comment>
					<expr_stmt><expr><call><name><name pos:line="604" pos:column="41">System</name><op:operator pos:line="604" pos:column="47">.</op:operator><name pos:line="604" pos:column="48">out</name><op:operator pos:line="604" pos:column="51">.</op:operator><name pos:line="604" pos:column="52">println</name></name><argument_list pos:line="604" pos:column="59">(<argument><expr><name pos:line="604" pos:column="60">chosenUINs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></while>

			}</block>
			<comment type="line" pos:line="609" pos:column="25">//catch block for SQL exception</comment>
			<catch pos:line="610" pos:column="25">catch <parameter_list pos:line="610" pos:column="31">(<param><decl><type><name pos:line="610" pos:column="32">SQLException</name></type> <name pos:line="610" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="610" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="611" pos:column="33">System</name><op:operator pos:line="611" pos:column="39">.</op:operator><name pos:line="611" pos:column="40">out</name><op:operator pos:line="611" pos:column="43">.</op:operator><name pos:line="611" pos:column="44">println</name></name><argument_list pos:line="611" pos:column="51">(<argument><expr><name pos:line="611" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="616" pos:column="17">//catch block</comment>
		<catch pos:line="617" pos:column="17">catch <parameter_list pos:line="617" pos:column="23">(<param><decl><type><name pos:line="617" pos:column="24">Exception</name></type> <name pos:line="617" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="617" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="618" pos:column="25">System</name><op:operator pos:line="618" pos:column="31">.</op:operator><name pos:line="618" pos:column="32">out</name><op:operator pos:line="618" pos:column="35">.</op:operator><name pos:line="618" pos:column="36">println</name></name><argument_list pos:line="618" pos:column="43">(<argument><expr><name pos:line="618" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="621" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="623" pos:column="17">finally <block pos:line="623" pos:column="25">{

			<comment type="line" pos:line="625" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="628" pos:column="17">return <expr><name pos:line="628" pos:column="24">selectedStudents</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="631" pos:column="9">/*the student can update the application details when and when he feels if he has acquired new skills
	 * 
	 * the return type is boolean
	 * 
	 * the passed parameters are the credentials of the job application
	 * 
	 * this also throws an exception*/</comment>
	<function><type><specifier pos:line="638" pos:column="9">public</specifier> <specifier pos:line="638" pos:column="16">static</specifier> <name pos:line="638" pos:column="23">boolean</name></type> <name pos:line="638" pos:column="31">updateApplication</name><parameter_list pos:line="638" pos:column="48">(<param><decl><type><name pos:line="638" pos:column="49">int</name></type> <name pos:line="638" pos:column="53">UIN</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="58">double</name></type> <name pos:line="638" pos:column="65">workExp</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="74">boolean</name></type> <name pos:line="638" pos:column="82">skill1</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="90">boolean</name></type> <name pos:line="638" pos:column="98">skill2</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="106">boolean</name></type> <name pos:line="638" pos:column="114">skill3</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="122">boolean</name></type> <name pos:line="638" pos:column="130">skill4</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="138">boolean</name></type> <name pos:line="638" pos:column="146">skill5</name></decl></param>)</parameter_list> <throws pos:line="638" pos:column="154">throws <argument><expr><name><name pos:line="638" pos:column="161">People</name><op:operator pos:line="638" pos:column="167">.</op:operator><name pos:line="638" pos:column="168">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="638" pos:column="196">{

		<decl_stmt><decl><type><name pos:line="640" pos:column="17">boolean</name></type> <name pos:line="640" pos:column="25">check</name> <init pos:line="640" pos:column="31">= <expr><call><name><name pos:line="640" pos:column="33">Student</name><op:operator pos:line="640" pos:column="40">.</op:operator><name pos:line="640" pos:column="41">checkIfStudent</name></name><argument_list pos:line="640" pos:column="55">(<argument><expr><name pos:line="640" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="640" pos:column="61">//check if its a student</comment>
		<if pos:line="641" pos:column="17">if <condition pos:line="641" pos:column="20">(<expr><op:operator pos:line="641" pos:column="21">!</op:operator><name pos:line="641" pos:column="22">check</name></expr>)</condition><then pos:line="641" pos:column="28"> <block pos:line="641" pos:column="29">{
			<throw pos:line="642" pos:column="25">throw <expr><op:operator pos:line="642" pos:column="31">new</op:operator> <call><name><name pos:line="642" pos:column="35">People</name><op:operator pos:line="642" pos:column="41">.</op:operator><name pos:line="642" pos:column="42">PersonDoesNotExistException</name></name><argument_list pos:line="642" pos:column="69">()</argument_list></call></expr>;</throw><comment type="line" pos:line="642" pos:column="72">//throw the exception</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="645" pos:column="17">boolean</name></type> <name pos:line="645" pos:column="25">isUpdated</name> <init pos:line="645" pos:column="35">= <expr><lit:literal type="boolean" pos:line="645" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="647" pos:column="17">try <block pos:line="647" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="648" pos:column="25">Connection</name></type> <name pos:line="648" pos:column="36">conn</name> <init pos:line="648" pos:column="41">= <expr><call><name><name pos:line="648" pos:column="43">Database</name><op:operator pos:line="648" pos:column="51">.</op:operator><name pos:line="648" pos:column="52">getConnection</name></name><argument_list pos:line="648" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="648" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="649" pos:column="25">String</name></type> <name pos:line="649" pos:column="32">SQLPeopleSelect</name> <init pos:line="649" pos:column="48">= <expr><lit:literal type="string" pos:line="649" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="651" pos:column="25">try <block pos:line="651" pos:column="29">{
				<comment type="line" pos:line="652" pos:column="33">//write the query</comment>
				<expr_stmt><expr><name pos:line="653" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="653" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="653" pos:column="51">"Select ApplicantUIN From applicationdetails where ApplicantUIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="654" pos:column="33">PreparedStatement</name></type> <name pos:line="654" pos:column="51">stmt</name> <init pos:line="654" pos:column="56">= <expr><call><name><name pos:line="654" pos:column="58">conn</name><op:operator pos:line="654" pos:column="62">.</op:operator><name pos:line="654" pos:column="63">prepareStatement</name></name><argument_list pos:line="654" pos:column="79">(<argument><expr><name pos:line="654" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="655" pos:column="33">stmt</name><op:operator pos:line="655" pos:column="37">.</op:operator><name pos:line="655" pos:column="38">setInt</name></name><argument_list pos:line="655" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="655" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="655" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="656" pos:column="33">ResultSet</name></type> <name pos:line="656" pos:column="43">rs</name> <init pos:line="656" pos:column="46">= <expr><call><name><name pos:line="656" pos:column="48">stmt</name><op:operator pos:line="656" pos:column="52">.</op:operator><name pos:line="656" pos:column="53">executeQuery</name></name><argument_list pos:line="656" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="656" pos:column="68">//execute the query</comment>

				<if pos:line="658" pos:column="33">if <condition pos:line="658" pos:column="36">(<expr><call><name><name pos:line="658" pos:column="37">rs</name><op:operator pos:line="658" pos:column="39">.</op:operator><name pos:line="658" pos:column="40">first</name></name><argument_list pos:line="658" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="658" pos:column="48"> <block pos:line="658" pos:column="49">{

					<decl_stmt><decl><type><name pos:line="660" pos:column="41">double</name></type> <name pos:line="660" pos:column="48">newScaledScore</name> <init pos:line="660" pos:column="63">= <expr><call><name pos:line="660" pos:column="65">calculateScaledScore</name><argument_list pos:line="660" pos:column="85">(<argument><expr><name pos:line="660" pos:column="86">UIN</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="91">workExp</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="100">skill1</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="108">skill2</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="116">skill3</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="124">skill4</name></expr></argument>, <argument><expr><name pos:line="660" pos:column="132">skill5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="660" pos:column="140">//call the scaled score function for reevaluating</comment>

					<comment type="line" pos:line="662" pos:column="41">//update query to update the values of the job application</comment>

					<expr_stmt><expr><call><name><name pos:line="664" pos:column="41">System</name><op:operator pos:line="664" pos:column="47">.</op:operator><name pos:line="664" pos:column="48">out</name><op:operator pos:line="664" pos:column="51">.</op:operator><name pos:line="664" pos:column="52">println</name></name><argument_list pos:line="664" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="664" pos:column="60">"Updating the application details in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="665" pos:column="41">String</name></type> <name pos:line="665" pos:column="48">SQLupdateAppdetails</name> <init pos:line="665" pos:column="68">= <expr><lit:literal type="string" pos:line="665" pos:column="70">"UPDATE applicationdetails SET WorkExperience=?, Skillset1=?, Skillset2=?, Skillset3=?, Skillset4=?, Skillset5=?, Scaledscore=? where ApplicantUIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="666" pos:column="41">stmt</name> <op:operator pos:line="666" pos:column="46">=</op:operator> <call><name><name pos:line="666" pos:column="48">conn</name><op:operator pos:line="666" pos:column="52">.</op:operator><name pos:line="666" pos:column="53">prepareStatement</name></name><argument_list pos:line="666" pos:column="69">(<argument><expr><name pos:line="666" pos:column="70">SQLupdateAppdetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line" pos:line="668" pos:column="41">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="669" pos:column="41">stmt</name><op:operator pos:line="669" pos:column="45">.</op:operator><name pos:line="669" pos:column="46">setDouble</name></name><argument_list pos:line="669" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="669" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="669" pos:column="59">workExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="670" pos:column="41">stmt</name><op:operator pos:line="670" pos:column="45">.</op:operator><name pos:line="670" pos:column="46">setBoolean</name></name><argument_list pos:line="670" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="670" pos:column="57">2</lit:literal></expr></argument>, <argument><expr><name pos:line="670" pos:column="60">skill1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="671" pos:column="41">stmt</name><op:operator pos:line="671" pos:column="45">.</op:operator><name pos:line="671" pos:column="46">setBoolean</name></name><argument_list pos:line="671" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="671" pos:column="57">3</lit:literal></expr></argument>, <argument><expr><name pos:line="671" pos:column="60">skill2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="672" pos:column="41">stmt</name><op:operator pos:line="672" pos:column="45">.</op:operator><name pos:line="672" pos:column="46">setBoolean</name></name><argument_list pos:line="672" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="672" pos:column="57">4</lit:literal></expr></argument>, <argument><expr><name pos:line="672" pos:column="60">skill3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="673" pos:column="41">stmt</name><op:operator pos:line="673" pos:column="45">.</op:operator><name pos:line="673" pos:column="46">setBoolean</name></name><argument_list pos:line="673" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="673" pos:column="57">5</lit:literal></expr></argument>, <argument><expr><name pos:line="673" pos:column="60">skill4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="674" pos:column="41">stmt</name><op:operator pos:line="674" pos:column="45">.</op:operator><name pos:line="674" pos:column="46">setBoolean</name></name><argument_list pos:line="674" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="674" pos:column="57">6</lit:literal></expr></argument>, <argument><expr><name pos:line="674" pos:column="60">skill5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="675" pos:column="41">stmt</name><op:operator pos:line="675" pos:column="45">.</op:operator><name pos:line="675" pos:column="46">setDouble</name></name><argument_list pos:line="675" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="675" pos:column="56">7</lit:literal></expr></argument>, <argument><expr><name pos:line="675" pos:column="59">newScaledScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="676" pos:column="41">stmt</name><op:operator pos:line="676" pos:column="45">.</op:operator><name pos:line="676" pos:column="46">setInt</name></name><argument_list pos:line="676" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="676" pos:column="53">8</lit:literal></expr></argument>, <argument><expr><name pos:line="676" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="677" pos:column="41">System</name><op:operator pos:line="677" pos:column="47">.</op:operator><name pos:line="677" pos:column="48">out</name><op:operator pos:line="677" pos:column="51">.</op:operator><name pos:line="677" pos:column="52">println</name></name><argument_list pos:line="677" pos:column="59">(<argument><expr><name pos:line="677" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="678" pos:column="41">int</name></type> <name pos:line="678" pos:column="45">i</name> <init pos:line="678" pos:column="47">= <expr><call><name><name pos:line="678" pos:column="49">stmt</name><op:operator pos:line="678" pos:column="53">.</op:operator><name pos:line="678" pos:column="54">executeUpdate</name></name><argument_list pos:line="678" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="678" pos:column="70">//execute the query</comment>
														
					<expr_stmt><expr><call><name><name pos:line="680" pos:column="41">DBAnnotation</name><op:operator pos:line="680" pos:column="53">.</op:operator><name pos:line="680" pos:column="54">annoate</name></name><argument_list pos:line="680" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="680" pos:column="62">"workExp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="680" pos:column="73">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="680" pos:column="95">"WorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="680" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="681" pos:column="41">DBAnnotation</name><op:operator pos:line="681" pos:column="53">.</op:operator><name pos:line="681" pos:column="54">annoate</name></name><argument_list pos:line="681" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="681" pos:column="62">"skill1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="681" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="681" pos:column="94">"Skillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="681" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="682" pos:column="41">DBAnnotation</name><op:operator pos:line="682" pos:column="53">.</op:operator><name pos:line="682" pos:column="54">annoate</name></name><argument_list pos:line="682" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="682" pos:column="62">"skill2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="682" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="682" pos:column="94">"Skillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="682" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="683" pos:column="41">DBAnnotation</name><op:operator pos:line="683" pos:column="53">.</op:operator><name pos:line="683" pos:column="54">annoate</name></name><argument_list pos:line="683" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="683" pos:column="62">"skill3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="683" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="683" pos:column="94">"Skillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="683" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
					<expr_stmt><expr><call><name><name pos:line="684" pos:column="41">DBAnnotation</name><op:operator pos:line="684" pos:column="53">.</op:operator><name pos:line="684" pos:column="54">annoate</name></name><argument_list pos:line="684" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="684" pos:column="62">"skill4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="684" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="684" pos:column="94">"Skillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="684" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					<expr_stmt><expr><call><name><name pos:line="685" pos:column="41">DBAnnotation</name><op:operator pos:line="685" pos:column="53">.</op:operator><name pos:line="685" pos:column="54">annoate</name></name><argument_list pos:line="685" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="685" pos:column="62">"skill5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="685" pos:column="72">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="685" pos:column="94">"Skillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="685" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name pos:line="686" pos:column="41">DBAnnotation</name><op:operator pos:line="686" pos:column="53">.</op:operator><name pos:line="686" pos:column="54">annoate</name></name><argument_list pos:line="686" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="686" pos:column="62">"getScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="686" pos:column="74">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="686" pos:column="96">"ScaledScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="686" pos:column="111">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name pos:line="687" pos:column="41">DBAnnotation</name><op:operator pos:line="687" pos:column="53">.</op:operator><name pos:line="687" pos:column="54">annoate</name></name><argument_list pos:line="687" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="687" pos:column="62">"newScaledScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="687" pos:column="80">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="687" pos:column="102">"ScaledScore"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="687" pos:column="117">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="688" pos:column="41">DBAnnotation</name><op:operator pos:line="688" pos:column="53">.</op:operator><name pos:line="688" pos:column="54">annoate</name></name><argument_list pos:line="688" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="688" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="688" pos:column="69">"applicationdetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="688" pos:column="91">"applicantUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="688" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
					
					<expr_stmt><expr><call><name><name pos:line="690" pos:column="41">System</name><op:operator pos:line="690" pos:column="47">.</op:operator><name pos:line="690" pos:column="48">out</name><op:operator pos:line="690" pos:column="51">.</op:operator><name pos:line="690" pos:column="52">println</name></name><argument_list pos:line="690" pos:column="59">(<argument><expr><name pos:line="690" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="691" pos:column="41">System</name><op:operator pos:line="691" pos:column="47">.</op:operator><name pos:line="691" pos:column="48">out</name><op:operator pos:line="691" pos:column="51">.</op:operator><name pos:line="691" pos:column="52">println</name></name><argument_list pos:line="691" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="691" pos:column="60">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="692" pos:column="41">isUpdated</name> <op:operator pos:line="692" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="692" pos:column="53">true</lit:literal></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name pos:line="694" pos:column="41">Database</name><op:operator pos:line="694" pos:column="49">.</op:operator><name pos:line="694" pos:column="50">commitTransaction</name></name><argument_list pos:line="694" pos:column="67">(<argument><expr><name pos:line="694" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="694" pos:column="74">//commit the transaction</comment>

				}</block></then>

				<else pos:line="698" pos:column="33">else <block pos:line="698" pos:column="38">{
					<comment type="line" pos:line="699" pos:column="41">//else the UIN does not exist for updating</comment>
					<expr_stmt><expr><call><name><name pos:line="700" pos:column="41">System</name><op:operator pos:line="700" pos:column="47">.</op:operator><name pos:line="700" pos:column="48">out</name><op:operator pos:line="700" pos:column="51">.</op:operator><name pos:line="700" pos:column="52">println</name></name><argument_list pos:line="700" pos:column="59">(<argument><expr><name pos:line="700" pos:column="60">UIN</name> <op:operator pos:line="700" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="700" pos:column="66">" does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

			}</block>
			<comment type="line" pos:line="704" pos:column="25">//catch block for SQL exception</comment>
			<catch pos:line="705" pos:column="25">catch <parameter_list pos:line="705" pos:column="31">(<param><decl><type><name pos:line="705" pos:column="32">SQLException</name></type> <name pos:line="705" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="705" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="706" pos:column="33">System</name><op:operator pos:line="706" pos:column="39">.</op:operator><name pos:line="706" pos:column="40">out</name><op:operator pos:line="706" pos:column="43">.</op:operator><name pos:line="706" pos:column="44">println</name></name><argument_list pos:line="706" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="706" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="707" pos:column="33">e</name><op:operator pos:line="707" pos:column="34">.</op:operator><name pos:line="707" pos:column="35">printStackTrace</name></name><argument_list pos:line="707" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="708" pos:column="33">System</name><op:operator pos:line="708" pos:column="39">.</op:operator><name pos:line="708" pos:column="40">out</name><op:operator pos:line="708" pos:column="43">.</op:operator><name pos:line="708" pos:column="44">println</name></name><argument_list pos:line="708" pos:column="51">(<argument><expr><name pos:line="708" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>


		}</block>
		<comment type="line" pos:line="713" pos:column="17">//catch block</comment>
		<catch pos:line="714" pos:column="17">catch <parameter_list pos:line="714" pos:column="23">(<param><decl><type><name pos:line="714" pos:column="24">Exception</name></type> <name pos:line="714" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="714" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="715" pos:column="25">System</name><op:operator pos:line="715" pos:column="31">.</op:operator><name pos:line="715" pos:column="32">out</name><op:operator pos:line="715" pos:column="35">.</op:operator><name pos:line="715" pos:column="36">println</name></name><argument_list pos:line="715" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="715" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="716" pos:column="25">e</name><op:operator pos:line="716" pos:column="26">.</op:operator><name pos:line="716" pos:column="27">printStackTrace</name></name><argument_list pos:line="716" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="717" pos:column="25">System</name><op:operator pos:line="717" pos:column="31">.</op:operator><name pos:line="717" pos:column="32">out</name><op:operator pos:line="717" pos:column="35">.</op:operator><name pos:line="717" pos:column="36">println</name></name><argument_list pos:line="717" pos:column="43">(<argument><expr><name pos:line="717" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="720" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="722" pos:column="17">finally <block pos:line="722" pos:column="25">{

			<comment type="line" pos:line="724" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="727" pos:column="17">return <expr><name pos:line="727" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="730" pos:column="9">/*this function checks if the UIN has an existing application for updating
	 * 
	 * the return type is boolean 
	 * 
	 * if the application exists then return true*/</comment>
	<function><type><specifier pos:line="735" pos:column="9">public</specifier> <specifier pos:line="735" pos:column="16">static</specifier> <name pos:line="735" pos:column="23">boolean</name></type> <name pos:line="735" pos:column="31">updateApplicationCheck</name><parameter_list pos:line="735" pos:column="53">(<param><decl><type><name pos:line="735" pos:column="54">int</name></type> <name pos:line="735" pos:column="58">UIN</name></decl></param>)</parameter_list> <block pos:line="735" pos:column="63">{

		<decl_stmt><decl><type><name pos:line="737" pos:column="17">boolean</name></type> <name pos:line="737" pos:column="25">isExisting</name> <init pos:line="737" pos:column="36">= <expr><lit:literal type="boolean" pos:line="737" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="739" pos:column="17">try <block pos:line="739" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="740" pos:column="25">Connection</name></type> <name pos:line="740" pos:column="36">conn</name> <init pos:line="740" pos:column="41">= <expr><call><name><name pos:line="740" pos:column="43">Database</name><op:operator pos:line="740" pos:column="51">.</op:operator><name pos:line="740" pos:column="52">getConnection</name></name><argument_list pos:line="740" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="740" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="741" pos:column="25">String</name></type> <name pos:line="741" pos:column="32">SQLPeopleSelect</name> <init pos:line="741" pos:column="48">= <expr><lit:literal type="string" pos:line="741" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="743" pos:column="25">try <block pos:line="743" pos:column="29">{
				<comment type="line" pos:line="744" pos:column="33">//write the query</comment>
				<expr_stmt><expr><name pos:line="745" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="745" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="745" pos:column="51">"Select ApplicantUIN From applicationdetails where ApplicantUIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="746" pos:column="33">PreparedStatement</name></type> <name pos:line="746" pos:column="51">stmt</name> <init pos:line="746" pos:column="56">= <expr><call><name><name pos:line="746" pos:column="58">conn</name><op:operator pos:line="746" pos:column="62">.</op:operator><name pos:line="746" pos:column="63">prepareStatement</name></name><argument_list pos:line="746" pos:column="79">(<argument><expr><name pos:line="746" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="747" pos:column="33">stmt</name><op:operator pos:line="747" pos:column="37">.</op:operator><name pos:line="747" pos:column="38">setInt</name></name><argument_list pos:line="747" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="747" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="747" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="747" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="748" pos:column="33">ResultSet</name></type> <name pos:line="748" pos:column="43">rs</name> <init pos:line="748" pos:column="46">= <expr><call><name><name pos:line="748" pos:column="48">stmt</name><op:operator pos:line="748" pos:column="52">.</op:operator><name pos:line="748" pos:column="53">executeQuery</name></name><argument_list pos:line="748" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="748" pos:column="68">//execute the query</comment>

				<if pos:line="750" pos:column="33">if <condition pos:line="750" pos:column="36">(<expr><call><name><name pos:line="750" pos:column="37">rs</name><op:operator pos:line="750" pos:column="39">.</op:operator><name pos:line="750" pos:column="40">first</name></name><argument_list pos:line="750" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="750" pos:column="48"> <block pos:line="750" pos:column="49">{
					<comment type="line" pos:line="751" pos:column="41">//if the application then return true</comment>
					<return pos:line="752" pos:column="41">return <expr><lit:literal type="boolean" pos:line="752" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>

				<else pos:line="755" pos:column="33">else <block pos:line="755" pos:column="38">{
					<comment type="line" pos:line="756" pos:column="41">//else the UIN application does not exist</comment>
					<expr_stmt><expr><call><name><name pos:line="757" pos:column="41">System</name><op:operator pos:line="757" pos:column="47">.</op:operator><name pos:line="757" pos:column="48">out</name><op:operator pos:line="757" pos:column="51">.</op:operator><name pos:line="757" pos:column="52">println</name></name><argument_list pos:line="757" pos:column="59">(<argument><expr><name pos:line="757" pos:column="60">UIN</name> <op:operator pos:line="757" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="757" pos:column="66">" application does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="762" pos:column="25">//catc the SQL exception</comment>
			<catch pos:line="763" pos:column="25">catch <parameter_list pos:line="763" pos:column="31">(<param><decl><type><name pos:line="763" pos:column="32">SQLException</name></type> <name pos:line="763" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="763" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="764" pos:column="33">System</name><op:operator pos:line="764" pos:column="39">.</op:operator><name pos:line="764" pos:column="40">out</name><op:operator pos:line="764" pos:column="43">.</op:operator><name pos:line="764" pos:column="44">println</name></name><argument_list pos:line="764" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="764" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="765" pos:column="33">e</name><op:operator pos:line="765" pos:column="34">.</op:operator><name pos:line="765" pos:column="35">printStackTrace</name></name><argument_list pos:line="765" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="766" pos:column="33">System</name><op:operator pos:line="766" pos:column="39">.</op:operator><name pos:line="766" pos:column="40">out</name><op:operator pos:line="766" pos:column="43">.</op:operator><name pos:line="766" pos:column="44">println</name></name><argument_list pos:line="766" pos:column="51">(<argument><expr><name pos:line="766" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="770" pos:column="17">//catch the exception</comment>
		<catch pos:line="771" pos:column="17">catch <parameter_list pos:line="771" pos:column="23">(<param><decl><type><name pos:line="771" pos:column="24">Exception</name></type> <name pos:line="771" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="771" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="772" pos:column="25">System</name><op:operator pos:line="772" pos:column="31">.</op:operator><name pos:line="772" pos:column="32">out</name><op:operator pos:line="772" pos:column="35">.</op:operator><name pos:line="772" pos:column="36">println</name></name><argument_list pos:line="772" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="772" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="773" pos:column="25">e</name><op:operator pos:line="773" pos:column="26">.</op:operator><name pos:line="773" pos:column="27">printStackTrace</name></name><argument_list pos:line="773" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="774" pos:column="25">System</name><op:operator pos:line="774" pos:column="31">.</op:operator><name pos:line="774" pos:column="32">out</name><op:operator pos:line="774" pos:column="35">.</op:operator><name pos:line="774" pos:column="36">println</name></name><argument_list pos:line="774" pos:column="43">(<argument><expr><name pos:line="774" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="778" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="780" pos:column="17">finally <block pos:line="780" pos:column="25">{

			<comment type="line" pos:line="782" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="785" pos:column="17">return <expr><name pos:line="785" pos:column="24">isExisting</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="788" pos:column="9">/*
	 * All job application class functions are run and tested locally in the main class for specific executions
	 */</comment>
	<function><type><specifier pos:line="791" pos:column="9">public</specifier> <specifier pos:line="791" pos:column="16">static</specifier> <name pos:line="791" pos:column="23">void</name></type> <name pos:line="791" pos:column="28">main</name><parameter_list pos:line="791" pos:column="32">(<param><decl><type><name><name pos:line="791" pos:column="33">String</name><index pos:line="791" pos:column="39">[]</index></name></type> <name pos:line="791" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="791" pos:column="48">{

	}</block></function>

}</block></class>
</unit>
