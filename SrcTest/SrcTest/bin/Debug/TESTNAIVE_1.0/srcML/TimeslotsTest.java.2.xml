<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\TimeslotsTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">org</name><op:operator pos:line="4" pos:column="11">.</op:operator><name pos:line="4" pos:column="12">junit</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Before</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">org</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">junit</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Test</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">umas</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">code</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="8" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">TimeslotsTest</name> <block pos:line="10" pos:column="28">{

	<function><type><annotation pos:line="12" pos:column="9">@<name pos:line="12" pos:column="10">Before</name></annotation>
	<specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">setUp</name><parameter_list pos:line="13" pos:column="26">()</parameter_list> <throws pos:line="13" pos:column="29">throws <argument><expr><name pos:line="13" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="13" pos:column="46">{
	}</block></function>

	<function><type><annotation pos:line="16" pos:column="9">@<name pos:line="16" pos:column="10">Test</name></annotation>
	<specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">final</specifier> <name pos:line="17" pos:column="22">void</name></type> <name pos:line="17" pos:column="27">testTimeslotsInt</name><parameter_list pos:line="17" pos:column="43">()</parameter_list> <block pos:line="17" pos:column="46">{
		<comment type="block" pos:line="18" pos:column="17">/*
		 * Initializing existing time slot
		 */</comment>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">Timeslots</name></type> <name pos:line="21" pos:column="27">t</name> <init pos:line="21" pos:column="29">= <expr><op:operator pos:line="21" pos:column="31">new</op:operator> <call><name pos:line="21" pos:column="35">Timeslots</name><argument_list pos:line="21" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="45">16</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">assertNotNull</name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="25" pos:column="9">@<name pos:line="25" pos:column="10">Test</name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">expected</name> <op:operator pos:line="25" pos:column="24">=</op:operator> <name><name pos:line="25" pos:column="26">IllegalArgumentException</name><op:operator pos:line="25" pos:column="50">.</op:operator><name pos:line="25" pos:column="51">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">final</specifier> <name pos:line="26" pos:column="22">void</name></type> <name pos:line="26" pos:column="27">testTimeslotsInt2</name><parameter_list pos:line="26" pos:column="44">()</parameter_list> <block pos:line="26" pos:column="47">{
		<comment type="block" pos:line="27" pos:column="17">/*
		 * initializing non existing time slot
		 */</comment>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">Timeslots</name></type> <name pos:line="30" pos:column="27">t</name> <init pos:line="30" pos:column="29">= <expr><op:operator pos:line="30" pos:column="31">new</op:operator> <call><name pos:line="30" pos:column="35">Timeslots</name><argument_list pos:line="30" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="45">1454309</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="33" pos:column="9">@<name pos:line="33" pos:column="10">Test</name></annotation>
	<specifier pos:line="34" pos:column="9">public</specifier> <specifier pos:line="34" pos:column="16">final</specifier> <name pos:line="34" pos:column="22">void</name></type> <name pos:line="34" pos:column="27">testTimeslotsIntInt</name><parameter_list pos:line="34" pos:column="46">()</parameter_list> <block pos:line="34" pos:column="49">{
		<comment type="block" pos:line="35" pos:column="17">/*
		 * Initialize a time slot using start and end hours
		 * If the time slot does not exist error is throw
		 * Here passing valid arguments and testing
		 */</comment>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">Timeslots</name></type> <name pos:line="40" pos:column="27">t</name> <init pos:line="40" pos:column="29">= <expr><op:operator pos:line="40" pos:column="31">new</op:operator> <call><name pos:line="40" pos:column="35">Timeslots</name><argument_list pos:line="40" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="45">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="40" pos:column="49">11</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">assertNotNull</name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="44" pos:column="9">@<name pos:line="44" pos:column="10">Test</name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">expected</name> <op:operator pos:line="44" pos:column="24">=</op:operator> <name><name pos:line="44" pos:column="26">IllegalArgumentException</name><op:operator pos:line="44" pos:column="50">.</op:operator><name pos:line="44" pos:column="51">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">final</specifier> <name pos:line="45" pos:column="22">void</name></type> <name pos:line="45" pos:column="27">testTimeslotsIntInt2</name><parameter_list pos:line="45" pos:column="47">()</parameter_list> <block pos:line="45" pos:column="50">{
		<comment type="block" pos:line="46" pos:column="17">/*
		 * Initialize a time slot using start and end hours
		 * If the time slot does not exist error is throw
		 * Here passing invalid arguments and testing
		 */</comment>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">Timeslots</name></type> <name pos:line="51" pos:column="27">t</name> <init pos:line="51" pos:column="29">= <expr><op:operator pos:line="51" pos:column="31">new</op:operator> <call><name pos:line="51" pos:column="35">Timeslots</name><argument_list pos:line="51" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="51" pos:column="45">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="51" pos:column="49">16</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="54" pos:column="9">@<name pos:line="54" pos:column="10">Test</name><argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">expected</name> <op:operator pos:line="54" pos:column="24">=</op:operator> <name><name pos:line="54" pos:column="26">IllegalArgumentException</name><op:operator pos:line="54" pos:column="50">.</op:operator><name pos:line="54" pos:column="51">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="55" pos:column="9">public</specifier> <specifier pos:line="55" pos:column="16">final</specifier> <name pos:line="55" pos:column="22">void</name></type> <name pos:line="55" pos:column="27">testAddTimeSlot</name><parameter_list pos:line="55" pos:column="42">()</parameter_list> <block pos:line="55" pos:column="45">{
		<comment type="block" pos:line="56" pos:column="17">/*
		 * Adding a new time slot
		 * The code would not add duplicate time slots
		 * Hence will fail if same slot is added multiple times
		 * Therefore testing that the duplicate must not be added
		 * Hence the test should throw a illegal argument exception
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="63" pos:column="17">Timeslots</name><op:operator pos:line="63" pos:column="26">.</op:operator><name pos:line="63" pos:column="27">addTimeSlot</name></name><argument_list pos:line="63" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="39">13</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="63" pos:column="43">15</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="63" pos:column="47">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="66" pos:column="9">@<name pos:line="66" pos:column="10">Test</name></annotation>
	<specifier pos:line="67" pos:column="9">public</specifier> <specifier pos:line="67" pos:column="16">final</specifier> <name pos:line="67" pos:column="22">void</name></type> <name pos:line="67" pos:column="27">testAreHoursCorrect</name><parameter_list pos:line="67" pos:column="46">()</parameter_list> <block pos:line="67" pos:column="49">{
		<comment type="block" pos:line="68" pos:column="17">/*
		 * Checking for one hour and two hour time slots which are valid
		 */</comment>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">boolean</name></type> <name pos:line="71" pos:column="25">check</name> <init pos:line="71" pos:column="31">= <expr><call><name><name pos:line="71" pos:column="33">Timeslots</name><op:operator pos:line="71" pos:column="42">.</op:operator><name pos:line="71" pos:column="43">areHoursCorrect</name></name><argument_list pos:line="71" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="59">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="63">11</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="72" pos:column="17">boolean</name></type> <name pos:line="72" pos:column="25">check1</name> <init pos:line="72" pos:column="32">= <expr><call><name><name pos:line="72" pos:column="34">Timeslots</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">areHoursCorrect</name></name><argument_list pos:line="72" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="60">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="72" pos:column="64">12</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">assertTrue</name><argument_list pos:line="74" pos:column="27">(<argument><expr><name pos:line="74" pos:column="28">check</name> <op:operator pos:line="74" pos:column="34">&amp;&amp;</op:operator> <name pos:line="74" pos:column="37">check1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="77" pos:column="9">@<name pos:line="77" pos:column="10">Test</name></annotation>
	<specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">final</specifier> <name pos:line="78" pos:column="22">void</name></type> <name pos:line="78" pos:column="27">testAreHoursCorrect2</name><parameter_list pos:line="78" pos:column="47">()</parameter_list> <block pos:line="78" pos:column="50">{
		<comment type="block" pos:line="79" pos:column="17">/*
		 * Checking for invalid hours i.e more than two hours time slots
		 */</comment>
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">boolean</name></type> <name pos:line="82" pos:column="25">check</name> <init pos:line="82" pos:column="31">= <expr><call><name><name pos:line="82" pos:column="33">Timeslots</name><op:operator pos:line="82" pos:column="42">.</op:operator><name pos:line="82" pos:column="43">areHoursCorrect</name></name><argument_list pos:line="82" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="59">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="82" pos:column="63">20</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name pos:line="84" pos:column="17">assertTrue</name><argument_list pos:line="84" pos:column="27">(<argument><expr><op:operator pos:line="84" pos:column="28">!</op:operator><name pos:line="84" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="87" pos:column="9">@<name pos:line="87" pos:column="10">Test</name></annotation>
	<specifier pos:line="88" pos:column="9">public</specifier> <specifier pos:line="88" pos:column="16">final</specifier> <name pos:line="88" pos:column="22">void</name></type> <name pos:line="88" pos:column="27">testIsConflict</name><parameter_list pos:line="88" pos:column="41">()</parameter_list> <block pos:line="88" pos:column="44">{
		<comment type="block" pos:line="89" pos:column="17">/*
		 * Entering non conflicting times
		 */</comment>
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">boolean</name></type> <name pos:line="92" pos:column="25">check</name> <init pos:line="92" pos:column="31">= <expr><call><name><name pos:line="92" pos:column="33">Timeslots</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">isConflict</name></name><argument_list pos:line="92" pos:column="53">(<argument><expr><op:operator pos:line="92" pos:column="54">new</op:operator> <call><name pos:line="92" pos:column="58">Timeslots</name><argument_list pos:line="92" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="68">16</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="92" pos:column="73">new</op:operator> <call><name pos:line="92" pos:column="77">Timeslots</name><argument_list pos:line="92" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="87">17</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">assertTrue</name><argument_list pos:line="93" pos:column="27">(<argument><expr><op:operator pos:line="93" pos:column="28">!</op:operator><name pos:line="93" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<function><type><annotation pos:line="97" pos:column="9">@<name pos:line="97" pos:column="10">Test</name></annotation>
	<specifier pos:line="98" pos:column="9">public</specifier> <specifier pos:line="98" pos:column="16">final</specifier> <name pos:line="98" pos:column="22">void</name></type> <name pos:line="98" pos:column="27">testIsConflict2</name><parameter_list pos:line="98" pos:column="42">()</parameter_list> <block pos:line="98" pos:column="45">{
		<comment type="block" pos:line="99" pos:column="17">/*
		 * Entering conflicting times, checking if the time slot conflicts with self
		 */</comment>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">boolean</name></type> <name pos:line="102" pos:column="25">check</name> <init pos:line="102" pos:column="31">= <expr><call><name><name pos:line="102" pos:column="33">Timeslots</name><op:operator pos:line="102" pos:column="42">.</op:operator><name pos:line="102" pos:column="43">isConflict</name></name><argument_list pos:line="102" pos:column="53">(<argument><expr><op:operator pos:line="102" pos:column="54">new</op:operator> <call><name pos:line="102" pos:column="58">Timeslots</name><argument_list pos:line="102" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="68">16</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="102" pos:column="73">new</op:operator> <call><name pos:line="102" pos:column="77">Timeslots</name><argument_list pos:line="102" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="87">16</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">assertTrue</name><argument_list pos:line="103" pos:column="27">(<argument><expr><name pos:line="103" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="106" pos:column="9">@<name pos:line="106" pos:column="10">Test</name></annotation>
	<specifier pos:line="107" pos:column="9">public</specifier> <specifier pos:line="107" pos:column="16">final</specifier> <name pos:line="107" pos:column="22">void</name></type> <name pos:line="107" pos:column="27">testIsInBetween</name><parameter_list pos:line="107" pos:column="42">()</parameter_list> <block pos:line="107" pos:column="45">{
		<comment type="block" pos:line="108" pos:column="17">/*
		 * Entering time slot which is in between the other values (Conflicting)
		 * Here 11 is between 10 and 12 is checked
		 */</comment>
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">boolean</name></type> <name pos:line="112" pos:column="25">check</name> <init pos:line="112" pos:column="31">= <expr><call><name><name pos:line="112" pos:column="33">Timeslots</name><op:operator pos:line="112" pos:column="42">.</op:operator><name pos:line="112" pos:column="43">isInBetween</name></name><argument_list pos:line="112" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="112" pos:column="55">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="112" pos:column="59">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="112" pos:column="63">11</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">assertTrue</name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="116" pos:column="9">@<name pos:line="116" pos:column="10">Test</name></annotation>
	<specifier pos:line="117" pos:column="9">public</specifier> <specifier pos:line="117" pos:column="16">final</specifier> <name pos:line="117" pos:column="22">void</name></type> <name pos:line="117" pos:column="27">testIsInBetween2</name><parameter_list pos:line="117" pos:column="43">()</parameter_list> <block pos:line="117" pos:column="46">{
		<comment type="block" pos:line="118" pos:column="17">/*
		 * Entering time slot which is in between the other values (Conflicting)
		 * Here 13 is not between 10 and 12 is checked
		 */</comment>
		<decl_stmt><decl><type><name pos:line="122" pos:column="17">boolean</name></type> <name pos:line="122" pos:column="25">check</name> <init pos:line="122" pos:column="31">= <expr><call><name><name pos:line="122" pos:column="33">Timeslots</name><op:operator pos:line="122" pos:column="42">.</op:operator><name pos:line="122" pos:column="43">isInBetween</name></name><argument_list pos:line="122" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="55">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="122" pos:column="59">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="122" pos:column="63">13</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">assertTrue</name><argument_list pos:line="123" pos:column="27">(<argument><expr><op:operator pos:line="123" pos:column="28">!</op:operator><name pos:line="123" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="126" pos:column="9">@<name pos:line="126" pos:column="10">Test</name></annotation>
	<specifier pos:line="127" pos:column="9">public</specifier> <specifier pos:line="127" pos:column="16">final</specifier> <name pos:line="127" pos:column="22">void</name></type> <name pos:line="127" pos:column="27">testIsTypeCorrect</name><parameter_list pos:line="127" pos:column="44">()</parameter_list> <block pos:line="127" pos:column="47">{
		<comment type="block" pos:line="128" pos:column="17">/*
		 * Testing if returns true for time slot types 1 and 2 which are valid time slots
		 * One hour time slot is type 1
		 * Two hour time slot is type 2
		 * Valid entries are passed into functions and checked
		 */</comment>
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">boolean</name></type> <name pos:line="134" pos:column="25">check</name> <init pos:line="134" pos:column="31">= <expr><call><name><name pos:line="134" pos:column="33">Timeslots</name><op:operator pos:line="134" pos:column="42">.</op:operator><name pos:line="134" pos:column="43">isTypeCorrect</name></name><argument_list pos:line="134" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="57">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="61">11</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="135" pos:column="17">boolean</name></type> <name pos:line="135" pos:column="25">check1</name> <init pos:line="135" pos:column="32">= <expr><call><name><name pos:line="135" pos:column="34">Timeslots</name><op:operator pos:line="135" pos:column="43">.</op:operator><name pos:line="135" pos:column="44">isTypeCorrect</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="135" pos:column="58">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="135" pos:column="62">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="135" pos:column="66">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">assertTrue</name><argument_list pos:line="136" pos:column="27">(<argument><expr><name pos:line="136" pos:column="28">check</name> <op:operator pos:line="136" pos:column="34">&amp;&amp;</op:operator> <name pos:line="136" pos:column="37">check1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<function><type><annotation pos:line="140" pos:column="9">@<name pos:line="140" pos:column="10">Test</name></annotation>
	<specifier pos:line="141" pos:column="9">public</specifier> <specifier pos:line="141" pos:column="16">final</specifier> <name pos:line="141" pos:column="22">void</name></type> <name pos:line="141" pos:column="27">testIsTypeCorrect2</name><parameter_list pos:line="141" pos:column="45">()</parameter_list> <block pos:line="141" pos:column="48">{
		<comment type="block" pos:line="142" pos:column="17">/*
		 * Testing if returns true for time slot types 1 and 2 which are valid time slots
		 * One hour time slot is passed as type 2 (returns false)
		 * Two hour time slot is type as type 1 (returns false)
		 * Invalid entries are passed into functions and checked
		 */</comment>
		<decl_stmt><decl><type><name pos:line="148" pos:column="17">boolean</name></type> <name pos:line="148" pos:column="25">check</name> <init pos:line="148" pos:column="31">= <expr><call><name><name pos:line="148" pos:column="33">Timeslots</name><op:operator pos:line="148" pos:column="42">.</op:operator><name pos:line="148" pos:column="43">isTypeCorrect</name></name><argument_list pos:line="148" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="148" pos:column="57">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="148" pos:column="61">11</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="148" pos:column="65">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="149" pos:column="17">boolean</name></type> <name pos:line="149" pos:column="25">check1</name> <init pos:line="149" pos:column="32">= <expr><call><name><name pos:line="149" pos:column="34">Timeslots</name><op:operator pos:line="149" pos:column="43">.</op:operator><name pos:line="149" pos:column="44">isTypeCorrect</name></name><argument_list pos:line="149" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="149" pos:column="58">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="149" pos:column="62">12</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="149" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="150" pos:column="17">assertTrue</name><argument_list pos:line="150" pos:column="27">(<argument><expr><op:operator pos:line="150" pos:column="28">!</op:operator><name pos:line="150" pos:column="29">check</name> <op:operator pos:line="150" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="150" pos:column="38">!</op:operator><name pos:line="150" pos:column="39">check1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
