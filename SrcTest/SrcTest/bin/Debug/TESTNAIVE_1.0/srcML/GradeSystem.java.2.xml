<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\GradeSystem.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="line" pos:line="4" pos:column="1">//import java.lang.annotation.ElementType;</comment>
<comment type="line" pos:line="5" pos:column="1">//import java.lang.annotation.Retention;</comment>
<comment type="line" pos:line="6" pos:column="1">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line" pos:line="7" pos:column="1">//import java.lang.annotation.Target;</comment>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>

<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">GradeSystem</name> <block pos:line="13" pos:column="26">{

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">String</name></type> <name pos:line="15" pos:column="16">grade</name></decl>;</decl_stmt> <comment type="line" pos:line="15" pos:column="23">// A+, A, A-, B+, B, B-, C</comment>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int</name></type> <name pos:line="16" pos:column="13">gradeLevel</name></decl>;</decl_stmt> <comment type="line" pos:line="16" pos:column="25">// 1, 2, 3, 4, 5, 6, 7</comment>

<comment type="line" pos:line="18" pos:column="1">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line" pos:line="19" pos:column="1">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line" pos:line="20" pos:column="1">//	public @interface DBAnnotation {</comment>
<comment type="line" pos:line="21" pos:column="1">//	 String[] variable () default "";</comment>
<comment type="line" pos:line="22" pos:column="1">//	 String[] table () default "";</comment>
<comment type="line" pos:line="23" pos:column="1">//	 String[] column () default "";</comment>
<comment type="line" pos:line="24" pos:column="1">//	 boolean[] isSource () default false; </comment>
<comment type="line" pos:line="25" pos:column="1">//	}</comment>
<comment type="line" pos:line="26" pos:column="1">//	</comment>
	<function><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">String</name></type> <name pos:line="27" pos:column="23">getGrade</name><parameter_list pos:line="27" pos:column="31">()</parameter_list> <block pos:line="27" pos:column="34">{
		<return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">grade</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">setGrade</name><parameter_list pos:line="31" pos:column="29">(<param><decl><type><name pos:line="31" pos:column="30">String</name></type> <name pos:line="31" pos:column="37">grade</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">this</name><op:operator pos:line="32" pos:column="21">.</op:operator><name pos:line="32" pos:column="22">grade</name></name> <op:operator pos:line="32" pos:column="28">=</op:operator> <name pos:line="32" pos:column="30">grade</name></expr>;</expr_stmt>
	}</block></function>

	
	<function><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">int</name></type> <name pos:line="36" pos:column="20">getGradeLevel</name><parameter_list pos:line="36" pos:column="33">()</parameter_list> <block pos:line="36" pos:column="36">{
		<return pos:line="37" pos:column="17">return <expr><name pos:line="37" pos:column="24">gradeLevel</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">void</name></type> <name pos:line="40" pos:column="21">setGradeLevel</name><parameter_list pos:line="40" pos:column="34">(<param><decl><type><name pos:line="40" pos:column="35">int</name></type> <name pos:line="40" pos:column="39">gradeLevel</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="51">{
		<expr_stmt><expr><name><name pos:line="41" pos:column="17">this</name><op:operator pos:line="41" pos:column="21">.</op:operator><name pos:line="41" pos:column="22">gradeLevel</name></name> <op:operator pos:line="41" pos:column="33">=</op:operator> <name pos:line="41" pos:column="35">gradeLevel</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="44" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">GradeSystem</name><parameter_list pos:line="45" pos:column="27">(<param><decl><type><name pos:line="45" pos:column="28">String</name></type> <name pos:line="45" pos:column="35">grade</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">super</name><argument_list pos:line="46" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">this</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">grade</name></name> <op:operator pos:line="47" pos:column="28">=</op:operator> <name pos:line="47" pos:column="30">grade</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="50" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">GradeSystem</name><parameter_list pos:line="51" pos:column="27">(<param><decl><type><name pos:line="51" pos:column="28">String</name></type> <name pos:line="51" pos:column="35">grade</name></decl></param>,<param><decl><type><name pos:line="51" pos:column="41">int</name></type> <name pos:line="51" pos:column="45">gradeLevel</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="57">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">super</name><argument_list pos:line="52" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="53" pos:column="17">this</name><op:operator pos:line="53" pos:column="21">.</op:operator><name pos:line="53" pos:column="22">grade</name></name> <op:operator pos:line="53" pos:column="28">=</op:operator> <name pos:line="53" pos:column="30">grade</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">this</name><op:operator pos:line="54" pos:column="21">.</op:operator><name pos:line="54" pos:column="22">gradeLevel</name></name> <op:operator pos:line="54" pos:column="33">=</op:operator> <name pos:line="54" pos:column="35">gradeLevel</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="57" pos:column="9">// To insert a new typr of grade to the grade system </comment>
	<function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">boolean</name></type> <name pos:line="58" pos:column="24">insertNewGrade</name><parameter_list pos:line="58" pos:column="38">()</parameter_list><block pos:line="58" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">boolean</name></type> <name pos:line="59" pos:column="25">newGradeInserted</name> <init pos:line="59" pos:column="42">= <expr><lit:literal type="boolean" pos:line="59" pos:column="44">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">String</name></type> <name pos:line="61" pos:column="24">grade</name> <init pos:line="61" pos:column="30">= <expr><call><name><name pos:line="61" pos:column="32">this</name><op:operator pos:line="61" pos:column="36">.</op:operator><name pos:line="61" pos:column="37">getGrade</name></name><argument_list pos:line="61" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">int</name></type> <name pos:line="62" pos:column="21">gradeLevel</name> <init pos:line="62" pos:column="32">= <expr><call><name><name pos:line="62" pos:column="34">this</name><op:operator pos:line="62" pos:column="38">.</op:operator><name pos:line="62" pos:column="39">getGradeLevel</name></name><argument_list pos:line="62" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="64" pos:column="17">boolean</name></type> <name pos:line="64" pos:column="25">isGradePresent</name> <init pos:line="64" pos:column="40">= <expr><call><name><name pos:line="64" pos:column="42">this</name><op:operator pos:line="64" pos:column="46">.</op:operator><name pos:line="64" pos:column="47">isGradePresent</name></name><argument_list pos:line="64" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="65" pos:column="17">if<condition pos:line="65" pos:column="19">(<expr><name pos:line="65" pos:column="20">isGradePresent</name> <op:operator pos:line="65" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="65" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="65" pos:column="43">{
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">System</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">out</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">println</name></name><argument_list pos:line="66" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="44">"This grade is already present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="67" pos:column="19">else<block pos:line="67" pos:column="23">{
<comment type="line" pos:line="68" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="69" pos:column="1">//					variable = {"grade","gradeLevel"},  </comment>
<comment type="line" pos:line="70" pos:column="1">//					table = "gradingsystem", </comment>
<comment type="line" pos:line="71" pos:column="1">//					column = {"Grade","GradeLevel"}, </comment>
<comment type="line" pos:line="72" pos:column="1">//					isSource = false)</comment>
			
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">String</name></type> <name pos:line="74" pos:column="32">SQLGradeInsert</name> <init pos:line="74" pos:column="47">= <expr><lit:literal type="string" pos:line="74" pos:column="49">"INSERT INTO gradingsystem VALUES(?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="76" pos:column="25">try <block pos:line="76" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="77" pos:column="33">Connection</name></type> <name pos:line="77" pos:column="44">conn</name> <init pos:line="77" pos:column="49">= <expr><call><name><name pos:line="77" pos:column="51">Database</name><op:operator pos:line="77" pos:column="59">.</op:operator><name pos:line="77" pos:column="60">getConnection</name></name><argument_list pos:line="77" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="78" pos:column="33">try <block pos:line="78" pos:column="37">{
					<if pos:line="79" pos:column="41">if <condition pos:line="79" pos:column="44">(<expr><name pos:line="79" pos:column="45">conn</name> <op:operator pos:line="79" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="79" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="79" pos:column="58"> <block pos:line="79" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="80" pos:column="49">PreparedStatement</name></type> <name pos:line="80" pos:column="67">statement</name> <init pos:line="80" pos:column="77">= <expr><call><name><name pos:line="80" pos:column="79">conn</name><op:operator pos:line="80" pos:column="83">.</op:operator><name pos:line="80" pos:column="84">prepareStatement</name></name><argument_list pos:line="80" pos:column="100">(<argument><expr><name pos:line="80" pos:column="101">SQLGradeInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="81" pos:column="49">DBAnnotation</name><op:operator pos:line="81" pos:column="61">.</op:operator><name pos:line="81" pos:column="62">annoate</name></name><argument_list pos:line="81" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="70">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="79">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="96">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="81" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="82" pos:column="49">statement</name><op:operator pos:line="82" pos:column="58">.</op:operator><name pos:line="82" pos:column="59">setString</name></name><argument_list pos:line="82" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="72">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="83" pos:column="49">DBAnnotation</name><op:operator pos:line="83" pos:column="61">.</op:operator><name pos:line="83" pos:column="62">annoate</name></name><argument_list pos:line="83" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="70">"gradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="84">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="101">"GradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="83" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="84" pos:column="49">statement</name><op:operator pos:line="84" pos:column="58">.</op:operator><name pos:line="84" pos:column="59">setInt</name></name><argument_list pos:line="84" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="84" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="69">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="86" pos:column="49">statement</name><op:operator pos:line="86" pos:column="58">.</op:operator><name pos:line="86" pos:column="59">executeUpdate</name></name><argument_list pos:line="86" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="87" pos:column="49">Database</name><op:operator pos:line="87" pos:column="57">.</op:operator><name pos:line="87" pos:column="58">commitTransaction</name></name><argument_list pos:line="87" pos:column="75">(<argument><expr><name pos:line="87" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="88" pos:column="49">newGradeInserted</name> <op:operator pos:line="88" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="88" pos:column="68">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>	
				}</block> <catch pos:line="90" pos:column="35">catch <parameter_list pos:line="90" pos:column="41">(<param><decl><type><name pos:line="90" pos:column="42">SQLException</name></type> <name pos:line="90" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="91" pos:column="41">System</name><op:operator pos:line="91" pos:column="47">.</op:operator><name pos:line="91" pos:column="48">out</name><op:operator pos:line="91" pos:column="51">.</op:operator><name pos:line="91" pos:column="52">println</name></name><argument_list pos:line="91" pos:column="59">(<argument><expr><name pos:line="91" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">Database</name><op:operator pos:line="92" pos:column="49">.</op:operator><name pos:line="92" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="92" pos:column="69">(<argument><expr><name pos:line="92" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="95" pos:column="27">catch <parameter_list pos:line="95" pos:column="33">(<param><decl><type><name pos:line="95" pos:column="34">Exception</name></type> <name pos:line="95" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="95" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="96" pos:column="33">System</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">out</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">println</name></name><argument_list pos:line="96" pos:column="51">(<argument><expr><name pos:line="96" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>
		
				
		
		<return pos:line="102" pos:column="17">return <expr><name pos:line="102" pos:column="24">newGradeInserted</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="105" pos:column="9">// This function checks whether a grade is present or not</comment>
	<function><type><specifier pos:line="106" pos:column="9">public</specifier> <name pos:line="106" pos:column="16">boolean</name></type> <name pos:line="106" pos:column="24">isGradePresent</name><parameter_list pos:line="106" pos:column="38">()</parameter_list><block pos:line="106" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="107" pos:column="17">boolean</name></type> <name pos:line="107" pos:column="25">isGradePresent</name> <init pos:line="107" pos:column="40">= <expr><lit:literal type="boolean" pos:line="107" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="109" pos:column="17">String</name></type> <name pos:line="109" pos:column="24">grade</name> <init pos:line="109" pos:column="30">= <expr><call><name><name pos:line="109" pos:column="32">this</name><op:operator pos:line="109" pos:column="36">.</op:operator><name pos:line="109" pos:column="37">getGrade</name></name><argument_list pos:line="109" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="110" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="111" pos:column="1">//				variable = "tableGrade",  </comment>
<comment type="line" pos:line="112" pos:column="1">//				table = "gradingsystem", </comment>
<comment type="line" pos:line="113" pos:column="1">//				column = "Grade", </comment>
<comment type="line" pos:line="114" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="116" pos:column="17">String</name></type> <name pos:line="116" pos:column="24">SQLGradeSelect</name> <init pos:line="116" pos:column="39">= <expr><lit:literal type="string" pos:line="116" pos:column="41">"SELECT Grade FROM gradingsystem;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="118" pos:column="17">try <block pos:line="118" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">Connection</name></type> <name pos:line="119" pos:column="36">conn</name> <init pos:line="119" pos:column="41">= <expr><call><name><name pos:line="119" pos:column="43">Database</name><op:operator pos:line="119" pos:column="51">.</op:operator><name pos:line="119" pos:column="52">getConnection</name></name><argument_list pos:line="119" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="120" pos:column="25">try <block pos:line="120" pos:column="29">{
				<if pos:line="121" pos:column="33">if <condition pos:line="121" pos:column="36">(<expr><name pos:line="121" pos:column="37">conn</name> <op:operator pos:line="121" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="121" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="121" pos:column="50"> <block pos:line="121" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="122" pos:column="41">PreparedStatement</name></type> <name pos:line="122" pos:column="59">statement</name> <init pos:line="122" pos:column="69">= <expr><call><name><name pos:line="122" pos:column="71">conn</name><op:operator pos:line="122" pos:column="75">.</op:operator><name pos:line="122" pos:column="76">prepareStatement</name></name><argument_list pos:line="122" pos:column="92">(<argument><expr><name pos:line="122" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="123" pos:column="41">ResultSet</name></type> <name pos:line="123" pos:column="51">rs</name> <init pos:line="123" pos:column="54">= <expr><call><name><name pos:line="123" pos:column="56">statement</name><op:operator pos:line="123" pos:column="65">.</op:operator><name pos:line="123" pos:column="66">executeQuery</name></name><argument_list pos:line="123" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="124" pos:column="41">while <condition pos:line="124" pos:column="47">(<expr><call><name><name pos:line="124" pos:column="48">rs</name><op:operator pos:line="124" pos:column="50">.</op:operator><name pos:line="124" pos:column="51">next</name></name><argument_list pos:line="124" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="124" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="125" pos:column="49">DBAnnotation</name><op:operator pos:line="125" pos:column="61">.</op:operator><name pos:line="125" pos:column="62">annoate</name></name><argument_list pos:line="125" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="70">"tableGrade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="84">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="101">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="125" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="126" pos:column="49">String</name></type> <name pos:line="126" pos:column="56">tableGrade</name> <init pos:line="126" pos:column="67">= <expr><call><name><name pos:line="126" pos:column="69">rs</name><op:operator pos:line="126" pos:column="71">.</op:operator><name pos:line="126" pos:column="72">getString</name></name><argument_list pos:line="126" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="82">"Grade"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="127" pos:column="49">if<condition pos:line="127" pos:column="51">(<expr><call><name><name pos:line="127" pos:column="52">tableGrade</name><op:operator pos:line="127" pos:column="62">.</op:operator><name pos:line="127" pos:column="63">equals</name></name><argument_list pos:line="127" pos:column="69">(<argument><expr><name pos:line="127" pos:column="70">grade</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="127" pos:column="77">{
							<expr_stmt><expr><name pos:line="128" pos:column="57">isGradePresent</name> <op:operator pos:line="128" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="128" pos:column="74">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="129" pos:column="57">break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="133" pos:column="27">catch <parameter_list pos:line="133" pos:column="33">(<param><decl><type><name pos:line="133" pos:column="34">SQLException</name></type> <name pos:line="133" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="133" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">System</name><op:operator pos:line="134" pos:column="39">.</op:operator><name pos:line="134" pos:column="40">out</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">println</name></name><argument_list pos:line="134" pos:column="51">(<argument><expr><name pos:line="134" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="137" pos:column="19">catch <parameter_list pos:line="137" pos:column="25">(<param><decl><type><name pos:line="137" pos:column="26">Exception</name></type> <name pos:line="137" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="138" pos:column="25">System</name><op:operator pos:line="138" pos:column="31">.</op:operator><name pos:line="138" pos:column="32">out</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">println</name></name><argument_list pos:line="138" pos:column="43">(<argument><expr><name pos:line="138" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="141" pos:column="17">return <expr><name pos:line="141" pos:column="24">isGradePresent</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="144" pos:column="9">// Checks whether a grade level is present or not</comment>
	<function><type><specifier pos:line="145" pos:column="9">public</specifier> <specifier pos:line="145" pos:column="16">static</specifier> <name pos:line="145" pos:column="23">boolean</name></type> <name pos:line="145" pos:column="31">isGradeLevelPresent</name><parameter_list pos:line="145" pos:column="50">(<param><decl><type><name pos:line="145" pos:column="51">int</name></type> <name pos:line="145" pos:column="55">gradeLevel</name></decl></param>)</parameter_list><block pos:line="145" pos:column="66">{
		<decl_stmt><decl><type><name pos:line="146" pos:column="17">boolean</name></type> <name pos:line="146" pos:column="25">isGradeLevelPresent</name> <init pos:line="146" pos:column="45">= <expr><lit:literal type="boolean" pos:line="146" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="148" pos:column="17">//int gradeLevel = this.getGradeLevel();</comment>
<comment type="line" pos:line="149" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="150" pos:column="1">//				variable = "tableGradeLevel",  </comment>
<comment type="line" pos:line="151" pos:column="1">//				table = "gradingsystem", </comment>
<comment type="line" pos:line="152" pos:column="1">//				column = "GradeLevel", </comment>
<comment type="line" pos:line="153" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">String</name></type> <name pos:line="155" pos:column="24">SQLGradeSelect</name> <init pos:line="155" pos:column="39">= <expr><lit:literal type="string" pos:line="155" pos:column="41">"SELECT GradeLevel FROM gradingsystem;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="157" pos:column="17">try <block pos:line="157" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">Connection</name></type> <name pos:line="158" pos:column="36">conn</name> <init pos:line="158" pos:column="41">= <expr><call><name><name pos:line="158" pos:column="43">Database</name><op:operator pos:line="158" pos:column="51">.</op:operator><name pos:line="158" pos:column="52">getConnection</name></name><argument_list pos:line="158" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="159" pos:column="25">try <block pos:line="159" pos:column="29">{
				<if pos:line="160" pos:column="33">if <condition pos:line="160" pos:column="36">(<expr><name pos:line="160" pos:column="37">conn</name> <op:operator pos:line="160" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="160" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="160" pos:column="50"> <block pos:line="160" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="161" pos:column="41">PreparedStatement</name></type> <name pos:line="161" pos:column="59">statement</name> <init pos:line="161" pos:column="69">= <expr><call><name><name pos:line="161" pos:column="71">conn</name><op:operator pos:line="161" pos:column="75">.</op:operator><name pos:line="161" pos:column="76">prepareStatement</name></name><argument_list pos:line="161" pos:column="92">(<argument><expr><name pos:line="161" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="162" pos:column="41">ResultSet</name></type> <name pos:line="162" pos:column="51">rs</name> <init pos:line="162" pos:column="54">= <expr><call><name><name pos:line="162" pos:column="56">statement</name><op:operator pos:line="162" pos:column="65">.</op:operator><name pos:line="162" pos:column="66">executeQuery</name></name><argument_list pos:line="162" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="163" pos:column="41">while <condition pos:line="163" pos:column="47">(<expr><call><name><name pos:line="163" pos:column="48">rs</name><op:operator pos:line="163" pos:column="50">.</op:operator><name pos:line="163" pos:column="51">next</name></name><argument_list pos:line="163" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="163" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="164" pos:column="49">DBAnnotation</name><op:operator pos:line="164" pos:column="61">.</op:operator><name pos:line="164" pos:column="62">annoate</name></name><argument_list pos:line="164" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="70">"tableGradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="89">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="106">"GradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="164" pos:column="120">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="165" pos:column="49">int</name></type> <name pos:line="165" pos:column="53">tableGradeLevel</name> <init pos:line="165" pos:column="69">= <expr><call><name><name pos:line="165" pos:column="71">rs</name><op:operator pos:line="165" pos:column="73">.</op:operator><name pos:line="165" pos:column="74">getInt</name></name><argument_list pos:line="165" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="81">"GradeLevel"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="166" pos:column="49">if<condition pos:line="166" pos:column="51">(<expr><name pos:line="166" pos:column="52">tableGradeLevel</name> <op:operator pos:line="166" pos:column="68">==</op:operator> <name pos:line="166" pos:column="71">gradeLevel</name></expr>)</condition><then><block pos:line="166" pos:column="82">{
							<expr_stmt><expr><name pos:line="167" pos:column="57">isGradeLevelPresent</name> <op:operator pos:line="167" pos:column="77">=</op:operator> <lit:literal type="boolean" pos:line="167" pos:column="79">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="168" pos:column="57">break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="172" pos:column="27">catch <parameter_list pos:line="172" pos:column="33">(<param><decl><type><name pos:line="172" pos:column="34">SQLException</name></type> <name pos:line="172" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="172" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="173" pos:column="33">System</name><op:operator pos:line="173" pos:column="39">.</op:operator><name pos:line="173" pos:column="40">out</name><op:operator pos:line="173" pos:column="43">.</op:operator><name pos:line="173" pos:column="44">println</name></name><argument_list pos:line="173" pos:column="51">(<argument><expr><name pos:line="173" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="176" pos:column="19">catch <parameter_list pos:line="176" pos:column="25">(<param><decl><type><name pos:line="176" pos:column="26">Exception</name></type> <name pos:line="176" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="177" pos:column="25">System</name><op:operator pos:line="177" pos:column="31">.</op:operator><name pos:line="177" pos:column="32">out</name><op:operator pos:line="177" pos:column="35">.</op:operator><name pos:line="177" pos:column="36">println</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><name pos:line="177" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="180" pos:column="17">return <expr><name pos:line="180" pos:column="24">isGradeLevelPresent</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="183" pos:column="9">// Deletes a grade from the gradesystem table</comment>
	<function><type><specifier pos:line="184" pos:column="9">public</specifier> <name pos:line="184" pos:column="16">boolean</name></type> <name pos:line="184" pos:column="24">deleteGrade</name><parameter_list pos:line="184" pos:column="35">()</parameter_list><block pos:line="184" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="185" pos:column="17">boolean</name></type> <name pos:line="185" pos:column="25">isGradeDeleted</name> <init pos:line="185" pos:column="40">= <expr><lit:literal type="boolean" pos:line="185" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="187" pos:column="17">String</name></type> <name pos:line="187" pos:column="24">grade</name> <init pos:line="187" pos:column="30">= <expr><call><name><name pos:line="187" pos:column="32">this</name><op:operator pos:line="187" pos:column="36">.</op:operator><name pos:line="187" pos:column="37">getGrade</name></name><argument_list pos:line="187" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">boolean</name></type> <name pos:line="189" pos:column="25">isGradePresent</name> <init pos:line="189" pos:column="40">= <expr><call><name><name pos:line="189" pos:column="42">this</name><op:operator pos:line="189" pos:column="46">.</op:operator><name pos:line="189" pos:column="47">isGradePresent</name></name><argument_list pos:line="189" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="190" pos:column="17">if<condition pos:line="190" pos:column="19">(<expr><name pos:line="190" pos:column="20">isGradePresent</name> <op:operator pos:line="190" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="190" pos:column="38">false</lit:literal></expr>)</condition><then><block pos:line="190" pos:column="44">{
			<expr_stmt><expr><call><name><name pos:line="191" pos:column="25">System</name><op:operator pos:line="191" pos:column="31">.</op:operator><name pos:line="191" pos:column="32">out</name><op:operator pos:line="191" pos:column="35">.</op:operator><name pos:line="191" pos:column="36">println</name></name><argument_list pos:line="191" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="44">"This grade is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="192" pos:column="19">else<block pos:line="192" pos:column="23">{
<comment type="line" pos:line="193" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="194" pos:column="1">//					variable = "grade",  </comment>
<comment type="line" pos:line="195" pos:column="1">//					table = "gradingsystem", </comment>
<comment type="line" pos:line="196" pos:column="1">//					column = "Grade", </comment>
<comment type="line" pos:line="197" pos:column="1">//					isSource = false)</comment>
			
			<decl_stmt><decl><type><name pos:line="199" pos:column="25">String</name></type> <name pos:line="199" pos:column="32">SQLGradedDelete</name> <init pos:line="199" pos:column="48">= <expr><lit:literal type="string" pos:line="199" pos:column="50">"DELETE FROM gradingsystem WHERE Grade = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="201" pos:column="25">try <block pos:line="201" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="202" pos:column="33">Connection</name></type> <name pos:line="202" pos:column="44">conn</name> <init pos:line="202" pos:column="49">= <expr><call><name><name pos:line="202" pos:column="51">Database</name><op:operator pos:line="202" pos:column="59">.</op:operator><name pos:line="202" pos:column="60">getConnection</name></name><argument_list pos:line="202" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="203" pos:column="33">try <block pos:line="203" pos:column="37">{
					<if pos:line="204" pos:column="41">if <condition pos:line="204" pos:column="44">(<expr><name pos:line="204" pos:column="45">conn</name> <op:operator pos:line="204" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="204" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="204" pos:column="58"> <block pos:line="204" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="205" pos:column="49">PreparedStatement</name></type> <name pos:line="205" pos:column="67">statement</name> <init pos:line="205" pos:column="77">= <expr><call><name><name pos:line="205" pos:column="79">conn</name><op:operator pos:line="205" pos:column="83">.</op:operator><name pos:line="205" pos:column="84">prepareStatement</name></name><argument_list pos:line="205" pos:column="100">(<argument><expr><name pos:line="205" pos:column="101">SQLGradedDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="206" pos:column="49">DBAnnotation</name><op:operator pos:line="206" pos:column="61">.</op:operator><name pos:line="206" pos:column="62">annoate</name></name><argument_list pos:line="206" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="70">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="79">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="96">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="206" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="207" pos:column="49">statement</name><op:operator pos:line="207" pos:column="58">.</op:operator><name pos:line="207" pos:column="59">setString</name></name><argument_list pos:line="207" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="207" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="72">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="208" pos:column="49">statement</name><op:operator pos:line="208" pos:column="58">.</op:operator><name pos:line="208" pos:column="59">executeUpdate</name></name><argument_list pos:line="208" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="209" pos:column="49">Database</name><op:operator pos:line="209" pos:column="57">.</op:operator><name pos:line="209" pos:column="58">commitTransaction</name></name><argument_list pos:line="209" pos:column="75">(<argument><expr><name pos:line="209" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="210" pos:column="49">isGradeDeleted</name> <op:operator pos:line="210" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="210" pos:column="66">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>	
				}</block> <catch pos:line="212" pos:column="35">catch <parameter_list pos:line="212" pos:column="41">(<param><decl><type><name pos:line="212" pos:column="42">SQLException</name></type> <name pos:line="212" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="213" pos:column="41">System</name><op:operator pos:line="213" pos:column="47">.</op:operator><name pos:line="213" pos:column="48">out</name><op:operator pos:line="213" pos:column="51">.</op:operator><name pos:line="213" pos:column="52">println</name></name><argument_list pos:line="213" pos:column="59">(<argument><expr><name pos:line="213" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="214" pos:column="41">Database</name><op:operator pos:line="214" pos:column="49">.</op:operator><name pos:line="214" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="214" pos:column="69">(<argument><expr><name pos:line="214" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="217" pos:column="27">catch <parameter_list pos:line="217" pos:column="33">(<param><decl><type><name pos:line="217" pos:column="34">Exception</name></type> <name pos:line="217" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="217" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="218" pos:column="33">System</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">out</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">println</name></name><argument_list pos:line="218" pos:column="51">(<argument><expr><name pos:line="218" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>

		
		<return pos:line="223" pos:column="17">return <expr><name pos:line="223" pos:column="24">isGradeDeleted</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="226" pos:column="9">// Modifies a grade in the gradesystem table</comment>
	<function><type><specifier pos:line="227" pos:column="9">public</specifier> <name pos:line="227" pos:column="16">boolean</name></type> <name pos:line="227" pos:column="24">modifyGrade</name><parameter_list pos:line="227" pos:column="35">(<param><decl><type><name pos:line="227" pos:column="36">String</name></type> <name pos:line="227" pos:column="43">newGrade</name></decl></param>)</parameter_list><block pos:line="227" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="228" pos:column="17">boolean</name></type> <name pos:line="228" pos:column="25">isGradeModified</name> <init pos:line="228" pos:column="41">= <expr><lit:literal type="boolean" pos:line="228" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="230" pos:column="17">String</name></type> <name pos:line="230" pos:column="24">grade</name> <init pos:line="230" pos:column="30">= <expr><call><name><name pos:line="230" pos:column="32">this</name><op:operator pos:line="230" pos:column="36">.</op:operator><name pos:line="230" pos:column="37">getGrade</name></name><argument_list pos:line="230" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="232" pos:column="17">boolean</name></type> <name pos:line="232" pos:column="25">isGradePresent</name> <init pos:line="232" pos:column="40">= <expr><call><name><name pos:line="232" pos:column="42">this</name><op:operator pos:line="232" pos:column="46">.</op:operator><name pos:line="232" pos:column="47">isGradePresent</name></name><argument_list pos:line="232" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="233" pos:column="17">if<condition pos:line="233" pos:column="19">(<expr><name pos:line="233" pos:column="20">isGradePresent</name> <op:operator pos:line="233" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="233" pos:column="38">false</lit:literal></expr>)</condition><then><block pos:line="233" pos:column="44">{
			<expr_stmt><expr><call><name><name pos:line="234" pos:column="25">System</name><op:operator pos:line="234" pos:column="31">.</op:operator><name pos:line="234" pos:column="32">out</name><op:operator pos:line="234" pos:column="35">.</op:operator><name pos:line="234" pos:column="36">println</name></name><argument_list pos:line="234" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="44">"This grade is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="235" pos:column="19">else<block pos:line="235" pos:column="23">{
<comment type="line" pos:line="236" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="237" pos:column="1">//					variable = "newGrade",  </comment>
<comment type="line" pos:line="238" pos:column="1">//					table = "gradingsystem", </comment>
<comment type="line" pos:line="239" pos:column="1">//					column = "Grade", </comment>
<comment type="line" pos:line="240" pos:column="1">//					isSource = false)</comment>
			
			<decl_stmt><decl><type><name pos:line="242" pos:column="25">String</name></type> <name pos:line="242" pos:column="32">SQLGradeUpdate</name> <init pos:line="242" pos:column="47">= <expr><lit:literal type="string" pos:line="242" pos:column="49">"UPDATE gradingsystem SET Grade = ? WHERE Grade = ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="244" pos:column="25">try <block pos:line="244" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="245" pos:column="33">Connection</name></type> <name pos:line="245" pos:column="44">conn</name> <init pos:line="245" pos:column="49">= <expr><call><name><name pos:line="245" pos:column="51">Database</name><op:operator pos:line="245" pos:column="59">.</op:operator><name pos:line="245" pos:column="60">getConnection</name></name><argument_list pos:line="245" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="246" pos:column="33">try <block pos:line="246" pos:column="37">{
					<if pos:line="247" pos:column="41">if <condition pos:line="247" pos:column="44">(<expr><name pos:line="247" pos:column="45">conn</name> <op:operator pos:line="247" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="247" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="247" pos:column="58"> <block pos:line="247" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="248" pos:column="49">PreparedStatement</name></type> <name pos:line="248" pos:column="67">statement</name> <init pos:line="248" pos:column="77">= <expr><call><name><name pos:line="248" pos:column="79">conn</name><op:operator pos:line="248" pos:column="83">.</op:operator><name pos:line="248" pos:column="84">prepareStatement</name></name><argument_list pos:line="248" pos:column="100">(<argument><expr><name pos:line="248" pos:column="101">SQLGradeUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="249" pos:column="49">DBAnnotation</name><op:operator pos:line="249" pos:column="61">.</op:operator><name pos:line="249" pos:column="62">annoate</name></name><argument_list pos:line="249" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="249" pos:column="70">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="79">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="96">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="249" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="250" pos:column="49">statement</name><op:operator pos:line="250" pos:column="58">.</op:operator><name pos:line="250" pos:column="59">setString</name></name><argument_list pos:line="250" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="72">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="251" pos:column="49">DBAnnotation</name><op:operator pos:line="251" pos:column="61">.</op:operator><name pos:line="251" pos:column="62">annoate</name></name><argument_list pos:line="251" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="251" pos:column="70">"newGrade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="82">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="99">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="251" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="252" pos:column="49">statement</name><op:operator pos:line="252" pos:column="58">.</op:operator><name pos:line="252" pos:column="59">setString</name></name><argument_list pos:line="252" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="252" pos:column="69">2</lit:literal></expr></argument>, <argument><expr><name pos:line="252" pos:column="72">newGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="253" pos:column="49">statement</name><op:operator pos:line="253" pos:column="58">.</op:operator><name pos:line="253" pos:column="59">executeUpdate</name></name><argument_list pos:line="253" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="254" pos:column="49">Database</name><op:operator pos:line="254" pos:column="57">.</op:operator><name pos:line="254" pos:column="58">commitTransaction</name></name><argument_list pos:line="254" pos:column="75">(<argument><expr><name pos:line="254" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="255" pos:column="49">isGradeModified</name> <op:operator pos:line="255" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="255" pos:column="67">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>	
				}</block> <catch pos:line="257" pos:column="35">catch <parameter_list pos:line="257" pos:column="41">(<param><decl><type><name pos:line="257" pos:column="42">SQLException</name></type> <name pos:line="257" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="257" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="258" pos:column="41">System</name><op:operator pos:line="258" pos:column="47">.</op:operator><name pos:line="258" pos:column="48">out</name><op:operator pos:line="258" pos:column="51">.</op:operator><name pos:line="258" pos:column="52">println</name></name><argument_list pos:line="258" pos:column="59">(<argument><expr><name pos:line="258" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="259" pos:column="41">Database</name><op:operator pos:line="259" pos:column="49">.</op:operator><name pos:line="259" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="259" pos:column="69">(<argument><expr><name pos:line="259" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="262" pos:column="27">catch <parameter_list pos:line="262" pos:column="33">(<param><decl><type><name pos:line="262" pos:column="34">Exception</name></type> <name pos:line="262" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="262" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">System</name><op:operator pos:line="263" pos:column="39">.</op:operator><name pos:line="263" pos:column="40">out</name><op:operator pos:line="263" pos:column="43">.</op:operator><name pos:line="263" pos:column="44">println</name></name><argument_list pos:line="263" pos:column="51">(<argument><expr><name pos:line="263" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>

		<return pos:line="267" pos:column="17">return <expr><name pos:line="267" pos:column="24">isGradeModified</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="270" pos:column="9">// Modifies a grade level in the gradesystem table</comment>
	<function><type><specifier pos:line="271" pos:column="9">public</specifier> <name pos:line="271" pos:column="16">boolean</name></type> <name pos:line="271" pos:column="24">modifyGradeLevel</name><parameter_list pos:line="271" pos:column="40">(<param><decl><type><name pos:line="271" pos:column="41">int</name></type> <name pos:line="271" pos:column="45">newGradeLevel</name></decl></param>)</parameter_list><block pos:line="271" pos:column="59">{
		<decl_stmt><decl><type><name pos:line="272" pos:column="17">boolean</name></type> <name pos:line="272" pos:column="25">isGradeLevelModified</name> <init pos:line="272" pos:column="46">= <expr><lit:literal type="boolean" pos:line="272" pos:column="48">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="274" pos:column="17">String</name></type> <name pos:line="274" pos:column="24">grade</name> <init pos:line="274" pos:column="30">= <expr><call><name><name pos:line="274" pos:column="32">this</name><op:operator pos:line="274" pos:column="36">.</op:operator><name pos:line="274" pos:column="37">getGrade</name></name><argument_list pos:line="274" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="275" pos:column="17">int</name></type> <name pos:line="275" pos:column="21">gradeLevel</name> <init pos:line="275" pos:column="32">= <expr><name><name pos:line="275" pos:column="34">this</name><op:operator pos:line="275" pos:column="38">.</op:operator><name pos:line="275" pos:column="39">gradeLevel</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="276" pos:column="17">boolean</name></type> <name pos:line="276" pos:column="25">isOldGradeLevelPresent</name> <init pos:line="276" pos:column="48">= <expr><call><name pos:line="276" pos:column="50">isGradeLevelPresent</name><argument_list pos:line="276" pos:column="69">(<argument><expr><name pos:line="276" pos:column="70">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="277" pos:column="17">boolean</name></type> <name pos:line="277" pos:column="25">isNewGradeLevelPresent</name> <init pos:line="277" pos:column="48">= <expr><call><name pos:line="277" pos:column="50">isGradeLevelPresent</name><argument_list pos:line="277" pos:column="69">(<argument><expr><name pos:line="277" pos:column="70">newGradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="278" pos:column="17">if<condition pos:line="278" pos:column="19">(<expr><name pos:line="278" pos:column="20">isOldGradeLevelPresent</name> <op:operator pos:line="278" pos:column="43">==</op:operator> <lit:literal type="boolean" pos:line="278" pos:column="46">false</lit:literal></expr>)</condition><then><block pos:line="278" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="279" pos:column="25">System</name><op:operator pos:line="279" pos:column="31">.</op:operator><name pos:line="279" pos:column="32">out</name><op:operator pos:line="279" pos:column="35">.</op:operator><name pos:line="279" pos:column="36">println</name></name><argument_list pos:line="279" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="44">"This Old Grade Level is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="280" pos:column="19">else<block pos:line="280" pos:column="23">{
			<if pos:line="281" pos:column="25">if<condition pos:line="281" pos:column="27">(<expr><name pos:line="281" pos:column="28">isNewGradeLevelPresent</name> <op:operator pos:line="281" pos:column="51">==</op:operator> <lit:literal type="boolean" pos:line="281" pos:column="54">true</lit:literal></expr>)</condition><then><block pos:line="281" pos:column="59">{
				<expr_stmt><expr><call><name><name pos:line="282" pos:column="33">System</name><op:operator pos:line="282" pos:column="39">.</op:operator><name pos:line="282" pos:column="40">out</name><op:operator pos:line="282" pos:column="43">.</op:operator><name pos:line="282" pos:column="44">println</name></name><argument_list pos:line="282" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="52">" new Grade Level is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="283" pos:column="27">else <block pos:line="283" pos:column="32">{
<comment type="line" pos:line="284" pos:column="1">//				@DBAnnotation (</comment>
<comment type="line" pos:line="285" pos:column="1">//						variable = "newGradeLevel",  </comment>
<comment type="line" pos:line="286" pos:column="1">//						table = "gradingsystem", </comment>
<comment type="line" pos:line="287" pos:column="1">//						column = "GradeLevel", </comment>
<comment type="line" pos:line="288" pos:column="1">//						isSource = false)</comment>
				
				<decl_stmt><decl><type><name pos:line="290" pos:column="33">String</name></type> <name pos:line="290" pos:column="40">SQLGradeUpdate</name> <init pos:line="290" pos:column="55">= <expr><lit:literal type="string" pos:line="290" pos:column="57">"UPDATE gradingsystem SET GradeLevel = ? WHERE GradeLevel = ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
				
				<try pos:line="292" pos:column="33">try <block pos:line="292" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="293" pos:column="41">Connection</name></type> <name pos:line="293" pos:column="52">conn</name> <init pos:line="293" pos:column="57">= <expr><call><name><name pos:line="293" pos:column="59">Database</name><op:operator pos:line="293" pos:column="67">.</op:operator><name pos:line="293" pos:column="68">getConnection</name></name><argument_list pos:line="293" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="294" pos:column="41">try <block pos:line="294" pos:column="45">{
						<if pos:line="295" pos:column="49">if <condition pos:line="295" pos:column="52">(<expr><name pos:line="295" pos:column="53">conn</name> <op:operator pos:line="295" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="295" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="295" pos:column="66"> <block pos:line="295" pos:column="67">{
							<decl_stmt><decl><type><name pos:line="296" pos:column="57">PreparedStatement</name></type> <name pos:line="296" pos:column="75">statement</name> <init pos:line="296" pos:column="85">= <expr><call><name><name pos:line="296" pos:column="87">conn</name><op:operator pos:line="296" pos:column="91">.</op:operator><name pos:line="296" pos:column="92">prepareStatement</name></name><argument_list pos:line="296" pos:column="108">(<argument><expr><name pos:line="296" pos:column="109">SQLGradeUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="298" pos:column="57">statement</name><op:operator pos:line="298" pos:column="66">.</op:operator><name pos:line="298" pos:column="67">setInt</name></name><argument_list pos:line="298" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="298" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="298" pos:column="77">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="299" pos:column="57">statement</name><op:operator pos:line="299" pos:column="66">.</op:operator><name pos:line="299" pos:column="67">setInt</name></name><argument_list pos:line="299" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="299" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="77">newGradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="300" pos:column="57">statement</name><op:operator pos:line="300" pos:column="66">.</op:operator><name pos:line="300" pos:column="67">executeUpdate</name></name><argument_list pos:line="300" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="301" pos:column="57">Database</name><op:operator pos:line="301" pos:column="65">.</op:operator><name pos:line="301" pos:column="66">commitTransaction</name></name><argument_list pos:line="301" pos:column="83">(<argument><expr><name pos:line="301" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="302" pos:column="57">isGradeLevelModified</name> <op:operator pos:line="302" pos:column="78">=</op:operator> <lit:literal type="boolean" pos:line="302" pos:column="80">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>	
					}</block> <catch pos:line="304" pos:column="43">catch <parameter_list pos:line="304" pos:column="49">(<param><decl><type><name pos:line="304" pos:column="50">SQLException</name></type> <name pos:line="304" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="304" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="305" pos:column="49">System</name><op:operator pos:line="305" pos:column="55">.</op:operator><name pos:line="305" pos:column="56">out</name><op:operator pos:line="305" pos:column="59">.</op:operator><name pos:line="305" pos:column="60">println</name></name><argument_list pos:line="305" pos:column="67">(<argument><expr><name pos:line="305" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="306" pos:column="49">Database</name><op:operator pos:line="306" pos:column="57">.</op:operator><name pos:line="306" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="306" pos:column="77">(<argument><expr><name pos:line="306" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="309" pos:column="35">catch <parameter_list pos:line="309" pos:column="41">(<param><decl><type><name pos:line="309" pos:column="42">Exception</name></type> <name pos:line="309" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="309" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="310" pos:column="41">System</name><op:operator pos:line="310" pos:column="47">.</op:operator><name pos:line="310" pos:column="48">out</name><op:operator pos:line="310" pos:column="51">.</op:operator><name pos:line="310" pos:column="52">println</name></name><argument_list pos:line="310" pos:column="59">(<argument><expr><name pos:line="310" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></else></if>

		}</block></else></if>
			
		<return pos:line="316" pos:column="17">return <expr><name pos:line="316" pos:column="24">isGradeLevelModified</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="319" pos:column="9">// Get the grade level when given a grade</comment>
	<function><type><specifier pos:line="320" pos:column="9">public</specifier> <name pos:line="320" pos:column="16">GradeSystem</name></type> <name pos:line="320" pos:column="28">getGradeLevelForGrade</name><parameter_list pos:line="320" pos:column="49">()</parameter_list><block pos:line="320" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="321" pos:column="17">String</name></type> <name pos:line="321" pos:column="24">grade</name> <init pos:line="321" pos:column="30">= <expr><call><name><name pos:line="321" pos:column="32">this</name><op:operator pos:line="321" pos:column="36">.</op:operator><name pos:line="321" pos:column="37">getGrade</name></name><argument_list pos:line="321" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="323" pos:column="17">boolean</name></type> <name pos:line="323" pos:column="25">isGradePresent</name> <init pos:line="323" pos:column="40">= <expr><call><name><name pos:line="323" pos:column="42">this</name><op:operator pos:line="323" pos:column="46">.</op:operator><name pos:line="323" pos:column="47">isGradePresent</name></name><argument_list pos:line="323" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt> 
		<if pos:line="324" pos:column="17">if<condition pos:line="324" pos:column="19">(<expr><name pos:line="324" pos:column="20">isGradePresent</name> <op:operator pos:line="324" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="324" pos:column="38">false</lit:literal></expr>)</condition><then><block pos:line="324" pos:column="44">{
			<expr_stmt><expr><call><name><name pos:line="325" pos:column="25">System</name><op:operator pos:line="325" pos:column="31">.</op:operator><name pos:line="325" pos:column="32">out</name><op:operator pos:line="325" pos:column="35">.</op:operator><name pos:line="325" pos:column="36">println</name></name><argument_list pos:line="325" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="44">"Grade "</lit:literal> <op:operator pos:line="325" pos:column="53">+</op:operator> <name pos:line="325" pos:column="55">grade</name> <op:operator pos:line="325" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="325" pos:column="63">" is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="326" pos:column="19">else <block pos:line="326" pos:column="24">{
<comment type="line" pos:line="327" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="328" pos:column="1">//					variable = "grade",  </comment>
<comment type="line" pos:line="329" pos:column="1">//					table = "gradingsystem", </comment>
<comment type="line" pos:line="330" pos:column="1">//					column = "Grade", </comment>
<comment type="line" pos:line="331" pos:column="1">//					isSource = true)</comment>
			
			<decl_stmt><decl><type><name pos:line="333" pos:column="25">String</name></type> <name pos:line="333" pos:column="32">SQLGradeSelect</name> <init pos:line="333" pos:column="47">= <expr><lit:literal type="string" pos:line="333" pos:column="49">"SELECT GradeLevel FROM gradingsystem WHERE Grade = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="335" pos:column="25">try <block pos:line="335" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="336" pos:column="33">Connection</name></type> <name pos:line="336" pos:column="44">conn</name> <init pos:line="336" pos:column="49">= <expr><call><name><name pos:line="336" pos:column="51">Database</name><op:operator pos:line="336" pos:column="59">.</op:operator><name pos:line="336" pos:column="60">getConnection</name></name><argument_list pos:line="336" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="337" pos:column="33">try <block pos:line="337" pos:column="37">{
					<if pos:line="338" pos:column="41">if <condition pos:line="338" pos:column="44">(<expr><name pos:line="338" pos:column="45">conn</name> <op:operator pos:line="338" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="338" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="338" pos:column="58"> <block pos:line="338" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="339" pos:column="49">PreparedStatement</name></type> <name pos:line="339" pos:column="67">statement</name> <init pos:line="339" pos:column="77">= <expr><call><name><name pos:line="339" pos:column="79">conn</name><op:operator pos:line="339" pos:column="83">.</op:operator><name pos:line="339" pos:column="84">prepareStatement</name></name><argument_list pos:line="339" pos:column="100">(<argument><expr><name pos:line="339" pos:column="101">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="340" pos:column="49">DBAnnotation</name><op:operator pos:line="340" pos:column="61">.</op:operator><name pos:line="340" pos:column="62">annoate</name></name><argument_list pos:line="340" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="70">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="79">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="96">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="340" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="341" pos:column="49">statement</name><op:operator pos:line="341" pos:column="58">.</op:operator><name pos:line="341" pos:column="59">setString</name></name><argument_list pos:line="341" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="341" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="341" pos:column="72">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="342" pos:column="49">ResultSet</name></type> <name pos:line="342" pos:column="59">rs</name> <init pos:line="342" pos:column="62">= <expr><call><name><name pos:line="342" pos:column="64">statement</name><op:operator pos:line="342" pos:column="73">.</op:operator><name pos:line="342" pos:column="74">executeQuery</name></name><argument_list pos:line="342" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="343" pos:column="49">while <condition pos:line="343" pos:column="55">(<expr><call><name><name pos:line="343" pos:column="56">rs</name><op:operator pos:line="343" pos:column="58">.</op:operator><name pos:line="343" pos:column="59">next</name></name><argument_list pos:line="343" pos:column="63">()</argument_list></call></expr>)</condition> <block pos:line="343" pos:column="67">{
							<expr_stmt><expr><call><name><name pos:line="344" pos:column="57">DBAnnotation</name><op:operator pos:line="344" pos:column="69">.</op:operator><name pos:line="344" pos:column="70">annoate</name></name><argument_list pos:line="344" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="78">"gradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="344" pos:column="92">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="344" pos:column="109">"GradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="344" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="345" pos:column="57">int</name></type> <name pos:line="345" pos:column="61">gradeLevel</name> <init pos:line="345" pos:column="72">= <expr><call><name><name pos:line="345" pos:column="74">rs</name><op:operator pos:line="345" pos:column="76">.</op:operator><name pos:line="345" pos:column="77">getInt</name></name><argument_list pos:line="345" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="345" pos:column="84">"GradeLevel"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="346" pos:column="57">this</name><op:operator pos:line="346" pos:column="61">.</op:operator><name pos:line="346" pos:column="62">setGradeLevel</name></name><argument_list pos:line="346" pos:column="75">(<argument><expr><name pos:line="346" pos:column="76">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
					}</block></then></if>	
				}</block> <catch pos:line="349" pos:column="35">catch <parameter_list pos:line="349" pos:column="41">(<param><decl><type><name pos:line="349" pos:column="42">SQLException</name></type> <name pos:line="349" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="349" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="350" pos:column="41">System</name><op:operator pos:line="350" pos:column="47">.</op:operator><name pos:line="350" pos:column="48">out</name><op:operator pos:line="350" pos:column="51">.</op:operator><name pos:line="350" pos:column="52">println</name></name><argument_list pos:line="350" pos:column="59">(<argument><expr><name pos:line="350" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="353" pos:column="27">catch <parameter_list pos:line="353" pos:column="33">(<param><decl><type><name pos:line="353" pos:column="34">Exception</name></type> <name pos:line="353" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="353" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="354" pos:column="33">System</name><op:operator pos:line="354" pos:column="39">.</op:operator><name pos:line="354" pos:column="40">out</name><op:operator pos:line="354" pos:column="43">.</op:operator><name pos:line="354" pos:column="44">println</name></name><argument_list pos:line="354" pos:column="51">(<argument><expr><name pos:line="354" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></else></if>
		
		<return pos:line="359" pos:column="17">return <expr><name pos:line="359" pos:column="24">this</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="362" pos:column="9">// Get the grade when given a grade level </comment>
	<function><type><specifier pos:line="363" pos:column="9">public</specifier> <specifier pos:line="363" pos:column="16">static</specifier> <name pos:line="363" pos:column="23">GradeSystem</name></type> <name pos:line="363" pos:column="35">getGradeForGradeLevel</name><parameter_list pos:line="363" pos:column="56">(<param><decl><type><name pos:line="363" pos:column="57">int</name></type> <name pos:line="363" pos:column="61">gradeLevel</name></decl></param>)</parameter_list><block pos:line="363" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="364" pos:column="17">GradeSystem</name></type> <name pos:line="364" pos:column="29">gradeObject</name> <init pos:line="364" pos:column="41">= <expr><lit:literal type="null" pos:line="364" pos:column="43">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="365" pos:column="17">boolean</name></type> <name pos:line="365" pos:column="25">isGradeLevelPresent</name> <init pos:line="365" pos:column="45">= <expr><call><name pos:line="365" pos:column="47">isGradeLevelPresent</name><argument_list pos:line="365" pos:column="66">(<argument><expr><name pos:line="365" pos:column="67">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		<if pos:line="366" pos:column="17">if<condition pos:line="366" pos:column="19">(<expr><name pos:line="366" pos:column="20">isGradeLevelPresent</name> <op:operator pos:line="366" pos:column="40">==</op:operator> <lit:literal type="boolean" pos:line="366" pos:column="43">false</lit:literal></expr>)</condition><then><block pos:line="366" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="367" pos:column="25">System</name><op:operator pos:line="367" pos:column="31">.</op:operator><name pos:line="367" pos:column="32">out</name><op:operator pos:line="367" pos:column="35">.</op:operator><name pos:line="367" pos:column="36">println</name></name><argument_list pos:line="367" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="44">"Grade Level "</lit:literal> <op:operator pos:line="367" pos:column="59">+</op:operator> <name pos:line="367" pos:column="61">gradeLevel</name> <op:operator pos:line="367" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="367" pos:column="74">" is not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="368" pos:column="19">else <block pos:line="368" pos:column="24">{
<comment type="line" pos:line="369" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="370" pos:column="1">//					variable = "gradeLevel",  </comment>
<comment type="line" pos:line="371" pos:column="1">//					table = "gradingsystem", </comment>
<comment type="line" pos:line="372" pos:column="1">//					column = "GradeLevel", </comment>
<comment type="line" pos:line="373" pos:column="1">//					isSource = true)</comment>
			
			<decl_stmt><decl><type><name pos:line="375" pos:column="25">String</name></type> <name pos:line="375" pos:column="32">SQLGradeSelect</name> <init pos:line="375" pos:column="47">= <expr><lit:literal type="string" pos:line="375" pos:column="49">"SELECT Grade FROM gradingsystem WHERE GradeLevel = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="377" pos:column="25">try <block pos:line="377" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="378" pos:column="33">Connection</name></type> <name pos:line="378" pos:column="44">conn</name> <init pos:line="378" pos:column="49">= <expr><call><name><name pos:line="378" pos:column="51">Database</name><op:operator pos:line="378" pos:column="59">.</op:operator><name pos:line="378" pos:column="60">getConnection</name></name><argument_list pos:line="378" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="379" pos:column="33">try <block pos:line="379" pos:column="37">{
					<if pos:line="380" pos:column="41">if <condition pos:line="380" pos:column="44">(<expr><name pos:line="380" pos:column="45">conn</name> <op:operator pos:line="380" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="380" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="380" pos:column="58"> <block pos:line="380" pos:column="59">{
						<decl_stmt><decl><type><name pos:line="381" pos:column="49">PreparedStatement</name></type> <name pos:line="381" pos:column="67">statement</name> <init pos:line="381" pos:column="77">= <expr><call><name><name pos:line="381" pos:column="79">conn</name><op:operator pos:line="381" pos:column="83">.</op:operator><name pos:line="381" pos:column="84">prepareStatement</name></name><argument_list pos:line="381" pos:column="100">(<argument><expr><name pos:line="381" pos:column="101">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="382" pos:column="49">DBAnnotation</name><op:operator pos:line="382" pos:column="61">.</op:operator><name pos:line="382" pos:column="62">annoate</name></name><argument_list pos:line="382" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="70">"gradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="84">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="101">"GradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="382" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="383" pos:column="49">statement</name><op:operator pos:line="383" pos:column="58">.</op:operator><name pos:line="383" pos:column="59">setInt</name></name><argument_list pos:line="383" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="383" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="383" pos:column="69">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="384" pos:column="49">ResultSet</name></type> <name pos:line="384" pos:column="59">rs</name> <init pos:line="384" pos:column="62">= <expr><call><name><name pos:line="384" pos:column="64">statement</name><op:operator pos:line="384" pos:column="73">.</op:operator><name pos:line="384" pos:column="74">executeQuery</name></name><argument_list pos:line="384" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="385" pos:column="49">while <condition pos:line="385" pos:column="55">(<expr><call><name><name pos:line="385" pos:column="56">rs</name><op:operator pos:line="385" pos:column="58">.</op:operator><name pos:line="385" pos:column="59">next</name></name><argument_list pos:line="385" pos:column="63">()</argument_list></call></expr>)</condition> <block pos:line="385" pos:column="67">{
							<expr_stmt><expr><call><name><name pos:line="386" pos:column="57">DBAnnotation</name><op:operator pos:line="386" pos:column="69">.</op:operator><name pos:line="386" pos:column="70">annoate</name></name><argument_list pos:line="386" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="78">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="386" pos:column="87">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="386" pos:column="104">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="386" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="387" pos:column="57">String</name></type> <name pos:line="387" pos:column="64">grade</name> <init pos:line="387" pos:column="70">= <expr><call><name><name pos:line="387" pos:column="72">rs</name><op:operator pos:line="387" pos:column="74">.</op:operator><name pos:line="387" pos:column="75">getString</name></name><argument_list pos:line="387" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="85">"Grade"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name pos:line="388" pos:column="57">gradeObject</name> <op:operator pos:line="388" pos:column="69">=</op:operator> <op:operator pos:line="388" pos:column="71">new</op:operator> <call><name pos:line="388" pos:column="75">GradeSystem</name><argument_list pos:line="388" pos:column="86">(<argument><expr><name pos:line="388" pos:column="87">grade</name></expr></argument>,<argument><expr><name pos:line="388" pos:column="93">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
					}</block></then></if>	
				}</block> <catch pos:line="391" pos:column="35">catch <parameter_list pos:line="391" pos:column="41">(<param><decl><type><name pos:line="391" pos:column="42">SQLException</name></type> <name pos:line="391" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="391" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="392" pos:column="41">System</name><op:operator pos:line="392" pos:column="47">.</op:operator><name pos:line="392" pos:column="48">out</name><op:operator pos:line="392" pos:column="51">.</op:operator><name pos:line="392" pos:column="52">println</name></name><argument_list pos:line="392" pos:column="59">(<argument><expr><name pos:line="392" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="395" pos:column="27">catch <parameter_list pos:line="395" pos:column="33">(<param><decl><type><name pos:line="395" pos:column="34">Exception</name></type> <name pos:line="395" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="395" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="396" pos:column="33">System</name><op:operator pos:line="396" pos:column="39">.</op:operator><name pos:line="396" pos:column="40">out</name><op:operator pos:line="396" pos:column="43">.</op:operator><name pos:line="396" pos:column="44">println</name></name><argument_list pos:line="396" pos:column="51">(<argument><expr><name pos:line="396" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></else></if>
		
		<return pos:line="401" pos:column="17">return <expr><name pos:line="401" pos:column="24">gradeObject</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="404" pos:column="9">// Get the maximum grade level in the university grading system</comment>
	<function><type><specifier pos:line="405" pos:column="9">public</specifier> <specifier pos:line="405" pos:column="16">static</specifier> <name pos:line="405" pos:column="23">int</name></type> <name pos:line="405" pos:column="27">getMaxGradeLevel</name><parameter_list pos:line="405" pos:column="43">()</parameter_list><block pos:line="405" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="406" pos:column="17">int</name></type> <name pos:line="406" pos:column="21">maxGradeLevel</name> <init pos:line="406" pos:column="35">= <expr><lit:literal type="number" pos:line="406" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="408" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="409" pos:column="1">//				variable = "gradeLevel",  </comment>
<comment type="line" pos:line="410" pos:column="1">//				table = "gradingsystem", </comment>
<comment type="line" pos:line="411" pos:column="1">//				column = "GradeLevel", </comment>
<comment type="line" pos:line="412" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="414" pos:column="17">String</name></type> <name pos:line="414" pos:column="24">SQLGradeSelect</name> <init pos:line="414" pos:column="39">= <expr><lit:literal type="string" pos:line="414" pos:column="41">"SELECT max(GradeLevel) FROM gradingsystem;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="416" pos:column="17">try <block pos:line="416" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="417" pos:column="25">Connection</name></type> <name pos:line="417" pos:column="36">conn</name> <init pos:line="417" pos:column="41">= <expr><call><name><name pos:line="417" pos:column="43">Database</name><op:operator pos:line="417" pos:column="51">.</op:operator><name pos:line="417" pos:column="52">getConnection</name></name><argument_list pos:line="417" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="418" pos:column="25">try <block pos:line="418" pos:column="29">{
				<if pos:line="419" pos:column="33">if <condition pos:line="419" pos:column="36">(<expr><name pos:line="419" pos:column="37">conn</name> <op:operator pos:line="419" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="419" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="419" pos:column="50"> <block pos:line="419" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="420" pos:column="41">PreparedStatement</name></type> <name pos:line="420" pos:column="59">statement</name> <init pos:line="420" pos:column="69">= <expr><call><name><name pos:line="420" pos:column="71">conn</name><op:operator pos:line="420" pos:column="75">.</op:operator><name pos:line="420" pos:column="76">prepareStatement</name></name><argument_list pos:line="420" pos:column="92">(<argument><expr><name pos:line="420" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="421" pos:column="41">ResultSet</name></type> <name pos:line="421" pos:column="51">rs</name> <init pos:line="421" pos:column="54">= <expr><call><name><name pos:line="421" pos:column="56">statement</name><op:operator pos:line="421" pos:column="65">.</op:operator><name pos:line="421" pos:column="66">executeQuery</name></name><argument_list pos:line="421" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="422" pos:column="41">while <condition pos:line="422" pos:column="47">(<expr><call><name><name pos:line="422" pos:column="48">rs</name><op:operator pos:line="422" pos:column="50">.</op:operator><name pos:line="422" pos:column="51">next</name></name><argument_list pos:line="422" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="422" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="423" pos:column="49">DBAnnotation</name><op:operator pos:line="423" pos:column="61">.</op:operator><name pos:line="423" pos:column="62">annoate</name></name><argument_list pos:line="423" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="423" pos:column="70">"maxGradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="423" pos:column="87">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="423" pos:column="104">"max(GradeLevel)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="423" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="424" pos:column="49">maxGradeLevel</name> <op:operator pos:line="424" pos:column="63">=</op:operator> <call><name><name pos:line="424" pos:column="65">rs</name><op:operator pos:line="424" pos:column="67">.</op:operator><name pos:line="424" pos:column="68">getInt</name></name><argument_list pos:line="424" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="424" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="427" pos:column="27">catch <parameter_list pos:line="427" pos:column="33">(<param><decl><type><name pos:line="427" pos:column="34">SQLException</name></type> <name pos:line="427" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="427" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="428" pos:column="33">System</name><op:operator pos:line="428" pos:column="39">.</op:operator><name pos:line="428" pos:column="40">out</name><op:operator pos:line="428" pos:column="43">.</op:operator><name pos:line="428" pos:column="44">println</name></name><argument_list pos:line="428" pos:column="51">(<argument><expr><name pos:line="428" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="431" pos:column="19">catch <parameter_list pos:line="431" pos:column="25">(<param><decl><type><name pos:line="431" pos:column="26">Exception</name></type> <name pos:line="431" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="431" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="432" pos:column="25">System</name><op:operator pos:line="432" pos:column="31">.</op:operator><name pos:line="432" pos:column="32">out</name><op:operator pos:line="432" pos:column="35">.</op:operator><name pos:line="432" pos:column="36">println</name></name><argument_list pos:line="432" pos:column="43">(<argument><expr><name pos:line="432" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return pos:line="435" pos:column="17">return <expr><name pos:line="435" pos:column="24">maxGradeLevel</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="438" pos:column="9">public</specifier> <specifier pos:line="438" pos:column="16">static</specifier> <name pos:line="438" pos:column="23">void</name></type> <name pos:line="438" pos:column="28">main</name><parameter_list pos:line="438" pos:column="32">(<param><decl><type><name><name pos:line="438" pos:column="33">String</name><index pos:line="438" pos:column="39">[]</index></name></type> <name pos:line="438" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="438" pos:column="47">{
		
	}</block></function>

}</block></class>
</unit>
