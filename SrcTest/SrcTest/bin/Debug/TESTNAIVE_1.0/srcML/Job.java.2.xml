<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Job.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">LinkedHashMap</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">com</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">mysql</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">jdbc</name><op:operator pos:line="10" pos:column="22">.</op:operator><name pos:line="10" pos:column="23">Statement</name></name>;</import>

<comment type="block" format="javadoc" pos:line="12" pos:column="1">/**
* @author Akshay
* 
*/</comment>

<comment type="block" format="javadoc" pos:line="17" pos:column="1">/*************** JOB.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="19" pos:column="1">public</specifier> class <name pos:line="19" pos:column="14">Job</name> <block pos:line="19" pos:column="18">{
	
	<comment type="line" pos:line="21" pos:column="9">//CLASS VARIABLES USED BY JOB CLASS	</comment>
	
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">int</name></type> <name pos:line="23" pos:column="13">jobID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">int</name></type> <name pos:line="24" pos:column="13">postedByUIN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">Professor</name></type> <name pos:line="25" pos:column="27">professor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">String</name></type> <name pos:line="26" pos:column="16">jobInDepartment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">double</name></type> <name pos:line="27" pos:column="16">reqdMinimumGPA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">double</name></type> <name pos:line="28" pos:column="16">reqdMinimumWorkExperience</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">boolean</name></type> <name pos:line="29" pos:column="17">skillset1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">boolean</name></type> <name pos:line="30" pos:column="17">skillset2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">boolean</name></type> <name pos:line="31" pos:column="17">skillset3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">boolean</name></type> <name pos:line="32" pos:column="17">skillset4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">boolean</name></type> <name pos:line="33" pos:column="17">skillset5</name></decl>;</decl_stmt>

	<comment type="block" pos:line="35" pos:column="9">/* the constructor takes the job ID and then checks for it in the database and the iniitializes all the retrieved values for the jobID
	 * 
	 *it sets the class variable names to the specifics 
	 *
	 *else it displays the job posting not found
	 * */</comment>
	<constructor><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">Job</name><parameter_list pos:line="41" pos:column="19">(<param><decl><type><name pos:line="41" pos:column="20">int</name></type> <name pos:line="41" pos:column="24">JobID</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="31">{

		<try pos:line="43" pos:column="17">try <block pos:line="43" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="44" pos:column="25">Connection</name></type> <name pos:line="44" pos:column="36">conn</name> <init pos:line="44" pos:column="41">= <expr><call><name><name pos:line="44" pos:column="43">Database</name><op:operator pos:line="44" pos:column="51">.</op:operator><name pos:line="44" pos:column="52">getConnection</name></name><argument_list pos:line="44" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="44" pos:column="68">//establish the connection to the database</comment>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">String</name></type> <name pos:line="45" pos:column="32">SQLPeopleSelect</name> <init pos:line="45" pos:column="48">= <expr><lit:literal type="string" pos:line="45" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="46" pos:column="25">try <block pos:line="46" pos:column="29">{

				<if pos:line="48" pos:column="33">if <condition pos:line="48" pos:column="36">(<expr><name pos:line="48" pos:column="37">conn</name> <op:operator pos:line="48" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="48" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="48" pos:column="50"> <block pos:line="48" pos:column="51">{

					<expr_stmt><expr><name pos:line="50" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="50" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="50" pos:column="59">"Select * From jobpostings where JobID=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="50" pos:column="102">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="53" pos:column="33">PreparedStatement</name></type> <name pos:line="53" pos:column="51">stmtForSelect</name> <init pos:line="53" pos:column="65">= <expr><call><name><name pos:line="53" pos:column="67">conn</name><op:operator pos:line="53" pos:column="71">.</op:operator><name pos:line="53" pos:column="72">prepareStatement</name></name><argument_list pos:line="53" pos:column="88">(<argument><expr><name pos:line="53" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="54" pos:column="33">stmtForSelect</name><op:operator pos:line="54" pos:column="46">.</op:operator><name pos:line="54" pos:column="47">setInt</name></name><argument_list pos:line="54" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="57">JobID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="54" pos:column="64">//set the job ID</comment>

				<decl_stmt><decl><type><name pos:line="56" pos:column="33">ResultSet</name></type> <name pos:line="56" pos:column="43">rs</name> <init pos:line="56" pos:column="46">= <expr><call><name><name pos:line="56" pos:column="48">stmtForSelect</name><op:operator pos:line="56" pos:column="61">.</op:operator><name pos:line="56" pos:column="62">executeQuery</name></name><argument_list pos:line="56" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="56" pos:column="77">//execute the query</comment>

				<if pos:line="58" pos:column="33">if <condition pos:line="58" pos:column="36">(<expr><call><name><name pos:line="58" pos:column="37">rs</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">first</name></name><argument_list pos:line="58" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="58" pos:column="48"> <block pos:line="58" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="60" pos:column="41">DBAnnotation</name><op:operator pos:line="60" pos:column="53">.</op:operator><name pos:line="60" pos:column="54">annoate</name></name><argument_list pos:line="60" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="62">"retreivedjobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="80">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="95">"JobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="60" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="61" pos:column="41">int</name></type> <name pos:line="61" pos:column="45">retreivedjobID</name> <init pos:line="61" pos:column="60">= <expr><call><name><name pos:line="61" pos:column="62">rs</name><op:operator pos:line="61" pos:column="64">.</op:operator><name pos:line="61" pos:column="65">getInt</name></name><argument_list pos:line="61" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="72">"JobID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="61" pos:column="81">//--------retrieve the jobID and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="63" pos:column="41">DBAnnotation</name><op:operator pos:line="63" pos:column="53">.</op:operator><name pos:line="63" pos:column="54">annoate</name></name><argument_list pos:line="63" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="62">"whoPostedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="78">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="93">"PostedByUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="63" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="64" pos:column="41">int</name></type> <name pos:line="64" pos:column="45">whoPostedUIN</name> <init pos:line="64" pos:column="58">= <expr><call><name><name pos:line="64" pos:column="60">rs</name><op:operator pos:line="64" pos:column="62">.</op:operator><name pos:line="64" pos:column="63">getInt</name></name><argument_list pos:line="64" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="70">"PostedByUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="64" pos:column="85">//--------retrieve the posted by UIN and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">DBAnnotation</name><op:operator pos:line="66" pos:column="53">.</op:operator><name pos:line="66" pos:column="54">annoate</name></name><argument_list pos:line="66" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="62">"jobInDept"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="75">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="90">"JobInDepartment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="66" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="67" pos:column="41">String</name></type> <name pos:line="67" pos:column="48">jobInDept</name> <init pos:line="67" pos:column="58">= <expr><call><name><name pos:line="67" pos:column="60">rs</name><op:operator pos:line="67" pos:column="62">.</op:operator><name pos:line="67" pos:column="63">getString</name></name><argument_list pos:line="67" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="73">"JobInDepartment"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="67" pos:column="92">//--------retrieve the job in dept and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="69" pos:column="41">DBAnnotation</name><op:operator pos:line="69" pos:column="53">.</op:operator><name pos:line="69" pos:column="54">annoate</name></name><argument_list pos:line="69" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="62">"minimumReqdGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="69" pos:column="80">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="69" pos:column="95">"ReqdMinimumGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="69" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="70" pos:column="41">double</name></type> <name pos:line="70" pos:column="48">minimumReqdGPA</name> <init pos:line="70" pos:column="63">= <expr><call><name><name pos:line="70" pos:column="65">rs</name><op:operator pos:line="70" pos:column="67">.</op:operator><name pos:line="70" pos:column="68">getDouble</name></name><argument_list pos:line="70" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="78">"ReqdMinimumGPA"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="70" pos:column="96">//--------retrieve the reqd gpa and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="72" pos:column="41">DBAnnotation</name><op:operator pos:line="72" pos:column="53">.</op:operator><name pos:line="72" pos:column="54">annoate</name></name><argument_list pos:line="72" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="62">"minimumReqdWorkExp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="84">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="72" pos:column="99">"ReqdMinimumWorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="72" pos:column="128">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="73" pos:column="41">double</name></type> <name pos:line="73" pos:column="48">minimumReqdWorkExp</name> <init pos:line="73" pos:column="67">= <expr><call><name><name pos:line="73" pos:column="69">rs</name><op:operator pos:line="73" pos:column="71">.</op:operator><name pos:line="73" pos:column="72">getDouble</name></name><argument_list pos:line="73" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="82">"ReqdMinimumWorkExperience"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="73" pos:column="111">//--------retrieve the work ex and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="75" pos:column="41">DBAnnotation</name><op:operator pos:line="75" pos:column="53">.</op:operator><name pos:line="75" pos:column="54">annoate</name></name><argument_list pos:line="75" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="62">"retreivedSkill1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="81">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="96">"ReqdSkillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="75" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="76" pos:column="41">boolean</name></type> <name pos:line="76" pos:column="49">retreivedSkill1</name> <init pos:line="76" pos:column="65">= <expr><call><name><name pos:line="76" pos:column="67">rs</name><op:operator pos:line="76" pos:column="69">.</op:operator><name pos:line="76" pos:column="70">getBoolean</name></name><argument_list pos:line="76" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="81">"ReqdSkillset1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="76" pos:column="98">//--------retrieve the skill1 and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="78" pos:column="41">DBAnnotation</name><op:operator pos:line="78" pos:column="53">.</op:operator><name pos:line="78" pos:column="54">annoate</name></name><argument_list pos:line="78" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="62">"retreivedSkill2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="81">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="78" pos:column="96">"ReqdSkillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="78" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="79" pos:column="41">boolean</name></type> <name pos:line="79" pos:column="49">retreivedSkill2</name> <init pos:line="79" pos:column="65">= <expr><call><name><name pos:line="79" pos:column="67">rs</name><op:operator pos:line="79" pos:column="69">.</op:operator><name pos:line="79" pos:column="70">getBoolean</name></name><argument_list pos:line="79" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="81">"ReqdSkillset2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="79" pos:column="98">//--------retrieve the skill2 and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="81" pos:column="41">DBAnnotation</name><op:operator pos:line="81" pos:column="53">.</op:operator><name pos:line="81" pos:column="54">annoate</name></name><argument_list pos:line="81" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="62">"retreivedSkill3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="81">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="96">"ReqdSkillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="81" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="82" pos:column="41">boolean</name></type> <name pos:line="82" pos:column="49">retreivedSkill3</name> <init pos:line="82" pos:column="65">= <expr><call><name><name pos:line="82" pos:column="67">rs</name><op:operator pos:line="82" pos:column="69">.</op:operator><name pos:line="82" pos:column="70">getBoolean</name></name><argument_list pos:line="82" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="81">"ReqdSkillset3"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="82" pos:column="98">//--------retrieve the skill3 and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="84" pos:column="41">DBAnnotation</name><op:operator pos:line="84" pos:column="53">.</op:operator><name pos:line="84" pos:column="54">annoate</name></name><argument_list pos:line="84" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="62">"retreivedSkill4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="81">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="96">"ReqdSkillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="84" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="85" pos:column="41">boolean</name></type> <name pos:line="85" pos:column="49">retreivedSkill4</name> <init pos:line="85" pos:column="65">= <expr><call><name><name pos:line="85" pos:column="67">rs</name><op:operator pos:line="85" pos:column="69">.</op:operator><name pos:line="85" pos:column="70">getBoolean</name></name><argument_list pos:line="85" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="81">"ReqdSkillset4"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="85" pos:column="98">//--------retrieve the skill4 and store it in a local variable</comment>
					
					<expr_stmt><expr><call><name><name pos:line="87" pos:column="41">DBAnnotation</name><op:operator pos:line="87" pos:column="53">.</op:operator><name pos:line="87" pos:column="54">annoate</name></name><argument_list pos:line="87" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="62">"retreivedSkill5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="81">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="96">"ReqdSkillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="87" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="88" pos:column="41">boolean</name></type> <name pos:line="88" pos:column="49">retreivedSkill5</name> <init pos:line="88" pos:column="65">= <expr><call><name><name pos:line="88" pos:column="67">rs</name><op:operator pos:line="88" pos:column="69">.</op:operator><name pos:line="88" pos:column="70">getBoolean</name></name><argument_list pos:line="88" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="81">"ReqdSkillset5"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="88" pos:column="98">//--------retrieve the skill5 and store it in a local variable</comment>

					<comment type="block" pos:line="90" pos:column="41">/*initialize the retrieved variables as the class variables*/</comment>
					
					<expr_stmt><expr><name><name pos:line="92" pos:column="41">this</name><op:operator pos:line="92" pos:column="45">.</op:operator><name pos:line="92" pos:column="46">jobID</name></name> <op:operator pos:line="92" pos:column="52">=</op:operator> <name pos:line="92" pos:column="54">retreivedjobID</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="93" pos:column="41">this</name><op:operator pos:line="93" pos:column="45">.</op:operator><name pos:line="93" pos:column="46">postedByUIN</name></name> <op:operator pos:line="93" pos:column="58">=</op:operator> <name pos:line="93" pos:column="60">whoPostedUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="94" pos:column="41">this</name><op:operator pos:line="94" pos:column="45">.</op:operator><name pos:line="94" pos:column="46">jobInDepartment</name></name> <op:operator pos:line="94" pos:column="62">=</op:operator> <name pos:line="94" pos:column="64">jobInDept</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="95" pos:column="41">this</name><op:operator pos:line="95" pos:column="45">.</op:operator><name pos:line="95" pos:column="46">reqdMinimumGPA</name></name> <op:operator pos:line="95" pos:column="61">=</op:operator> <name pos:line="95" pos:column="63">minimumReqdGPA</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="96" pos:column="41">this</name><op:operator pos:line="96" pos:column="45">.</op:operator><name pos:line="96" pos:column="46">reqdMinimumWorkExperience</name></name> <op:operator pos:line="96" pos:column="72">=</op:operator> <name pos:line="96" pos:column="74">minimumReqdWorkExp</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="97" pos:column="41">this</name><op:operator pos:line="97" pos:column="45">.</op:operator><name pos:line="97" pos:column="46">skillset1</name></name> <op:operator pos:line="97" pos:column="56">=</op:operator> <name pos:line="97" pos:column="58">retreivedSkill1</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="98" pos:column="41">this</name><op:operator pos:line="98" pos:column="45">.</op:operator><name pos:line="98" pos:column="46">skillset2</name></name> <op:operator pos:line="98" pos:column="56">=</op:operator> <name pos:line="98" pos:column="58">retreivedSkill2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="99" pos:column="41">this</name><op:operator pos:line="99" pos:column="45">.</op:operator><name pos:line="99" pos:column="46">skillset3</name></name> <op:operator pos:line="99" pos:column="56">=</op:operator> <name pos:line="99" pos:column="58">retreivedSkill3</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="100" pos:column="41">this</name><op:operator pos:line="100" pos:column="45">.</op:operator><name pos:line="100" pos:column="46">skillset4</name></name> <op:operator pos:line="100" pos:column="56">=</op:operator> <name pos:line="100" pos:column="58">retreivedSkill4</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="101" pos:column="41">this</name><op:operator pos:line="101" pos:column="45">.</op:operator><name pos:line="101" pos:column="46">skillset5</name></name> <op:operator pos:line="101" pos:column="56">=</op:operator> <name pos:line="101" pos:column="58">retreivedSkill5</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="102" pos:column="41">this</name><op:operator pos:line="102" pos:column="45">.</op:operator><name pos:line="102" pos:column="46">professor</name></name> <op:operator pos:line="102" pos:column="56">=</op:operator> <op:operator pos:line="102" pos:column="58">new</op:operator> <call><name pos:line="102" pos:column="62">Professor</name><argument_list pos:line="102" pos:column="71">(<argument><expr><name><name pos:line="102" pos:column="72">this</name><op:operator pos:line="102" pos:column="76">.</op:operator><name pos:line="102" pos:column="77">postedByUIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>

				<else pos:line="105" pos:column="33">else <block pos:line="105" pos:column="38">{
					<comment type="line" pos:line="106" pos:column="41">//else the job ID does not exist</comment>
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">System</name><op:operator pos:line="107" pos:column="47">.</op:operator><name pos:line="107" pos:column="48">out</name><op:operator pos:line="107" pos:column="51">.</op:operator><name pos:line="107" pos:column="52">println</name></name><argument_list pos:line="107" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="60">"Job ID does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="112" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="113" pos:column="25">catch <parameter_list pos:line="113" pos:column="31">(<param><decl><type><name pos:line="113" pos:column="32">SQLException</name></type> <name pos:line="113" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">e</name><op:operator pos:line="114" pos:column="34">.</op:operator><name pos:line="114" pos:column="35">printStackTrace</name></name><argument_list pos:line="114" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="115" pos:column="33">System</name><op:operator pos:line="115" pos:column="39">.</op:operator><name pos:line="115" pos:column="40">out</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">println</name></name><argument_list pos:line="115" pos:column="51">(<argument><expr><name pos:line="115" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="119" pos:column="25">finally <block pos:line="119" pos:column="33">{

				<comment type="line" pos:line="121" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="124" pos:column="17">//catch block</comment>
		<catch pos:line="125" pos:column="17">catch <parameter_list pos:line="125" pos:column="23">(<param><decl><type><name pos:line="125" pos:column="24">Exception</name></type> <name pos:line="125" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="125" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="126" pos:column="25">e</name><op:operator pos:line="126" pos:column="26">.</op:operator><name pos:line="126" pos:column="27">printStackTrace</name></name><argument_list pos:line="126" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="127" pos:column="25">System</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">out</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">println</name></name><argument_list pos:line="127" pos:column="43">(<argument><expr><name pos:line="127" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="131" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="133" pos:column="17">finally <block pos:line="133" pos:column="25">{

			<comment type="line" pos:line="135" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>

	<comment type="block" pos:line="140" pos:column="9">/*post job takes the posted by UIN and the required job posting credentials and then adds it to the job posting table*/</comment>
	<function><type><specifier pos:line="141" pos:column="9">public</specifier> <specifier pos:line="141" pos:column="16">static</specifier> <name pos:line="141" pos:column="23">int</name></type> <name pos:line="141" pos:column="27">postJob</name><parameter_list pos:line="141" pos:column="34">(<param><decl><type><name pos:line="141" pos:column="35">int</name></type> <name pos:line="141" pos:column="39">postedByUIN</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="52">int</name></type> <name pos:line="141" pos:column="56">jobInDepartment</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="73">double</name></type> <name pos:line="141" pos:column="80">reqdMinimumGPA</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="96">double</name></type> <name pos:line="141" pos:column="103">reqdMinimumWorkExperience</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="130">boolean</name></type> <name pos:line="141" pos:column="138">skillset1</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="149">boolean</name></type> <name pos:line="141" pos:column="157">skillset2</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="168">boolean</name></type> <name pos:line="141" pos:column="176">skillset3</name></decl></param>,<param><decl><type><name pos:line="141" pos:column="186">boolean</name></type> <name pos:line="141" pos:column="194">skillset4</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="205">boolean</name></type> <name pos:line="141" pos:column="213">skillset5</name></decl></param>)</parameter_list> <throws pos:line="141" pos:column="224">throws <argument><expr><name pos:line="141" pos:column="231">NoPermissionException</name></expr></argument></throws> <block pos:line="141" pos:column="253">{

		<comment type="line" pos:line="143" pos:column="17">// check the level of the person who is posting it</comment>
		<comment type="line" pos:line="144" pos:column="17">// ---------&gt; if not prof, then return level exception</comment>

		<decl_stmt><decl><type><name pos:line="146" pos:column="17">int</name></type> <name pos:line="146" pos:column="21">retreivedJobID</name> <init pos:line="146" pos:column="36">= <expr><op:operator pos:line="146" pos:column="38">-</op:operator><lit:literal type="number" pos:line="146" pos:column="39">1</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="148" pos:column="17">boolean</name></type> <name pos:line="148" pos:column="25">checkLevel</name> <init pos:line="148" pos:column="36">= <expr><call><name pos:line="148" pos:column="38">checkEligibility</name><argument_list pos:line="148" pos:column="54">(<argument><expr><name pos:line="148" pos:column="55">postedByUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="148" pos:column="68">//check if its prof posting the job</comment>

		<if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><name pos:line="150" pos:column="21">checkLevel</name></expr>)</condition><then pos:line="150" pos:column="32"> <block pos:line="150" pos:column="33">{

			<try pos:line="152" pos:column="25">try <block pos:line="152" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="153" pos:column="33">Connection</name></type> <name pos:line="153" pos:column="44">conn</name> <init pos:line="153" pos:column="49">= <expr><call><name><name pos:line="153" pos:column="51">Database</name><op:operator pos:line="153" pos:column="59">.</op:operator><name pos:line="153" pos:column="60">getConnection</name></name><argument_list pos:line="153" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="153" pos:column="76">//get the connection</comment>
				<decl_stmt><decl><type><name pos:line="154" pos:column="33">String</name></type> <name pos:line="154" pos:column="40">SQLJobInsert</name> <init pos:line="154" pos:column="53">= <expr><lit:literal type="string" pos:line="154" pos:column="55">""</lit:literal></expr></init></decl>;</decl_stmt>
				<try pos:line="155" pos:column="33">try <block pos:line="155" pos:column="37">{

					<if pos:line="157" pos:column="41">if <condition pos:line="157" pos:column="44">(<expr><name pos:line="157" pos:column="45">conn</name> <op:operator pos:line="157" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="157" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="157" pos:column="58"> <block pos:line="157" pos:column="59">{
						<comment type="line" pos:line="158" pos:column="49">//write the query</comment>
						<expr_stmt><expr><name pos:line="159" pos:column="49">SQLJobInsert</name> <op:operator pos:line="159" pos:column="62">=</op:operator> <lit:literal type="string" pos:line="159" pos:column="64">"Insert into jobpostings (PostedByUIN,JobInDepartment,ReqdMinimumGPA,"</lit:literal>
								<op:operator pos:line="160" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="160" pos:column="67">"ReqdMinimumWorkExperience,"</lit:literal>
								<op:operator pos:line="161" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="161" pos:column="67">"ReqdSkillset1,ReqdSkillset2,ReqdSkillset3,ReqdSkillset4,ReqdSkillset5) "</lit:literal>
								<op:operator pos:line="162" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="162" pos:column="67">"values (?,?,?,?,?,?,?,?,?);"</lit:literal></expr>;</expr_stmt>

						<decl_stmt><decl><type><name pos:line="164" pos:column="49">PreparedStatement</name></type> <name pos:line="164" pos:column="67">stmtForSelect</name> <init pos:line="164" pos:column="81">= <expr><call><name><name pos:line="164" pos:column="83">conn</name><op:operator pos:line="164" pos:column="87">.</op:operator><name pos:line="164" pos:column="88">prepareStatement</name></name><argument_list pos:line="164" pos:column="104">(<argument><expr><name pos:line="164" pos:column="105">SQLJobInsert</name></expr></argument>,<argument><expr><name><name pos:line="164" pos:column="118">Statement</name><op:operator pos:line="164" pos:column="127">.</op:operator><name pos:line="164" pos:column="128">RETURN_GENERATED_KEYS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<comment type="line" pos:line="166" pos:column="49">//set the values for the query </comment>
						
						<expr_stmt><expr><call><name><name pos:line="168" pos:column="49">stmtForSelect</name><op:operator pos:line="168" pos:column="62">.</op:operator><name pos:line="168" pos:column="63">setInt</name></name><argument_list pos:line="168" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="168" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><name pos:line="168" pos:column="73">postedByUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="169" pos:column="49">stmtForSelect</name><op:operator pos:line="169" pos:column="62">.</op:operator><name pos:line="169" pos:column="63">setInt</name></name><argument_list pos:line="169" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="169" pos:column="70">2</lit:literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="73">jobInDepartment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="170" pos:column="49">stmtForSelect</name><op:operator pos:line="170" pos:column="62">.</op:operator><name pos:line="170" pos:column="63">setDouble</name></name><argument_list pos:line="170" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="170" pos:column="73">3</lit:literal></expr></argument>, <argument><expr><name pos:line="170" pos:column="76">reqdMinimumGPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="171" pos:column="49">stmtForSelect</name><op:operator pos:line="171" pos:column="62">.</op:operator><name pos:line="171" pos:column="63">setDouble</name></name><argument_list pos:line="171" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="73">4</lit:literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="76">reqdMinimumWorkExperience</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="172" pos:column="49">stmtForSelect</name><op:operator pos:line="172" pos:column="62">.</op:operator><name pos:line="172" pos:column="63">setBoolean</name></name><argument_list pos:line="172" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="172" pos:column="74">5</lit:literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="77">skillset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="173" pos:column="49">stmtForSelect</name><op:operator pos:line="173" pos:column="62">.</op:operator><name pos:line="173" pos:column="63">setBoolean</name></name><argument_list pos:line="173" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="74">6</lit:literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="77">skillset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="174" pos:column="49">stmtForSelect</name><op:operator pos:line="174" pos:column="62">.</op:operator><name pos:line="174" pos:column="63">setBoolean</name></name><argument_list pos:line="174" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="74">7</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="77">skillset3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="175" pos:column="49">stmtForSelect</name><op:operator pos:line="175" pos:column="62">.</op:operator><name pos:line="175" pos:column="63">setBoolean</name></name><argument_list pos:line="175" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="74">8</lit:literal></expr></argument>, <argument><expr><name pos:line="175" pos:column="77">skillset4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="176" pos:column="49">stmtForSelect</name><op:operator pos:line="176" pos:column="62">.</op:operator><name pos:line="176" pos:column="63">setBoolean</name></name><argument_list pos:line="176" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="176" pos:column="74">9</lit:literal></expr></argument>, <argument><expr><name pos:line="176" pos:column="77">skillset5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name><name pos:line="178" pos:column="49">System</name><op:operator pos:line="178" pos:column="55">.</op:operator><name pos:line="178" pos:column="56">out</name><op:operator pos:line="178" pos:column="59">.</op:operator><name pos:line="178" pos:column="60">println</name></name><argument_list pos:line="178" pos:column="67">(<argument><expr><name pos:line="178" pos:column="68">stmtForSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="179" pos:column="49">int</name></type> <name pos:line="179" pos:column="53">i</name> <init pos:line="179" pos:column="55">= <expr><call><name><name pos:line="179" pos:column="57">stmtForSelect</name><op:operator pos:line="179" pos:column="70">.</op:operator><name pos:line="179" pos:column="71">executeUpdate</name></name><argument_list pos:line="179" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="179" pos:column="87">//execute the query</comment>
																		
						<expr_stmt><expr><call><name><name pos:line="181" pos:column="49">DBAnnotation</name><op:operator pos:line="181" pos:column="61">.</op:operator><name pos:line="181" pos:column="62">annoate</name></name><argument_list pos:line="181" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="70">"postedByUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="181" pos:column="85">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="181" pos:column="100">"PostedByUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="181" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="182" pos:column="49">DBAnnotation</name><op:operator pos:line="182" pos:column="61">.</op:operator><name pos:line="182" pos:column="62">annoate</name></name><argument_list pos:line="182" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="70">"jobInDepartment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="89">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="104">"JobInDepartment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="182" pos:column="123">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="183" pos:column="49">DBAnnotation</name><op:operator pos:line="183" pos:column="61">.</op:operator><name pos:line="183" pos:column="62">annoate</name></name><argument_list pos:line="183" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="70">"reqdMinimumGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="183" pos:column="88">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="183" pos:column="103">"ReqdMinimumGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="183" pos:column="121">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="184" pos:column="49">DBAnnotation</name><op:operator pos:line="184" pos:column="61">.</op:operator><name pos:line="184" pos:column="62">annoate</name></name><argument_list pos:line="184" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="70">"reqdMinimumWorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="99">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="184" pos:column="114">"ReqdMinimumWorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="184" pos:column="143">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="185" pos:column="49">DBAnnotation</name><op:operator pos:line="185" pos:column="61">.</op:operator><name pos:line="185" pos:column="62">annoate</name></name><argument_list pos:line="185" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="70">"skillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="98">"ReqdSkillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="185" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="186" pos:column="49">DBAnnotation</name><op:operator pos:line="186" pos:column="61">.</op:operator><name pos:line="186" pos:column="62">annoate</name></name><argument_list pos:line="186" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="70">"skillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="186" pos:column="98">"ReqdSkillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="186" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="187" pos:column="49">DBAnnotation</name><op:operator pos:line="187" pos:column="61">.</op:operator><name pos:line="187" pos:column="62">annoate</name></name><argument_list pos:line="187" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="70">"skillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="187" pos:column="98">"ReqdSkillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="187" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="188" pos:column="49">DBAnnotation</name><op:operator pos:line="188" pos:column="61">.</op:operator><name pos:line="188" pos:column="62">annoate</name></name><argument_list pos:line="188" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="70">"skillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="98">"ReqdSkillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="188" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="189" pos:column="49">DBAnnotation</name><op:operator pos:line="189" pos:column="61">.</op:operator><name pos:line="189" pos:column="62">annoate</name></name><argument_list pos:line="189" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="70">"skillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="98">"ReqdSkillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="189" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						
						<expr_stmt><expr><call><name><name pos:line="191" pos:column="49">System</name><op:operator pos:line="191" pos:column="55">.</op:operator><name pos:line="191" pos:column="56">out</name><op:operator pos:line="191" pos:column="59">.</op:operator><name pos:line="191" pos:column="60">println</name></name><argument_list pos:line="191" pos:column="67">(<argument><expr><name pos:line="191" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<decl_stmt><decl><type><name pos:line="193" pos:column="49">ResultSet</name></type> <name pos:line="193" pos:column="59">rs</name> <init pos:line="193" pos:column="62">= <expr><call><name><name pos:line="193" pos:column="64">stmtForSelect</name><op:operator pos:line="193" pos:column="77">.</op:operator><name pos:line="193" pos:column="78">getGeneratedKeys</name></name><argument_list pos:line="193" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="194" pos:column="49">if <condition pos:line="194" pos:column="52">(<expr><call><name><name pos:line="194" pos:column="53">rs</name><op:operator pos:line="194" pos:column="55">.</op:operator><name pos:line="194" pos:column="56">first</name></name><argument_list pos:line="194" pos:column="61">()</argument_list></call></expr>)</condition><then pos:line="194" pos:column="64"> <block pos:line="194" pos:column="65">{
							<expr_stmt><expr><name pos:line="195" pos:column="57">retreivedJobID</name> <op:operator pos:line="195" pos:column="72">=</op:operator> <call><name><name pos:line="195" pos:column="74">rs</name><op:operator pos:line="195" pos:column="76">.</op:operator><name pos:line="195" pos:column="77">getInt</name></name><argument_list pos:line="195" pos:column="83">(<argument><expr><lit:literal type="number" pos:line="195" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="196" pos:column="57">System</name><op:operator pos:line="196" pos:column="63">.</op:operator><name pos:line="196" pos:column="64">out</name><op:operator pos:line="196" pos:column="67">.</op:operator><name pos:line="196" pos:column="68">println</name></name><argument_list pos:line="196" pos:column="75">(<argument><expr><name pos:line="196" pos:column="76">retreivedJobID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="196" pos:column="92">//retrieve the added Job ID</comment>
							<expr_stmt><expr><call><name><name pos:line="197" pos:column="57">System</name><op:operator pos:line="197" pos:column="63">.</op:operator><name pos:line="197" pos:column="64">out</name><op:operator pos:line="197" pos:column="67">.</op:operator><name pos:line="197" pos:column="68">println</name></name><argument_list pos:line="197" pos:column="75">(<argument><expr><name pos:line="197" pos:column="76">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="198" pos:column="57">System</name><op:operator pos:line="198" pos:column="63">.</op:operator><name pos:line="198" pos:column="64">out</name><op:operator pos:line="198" pos:column="67">.</op:operator><name pos:line="198" pos:column="68">println</name></name><argument_list pos:line="198" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="76">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="200" pos:column="57">Database</name><op:operator pos:line="200" pos:column="65">.</op:operator><name pos:line="200" pos:column="66">commitTransaction</name></name><argument_list pos:line="200" pos:column="83">(<argument><expr><name pos:line="200" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="200" pos:column="90">//commit the transaction</comment>
						}</block></then></if>

					}</block></then></if>

				}</block>
				<comment type="line" pos:line="206" pos:column="33">//catch block for SQL exception</comment>
				<catch pos:line="207" pos:column="33">catch <parameter_list pos:line="207" pos:column="39">(<param><decl><type><name pos:line="207" pos:column="40">SQLException</name></type> <name pos:line="207" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="207" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="208" pos:column="41">e</name><op:operator pos:line="208" pos:column="42">.</op:operator><name pos:line="208" pos:column="43">printStackTrace</name></name><argument_list pos:line="208" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="209" pos:column="41">System</name><op:operator pos:line="209" pos:column="47">.</op:operator><name pos:line="209" pos:column="48">out</name><op:operator pos:line="209" pos:column="51">.</op:operator><name pos:line="209" pos:column="52">println</name></name><argument_list pos:line="209" pos:column="59">(<argument><expr><name pos:line="209" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></catch>

				<finally pos:line="213" pos:column="33">finally <block pos:line="213" pos:column="41">{

					<comment type="line" pos:line="215" pos:column="41">// System.out.println("retrieved");</comment>
				}</block></finally></try>
			}</block>
			<comment type="line" pos:line="218" pos:column="25">//catch block </comment>
			<catch pos:line="219" pos:column="25">catch <parameter_list pos:line="219" pos:column="31">(<param><decl><type><name pos:line="219" pos:column="32">Exception</name></type> <name pos:line="219" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">e</name><op:operator pos:line="220" pos:column="34">.</op:operator><name pos:line="220" pos:column="35">printStackTrace</name></name><argument_list pos:line="220" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">System</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">out</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">println</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="224" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
			<finally pos:line="226" pos:column="25">finally <block pos:line="226" pos:column="33">{

				<comment type="line" pos:line="228" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>

		}</block></then>

		<else pos:line="233" pos:column="17">else <block pos:line="233" pos:column="22">{
			<comment type="line" pos:line="234" pos:column="25">//if the permision does not peromit then throw this exception</comment>
			<throw pos:line="235" pos:column="25">throw <expr><op:operator pos:line="235" pos:column="31">new</op:operator> <call><name pos:line="235" pos:column="35">NoPermissionException</name><argument_list pos:line="235" pos:column="56">()</argument_list></call></expr>;</throw>
		}</block></else></if>

		<comment type="line" pos:line="238" pos:column="17">// added the job posting to the db</comment>

		<return pos:line="240" pos:column="17">return <expr><name pos:line="240" pos:column="24">retreivedJobID</name></expr>;</return>

	}</block></function>

	<function><type><specifier pos:line="244" pos:column="9">public</specifier> <specifier pos:line="244" pos:column="16">static</specifier> <name pos:line="244" pos:column="23">boolean</name></type> <name pos:line="244" pos:column="31">updateJob</name><parameter_list pos:line="244" pos:column="40">(<param><decl><type><name pos:line="244" pos:column="41">int</name></type> <name pos:line="244" pos:column="45">postedByUIN</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="58">int</name></type> <name pos:line="244" pos:column="62">jobInDepartment</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="79">double</name></type> <name pos:line="244" pos:column="86">reqdMinimumGPA</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="102">double</name></type> <name pos:line="244" pos:column="109">reqdMinimumWorkExperience</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="136">boolean</name></type> <name pos:line="244" pos:column="144">skillset1</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="155">boolean</name></type> <name pos:line="244" pos:column="163">skillset2</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="174">boolean</name></type> <name pos:line="244" pos:column="182">skillset3</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="193">boolean</name></type> <name pos:line="244" pos:column="201">skillset4</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="212">boolean</name></type> <name pos:line="244" pos:column="220">skillset5</name></decl></param>)</parameter_list> <throws pos:line="244" pos:column="231">throws <argument><expr><name pos:line="244" pos:column="238">NoPermissionException</name></expr></argument></throws> <block pos:line="244" pos:column="260">{

		<comment type="line" pos:line="246" pos:column="17">// check the level of the person who is posting it</comment>
		<comment type="line" pos:line="247" pos:column="17">// ---------&gt; if not prof, then return level exception</comment>

		<decl_stmt><decl><type><name pos:line="249" pos:column="17">boolean</name></type> <name pos:line="249" pos:column="25">isAdded</name> <init pos:line="249" pos:column="33">= <expr><lit:literal type="boolean" pos:line="249" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="250" pos:column="17">int</name></type> <name pos:line="250" pos:column="21">retreivedJobID</name> <init pos:line="250" pos:column="36">= <expr><op:operator pos:line="250" pos:column="38">-</op:operator><lit:literal type="number" pos:line="250" pos:column="39">1</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="252" pos:column="17">boolean</name></type> <name pos:line="252" pos:column="25">checkLevel</name> <init pos:line="252" pos:column="36">= <expr><call><name pos:line="252" pos:column="38">checkEligibility</name><argument_list pos:line="252" pos:column="54">(<argument><expr><name pos:line="252" pos:column="55">postedByUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="252" pos:column="68">//check whos updaing the job </comment>

		<if pos:line="254" pos:column="17">if <condition pos:line="254" pos:column="20">(<expr><name pos:line="254" pos:column="21">checkLevel</name></expr>)</condition><then pos:line="254" pos:column="32"> <block pos:line="254" pos:column="33">{

			<try pos:line="256" pos:column="25">try <block pos:line="256" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="257" pos:column="33">Connection</name></type> <name pos:line="257" pos:column="44">conn</name> <init pos:line="257" pos:column="49">= <expr><call><name><name pos:line="257" pos:column="51">Database</name><op:operator pos:line="257" pos:column="59">.</op:operator><name pos:line="257" pos:column="60">getConnection</name></name><argument_list pos:line="257" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="257" pos:column="76">//get the conn</comment>
				<decl_stmt><decl><type><name pos:line="258" pos:column="33">String</name></type> <name pos:line="258" pos:column="40">SQLJobInsert</name> <init pos:line="258" pos:column="53">= <expr><lit:literal type="string" pos:line="258" pos:column="55">""</lit:literal></expr></init></decl>;</decl_stmt>
				<try pos:line="259" pos:column="33">try <block pos:line="259" pos:column="37">{

					<if pos:line="261" pos:column="41">if <condition pos:line="261" pos:column="44">(<expr><name pos:line="261" pos:column="45">conn</name> <op:operator pos:line="261" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="261" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="261" pos:column="58"> <block pos:line="261" pos:column="59">{
						<comment type="line" pos:line="262" pos:column="49">//write the query</comment>
						<expr_stmt><expr><name pos:line="263" pos:column="49">SQLJobInsert</name> <op:operator pos:line="263" pos:column="62">=</op:operator> <lit:literal type="string" pos:line="263" pos:column="64">"UPDATE jobpostings SET ReqdMinimumGPA=?,"</lit:literal>
								<op:operator pos:line="264" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="264" pos:column="67">"ReqdMinimumWorkExperience=?,"</lit:literal>
								<op:operator pos:line="265" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="265" pos:column="67">"ReqdSkillset1=?,ReqdSkillset2=?,ReqdSkillset3=?,ReqdSkillset4=?,ReqdSkillset5=? "</lit:literal>
								<op:operator pos:line="266" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="266" pos:column="67">"where PostedByUIN=?;"</lit:literal></expr>;</expr_stmt>

						<decl_stmt><decl><type><name pos:line="268" pos:column="49">PreparedStatement</name></type> <name pos:line="268" pos:column="67">stmtForSelect</name> <init pos:line="268" pos:column="81">= <expr><call><name><name pos:line="268" pos:column="83">conn</name><op:operator pos:line="268" pos:column="87">.</op:operator><name pos:line="268" pos:column="88">prepareStatement</name></name><argument_list pos:line="268" pos:column="104">(<argument><expr><name pos:line="268" pos:column="105">SQLJobInsert</name></expr></argument>,<argument><expr><name><name pos:line="268" pos:column="118">Statement</name><op:operator pos:line="268" pos:column="127">.</op:operator><name pos:line="268" pos:column="128">RETURN_GENERATED_KEYS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<comment type="line" pos:line="270" pos:column="49">//set the values for the query</comment>
						<expr_stmt><expr><call><name><name pos:line="271" pos:column="49">stmtForSelect</name><op:operator pos:line="271" pos:column="62">.</op:operator><name pos:line="271" pos:column="63">setDouble</name></name><argument_list pos:line="271" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="271" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="271" pos:column="76">reqdMinimumGPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="272" pos:column="49">stmtForSelect</name><op:operator pos:line="272" pos:column="62">.</op:operator><name pos:line="272" pos:column="63">setDouble</name></name><argument_list pos:line="272" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="272" pos:column="73">2</lit:literal></expr></argument>, <argument><expr><name pos:line="272" pos:column="76">reqdMinimumWorkExperience</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="273" pos:column="49">stmtForSelect</name><op:operator pos:line="273" pos:column="62">.</op:operator><name pos:line="273" pos:column="63">setBoolean</name></name><argument_list pos:line="273" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="273" pos:column="74">3</lit:literal></expr></argument>, <argument><expr><name pos:line="273" pos:column="77">skillset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="274" pos:column="49">stmtForSelect</name><op:operator pos:line="274" pos:column="62">.</op:operator><name pos:line="274" pos:column="63">setBoolean</name></name><argument_list pos:line="274" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="274" pos:column="74">4</lit:literal></expr></argument>, <argument><expr><name pos:line="274" pos:column="77">skillset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="275" pos:column="49">stmtForSelect</name><op:operator pos:line="275" pos:column="62">.</op:operator><name pos:line="275" pos:column="63">setBoolean</name></name><argument_list pos:line="275" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="275" pos:column="74">5</lit:literal></expr></argument>, <argument><expr><name pos:line="275" pos:column="77">skillset3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="276" pos:column="49">stmtForSelect</name><op:operator pos:line="276" pos:column="62">.</op:operator><name pos:line="276" pos:column="63">setBoolean</name></name><argument_list pos:line="276" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="276" pos:column="74">6</lit:literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="77">skillset4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="277" pos:column="49">stmtForSelect</name><op:operator pos:line="277" pos:column="62">.</op:operator><name pos:line="277" pos:column="63">setBoolean</name></name><argument_list pos:line="277" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="277" pos:column="74">7</lit:literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="77">skillset5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="278" pos:column="49">stmtForSelect</name><op:operator pos:line="278" pos:column="62">.</op:operator><name pos:line="278" pos:column="63">setInt</name></name><argument_list pos:line="278" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="278" pos:column="70">8</lit:literal></expr></argument>, <argument><expr><name pos:line="278" pos:column="73">postedByUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name><name pos:line="280" pos:column="49">System</name><op:operator pos:line="280" pos:column="55">.</op:operator><name pos:line="280" pos:column="56">out</name><op:operator pos:line="280" pos:column="59">.</op:operator><name pos:line="280" pos:column="60">println</name></name><argument_list pos:line="280" pos:column="67">(<argument><expr><name pos:line="280" pos:column="68">stmtForSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="281" pos:column="49">int</name></type> <name pos:line="281" pos:column="53">i</name> <init pos:line="281" pos:column="55">= <expr><call><name><name pos:line="281" pos:column="57">stmtForSelect</name><op:operator pos:line="281" pos:column="70">.</op:operator><name pos:line="281" pos:column="71">executeUpdate</name></name><argument_list pos:line="281" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="281" pos:column="87">//execute the query</comment>
																		
						<expr_stmt><expr><call><name><name pos:line="283" pos:column="49">DBAnnotation</name><op:operator pos:line="283" pos:column="61">.</op:operator><name pos:line="283" pos:column="62">annoate</name></name><argument_list pos:line="283" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="70">"reqdMinimumGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="88">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="103">"ReqdMinimumGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="283" pos:column="121">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="284" pos:column="49">DBAnnotation</name><op:operator pos:line="284" pos:column="61">.</op:operator><name pos:line="284" pos:column="62">annoate</name></name><argument_list pos:line="284" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="284" pos:column="70">"reqdMinimumWorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="99">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="114">"ReqdMinimumWorkExperience"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="284" pos:column="143">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="285" pos:column="49">DBAnnotation</name><op:operator pos:line="285" pos:column="61">.</op:operator><name pos:line="285" pos:column="62">annoate</name></name><argument_list pos:line="285" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="70">"skillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="98">"ReqdSkillset1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="285" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="286" pos:column="49">DBAnnotation</name><op:operator pos:line="286" pos:column="61">.</op:operator><name pos:line="286" pos:column="62">annoate</name></name><argument_list pos:line="286" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="286" pos:column="70">"skillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="286" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="286" pos:column="98">"ReqdSkillset2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="286" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="287" pos:column="49">DBAnnotation</name><op:operator pos:line="287" pos:column="61">.</op:operator><name pos:line="287" pos:column="62">annoate</name></name><argument_list pos:line="287" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="70">"skillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="287" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="287" pos:column="98">"ReqdSkillset3"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="287" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>												
						<expr_stmt><expr><call><name><name pos:line="288" pos:column="49">DBAnnotation</name><op:operator pos:line="288" pos:column="61">.</op:operator><name pos:line="288" pos:column="62">annoate</name></name><argument_list pos:line="288" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="70">"skillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="288" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="288" pos:column="98">"ReqdSkillset4"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="288" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<expr_stmt><expr><call><name><name pos:line="289" pos:column="49">DBAnnotation</name><op:operator pos:line="289" pos:column="61">.</op:operator><name pos:line="289" pos:column="62">annoate</name></name><argument_list pos:line="289" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="289" pos:column="70">"skillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="83">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="98">"ReqdSkillset5"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="289" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
						<expr_stmt><expr><call><name><name pos:line="290" pos:column="49">DBAnnotation</name><op:operator pos:line="290" pos:column="61">.</op:operator><name pos:line="290" pos:column="62">annoate</name></name><argument_list pos:line="290" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="70">"postedByUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="85">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="100">"PostedByUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="290" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
						
						
						<expr_stmt><expr><call><name><name pos:line="293" pos:column="49">System</name><op:operator pos:line="293" pos:column="55">.</op:operator><name pos:line="293" pos:column="56">out</name><op:operator pos:line="293" pos:column="59">.</op:operator><name pos:line="293" pos:column="60">println</name></name><argument_list pos:line="293" pos:column="67">(<argument><expr><name pos:line="293" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="294" pos:column="49">ResultSet</name></type> <name pos:line="294" pos:column="59">rs</name> <init pos:line="294" pos:column="62">= <expr><call><name><name pos:line="294" pos:column="64">stmtForSelect</name><op:operator pos:line="294" pos:column="77">.</op:operator><name pos:line="294" pos:column="78">getGeneratedKeys</name></name><argument_list pos:line="294" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="295" pos:column="49">if <condition pos:line="295" pos:column="52">(<expr><call><name><name pos:line="295" pos:column="53">rs</name><op:operator pos:line="295" pos:column="55">.</op:operator><name pos:line="295" pos:column="56">first</name></name><argument_list pos:line="295" pos:column="61">()</argument_list></call></expr>)</condition><then pos:line="295" pos:column="64">
							<expr_stmt><expr><name pos:line="296" pos:column="57">retreivedJobID</name> <op:operator pos:line="296" pos:column="72">=</op:operator> <call><name><name pos:line="296" pos:column="74">rs</name><op:operator pos:line="296" pos:column="76">.</op:operator><name pos:line="296" pos:column="77">getInt</name></name><argument_list pos:line="296" pos:column="83">(<argument><expr><lit:literal type="number" pos:line="296" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if><comment type="line" pos:line="296" pos:column="87">//retrieve the added UIN</comment>
						<expr_stmt><expr><call><name><name pos:line="297" pos:column="49">System</name><op:operator pos:line="297" pos:column="55">.</op:operator><name pos:line="297" pos:column="56">out</name><op:operator pos:line="297" pos:column="59">.</op:operator><name pos:line="297" pos:column="60">println</name></name><argument_list pos:line="297" pos:column="67">(<argument><expr><name pos:line="297" pos:column="68">retreivedJobID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="298" pos:column="49">System</name><op:operator pos:line="298" pos:column="55">.</op:operator><name pos:line="298" pos:column="56">out</name><op:operator pos:line="298" pos:column="59">.</op:operator><name pos:line="298" pos:column="60">println</name></name><argument_list pos:line="298" pos:column="67">(<argument><expr><name pos:line="298" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="299" pos:column="49">System</name><op:operator pos:line="299" pos:column="55">.</op:operator><name pos:line="299" pos:column="56">out</name><op:operator pos:line="299" pos:column="59">.</op:operator><name pos:line="299" pos:column="60">println</name></name><argument_list pos:line="299" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="299" pos:column="68">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="300" pos:column="49">isAdded</name> <op:operator pos:line="300" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="300" pos:column="59">true</lit:literal></expr>;</expr_stmt>

						<expr_stmt><expr><call><name><name pos:line="302" pos:column="49">Database</name><op:operator pos:line="302" pos:column="57">.</op:operator><name pos:line="302" pos:column="58">commitTransaction</name></name><argument_list pos:line="302" pos:column="75">(<argument><expr><name pos:line="302" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="302" pos:column="82">//add it to the UIN</comment>

						<comment type="line" pos:line="304" pos:column="49">// get the students and put it in the linked hash map</comment>

						<decl_stmt><decl><type><name><name pos:line="306" pos:column="49">LinkedHashMap</name><argument_list pos:line="306" pos:column="62">&lt;<argument><name pos:line="306" pos:column="63">Integer</name></argument>, <argument><name pos:line="306" pos:column="72">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="306" pos:column="81">retrievedList</name> <init pos:line="306" pos:column="95">= <expr><call><name><name pos:line="306" pos:column="97">JobApplication</name><op:operator pos:line="306" pos:column="111">.</op:operator><name pos:line="306" pos:column="112">retreiveMatchingStudents</name></name><argument_list pos:line="306" pos:column="136">(<argument><expr><name pos:line="306" pos:column="137">reqdMinimumGPA</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="153">reqdMinimumWorkExperience</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="180">skillset1</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="191">skillset2</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="202">skillset3</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="213">skillset4</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="224">skillset5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<for pos:line="308" pos:column="49">for (<init><decl><type><name pos:line="308" pos:column="54">Integer</name></type> <name pos:line="308" pos:column="62">k</name> <range pos:line="308" pos:column="64">: <expr><call><name><name pos:line="308" pos:column="66">retrievedList</name><op:operator pos:line="308" pos:column="79">.</op:operator><name pos:line="308" pos:column="80">keySet</name></name><argument_list pos:line="308" pos:column="86">()</argument_list></call></expr></range></decl></init>) <block pos:line="308" pos:column="90">{
							<decl_stmt><decl><type><name pos:line="309" pos:column="57">Student</name></type> <name pos:line="309" pos:column="65">s</name> <init pos:line="309" pos:column="67">= <expr><call><name><name pos:line="309" pos:column="69">retrievedList</name><op:operator pos:line="309" pos:column="82">.</op:operator><name pos:line="309" pos:column="83">get</name></name><argument_list pos:line="309" pos:column="86">(<argument><expr><name pos:line="309" pos:column="87">k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="310" pos:column="57">System</name><op:operator pos:line="310" pos:column="63">.</op:operator><name pos:line="310" pos:column="64">out</name><op:operator pos:line="310" pos:column="67">.</op:operator><name pos:line="310" pos:column="68">println</name></name><argument_list pos:line="310" pos:column="75">(<argument><expr><call><name><name pos:line="310" pos:column="76">s</name><op:operator pos:line="310" pos:column="77">.</op:operator><name pos:line="310" pos:column="78">getUIN</name></name><argument_list pos:line="310" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


							<expr_stmt><expr><call><name><name pos:line="313" pos:column="57">Database</name><op:operator pos:line="313" pos:column="65">.</op:operator><name pos:line="313" pos:column="66">commitTransaction</name></name><argument_list pos:line="313" pos:column="83">(<argument><expr><name pos:line="313" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="313" pos:column="90">//commit the transaction</comment>


						}</block></for>

					}</block></then></if>

				}</block>
				<comment type="line" pos:line="321" pos:column="33">//catch thre sql exception</comment>
				<catch pos:line="322" pos:column="33">catch <parameter_list pos:line="322" pos:column="39">(<param><decl><type><name pos:line="322" pos:column="40">SQLException</name></type> <name pos:line="322" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="322" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="323" pos:column="41">e</name><op:operator pos:line="323" pos:column="42">.</op:operator><name pos:line="323" pos:column="43">printStackTrace</name></name><argument_list pos:line="323" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="324" pos:column="41">System</name><op:operator pos:line="324" pos:column="47">.</op:operator><name pos:line="324" pos:column="48">out</name><op:operator pos:line="324" pos:column="51">.</op:operator><name pos:line="324" pos:column="52">println</name></name><argument_list pos:line="324" pos:column="59">(<argument><expr><name pos:line="324" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></catch>

				<finally pos:line="328" pos:column="33">finally <block pos:line="328" pos:column="41">{

					<comment type="line" pos:line="330" pos:column="41">// System.out.println("retrieved");</comment>
				}</block></finally></try>
			}</block>
			<comment type="line" pos:line="333" pos:column="25">//catch block</comment>
			<catch pos:line="334" pos:column="25">catch <parameter_list pos:line="334" pos:column="31">(<param><decl><type><name pos:line="334" pos:column="32">Exception</name></type> <name pos:line="334" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="334" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="335" pos:column="33">e</name><op:operator pos:line="335" pos:column="34">.</op:operator><name pos:line="335" pos:column="35">printStackTrace</name></name><argument_list pos:line="335" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="336" pos:column="33">System</name><op:operator pos:line="336" pos:column="39">.</op:operator><name pos:line="336" pos:column="40">out</name><op:operator pos:line="336" pos:column="43">.</op:operator><name pos:line="336" pos:column="44">println</name></name><argument_list pos:line="336" pos:column="51">(<argument><expr><name pos:line="336" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="339" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
			<finally pos:line="341" pos:column="25">finally <block pos:line="341" pos:column="33">{

				<comment type="line" pos:line="343" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>

		}</block></then>

		<else pos:line="348" pos:column="17">else <block pos:line="348" pos:column="22">{

			<throw pos:line="350" pos:column="25">throw <expr><op:operator pos:line="350" pos:column="31">new</op:operator> <call><name pos:line="350" pos:column="35">NoPermissionException</name><argument_list pos:line="350" pos:column="56">()</argument_list></call></expr>;</throw>
		}</block></else></if>

		<comment type="line" pos:line="353" pos:column="17">// add the job posting to the db</comment>

		<return pos:line="355" pos:column="17">return <expr><name pos:line="355" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>

	<comment type="line" pos:line="359" pos:column="9">// Checks the eligibility to post--should be an employee to post</comment>

	<function><type><specifier pos:line="361" pos:column="9">public</specifier> <specifier pos:line="361" pos:column="16">static</specifier> <name pos:line="361" pos:column="23">boolean</name></type> <name pos:line="361" pos:column="31">checkEligibility</name><parameter_list pos:line="361" pos:column="47">(<param><decl><type><name pos:line="361" pos:column="48">int</name></type> <name pos:line="361" pos:column="52">UIN</name></decl></param>)</parameter_list> <block pos:line="361" pos:column="57">{

		<decl_stmt><decl><type><name pos:line="363" pos:column="17">boolean</name></type> <name pos:line="363" pos:column="25">check</name> <init pos:line="363" pos:column="31">= <expr><lit:literal type="boolean" pos:line="363" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="363" pos:column="39">//set the boolean to false</comment>

		<try pos:line="365" pos:column="17">try <block pos:line="365" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="366" pos:column="25">Connection</name></type> <name pos:line="366" pos:column="36">conn</name> <init pos:line="366" pos:column="41">= <expr><call><name><name pos:line="366" pos:column="43">Database</name><op:operator pos:line="366" pos:column="51">.</op:operator><name pos:line="366" pos:column="52">getConnection</name></name><argument_list pos:line="366" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="367" pos:column="25">String</name></type> <name pos:line="367" pos:column="32">SQLPeopleSelect</name> <init pos:line="367" pos:column="48">= <expr><lit:literal type="string" pos:line="367" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="368" pos:column="25">try <block pos:line="368" pos:column="29">{

				<if pos:line="370" pos:column="33">if <condition pos:line="370" pos:column="36">(<expr><name pos:line="370" pos:column="37">conn</name> <op:operator pos:line="370" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="370" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="370" pos:column="50"> <block pos:line="370" pos:column="51">{

					<expr_stmt><expr><name pos:line="372" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="372" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="372" pos:column="59">"Select PositionID From people where UIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="372" pos:column="104">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="375" pos:column="33">PreparedStatement</name></type> <name pos:line="375" pos:column="51">stmtForSelect</name> <init pos:line="375" pos:column="65">= <expr><call><name><name pos:line="375" pos:column="67">conn</name><op:operator pos:line="375" pos:column="71">.</op:operator><name pos:line="375" pos:column="72">prepareStatement</name></name><argument_list pos:line="375" pos:column="88">(<argument><expr><name pos:line="375" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="376" pos:column="33">stmtForSelect</name><op:operator pos:line="376" pos:column="46">.</op:operator><name pos:line="376" pos:column="47">setInt</name></name><argument_list pos:line="376" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="376" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="376" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="376" pos:column="62">//set the UIN</comment>

				<decl_stmt><decl><type><name pos:line="378" pos:column="33">ResultSet</name></type> <name pos:line="378" pos:column="43">rs</name> <init pos:line="378" pos:column="46">= <expr><call><name><name pos:line="378" pos:column="48">stmtForSelect</name><op:operator pos:line="378" pos:column="61">.</op:operator><name pos:line="378" pos:column="62">executeQuery</name></name><argument_list pos:line="378" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="378" pos:column="77">//execute the query</comment>

				<if pos:line="380" pos:column="33">if <condition pos:line="380" pos:column="36">(<expr><call><name><name pos:line="380" pos:column="37">rs</name><op:operator pos:line="380" pos:column="39">.</op:operator><name pos:line="380" pos:column="40">first</name></name><argument_list pos:line="380" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="380" pos:column="48"> <block pos:line="380" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="382" pos:column="41">DBAnnotation</name><op:operator pos:line="382" pos:column="53">.</op:operator><name pos:line="382" pos:column="54">annoate</name></name><argument_list pos:line="382" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="62">"retreivedpositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="85">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="95">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="382" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="383" pos:column="41">int</name></type> <name pos:line="383" pos:column="45">retreivedpositionID</name> <init pos:line="383" pos:column="65">= <expr><call><name><name pos:line="383" pos:column="67">rs</name><op:operator pos:line="383" pos:column="69">.</op:operator><name pos:line="383" pos:column="70">getInt</name></name><argument_list pos:line="383" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="383" pos:column="77">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="385" pos:column="41">if <condition pos:line="385" pos:column="44">(<expr><name pos:line="385" pos:column="45">retreivedpositionID</name> <op:operator pos:line="385" pos:column="65">&lt;=</op:operator> <lit:literal type="number" pos:line="385" pos:column="68">2</lit:literal> <op:operator pos:line="385" pos:column="70">||</op:operator><name pos:line="385" pos:column="72">retreivedpositionID</name><op:operator pos:line="385" pos:column="91">==</op:operator><lit:literal type="number" pos:line="385" pos:column="93">5</lit:literal></expr>)</condition><then pos:line="385" pos:column="95"> <block pos:line="385" pos:column="96">{
						<comment type="line" pos:line="386" pos:column="49">//if positionID is more than 2 or less than 5 then its not an employee</comment>
						<expr_stmt><expr><name pos:line="387" pos:column="49">check</name> <op:operator pos:line="387" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="387" pos:column="57">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>

				}</block></then>

				<else pos:line="392" pos:column="33">else <block pos:line="392" pos:column="38">{
					<comment type="line" pos:line="393" pos:column="41">//no UIN exists</comment>
					<expr_stmt><expr><call><name><name pos:line="394" pos:column="41">System</name><op:operator pos:line="394" pos:column="47">.</op:operator><name pos:line="394" pos:column="48">out</name><op:operator pos:line="394" pos:column="51">.</op:operator><name pos:line="394" pos:column="52">println</name></name><argument_list pos:line="394" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="399" pos:column="25">//catch block</comment>
			<catch pos:line="400" pos:column="25">catch <parameter_list pos:line="400" pos:column="31">(<param><decl><type><name pos:line="400" pos:column="32">SQLException</name></type> <name pos:line="400" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="400" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="401" pos:column="33">e</name><op:operator pos:line="401" pos:column="34">.</op:operator><name pos:line="401" pos:column="35">printStackTrace</name></name><argument_list pos:line="401" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="402" pos:column="33">System</name><op:operator pos:line="402" pos:column="39">.</op:operator><name pos:line="402" pos:column="40">out</name><op:operator pos:line="402" pos:column="43">.</op:operator><name pos:line="402" pos:column="44">println</name></name><argument_list pos:line="402" pos:column="51">(<argument><expr><name pos:line="402" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="406" pos:column="25">finally <block pos:line="406" pos:column="33">{

				<comment type="line" pos:line="408" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="411" pos:column="17">//catch block</comment>
		<catch pos:line="412" pos:column="17">catch <parameter_list pos:line="412" pos:column="23">(<param><decl><type><name pos:line="412" pos:column="24">Exception</name></type> <name pos:line="412" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="412" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="413" pos:column="25">e</name><op:operator pos:line="413" pos:column="26">.</op:operator><name pos:line="413" pos:column="27">printStackTrace</name></name><argument_list pos:line="413" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="414" pos:column="25">System</name><op:operator pos:line="414" pos:column="31">.</op:operator><name pos:line="414" pos:column="32">out</name><op:operator pos:line="414" pos:column="35">.</op:operator><name pos:line="414" pos:column="36">println</name></name><argument_list pos:line="414" pos:column="43">(<argument><expr><name pos:line="414" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally pos:line="418" pos:column="17">finally <block pos:line="418" pos:column="25">{

			<comment type="line" pos:line="420" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>
		<return pos:line="422" pos:column="17">return <expr><name pos:line="422" pos:column="24">check</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="425" pos:column="9">// add to jobRoster adds the students to the job roster table who have already been selected ofr an job and an email has been to.</comment>
	<comment type="line" pos:line="426" pos:column="9">//it is added to job roster if the student is being considered, with the offer iD</comment>
	<function><type><specifier pos:line="427" pos:column="9">public</specifier> <specifier pos:line="427" pos:column="16">static</specifier> <name pos:line="427" pos:column="23">boolean</name></type> <name pos:line="427" pos:column="31">addToJobRoster</name><parameter_list pos:line="427" pos:column="45">(<param><decl><type><name pos:line="427" pos:column="46">int</name></type> <name pos:line="427" pos:column="50">UIN</name></decl></param>, <param><decl><type><name pos:line="427" pos:column="55">int</name></type> <name pos:line="427" pos:column="59">jobiD</name></decl></param>)</parameter_list> <block pos:line="427" pos:column="66">{

		<decl_stmt><decl><type><name pos:line="429" pos:column="17">boolean</name></type> <name pos:line="429" pos:column="25">isAdded</name> <init pos:line="429" pos:column="33">= <expr><lit:literal type="boolean" pos:line="429" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="431" pos:column="17">try <block pos:line="431" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="432" pos:column="25">Connection</name></type> <name pos:line="432" pos:column="36">conn</name> <init pos:line="432" pos:column="41">= <expr><call><name><name pos:line="432" pos:column="43">Database</name><op:operator pos:line="432" pos:column="51">.</op:operator><name pos:line="432" pos:column="52">getConnection</name></name><argument_list pos:line="432" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="432" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="433" pos:column="25">String</name></type> <name pos:line="433" pos:column="32">SQLJobInsert</name> <init pos:line="433" pos:column="45">= <expr><lit:literal type="string" pos:line="433" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="434" pos:column="25">try <block pos:line="434" pos:column="29">{

				<if pos:line="436" pos:column="33">if <condition pos:line="436" pos:column="36">(<expr><name pos:line="436" pos:column="37">conn</name> <op:operator pos:line="436" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="436" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="436" pos:column="50"> <block pos:line="436" pos:column="51">{

					<expr_stmt><expr><name pos:line="438" pos:column="41">SQLJobInsert</name> <op:operator pos:line="438" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="438" pos:column="56">"Insert into jobRoster (JobID, UIN) values (?,?);"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="438" pos:column="107">//write the query</comment>

					<decl_stmt><decl><type><name pos:line="440" pos:column="41">PreparedStatement</name></type> <name pos:line="440" pos:column="59">stmtForSelect</name> <init pos:line="440" pos:column="73">= <expr><call><name><name pos:line="440" pos:column="75">conn</name><op:operator pos:line="440" pos:column="79">.</op:operator><name pos:line="440" pos:column="80">prepareStatement</name></name><argument_list pos:line="440" pos:column="96">(<argument><expr><name pos:line="440" pos:column="97">SQLJobInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="441" pos:column="41">stmtForSelect</name><op:operator pos:line="441" pos:column="54">.</op:operator><name pos:line="441" pos:column="55">setInt</name></name><argument_list pos:line="441" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="441" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="441" pos:column="65">jobiD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="441" pos:column="72">//set the job iD</comment>
					<expr_stmt><expr><call><name><name pos:line="442" pos:column="41">stmtForSelect</name><op:operator pos:line="442" pos:column="54">.</op:operator><name pos:line="442" pos:column="55">setInt</name></name><argument_list pos:line="442" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="442" pos:column="62">2</lit:literal></expr></argument>, <argument><expr><name pos:line="442" pos:column="65">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="442" pos:column="70">//set the UIN</comment>

					<expr_stmt><expr><call><name><name pos:line="444" pos:column="41">System</name><op:operator pos:line="444" pos:column="47">.</op:operator><name pos:line="444" pos:column="48">out</name><op:operator pos:line="444" pos:column="51">.</op:operator><name pos:line="444" pos:column="52">println</name></name><argument_list pos:line="444" pos:column="59">(<argument><expr><name pos:line="444" pos:column="60">stmtForSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="445" pos:column="41">int</name></type> <name pos:line="445" pos:column="45">i</name> <init pos:line="445" pos:column="47">= <expr><call><name><name pos:line="445" pos:column="49">stmtForSelect</name><op:operator pos:line="445" pos:column="62">.</op:operator><name pos:line="445" pos:column="63">executeUpdate</name></name><argument_list pos:line="445" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="445" pos:column="79">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="447" pos:column="41">DBAnnotation</name><op:operator pos:line="447" pos:column="53">.</op:operator><name pos:line="447" pos:column="54">annoate</name></name><argument_list pos:line="447" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="62">"jobiD"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="447" pos:column="71">"jobroster"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="447" pos:column="84">"JobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="447" pos:column="93">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="448" pos:column="41">DBAnnotation</name><op:operator pos:line="448" pos:column="53">.</op:operator><name pos:line="448" pos:column="54">annoate</name></name><argument_list pos:line="448" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="448" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="448" pos:column="69">"jobroster"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="448" pos:column="82">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="448" pos:column="89">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="450" pos:column="41">System</name><op:operator pos:line="450" pos:column="47">.</op:operator><name pos:line="450" pos:column="48">out</name><op:operator pos:line="450" pos:column="51">.</op:operator><name pos:line="450" pos:column="52">println</name></name><argument_list pos:line="450" pos:column="59">(<argument><expr><name pos:line="450" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="451" pos:column="41">System</name><op:operator pos:line="451" pos:column="47">.</op:operator><name pos:line="451" pos:column="48">out</name><op:operator pos:line="451" pos:column="51">.</op:operator><name pos:line="451" pos:column="52">println</name></name><argument_list pos:line="451" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="451" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name pos:line="453" pos:column="41">isAdded</name> <op:operator pos:line="453" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="51">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="454" pos:column="41">Database</name><op:operator pos:line="454" pos:column="49">.</op:operator><name pos:line="454" pos:column="50">commitTransaction</name></name><argument_list pos:line="454" pos:column="67">(<argument><expr><name pos:line="454" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="454" pos:column="74">//commit the transaction</comment>

				}</block></then></if>
			}</block>
			<comment type="line" pos:line="458" pos:column="25">//catch block</comment>
			<catch pos:line="459" pos:column="25">catch <parameter_list pos:line="459" pos:column="31">(<param><decl><type><name pos:line="459" pos:column="32">SQLException</name></type> <name pos:line="459" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="459" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="460" pos:column="33">e</name><op:operator pos:line="460" pos:column="34">.</op:operator><name pos:line="460" pos:column="35">printStackTrace</name></name><argument_list pos:line="460" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="461" pos:column="33">System</name><op:operator pos:line="461" pos:column="39">.</op:operator><name pos:line="461" pos:column="40">out</name><op:operator pos:line="461" pos:column="43">.</op:operator><name pos:line="461" pos:column="44">println</name></name><argument_list pos:line="461" pos:column="51">(<argument><expr><name pos:line="461" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="465" pos:column="25">finally <block pos:line="465" pos:column="33">{

				<comment type="line" pos:line="467" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="470" pos:column="17">//catch block</comment>
		<catch pos:line="471" pos:column="17">catch <parameter_list pos:line="471" pos:column="23">(<param><decl><type><name pos:line="471" pos:column="24">Exception</name></type> <name pos:line="471" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="471" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="472" pos:column="25">e</name><op:operator pos:line="472" pos:column="26">.</op:operator><name pos:line="472" pos:column="27">printStackTrace</name></name><argument_list pos:line="472" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="473" pos:column="25">System</name><op:operator pos:line="473" pos:column="31">.</op:operator><name pos:line="473" pos:column="32">out</name><op:operator pos:line="473" pos:column="35">.</op:operator><name pos:line="473" pos:column="36">println</name></name><argument_list pos:line="473" pos:column="43">(<argument><expr><name pos:line="473" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="476" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="478" pos:column="17">finally <block pos:line="478" pos:column="25">{

			<comment type="line" pos:line="480" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="483" pos:column="17">return <expr><name pos:line="483" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>
	
	<comment type="line" pos:line="487" pos:column="9">//if a student matches the job requirment then send an email to him at his email ID with the job ID and the details</comment>
	<function><type><specifier pos:line="488" pos:column="9">public</specifier> <specifier pos:line="488" pos:column="16">static</specifier> <name pos:line="488" pos:column="23">boolean</name></type> <name pos:line="488" pos:column="31">sendEmail</name><parameter_list pos:line="488" pos:column="40">(<param><decl><type><name pos:line="488" pos:column="41">int</name></type> <name pos:line="488" pos:column="45">jobID</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="52">Student</name></type> <name pos:line="488" pos:column="60">student</name></decl></param>)</parameter_list> <block pos:line="488" pos:column="69">{

		<if pos:line="490" pos:column="17">if <condition pos:line="490" pos:column="20">(<expr><name pos:line="490" pos:column="21">student</name> <op:operator pos:line="490" pos:column="29">!=</op:operator> <lit:literal type="null" pos:line="490" pos:column="32">null</lit:literal></expr>)</condition><then pos:line="490" pos:column="37"> <block pos:line="490" pos:column="38">{

			<decl_stmt><decl><type><name pos:line="492" pos:column="25">String</name></type> <name pos:line="492" pos:column="32">studentUserName</name> <init pos:line="492" pos:column="48">= <expr><call><name><name pos:line="492" pos:column="50">student</name><op:operator pos:line="492" pos:column="57">.</op:operator><name pos:line="492" pos:column="58">getUserName</name></name><argument_list pos:line="492" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="492" pos:column="72">//get the user name</comment>

			<decl_stmt><decl><type><name pos:line="494" pos:column="25">String</name></type> <name pos:line="494" pos:column="32">studentEmail</name> <init pos:line="494" pos:column="45">= <expr><name pos:line="494" pos:column="47">studentUserName</name> <op:operator pos:line="494" pos:column="63">+</op:operator> <lit:literal type="string" pos:line="494" pos:column="65">"@xyz.com"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="494" pos:column="76">//get the email ID</comment>

			<comment type="line" pos:line="496" pos:column="25">//build the email instance</comment>
			<decl_stmt><decl><type><name pos:line="497" pos:column="25">Email</name></type> <name pos:line="497" pos:column="31">email</name> <init pos:line="497" pos:column="37">= <expr><call><name><name pos:line="497" pos:column="39">Email</name><op:operator pos:line="497" pos:column="44">.</op:operator><name pos:line="497" pos:column="45">getInstance</name></name><argument_list pos:line="497" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="57">"umas.uic@gmail.com"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="497" pos:column="78">"cs597project"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="498" pos:column="25">String</name></type> <name pos:line="498" pos:column="32">body</name> <init pos:line="498" pos:column="37">= <expr><lit:literal type="string" pos:line="498" pos:column="39">"You match our requirments. Please contact us at (xxx) xxx-xxxx for further interview steps"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="499" pos:column="25">String</name></type> <name pos:line="499" pos:column="32">subject</name> <init pos:line="499" pos:column="40">= <expr><lit:literal type="string" pos:line="499" pos:column="42">"Job Match"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="500" pos:column="25">String</name></type> <name pos:line="500" pos:column="32">receipients</name> <init pos:line="500" pos:column="44">= <expr><lit:literal type="string" pos:line="500" pos:column="46">""</lit:literal> <op:operator pos:line="500" pos:column="49">+</op:operator> <name pos:line="500" pos:column="51">studentEmail</name> <op:operator pos:line="500" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="500" pos:column="66">""</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="501" pos:column="25">boolean</name></type> <name pos:line="501" pos:column="33">ifSent</name> <init pos:line="501" pos:column="40">= <expr><call><name><name pos:line="501" pos:column="42">email</name><op:operator pos:line="501" pos:column="47">.</op:operator><name pos:line="501" pos:column="48">sendEmail</name></name><argument_list pos:line="501" pos:column="57">(<argument><expr><name pos:line="501" pos:column="58">receipients</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="71">subject</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="80">body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="501" pos:column="86">//send the email with the required text</comment>

			<if pos:line="503" pos:column="25">if <condition pos:line="503" pos:column="28">(<expr><name pos:line="503" pos:column="29">ifSent</name></expr>)</condition><then pos:line="503" pos:column="36"> <block pos:line="503" pos:column="37">{
				<decl_stmt><decl><type><name pos:line="504" pos:column="33">boolean</name></type> <name pos:line="504" pos:column="41">addedToJobRoster</name> <init pos:line="504" pos:column="58">= <expr><call><name pos:line="504" pos:column="60">addToJobRoster</name><argument_list pos:line="504" pos:column="74">(<argument><expr><call><name><name pos:line="504" pos:column="75">student</name><op:operator pos:line="504" pos:column="82">.</op:operator><name pos:line="504" pos:column="83">getUIN</name></name><argument_list pos:line="504" pos:column="89">()</argument_list></call></expr></argument>,<argument><expr><name pos:line="504" pos:column="92">jobID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="504" pos:column="99">//add him to the job roster</comment>
				<if pos:line="505" pos:column="33">if <condition pos:line="505" pos:column="36">(<expr><name pos:line="505" pos:column="37">addedToJobRoster</name></expr>)</condition><then pos:line="505" pos:column="54"> <block pos:line="505" pos:column="55">{
					<return pos:line="506" pos:column="41">return <expr><lit:literal type="boolean" pos:line="506" pos:column="48">true</lit:literal></expr>;</return><comment type="line" pos:line="506" pos:column="53">//if added return true</comment>
				}</block></then> <else pos:line="507" pos:column="35">else <block pos:line="507" pos:column="40">{
					<return pos:line="508" pos:column="41">return <expr><lit:literal type="boolean" pos:line="508" pos:column="48">false</lit:literal></expr>;</return>
				}</block></else></if>
			}</block></then></if>

		}</block></then></if>

		<return pos:line="514" pos:column="17">return <expr><lit:literal type="boolean" pos:line="514" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	<comment type="block" pos:line="516" pos:column="9">/*retrieve all the jobs posted by one single professor
	 * 
	 * the return type is a linked hash map of the job object 
	 * 
	 * the prof object is passed to it*/</comment>
	<function><type><specifier pos:line="521" pos:column="9">public</specifier> <specifier pos:line="521" pos:column="16">static</specifier> <name><name pos:line="521" pos:column="23">LinkedHashMap</name><argument_list pos:line="521" pos:column="36">&lt;<argument><name pos:line="521" pos:column="37">Integer</name></argument>, <argument><name pos:line="521" pos:column="46">Job</name></argument>&gt;</argument_list></name></type> <name pos:line="521" pos:column="51">getAllJobsBySingleProfessor</name><parameter_list pos:line="521" pos:column="78">(<param><decl><type><name pos:line="521" pos:column="79">Professor</name></type> <name pos:line="521" pos:column="89">prof</name></decl></param>)</parameter_list> <block pos:line="521" pos:column="95">{

		<decl_stmt><decl><type><name><name pos:line="523" pos:column="17">LinkedHashMap</name><argument_list pos:line="523" pos:column="30">&lt;<argument><name pos:line="523" pos:column="31">Integer</name></argument>, <argument><name pos:line="523" pos:column="40">Job</name></argument>&gt;</argument_list></name></type> <name pos:line="523" pos:column="45">getAllJobs</name> <init pos:line="523" pos:column="56">= <expr><op:operator pos:line="523" pos:column="58">new</op:operator> <call><name><name pos:line="523" pos:column="62">LinkedHashMap</name><argument_list pos:line="523" pos:column="75">&lt;<argument><name pos:line="523" pos:column="76">Integer</name></argument>, <argument><name pos:line="523" pos:column="85">Job</name></argument>&gt;</argument_list></name><argument_list pos:line="523" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="523" pos:column="92">//initiaLIZE the job linked hash map</comment>

		<if pos:line="525" pos:column="17">if <condition pos:line="525" pos:column="20">(<expr><name pos:line="525" pos:column="21">prof</name> <op:operator pos:line="525" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="525" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="525" pos:column="34"> <block pos:line="525" pos:column="35">{

			<throw pos:line="527" pos:column="25">throw <expr><op:operator pos:line="527" pos:column="31">new</op:operator> <call><name pos:line="527" pos:column="35">NullPointerException</name><argument_list pos:line="527" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="527" pos:column="58">//if the object passed is null then throw exception</comment>
		}</block></then></if>

		<try pos:line="530" pos:column="17">try <block pos:line="530" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="531" pos:column="25">Connection</name></type> <name pos:line="531" pos:column="36">conn</name> <init pos:line="531" pos:column="41">= <expr><call><name><name pos:line="531" pos:column="43">Database</name><op:operator pos:line="531" pos:column="51">.</op:operator><name pos:line="531" pos:column="52">getConnection</name></name><argument_list pos:line="531" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="531" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="532" pos:column="25">String</name></type> <name pos:line="532" pos:column="32">SQLPeopleSelect</name> <init pos:line="532" pos:column="48">= <expr><lit:literal type="string" pos:line="532" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="533" pos:column="25">try <block pos:line="533" pos:column="29">{

				<if pos:line="535" pos:column="33">if <condition pos:line="535" pos:column="36">(<expr><name pos:line="535" pos:column="37">conn</name> <op:operator pos:line="535" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="535" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="535" pos:column="50"> <block pos:line="535" pos:column="51">{

					<expr_stmt><expr><name pos:line="537" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="537" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="537" pos:column="59">"Select JobID From jobpostings where PostedByUIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="537" pos:column="112">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="540" pos:column="33">PreparedStatement</name></type> <name pos:line="540" pos:column="51">stmtForSelect</name> <init pos:line="540" pos:column="65">= <expr><call><name><name pos:line="540" pos:column="67">conn</name><op:operator pos:line="540" pos:column="71">.</op:operator><name pos:line="540" pos:column="72">prepareStatement</name></name><argument_list pos:line="540" pos:column="88">(<argument><expr><name pos:line="540" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="541" pos:column="33">stmtForSelect</name><op:operator pos:line="541" pos:column="46">.</op:operator><name pos:line="541" pos:column="47">setInt</name></name><argument_list pos:line="541" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="541" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="541" pos:column="57">prof</name><op:operator pos:line="541" pos:column="61">.</op:operator><name pos:line="541" pos:column="62">getUIN</name></name><argument_list pos:line="541" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="541" pos:column="72">//set the UIN of the prof</comment>

				<decl_stmt><decl><type><name pos:line="543" pos:column="33">ResultSet</name></type> <name pos:line="543" pos:column="43">rs</name> <init pos:line="543" pos:column="46">= <expr><call><name><name pos:line="543" pos:column="48">stmtForSelect</name><op:operator pos:line="543" pos:column="61">.</op:operator><name pos:line="543" pos:column="62">executeQuery</name></name><argument_list pos:line="543" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="543" pos:column="77">//execute the query</comment>

				<while pos:line="545" pos:column="33">while <condition pos:line="545" pos:column="39">(<expr><call><name><name pos:line="545" pos:column="40">rs</name><op:operator pos:line="545" pos:column="42">.</op:operator><name pos:line="545" pos:column="43">next</name></name><argument_list pos:line="545" pos:column="47">()</argument_list></call></expr>)</condition> <block pos:line="545" pos:column="51">{

					<expr_stmt><expr><call><name><name pos:line="547" pos:column="41">DBAnnotation</name><op:operator pos:line="547" pos:column="53">.</op:operator><name pos:line="547" pos:column="54">annoate</name></name><argument_list pos:line="547" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="547" pos:column="62">"retreivedjobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="547" pos:column="80">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="547" pos:column="95">"JobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="547" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="548" pos:column="41">int</name></type> <name pos:line="548" pos:column="45">retreivedjobID</name> <init pos:line="548" pos:column="60">= <expr><call><name><name pos:line="548" pos:column="62">rs</name><op:operator pos:line="548" pos:column="64">.</op:operator><name pos:line="548" pos:column="65">getInt</name></name><argument_list pos:line="548" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="548" pos:column="72">"JobID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="548" pos:column="81">//retrieve the job ID</comment>
					
					<decl_stmt><decl><type><name pos:line="550" pos:column="41">Job</name></type> <name pos:line="550" pos:column="45">jobs</name> <init pos:line="550" pos:column="50">= <expr><op:operator pos:line="550" pos:column="52">new</op:operator> <call><name pos:line="550" pos:column="56">Job</name><argument_list pos:line="550" pos:column="59">(<argument><expr><name pos:line="550" pos:column="60">retreivedjobID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="550" pos:column="76">//send it to the constructor</comment>
					
					<expr_stmt><expr><call><name><name pos:line="552" pos:column="41">DBAnnotation</name><op:operator pos:line="552" pos:column="53">.</op:operator><name pos:line="552" pos:column="54">annoate</name></name><argument_list pos:line="552" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="552" pos:column="62">"getJobIDs"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="552" pos:column="75">"jobpostings"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="552" pos:column="90">"JobID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="552" pos:column="99">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="553" pos:column="41">int</name></type> <name pos:line="553" pos:column="45">getJobIDs</name><init pos:line="553" pos:column="54">=<expr><call><name><name pos:line="553" pos:column="55">jobs</name><op:operator pos:line="553" pos:column="59">.</op:operator><name pos:line="553" pos:column="60">getJobID</name></name><argument_list pos:line="553" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><name pos:line="555" pos:column="41">getAllJobs</name><op:operator pos:line="555" pos:column="51">.</op:operator><name pos:line="555" pos:column="52">put</name></name><argument_list pos:line="555" pos:column="55">(<argument><expr><name pos:line="555" pos:column="56">getJobIDs</name></expr></argument>, <argument><expr><name pos:line="555" pos:column="67">jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="555" pos:column="73">//put it into the linked hash map</comment>

				}</block></while>

			}</block>
			<comment type="line" pos:line="560" pos:column="25">//catch block ofr sql exception</comment>
			<catch pos:line="561" pos:column="25">catch <parameter_list pos:line="561" pos:column="31">(<param><decl><type><name pos:line="561" pos:column="32">SQLException</name></type> <name pos:line="561" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="561" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="562" pos:column="33">e</name><op:operator pos:line="562" pos:column="34">.</op:operator><name pos:line="562" pos:column="35">printStackTrace</name></name><argument_list pos:line="562" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="563" pos:column="33">System</name><op:operator pos:line="563" pos:column="39">.</op:operator><name pos:line="563" pos:column="40">out</name><op:operator pos:line="563" pos:column="43">.</op:operator><name pos:line="563" pos:column="44">println</name></name><argument_list pos:line="563" pos:column="51">(<argument><expr><name pos:line="563" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="567" pos:column="25">finally <block pos:line="567" pos:column="33">{

				<comment type="line" pos:line="569" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="572" pos:column="17">//catch block for the exception</comment>
		<catch pos:line="573" pos:column="17">catch <parameter_list pos:line="573" pos:column="23">(<param><decl><type><name pos:line="573" pos:column="24">Exception</name></type> <name pos:line="573" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="573" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="574" pos:column="25">e</name><op:operator pos:line="574" pos:column="26">.</op:operator><name pos:line="574" pos:column="27">printStackTrace</name></name><argument_list pos:line="574" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="575" pos:column="25">System</name><op:operator pos:line="575" pos:column="31">.</op:operator><name pos:line="575" pos:column="32">out</name><op:operator pos:line="575" pos:column="35">.</op:operator><name pos:line="575" pos:column="36">println</name></name><argument_list pos:line="575" pos:column="43">(<argument><expr><name pos:line="575" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="578" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally pos:line="580" pos:column="17">finally <block pos:line="580" pos:column="25">{

			<comment type="line" pos:line="582" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="585" pos:column="17">return <expr><name pos:line="585" pos:column="24">getAllJobs</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="588" pos:column="9">/*--------------------------------Getters and setters start--------------------------------------------------*/</comment>

	<function><type><specifier pos:line="590" pos:column="9">public</specifier> <name pos:line="590" pos:column="16">int</name></type> <name pos:line="590" pos:column="20">getJobID</name><parameter_list pos:line="590" pos:column="28">()</parameter_list> <block pos:line="590" pos:column="31">{
		<return pos:line="591" pos:column="17">return <expr><name pos:line="591" pos:column="24">jobID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="594" pos:column="9">public</specifier> <name pos:line="594" pos:column="16">void</name></type> <name pos:line="594" pos:column="21">setJobID</name><parameter_list pos:line="594" pos:column="29">(<param><decl><type><name pos:line="594" pos:column="30">int</name></type> <name pos:line="594" pos:column="34">jobID</name></decl></param>)</parameter_list> <block pos:line="594" pos:column="41">{
		<expr_stmt><expr><name><name pos:line="595" pos:column="17">this</name><op:operator pos:line="595" pos:column="21">.</op:operator><name pos:line="595" pos:column="22">jobID</name></name> <op:operator pos:line="595" pos:column="28">=</op:operator> <name pos:line="595" pos:column="30">jobID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="598" pos:column="9">public</specifier> <name pos:line="598" pos:column="16">int</name></type> <name pos:line="598" pos:column="20">getPostedByUIN</name><parameter_list pos:line="598" pos:column="34">()</parameter_list> <block pos:line="598" pos:column="37">{
		<return pos:line="599" pos:column="17">return <expr><name pos:line="599" pos:column="24">postedByUIN</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="602" pos:column="9">public</specifier> <name pos:line="602" pos:column="16">void</name></type> <name pos:line="602" pos:column="21">setPostedByUIN</name><parameter_list pos:line="602" pos:column="35">(<param><decl><type><name pos:line="602" pos:column="36">int</name></type> <name pos:line="602" pos:column="40">postedByUIN</name></decl></param>)</parameter_list> <block pos:line="602" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="603" pos:column="17">this</name><op:operator pos:line="603" pos:column="21">.</op:operator><name pos:line="603" pos:column="22">postedByUIN</name></name> <op:operator pos:line="603" pos:column="34">=</op:operator> <name pos:line="603" pos:column="36">postedByUIN</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="606" pos:column="9">public</specifier> <name pos:line="606" pos:column="16">String</name></type> <name pos:line="606" pos:column="23">getJobInDepartment</name><parameter_list pos:line="606" pos:column="41">()</parameter_list> <block pos:line="606" pos:column="44">{
		<return pos:line="607" pos:column="17">return <expr><name pos:line="607" pos:column="24">jobInDepartment</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="610" pos:column="9">public</specifier> <name pos:line="610" pos:column="16">void</name></type> <name pos:line="610" pos:column="21">setJobInDepartment</name><parameter_list pos:line="610" pos:column="39">(<param><decl><type><name pos:line="610" pos:column="40">String</name></type> <name pos:line="610" pos:column="47">jobInDepartment</name></decl></param>)</parameter_list> <block pos:line="610" pos:column="64">{
		<expr_stmt><expr><name><name pos:line="611" pos:column="17">this</name><op:operator pos:line="611" pos:column="21">.</op:operator><name pos:line="611" pos:column="22">jobInDepartment</name></name> <op:operator pos:line="611" pos:column="38">=</op:operator> <name pos:line="611" pos:column="40">jobInDepartment</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="614" pos:column="9">public</specifier> <name pos:line="614" pos:column="16">double</name></type> <name pos:line="614" pos:column="23">getReqdMinimumGPA</name><parameter_list pos:line="614" pos:column="40">()</parameter_list> <block pos:line="614" pos:column="43">{
		<return pos:line="615" pos:column="17">return <expr><name pos:line="615" pos:column="24">reqdMinimumGPA</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="618" pos:column="9">public</specifier> <name pos:line="618" pos:column="16">void</name></type> <name pos:line="618" pos:column="21">setReqdMinimumGPA</name><parameter_list pos:line="618" pos:column="38">(<param><decl><type><name pos:line="618" pos:column="39">double</name></type> <name pos:line="618" pos:column="46">reqdMinimumGPA</name></decl></param>)</parameter_list> <block pos:line="618" pos:column="62">{
		<expr_stmt><expr><name><name pos:line="619" pos:column="17">this</name><op:operator pos:line="619" pos:column="21">.</op:operator><name pos:line="619" pos:column="22">reqdMinimumGPA</name></name> <op:operator pos:line="619" pos:column="37">=</op:operator> <name pos:line="619" pos:column="39">reqdMinimumGPA</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="622" pos:column="9">public</specifier> <name pos:line="622" pos:column="16">double</name></type> <name pos:line="622" pos:column="23">getReqdMinimumWorkExperience</name><parameter_list pos:line="622" pos:column="51">()</parameter_list> <block pos:line="622" pos:column="54">{
		<return pos:line="623" pos:column="17">return <expr><name pos:line="623" pos:column="24">reqdMinimumWorkExperience</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="626" pos:column="9">public</specifier> <name pos:line="626" pos:column="16">void</name></type> <name pos:line="626" pos:column="21">setReqdMinimumWorkExperience</name><parameter_list pos:line="626" pos:column="49">(<param><decl><type><name pos:line="626" pos:column="50">double</name></type> <name pos:line="626" pos:column="57">reqdMinimumWorkExperience</name></decl></param>)</parameter_list> <block pos:line="626" pos:column="84">{
		<expr_stmt><expr><name><name pos:line="627" pos:column="17">this</name><op:operator pos:line="627" pos:column="21">.</op:operator><name pos:line="627" pos:column="22">reqdMinimumWorkExperience</name></name> <op:operator pos:line="627" pos:column="48">=</op:operator> <name pos:line="627" pos:column="50">reqdMinimumWorkExperience</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="630" pos:column="9">public</specifier> <name pos:line="630" pos:column="16">boolean</name></type> <name pos:line="630" pos:column="24">isSkillset1</name><parameter_list pos:line="630" pos:column="35">()</parameter_list> <block pos:line="630" pos:column="38">{
		<return pos:line="631" pos:column="17">return <expr><name pos:line="631" pos:column="24">skillset1</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="634" pos:column="9">public</specifier> <name pos:line="634" pos:column="16">void</name></type> <name pos:line="634" pos:column="21">setSkillset1</name><parameter_list pos:line="634" pos:column="33">(<param><decl><type><name pos:line="634" pos:column="34">boolean</name></type> <name pos:line="634" pos:column="42">skillset1</name></decl></param>)</parameter_list> <block pos:line="634" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="635" pos:column="17">this</name><op:operator pos:line="635" pos:column="21">.</op:operator><name pos:line="635" pos:column="22">skillset1</name></name> <op:operator pos:line="635" pos:column="32">=</op:operator> <name pos:line="635" pos:column="34">skillset1</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="638" pos:column="9">public</specifier> <name pos:line="638" pos:column="16">boolean</name></type> <name pos:line="638" pos:column="24">isSkillset2</name><parameter_list pos:line="638" pos:column="35">()</parameter_list> <block pos:line="638" pos:column="38">{
		<return pos:line="639" pos:column="17">return <expr><name pos:line="639" pos:column="24">skillset2</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="642" pos:column="9">public</specifier> <name pos:line="642" pos:column="16">void</name></type> <name pos:line="642" pos:column="21">setSkillset2</name><parameter_list pos:line="642" pos:column="33">(<param><decl><type><name pos:line="642" pos:column="34">boolean</name></type> <name pos:line="642" pos:column="42">skillset2</name></decl></param>)</parameter_list> <block pos:line="642" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="643" pos:column="17">this</name><op:operator pos:line="643" pos:column="21">.</op:operator><name pos:line="643" pos:column="22">skillset2</name></name> <op:operator pos:line="643" pos:column="32">=</op:operator> <name pos:line="643" pos:column="34">skillset2</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="646" pos:column="9">public</specifier> <name pos:line="646" pos:column="16">boolean</name></type> <name pos:line="646" pos:column="24">isSkillset3</name><parameter_list pos:line="646" pos:column="35">()</parameter_list> <block pos:line="646" pos:column="38">{
		<return pos:line="647" pos:column="17">return <expr><name pos:line="647" pos:column="24">skillset3</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="650" pos:column="9">public</specifier> <name pos:line="650" pos:column="16">void</name></type> <name pos:line="650" pos:column="21">setSkillset3</name><parameter_list pos:line="650" pos:column="33">(<param><decl><type><name pos:line="650" pos:column="34">boolean</name></type> <name pos:line="650" pos:column="42">skillset3</name></decl></param>)</parameter_list> <block pos:line="650" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="651" pos:column="17">this</name><op:operator pos:line="651" pos:column="21">.</op:operator><name pos:line="651" pos:column="22">skillset3</name></name> <op:operator pos:line="651" pos:column="32">=</op:operator> <name pos:line="651" pos:column="34">skillset3</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="654" pos:column="9">public</specifier> <name pos:line="654" pos:column="16">boolean</name></type> <name pos:line="654" pos:column="24">isSkillset4</name><parameter_list pos:line="654" pos:column="35">()</parameter_list> <block pos:line="654" pos:column="38">{
		<return pos:line="655" pos:column="17">return <expr><name pos:line="655" pos:column="24">skillset4</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="658" pos:column="9">public</specifier> <name pos:line="658" pos:column="16">void</name></type> <name pos:line="658" pos:column="21">setSkillset4</name><parameter_list pos:line="658" pos:column="33">(<param><decl><type><name pos:line="658" pos:column="34">boolean</name></type> <name pos:line="658" pos:column="42">skillset4</name></decl></param>)</parameter_list> <block pos:line="658" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="659" pos:column="17">this</name><op:operator pos:line="659" pos:column="21">.</op:operator><name pos:line="659" pos:column="22">skillset4</name></name> <op:operator pos:line="659" pos:column="32">=</op:operator> <name pos:line="659" pos:column="34">skillset4</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="662" pos:column="9">public</specifier> <name pos:line="662" pos:column="16">boolean</name></type> <name pos:line="662" pos:column="24">isSkillset5</name><parameter_list pos:line="662" pos:column="35">()</parameter_list> <block pos:line="662" pos:column="38">{
		<return pos:line="663" pos:column="17">return <expr><name pos:line="663" pos:column="24">skillset5</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="666" pos:column="9">public</specifier> <name pos:line="666" pos:column="16">void</name></type> <name pos:line="666" pos:column="21">setSkillset5</name><parameter_list pos:line="666" pos:column="33">(<param><decl><type><name pos:line="666" pos:column="34">boolean</name></type> <name pos:line="666" pos:column="42">skillset5</name></decl></param>)</parameter_list> <block pos:line="666" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="667" pos:column="17">this</name><op:operator pos:line="667" pos:column="21">.</op:operator><name pos:line="667" pos:column="22">skillset5</name></name> <op:operator pos:line="667" pos:column="32">=</op:operator> <name pos:line="667" pos:column="34">skillset5</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="670" pos:column="9">/*--------------------------------Getters and setters start--------------------------------------------------*/</comment>
	
	
	<comment type="line" pos:line="673" pos:column="9">//new exceptions added for appropriate usage</comment>
	<class><specifier pos:line="674" pos:column="9">public</specifier> <specifier pos:line="674" pos:column="16">static</specifier> class <name pos:line="674" pos:column="29">NoPermissionException</name> <super><extends pos:line="674" pos:column="51">extends <name pos:line="674" pos:column="59">Exception</name></extends></super> <block pos:line="674" pos:column="69">{
		<decl_stmt><decl><type><specifier pos:line="675" pos:column="17">private</specifier> <specifier pos:line="675" pos:column="25">static</specifier> <specifier pos:line="675" pos:column="32">final</specifier> <name pos:line="675" pos:column="38">long</name></type> <name pos:line="675" pos:column="43">serialVersionUID</name> <init pos:line="675" pos:column="60">= <expr><lit:literal type="number" pos:line="675" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="676" pos:column="17">private</specifier> <name pos:line="676" pos:column="25">String</name></type> <name pos:line="676" pos:column="32">message</name> <init pos:line="676" pos:column="40">= <expr><lit:literal type="null" pos:line="676" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="678" pos:column="17">public</specifier> <name pos:line="678" pos:column="24">NoPermissionException</name><parameter_list pos:line="678" pos:column="45">()</parameter_list> <block pos:line="678" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="679" pos:column="25">super</name><argument_list pos:line="679" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="680" pos:column="25">this</name><op:operator pos:line="680" pos:column="29">.</op:operator><name pos:line="680" pos:column="30">message</name></name> <op:operator pos:line="680" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="680" pos:column="40">"You do not have the permission "</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="683" pos:column="17">public</specifier> <name pos:line="683" pos:column="24">NoPermissionException</name><parameter_list pos:line="683" pos:column="45">(<param><decl><type><name pos:line="683" pos:column="46">String</name></type> <name pos:line="683" pos:column="53">message</name></decl></param>)</parameter_list> <block pos:line="683" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="684" pos:column="25">super</name><argument_list pos:line="684" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="685" pos:column="25">this</name><op:operator pos:line="685" pos:column="29">.</op:operator><name pos:line="685" pos:column="30">message</name></name> <op:operator pos:line="685" pos:column="38">=</op:operator> <name pos:line="685" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="688" pos:column="17">@<name pos:line="688" pos:column="18">Override</name></annotation>
		<specifier pos:line="689" pos:column="17">public</specifier> <name pos:line="689" pos:column="24">String</name></type> <name pos:line="689" pos:column="31">toString</name><parameter_list pos:line="689" pos:column="39">()</parameter_list> <block pos:line="689" pos:column="42">{
			<return pos:line="690" pos:column="25">return <expr><name pos:line="690" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="693" pos:column="17">@<name pos:line="693" pos:column="18">Override</name></annotation>
		<specifier pos:line="694" pos:column="17">public</specifier> <name pos:line="694" pos:column="24">String</name></type> <name pos:line="694" pos:column="31">getMessage</name><parameter_list pos:line="694" pos:column="41">()</parameter_list> <block pos:line="694" pos:column="44">{
			<return pos:line="695" pos:column="25">return <expr><name pos:line="695" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line" pos:line="699" pos:column="9">//new exceptions added for appropriate usage</comment>
	<class><specifier pos:line="700" pos:column="9">static</specifier> class <name pos:line="700" pos:column="22">NotAddedToJobRosterException</name> <super><extends pos:line="700" pos:column="51">extends <name pos:line="700" pos:column="59">Exception</name></extends></super> <block pos:line="700" pos:column="69">{
		<decl_stmt><decl><type><specifier pos:line="701" pos:column="17">private</specifier> <specifier pos:line="701" pos:column="25">static</specifier> <specifier pos:line="701" pos:column="32">final</specifier> <name pos:line="701" pos:column="38">long</name></type> <name pos:line="701" pos:column="43">serialVersionUID</name> <init pos:line="701" pos:column="60">= <expr><lit:literal type="number" pos:line="701" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="702" pos:column="17">private</specifier> <name pos:line="702" pos:column="25">String</name></type> <name pos:line="702" pos:column="32">message</name> <init pos:line="702" pos:column="40">= <expr><lit:literal type="null" pos:line="702" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="704" pos:column="17">public</specifier> <name pos:line="704" pos:column="24">NotAddedToJobRosterException</name><parameter_list pos:line="704" pos:column="52">()</parameter_list> <block pos:line="704" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="705" pos:column="25">super</name><argument_list pos:line="705" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="706" pos:column="25">this</name><op:operator pos:line="706" pos:column="29">.</op:operator><name pos:line="706" pos:column="30">message</name></name> <op:operator pos:line="706" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="706" pos:column="40">"Not Added to job roster "</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="709" pos:column="17">public</specifier> <name pos:line="709" pos:column="24">NotAddedToJobRosterException</name><parameter_list pos:line="709" pos:column="52">(<param><decl><type><name pos:line="709" pos:column="53">String</name></type> <name pos:line="709" pos:column="60">message</name></decl></param>)</parameter_list> <block pos:line="709" pos:column="69">{
			<expr_stmt><expr><call><name pos:line="710" pos:column="25">super</name><argument_list pos:line="710" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="711" pos:column="25">this</name><op:operator pos:line="711" pos:column="29">.</op:operator><name pos:line="711" pos:column="30">message</name></name> <op:operator pos:line="711" pos:column="38">=</op:operator> <name pos:line="711" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="714" pos:column="17">@<name pos:line="714" pos:column="18">Override</name></annotation>
		<specifier pos:line="715" pos:column="17">public</specifier> <name pos:line="715" pos:column="24">String</name></type> <name pos:line="715" pos:column="31">toString</name><parameter_list pos:line="715" pos:column="39">()</parameter_list> <block pos:line="715" pos:column="42">{
			<return pos:line="716" pos:column="25">return <expr><name pos:line="716" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="719" pos:column="17">@<name pos:line="719" pos:column="18">Override</name></annotation>
		<specifier pos:line="720" pos:column="17">public</specifier> <name pos:line="720" pos:column="24">String</name></type> <name pos:line="720" pos:column="31">getMessage</name><parameter_list pos:line="720" pos:column="41">()</parameter_list> <block pos:line="720" pos:column="44">{
			<return pos:line="721" pos:column="25">return <expr><name pos:line="721" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block" pos:line="725" pos:column="9">/*
	 * All job functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier pos:line="730" pos:column="9">public</specifier> <specifier pos:line="730" pos:column="16">static</specifier> <name pos:line="730" pos:column="23">void</name></type> <name pos:line="730" pos:column="28">main</name><parameter_list pos:line="730" pos:column="32">(<param><decl><type><name><name pos:line="730" pos:column="33">String</name><index pos:line="730" pos:column="39">[]</index></name></type> <name pos:line="730" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="730" pos:column="48">{



	}</block></function>

}</block></class>
</unit>
