<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\ClassroomTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">LinkedHashMap</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Before</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">org</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">junit</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Test</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">umas</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">code</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="11" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">ClassroomTest</name> <block pos:line="13" pos:column="28">{

	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">Classroom</name></type> <name pos:line="15" pos:column="33">classroom</name></decl>;</decl_stmt>
	
	<function><type><annotation pos:line="17" pos:column="9">@<name pos:line="17" pos:column="10">Before</name></annotation> 
	<specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">void</name></type> <name pos:line="18" pos:column="21">createClassRoomObject</name><parameter_list pos:line="18" pos:column="42">()</parameter_list><block pos:line="18" pos:column="44">{
		<comment type="block" pos:line="19" pos:column="17">/*
		 * Existing classroom id used to initialize classroom object
		 */</comment>
		<expr_stmt><expr><name pos:line="22" pos:column="17">classroom</name> <op:operator pos:line="22" pos:column="27">=</op:operator> <op:operator pos:line="22" pos:column="29">new</op:operator> <call><name pos:line="22" pos:column="33">Classroom</name><argument_list pos:line="22" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="22" pos:column="43">49</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="25" pos:column="9">@<name pos:line="25" pos:column="10">Test</name></annotation>
	<specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">testClassroom</name><parameter_list pos:line="26" pos:column="34">()</parameter_list> <block pos:line="26" pos:column="37">{
		<comment type="block" pos:line="27" pos:column="17">/*
		 * Entering a existing classroom id
		 */</comment>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">Classroom</name></type> <name pos:line="30" pos:column="27">result</name> <init pos:line="30" pos:column="34">= <expr><op:operator pos:line="30" pos:column="36">new</op:operator> <call><name pos:line="30" pos:column="40">Classroom</name><argument_list pos:line="30" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">assertNotNull</name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">assertEquals</name><argument_list pos:line="32" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="32" pos:column="30">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="33">result</name><op:operator pos:line="32" pos:column="39">.</op:operator><name pos:line="32" pos:column="40">getClassroomID</name></name><argument_list pos:line="32" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">assertEquals</name><argument_list pos:line="33" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="33" pos:column="30">8</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="33">result</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">getClassroomCapacity</name></name><argument_list pos:line="33" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">assertNotNull</name><argument_list pos:line="34" pos:column="30">(<argument><expr><call><name><name pos:line="34" pos:column="31">result</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">getClassroomLocation</name></name><argument_list pos:line="34" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">assertNotNull</name><argument_list pos:line="35" pos:column="30">(<argument><expr><call><name><name pos:line="35" pos:column="31">result</name><op:operator pos:line="35" pos:column="37">.</op:operator><name pos:line="35" pos:column="38">getClassroomName</name></name><argument_list pos:line="35" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="38" pos:column="9">@<name pos:line="38" pos:column="10">Test</name> <argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">expected</name> <op:operator pos:line="38" pos:column="25">=</op:operator> <name><name pos:line="38" pos:column="27">IllegalArgumentException</name><op:operator pos:line="38" pos:column="51">.</op:operator><name pos:line="38" pos:column="52">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">testClassroom2</name><parameter_list pos:line="39" pos:column="35">()</parameter_list> <block pos:line="39" pos:column="38">{
		<comment type="block" pos:line="40" pos:column="17">/*
		 * entering a non existing classroom id
		 */</comment>
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">Classroom</name></type> <name pos:line="43" pos:column="27">result</name> <init pos:line="43" pos:column="34">= <expr><op:operator pos:line="43" pos:column="36">new</op:operator> <call><name pos:line="43" pos:column="40">Classroom</name><argument_list pos:line="43" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="50">300</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="46" pos:column="9">@<name pos:line="46" pos:column="10">Test</name></annotation>
	<specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">testAddNewClassroom</name><parameter_list pos:line="47" pos:column="40">()</parameter_list> <block pos:line="47" pos:column="43">{
		<comment type="block" pos:line="48" pos:column="17">/*
		 * Adding a existing classroom to the database
		 */</comment>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">boolean</name></type> <name pos:line="51" pos:column="25">isAdded</name> <init pos:line="51" pos:column="33">= <expr><call><name><name pos:line="51" pos:column="35">Classroom</name><op:operator pos:line="51" pos:column="44">.</op:operator><name pos:line="51" pos:column="45">addNewClassroom</name></name><argument_list pos:line="51" pos:column="60">(<argument><expr><name><name pos:line="51" pos:column="61">ClassroomName</name><op:operator pos:line="51" pos:column="74">.</op:operator><name pos:line="51" pos:column="75">CLASS1</name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="83">ClassroomLocation</name><op:operator pos:line="51" pos:column="100">.</op:operator><name pos:line="51" pos:column="101">LOCATION2</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="51" pos:column="112">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">assertFalse</name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">isAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="55" pos:column="9">@<name pos:line="55" pos:column="10">Test</name></annotation>
	<specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">testAddNewClassroom2</name><parameter_list pos:line="56" pos:column="41">()</parameter_list> <block pos:line="56" pos:column="44">{
		<comment type="block" pos:line="57" pos:column="17">/*
		 * Adding a new classroom to the database
		 * This test succeeds only at the first run, fails on next consecutive runs
		 */</comment>
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">boolean</name></type> <name pos:line="61" pos:column="25">isAdded</name> <init pos:line="61" pos:column="33">= <expr><call><name><name pos:line="61" pos:column="35">Classroom</name><op:operator pos:line="61" pos:column="44">.</op:operator><name pos:line="61" pos:column="45">addNewClassroom</name></name><argument_list pos:line="61" pos:column="60">(<argument><expr><name><name pos:line="61" pos:column="61">ClassroomName</name><op:operator pos:line="61" pos:column="74">.</op:operator><name pos:line="61" pos:column="75">CLASS1</name></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="83">ClassroomLocation</name><op:operator pos:line="61" pos:column="100">.</op:operator><name pos:line="61" pos:column="101">LOCATION3</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="112">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assertFalse</name><argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">isAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="65" pos:column="9">@<name pos:line="65" pos:column="10">Test</name></annotation>
	<specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">testAddNewClassroom3</name><parameter_list pos:line="66" pos:column="41">()</parameter_list> <block pos:line="66" pos:column="44">{
		<comment type="block" pos:line="67" pos:column="17">/*
		 * Passing null values to the function and testing
		 */</comment>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">boolean</name></type> <name pos:line="70" pos:column="25">isAdded</name> <init pos:line="70" pos:column="33">= <expr><call><name><name pos:line="70" pos:column="35">Classroom</name><op:operator pos:line="70" pos:column="44">.</op:operator><name pos:line="70" pos:column="45">addNewClassroom</name></name><argument_list pos:line="70" pos:column="60">(<argument><expr><lit:literal type="null" pos:line="70" pos:column="61">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="70" pos:column="67">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="70" pos:column="73">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">assertFalse</name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">isAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="74" pos:column="9">@<name pos:line="74" pos:column="10">Test</name></annotation>
	<specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">testGetEmptySlot</name><parameter_list pos:line="75" pos:column="37">()</parameter_list> <block pos:line="75" pos:column="40">{
		<comment type="block" pos:line="76" pos:column="17">/*
		 * Returns a time slot object for the empty time slot found in the specifies classroom for TYPE 1 slot
		 */</comment>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">Timeslots</name></type> <name pos:line="79" pos:column="27">timeslot</name> <init pos:line="79" pos:column="36">= <expr><call><name><name pos:line="79" pos:column="38">classroom</name><op:operator pos:line="79" pos:column="47">.</op:operator><name pos:line="79" pos:column="48">getEmptySlot</name></name><argument_list pos:line="79" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="79" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="81" pos:column="17">if<condition pos:line="81" pos:column="19">(<expr><name pos:line="81" pos:column="20">timeslot</name> <op:operator pos:line="81" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="81" pos:column="32">null</lit:literal></expr>)</condition><then pos:line="81" pos:column="37">
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">assertNull</name><argument_list pos:line="82" pos:column="35">(<argument><expr><name pos:line="82" pos:column="36">timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="83" pos:column="17">else<block pos:line="83" pos:column="21">{
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">assertNotNull</name><argument_list pos:line="84" pos:column="38">(<argument><expr><name pos:line="84" pos:column="39">timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">System</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">out</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">println</name></name><argument_list pos:line="85" pos:column="43">(<argument><expr><call><name><name pos:line="85" pos:column="44">timeslot</name><op:operator pos:line="85" pos:column="52">.</op:operator><name pos:line="85" pos:column="53">toString</name></name><argument_list pos:line="85" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	
	<function><type><annotation pos:line="89" pos:column="9">@<name pos:line="89" pos:column="10">Test</name></annotation>
	<specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">testGetEmptySlot2</name><parameter_list pos:line="90" pos:column="38">()</parameter_list> <block pos:line="90" pos:column="41">{
		<comment type="block" pos:line="91" pos:column="17">/*
		 * Returns a time slot object for the empty time slot found in the specifies classroom for TYPE 2 slot
		 */</comment>
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">Timeslots</name></type> <name pos:line="94" pos:column="27">timeslot</name> <init pos:line="94" pos:column="36">= <expr><call><name><name pos:line="94" pos:column="38">classroom</name><op:operator pos:line="94" pos:column="47">.</op:operator><name pos:line="94" pos:column="48">getEmptySlot</name></name><argument_list pos:line="94" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="94" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="95" pos:column="17">if<condition pos:line="95" pos:column="19">(<expr><name pos:line="95" pos:column="20">timeslot</name> <op:operator pos:line="95" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="95" pos:column="32">null</lit:literal></expr>)</condition><then pos:line="95" pos:column="37">
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">assertNull</name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="97" pos:column="17">else<block pos:line="97" pos:column="21">{
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">assertNotNull</name><argument_list pos:line="98" pos:column="38">(<argument><expr><name pos:line="98" pos:column="39">timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">System</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">out</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">println</name></name><argument_list pos:line="99" pos:column="43">(<argument><expr><call><name><name pos:line="99" pos:column="44">timeslot</name><op:operator pos:line="99" pos:column="52">.</op:operator><name pos:line="99" pos:column="53">toString</name></name><argument_list pos:line="99" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><type><annotation pos:line="103" pos:column="9">@<name pos:line="103" pos:column="10">Test</name></annotation>
	<specifier pos:line="104" pos:column="9">public</specifier> <name pos:line="104" pos:column="16">void</name></type> <name pos:line="104" pos:column="21">testCheckTimeSlotType</name><parameter_list pos:line="104" pos:column="42">()</parameter_list> <block pos:line="104" pos:column="45">{
		<comment type="block" pos:line="105" pos:column="17">/*
		 * Check time slot type 1
		 */</comment>
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">boolean</name></type> <name pos:line="108" pos:column="25">check</name> <init pos:line="108" pos:column="31">= <expr><call><name><name pos:line="108" pos:column="33">Classroom</name><op:operator pos:line="108" pos:column="42">.</op:operator><name pos:line="108" pos:column="43">checkTimeSlotType</name></name><argument_list pos:line="108" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="108" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">assertTrue</name><argument_list pos:line="109" pos:column="27">(<argument><expr><name pos:line="109" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="112" pos:column="9">@<name pos:line="112" pos:column="10">Test</name></annotation>
	<specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">void</name></type> <name pos:line="113" pos:column="21">testCheckTimeSlotType2</name><parameter_list pos:line="113" pos:column="43">()</parameter_list> <block pos:line="113" pos:column="46">{
		<comment type="block" pos:line="114" pos:column="17">/*
		 * Check time slot type 2
		 */</comment>
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">boolean</name></type> <name pos:line="117" pos:column="25">check</name> <init pos:line="117" pos:column="31">= <expr><call><name><name pos:line="117" pos:column="33">Classroom</name><op:operator pos:line="117" pos:column="42">.</op:operator><name pos:line="117" pos:column="43">checkTimeSlotType</name></name><argument_list pos:line="117" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="117" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="118" pos:column="17">assertTrue</name><argument_list pos:line="118" pos:column="27">(<argument><expr><name pos:line="118" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="121" pos:column="9">@<name pos:line="121" pos:column="10">Test</name></annotation>
	<specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">void</name></type> <name pos:line="122" pos:column="21">testCheckTimeSlotType3</name><parameter_list pos:line="122" pos:column="43">()</parameter_list> <block pos:line="122" pos:column="46">{
		<comment type="block" pos:line="123" pos:column="17">/*
		 * Check invalid time slot type (i.e 3)
		 */</comment>
		<decl_stmt><decl><type><name pos:line="126" pos:column="17">boolean</name></type> <name pos:line="126" pos:column="25">check</name> <init pos:line="126" pos:column="31">= <expr><call><name><name pos:line="126" pos:column="33">Classroom</name><op:operator pos:line="126" pos:column="42">.</op:operator><name pos:line="126" pos:column="43">checkTimeSlotType</name></name><argument_list pos:line="126" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="61">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="127" pos:column="17">assertFalse</name><argument_list pos:line="127" pos:column="28">(<argument><expr><name pos:line="127" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	
	<function><type><annotation pos:line="131" pos:column="9">@<name pos:line="131" pos:column="10">Test</name></annotation>
	<specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">void</name></type> <name pos:line="132" pos:column="21">testGetEmptyClassroom</name><parameter_list pos:line="132" pos:column="42">()</parameter_list> <block pos:line="132" pos:column="45">{
		<comment type="block" pos:line="133" pos:column="17">/*
		 * Test for a location with all valid parameters and timeslot type 1
		 */</comment>
		<decl_stmt><decl><type><name pos:line="136" pos:column="17">Classroom</name></type> <name pos:line="136" pos:column="27">result</name> <init pos:line="136" pos:column="34">= <expr><call><name><name pos:line="136" pos:column="36">Classroom</name><op:operator pos:line="136" pos:column="45">.</op:operator><name pos:line="136" pos:column="46">getEmptyClassroom</name></name><argument_list pos:line="136" pos:column="63">(<argument><expr><name><name pos:line="136" pos:column="64">ClassroomLocation</name><op:operator pos:line="136" pos:column="81">.</op:operator><name pos:line="136" pos:column="82">LOCATION3</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="93">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="96">5</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">assertNotNull</name><argument_list pos:line="137" pos:column="30">(<argument><expr><name pos:line="137" pos:column="31">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="140" pos:column="9">@<name pos:line="140" pos:column="10">Test</name></annotation>
	<specifier pos:line="141" pos:column="9">public</specifier> <name pos:line="141" pos:column="16">void</name></type> <name pos:line="141" pos:column="21">testGetEmptyClassroom2</name><parameter_list pos:line="141" pos:column="43">()</parameter_list> <block pos:line="141" pos:column="46">{
		<comment type="block" pos:line="142" pos:column="17">/*
		 * Test for a location with all valid parameters and timeslot type 2
		 */</comment>
		<decl_stmt><decl><type><name pos:line="145" pos:column="17">Classroom</name></type> <name pos:line="145" pos:column="27">result</name> <init pos:line="145" pos:column="34">= <expr><call><name><name pos:line="145" pos:column="36">Classroom</name><op:operator pos:line="145" pos:column="45">.</op:operator><name pos:line="145" pos:column="46">getEmptyClassroom</name></name><argument_list pos:line="145" pos:column="63">(<argument><expr><name><name pos:line="145" pos:column="64">ClassroomLocation</name><op:operator pos:line="145" pos:column="81">.</op:operator><name pos:line="145" pos:column="82">LOCATION2</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="96">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="146" pos:column="17">assertNotNull</name><argument_list pos:line="146" pos:column="30">(<argument><expr><name pos:line="146" pos:column="31">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="149" pos:column="9">@<name pos:line="149" pos:column="10">Test</name></annotation>
	<specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">void</name></type> <name pos:line="150" pos:column="21">testGetEmptyClassroom3</name><parameter_list pos:line="150" pos:column="43">()</parameter_list> <block pos:line="150" pos:column="46">{
		<comment type="block" pos:line="151" pos:column="17">/*
		 * Test for a location with all valid parameters but invalid timeslot type (i.e 3)
		 */</comment>
		<decl_stmt><decl><type><name pos:line="154" pos:column="17">Classroom</name></type> <name pos:line="154" pos:column="27">result</name> <init pos:line="154" pos:column="34">= <expr><call><name><name pos:line="154" pos:column="36">Classroom</name><op:operator pos:line="154" pos:column="45">.</op:operator><name pos:line="154" pos:column="46">getEmptyClassroom</name></name><argument_list pos:line="154" pos:column="63">(<argument><expr><name><name pos:line="154" pos:column="64">ClassroomLocation</name><op:operator pos:line="154" pos:column="81">.</op:operator><name pos:line="154" pos:column="82">LOCATION3</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="154" pos:column="93">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="154" pos:column="96">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="155" pos:column="17">assertNull</name><argument_list pos:line="155" pos:column="27">(<argument><expr><name pos:line="155" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="158" pos:column="9">@<name pos:line="158" pos:column="10">Test</name></annotation>
	<specifier pos:line="159" pos:column="9">public</specifier> <name pos:line="159" pos:column="16">void</name></type> <name pos:line="159" pos:column="21">testGetEmptyClassroom4</name><parameter_list pos:line="159" pos:column="43">()</parameter_list> <block pos:line="159" pos:column="46">{
		<comment type="block" pos:line="160" pos:column="17">/*
		 * Test for a location with all valid parameters and but unavailable classroom capacity
		 */</comment>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">Classroom</name></type> <name pos:line="163" pos:column="27">result</name> <init pos:line="163" pos:column="34">= <expr><call><name><name pos:line="163" pos:column="36">Classroom</name><op:operator pos:line="163" pos:column="45">.</op:operator><name pos:line="163" pos:column="46">getEmptyClassroom</name></name><argument_list pos:line="163" pos:column="63">(<argument><expr><name><name pos:line="163" pos:column="64">ClassroomLocation</name><op:operator pos:line="163" pos:column="81">.</op:operator><name pos:line="163" pos:column="82">LOCATION3</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="96">50</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="164" pos:column="17">assertNull</name><argument_list pos:line="164" pos:column="27">(<argument><expr><name pos:line="164" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="167" pos:column="9">@<name pos:line="167" pos:column="10">Test</name></annotation>
	<specifier pos:line="168" pos:column="9">public</specifier> <name pos:line="168" pos:column="16">void</name></type> <name pos:line="168" pos:column="21">testGetEmptyClassroom5</name><parameter_list pos:line="168" pos:column="43">()</parameter_list> <block pos:line="168" pos:column="46">{
		<comment type="block" pos:line="169" pos:column="17">/*
		 * Test for a null location with all valid parameters and timeslot type 1
		 */</comment>
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">Classroom</name></type> <name pos:line="172" pos:column="27">result</name> <init pos:line="172" pos:column="34">= <expr><call><name><name pos:line="172" pos:column="36">Classroom</name><op:operator pos:line="172" pos:column="45">.</op:operator><name pos:line="172" pos:column="46">getEmptyClassroom</name></name><argument_list pos:line="172" pos:column="63">(<argument><expr><lit:literal type="null" pos:line="172" pos:column="64">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="172" pos:column="70">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="172" pos:column="73">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="173" pos:column="17">assertNull</name><argument_list pos:line="173" pos:column="27">(<argument><expr><name pos:line="173" pos:column="28">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="176" pos:column="9">@<name pos:line="176" pos:column="10">Test</name></annotation>
	<specifier pos:line="177" pos:column="9">public</specifier> <name pos:line="177" pos:column="16">void</name></type> <name pos:line="177" pos:column="21">testGetClassID</name><parameter_list pos:line="177" pos:column="35">()</parameter_list> <block pos:line="177" pos:column="38">{
		<comment type="block" pos:line="178" pos:column="17">/*
		 * Test for valid classroom and location
		 */</comment>
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">int</name></type> <name pos:line="181" pos:column="21">id</name> <init pos:line="181" pos:column="24">= <expr><call><name><name pos:line="181" pos:column="26">Classroom</name><op:operator pos:line="181" pos:column="35">.</op:operator><name pos:line="181" pos:column="36">getClassID</name></name><argument_list pos:line="181" pos:column="46">(<argument><expr><name><name pos:line="181" pos:column="47">ClassroomName</name><op:operator pos:line="181" pos:column="60">.</op:operator><name pos:line="181" pos:column="61">CLASS1</name></name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="69">ClassroomLocation</name><op:operator pos:line="181" pos:column="86">.</op:operator><name pos:line="181" pos:column="87">LOCATION1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="182" pos:column="17">assertEquals</name><argument_list pos:line="182" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="30">1</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="33">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="185" pos:column="9">@<name pos:line="185" pos:column="10">Test</name></annotation>
	<specifier pos:line="186" pos:column="9">public</specifier> <name pos:line="186" pos:column="16">void</name></type> <name pos:line="186" pos:column="21">testGetClassID2</name><parameter_list pos:line="186" pos:column="36">()</parameter_list> <block pos:line="186" pos:column="39">{
		<comment type="block" pos:line="187" pos:column="17">/*
		 * Test for invalid classroom and/or location
		 */</comment>
		<decl_stmt><decl><type><name pos:line="190" pos:column="17">int</name></type> <name pos:line="190" pos:column="21">id</name> <init pos:line="190" pos:column="24">= <expr><call><name><name pos:line="190" pos:column="26">Classroom</name><op:operator pos:line="190" pos:column="35">.</op:operator><name pos:line="190" pos:column="36">getClassID</name></name><argument_list pos:line="190" pos:column="46">(<argument><expr><lit:literal type="null" pos:line="190" pos:column="47">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="190" pos:column="53">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="191" pos:column="17">assertEquals</name><argument_list pos:line="191" pos:column="29">(<argument><expr><op:operator pos:line="191" pos:column="30">-</op:operator><lit:literal type="number" pos:line="191" pos:column="31">1</lit:literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="34">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="194" pos:column="9">@<name pos:line="194" pos:column="10">Test</name></annotation>
	<specifier pos:line="195" pos:column="9">public</specifier> <name pos:line="195" pos:column="16">void</name></type> <name pos:line="195" pos:column="21">testGetAllEmptyClassroom</name><parameter_list pos:line="195" pos:column="45">()</parameter_list> <block pos:line="195" pos:column="48">{
		<comment type="block" pos:line="196" pos:column="17">/*
		 * Test for all valid parameters for location, time slot type and capacity
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="199" pos:column="17">LinkedHashMap</name><argument_list pos:line="199" pos:column="30">&lt;<argument><name pos:line="199" pos:column="31">Integer</name></argument>, <argument><name pos:line="199" pos:column="40">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="51">classrooms</name> <init pos:line="199" pos:column="62">= <expr><call><name><name pos:line="199" pos:column="64">Classroom</name><op:operator pos:line="199" pos:column="73">.</op:operator><name pos:line="199" pos:column="74">getAllEmptyClassroom</name></name><argument_list pos:line="199" pos:column="94">(<argument><expr><name><name pos:line="199" pos:column="95">ClassroomLocation</name><op:operator pos:line="199" pos:column="112">.</op:operator><name pos:line="199" pos:column="113">LOCATION1</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="199" pos:column="124">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="199" pos:column="127">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="200" pos:column="17">assertNotNull</name><argument_list pos:line="200" pos:column="30">(<argument><expr><name pos:line="200" pos:column="31">classrooms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="204" pos:column="9">@<name pos:line="204" pos:column="10">Test</name></annotation>
	<specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">void</name></type> <name pos:line="205" pos:column="21">testGetAllEmptyClassroom2</name><parameter_list pos:line="205" pos:column="46">()</parameter_list> <block pos:line="205" pos:column="49">{
		<comment type="block" pos:line="206" pos:column="17">/*
		 * Test for all valid parameters for location, time slot type, but invalid capacity
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="209" pos:column="17">LinkedHashMap</name><argument_list pos:line="209" pos:column="30">&lt;<argument><name pos:line="209" pos:column="31">Integer</name></argument>, <argument><name pos:line="209" pos:column="40">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="51">classrooms</name> <init pos:line="209" pos:column="62">= <expr><call><name><name pos:line="209" pos:column="64">Classroom</name><op:operator pos:line="209" pos:column="73">.</op:operator><name pos:line="209" pos:column="74">getAllEmptyClassroom</name></name><argument_list pos:line="209" pos:column="94">(<argument><expr><name><name pos:line="209" pos:column="95">ClassroomLocation</name><op:operator pos:line="209" pos:column="112">.</op:operator><name pos:line="209" pos:column="113">LOCATION1</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="209" pos:column="124">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="209" pos:column="127">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="210" pos:column="17">assertNull</name><argument_list pos:line="210" pos:column="27">(<argument><expr><name pos:line="210" pos:column="28">classrooms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="214" pos:column="9">@<name pos:line="214" pos:column="10">Test</name></annotation>
	<specifier pos:line="215" pos:column="9">public</specifier> <name pos:line="215" pos:column="16">void</name></type> <name pos:line="215" pos:column="21">testGetAllEmptyClassroom3</name><parameter_list pos:line="215" pos:column="46">()</parameter_list> <block pos:line="215" pos:column="49">{
		<comment type="block" pos:line="216" pos:column="17">/*
		 * Test for all valid parameters for location,capacity but invalid timeslot
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="219" pos:column="17">LinkedHashMap</name><argument_list pos:line="219" pos:column="30">&lt;<argument><name pos:line="219" pos:column="31">Integer</name></argument>, <argument><name pos:line="219" pos:column="40">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="51">classrooms</name> <init pos:line="219" pos:column="62">= <expr><call><name><name pos:line="219" pos:column="64">Classroom</name><op:operator pos:line="219" pos:column="73">.</op:operator><name pos:line="219" pos:column="74">getAllEmptyClassroom</name></name><argument_list pos:line="219" pos:column="94">(<argument><expr><name><name pos:line="219" pos:column="95">ClassroomLocation</name><op:operator pos:line="219" pos:column="112">.</op:operator><name pos:line="219" pos:column="113">LOCATION1</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="219" pos:column="124">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="219" pos:column="127">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="220" pos:column="17">assertNull</name><argument_list pos:line="220" pos:column="27">(<argument><expr><name pos:line="220" pos:column="28">classrooms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="224" pos:column="9">@<name pos:line="224" pos:column="10">Test</name></annotation>
	<specifier pos:line="225" pos:column="9">public</specifier> <name pos:line="225" pos:column="16">void</name></type> <name pos:line="225" pos:column="21">testGetAllEmptyClassroom4</name><parameter_list pos:line="225" pos:column="46">()</parameter_list> <block pos:line="225" pos:column="49">{
		<comment type="block" pos:line="226" pos:column="17">/*
		 * Test for all valid parameters for capacity, timeslot type but invalid location
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="229" pos:column="17">LinkedHashMap</name><argument_list pos:line="229" pos:column="30">&lt;<argument><name pos:line="229" pos:column="31">Integer</name></argument>, <argument><name pos:line="229" pos:column="40">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="229" pos:column="51">classrooms</name> <init pos:line="229" pos:column="62">= <expr><call><name><name pos:line="229" pos:column="64">Classroom</name><op:operator pos:line="229" pos:column="73">.</op:operator><name pos:line="229" pos:column="74">getAllEmptyClassroom</name></name><argument_list pos:line="229" pos:column="94">(<argument><expr><lit:literal type="null" pos:line="229" pos:column="95">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="229" pos:column="101">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="229" pos:column="104">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="230" pos:column="17">assertNull</name><argument_list pos:line="230" pos:column="27">(<argument><expr><name pos:line="230" pos:column="28">classrooms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<function><type><annotation pos:line="234" pos:column="9">@<name pos:line="234" pos:column="10">Test</name></annotation>
	<specifier pos:line="235" pos:column="9">public</specifier> <name pos:line="235" pos:column="16">void</name></type> <name pos:line="235" pos:column="21">testFindOpenSlotsForClassroom</name><parameter_list pos:line="235" pos:column="50">()</parameter_list> <block pos:line="235" pos:column="53">{
		<comment type="block" pos:line="236" pos:column="17">/*
		 * Valid time slot type
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="239" pos:column="17">ArrayList</name><argument_list pos:line="239" pos:column="26">&lt;<argument><name pos:line="239" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="239" pos:column="38">slots</name> <init pos:line="239" pos:column="44">= <expr><call><name><name pos:line="239" pos:column="46">classroom</name><op:operator pos:line="239" pos:column="55">.</op:operator><name pos:line="239" pos:column="56">findOpenSlotsForClassroom</name></name><argument_list pos:line="239" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="239" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="240" pos:column="17">assertNotNull</name><argument_list pos:line="240" pos:column="30">(<argument><expr><name pos:line="240" pos:column="31">slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="243" pos:column="9">@<name pos:line="243" pos:column="10">Test</name></annotation>
	<specifier pos:line="244" pos:column="9">public</specifier> <name pos:line="244" pos:column="16">void</name></type> <name pos:line="244" pos:column="21">testFindOpenSlotsForClassroom2</name><parameter_list pos:line="244" pos:column="51">()</parameter_list> <block pos:line="244" pos:column="54">{
		<comment type="block" pos:line="245" pos:column="17">/*
		 * Valid time slot type
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="248" pos:column="17">ArrayList</name><argument_list pos:line="248" pos:column="26">&lt;<argument><name pos:line="248" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="248" pos:column="38">slots</name> <init pos:line="248" pos:column="44">= <expr><call><name><name pos:line="248" pos:column="46">classroom</name><op:operator pos:line="248" pos:column="55">.</op:operator><name pos:line="248" pos:column="56">findOpenSlotsForClassroom</name></name><argument_list pos:line="248" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="248" pos:column="82">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="249" pos:column="17">assertNotNull</name><argument_list pos:line="249" pos:column="30">(<argument><expr><name pos:line="249" pos:column="31">slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="252" pos:column="9">@<name pos:line="252" pos:column="10">Test</name></annotation>
	<specifier pos:line="253" pos:column="9">public</specifier> <name pos:line="253" pos:column="16">void</name></type> <name pos:line="253" pos:column="21">testFindOpenSlotsForClassroom3</name><parameter_list pos:line="253" pos:column="51">()</parameter_list> <block pos:line="253" pos:column="54">{
		<comment type="block" pos:line="254" pos:column="17">/*
		 * Invalid time slot type
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="257" pos:column="17">ArrayList</name><argument_list pos:line="257" pos:column="26">&lt;<argument><name pos:line="257" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="257" pos:column="38">slots</name> <init pos:line="257" pos:column="44">= <expr><call><name><name pos:line="257" pos:column="46">classroom</name><op:operator pos:line="257" pos:column="55">.</op:operator><name pos:line="257" pos:column="56">findOpenSlotsForClassroom</name></name><argument_list pos:line="257" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="257" pos:column="82">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="258" pos:column="17">assertNull</name><argument_list pos:line="258" pos:column="27">(<argument><expr><name pos:line="258" pos:column="28">slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="261" pos:column="9">@<name pos:line="261" pos:column="10">Test</name></annotation>
	<specifier pos:line="262" pos:column="9">public</specifier> <name pos:line="262" pos:column="16">void</name></type> <name pos:line="262" pos:column="21">testIsEmpty</name><parameter_list pos:line="262" pos:column="32">()</parameter_list> <block pos:line="262" pos:column="35">{
		<comment type="block" pos:line="263" pos:column="17">/*
		 * Test for a classroom and time slot combination that is available
		 */</comment>
		<decl_stmt><decl><type><name pos:line="266" pos:column="17">boolean</name></type> <name pos:line="266" pos:column="25">check</name> <init pos:line="266" pos:column="31">= <expr><call><name><name pos:line="266" pos:column="33">Classroom</name><op:operator pos:line="266" pos:column="42">.</op:operator><name pos:line="266" pos:column="43">isEmpty</name></name><argument_list pos:line="266" pos:column="50">(<argument><expr><name pos:line="266" pos:column="51">classroom</name></expr></argument>, <argument><expr><op:operator pos:line="266" pos:column="62">new</op:operator> <call><name pos:line="266" pos:column="66">Timeslots</name><argument_list pos:line="266" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="266" pos:column="76">30</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="267" pos:column="17">assertTrue</name><argument_list pos:line="267" pos:column="27">(<argument><expr><name pos:line="267" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="270" pos:column="9">@<name pos:line="270" pos:column="10">Test</name></annotation>
	<specifier pos:line="271" pos:column="9">public</specifier> <name pos:line="271" pos:column="16">void</name></type> <name pos:line="271" pos:column="21">testIsEmpty1</name><parameter_list pos:line="271" pos:column="33">()</parameter_list> <block pos:line="271" pos:column="36">{
		<comment type="block" pos:line="272" pos:column="17">/*
		 * Test for invalid inputs
		 */</comment>
		<decl_stmt><decl><type><name pos:line="275" pos:column="17">boolean</name></type> <name pos:line="275" pos:column="25">check</name> <init pos:line="275" pos:column="31">= <expr><call><name><name pos:line="275" pos:column="33">Classroom</name><op:operator pos:line="275" pos:column="42">.</op:operator><name pos:line="275" pos:column="43">isEmpty</name></name><argument_list pos:line="275" pos:column="50">(<argument><expr><lit:literal type="null" pos:line="275" pos:column="51">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="275" pos:column="57">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="276" pos:column="17">assertFalse</name><argument_list pos:line="276" pos:column="28">(<argument><expr><name pos:line="276" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>	

}</block></class>
</unit>
