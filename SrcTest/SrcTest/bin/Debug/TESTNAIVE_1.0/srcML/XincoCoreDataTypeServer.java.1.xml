<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\core\server\XincoCoreDataTypeServer.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2009 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoCoreDataTypeServer
 *
 * Description:     data type 
 *
 * Original Author: Alexander Manes
 * Date:            2004
 *
 * Modifications:
 * 
 * Who?             When?             What?
 * -                -                 -
 *
 *************************************************************
 */</comment>

<package pos:line="37" pos:column="1">package <name><name pos:line="37" pos:column="9">com</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">bluecubs</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">xinco</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">core</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">server</name></name>;</package>

<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">util</name><op:operator pos:line="39" pos:column="17">.</op:operator><name pos:line="39" pos:column="18">Vector</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">sql</name></name>.*;</import>

<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">com</name><op:operator pos:line="42" pos:column="11">.</op:operator><name pos:line="42" pos:column="12">bluecubs</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">xinco</name><op:operator pos:line="42" pos:column="26">.</op:operator><name pos:line="42" pos:column="27">core</name></name>.*;</import>

<class><specifier pos:line="44" pos:column="1">public</specifier> class <name pos:line="44" pos:column="14">XincoCoreDataTypeServer</name> <super><extends pos:line="44" pos:column="38">extends <name pos:line="44" pos:column="46">XincoCoreDataType</name></extends></super> <block pos:line="44" pos:column="64">{
    
    <comment type="line" pos:line="46" pos:column="5">//create data type object for data structures</comment>
    <constructor><specifier pos:line="47" pos:column="5">public</specifier> <name pos:line="47" pos:column="12">XincoCoreDataTypeServer</name><parameter_list pos:line="47" pos:column="35">(<param><decl><type><name pos:line="47" pos:column="36">int</name></type> <name pos:line="47" pos:column="40">attrID</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="48">XincoDBManager</name></type> <name pos:line="47" pos:column="63">DBM</name></decl></param>)</parameter_list> <throws pos:line="47" pos:column="68">throws <argument><expr><name pos:line="47" pos:column="75">XincoException</name></expr></argument></throws> <block pos:line="47" pos:column="90">{
        
        <try pos:line="49" pos:column="9">try <block pos:line="49" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">Statement</name></type> <name pos:line="50" pos:column="23">stmt</name> <init pos:line="50" pos:column="28">= <expr><call><name><name pos:line="50" pos:column="30">DBM</name><op:operator pos:line="50" pos:column="33">.</op:operator><name pos:line="50" pos:column="34">con</name><op:operator pos:line="50" pos:column="37">.</op:operator><name pos:line="50" pos:column="38">createStatement</name></name><argument_list pos:line="50" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">ResultSet</name></type> <name pos:line="51" pos:column="23">rs</name> <init pos:line="51" pos:column="26">= <expr><call><name><name pos:line="51" pos:column="28">stmt</name><op:operator pos:line="51" pos:column="32">.</op:operator><name pos:line="51" pos:column="33">executeQuery</name></name><argument_list pos:line="51" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="46">"SELECT * FROM xinco_core_data_type WHERE id="</lit:literal> <op:operator pos:line="51" pos:column="93">+</op:operator> <name pos:line="51" pos:column="95">attrID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="53" pos:column="25">//throw exception if no result found</comment>
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">int</name></type> <name pos:line="54" pos:column="29">RowCount</name> <init pos:line="54" pos:column="38">= <expr><lit:literal type="number" pos:line="54" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="55" pos:column="13">while <condition pos:line="55" pos:column="19">(<expr><call><name><name pos:line="55" pos:column="20">rs</name><op:operator pos:line="55" pos:column="22">.</op:operator><name pos:line="55" pos:column="23">next</name></name><argument_list pos:line="55" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="55" pos:column="31">{
				<expr_stmt><expr><name pos:line="56" pos:column="33">RowCount</name><op:operator pos:line="56" pos:column="41">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">setId</name><argument_list pos:line="57" pos:column="22">(<argument><expr><call><name><name pos:line="57" pos:column="23">rs</name><op:operator pos:line="57" pos:column="25">.</op:operator><name pos:line="57" pos:column="26">getInt</name></name><argument_list pos:line="57" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="33">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">setDesignation</name><argument_list pos:line="58" pos:column="31">(<argument><expr><call><name><name pos:line="58" pos:column="32">rs</name><op:operator pos:line="58" pos:column="34">.</op:operator><name pos:line="58" pos:column="35">getString</name></name><argument_list pos:line="58" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="45">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="59" pos:column="17">setDescription</name><argument_list pos:line="59" pos:column="31">(<argument><expr><call><name><name pos:line="59" pos:column="32">rs</name><op:operator pos:line="59" pos:column="34">.</op:operator><name pos:line="59" pos:column="35">getString</name></name><argument_list pos:line="59" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="45">"description"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="60" pos:column="33">setXinco_core_data_type_attributes</name><argument_list pos:line="60" pos:column="67">(<argument><expr><call><name><name pos:line="60" pos:column="68">XincoCoreDataTypeAttributeServer</name><op:operator pos:line="60" pos:column="100">.</op:operator><name pos:line="60" pos:column="101">getXincoCoreDataTypeAttributes</name></name><argument_list pos:line="60" pos:column="131">(<argument><expr><call><name pos:line="60" pos:column="132">getId</name><argument_list pos:line="60" pos:column="137">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="60" pos:column="141">DBM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">RowCount</name> <op:operator pos:line="62" pos:column="38">&lt;</op:operator> <lit:literal type="number" pos:line="62" pos:column="40">1</lit:literal></expr>)</condition><then pos:line="62" pos:column="42"> <block pos:line="62" pos:column="43">{
				<throw pos:line="63" pos:column="33">throw <expr><op:operator pos:line="63" pos:column="39">new</op:operator> <call><name pos:line="63" pos:column="43">XincoException</name><argument_list pos:line="63" pos:column="57">()</argument_list></call></expr>;</throw>
			}</block></then></if>

            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">stmt</name><op:operator pos:line="66" pos:column="17">.</op:operator><name pos:line="66" pos:column="18">close</name></name><argument_list pos:line="66" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="67" pos:column="11">catch <parameter_list pos:line="67" pos:column="17">(<param><decl><type><name pos:line="67" pos:column="18">Exception</name></type> <name pos:line="67" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="31">{
        	<throw pos:line="68" pos:column="17">throw <expr><op:operator pos:line="68" pos:column="23">new</op:operator> <call><name pos:line="68" pos:column="27">XincoException</name><argument_list pos:line="68" pos:column="41">()</argument_list></call></expr>;</throw>
        }</block></catch></try>
        
    }</block></constructor>

    <comment type="line" pos:line="73" pos:column="5">//create data type object for data structures</comment>
    <constructor><specifier pos:line="74" pos:column="5">public</specifier> <name pos:line="74" pos:column="12">XincoCoreDataTypeServer</name><parameter_list pos:line="74" pos:column="35">(<param><decl><type><name pos:line="74" pos:column="36">int</name></type> <name pos:line="74" pos:column="40">attrID</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="48">String</name></type> <name pos:line="74" pos:column="55">attrD</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="62">String</name></type> <name pos:line="74" pos:column="69">attrDESC</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="79">Vector</name></type> <name pos:line="74" pos:column="86">attrA</name></decl></param>)</parameter_list> <throws pos:line="74" pos:column="93">throws <argument><expr><name pos:line="74" pos:column="100">XincoException</name></expr></argument></throws> <block pos:line="74" pos:column="115">{
        
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">setId</name><argument_list pos:line="76" pos:column="14">(<argument><expr><name pos:line="76" pos:column="15">attrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">setDesignation</name><argument_list pos:line="77" pos:column="23">(<argument><expr><name pos:line="77" pos:column="24">attrD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">setDescription</name><argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">attrDESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">setXinco_core_data_type_attributes</name><argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">attrA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="line" pos:line="83" pos:column="5">//create complete list of data types</comment>
    <function><type><specifier pos:line="84" pos:column="5">public</specifier> <specifier pos:line="84" pos:column="12">static</specifier> <name pos:line="84" pos:column="19">Vector</name></type> <name pos:line="84" pos:column="26">getXincoCoreDataTypes</name><parameter_list pos:line="84" pos:column="47">(<param><decl><type><name pos:line="84" pos:column="48">XincoDBManager</name></type> <name pos:line="84" pos:column="63">DBM</name></decl></param>)</parameter_list> <block pos:line="84" pos:column="68">{
        
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">Vector</name></type> <name pos:line="86" pos:column="16">coreDataTypes</name> <init pos:line="86" pos:column="30">= <expr><op:operator pos:line="86" pos:column="32">new</op:operator> <call><name pos:line="86" pos:column="36">Vector</name><argument_list pos:line="86" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <try pos:line="88" pos:column="9">try <block pos:line="88" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">Statement</name></type> <name pos:line="89" pos:column="23">stmt</name> <init pos:line="89" pos:column="28">= <expr><call><name><name pos:line="89" pos:column="30">DBM</name><op:operator pos:line="89" pos:column="33">.</op:operator><name pos:line="89" pos:column="34">con</name><op:operator pos:line="89" pos:column="37">.</op:operator><name pos:line="89" pos:column="38">createStatement</name></name><argument_list pos:line="89" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">ResultSet</name></type> <name pos:line="90" pos:column="23">rs</name> <init pos:line="90" pos:column="26">= <expr><call><name><name pos:line="90" pos:column="28">stmt</name><op:operator pos:line="90" pos:column="32">.</op:operator><name pos:line="90" pos:column="33">executeQuery</name></name><argument_list pos:line="90" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="46">"SELECT * FROM xinco_core_data_type ORDER BY designation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <while pos:line="92" pos:column="13">while <condition pos:line="92" pos:column="19">(<expr><call><name><name pos:line="92" pos:column="20">rs</name><op:operator pos:line="92" pos:column="22">.</op:operator><name pos:line="92" pos:column="23">next</name></name><argument_list pos:line="92" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="92" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="93" pos:column="17">coreDataTypes</name><op:operator pos:line="93" pos:column="30">.</op:operator><name pos:line="93" pos:column="31">addElement</name></name><argument_list pos:line="93" pos:column="41">(<argument><expr><op:operator pos:line="93" pos:column="42">new</op:operator> <call><name pos:line="93" pos:column="46">XincoCoreDataTypeServer</name><argument_list pos:line="93" pos:column="69">(<argument><expr><call><name><name pos:line="93" pos:column="70">rs</name><op:operator pos:line="93" pos:column="72">.</op:operator><name pos:line="93" pos:column="73">getInt</name></name><argument_list pos:line="93" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="80">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="87">rs</name><op:operator pos:line="93" pos:column="89">.</op:operator><name pos:line="93" pos:column="90">getString</name></name><argument_list pos:line="93" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="100">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="116">rs</name><op:operator pos:line="93" pos:column="118">.</op:operator><name pos:line="93" pos:column="119">getString</name></name><argument_list pos:line="93" pos:column="128">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="129">"description"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="145">XincoCoreDataTypeAttributeServer</name><op:operator pos:line="93" pos:column="177">.</op:operator><name pos:line="93" pos:column="178">getXincoCoreDataTypeAttributes</name></name><argument_list pos:line="93" pos:column="208">(<argument><expr><call><name><name pos:line="93" pos:column="209">rs</name><op:operator pos:line="93" pos:column="211">.</op:operator><name pos:line="93" pos:column="212">getInt</name></name><argument_list pos:line="93" pos:column="218">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="219">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="93" pos:column="226">DBM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><call><name><name pos:line="96" pos:column="13">stmt</name><op:operator pos:line="96" pos:column="17">.</op:operator><name pos:line="96" pos:column="18">close</name></name><argument_list pos:line="96" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="97" pos:column="11">catch <parameter_list pos:line="97" pos:column="17">(<param><decl><type><name pos:line="97" pos:column="18">Exception</name></type> <name pos:line="97" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="98" pos:column="13">coreDataTypes</name><op:operator pos:line="98" pos:column="26">.</op:operator><name pos:line="98" pos:column="27">removeAllElements</name></name><argument_list pos:line="98" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return pos:line="101" pos:column="9">return <expr><name pos:line="101" pos:column="16">coreDataTypes</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
