<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\tools\MD5.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package pos:line="5" pos:column="1">package <name><name pos:line="5" pos:column="9">com</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">bluecubs</name><op:operator pos:line="5" pos:column="21">.</op:operator><name pos:line="5" pos:column="22">xinco</name><op:operator pos:line="5" pos:column="27">.</op:operator><name pos:line="5" pos:column="28">tools</name></name>;</package>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">bluecubs</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">xinco</name><op:operator pos:line="7" pos:column="26">.</op:operator><name pos:line="7" pos:column="27">core</name><op:operator pos:line="7" pos:column="31">.</op:operator><name pos:line="7" pos:column="32">XincoException</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">security</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">MessageDigest</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">security</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">NoSuchAlgorithmException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">logging</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">Level</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">util</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">logging</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Logger</name></name>;</import>

<comment type="block" format="javadoc" pos:line="13" pos:column="1">/**
 *
 * @author Javier A. Ortiz
 */</comment>
<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">MD5</name> <block pos:line="17" pos:column="18">{

    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">private</specifier> <specifier pos:line="19" pos:column="13">static</specifier> <name pos:line="19" pos:column="20">String</name></type> <name pos:line="19" pos:column="27">md5val</name> <init pos:line="19" pos:column="34">= <expr><lit:literal type="string" pos:line="19" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">private</specifier> <specifier pos:line="20" pos:column="13">static</specifier> <name pos:line="20" pos:column="20">MessageDigest</name></type> <name pos:line="20" pos:column="34">algorithm</name> <init pos:line="20" pos:column="44">= <expr><lit:literal type="null" pos:line="20" pos:column="46">null</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="22" pos:column="5">public</specifier> <specifier pos:line="22" pos:column="12">static</specifier> <name pos:line="22" pos:column="19">void</name></type> <name pos:line="22" pos:column="24">main</name><parameter_list pos:line="22" pos:column="28">(<param><decl><type><name><name pos:line="22" pos:column="29">String</name><index pos:line="22" pos:column="35">[]</index></name></type> <name pos:line="22" pos:column="38">args</name></decl></param>)</parameter_list> <block pos:line="22" pos:column="44">{
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">args</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">length</name></name> <op:operator pos:line="23" pos:column="25">!=</op:operator> <lit:literal type="number" pos:line="23" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="23" pos:column="30"> <block pos:line="23" pos:column="31">{
            <for pos:line="24" pos:column="13">for (<init><decl><type><name pos:line="24" pos:column="18">int</name></type> <name pos:line="24" pos:column="22">i</name> <init pos:line="24" pos:column="24">= <expr><lit:literal type="number" pos:line="24" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="24" pos:column="29">i</name> <op:operator pos:line="24" pos:column="31">&lt;</op:operator> <name><name pos:line="24" pos:column="33">args</name><op:operator pos:line="24" pos:column="37">.</op:operator><name pos:line="24" pos:column="38">length</name></name></expr>;</condition> <incr><expr><name pos:line="24" pos:column="46">i</name><op:operator pos:line="24" pos:column="47">++</op:operator></expr></incr>) <block pos:line="24" pos:column="51">{
                <try pos:line="25" pos:column="17">try <block pos:line="25" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="26" pos:column="21">System</name><op:operator pos:line="26" pos:column="27">.</op:operator><name pos:line="26" pos:column="28">out</name><op:operator pos:line="26" pos:column="31">.</op:operator><name pos:line="26" pos:column="32">println</name></name><argument_list pos:line="26" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="40">"MD5 ("</lit:literal> <op:operator pos:line="26" pos:column="48">+</op:operator> <name><name pos:line="26" pos:column="50">args</name><index pos:line="26" pos:column="54">[<expr><name pos:line="26" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="26" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="26" pos:column="60">") = "</lit:literal> <op:operator pos:line="26" pos:column="67">+</op:operator> <call><name pos:line="26" pos:column="69">encrypt</name><argument_list pos:line="26" pos:column="76">(<argument><expr><name><name pos:line="26" pos:column="77">args</name><index pos:line="26" pos:column="81">[<expr><name pos:line="26" pos:column="82">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="27" pos:column="19">catch <parameter_list pos:line="27" pos:column="25">(<param><decl><type><name pos:line="27" pos:column="26">XincoException</name></type> <name pos:line="27" pos:column="41">ex</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="45">{
                    <expr_stmt><expr><call><name><name pos:line="28" pos:column="21">Logger</name><op:operator pos:line="28" pos:column="27">.</op:operator><name pos:line="28" pos:column="28">getLogger</name></name><argument_list pos:line="28" pos:column="37">(<argument><expr><call><name><name pos:line="28" pos:column="38">MD5</name><op:operator pos:line="28" pos:column="41">.</op:operator><name><name pos:line="28" pos:column="42">class</name><op:operator pos:line="28" pos:column="47">.</op:operator><name pos:line="28" pos:column="48">getName</name></name></name><argument_list pos:line="28" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="58">.</op:operator><call><name pos:line="28" pos:column="59">log</name><argument_list pos:line="28" pos:column="62">(<argument><expr><name><name pos:line="28" pos:column="63">Level</name><op:operator pos:line="28" pos:column="68">.</op:operator><name pos:line="28" pos:column="69">SEVERE</name></name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="28" pos:column="77">null</lit:literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="83">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></for>
        }</block></then> <else pos:line="31" pos:column="11">else <block pos:line="31" pos:column="16">{
            <try pos:line="32" pos:column="13">try <block pos:line="32" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">System</name><op:operator pos:line="33" pos:column="23">.</op:operator><name pos:line="33" pos:column="24">out</name><op:operator pos:line="33" pos:column="27">.</op:operator><name pos:line="33" pos:column="28">println</name></name><argument_list pos:line="33" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="36">"MD5 (admin) = "</lit:literal> <op:operator pos:line="33" pos:column="53">+</op:operator> <call><name pos:line="33" pos:column="55">encrypt</name><argument_list pos:line="33" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="63">"admin"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="34" pos:column="15">catch <parameter_list pos:line="34" pos:column="21">(<param><decl><type><name pos:line="34" pos:column="22">XincoException</name></type> <name pos:line="34" pos:column="37">ex</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="41">{
                <expr_stmt><expr><call><name><name pos:line="35" pos:column="17">Logger</name><op:operator pos:line="35" pos:column="23">.</op:operator><name pos:line="35" pos:column="24">getLogger</name></name><argument_list pos:line="35" pos:column="33">(<argument><expr><call><name><name pos:line="35" pos:column="34">MD5</name><op:operator pos:line="35" pos:column="37">.</op:operator><name><name pos:line="35" pos:column="38">class</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">getName</name></name></name><argument_list pos:line="35" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="54">.</op:operator><call><name pos:line="35" pos:column="55">log</name><argument_list pos:line="35" pos:column="58">(<argument><expr><name><name pos:line="35" pos:column="59">Level</name><op:operator pos:line="35" pos:column="64">.</op:operator><name pos:line="35" pos:column="65">SEVERE</name></name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="35" pos:column="73">null</lit:literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="79">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <function><type><specifier pos:line="40" pos:column="5">public</specifier> <specifier pos:line="40" pos:column="12">static</specifier> <name pos:line="40" pos:column="19">String</name></type> <name pos:line="40" pos:column="26">encrypt</name><parameter_list pos:line="40" pos:column="33">(<param><decl><type><name pos:line="40" pos:column="34">String</name></type> <name pos:line="40" pos:column="41">text</name></decl></param>)</parameter_list> <throws pos:line="40" pos:column="47">throws <argument><expr><name pos:line="40" pos:column="54">XincoException</name></expr></argument></throws> <block pos:line="40" pos:column="69">{
        <try pos:line="41" pos:column="9">try <block pos:line="41" pos:column="13">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">algorithm</name> <op:operator pos:line="42" pos:column="23">=</op:operator> <call><name><name pos:line="42" pos:column="25">MessageDigest</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">getInstance</name></name><argument_list pos:line="42" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="51">"MD5"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="43" pos:column="11">catch <parameter_list pos:line="43" pos:column="17">(<param><decl><type><name pos:line="43" pos:column="18">NoSuchAlgorithmException</name></type> <name pos:line="43" pos:column="43">nsae</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="49">{
            <throw pos:line="44" pos:column="13">throw <expr><op:operator pos:line="44" pos:column="19">new</op:operator> <call><name pos:line="44" pos:column="23">XincoException</name><argument_list pos:line="44" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="38">"Cannot find digest algorithm"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">byte</name><index pos:line="46" pos:column="13">[]</index></type> <name pos:line="46" pos:column="16">defaultBytes</name> <init pos:line="46" pos:column="29">= <expr><call><name><name pos:line="46" pos:column="31">text</name><op:operator pos:line="46" pos:column="35">.</op:operator><name pos:line="46" pos:column="36">getBytes</name></name><argument_list pos:line="46" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">algorithm</name><op:operator pos:line="47" pos:column="18">.</op:operator><name pos:line="47" pos:column="19">reset</name></name><argument_list pos:line="47" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="48" pos:column="9">algorithm</name><op:operator pos:line="48" pos:column="18">.</op:operator><name pos:line="48" pos:column="19">update</name></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">defaultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">byte</name></type> <name><name pos:line="49" pos:column="14">messageDigest</name><index pos:line="49" pos:column="27">[]</index></name> <init pos:line="49" pos:column="30">= <expr><call><name><name pos:line="49" pos:column="32">algorithm</name><op:operator pos:line="49" pos:column="41">.</op:operator><name pos:line="49" pos:column="42">digest</name></name><argument_list pos:line="49" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">StringBuffer</name></type> <name pos:line="50" pos:column="22">hexString</name> <init pos:line="50" pos:column="32">= <expr><op:operator pos:line="50" pos:column="34">new</op:operator> <call><name pos:line="50" pos:column="38">StringBuffer</name><argument_list pos:line="50" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:line="52" pos:column="9">for (<init><decl><type><name pos:line="52" pos:column="14">int</name></type> <name pos:line="52" pos:column="18">i</name> <init pos:line="52" pos:column="20">= <expr><lit:literal type="number" pos:line="52" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="52" pos:column="25">i</name> <op:operator pos:line="52" pos:column="27">&lt;</op:operator> <name><name pos:line="52" pos:column="29">messageDigest</name><op:operator pos:line="52" pos:column="42">.</op:operator><name pos:line="52" pos:column="43">length</name></name></expr>;</condition> <incr><expr><name pos:line="52" pos:column="51">i</name><op:operator pos:line="52" pos:column="52">++</op:operator></expr></incr>) <block pos:line="52" pos:column="56">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">String</name></type> <name pos:line="53" pos:column="20">hex</name> <init pos:line="53" pos:column="24">= <expr><call><name><name pos:line="53" pos:column="26">Integer</name><op:operator pos:line="53" pos:column="33">.</op:operator><name pos:line="53" pos:column="34">toHexString</name></name><argument_list pos:line="53" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="46">0xFF</lit:literal> <op:operator pos:line="53" pos:column="51">&amp;</op:operator> <name><name pos:line="53" pos:column="53">messageDigest</name><index pos:line="53" pos:column="66">[<expr><name pos:line="53" pos:column="67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><call><name><name pos:line="54" pos:column="17">hex</name><op:operator pos:line="54" pos:column="20">.</op:operator><name pos:line="54" pos:column="21">length</name></name><argument_list pos:line="54" pos:column="27">()</argument_list></call> <op:operator pos:line="54" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="54" pos:column="33">1</lit:literal></expr>)</condition><then pos:line="54" pos:column="35"> <block pos:line="54" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="55" pos:column="17">hexString</name><op:operator pos:line="55" pos:column="26">.</op:operator><name pos:line="55" pos:column="27">append</name></name><argument_list pos:line="55" pos:column="33">(<argument><expr><lit:literal type="char" pos:line="55" pos:column="34">'0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">hexString</name><op:operator pos:line="57" pos:column="22">.</op:operator><name pos:line="57" pos:column="23">append</name></name><argument_list pos:line="57" pos:column="29">(<argument><expr><name pos:line="57" pos:column="30">hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name pos:line="59" pos:column="9">md5val</name> <op:operator pos:line="59" pos:column="16">=</op:operator> <call><name><name pos:line="59" pos:column="18">hexString</name><op:operator pos:line="59" pos:column="27">.</op:operator><name pos:line="59" pos:column="28">toString</name></name><argument_list pos:line="59" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">md5val</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
