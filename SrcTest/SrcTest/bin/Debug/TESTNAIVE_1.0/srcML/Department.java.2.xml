<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Department.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">ArrayList</name></name>;</import>

<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">Department</name> <block pos:line="12" pos:column="25">{
	<decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <name pos:line="13" pos:column="17">String</name></type> <name pos:line="13" pos:column="24">departmentName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <name pos:line="14" pos:column="17">int</name></type> <name pos:line="14" pos:column="21">departmentID</name></decl>;</decl_stmt>
	<comment type="block" format="javadoc" pos:line="15" pos:column="9">/**
	 * @return the departmentName
	 */</comment>
	<function><type><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">String</name></type> <name pos:line="18" pos:column="23">getDepartmentName</name><parameter_list pos:line="18" pos:column="40">()</parameter_list> <block pos:line="18" pos:column="43">{
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">departmentName</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="21" pos:column="9">/**
	 * @param departmentName the departmentName to set
	 */</comment>
	<function><type><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">setDepartmentName</name><parameter_list pos:line="24" pos:column="38">(<param><decl><type><name pos:line="24" pos:column="39">String</name></type> <name pos:line="24" pos:column="46">departmentName</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="62">{
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">this</name><op:operator pos:line="25" pos:column="21">.</op:operator><name pos:line="25" pos:column="22">departmentName</name></name> <op:operator pos:line="25" pos:column="37">=</op:operator> <name pos:line="25" pos:column="39">departmentName</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="27" pos:column="9">/**
	 * @return the departmentID
	 */</comment>
	<function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">int</name></type> <name pos:line="30" pos:column="20">getDepartmentID</name><parameter_list pos:line="30" pos:column="35">()</parameter_list> <block pos:line="30" pos:column="38">{
		<return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">departmentID</name></expr>;</return>
	}</block></function>
		
	
	<comment type="block" pos:line="35" pos:column="9">/*
	 * Retrieve department from the database using the department ID;
	 */</comment>
	<constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">Department</name><parameter_list pos:line="38" pos:column="26">(<param><decl><type><name pos:line="38" pos:column="27">int</name></type> <name pos:line="38" pos:column="31">departmentID</name></decl></param>)</parameter_list> <throws pos:line="38" pos:column="45">throws <argument><expr><name pos:line="38" pos:column="52">DepartmentDoesNotExistException</name></expr></argument></throws><block pos:line="38" pos:column="83">{
		
		<try pos:line="40" pos:column="17">try<block pos:line="40" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">Connection</name></type> <name pos:line="41" pos:column="36">conn</name> <init pos:line="41" pos:column="41">= <expr><call><name><name pos:line="41" pos:column="43">Database</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">getConnection</name></name><argument_list pos:line="41" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="43" pos:column="25">try<block pos:line="43" pos:column="28">{
				<if pos:line="44" pos:column="33">if<condition pos:line="44" pos:column="35">(<expr><name pos:line="44" pos:column="36">conn</name> <op:operator pos:line="44" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="44" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="44" pos:column="49">{
					<comment type="block" pos:line="45" pos:column="41">/*
					 * Try to look for the department in the department table
					 */</comment>
					<decl_stmt><decl><type><name pos:line="48" pos:column="41">String</name></type> <name pos:line="48" pos:column="48">SQLSelect</name><init pos:line="48" pos:column="57">= <expr><lit:literal type="string" pos:line="48" pos:column="59">"Select DepartmentID, DepartmentName"</lit:literal>
							<op:operator pos:line="49" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="49" pos:column="59">" FROM department"</lit:literal>
							<op:operator pos:line="50" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="50" pos:column="59">" WHERE DepartmentID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="51" pos:column="41">PreparedStatement</name></type> <name pos:line="51" pos:column="59">statement</name> <init pos:line="51" pos:column="69">= <expr><call><name><name pos:line="51" pos:column="71">conn</name><op:operator pos:line="51" pos:column="75">.</op:operator><name pos:line="51" pos:column="76">prepareStatement</name></name><argument_list pos:line="51" pos:column="92">(<argument><expr><name pos:line="51" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="52" pos:column="41">statement</name><op:operator pos:line="52" pos:column="50">.</op:operator><name pos:line="52" pos:column="51">setInt</name></name><argument_list pos:line="52" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="52" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="61">departmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="53" pos:column="41">ResultSet</name></type> <name pos:line="53" pos:column="51">rs</name> <init pos:line="53" pos:column="54">=  <expr><call><name><name pos:line="53" pos:column="57">statement</name><op:operator pos:line="53" pos:column="66">.</op:operator><name pos:line="53" pos:column="67">executeQuery</name></name><argument_list pos:line="53" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="55" pos:column="41">/*
					 * If the department is found in the database
					 * Initialize the values of the object
					 */</comment>
					<if pos:line="59" pos:column="41">if<condition pos:line="59" pos:column="43">(<expr><call><name><name pos:line="59" pos:column="44">rs</name><op:operator pos:line="59" pos:column="46">.</op:operator><name pos:line="59" pos:column="47">first</name></name><argument_list pos:line="59" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="59" pos:column="55">{
						<comment type="block" pos:line="60" pos:column="49">/*
						 * The object with the DepartmentName already exists
						 * Just initialize the current object with new values
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="64" pos:column="49">DBAnnotation</name><op:operator pos:line="64" pos:column="61">.</op:operator><name pos:line="64" pos:column="62">annoate</name></name><argument_list pos:line="64" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="70">"dID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="77">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="91">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="64" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="65" pos:column="49">int</name></type> <name pos:line="65" pos:column="53">dID</name> <init pos:line="65" pos:column="57">= <expr><call><name><name pos:line="65" pos:column="59">rs</name><op:operator pos:line="65" pos:column="61">.</op:operator><name pos:line="65" pos:column="62">getInt</name></name><argument_list pos:line="65" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="69">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="67" pos:column="49">DBAnnotation</name><op:operator pos:line="67" pos:column="61">.</op:operator><name pos:line="67" pos:column="62">annoate</name></name><argument_list pos:line="67" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="70">"dName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="79">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="93">"DepartmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="67" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="68" pos:column="49">String</name></type> <name pos:line="68" pos:column="56">dName</name> <init pos:line="68" pos:column="62">= <expr><call><name><name pos:line="68" pos:column="64">rs</name><op:operator pos:line="68" pos:column="66">.</op:operator><name pos:line="68" pos:column="67">getString</name></name><argument_list pos:line="68" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="68" pos:column="77">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><name><name pos:line="70" pos:column="49">this</name><op:operator pos:line="70" pos:column="53">.</op:operator><name pos:line="70" pos:column="54">departmentID</name></name> <op:operator pos:line="70" pos:column="67">=</op:operator> <name pos:line="70" pos:column="69">dID</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="71" pos:column="49">this</name><op:operator pos:line="71" pos:column="53">.</op:operator><name pos:line="71" pos:column="54">departmentName</name></name> <op:operator pos:line="71" pos:column="69">=</op:operator> <name pos:line="71" pos:column="71">dName</name></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="74" pos:column="41">else<block pos:line="74" pos:column="45">{
						<comment type="block" pos:line="75" pos:column="49">/*
						 * Throw department does not exists exception
						 */</comment>
						<throw pos:line="78" pos:column="49">throw <expr><op:operator pos:line="78" pos:column="55">new</op:operator> <call><name pos:line="78" pos:column="59">DepartmentDoesNotExistException</name><argument_list pos:line="78" pos:column="90">()</argument_list></call></expr>;</throw>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="83" pos:column="25">catch<parameter_list pos:line="83" pos:column="30">(<param><decl><type><name pos:line="83" pos:column="31">SQLException</name></type> <name pos:line="83" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="83" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">System</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">out</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">println</name></name><argument_list pos:line="84" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="52">"Error in sql"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="85" pos:column="33">System</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">out</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">println</name></name><argument_list pos:line="85" pos:column="51">(<argument><expr><call><name><name pos:line="85" pos:column="52">e</name><op:operator pos:line="85" pos:column="53">.</op:operator><name pos:line="85" pos:column="54">getMessage</name></name><argument_list pos:line="85" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="90" pos:column="17">finally<block pos:line="90" pos:column="24">{
		}</block></finally></try>
	}</block></constructor>

	<comment type="block" pos:line="94" pos:column="9">/*
	 * Retrieve department from the database using the department name, 
	 * Initialize the object if it does, else values remain null
	 */</comment>
	<constructor><specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">Department</name><parameter_list pos:line="98" pos:column="26">(<param><decl><type><name pos:line="98" pos:column="27">String</name></type> <name pos:line="98" pos:column="34">departmentName</name></decl></param>)</parameter_list> <throws pos:line="98" pos:column="50">throws <argument><expr><name pos:line="98" pos:column="57">DepartmentDoesNotExistException</name></expr></argument></throws><block pos:line="98" pos:column="88">{
			
			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">System</name><op:operator pos:line="100" pos:column="31">.</op:operator><name pos:line="100" pos:column="32">out</name><op:operator pos:line="100" pos:column="35">.</op:operator><name pos:line="100" pos:column="36">println</name></name><argument_list pos:line="100" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="44">"Searching for department with Name:"</lit:literal><op:operator pos:line="100" pos:column="81">+</op:operator><name pos:line="100" pos:column="82">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<try pos:line="102" pos:column="25">try<block pos:line="102" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="103" pos:column="33">Connection</name></type> <name pos:line="103" pos:column="44">conn</name> <init pos:line="103" pos:column="49">= <expr><call><name><name pos:line="103" pos:column="51">Database</name><op:operator pos:line="103" pos:column="59">.</op:operator><name pos:line="103" pos:column="60">getConnection</name></name><argument_list pos:line="103" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<try pos:line="105" pos:column="33">try<block pos:line="105" pos:column="36">{
					<if pos:line="106" pos:column="41">if<condition pos:line="106" pos:column="43">(<expr><name pos:line="106" pos:column="44">conn</name> <op:operator pos:line="106" pos:column="49">!=</op:operator> <lit:literal type="null" pos:line="106" pos:column="52">null</lit:literal></expr>)</condition><then><block pos:line="106" pos:column="57">{
						<comment type="block" pos:line="107" pos:column="49">/*
						 * Try to retrieve the department
						 */</comment>
						<decl_stmt><decl><type><name pos:line="110" pos:column="49">String</name></type> <name pos:line="110" pos:column="56">SQLSelect</name><init pos:line="110" pos:column="65">= <expr><lit:literal type="string" pos:line="110" pos:column="67">"Select DepartmentID, DepartmentName"</lit:literal>
								<op:operator pos:line="111" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="111" pos:column="67">" FROM department"</lit:literal>
								<op:operator pos:line="112" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="112" pos:column="67">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="113" pos:column="49">PreparedStatement</name></type> <name pos:line="113" pos:column="67">statement</name> <init pos:line="113" pos:column="77">= <expr><call><name><name pos:line="113" pos:column="79">conn</name><op:operator pos:line="113" pos:column="83">.</op:operator><name pos:line="113" pos:column="84">prepareStatement</name></name><argument_list pos:line="113" pos:column="100">(<argument><expr><name pos:line="113" pos:column="101">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="114" pos:column="49">statement</name><op:operator pos:line="114" pos:column="58">.</op:operator><name pos:line="114" pos:column="59">setString</name></name><argument_list pos:line="114" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="72">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="115" pos:column="49">ResultSet</name></type> <name pos:line="115" pos:column="59">rs</name> <init pos:line="115" pos:column="62">=  <expr><call><name><name pos:line="115" pos:column="65">statement</name><op:operator pos:line="115" pos:column="74">.</op:operator><name pos:line="115" pos:column="75">executeQuery</name></name><argument_list pos:line="115" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<comment type="block" pos:line="117" pos:column="49">/*
						 * If the department is found, initialize the object with the retireved values
						 */</comment>
						<if pos:line="120" pos:column="49">if<condition pos:line="120" pos:column="51">(<expr><call><name><name pos:line="120" pos:column="52">rs</name><op:operator pos:line="120" pos:column="54">.</op:operator><name pos:line="120" pos:column="55">first</name></name><argument_list pos:line="120" pos:column="60">()</argument_list></call></expr>)</condition><then><block pos:line="120" pos:column="63">{
							<comment type="block" pos:line="121" pos:column="57">/*
							 * The object with the DepartmentName already exist
							 * Just initialize the current object with new values
							 */</comment>
							<expr_stmt><expr><call><name><name pos:line="125" pos:column="57">DBAnnotation</name><op:operator pos:line="125" pos:column="69">.</op:operator><name pos:line="125" pos:column="70">annoate</name></name><argument_list pos:line="125" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="78">"dID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="85">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="99">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="125" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="126" pos:column="57">int</name></type> <name pos:line="126" pos:column="61">dID</name> <init pos:line="126" pos:column="65">= <expr><call><name><name pos:line="126" pos:column="67">rs</name><op:operator pos:line="126" pos:column="69">.</op:operator><name pos:line="126" pos:column="70">getInt</name></name><argument_list pos:line="126" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="77">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="128" pos:column="57">DBAnnotation</name><op:operator pos:line="128" pos:column="69">.</op:operator><name pos:line="128" pos:column="70">annoate</name></name><argument_list pos:line="128" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="78">"dName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="87">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="128" pos:column="101">"DepartmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="128" pos:column="119">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="129" pos:column="57">String</name></type> <name pos:line="129" pos:column="64">dName</name> <init pos:line="129" pos:column="70">= <expr><call><name><name pos:line="129" pos:column="72">rs</name><op:operator pos:line="129" pos:column="74">.</op:operator><name pos:line="129" pos:column="75">getString</name></name><argument_list pos:line="129" pos:column="84">(<argument><expr><lit:literal type="number" pos:line="129" pos:column="85">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><name><name pos:line="131" pos:column="57">this</name><op:operator pos:line="131" pos:column="61">.</op:operator><name pos:line="131" pos:column="62">departmentID</name></name> <op:operator pos:line="131" pos:column="75">=</op:operator> <name pos:line="131" pos:column="77">dID</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="132" pos:column="57">this</name><op:operator pos:line="132" pos:column="61">.</op:operator><name pos:line="132" pos:column="62">departmentName</name></name> <op:operator pos:line="132" pos:column="77">=</op:operator> <name pos:line="132" pos:column="79">dName</name></expr>;</expr_stmt>
						}</block></then>
						
						<else pos:line="135" pos:column="49">else<block pos:line="135" pos:column="53">{
							<comment type="block" pos:line="136" pos:column="57">/*
							 * Throw exception
							 */</comment>
							<expr_stmt><expr><call><name><name pos:line="139" pos:column="57">System</name><op:operator pos:line="139" pos:column="63">.</op:operator><name pos:line="139" pos:column="64">out</name><op:operator pos:line="139" pos:column="67">.</op:operator><name pos:line="139" pos:column="68">println</name></name><argument_list pos:line="139" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="76">"----DEPARTMENT DOES NOT EXIST----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<throw pos:line="140" pos:column="57">throw <expr><op:operator pos:line="140" pos:column="63">new</op:operator> <call><name pos:line="140" pos:column="67">DepartmentDoesNotExistException</name><argument_list pos:line="140" pos:column="98">()</argument_list></call></expr>;</throw>
						}</block></else></if>
					}</block></then></if>
				}</block>
				
				<catch pos:line="145" pos:column="33">catch<parameter_list pos:line="145" pos:column="38">(<param><decl><type><name pos:line="145" pos:column="39">SQLException</name></type> <name pos:line="145" pos:column="52">e</name></decl></param>)</parameter_list><block pos:line="145" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="146" pos:column="41">System</name><op:operator pos:line="146" pos:column="47">.</op:operator><name pos:line="146" pos:column="48">out</name><op:operator pos:line="146" pos:column="51">.</op:operator><name pos:line="146" pos:column="52">println</name></name><argument_list pos:line="146" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="60">"Error updating/adding"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="147" pos:column="41">System</name><op:operator pos:line="147" pos:column="47">.</op:operator><name pos:line="147" pos:column="48">out</name><op:operator pos:line="147" pos:column="51">.</op:operator><name pos:line="147" pos:column="52">println</name></name><argument_list pos:line="147" pos:column="59">(<argument><expr><call><name><name pos:line="147" pos:column="60">e</name><op:operator pos:line="147" pos:column="61">.</op:operator><name pos:line="147" pos:column="62">getMessage</name></name><argument_list pos:line="147" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
								
			}</block>
			
			<finally pos:line="152" pos:column="25">finally<block pos:line="152" pos:column="32">{
			}</block></finally></try>
		}</block></constructor>
		
	
	<comment type="block" pos:line="157" pos:column="9">/*
	 * Add a new department to the database
	 */</comment>
	<function><type><specifier pos:line="160" pos:column="9">public</specifier> <specifier pos:line="160" pos:column="16">static</specifier> <name pos:line="160" pos:column="23">void</name></type> <name pos:line="160" pos:column="28">addNewDepartment</name><parameter_list pos:line="160" pos:column="44">(<param><decl><type><name pos:line="160" pos:column="45">String</name></type> <name pos:line="160" pos:column="52">departmentName</name></decl></param>)</parameter_list> <throws pos:line="160" pos:column="68">throws <argument><expr><name pos:line="160" pos:column="75">DepartmentAlreadyExistsException</name></expr></argument></throws><block pos:line="160" pos:column="107">{
		<try pos:line="161" pos:column="17">try<block pos:line="161" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="162" pos:column="25">Connection</name></type> <name pos:line="162" pos:column="36">conn</name> <init pos:line="162" pos:column="41">= <expr><call><name><name pos:line="162" pos:column="43">Database</name><op:operator pos:line="162" pos:column="51">.</op:operator><name pos:line="162" pos:column="52">getConnection</name></name><argument_list pos:line="162" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="164" pos:column="25">try<block pos:line="164" pos:column="28">{
				<if pos:line="165" pos:column="33">if<condition pos:line="165" pos:column="35">(<expr><name pos:line="165" pos:column="36">conn</name> <op:operator pos:line="165" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="165" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="165" pos:column="49">{
					<comment type="block" pos:line="166" pos:column="41">/*
					 * Check to see if the department with the same name exists already
					 */</comment>
					
					<decl_stmt><decl><type><name pos:line="170" pos:column="41">String</name></type> <name pos:line="170" pos:column="48">SQLSelect</name><init pos:line="170" pos:column="57">= <expr><lit:literal type="string" pos:line="170" pos:column="59">"Select DepartmentName"</lit:literal>
							<op:operator pos:line="171" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="171" pos:column="59">" FROM department"</lit:literal>
							<op:operator pos:line="172" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="172" pos:column="59">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="173" pos:column="41">PreparedStatement</name></type> <name pos:line="173" pos:column="59">statement</name> <init pos:line="173" pos:column="69">= <expr><call><name><name pos:line="173" pos:column="71">conn</name><op:operator pos:line="173" pos:column="75">.</op:operator><name pos:line="173" pos:column="76">prepareStatement</name></name><argument_list pos:line="173" pos:column="92">(<argument><expr><name pos:line="173" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">statement</name><op:operator pos:line="174" pos:column="50">.</op:operator><name pos:line="174" pos:column="51">setString</name></name><argument_list pos:line="174" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="64">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="175" pos:column="41">ResultSet</name></type> <name pos:line="175" pos:column="51">rs</name> <init pos:line="175" pos:column="54">=  <expr><call><name><name pos:line="175" pos:column="57">statement</name><op:operator pos:line="175" pos:column="66">.</op:operator><name pos:line="175" pos:column="67">executeQuery</name></name><argument_list pos:line="175" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="177" pos:column="41">/*
					 * If the department exists, throw exception
					 */</comment>
					<if pos:line="180" pos:column="41">if<condition pos:line="180" pos:column="43">(<expr><call><name><name pos:line="180" pos:column="44">rs</name><op:operator pos:line="180" pos:column="46">.</op:operator><name pos:line="180" pos:column="47">first</name></name><argument_list pos:line="180" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="180" pos:column="55">{
						<comment type="line" pos:line="181" pos:column="49">//The object with the DepartmentName already exists</comment>
						<throw pos:line="182" pos:column="49">throw <expr><op:operator pos:line="182" pos:column="55">new</op:operator> <call><name pos:line="182" pos:column="59">DepartmentAlreadyExistsException</name><argument_list pos:line="182" pos:column="91">()</argument_list></call></expr>;</throw>
					}</block></then>
					
					<else pos:line="185" pos:column="41">else<block pos:line="185" pos:column="45">{
						<comment type="block" pos:line="186" pos:column="49">/*
						 * Add the object data to the department table
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="189" pos:column="49">DBAnnotation</name><op:operator pos:line="189" pos:column="61">.</op:operator><name pos:line="189" pos:column="62">annoate</name></name><argument_list pos:line="189" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="70">"departmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="88">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="189" pos:column="102">"DepartmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="189" pos:column="120">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="190" pos:column="49">String</name></type> <name pos:line="190" pos:column="56">SQLInsert</name><init pos:line="190" pos:column="65">= <expr><lit:literal type="string" pos:line="190" pos:column="67">"Insert into department (DepartmentName) Values (?);"</lit:literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="191" pos:column="49">statement</name><op:operator pos:line="191" pos:column="58">.</op:operator><name pos:line="191" pos:column="59">close</name></name><argument_list pos:line="191" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="192" pos:column="49">statement</name> <op:operator pos:line="192" pos:column="59">=</op:operator> <call><name><name pos:line="192" pos:column="61">conn</name><op:operator pos:line="192" pos:column="65">.</op:operator><name pos:line="192" pos:column="66">prepareStatement</name></name><argument_list pos:line="192" pos:column="82">(<argument><expr><name pos:line="192" pos:column="83">SQLInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="193" pos:column="49">statement</name><op:operator pos:line="193" pos:column="58">.</op:operator><name pos:line="193" pos:column="59">setString</name></name><argument_list pos:line="193" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="72">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="194" pos:column="49">statement</name><op:operator pos:line="194" pos:column="58">.</op:operator><name pos:line="194" pos:column="59">execute</name></name><argument_list pos:line="194" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="195" pos:column="49">Database</name><op:operator pos:line="195" pos:column="57">.</op:operator><name pos:line="195" pos:column="58">commitTransaction</name></name><argument_list pos:line="195" pos:column="75">(<argument><expr><name pos:line="195" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="200" pos:column="25">catch<parameter_list pos:line="200" pos:column="30">(<param><decl><type><name pos:line="200" pos:column="31">SQLException</name></type> <name pos:line="200" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="200" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="201" pos:column="33">System</name><op:operator pos:line="201" pos:column="39">.</op:operator><name pos:line="201" pos:column="40">out</name><op:operator pos:line="201" pos:column="43">.</op:operator><name pos:line="201" pos:column="44">println</name></name><argument_list pos:line="201" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="52">"Error adding department"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">System</name><op:operator pos:line="202" pos:column="39">.</op:operator><name pos:line="202" pos:column="40">out</name><op:operator pos:line="202" pos:column="43">.</op:operator><name pos:line="202" pos:column="44">println</name></name><argument_list pos:line="202" pos:column="51">(<argument><expr><call><name><name pos:line="202" pos:column="52">e</name><op:operator pos:line="202" pos:column="53">.</op:operator><name pos:line="202" pos:column="54">getMessage</name></name><argument_list pos:line="202" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<finally pos:line="205" pos:column="25">finally<block pos:line="205" pos:column="32">{
				<comment type="line" pos:line="206" pos:column="33">//Database.closeConnection(conn);</comment>
			}</block></finally></try>
			
		}</block>
		
		<finally pos:line="211" pos:column="17">finally<block pos:line="211" pos:column="24">{
		}</block></finally></try>

	}</block></function>
	

	<comment type="block" pos:line="217" pos:column="9">/*
	 * Delete specified department
	 */</comment>
	<function><type><annotation pos:line="220" pos:column="9">@<name pos:line="220" pos:column="10">SuppressWarnings</name><argument_list pos:line="220" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="27">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
	<specifier pos:line="221" pos:column="9">private</specifier> <specifier pos:line="221" pos:column="17">static</specifier> <name pos:line="221" pos:column="24">void</name></type> <name pos:line="221" pos:column="29">deleteDepartment</name><parameter_list pos:line="221" pos:column="45">(<param><decl><type><name pos:line="221" pos:column="46">String</name></type> <name pos:line="221" pos:column="53">departmentName</name></decl></param>)</parameter_list> <throws pos:line="221" pos:column="69">throws <argument><expr><name pos:line="221" pos:column="76">DepartmentDoesNotExistException</name></expr></argument></throws><block pos:line="221" pos:column="107">{
		<decl_stmt><decl><type><name pos:line="222" pos:column="17">boolean</name></type> <name pos:line="222" pos:column="25">isDeleteSuccessfull</name> <init pos:line="222" pos:column="45">= <expr><lit:literal type="boolean" pos:line="222" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="223" pos:column="17">try<block pos:line="223" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="224" pos:column="25">Connection</name></type> <name pos:line="224" pos:column="36">conn</name> <init pos:line="224" pos:column="41">= <expr><call><name><name pos:line="224" pos:column="43">Database</name><op:operator pos:line="224" pos:column="51">.</op:operator><name pos:line="224" pos:column="52">getConnection</name></name><argument_list pos:line="224" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="225" pos:column="25">try<block pos:line="225" pos:column="28">{
				<if pos:line="226" pos:column="33">if<condition pos:line="226" pos:column="35">(<expr><name pos:line="226" pos:column="36">conn</name> <op:operator pos:line="226" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="226" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="226" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="227" pos:column="41">String</name></type> <name pos:line="227" pos:column="48">SQLSelect</name><init pos:line="227" pos:column="57">= <expr><lit:literal type="string" pos:line="227" pos:column="59">"Select DepartmentID, DepartmentName"</lit:literal>
							<op:operator pos:line="228" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="228" pos:column="59">" FROM department"</lit:literal>
							<op:operator pos:line="229" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="229" pos:column="59">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="230" pos:column="41">PreparedStatement</name></type> <name pos:line="230" pos:column="59">statement</name> <init pos:line="230" pos:column="69">= <expr><call><name><name pos:line="230" pos:column="71">conn</name><op:operator pos:line="230" pos:column="75">.</op:operator><name pos:line="230" pos:column="76">prepareStatement</name></name><argument_list pos:line="230" pos:column="92">(<argument><expr><name pos:line="230" pos:column="93">SQLSelect</name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="104">ResultSet</name><op:operator pos:line="230" pos:column="113">.</op:operator><name pos:line="230" pos:column="114">TYPE_SCROLL_SENSITIVE</name></name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="137">ResultSet</name><op:operator pos:line="230" pos:column="146">.</op:operator><name pos:line="230" pos:column="147">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="231" pos:column="41">statement</name><op:operator pos:line="231" pos:column="50">.</op:operator><name pos:line="231" pos:column="51">setString</name></name><argument_list pos:line="231" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="231" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="64">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="232" pos:column="41">ResultSet</name></type> <name pos:line="232" pos:column="51">rs</name> <init pos:line="232" pos:column="54">=  <expr><call><name><name pos:line="232" pos:column="57">statement</name><op:operator pos:line="232" pos:column="66">.</op:operator><name pos:line="232" pos:column="67">executeQuery</name></name><argument_list pos:line="232" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					
					<if pos:line="235" pos:column="41">if<condition pos:line="235" pos:column="43">(<expr><call><name><name pos:line="235" pos:column="44">rs</name><op:operator pos:line="235" pos:column="46">.</op:operator><name pos:line="235" pos:column="47">first</name></name><argument_list pos:line="235" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="235" pos:column="55">{
						<comment type="line" pos:line="236" pos:column="49">//The object with the DepartmentName already exists</comment>
						<expr_stmt><expr><call><name><name pos:line="237" pos:column="49">System</name><op:operator pos:line="237" pos:column="55">.</op:operator><name pos:line="237" pos:column="56">out</name><op:operator pos:line="237" pos:column="59">.</op:operator><name pos:line="237" pos:column="60">println</name></name><argument_list pos:line="237" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="68">"Deleting the department:"</lit:literal><op:operator pos:line="237" pos:column="94">+</op:operator><name pos:line="237" pos:column="95">departmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="block" pos:line="238" pos:column="49">/*Remove all the courses related to this department*/</comment>
						<decl_stmt><decl><type><name pos:line="239" pos:column="49">int</name></type> <name pos:line="239" pos:column="53">departmentID</name> <init pos:line="239" pos:column="66">= <expr><call><name><name pos:line="239" pos:column="68">rs</name><op:operator pos:line="239" pos:column="70">.</op:operator><name pos:line="239" pos:column="71">getInt</name></name><argument_list pos:line="239" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="239" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="240" pos:column="49">String</name></type> <name pos:line="240" pos:column="56">courseSelect</name><init pos:line="240" pos:column="68">= <expr><lit:literal type="string" pos:line="240" pos:column="70">"Select CourseID, CourseName, DepartmentID"</lit:literal>
								<op:operator pos:line="241" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="241" pos:column="67">" FROM courses"</lit:literal>
								<op:operator pos:line="242" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="242" pos:column="67">" WHERE DepartmentID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="243" pos:column="49">PreparedStatement</name></type> <name pos:line="243" pos:column="67">statementForCourse</name> <init pos:line="243" pos:column="86">= <expr><call><name><name pos:line="243" pos:column="88">conn</name><op:operator pos:line="243" pos:column="92">.</op:operator><name pos:line="243" pos:column="93">prepareStatement</name></name><argument_list pos:line="243" pos:column="109">(<argument><expr><name pos:line="243" pos:column="110">courseSelect</name></expr></argument>, <argument><expr><name><name pos:line="243" pos:column="124">ResultSet</name><op:operator pos:line="243" pos:column="133">.</op:operator><name pos:line="243" pos:column="134">TYPE_SCROLL_SENSITIVE</name></name></expr></argument>, <argument><expr><name><name pos:line="243" pos:column="157">ResultSet</name><op:operator pos:line="243" pos:column="166">.</op:operator><name pos:line="243" pos:column="167">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="244" pos:column="49">statementForCourse</name><op:operator pos:line="244" pos:column="67">.</op:operator><name pos:line="244" pos:column="68">setInt</name></name><argument_list pos:line="244" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="244" pos:column="75">1</lit:literal></expr></argument>, <argument><expr><name pos:line="244" pos:column="78">departmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="245" pos:column="49">ResultSet</name></type> <name pos:line="245" pos:column="59">courseSetToDelete</name> <init pos:line="245" pos:column="77">= <expr><call><name><name pos:line="245" pos:column="79">statementForCourse</name><op:operator pos:line="245" pos:column="97">.</op:operator><name pos:line="245" pos:column="98">executeQuery</name></name><argument_list pos:line="245" pos:column="110">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="246" pos:column="49">while<condition pos:line="246" pos:column="54">(<expr><call><name><name pos:line="246" pos:column="55">courseSetToDelete</name><op:operator pos:line="246" pos:column="72">.</op:operator><name pos:line="246" pos:column="73">next</name></name><argument_list pos:line="246" pos:column="77">()</argument_list></call></expr>)</condition><block pos:line="246" pos:column="80">{
							<expr_stmt><expr><call><name><name pos:line="247" pos:column="57">System</name><op:operator pos:line="247" pos:column="63">.</op:operator><name pos:line="247" pos:column="64">out</name><op:operator pos:line="247" pos:column="67">.</op:operator><name pos:line="247" pos:column="68">println</name></name><argument_list pos:line="247" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="76">"Deleting course:"</lit:literal><op:operator pos:line="247" pos:column="94">+</op:operator><call><name><name pos:line="247" pos:column="95">courseSetToDelete</name><op:operator pos:line="247" pos:column="112">.</op:operator><name pos:line="247" pos:column="113">getString</name></name><argument_list pos:line="247" pos:column="122">(<argument><expr><lit:literal type="number" pos:line="247" pos:column="123">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="248" pos:column="57">Course</name></type> <name pos:line="248" pos:column="64">c</name> <init pos:line="248" pos:column="66">= <expr><op:operator pos:line="248" pos:column="68">new</op:operator> <call><name pos:line="248" pos:column="72">Course</name><argument_list pos:line="248" pos:column="78">(<argument><expr><call><name><name pos:line="248" pos:column="79">courseSetToDelete</name><op:operator pos:line="248" pos:column="96">.</op:operator><name pos:line="248" pos:column="97">getInt</name></name><argument_list pos:line="248" pos:column="103">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="104">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						}</block></while>
						
						<expr_stmt><expr><call><name><name pos:line="251" pos:column="49">rs</name><op:operator pos:line="251" pos:column="51">.</op:operator><name pos:line="251" pos:column="52">deleteRow</name></name><argument_list pos:line="251" pos:column="61">()</argument_list></call></expr>;</expr_stmt>	
						<expr_stmt><expr><name pos:line="252" pos:column="49">isDeleteSuccessfull</name> <op:operator pos:line="252" pos:column="69">=</op:operator> <lit:literal type="boolean" pos:line="252" pos:column="71">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="255" pos:column="41">else<block pos:line="255" pos:column="45">{
						<expr_stmt><expr><name pos:line="256" pos:column="49">isDeleteSuccessfull</name> <op:operator pos:line="256" pos:column="69">=</op:operator> <lit:literal type="boolean" pos:line="256" pos:column="71">false</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
					
				}</block></then></if>
				
				<if pos:line="261" pos:column="33">if<condition pos:line="261" pos:column="35">(<expr><op:operator pos:line="261" pos:column="36">!</op:operator><name pos:line="261" pos:column="37">isDeleteSuccessfull</name></expr>)</condition><then pos:line="261" pos:column="57">
					<throw pos:line="262" pos:column="41">throw <expr><op:operator pos:line="262" pos:column="47">new</op:operator> <call><name pos:line="262" pos:column="51">DepartmentDoesNotExistException</name><argument_list pos:line="262" pos:column="82">()</argument_list></call></expr>;</throw></then></if>

			}</block>
			
			<catch pos:line="266" pos:column="25">catch<parameter_list pos:line="266" pos:column="30">(<param><decl><type><name pos:line="266" pos:column="31">SQLException</name></type> <name pos:line="266" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="266" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="267" pos:column="33">System</name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">out</name><op:operator pos:line="267" pos:column="43">.</op:operator><name pos:line="267" pos:column="44">println</name></name><argument_list pos:line="267" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="52">"Error updating"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="268" pos:column="33">System</name><op:operator pos:line="268" pos:column="39">.</op:operator><name pos:line="268" pos:column="40">out</name><op:operator pos:line="268" pos:column="43">.</op:operator><name pos:line="268" pos:column="44">println</name></name><argument_list pos:line="268" pos:column="51">(<argument><expr><call><name><name pos:line="268" pos:column="52">e</name><op:operator pos:line="268" pos:column="53">.</op:operator><name pos:line="268" pos:column="54">getMessage</name></name><argument_list pos:line="268" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="269" pos:column="27">catch <parameter_list pos:line="269" pos:column="33">(<param><decl><type><name><name pos:line="269" pos:column="34">Course</name><op:operator pos:line="269" pos:column="40">.</op:operator><name pos:line="269" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="269" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="270" pos:column="33">e</name><op:operator pos:line="270" pos:column="34">.</op:operator><name pos:line="270" pos:column="35">printStackTrace</name></name><argument_list pos:line="270" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="275" pos:column="17">finally<block pos:line="275" pos:column="24">{
			
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="280" pos:column="9">/*
	 * Update the existing department using the object values to update the database
	 * It will update the department with the values of the instance variables
	 */</comment>
	<function><type><specifier pos:line="284" pos:column="9">public</specifier> <name pos:line="284" pos:column="16">boolean</name></type> <name pos:line="284" pos:column="24">updateDepartment</name><parameter_list pos:line="284" pos:column="40">()</parameter_list> <throws pos:line="284" pos:column="43">throws <argument><expr><name pos:line="284" pos:column="50">DepartmentDoesNotExistException</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="83">DepartmentAlreadyExistsException</name></expr></argument></throws><block pos:line="284" pos:column="115">{
		
		<comment type="block" pos:line="286" pos:column="17">/*
		 * Null checks
		 */</comment>
		<if pos:line="289" pos:column="17">if<condition pos:line="289" pos:column="19">(<expr><call><name><name pos:line="289" pos:column="20">this</name><op:operator pos:line="289" pos:column="24">.</op:operator><name pos:line="289" pos:column="25">getDepartmentName</name></name><argument_list pos:line="289" pos:column="42">()</argument_list></call> <op:operator pos:line="289" pos:column="45">==</op:operator> <lit:literal type="null" pos:line="289" pos:column="48">null</lit:literal> <op:operator pos:line="289" pos:column="53">||</op:operator> <call><name><name pos:line="289" pos:column="56">this</name><op:operator pos:line="289" pos:column="60">.</op:operator><name pos:line="289" pos:column="61">getDepartmentID</name></name><argument_list pos:line="289" pos:column="76">()</argument_list></call> <op:operator pos:line="289" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="289" pos:column="82">0</lit:literal></expr>)</condition><then pos:line="289" pos:column="84">
			<throw pos:line="290" pos:column="25">throw <expr><op:operator pos:line="290" pos:column="31">new</op:operator> <call><name pos:line="290" pos:column="35">DepartmentDoesNotExistException</name><argument_list pos:line="290" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="67">"Un-initialized object"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		
		<comment type="block" pos:line="292" pos:column="17">/*
		 * Check if the department name is acceptable and does not conflict with other department names
		 */</comment>
		<if pos:line="295" pos:column="17">if<condition pos:line="295" pos:column="19">(<expr><call><name pos:line="295" pos:column="20">isNameExisting</name><argument_list pos:line="295" pos:column="34">(<argument><expr><name><name pos:line="295" pos:column="35">this</name><op:operator pos:line="295" pos:column="39">.</op:operator><name pos:line="295" pos:column="40">departmentName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="295" pos:column="56">{
			<throw pos:line="296" pos:column="25">throw <expr><op:operator pos:line="296" pos:column="31">new</op:operator> <call><name pos:line="296" pos:column="35">DepartmentAlreadyExistsException</name><argument_list pos:line="296" pos:column="67">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<try pos:line="299" pos:column="17">try<block pos:line="299" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="300" pos:column="25">Connection</name></type> <name pos:line="300" pos:column="36">conn</name> <init pos:line="300" pos:column="41">= <expr><call><name><name pos:line="300" pos:column="43">Database</name><op:operator pos:line="300" pos:column="51">.</op:operator><name pos:line="300" pos:column="52">getConnection</name></name><argument_list pos:line="300" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="301" pos:column="25">try<block pos:line="301" pos:column="28">{
				<if pos:line="302" pos:column="33">if<condition pos:line="302" pos:column="35">(<expr><name pos:line="302" pos:column="36">conn</name> <op:operator pos:line="302" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="302" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="302" pos:column="49">{
					<comment type="block" pos:line="303" pos:column="41">/*
					 * Retrieve the department row
					 */</comment>
					<decl_stmt><decl><type><name pos:line="306" pos:column="41">String</name></type> <name pos:line="306" pos:column="48">SQLSelect</name><init pos:line="306" pos:column="57">= <expr><lit:literal type="string" pos:line="306" pos:column="59">"Select DepartmentID, DepartmentName"</lit:literal>
							<op:operator pos:line="307" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="307" pos:column="59">" FROM department"</lit:literal>
							<op:operator pos:line="308" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="308" pos:column="59">" WHERE DepartmentID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="309" pos:column="41">PreparedStatement</name></type> <name pos:line="309" pos:column="59">statement</name> <init pos:line="309" pos:column="69">= <expr><call><name><name pos:line="309" pos:column="71">conn</name><op:operator pos:line="309" pos:column="75">.</op:operator><name pos:line="309" pos:column="76">prepareStatement</name></name><argument_list pos:line="309" pos:column="92">(<argument><expr><name pos:line="309" pos:column="93">SQLSelect</name></expr></argument>, <argument><expr><name><name pos:line="309" pos:column="104">ResultSet</name><op:operator pos:line="309" pos:column="113">.</op:operator><name pos:line="309" pos:column="114">TYPE_SCROLL_SENSITIVE</name></name></expr></argument>, <argument><expr><name><name pos:line="309" pos:column="137">ResultSet</name><op:operator pos:line="309" pos:column="146">.</op:operator><name pos:line="309" pos:column="147">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="310" pos:column="41">statement</name><op:operator pos:line="310" pos:column="50">.</op:operator><name pos:line="310" pos:column="51">setInt</name></name><argument_list pos:line="310" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="310" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="310" pos:column="61">this</name><op:operator pos:line="310" pos:column="65">.</op:operator><name pos:line="310" pos:column="66">getDepartmentID</name></name><argument_list pos:line="310" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="311" pos:column="41">ResultSet</name></type> <name pos:line="311" pos:column="51">rs</name> <init pos:line="311" pos:column="54">=  <expr><call><name><name pos:line="311" pos:column="57">statement</name><op:operator pos:line="311" pos:column="66">.</op:operator><name pos:line="311" pos:column="67">executeQuery</name></name><argument_list pos:line="311" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="313" pos:column="41">/*
					 * Update the department row with new values and commit the update
					 */</comment>
					<if pos:line="316" pos:column="41">if<condition pos:line="316" pos:column="43">(<expr><call><name><name pos:line="316" pos:column="44">rs</name><op:operator pos:line="316" pos:column="46">.</op:operator><name pos:line="316" pos:column="47">first</name></name><argument_list pos:line="316" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="316" pos:column="55">{
						<comment type="block" pos:line="317" pos:column="49">/*
						 * Update with new values from the object instance variables
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="320" pos:column="49">DBAnnotation</name><op:operator pos:line="320" pos:column="61">.</op:operator><name pos:line="320" pos:column="62">annoate</name></name><argument_list pos:line="320" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="320" pos:column="70">"dID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="77">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="320" pos:column="91">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="320" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="321" pos:column="49">int</name></type> <name pos:line="321" pos:column="53">dID</name> <init pos:line="321" pos:column="57">= <expr><call><name><name pos:line="321" pos:column="59">this</name><op:operator pos:line="321" pos:column="63">.</op:operator><name pos:line="321" pos:column="64">getDepartmentID</name></name><argument_list pos:line="321" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="323" pos:column="49">DBAnnotation</name><op:operator pos:line="323" pos:column="61">.</op:operator><name pos:line="323" pos:column="62">annoate</name></name><argument_list pos:line="323" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="323" pos:column="70">"dName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="79">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="323" pos:column="93">"DepartmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="323" pos:column="111">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="324" pos:column="49">String</name></type> <name pos:line="324" pos:column="56">dName</name> <init pos:line="324" pos:column="62">= <expr><call><name><name pos:line="324" pos:column="64">this</name><op:operator pos:line="324" pos:column="68">.</op:operator><name pos:line="324" pos:column="69">getDepartmentName</name></name><argument_list pos:line="324" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="326" pos:column="49">System</name><op:operator pos:line="326" pos:column="55">.</op:operator><name pos:line="326" pos:column="56">out</name><op:operator pos:line="326" pos:column="59">.</op:operator><name pos:line="326" pos:column="60">println</name></name><argument_list pos:line="326" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="68">"Updating the department with new values"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="327" pos:column="49">rs</name><op:operator pos:line="327" pos:column="51">.</op:operator><name pos:line="327" pos:column="52">updateInt</name></name><argument_list pos:line="327" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="327" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="327" pos:column="65">dID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="328" pos:column="49">rs</name><op:operator pos:line="328" pos:column="51">.</op:operator><name pos:line="328" pos:column="52">updateString</name></name><argument_list pos:line="328" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="328" pos:column="65">2</lit:literal></expr></argument>, <argument><expr><name pos:line="328" pos:column="68">dName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="329" pos:column="49">rs</name><op:operator pos:line="329" pos:column="51">.</op:operator><name pos:line="329" pos:column="52">updateRow</name></name><argument_list pos:line="329" pos:column="61">()</argument_list></call></expr>;</expr_stmt>	
						<expr_stmt><expr><call><name><name pos:line="330" pos:column="49">Database</name><op:operator pos:line="330" pos:column="57">.</op:operator><name pos:line="330" pos:column="58">commitTransaction</name></name><argument_list pos:line="330" pos:column="75">(<argument><expr><name pos:line="330" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="331" pos:column="49">return <expr><lit:literal type="boolean" pos:line="331" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then></if>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="337" pos:column="25">catch<parameter_list pos:line="337" pos:column="30">(<param><decl><type><name pos:line="337" pos:column="31">SQLException</name></type> <name pos:line="337" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="337" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="338" pos:column="33">System</name><op:operator pos:line="338" pos:column="39">.</op:operator><name pos:line="338" pos:column="40">out</name><op:operator pos:line="338" pos:column="43">.</op:operator><name pos:line="338" pos:column="44">println</name></name><argument_list pos:line="338" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="338" pos:column="52">"Error updating"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="339" pos:column="33">System</name><op:operator pos:line="339" pos:column="39">.</op:operator><name pos:line="339" pos:column="40">out</name><op:operator pos:line="339" pos:column="43">.</op:operator><name pos:line="339" pos:column="44">println</name></name><argument_list pos:line="339" pos:column="51">(<argument><expr><call><name><name pos:line="339" pos:column="52">e</name><op:operator pos:line="339" pos:column="53">.</op:operator><name pos:line="339" pos:column="54">getMessage</name></name><argument_list pos:line="339" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="340" pos:column="33">return <expr><lit:literal type="boolean" pos:line="340" pos:column="40">false</lit:literal></expr>;</return>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="345" pos:column="17">finally<block pos:line="345" pos:column="24">{
		}</block></finally></try>
		<return pos:line="347" pos:column="17">return <expr><lit:literal type="boolean" pos:line="347" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	
	<function><type><specifier pos:line="351" pos:column="9">public</specifier> <specifier pos:line="351" pos:column="16">static</specifier> <name pos:line="351" pos:column="23">boolean</name></type> <name pos:line="351" pos:column="31">isNameExisting</name><parameter_list pos:line="351" pos:column="45">(<param><decl><type><name pos:line="351" pos:column="46">String</name></type> <name pos:line="351" pos:column="53">name</name></decl></param>)</parameter_list><block pos:line="351" pos:column="58">{
		<try pos:line="352" pos:column="17">try<block pos:line="352" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="353" pos:column="25">Connection</name></type> <name pos:line="353" pos:column="36">conn</name> <init pos:line="353" pos:column="41">= <expr><call><name><name pos:line="353" pos:column="43">Database</name><op:operator pos:line="353" pos:column="51">.</op:operator><name pos:line="353" pos:column="52">getConnection</name></name><argument_list pos:line="353" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="355" pos:column="25">try<block pos:line="355" pos:column="28">{
				<if pos:line="356" pos:column="33">if<condition pos:line="356" pos:column="35">(<expr><name pos:line="356" pos:column="36">conn</name> <op:operator pos:line="356" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="356" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="356" pos:column="49">{
					<comment type="block" pos:line="357" pos:column="41">/*
					 * Try to retrieve the department
					 */</comment>
					<decl_stmt><decl><type><name pos:line="360" pos:column="41">String</name></type> <name pos:line="360" pos:column="48">SQLSelect</name><init pos:line="360" pos:column="57">= <expr><lit:literal type="string" pos:line="360" pos:column="59">"Select DepartmentName"</lit:literal>
							<op:operator pos:line="361" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="361" pos:column="59">" FROM department"</lit:literal>
							<op:operator pos:line="362" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="362" pos:column="59">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="363" pos:column="41">PreparedStatement</name></type> <name pos:line="363" pos:column="59">statement</name> <init pos:line="363" pos:column="69">= <expr><call><name><name pos:line="363" pos:column="71">conn</name><op:operator pos:line="363" pos:column="75">.</op:operator><name pos:line="363" pos:column="76">prepareStatement</name></name><argument_list pos:line="363" pos:column="92">(<argument><expr><name pos:line="363" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="364" pos:column="41">statement</name><op:operator pos:line="364" pos:column="50">.</op:operator><name pos:line="364" pos:column="51">setString</name></name><argument_list pos:line="364" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="364" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="364" pos:column="64">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="365" pos:column="41">ResultSet</name></type> <name pos:line="365" pos:column="51">rs</name> <init pos:line="365" pos:column="54">=  <expr><call><name><name pos:line="365" pos:column="57">statement</name><op:operator pos:line="365" pos:column="66">.</op:operator><name pos:line="365" pos:column="67">executeQuery</name></name><argument_list pos:line="365" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="367" pos:column="41">/*
					 * If the department is found, return true
					 */</comment>
					<if pos:line="370" pos:column="41">if<condition pos:line="370" pos:column="43">(<expr><call><name><name pos:line="370" pos:column="44">rs</name><op:operator pos:line="370" pos:column="46">.</op:operator><name pos:line="370" pos:column="47">first</name></name><argument_list pos:line="370" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="370" pos:column="55">{
						<return pos:line="371" pos:column="49">return <expr><lit:literal type="boolean" pos:line="371" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then>
					
					<else pos:line="374" pos:column="41">else<block pos:line="374" pos:column="45">{
						<return pos:line="375" pos:column="49">return <expr><lit:literal type="boolean" pos:line="375" pos:column="56">false</lit:literal></expr>;</return>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="380" pos:column="25">catch<parameter_list pos:line="380" pos:column="30">(<param><decl><type><name pos:line="380" pos:column="31">SQLException</name></type> <name pos:line="380" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="380" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="381" pos:column="33">System</name><op:operator pos:line="381" pos:column="39">.</op:operator><name pos:line="381" pos:column="40">out</name><op:operator pos:line="381" pos:column="43">.</op:operator><name pos:line="381" pos:column="44">println</name></name><argument_list pos:line="381" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="381" pos:column="52">"Error updating/adding"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="382" pos:column="33">System</name><op:operator pos:line="382" pos:column="39">.</op:operator><name pos:line="382" pos:column="40">out</name><op:operator pos:line="382" pos:column="43">.</op:operator><name pos:line="382" pos:column="44">println</name></name><argument_list pos:line="382" pos:column="51">(<argument><expr><call><name><name pos:line="382" pos:column="52">e</name><op:operator pos:line="382" pos:column="53">.</op:operator><name pos:line="382" pos:column="54">getMessage</name></name><argument_list pos:line="382" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="383" pos:column="33">return <expr><lit:literal type="boolean" pos:line="383" pos:column="40">false</lit:literal></expr>;</return>
			}</block></catch></try>
							
		}</block>
		
		<finally pos:line="388" pos:column="17">finally<block pos:line="388" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="391" pos:column="17">return <expr><lit:literal type="boolean" pos:line="391" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	<function><type><annotation pos:line="394" pos:column="9">@<name pos:line="394" pos:column="10">Override</name></annotation>
	<specifier pos:line="395" pos:column="9">public</specifier> <name pos:line="395" pos:column="16">String</name></type> <name pos:line="395" pos:column="23">toString</name><parameter_list pos:line="395" pos:column="31">()</parameter_list><block pos:line="395" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="396" pos:column="17">String</name></type> <name pos:line="396" pos:column="24">toReturn</name> <init pos:line="396" pos:column="33">= <expr><lit:literal type="string" pos:line="396" pos:column="35">" "</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="397" pos:column="17">toReturn</name><op:operator pos:line="397" pos:column="25">+=</op:operator><lit:literal type="string" pos:line="397" pos:column="27">"\nDepartment name:"</lit:literal><op:operator pos:line="397" pos:column="47">+</op:operator><call><name><name pos:line="397" pos:column="48">this</name><op:operator pos:line="397" pos:column="52">.</op:operator><name pos:line="397" pos:column="53">getDepartmentName</name></name><argument_list pos:line="397" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="398" pos:column="17">toReturn</name><op:operator pos:line="398" pos:column="25">+=</op:operator><lit:literal type="string" pos:line="398" pos:column="27">"\nDepartment ID:"</lit:literal><op:operator pos:line="398" pos:column="45">+</op:operator><call><name><name pos:line="398" pos:column="46">this</name><op:operator pos:line="398" pos:column="50">.</op:operator><name pos:line="398" pos:column="51">getDepartmentName</name></name><argument_list pos:line="398" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="399" pos:column="17">return <expr><name pos:line="399" pos:column="24">toReturn</name></expr>;</return>
	}</block></function>
	

	<comment type="block" pos:line="403" pos:column="9">/*
	 * Method to retrieve a list of all the departments in a list
	 */</comment>
	<function><type><specifier pos:line="406" pos:column="9">public</specifier> <specifier pos:line="406" pos:column="16">static</specifier> <name><name pos:line="406" pos:column="23">ArrayList</name><argument_list pos:line="406" pos:column="32">&lt;<argument><name pos:line="406" pos:column="33">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="406" pos:column="45">getAllDepartments</name><parameter_list pos:line="406" pos:column="62">()</parameter_list><block pos:line="406" pos:column="64">{
		<decl_stmt><decl><type><name><name pos:line="407" pos:column="17">ArrayList</name><argument_list pos:line="407" pos:column="26">&lt;<argument><name pos:line="407" pos:column="27">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="407" pos:column="39">departments</name> <init pos:line="407" pos:column="51">= <expr><op:operator pos:line="407" pos:column="53">new</op:operator> <call><name><name pos:line="407" pos:column="57">ArrayList</name><argument_list pos:line="407" pos:column="66">&lt;<argument><name pos:line="407" pos:column="67">Department</name></argument>&gt;</argument_list></name><argument_list pos:line="407" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="408" pos:column="17">try<block pos:line="408" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="409" pos:column="25">Connection</name></type> <name pos:line="409" pos:column="36">conn</name> <init pos:line="409" pos:column="41">= <expr><call><name><name pos:line="409" pos:column="43">Database</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">getConnection</name></name><argument_list pos:line="409" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="411" pos:column="25">try<block pos:line="411" pos:column="28">{
				<if pos:line="412" pos:column="33">if<condition pos:line="412" pos:column="35">(<expr><name pos:line="412" pos:column="36">conn</name> <op:operator pos:line="412" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="412" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="412" pos:column="49">{
					<comment type="block" pos:line="413" pos:column="41">/*
					 * retrieve all the departments
					 */</comment>
					<decl_stmt><decl><type><name pos:line="416" pos:column="41">String</name></type> <name pos:line="416" pos:column="48">SQLSelect</name><init pos:line="416" pos:column="57">= <expr><lit:literal type="string" pos:line="416" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="417" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="417" pos:column="59">" FROM department"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="418" pos:column="41">PreparedStatement</name></type> <name pos:line="418" pos:column="59">statement</name> <init pos:line="418" pos:column="69">= <expr><call><name><name pos:line="418" pos:column="71">conn</name><op:operator pos:line="418" pos:column="75">.</op:operator><name pos:line="418" pos:column="76">prepareStatement</name></name><argument_list pos:line="418" pos:column="92">(<argument><expr><name pos:line="418" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="419" pos:column="41">ResultSet</name></type> <name pos:line="419" pos:column="51">rs</name> <init pos:line="419" pos:column="54">=  <expr><call><name><name pos:line="419" pos:column="57">statement</name><op:operator pos:line="419" pos:column="66">.</op:operator><name pos:line="419" pos:column="67">executeQuery</name></name><argument_list pos:line="419" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="block" pos:line="420" pos:column="41">/*
					 * Add all the retrieved department to the List
					 */</comment>
					<while pos:line="423" pos:column="41">while<condition pos:line="423" pos:column="46">(<expr><call><name><name pos:line="423" pos:column="47">rs</name><op:operator pos:line="423" pos:column="49">.</op:operator><name pos:line="423" pos:column="50">next</name></name><argument_list pos:line="423" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="423" pos:column="57">{
						<try pos:line="424" pos:column="49">try <block pos:line="424" pos:column="53">{
							<expr_stmt><expr><call><name><name pos:line="425" pos:column="57">DBAnnotation</name><op:operator pos:line="425" pos:column="69">.</op:operator><name pos:line="425" pos:column="70">annoate</name></name><argument_list pos:line="425" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="425" pos:column="78">"dID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="425" pos:column="85">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="425" pos:column="99">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="425" pos:column="115">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="426" pos:column="57">int</name></type> <name pos:line="426" pos:column="61">dID</name> <init pos:line="426" pos:column="65">= <expr><call><name><name pos:line="426" pos:column="67">rs</name><op:operator pos:line="426" pos:column="69">.</op:operator><name pos:line="426" pos:column="70">getInt</name></name><argument_list pos:line="426" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="426" pos:column="77">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="427" pos:column="57">Department</name></type> <name pos:line="427" pos:column="68">d</name> <init pos:line="427" pos:column="70">= <expr><op:operator pos:line="427" pos:column="72">new</op:operator> <call><name pos:line="427" pos:column="76">Department</name><argument_list pos:line="427" pos:column="86">(<argument><expr><name pos:line="427" pos:column="87">dID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="428" pos:column="57">departments</name><op:operator pos:line="428" pos:column="68">.</op:operator><name pos:line="428" pos:column="69">add</name></name><argument_list pos:line="428" pos:column="72">(<argument><expr><name pos:line="428" pos:column="73">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block> <catch pos:line="429" pos:column="51">catch <parameter_list pos:line="429" pos:column="57">(<param><decl><type><name pos:line="429" pos:column="58">DepartmentDoesNotExistException</name></type> <name pos:line="429" pos:column="90">e</name></decl></param>)</parameter_list> <block pos:line="429" pos:column="93">{
							<comment type="line" pos:line="430" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="431" pos:column="57">e</name><op:operator pos:line="431" pos:column="58">.</op:operator><name pos:line="431" pos:column="59">printStackTrace</name></name><argument_list pos:line="431" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
						
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="439" pos:column="25">catch<parameter_list pos:line="439" pos:column="30">(<param><decl><type><name pos:line="439" pos:column="31">SQLException</name></type> <name pos:line="439" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="439" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="440" pos:column="33">System</name><op:operator pos:line="440" pos:column="39">.</op:operator><name pos:line="440" pos:column="40">out</name><op:operator pos:line="440" pos:column="43">.</op:operator><name pos:line="440" pos:column="44">println</name></name><argument_list pos:line="440" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="440" pos:column="52">"Error retrieving"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="441" pos:column="33">System</name><op:operator pos:line="441" pos:column="39">.</op:operator><name pos:line="441" pos:column="40">out</name><op:operator pos:line="441" pos:column="43">.</op:operator><name pos:line="441" pos:column="44">println</name></name><argument_list pos:line="441" pos:column="51">(<argument><expr><call><name><name pos:line="441" pos:column="52">e</name><op:operator pos:line="441" pos:column="53">.</op:operator><name pos:line="441" pos:column="54">getMessage</name></name><argument_list pos:line="441" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="445" pos:column="17">finally<block pos:line="445" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="448" pos:column="17">return <expr><name pos:line="448" pos:column="24">departments</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="451" pos:column="9">/*
	 * DepartmentDoesnotExist Exception
	 */</comment>
	<class><specifier pos:line="454" pos:column="9">public</specifier> <specifier pos:line="454" pos:column="16">static</specifier> class <name pos:line="454" pos:column="29">DepartmentDoesNotExistException</name> <super><extends pos:line="454" pos:column="61">extends <name pos:line="454" pos:column="69">Exception</name></extends></super><block pos:line="454" pos:column="78">{
		<comment type="block" format="javadoc" pos:line="455" pos:column="17">/**
		 * 
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="458" pos:column="17">private</specifier> <specifier pos:line="458" pos:column="25">static</specifier> <specifier pos:line="458" pos:column="32">final</specifier> <name pos:line="458" pos:column="38">long</name></type> <name pos:line="458" pos:column="43">serialVersionUID</name> <init pos:line="458" pos:column="60">= <expr><lit:literal type="number" pos:line="458" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="459" pos:column="17">private</specifier> <name pos:line="459" pos:column="25">String</name></type> <name pos:line="459" pos:column="32">message</name> <init pos:line="459" pos:column="40">= <expr><lit:literal type="null" pos:line="459" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="461" pos:column="13">public</specifier>  <name pos:line="461" pos:column="21">DepartmentDoesNotExistException</name><parameter_list pos:line="461" pos:column="52">()</parameter_list> <block pos:line="461" pos:column="55">{
	        <expr_stmt><expr><call><name pos:line="462" pos:column="17">super</name><argument_list pos:line="462" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="463" pos:column="17">this</name><op:operator pos:line="463" pos:column="21">.</op:operator><name pos:line="463" pos:column="22">message</name></name> <op:operator pos:line="463" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="463" pos:column="32">"Department does not exist"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="466" pos:column="13">public</specifier>  <name pos:line="466" pos:column="21">DepartmentDoesNotExistException</name><parameter_list pos:line="466" pos:column="52">(<param><decl><type><name pos:line="466" pos:column="53">String</name></type> <name pos:line="466" pos:column="60">message</name></decl></param>)</parameter_list> <block pos:line="466" pos:column="69">{
	        <expr_stmt><expr><call><name pos:line="467" pos:column="17">super</name><argument_list pos:line="467" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="468" pos:column="17">this</name><op:operator pos:line="468" pos:column="21">.</op:operator><name pos:line="468" pos:column="22">message</name></name> <op:operator pos:line="468" pos:column="30">=</op:operator> <name pos:line="468" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="471" pos:column="13">@<name pos:line="471" pos:column="14">Override</name></annotation>
	    <specifier pos:line="472" pos:column="13">public</specifier> <name pos:line="472" pos:column="20">String</name></type> <name pos:line="472" pos:column="27">toString</name><parameter_list pos:line="472" pos:column="35">()</parameter_list> <block pos:line="472" pos:column="38">{
	        <return pos:line="473" pos:column="17">return <expr><name pos:line="473" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="476" pos:column="13">@<name pos:line="476" pos:column="14">Override</name></annotation>
	    <specifier pos:line="477" pos:column="13">public</specifier> <name pos:line="477" pos:column="20">String</name></type> <name pos:line="477" pos:column="27">getMessage</name><parameter_list pos:line="477" pos:column="37">()</parameter_list> <block pos:line="477" pos:column="40">{
	        <return pos:line="478" pos:column="17">return <expr><name pos:line="478" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block" pos:line="482" pos:column="9">/*
	 * DepartmentDoesnotExist Exception
	 */</comment>
	<class><specifier pos:line="485" pos:column="9">public</specifier> <specifier pos:line="485" pos:column="16">static</specifier> class <name pos:line="485" pos:column="29">DepartmentAlreadyExistsException</name> <super><extends pos:line="485" pos:column="62">extends <name pos:line="485" pos:column="70">Exception</name></extends></super><block pos:line="485" pos:column="79">{
		<comment type="block" format="javadoc" pos:line="486" pos:column="17">/**
		 * 
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="489" pos:column="17">private</specifier> <specifier pos:line="489" pos:column="25">static</specifier> <specifier pos:line="489" pos:column="32">final</specifier> <name pos:line="489" pos:column="38">long</name></type> <name pos:line="489" pos:column="43">serialVersionUID</name> <init pos:line="489" pos:column="60">= <expr><lit:literal type="number" pos:line="489" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="490" pos:column="17">private</specifier> <name pos:line="490" pos:column="25">String</name></type> <name pos:line="490" pos:column="32">message</name> <init pos:line="490" pos:column="40">= <expr><lit:literal type="null" pos:line="490" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="492" pos:column="13">public</specifier>  <name pos:line="492" pos:column="21">DepartmentAlreadyExistsException</name><parameter_list pos:line="492" pos:column="53">()</parameter_list> <block pos:line="492" pos:column="56">{
	        <expr_stmt><expr><call><name pos:line="493" pos:column="17">super</name><argument_list pos:line="493" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="494" pos:column="17">this</name><op:operator pos:line="494" pos:column="21">.</op:operator><name pos:line="494" pos:column="22">message</name></name> <op:operator pos:line="494" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="494" pos:column="32">"Department already exists"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	 
	    <function><type><annotation pos:line="498" pos:column="13">@<name pos:line="498" pos:column="14">Override</name></annotation>
	    <specifier pos:line="499" pos:column="13">public</specifier> <name pos:line="499" pos:column="20">String</name></type> <name pos:line="499" pos:column="27">toString</name><parameter_list pos:line="499" pos:column="35">()</parameter_list> <block pos:line="499" pos:column="38">{
	        <return pos:line="500" pos:column="17">return <expr><name pos:line="500" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="503" pos:column="13">@<name pos:line="503" pos:column="14">Override</name></annotation>
	    <specifier pos:line="504" pos:column="13">public</specifier> <name pos:line="504" pos:column="20">String</name></type> <name pos:line="504" pos:column="27">getMessage</name><parameter_list pos:line="504" pos:column="37">()</parameter_list> <block pos:line="504" pos:column="40">{
	        <return pos:line="505" pos:column="17">return <expr><name pos:line="505" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>
	
	<comment type="block" pos:line="509" pos:column="9">/*
	 * Method to retrieve all the courses in the department
	 */</comment>
	<function><type><specifier pos:line="512" pos:column="9">public</specifier> <name><name pos:line="512" pos:column="16">ArrayList</name><argument_list pos:line="512" pos:column="25">&lt;<argument><name pos:line="512" pos:column="26">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="512" pos:column="34">getDepartmentCourses</name><parameter_list pos:line="512" pos:column="54">()</parameter_list><block pos:line="512" pos:column="56">{
		<decl_stmt><decl><type><name><name pos:line="513" pos:column="17">ArrayList</name><argument_list pos:line="513" pos:column="26">&lt;<argument><name pos:line="513" pos:column="27">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="513" pos:column="35">deptCourses</name> <init pos:line="513" pos:column="47">= <expr><op:operator pos:line="513" pos:column="49">new</op:operator> <call><name><name pos:line="513" pos:column="53">ArrayList</name><argument_list pos:line="513" pos:column="62">&lt;<argument><name pos:line="513" pos:column="63">Course</name></argument>&gt;</argument_list></name><argument_list pos:line="513" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="515" pos:column="17">try<block pos:line="515" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="516" pos:column="25">Connection</name></type> <name pos:line="516" pos:column="36">conn</name> <init pos:line="516" pos:column="41">= <expr><call><name><name pos:line="516" pos:column="43">Database</name><op:operator pos:line="516" pos:column="51">.</op:operator><name pos:line="516" pos:column="52">getConnection</name></name><argument_list pos:line="516" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="518" pos:column="25">try<block pos:line="518" pos:column="28">{
				<if pos:line="519" pos:column="33">if<condition pos:line="519" pos:column="35">(<expr><name pos:line="519" pos:column="36">conn</name> <op:operator pos:line="519" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="519" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="519" pos:column="49">{
					<comment type="block" pos:line="520" pos:column="41">/*
					 * Retrieve all courses by filtering using the department id
					 */</comment>
					<decl_stmt><decl><type><name pos:line="523" pos:column="41">String</name></type> <name pos:line="523" pos:column="48">SQLSelect</name><init pos:line="523" pos:column="57">= <expr><lit:literal type="string" pos:line="523" pos:column="59">"Select CourseID"</lit:literal>
							<op:operator pos:line="524" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="524" pos:column="59">" FROM department natural join courses"</lit:literal>
							<op:operator pos:line="525" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="525" pos:column="59">" WHERE DepartmentID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="526" pos:column="41">PreparedStatement</name></type> <name pos:line="526" pos:column="59">statement</name> <init pos:line="526" pos:column="69">= <expr><call><name><name pos:line="526" pos:column="71">conn</name><op:operator pos:line="526" pos:column="75">.</op:operator><name pos:line="526" pos:column="76">prepareStatement</name></name><argument_list pos:line="526" pos:column="92">(<argument><expr><name pos:line="526" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="527" pos:column="41">statement</name><op:operator pos:line="527" pos:column="50">.</op:operator><name pos:line="527" pos:column="51">setInt</name></name><argument_list pos:line="527" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="527" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="527" pos:column="61">this</name><op:operator pos:line="527" pos:column="65">.</op:operator><name pos:line="527" pos:column="66">getDepartmentID</name></name><argument_list pos:line="527" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="528" pos:column="41">ResultSet</name></type> <name pos:line="528" pos:column="51">rs</name> <init pos:line="528" pos:column="54">=  <expr><call><name><name pos:line="528" pos:column="57">statement</name><op:operator pos:line="528" pos:column="66">.</op:operator><name pos:line="528" pos:column="67">executeQuery</name></name><argument_list pos:line="528" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="block" pos:line="529" pos:column="41">/*
					 * Add all the retrieved courses to the List
					 */</comment>
					<while pos:line="532" pos:column="41">while<condition pos:line="532" pos:column="46">(<expr><call><name><name pos:line="532" pos:column="47">rs</name><op:operator pos:line="532" pos:column="49">.</op:operator><name pos:line="532" pos:column="50">next</name></name><argument_list pos:line="532" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="532" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="533" pos:column="49">DBAnnotation</name><op:operator pos:line="533" pos:column="61">.</op:operator><name pos:line="533" pos:column="62">annoate</name></name><argument_list pos:line="533" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="533" pos:column="70">"cID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="533" pos:column="77">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="533" pos:column="91">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="533" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="534" pos:column="49">int</name></type> <name pos:line="534" pos:column="53">cID</name> <init pos:line="534" pos:column="57">= <expr><call><name><name pos:line="534" pos:column="59">rs</name><op:operator pos:line="534" pos:column="61">.</op:operator><name pos:line="534" pos:column="62">getInt</name></name><argument_list pos:line="534" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="534" pos:column="69">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="535" pos:column="49">Course</name></type> <name pos:line="535" pos:column="56">c</name> <init pos:line="535" pos:column="58">= <expr><op:operator pos:line="535" pos:column="60">new</op:operator> <call><name pos:line="535" pos:column="64">Course</name><argument_list pos:line="535" pos:column="70">(<argument><expr><name pos:line="535" pos:column="71">cID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="536" pos:column="49">deptCourses</name><op:operator pos:line="536" pos:column="60">.</op:operator><name pos:line="536" pos:column="61">add</name></name><argument_list pos:line="536" pos:column="64">(<argument><expr><name pos:line="536" pos:column="65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="541" pos:column="25">catch<parameter_list pos:line="541" pos:column="30">(<param><decl><type><name pos:line="541" pos:column="31">SQLException</name></type> <name pos:line="541" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="541" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="542" pos:column="33">System</name><op:operator pos:line="542" pos:column="39">.</op:operator><name pos:line="542" pos:column="40">out</name><op:operator pos:line="542" pos:column="43">.</op:operator><name pos:line="542" pos:column="44">println</name></name><argument_list pos:line="542" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="542" pos:column="52">"Error updating/adding"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="543" pos:column="33">System</name><op:operator pos:line="543" pos:column="39">.</op:operator><name pos:line="543" pos:column="40">out</name><op:operator pos:line="543" pos:column="43">.</op:operator><name pos:line="543" pos:column="44">println</name></name><argument_list pos:line="543" pos:column="51">(<argument><expr><call><name><name pos:line="543" pos:column="52">e</name><op:operator pos:line="543" pos:column="53">.</op:operator><name pos:line="543" pos:column="54">getMessage</name></name><argument_list pos:line="543" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="544" pos:column="27">catch <parameter_list pos:line="544" pos:column="33">(<param><decl><type><name><name pos:line="544" pos:column="34">Course</name><op:operator pos:line="544" pos:column="40">.</op:operator><name pos:line="544" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="544" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="544" pos:column="72">{
				<comment type="line" pos:line="545" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="546" pos:column="33">e</name><op:operator pos:line="546" pos:column="34">.</op:operator><name pos:line="546" pos:column="35">printStackTrace</name></name><argument_list pos:line="546" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<finally pos:line="549" pos:column="25">finally<block pos:line="549" pos:column="32">{
				<comment type="line" pos:line="550" pos:column="33">//Database.closeConnection(conn);</comment>
			}</block></finally></try>
			
		}</block>
		
		<finally pos:line="555" pos:column="17">finally<block pos:line="555" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="558" pos:column="17">return <expr><name pos:line="558" pos:column="24">deptCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="561" pos:column="9">/*
	 * Retrieve all the courses in the department that are currently offered
	 */</comment>
	<function><type><specifier pos:line="564" pos:column="9">public</specifier> <name><name pos:line="564" pos:column="16">ArrayList</name><argument_list pos:line="564" pos:column="25">&lt;<argument><name pos:line="564" pos:column="26">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="564" pos:column="41">getDepartmentCourseOffered</name><parameter_list pos:line="564" pos:column="67">()</parameter_list><block pos:line="564" pos:column="69">{
		
		<decl_stmt><decl><type><name><name pos:line="566" pos:column="17">ArrayList</name><argument_list pos:line="566" pos:column="26">&lt;<argument><name pos:line="566" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="566" pos:column="42">deptCourses</name> <init pos:line="566" pos:column="54">= <expr><op:operator pos:line="566" pos:column="56">new</op:operator> <call><name><name pos:line="566" pos:column="60">ArrayList</name><argument_list pos:line="566" pos:column="69">&lt;<argument><name pos:line="566" pos:column="70">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="566" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="567" pos:column="17">int</name></type> <name pos:line="567" pos:column="21">currentSemester</name> <init pos:line="567" pos:column="37">= <expr><call><name><name pos:line="567" pos:column="39">CourseOffered</name><op:operator pos:line="567" pos:column="52">.</op:operator><name pos:line="567" pos:column="53">getCurrentSemesterID</name></name><argument_list pos:line="567" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="568" pos:column="17">try<block pos:line="568" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="569" pos:column="25">Connection</name></type> <name pos:line="569" pos:column="36">conn</name> <init pos:line="569" pos:column="41">= <expr><call><name><name pos:line="569" pos:column="43">Database</name><op:operator pos:line="569" pos:column="51">.</op:operator><name pos:line="569" pos:column="52">getConnection</name></name><argument_list pos:line="569" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="571" pos:column="25">try<block pos:line="571" pos:column="28">{
				<if pos:line="572" pos:column="33">if<condition pos:line="572" pos:column="35">(<expr><name pos:line="572" pos:column="36">conn</name> <op:operator pos:line="572" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="572" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="572" pos:column="49">{
					<comment type="block" pos:line="573" pos:column="41">/*
					 * Filter all the course offerings using the specified department
					 */</comment>
					<decl_stmt><decl><type><name pos:line="576" pos:column="41">String</name></type> <name pos:line="576" pos:column="48">SQLSelect</name><init pos:line="576" pos:column="57">= <expr><lit:literal type="string" pos:line="576" pos:column="59">"Select CourseID, OfferID"</lit:literal>
							<op:operator pos:line="577" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="577" pos:column="59">" FROM coursesoffered natural join courses"</lit:literal>
							<op:operator pos:line="578" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="578" pos:column="59">" WHERE DepartmentID= ? and SemesterID = ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="579" pos:column="41">PreparedStatement</name></type> <name pos:line="579" pos:column="59">statement</name> <init pos:line="579" pos:column="69">= <expr><call><name><name pos:line="579" pos:column="71">conn</name><op:operator pos:line="579" pos:column="75">.</op:operator><name pos:line="579" pos:column="76">prepareStatement</name></name><argument_list pos:line="579" pos:column="92">(<argument><expr><name pos:line="579" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="580" pos:column="41">statement</name><op:operator pos:line="580" pos:column="50">.</op:operator><name pos:line="580" pos:column="51">setInt</name></name><argument_list pos:line="580" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="580" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="580" pos:column="61">this</name><op:operator pos:line="580" pos:column="65">.</op:operator><name pos:line="580" pos:column="66">getDepartmentID</name></name><argument_list pos:line="580" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="581" pos:column="41">statement</name><op:operator pos:line="581" pos:column="50">.</op:operator><name pos:line="581" pos:column="51">setInt</name></name><argument_list pos:line="581" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="581" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="581" pos:column="61">currentSemester</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="582" pos:column="41">ResultSet</name></type> <name pos:line="582" pos:column="51">rs</name> <init pos:line="582" pos:column="54">=  <expr><call><name><name pos:line="582" pos:column="57">statement</name><op:operator pos:line="582" pos:column="66">.</op:operator><name pos:line="582" pos:column="67">executeQuery</name></name><argument_list pos:line="582" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="584" pos:column="41">/*
					 * Add all the retrieved CoursesOffered to the list
					 */</comment>
					<while pos:line="587" pos:column="41">while<condition pos:line="587" pos:column="46">(<expr><call><name><name pos:line="587" pos:column="47">rs</name><op:operator pos:line="587" pos:column="49">.</op:operator><name pos:line="587" pos:column="50">next</name></name><argument_list pos:line="587" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="587" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="588" pos:column="49">DBAnnotation</name><op:operator pos:line="588" pos:column="61">.</op:operator><name pos:line="588" pos:column="62">annoate</name></name><argument_list pos:line="588" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="588" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="588" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="589" pos:column="49">int</name></type> <name pos:line="589" pos:column="53">offerID</name> <init pos:line="589" pos:column="61">= <expr><call><name><name pos:line="589" pos:column="63">rs</name><op:operator pos:line="589" pos:column="65">.</op:operator><name pos:line="589" pos:column="66">getInt</name></name><argument_list pos:line="589" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="589" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="590" pos:column="49">CourseOffered</name></type> <name pos:line="590" pos:column="63">co</name> <init pos:line="590" pos:column="66">= <expr><op:operator pos:line="590" pos:column="68">new</op:operator> <call><name pos:line="590" pos:column="72">CourseOffered</name><argument_list pos:line="590" pos:column="85">(<argument><expr><name pos:line="590" pos:column="86">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="591" pos:column="49">deptCourses</name><op:operator pos:line="591" pos:column="60">.</op:operator><name pos:line="591" pos:column="61">add</name></name><argument_list pos:line="591" pos:column="64">(<argument><expr><name pos:line="591" pos:column="65">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="596" pos:column="25">catch<parameter_list pos:line="596" pos:column="30">(<param><decl><type><name pos:line="596" pos:column="31">SQLException</name></type> <name pos:line="596" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="596" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="597" pos:column="33">System</name><op:operator pos:line="597" pos:column="39">.</op:operator><name pos:line="597" pos:column="40">out</name><op:operator pos:line="597" pos:column="43">.</op:operator><name pos:line="597" pos:column="44">println</name></name><argument_list pos:line="597" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="597" pos:column="52">"Error retrieving"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="598" pos:column="33">System</name><op:operator pos:line="598" pos:column="39">.</op:operator><name pos:line="598" pos:column="40">out</name><op:operator pos:line="598" pos:column="43">.</op:operator><name pos:line="598" pos:column="44">println</name></name><argument_list pos:line="598" pos:column="51">(<argument><expr><call><name><name pos:line="598" pos:column="52">e</name><op:operator pos:line="598" pos:column="53">.</op:operator><name pos:line="598" pos:column="54">getMessage</name></name><argument_list pos:line="598" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="599" pos:column="27">catch <parameter_list pos:line="599" pos:column="33">(<param><decl><type><name><name pos:line="599" pos:column="34">Course</name><op:operator pos:line="599" pos:column="40">.</op:operator><name pos:line="599" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="599" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="599" pos:column="72">{
				<comment type="line" pos:line="600" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="601" pos:column="33">e</name><op:operator pos:line="601" pos:column="34">.</op:operator><name pos:line="601" pos:column="35">printStackTrace</name></name><argument_list pos:line="601" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="602" pos:column="27">catch <parameter_list pos:line="602" pos:column="33">(<param><decl><type><name><name pos:line="602" pos:column="34">CourseOffered</name><op:operator pos:line="602" pos:column="47">.</op:operator><name pos:line="602" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="602" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="602" pos:column="87">{
				<comment type="line" pos:line="603" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="604" pos:column="33">e</name><op:operator pos:line="604" pos:column="34">.</op:operator><name pos:line="604" pos:column="35">printStackTrace</name></name><argument_list pos:line="604" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="609" pos:column="17">finally<block pos:line="609" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="612" pos:column="17">return <expr><name pos:line="612" pos:column="24">deptCourses</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="615" pos:column="9">public</specifier> <specifier pos:line="615" pos:column="16">static</specifier> <name pos:line="615" pos:column="23">void</name></type> <name pos:line="615" pos:column="28">main</name><parameter_list pos:line="615" pos:column="32">(<param><decl><type><name><name pos:line="615" pos:column="33">String</name><index pos:line="615" pos:column="39">[]</index></name></type> <name pos:line="615" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="615" pos:column="47">{
		
	}</block></function>

}</block></class>
</unit>
