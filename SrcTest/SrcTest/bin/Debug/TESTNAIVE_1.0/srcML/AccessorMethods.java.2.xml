<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\util\AccessorMethods.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">util</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SQLException</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">riskIt</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">data</name><op:operator pos:line="6" pos:column="23">.</op:operator><name pos:line="6" pos:column="24">ScoreData</name></name>;</import>

<comment type="block" format="javadoc" pos:line="8" pos:column="1">/**
 * This class provides supporter methods that are needed for all other classes
 * @author Poornima Tantry
 *
 */</comment>
<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">AccessorMethods</name>
<block pos:line="14" pos:column="1">{

	<constructor><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">AccessorMethods</name><parameter_list pos:line="16" pos:column="31">()</parameter_list>
	<block pos:line="17" pos:column="9">{

	}</block></constructor>

	<comment type="block" format="javadoc" pos:line="21" pos:column="9">/**
	 * Method to calculate income using weekwage, number of workweek,
	 * dividends, losses and gains
	 * @param week - number of weeks
	 * @param wage - wage per week
	 * @param gains - capital gains
	 * @param loss - capital losses
	 * @param dividend - stock dividends
	 * @return income - the calculated income for the person
	 * @author Poornima Tantry
	 */</comment>


	<function><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">double</name></type> <name pos:line="34" pos:column="23">calculateIncome</name><parameter_list pos:line="34" pos:column="38">(<param><decl><type><name pos:line="34" pos:column="39">int</name></type> <name pos:line="34" pos:column="43">week</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="49">int</name></type> <name pos:line="34" pos:column="53">wage</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="59">int</name></type> <name pos:line="34" pos:column="63">gains</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="70">int</name></type> <name pos:line="34" pos:column="74">loss</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="80">int</name></type> <name pos:line="34" pos:column="84">dividend</name></decl></param>)</parameter_list>
	<block pos:line="35" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">double</name></type> <name pos:line="36" pos:column="24">income</name> <init pos:line="36" pos:column="31">= <expr><lit:literal type="number" pos:line="36" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name pos:line="38" pos:column="17">income</name> <op:operator pos:line="38" pos:column="24">=</op:operator> <call pos:line="38" pos:column="26">(<name pos:line="38" pos:column="27">double</name>)<argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">week</name> <op:operator pos:line="38" pos:column="40">*</op:operator> <name pos:line="38" pos:column="42">wage</name></expr></argument> )</argument_list></call> <op:operator pos:line="38" pos:column="49">+</op:operator> <op:operator pos:line="38" pos:column="51">(</op:operator> <name pos:line="38" pos:column="53">gains</name> <op:operator pos:line="38" pos:column="59">-</op:operator> <name pos:line="38" pos:column="61">loss</name><op:operator pos:line="38" pos:column="65">)</op:operator> <op:operator pos:line="38" pos:column="67">+</op:operator> <name pos:line="38" pos:column="69">dividend</name></expr>;</expr_stmt>

		<return pos:line="40" pos:column="17">return <expr><name pos:line="40" pos:column="24">income</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="43" pos:column="9">/**
	 * This method accepts variables all data to calculate income and then
	 * sorts it in ascending order to find the range for given zipcode.
	 * @param week - number of work weeks for customer
	 * @param wage - week wage for customer
	 * @param gains - customer's capital gains
	 * @param loss - customer's capital losses
	 * @param dividend - customer's stock dividends
	 * @param ssn - ssn of the customer
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="55" pos:column="9">public</specifier> <name><name pos:line="55" pos:column="16">ArrayList</name><argument_list pos:line="55" pos:column="25">&lt;<argument><name pos:line="55" pos:column="26">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="37">calculateRange</name><parameter_list pos:line="55" pos:column="51">(<param><decl><type><name pos:line="55" pos:column="52">int</name></type> <name pos:line="55" pos:column="56">week</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="62">int</name></type> <name pos:line="55" pos:column="66">wage</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="72">int</name></type> <name pos:line="55" pos:column="76">gains</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="83">int</name></type> <name pos:line="55" pos:column="87">loss</name></decl></param>,
							   <param><decl><type><name pos:line="56" pos:column="60">int</name></type> <name pos:line="56" pos:column="64">dividend</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="74">long</name></type> <name pos:line="56" pos:column="79">ssn</name></decl></param>, <param><decl><type><name><name pos:line="56" pos:column="84">ArrayList</name><argument_list pos:line="56" pos:column="93">&lt;<argument><name pos:line="56" pos:column="94">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="56" pos:column="105">sData</name></decl></param>)</parameter_list>
	<block pos:line="57" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">double</name></type> <name pos:line="58" pos:column="24">income</name> <init pos:line="58" pos:column="31">= <expr><lit:literal type="number" pos:line="58" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="59" pos:column="17">sData</name><op:operator pos:line="59" pos:column="22">.</op:operator><name pos:line="59" pos:column="23">clear</name></name><argument_list pos:line="59" pos:column="28">()</argument_list></call></expr>;</expr_stmt>

		<try pos:line="61" pos:column="17">try
		<block pos:line="62" pos:column="17">{
			<expr_stmt><expr><name pos:line="63" pos:column="25">income</name> <op:operator pos:line="63" pos:column="32">=</op:operator> <call><name pos:line="63" pos:column="34">calculateIncome</name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">week</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="56">wage</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="62">gains</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="69">loss</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="75">dividend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="65" pos:column="25">ScoreData</name></type> <name pos:line="65" pos:column="35">data</name> <init pos:line="65" pos:column="40">= <expr><op:operator pos:line="65" pos:column="42">new</op:operator> <call><name pos:line="65" pos:column="46">ScoreData</name><argument_list pos:line="65" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">data</name><op:operator pos:line="66" pos:column="29">.</op:operator><name pos:line="66" pos:column="30">setIncome</name></name><argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">income</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">data</name><op:operator pos:line="68" pos:column="29">.</op:operator><name pos:line="68" pos:column="30">setSSN</name></name><argument_list pos:line="68" pos:column="36">(<argument><expr><name pos:line="68" pos:column="37">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="69" pos:column="25">sData</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">add</name></name><argument_list pos:line="69" pos:column="34">(<argument><expr><name pos:line="69" pos:column="35">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="71" pos:column="25">if<condition pos:line="71" pos:column="27">(<expr><call><name><name pos:line="71" pos:column="28">sData</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">size</name></name><argument_list pos:line="71" pos:column="38">()</argument_list></call> <op:operator pos:line="71" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="71" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="71" pos:column="45">
				<expr_stmt><expr><name pos:line="72" pos:column="33">sData</name> <op:operator pos:line="72" pos:column="39">=</op:operator> <call><name pos:line="72" pos:column="41">sortData</name><argument_list pos:line="72" pos:column="49">(<argument><expr><name pos:line="72" pos:column="50">sData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block>
		<catch pos:line="74" pos:column="17">catch<parameter_list pos:line="74" pos:column="22">(<param><decl><type><name pos:line="74" pos:column="23">Exception</name></type> <name pos:line="74" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="75" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">System</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">out</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">println</name></name><argument_list pos:line="76" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="44">"Exception in calculateRange"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="77" pos:column="25">e</name><op:operator pos:line="77" pos:column="26">.</op:operator><name pos:line="77" pos:column="27">printStackTrace</name></name><argument_list pos:line="77" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="79" pos:column="17">return <expr><name pos:line="79" pos:column="24">sData</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="82" pos:column="9">/**
	 * Method to sort the data based on income
	 * @param arraylist - list of people with ssn, income and score
	 * @return arraylist - sorted list based on income
	 * @author Poornima Tantry
	 */</comment>


	  <function><type><specifier pos:line="90" pos:column="11">public</specifier> <name><name pos:line="90" pos:column="18">ArrayList</name><argument_list pos:line="90" pos:column="27">&lt;<argument><name pos:line="90" pos:column="28">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="39">sortData</name><parameter_list pos:line="90" pos:column="47">(<param><decl><type><name><name pos:line="90" pos:column="48">ArrayList</name><argument_list pos:line="90" pos:column="57">&lt;<argument><name pos:line="90" pos:column="58">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="69">sData</name></decl></param>)</parameter_list>
	  <block pos:line="91" pos:column="11">{

	  	<for pos:line="93" pos:column="17">for(<init><decl><type><name pos:line="93" pos:column="21">int</name></type> <name pos:line="93" pos:column="25">i</name> <init pos:line="93" pos:column="27">=<expr><lit:literal type="number" pos:line="93" pos:column="28">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="93" pos:column="31">i</name> <op:operator pos:line="93" pos:column="33">&lt;</op:operator> <call><name><name pos:line="93" pos:column="35">sData</name><op:operator pos:line="93" pos:column="40">.</op:operator><name pos:line="93" pos:column="41">size</name></name><argument_list pos:line="93" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="93" pos:column="49">i</name><op:operator pos:line="93" pos:column="50">++</op:operator></expr></incr>)
	  	<block pos:line="94" pos:column="17">{
	  		<decl_stmt><decl><type><name pos:line="95" pos:column="25">ScoreData</name></type> <name pos:line="95" pos:column="35">temp</name> <init pos:line="95" pos:column="40">= <expr><call><name><name pos:line="95" pos:column="42">sData</name><op:operator pos:line="95" pos:column="47">.</op:operator><name pos:line="95" pos:column="48">get</name></name><argument_list pos:line="95" pos:column="51">(<argument><expr><name pos:line="95" pos:column="52">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  		<decl_stmt><decl><type><name pos:line="96" pos:column="25">double</name></type> <name pos:line="96" pos:column="32">_income</name> <init pos:line="96" pos:column="40">= <expr><call><name><name pos:line="96" pos:column="42">temp</name><op:operator pos:line="96" pos:column="46">.</op:operator><name pos:line="96" pos:column="47">getIncome</name></name><argument_list pos:line="96" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
	  		<decl_stmt><decl><type><name pos:line="97" pos:column="25">int</name></type> <name pos:line="97" pos:column="29">j</name> <init pos:line="97" pos:column="31">= <expr><name pos:line="97" pos:column="33">i</name></expr></init></decl>;</decl_stmt>

	  		<while pos:line="99" pos:column="25">while<condition pos:line="99" pos:column="30">(<expr><name pos:line="99" pos:column="31">j</name> <op:operator pos:line="99" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="99" pos:column="35">0</lit:literal> <op:operator pos:line="99" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="99" pos:column="40">sData</name><op:operator pos:line="99" pos:column="45">.</op:operator><name pos:line="99" pos:column="46">get</name></name><argument_list pos:line="99" pos:column="49">(<argument><expr><name pos:line="99" pos:column="50">j</name><op:operator pos:line="99" pos:column="51">-</op:operator><lit:literal type="number" pos:line="99" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="54">.</op:operator><call><name pos:line="99" pos:column="55">getIncome</name><argument_list pos:line="99" pos:column="64">()</argument_list></call> <op:operator pos:line="99" pos:column="67">&gt;</op:operator> <name pos:line="99" pos:column="69">_income</name></expr>)</condition>
	  		<block pos:line="100" pos:column="25">{
	  			<expr_stmt><expr><call><name><name pos:line="101" pos:column="33">sData</name><op:operator pos:line="101" pos:column="38">.</op:operator><name pos:line="101" pos:column="39">set</name></name><argument_list pos:line="101" pos:column="42">(<argument><expr><name pos:line="101" pos:column="43">j</name></expr></argument>, <argument><expr><call><name><name pos:line="101" pos:column="46">sData</name><op:operator pos:line="101" pos:column="51">.</op:operator><name pos:line="101" pos:column="52">get</name></name><argument_list pos:line="101" pos:column="55">(<argument><expr><name pos:line="101" pos:column="56">j</name><op:operator pos:line="101" pos:column="57">-</op:operator><lit:literal type="number" pos:line="101" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  			<expr_stmt><expr><name pos:line="102" pos:column="33">j</name><op:operator pos:line="102" pos:column="34">--</op:operator></expr>;</expr_stmt>
	  		}</block></while>
	  		<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">sData</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">set</name></name><argument_list pos:line="104" pos:column="34">(<argument><expr><name pos:line="104" pos:column="35">j</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="38">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  	}</block></for>
	  	<return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">sData</name></expr>;</return>
	  }</block></function>

<comment type="block" format="javadoc" pos:line="109" pos:column="1">/**
 * This method calculates score based on margin values
 * @param unionMember - finds if customer is union member
 * @param indus_stab - industry stability code
 * @param occu_stab - occupation stability code
 * @param edu - education of customer
 * @param tempScore - score calculated till this point
 * @return tempScore - the adjusted score value
 * @author Poornima Tantry
 */</comment>
	<function><type><specifier pos:line="119" pos:column="9">public</specifier> <name pos:line="119" pos:column="16">double</name></type> <name pos:line="119" pos:column="23">checkScoreRange</name><parameter_list pos:line="119" pos:column="38">(<param><decl><type><name pos:line="119" pos:column="39">String</name></type> <name pos:line="119" pos:column="46">unionMember</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="59">int</name></type> <name pos:line="119" pos:column="63">indus_stab</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="75">int</name></type> <name pos:line="119" pos:column="79">occu_stab</name></decl></param>,
									<param><decl><type><name pos:line="120" pos:column="73">String</name></type> <name pos:line="120" pos:column="80">edu</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="85">double</name></type> <name pos:line="120" pos:column="92">tempScore</name></decl></param>)</parameter_list>
	<block pos:line="121" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="122" pos:column="17">double</name></type> <name pos:line="122" pos:column="24">sqrt_s</name></decl>;</decl_stmt>


		<comment type="line" pos:line="125" pos:column="17">//check if person is in union</comment>
		<if pos:line="126" pos:column="17">if<condition pos:line="126" pos:column="19">(<expr><op:operator pos:line="126" pos:column="20">(</op:operator><name pos:line="126" pos:column="21">unionMember</name> <op:operator pos:line="126" pos:column="33">==</op:operator> <lit:literal type="null" pos:line="126" pos:column="36">null</lit:literal> <op:operator pos:line="126" pos:column="41">||</op:operator> <call><name><name pos:line="126" pos:column="44">unionMember</name><op:operator pos:line="126" pos:column="55">.</op:operator><name pos:line="126" pos:column="56">equals</name></name><argument_list pos:line="126" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="63">" No"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="69">)</op:operator>
				<op:operator pos:line="127" pos:column="33">&amp;&amp;</op:operator> <name pos:line="127" pos:column="36">tempScore</name> <op:operator pos:line="127" pos:column="46">&lt;</op:operator> <name><name pos:line="127" pos:column="48">RiskItConstants</name><op:operator pos:line="127" pos:column="63">.</op:operator><name pos:line="127" pos:column="64">THRESHOLD</name></name></expr>)</condition><then pos:line="127" pos:column="74">
		<block pos:line="128" pos:column="17">{
			<expr_stmt><expr><name pos:line="129" pos:column="25">sqrt_s</name> <op:operator pos:line="129" pos:column="32">=</op:operator> <op:operator pos:line="129" pos:column="34">(</op:operator><name pos:line="129" pos:column="35">int</name><op:operator pos:line="129" pos:column="38">)</op:operator><call><name><name pos:line="129" pos:column="39">Math</name><op:operator pos:line="129" pos:column="43">.</op:operator><name pos:line="129" pos:column="44">sqrt</name></name><argument_list pos:line="129" pos:column="48">(<argument><expr><name pos:line="129" pos:column="49">indus_stab</name> <op:operator pos:line="129" pos:column="60">*</op:operator> <name pos:line="129" pos:column="62">occu_stab</name></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="73">*</op:operator> <lit:literal type="number" pos:line="129" pos:column="75">10</lit:literal></expr>;</expr_stmt>

			<comment type="line" pos:line="131" pos:column="25">//check if sqrt_s is in 1 - 10 range</comment>
			<if pos:line="132" pos:column="25">if<condition pos:line="132" pos:column="27">(<expr><name pos:line="132" pos:column="28">sqrt_s</name> <op:operator pos:line="132" pos:column="35">&gt;=</op:operator> <lit:literal type="number" pos:line="132" pos:column="38">0</lit:literal> <op:operator pos:line="132" pos:column="40">&amp;&amp;</op:operator> <name pos:line="132" pos:column="43">sqrt_s</name> <op:operator pos:line="132" pos:column="50">&lt;=</op:operator><lit:literal type="number" pos:line="132" pos:column="52">10</lit:literal></expr> )</condition><then pos:line="132" pos:column="56">
				<expr_stmt><expr><name pos:line="133" pos:column="33">tempScore</name> <op:operator pos:line="133" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="133" pos:column="45">0</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="134" pos:column="25">else <if pos:line="134" pos:column="30">if<condition pos:line="134" pos:column="32">(<expr><name pos:line="134" pos:column="33">sqrt_s</name> <op:operator pos:line="134" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="134" pos:column="42">10</lit:literal> <op:operator pos:line="134" pos:column="45">&amp;&amp;</op:operator> <name pos:line="134" pos:column="48">sqrt_s</name> <op:operator pos:line="134" pos:column="55">&lt;=</op:operator> <lit:literal type="number" pos:line="134" pos:column="58">60</lit:literal></expr>)</condition><then pos:line="134" pos:column="61"> <comment type="line" pos:line="134" pos:column="62">// range of 10-60</comment>
			<block pos:line="135" pos:column="25">{
				<expr_stmt><expr><name pos:line="136" pos:column="33">tempScore</name> <op:operator pos:line="136" pos:column="43">=</op:operator> <name pos:line="136" pos:column="45">tempScore</name> <op:operator pos:line="136" pos:column="55">*</op:operator> <op:operator pos:line="136" pos:column="57">(</op:operator><name pos:line="136" pos:column="58">sqrt_s</name><op:operator pos:line="136" pos:column="64">/</op:operator><lit:literal type="number" pos:line="136" pos:column="65">80</lit:literal><op:operator pos:line="136" pos:column="67">)</op:operator></expr>;</expr_stmt>
				<if pos:line="137" pos:column="33">if<condition pos:line="137" pos:column="35">( <expr><call><name><name pos:line="137" pos:column="37">edu</name><op:operator pos:line="137" pos:column="40">.</op:operator><name pos:line="137" pos:column="41">equals</name></name><argument_list pos:line="137" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="48">" Masters degree(MA MS MEng MEd MSW MBA)"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="91">||</op:operator>
					<call><name><name pos:line="138" pos:column="41">edu</name><op:operator pos:line="138" pos:column="44">.</op:operator><name pos:line="138" pos:column="45">equals</name></name><argument_list pos:line="138" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="52">" Bachelors degree(BA AB BS)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="138" pos:column="82">||</op:operator>
					<call><name><name pos:line="139" pos:column="41">edu</name><op:operator pos:line="139" pos:column="44">.</op:operator><name pos:line="139" pos:column="45">equals</name></name><argument_list pos:line="139" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="52">" Doctorate degree(PhD EdD)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="81">||</op:operator>
					<call><name><name pos:line="140" pos:column="41">edu</name><op:operator pos:line="140" pos:column="44">.</op:operator><name pos:line="140" pos:column="45">equals</name></name><argument_list pos:line="140" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="52">" Prof school degree (MD DDS DVM LLB JD)"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="95">
				<block pos:line="141" pos:column="33">{
					<expr_stmt><expr><name pos:line="142" pos:column="41">tempScore</name> <op:operator pos:line="142" pos:column="51">=</op:operator> <name pos:line="142" pos:column="53">tempScore</name> <op:operator pos:line="142" pos:column="63">+</op:operator> <op:operator pos:line="142" pos:column="65">(</op:operator><name pos:line="142" pos:column="66">tempScore</name><op:operator pos:line="142" pos:column="75">/</op:operator><lit:literal type="number" pos:line="142" pos:column="76">100</lit:literal> <op:operator pos:line="142" pos:column="80">*</op:operator><lit:literal type="number" pos:line="142" pos:column="81">20</lit:literal><op:operator pos:line="142" pos:column="83">)</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else pos:line="145" pos:column="25">else <if pos:line="145" pos:column="30">if<condition pos:line="145" pos:column="32">(<expr><name pos:line="145" pos:column="33">sqrt_s</name> <op:operator pos:line="145" pos:column="40">&gt;</op:operator><lit:literal type="number" pos:line="145" pos:column="41">60</lit:literal> <op:operator pos:line="145" pos:column="44">&amp;&amp;</op:operator> <name pos:line="145" pos:column="47">sqrt_s</name> <op:operator pos:line="145" pos:column="54">&lt;=</op:operator><lit:literal type="number" pos:line="145" pos:column="56">100</lit:literal></expr>)</condition><then pos:line="145" pos:column="60"> <comment type="line" pos:line="145" pos:column="61">//range of 60-100</comment>
			<block pos:line="146" pos:column="25">{
				<expr_stmt><expr><name pos:line="147" pos:column="33">tempScore</name> <op:operator pos:line="147" pos:column="43">=</op:operator> <name pos:line="147" pos:column="45">tempScore</name> <op:operator pos:line="147" pos:column="55">*</op:operator><op:operator pos:line="147" pos:column="56">(</op:operator><name pos:line="147" pos:column="57">sqrt_s</name><op:operator pos:line="147" pos:column="63">/</op:operator><lit:literal type="number" pos:line="147" pos:column="64">100</lit:literal><op:operator pos:line="147" pos:column="67">)</op:operator></expr>;</expr_stmt>
				<block pos:line="148" pos:column="33">{
					<if pos:line="149" pos:column="41">if<condition pos:line="149" pos:column="43">( <expr><call><name><name pos:line="149" pos:column="45">edu</name><op:operator pos:line="149" pos:column="48">.</op:operator><name pos:line="149" pos:column="49">equals</name></name><argument_list pos:line="149" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="56">" Masters degree(MA MS MEng MEd MSW MBA)"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="149" pos:column="99">||</op:operator>
						<call><name><name pos:line="150" pos:column="49">edu</name><op:operator pos:line="150" pos:column="52">.</op:operator><name pos:line="150" pos:column="53">equals</name></name><argument_list pos:line="150" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="60">" Bachelors degree(BA AB BS)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="90">||</op:operator>
						<call><name><name pos:line="151" pos:column="49">edu</name><op:operator pos:line="151" pos:column="52">.</op:operator><name pos:line="151" pos:column="53">equals</name></name><argument_list pos:line="151" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="60">" Doctorate degree(PhD EdD)"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="151" pos:column="89">||</op:operator>
						<call><name><name pos:line="152" pos:column="49">edu</name><op:operator pos:line="152" pos:column="52">.</op:operator><name pos:line="152" pos:column="53">equals</name></name><argument_list pos:line="152" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="60">" Prof school degree (MD DDS DVM LLB JD)"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="103">
					<block pos:line="153" pos:column="41">{
						<expr_stmt><expr><name pos:line="154" pos:column="49">tempScore</name> <op:operator pos:line="154" pos:column="59">=</op:operator> <name pos:line="154" pos:column="61">tempScore</name> <op:operator pos:line="154" pos:column="71">+</op:operator> <op:operator pos:line="154" pos:column="73">(</op:operator><name pos:line="154" pos:column="74">tempScore</name><op:operator pos:line="154" pos:column="83">/</op:operator><lit:literal type="number" pos:line="154" pos:column="84">100</lit:literal> <op:operator pos:line="154" pos:column="88">*</op:operator><lit:literal type="number" pos:line="154" pos:column="89">12</lit:literal><op:operator pos:line="154" pos:column="91">)</op:operator></expr>;</expr_stmt>
					}</block></then></if>
				}</block>
			}</block></then>
			<else pos:line="158" pos:column="25">else <if pos:line="158" pos:column="30">if<condition pos:line="158" pos:column="32">(<expr><name pos:line="158" pos:column="33">sqrt_s</name> <op:operator pos:line="158" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="158" pos:column="42">100</lit:literal></expr>)</condition><then pos:line="158" pos:column="46">
				<expr_stmt><expr><name pos:line="159" pos:column="33">tempScore</name> <op:operator pos:line="159" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="159" pos:column="45">100</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
		}</block></then></if>
		<return pos:line="161" pos:column="17">return <expr><name pos:line="161" pos:column="24">tempScore</name></expr>;</return>
	}</block></function>

<comment type="block" format="javadoc" pos:line="164" pos:column="1">/**
 * This method accepts marital status, age , number of employees and self-employment
 * count and accordingly adjusts the score value
 * @param marital_status - marital status of person
 * @param age - age of person
 * @param selfEmp - if he/she self employed
 * @param noOfEmp - number of employees working with the customer
 * @param tempScore - temporary score calculated till this point
 * @return tempscore - the newly adjusted score value
 * @author Poornima Tantry
 */</comment>
	<function><type><specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">double</name></type> <name pos:line="175" pos:column="23">checkScoreForStatus</name><parameter_list pos:line="175" pos:column="42">(<param><decl><type><name pos:line="175" pos:column="43">String</name></type> <name pos:line="175" pos:column="50">marital_status</name></decl></param>,  <param><decl><type><name pos:line="175" pos:column="67">int</name></type> <name pos:line="175" pos:column="71">age</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="76">int</name></type> <name pos:line="175" pos:column="80">selfEmp</name></decl></param>,
										<param><decl><type><name pos:line="176" pos:column="81">int</name></type> <name pos:line="176" pos:column="85">noOfEmp</name></decl></param>, <param><decl><type><name pos:line="176" pos:column="94">double</name></type> <name pos:line="176" pos:column="101">tempScore</name></decl></param>)</parameter_list>
	<block pos:line="177" pos:column="9">{

		<comment type="line" pos:line="179" pos:column="17">//check if person is married score goes up 10 %</comment>
		<if pos:line="180" pos:column="17">if<condition pos:line="180" pos:column="19">(<expr><call><name><name pos:line="180" pos:column="20">marital_status</name><op:operator pos:line="180" pos:column="34">.</op:operator><name pos:line="180" pos:column="35">trim</name></name><argument_list pos:line="180" pos:column="39">()</argument_list></call><op:operator pos:line="180" pos:column="41">.</op:operator><call><name pos:line="180" pos:column="42">equals</name><argument_list pos:line="180" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="49">"Married-civilian spouse present"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="84">&amp;&amp;</op:operator> <name pos:line="180" pos:column="87">age</name> <op:operator pos:line="180" pos:column="91">&lt;</op:operator> <lit:literal type="number" pos:line="180" pos:column="93">65</lit:literal></expr>)</condition><then pos:line="180" pos:column="96">
			<expr_stmt><expr><name pos:line="181" pos:column="25">tempScore</name> <op:operator pos:line="181" pos:column="35">=</op:operator> <name pos:line="181" pos:column="37">tempScore</name> <op:operator pos:line="181" pos:column="47">+</op:operator> <op:operator pos:line="181" pos:column="49">(</op:operator><name pos:line="181" pos:column="50">tempScore</name><op:operator pos:line="181" pos:column="59">/</op:operator><lit:literal type="number" pos:line="181" pos:column="60">100</lit:literal> <op:operator pos:line="181" pos:column="64">*</op:operator><lit:literal type="number" pos:line="181" pos:column="65">20</lit:literal><op:operator pos:line="181" pos:column="67">)</op:operator></expr>;</expr_stmt></then>
		<else pos:line="182" pos:column="17">else <if pos:line="182" pos:column="22">if<condition pos:line="182" pos:column="24">(<expr><call><name><name pos:line="182" pos:column="25">marital_status</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">trim</name></name><argument_list pos:line="182" pos:column="44">()</argument_list></call><op:operator pos:line="182" pos:column="46">.</op:operator><call><name pos:line="182" pos:column="47">equals</name><argument_list pos:line="182" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="54">"Never married"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="71">&amp;&amp;</op:operator> <name pos:line="182" pos:column="74">age</name> <op:operator pos:line="182" pos:column="78">&lt;</op:operator> <name><name pos:line="182" pos:column="80">RiskItConstants</name><op:operator pos:line="182" pos:column="95">.</op:operator><name pos:line="182" pos:column="96">FIFTY_AGE</name></name></expr>)</condition><then pos:line="182" pos:column="106">
			<expr_stmt><expr><name pos:line="183" pos:column="25">tempScore</name> <op:operator pos:line="183" pos:column="35">=</op:operator> <name pos:line="183" pos:column="37">tempScore</name> <op:operator pos:line="183" pos:column="47">+</op:operator> <op:operator pos:line="183" pos:column="49">(</op:operator><name pos:line="183" pos:column="50">tempScore</name><op:operator pos:line="183" pos:column="59">/</op:operator><lit:literal type="number" pos:line="183" pos:column="60">100</lit:literal> <op:operator pos:line="183" pos:column="64">*</op:operator> <name><name pos:line="183" pos:column="66">RiskItConstants</name><op:operator pos:line="183" pos:column="81">.</op:operator><name pos:line="183" pos:column="82">TEN_PERCENT</name></name><op:operator pos:line="183" pos:column="93">)</op:operator></expr>;</expr_stmt></then>
		<else pos:line="184" pos:column="17">else <if pos:line="184" pos:column="22">if<condition pos:line="184" pos:column="24">(<expr><op:operator pos:line="184" pos:column="25">(</op:operator><call><name><name pos:line="184" pos:column="26">marital_status</name><op:operator pos:line="184" pos:column="40">.</op:operator><name pos:line="184" pos:column="41">trim</name></name><argument_list pos:line="184" pos:column="45">()</argument_list></call><op:operator pos:line="184" pos:column="47">.</op:operator><call><name pos:line="184" pos:column="48">equals</name><argument_list pos:line="184" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="55">"Divorced"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="184" pos:column="66">||</op:operator>
				<call><name><name pos:line="185" pos:column="33">marital_status</name><op:operator pos:line="185" pos:column="47">.</op:operator><name pos:line="185" pos:column="48">trim</name></name><argument_list pos:line="185" pos:column="52">()</argument_list></call><op:operator pos:line="185" pos:column="54">.</op:operator><call><name pos:line="185" pos:column="55">equals</name><argument_list pos:line="185" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="62">"Widowed"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="185" pos:column="72">)</op:operator> <op:operator pos:line="185" pos:column="74">&amp;&amp;</op:operator>
				<op:operator pos:line="186" pos:column="33">(</op:operator><name pos:line="186" pos:column="34">age</name> <op:operator pos:line="186" pos:column="38">&lt;</op:operator> <name><name pos:line="186" pos:column="40">RiskItConstants</name><op:operator pos:line="186" pos:column="55">.</op:operator><name pos:line="186" pos:column="56">FIFTY_AGE</name></name><op:operator pos:line="186" pos:column="65">)</op:operator></expr>)</condition><then pos:line="186" pos:column="67">
		<block pos:line="187" pos:column="17">{
			<expr_stmt><expr><name pos:line="188" pos:column="25">tempScore</name> <op:operator pos:line="188" pos:column="35">=</op:operator> <name pos:line="188" pos:column="37">tempScore</name> <op:operator pos:line="188" pos:column="47">-</op:operator> <op:operator pos:line="188" pos:column="49">(</op:operator><name pos:line="188" pos:column="50">tempScore</name><op:operator pos:line="188" pos:column="59">/</op:operator><lit:literal type="number" pos:line="188" pos:column="60">100</lit:literal> <op:operator pos:line="188" pos:column="64">*</op:operator><name><name pos:line="188" pos:column="65">RiskItConstants</name><op:operator pos:line="188" pos:column="80">.</op:operator><name pos:line="188" pos:column="81">TEN_PERCENT</name></name><op:operator pos:line="188" pos:column="92">)</op:operator></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="190" pos:column="17">else <if pos:line="190" pos:column="22">if<condition pos:line="190" pos:column="24">(<expr><op:operator pos:line="190" pos:column="25">(</op:operator><call><name><name pos:line="190" pos:column="26">marital_status</name><op:operator pos:line="190" pos:column="40">.</op:operator><name pos:line="190" pos:column="41">trim</name></name><argument_list pos:line="190" pos:column="45">()</argument_list></call><op:operator pos:line="190" pos:column="47">.</op:operator><call><name pos:line="190" pos:column="48">equals</name><argument_list pos:line="190" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="55">"Divorced"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="190" pos:column="66">||</op:operator>
				 <call><name><name pos:line="191" pos:column="34">marital_status</name><op:operator pos:line="191" pos:column="48">.</op:operator><name pos:line="191" pos:column="49">trim</name></name><argument_list pos:line="191" pos:column="53">()</argument_list></call><op:operator pos:line="191" pos:column="55">.</op:operator><call><name pos:line="191" pos:column="56">equals</name><argument_list pos:line="191" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="63">"Widowed"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="191" pos:column="73">||</op:operator>
				 <call><name><name pos:line="192" pos:column="34">marital_status</name><op:operator pos:line="192" pos:column="48">.</op:operator><name pos:line="192" pos:column="49">trim</name></name><argument_list pos:line="192" pos:column="53">()</argument_list></call><op:operator pos:line="192" pos:column="55">.</op:operator><call><name pos:line="192" pos:column="56">equals</name><argument_list pos:line="192" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="63">"Never married"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="192" pos:column="79">)</op:operator><op:operator pos:line="192" pos:column="80">&amp;&amp;</op:operator>
				 <name pos:line="193" pos:column="34">age</name> <op:operator pos:line="193" pos:column="38">&gt;</op:operator> <name><name pos:line="193" pos:column="40">RiskItConstants</name><op:operator pos:line="193" pos:column="55">.</op:operator><name pos:line="193" pos:column="56">FIFTY_AGE</name></name></expr>)</condition><then pos:line="193" pos:column="66">
		<block pos:line="194" pos:column="17">{
			<expr_stmt><expr><name pos:line="195" pos:column="25">tempScore</name> <op:operator pos:line="195" pos:column="35">=</op:operator> <name pos:line="195" pos:column="37">tempScore</name> <op:operator pos:line="195" pos:column="47">-</op:operator> <op:operator pos:line="195" pos:column="49">(</op:operator><name pos:line="195" pos:column="50">tempScore</name><op:operator pos:line="195" pos:column="59">/</op:operator><lit:literal type="number" pos:line="195" pos:column="60">100</lit:literal> <op:operator pos:line="195" pos:column="64">*</op:operator> <name><name pos:line="195" pos:column="66">RiskItConstants</name><op:operator pos:line="195" pos:column="81">.</op:operator><name pos:line="195" pos:column="82">FIFTY_PERCENT</name></name><op:operator pos:line="195" pos:column="95">)</op:operator></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="197" pos:column="17">else <if pos:line="197" pos:column="22">if<condition pos:line="197" pos:column="24">(<expr><name pos:line="197" pos:column="25">selfEmp</name> <op:operator pos:line="197" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="197" pos:column="36">0</lit:literal></expr> )</condition><then pos:line="197" pos:column="39">
			<expr_stmt><expr><name pos:line="198" pos:column="25">tempScore</name> <op:operator pos:line="198" pos:column="35">=</op:operator> <name pos:line="198" pos:column="37">tempScore</name> <op:operator pos:line="198" pos:column="47">+</op:operator> <op:operator pos:line="198" pos:column="49">(</op:operator><name pos:line="198" pos:column="50">tempScore</name><op:operator pos:line="198" pos:column="59">/</op:operator><lit:literal type="number" pos:line="198" pos:column="60">100</lit:literal> <op:operator pos:line="198" pos:column="64">*</op:operator> <name><name pos:line="198" pos:column="66">RiskItConstants</name><op:operator pos:line="198" pos:column="81">.</op:operator><name pos:line="198" pos:column="82">TWENTY_PERCENT</name></name><op:operator pos:line="198" pos:column="96">)</op:operator></expr>;</expr_stmt></then>
		<else pos:line="199" pos:column="17">else <if pos:line="199" pos:column="22">if<condition pos:line="199" pos:column="24">( <expr><name pos:line="199" pos:column="26">selfEmp</name> <op:operator pos:line="199" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="199" pos:column="36">0</lit:literal> <op:operator pos:line="199" pos:column="38">&amp;&amp;</op:operator> <name pos:line="199" pos:column="41">noOfEmp</name> <op:operator pos:line="199" pos:column="49">&gt;</op:operator> <name><name pos:line="199" pos:column="51">RiskItConstants</name><op:operator pos:line="199" pos:column="66">.</op:operator><name pos:line="199" pos:column="67">MAX_EMP_COUNT</name></name></expr>)</condition><then pos:line="199" pos:column="81">
			<expr_stmt><expr><name pos:line="200" pos:column="25">tempScore</name> <op:operator pos:line="200" pos:column="35">=</op:operator> <name pos:line="200" pos:column="37">tempScore</name> <op:operator pos:line="200" pos:column="47">-</op:operator> <op:operator pos:line="200" pos:column="49">(</op:operator><name pos:line="200" pos:column="50">tempScore</name><op:operator pos:line="200" pos:column="59">/</op:operator><lit:literal type="number" pos:line="200" pos:column="60">100</lit:literal> <op:operator pos:line="200" pos:column="64">*</op:operator> <name><name pos:line="200" pos:column="66">RiskItConstants</name><op:operator pos:line="200" pos:column="81">.</op:operator><name pos:line="200" pos:column="82">TEN_PERCENT</name></name><op:operator pos:line="200" pos:column="93">)</op:operator></expr>;</expr_stmt></then>
		<else pos:line="201" pos:column="17">else <if pos:line="201" pos:column="22">if<condition pos:line="201" pos:column="24">(<expr><name pos:line="201" pos:column="25">selfEmp</name> <op:operator pos:line="201" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="201" pos:column="35">0</lit:literal> <op:operator pos:line="201" pos:column="37">&amp;&amp;</op:operator> <name pos:line="201" pos:column="40">noOfEmp</name> <op:operator pos:line="201" pos:column="48">&lt;=</op:operator> <name><name pos:line="201" pos:column="51">RiskItConstants</name><op:operator pos:line="201" pos:column="66">.</op:operator><name pos:line="201" pos:column="67">MAX_EMP_COUNT</name></name></expr>)</condition><then pos:line="201" pos:column="81">
			<expr_stmt><expr><name pos:line="202" pos:column="25">tempScore</name> <op:operator pos:line="202" pos:column="35">=</op:operator> <name pos:line="202" pos:column="37">tempScore</name> <op:operator pos:line="202" pos:column="47">+</op:operator> <op:operator pos:line="202" pos:column="49">(</op:operator><name pos:line="202" pos:column="50">tempScore</name><op:operator pos:line="202" pos:column="59">/</op:operator><lit:literal type="number" pos:line="202" pos:column="60">100</lit:literal> <op:operator pos:line="202" pos:column="64">*</op:operator> <name><name pos:line="202" pos:column="66">RiskItConstants</name><op:operator pos:line="202" pos:column="81">.</op:operator><name pos:line="202" pos:column="82">TEN_PERCENT</name></name><op:operator pos:line="202" pos:column="93">)</op:operator></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<return pos:line="204" pos:column="17">return <expr><name pos:line="204" pos:column="24">tempScore</name></expr>;</return>
	}</block></function>

	 <comment type="block" format="javadoc" pos:line="207" pos:column="10">/**
	   * calculate the percentile of the person with all people in same zipcode
	   * @param income - get income of the person
	   * @param arraylist - list of customer holding ssn, income and score
	   * @return percent - the percentile value
	   * @author Poornima Tantry
	   */</comment>
	
	<function><type><specifier pos:line="215" pos:column="9">public</specifier> <name pos:line="215" pos:column="16">int</name></type> <name pos:line="215" pos:column="20">calculatePercentile</name><parameter_list pos:line="215" pos:column="39">(<param><decl><type><name pos:line="215" pos:column="40">double</name></type> <name pos:line="215" pos:column="47">income</name></decl></param>, <param><decl><type><name><name pos:line="215" pos:column="55">ArrayList</name><argument_list pos:line="215" pos:column="64">&lt;<argument><name pos:line="215" pos:column="65">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="215" pos:column="76">sData</name></decl></param>)</parameter_list>
	<block pos:line="216" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="217" pos:column="17">int</name></type> <name pos:line="217" pos:column="21">percent</name> <init pos:line="217" pos:column="29">= <expr><lit:literal type="number" pos:line="217" pos:column="31">0</lit:literal></expr></init><op:operator pos:line="217" pos:column="32">,</op:operator> <name pos:line="217" pos:column="34">count</name> <init pos:line="217" pos:column="40">= <expr><lit:literal type="number" pos:line="217" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="218" pos:column="17">double</name></type> <name pos:line="218" pos:column="24">tempPercent</name> <init pos:line="218" pos:column="36">= <expr><lit:literal type="number" pos:line="218" pos:column="38">0.0</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="220" pos:column="17">//check for number of people below the given income</comment>
		<for pos:line="221" pos:column="17">for(<init><decl><type><name pos:line="221" pos:column="21">int</name></type> <name pos:line="221" pos:column="25">i</name><init pos:line="221" pos:column="26">=<expr><lit:literal type="number" pos:line="221" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="221" pos:column="30">i</name> <op:operator pos:line="221" pos:column="32">&lt;</op:operator> <call><name><name pos:line="221" pos:column="34">sData</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">size</name></name><argument_list pos:line="221" pos:column="44">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="221" pos:column="48">++</op:operator><name pos:line="221" pos:column="50">i</name></expr></incr>)
		<block pos:line="222" pos:column="17">{
			<if pos:line="223" pos:column="25">if<condition pos:line="223" pos:column="27">(<expr><call><name><name pos:line="223" pos:column="28">sData</name><op:operator pos:line="223" pos:column="33">.</op:operator><name pos:line="223" pos:column="34">get</name></name><argument_list pos:line="223" pos:column="37">(<argument><expr><name pos:line="223" pos:column="38">i</name></expr></argument>)</argument_list></call><op:operator pos:line="223" pos:column="40">.</op:operator><call><name pos:line="223" pos:column="41">getIncome</name><argument_list pos:line="223" pos:column="50">()</argument_list></call> <op:operator pos:line="223" pos:column="53">&lt;</op:operator> <name pos:line="223" pos:column="55">income</name></expr>)</condition><then pos:line="223" pos:column="62">
				<expr_stmt><expr><op:operator pos:line="224" pos:column="33">++</op:operator> <name pos:line="224" pos:column="36">count</name></expr>;</expr_stmt></then></if>
		}</block></for>
		<decl_stmt><decl><type><name pos:line="226" pos:column="17">int</name></type> <name pos:line="226" pos:column="21">size</name> <init pos:line="226" pos:column="26">= <expr><call><name><name pos:line="226" pos:column="28">sData</name><op:operator pos:line="226" pos:column="33">.</op:operator><name pos:line="226" pos:column="34">size</name></name><argument_list pos:line="226" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="228" pos:column="17">//if only 1 record</comment>
		<if pos:line="229" pos:column="17">if<condition pos:line="229" pos:column="19">(<expr><call><name><name pos:line="229" pos:column="20">sData</name><op:operator pos:line="229" pos:column="25">.</op:operator><name pos:line="229" pos:column="26">size</name></name><argument_list pos:line="229" pos:column="30">()</argument_list></call> <op:operator pos:line="229" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="229" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="229" pos:column="38">
			<expr_stmt><expr><name pos:line="230" pos:column="25">count</name> <op:operator pos:line="230" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="230" pos:column="33">1</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="232" pos:column="17">if<condition pos:line="232" pos:column="19">(<expr><name pos:line="232" pos:column="20">size</name> <op:operator pos:line="232" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="232" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="232" pos:column="29">
			<expr_stmt><expr><name pos:line="233" pos:column="25">size</name> <op:operator pos:line="233" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="233" pos:column="32">1</lit:literal></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="235" pos:column="25">tempPercent</name> <op:operator pos:line="235" pos:column="37">=</op:operator> <op:operator pos:line="235" pos:column="39">(</op:operator><name pos:line="235" pos:column="40">count</name><op:operator pos:line="235" pos:column="45">)</op:operator><op:operator pos:line="235" pos:column="46">/</op:operator><name pos:line="235" pos:column="47">size</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name pos:line="236" pos:column="25">percent</name> <op:operator pos:line="236" pos:column="33">=</op:operator> <op:operator pos:line="236" pos:column="35">(</op:operator><name pos:line="236" pos:column="36">int</name><op:operator pos:line="236" pos:column="39">)</op:operator><name pos:line="236" pos:column="40">tempPercent</name></expr>;</expr_stmt>

		<return pos:line="238" pos:column="17">return <expr><name pos:line="238" pos:column="24">percent</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="241" pos:column="9">/**
	 * This method checks to see if the given input contains only numbers
	 * @param input - string containing the input
	 * @param invalidNum - invalid code
	 * @return - return the right number format
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="249" pos:column="9">public</specifier> <name pos:line="249" pos:column="16">int</name></type> <name pos:line="249" pos:column="20">checkLetterDigit</name><parameter_list pos:line="249" pos:column="36">(<param><decl><type><name pos:line="249" pos:column="37">String</name></type> <name pos:line="249" pos:column="44">input</name></decl></param>, <param><decl><type><name pos:line="249" pos:column="51">int</name></type> <name pos:line="249" pos:column="55">invalidNum</name></decl></param>)</parameter_list>
	<block pos:line="250" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="251" pos:column="17">boolean</name></type> <name pos:line="251" pos:column="25">letterFlag</name> <init pos:line="251" pos:column="36">= <expr><lit:literal type="boolean" pos:line="251" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="252" pos:column="17">int</name></type> <name pos:line="252" pos:column="21">choice</name> <init pos:line="252" pos:column="28">= <expr><lit:literal type="number" pos:line="252" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="254" pos:column="17">if<condition pos:line="254" pos:column="19">(<expr><call><name><name pos:line="254" pos:column="20">input</name><op:operator pos:line="254" pos:column="25">.</op:operator><name pos:line="254" pos:column="26">length</name></name><argument_list pos:line="254" pos:column="32">()</argument_list></call> <op:operator pos:line="254" pos:column="35">&lt;=</op:operator> <lit:literal type="number" pos:line="254" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="254" pos:column="40">
			<expr_stmt><expr><name pos:line="255" pos:column="25">choice</name> <op:operator pos:line="255" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="255" pos:column="34">0</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="256" pos:column="17">else
		<block pos:line="257" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="258" pos:column="25">char</name><index pos:line="258" pos:column="29">[]</index></type> <name pos:line="258" pos:column="32">temparr</name> <init pos:line="258" pos:column="40">= <expr><call><name><name pos:line="258" pos:column="42">input</name><op:operator pos:line="258" pos:column="47">.</op:operator><name pos:line="258" pos:column="48">toCharArray</name></name><argument_list pos:line="258" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for pos:line="259" pos:column="25">for(<init><decl><type><name pos:line="259" pos:column="29">int</name></type> <name pos:line="259" pos:column="33">i</name><init pos:line="259" pos:column="34">=<expr><lit:literal type="number" pos:line="259" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="259" pos:column="38">i</name><op:operator pos:line="259" pos:column="39">&lt;</op:operator><name><name pos:line="259" pos:column="40">temparr</name><op:operator pos:line="259" pos:column="47">.</op:operator><name pos:line="259" pos:column="48">length</name></name></expr>;</condition> <incr><expr><op:operator pos:line="259" pos:column="56">++</op:operator><name pos:line="259" pos:column="58">i</name></expr></incr>)
			<block pos:line="260" pos:column="25">{
				<if pos:line="261" pos:column="33">if<condition pos:line="261" pos:column="35">(<expr><op:operator pos:line="261" pos:column="36">!</op:operator><call><name><name pos:line="261" pos:column="37">Character</name><op:operator pos:line="261" pos:column="46">.</op:operator><name pos:line="261" pos:column="47">isDigit</name></name><argument_list pos:line="261" pos:column="54">(<argument><expr><name><name pos:line="261" pos:column="55">temparr</name><index pos:line="261" pos:column="62">[<expr><name pos:line="261" pos:column="63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="261" pos:column="67">
				<block pos:line="262" pos:column="33">{
					<expr_stmt><expr><name pos:line="263" pos:column="41">letterFlag</name> <op:operator pos:line="263" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="263" pos:column="54">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="264" pos:column="41">choice</name> <op:operator pos:line="264" pos:column="48">=</op:operator> <name pos:line="264" pos:column="50">invalidNum</name></expr>;</expr_stmt>
					<break pos:line="265" pos:column="41">break;</break>
				}</block></then></if>
			}</block></for>
			
			<if pos:line="269" pos:column="25">if<condition pos:line="269" pos:column="27">(<expr><op:operator pos:line="269" pos:column="28">!</op:operator><name pos:line="269" pos:column="29">letterFlag</name></expr>)</condition><then pos:line="269" pos:column="40">
			<expr_stmt><expr><name pos:line="270" pos:column="25">choice</name> <op:operator pos:line="270" pos:column="32">=</op:operator> <call><name><name pos:line="270" pos:column="34">Integer</name><op:operator pos:line="270" pos:column="41">.</op:operator><name pos:line="270" pos:column="42">parseInt</name></name><argument_list pos:line="270" pos:column="50">(<argument><expr><name pos:line="270" pos:column="51">input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></else></if>
		<return pos:line="272" pos:column="17">return <expr><name pos:line="272" pos:column="24">choice</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="275" pos:column="9">/**
	 * This method checks to see if all the letters are string
	 * @param input - String input value
	 * @return - String representation of input, else empty string
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="281" pos:column="9">public</specifier> <name pos:line="281" pos:column="16">String</name></type> <name pos:line="281" pos:column="23">checkLetter</name><parameter_list pos:line="281" pos:column="34">(<param><decl><type><name pos:line="281" pos:column="35">String</name></type> <name pos:line="281" pos:column="42">input</name></decl></param>)</parameter_list>
	<block pos:line="282" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="283" pos:column="17">boolean</name></type> <name pos:line="283" pos:column="25">letterFlag</name> <init pos:line="283" pos:column="36">= <expr><lit:literal type="boolean" pos:line="283" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="284" pos:column="17">String</name></type> <name pos:line="284" pos:column="24">choice</name> <init pos:line="284" pos:column="31">= <expr><lit:literal type="string" pos:line="284" pos:column="33">""</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="286" pos:column="17">if<condition pos:line="286" pos:column="19">(<expr><call><name><name pos:line="286" pos:column="20">input</name><op:operator pos:line="286" pos:column="25">.</op:operator><name pos:line="286" pos:column="26">length</name></name><argument_list pos:line="286" pos:column="32">()</argument_list></call> <op:operator pos:line="286" pos:column="35">&lt;=</op:operator> <lit:literal type="number" pos:line="286" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="286" pos:column="40">
			<expr_stmt><expr><name pos:line="287" pos:column="25">choice</name> <op:operator pos:line="287" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="287" pos:column="34">""</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="288" pos:column="17">else
		<block pos:line="289" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="290" pos:column="25">char</name><index pos:line="290" pos:column="29">[]</index></type> <name pos:line="290" pos:column="32">temparr</name> <init pos:line="290" pos:column="40">= <expr><call><name><name pos:line="290" pos:column="42">input</name><op:operator pos:line="290" pos:column="47">.</op:operator><name pos:line="290" pos:column="48">toCharArray</name></name><argument_list pos:line="290" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for pos:line="291" pos:column="25">for(<init><decl><type><name pos:line="291" pos:column="29">int</name></type> <name pos:line="291" pos:column="33">i</name><init pos:line="291" pos:column="34">=<expr><lit:literal type="number" pos:line="291" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="291" pos:column="38">i</name><op:operator pos:line="291" pos:column="39">&lt;</op:operator><name><name pos:line="291" pos:column="40">temparr</name><op:operator pos:line="291" pos:column="47">.</op:operator><name pos:line="291" pos:column="48">length</name></name></expr>;</condition> <incr><expr><op:operator pos:line="291" pos:column="56">++</op:operator><name pos:line="291" pos:column="58">i</name></expr></incr>)
			<block pos:line="292" pos:column="25">{
				<if pos:line="293" pos:column="33">if<condition pos:line="293" pos:column="35">(<expr><op:operator pos:line="293" pos:column="36">!</op:operator><call><name><name pos:line="293" pos:column="37">Character</name><op:operator pos:line="293" pos:column="46">.</op:operator><name pos:line="293" pos:column="47">isLetter</name></name><argument_list pos:line="293" pos:column="55">(<argument><expr><name><name pos:line="293" pos:column="56">temparr</name><index pos:line="293" pos:column="63">[<expr><name pos:line="293" pos:column="64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="293" pos:column="68">
				<block pos:line="294" pos:column="33">{
					<expr_stmt><expr><name pos:line="295" pos:column="41">letterFlag</name> <op:operator pos:line="295" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="295" pos:column="54">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="296" pos:column="41">choice</name> <op:operator pos:line="296" pos:column="48">=</op:operator> <lit:literal type="string" pos:line="296" pos:column="50">""</lit:literal></expr>;</expr_stmt>
					<break pos:line="297" pos:column="41">break;</break>
				}</block></then></if>
			}</block></for>
			
			<if pos:line="301" pos:column="25">if<condition pos:line="301" pos:column="27">(<expr><op:operator pos:line="301" pos:column="28">!</op:operator><name pos:line="301" pos:column="29">letterFlag</name></expr>)</condition><then pos:line="301" pos:column="40">
			<expr_stmt><expr><name pos:line="302" pos:column="25">choice</name> <op:operator pos:line="302" pos:column="32">=</op:operator> <name pos:line="302" pos:column="34">input</name></expr>;</expr_stmt></then></if>
		}</block></else></if>
		<return pos:line="304" pos:column="17">return <expr><name pos:line="304" pos:column="24">choice</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="307" pos:column="9">public</specifier> <name pos:line="307" pos:column="16">void</name></type> <name pos:line="307" pos:column="21">printRs</name><parameter_list pos:line="307" pos:column="28">(<param><decl><type><name pos:line="307" pos:column="29">ResultSet</name></type> <name pos:line="307" pos:column="39">rs</name></decl></param>)</parameter_list> <throws pos:line="307" pos:column="43">throws <argument><expr><name pos:line="307" pos:column="50">SQLException</name></expr></argument></throws><block pos:line="307" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="308" pos:column="17">int</name></type> <name pos:line="308" pos:column="21">industrycode</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="309" pos:column="12">int</name></type> <name pos:line="309" pos:column="16">occupationcode</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="310" pos:column="12">int</name></type> <name pos:line="310" pos:column="16">average</name></decl>;</decl_stmt>

	    <comment type="line" pos:line="312" pos:column="13">//Ensure we start with first row</comment>
	   <try pos:line="313" pos:column="12">try<block pos:line="313" pos:column="15">{
        <expr_stmt><expr><call><name><name pos:line="314" pos:column="9">rs</name><op:operator pos:line="314" pos:column="11">.</op:operator><name pos:line="314" pos:column="12">beforeFirst</name></name><argument_list pos:line="314" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	    <while pos:line="315" pos:column="13">while<condition pos:line="315" pos:column="18">(<expr><call><name><name pos:line="315" pos:column="19">rs</name><op:operator pos:line="315" pos:column="21">.</op:operator><name pos:line="315" pos:column="22">next</name></name><argument_list pos:line="315" pos:column="26">()</argument_list></call></expr>)</condition><block pos:line="315" pos:column="29">{
	      <comment type="line" pos:line="316" pos:column="15">//Retrieve by column name</comment>
	      <expr_stmt><expr><name pos:line="317" pos:column="15">industrycode</name><op:operator pos:line="317" pos:column="27">=</op:operator> <call><name><name pos:line="317" pos:column="29">rs</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">getInt</name></name><argument_list pos:line="317" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="317" pos:column="39">"industrycode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name pos:line="318" pos:column="14">occupationcode</name> <op:operator pos:line="318" pos:column="29">=</op:operator> <call><name><name pos:line="318" pos:column="31">rs</name><op:operator pos:line="318" pos:column="33">.</op:operator><name pos:line="318" pos:column="34">getInt</name></name><argument_list pos:line="318" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="41">"occupationcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name pos:line="319" pos:column="15">average</name> <op:operator pos:line="319" pos:column="23">=</op:operator> <call><name><name pos:line="319" pos:column="25">rs</name><op:operator pos:line="319" pos:column="27">.</op:operator><name pos:line="319" pos:column="28">getInt</name></name><argument_list pos:line="319" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="35">"meanweekwage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="line" pos:line="321" pos:column="15">//Display values</comment>
	      <expr_stmt><expr><call><name><name pos:line="322" pos:column="15">System</name><op:operator pos:line="322" pos:column="21">.</op:operator><name pos:line="322" pos:column="22">out</name><op:operator pos:line="322" pos:column="25">.</op:operator><name pos:line="322" pos:column="26">print</name></name><argument_list pos:line="322" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="322" pos:column="32">"Row Number="</lit:literal> <op:operator pos:line="322" pos:column="46">+</op:operator> <call><name><name pos:line="322" pos:column="48">rs</name><op:operator pos:line="322" pos:column="50">.</op:operator><name pos:line="322" pos:column="51">getRow</name></name><argument_list pos:line="322" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="323" pos:column="15">System</name><op:operator pos:line="323" pos:column="21">.</op:operator><name pos:line="323" pos:column="22">out</name><op:operator pos:line="323" pos:column="25">.</op:operator><name pos:line="323" pos:column="26">print</name></name><argument_list pos:line="323" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="323" pos:column="32">", industrycode: "</lit:literal> <op:operator pos:line="323" pos:column="51">+</op:operator> <name pos:line="323" pos:column="53">industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="324" pos:column="15">System</name><op:operator pos:line="324" pos:column="21">.</op:operator><name pos:line="324" pos:column="22">out</name><op:operator pos:line="324" pos:column="25">.</op:operator><name pos:line="324" pos:column="26">print</name></name><argument_list pos:line="324" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="32">", occupationcode: "</lit:literal> <op:operator pos:line="324" pos:column="53">+</op:operator> <name pos:line="324" pos:column="55">occupationcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="325" pos:column="15">System</name><op:operator pos:line="325" pos:column="21">.</op:operator><name pos:line="325" pos:column="22">out</name><op:operator pos:line="325" pos:column="25">.</op:operator><name pos:line="325" pos:column="26">println</name></name><argument_list pos:line="325" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="34">", meanweekwage: $"</lit:literal> <op:operator pos:line="325" pos:column="54">+</op:operator> <name pos:line="325" pos:column="56">average</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></while>
	    <expr_stmt><expr><call><name><name pos:line="327" pos:column="13">System</name><op:operator pos:line="327" pos:column="19">.</op:operator><name pos:line="327" pos:column="20">out</name><op:operator pos:line="327" pos:column="23">.</op:operator><name pos:line="327" pos:column="24">println</name></name><argument_list pos:line="327" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	   }</block><catch pos:line="328" pos:column="13">catch<parameter_list pos:line="328" pos:column="18">(<param><decl><type><name pos:line="328" pos:column="19">NullPointerException</name></type> <name pos:line="328" pos:column="40">e</name></decl></param>)</parameter_list><block pos:line="328" pos:column="42">{
		   <expr_stmt><expr><call><name><name pos:line="329" pos:column="20">e</name><op:operator pos:line="329" pos:column="21">.</op:operator><name pos:line="329" pos:column="22">printStackTrace</name></name><argument_list pos:line="329" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	   }</block></catch></try>
	}</block></function>
	<function><type><specifier pos:line="332" pos:column="9">public</specifier> <name pos:line="332" pos:column="16">void</name></type> <name pos:line="332" pos:column="21">printResult</name><parameter_list pos:line="332" pos:column="32">(<param><decl><type><name pos:line="332" pos:column="33">ResultSet</name></type> <name pos:line="332" pos:column="43">rs</name></decl></param>)</parameter_list> <throws pos:line="332" pos:column="47">throws <argument><expr><name pos:line="332" pos:column="54">SQLException</name></expr></argument></throws><block pos:line="332" pos:column="66">{
		<decl_stmt><decl><type><name pos:line="333" pos:column="17">int</name></type> <name pos:line="333" pos:column="21">ssn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="334" pos:column="17">String</name></type> <name pos:line="334" pos:column="24">workclass</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="335" pos:column="13">int</name></type> <name pos:line="335" pos:column="17">industrycode</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="336" pos:column="13">int</name></type> <name pos:line="336" pos:column="17">occupationcode</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="337" pos:column="13">String</name></type> <name pos:line="337" pos:column="20">unionmember</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="338" pos:column="13">int</name></type> <name pos:line="338" pos:column="17">employersize</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="339" pos:column="13">int</name></type> <name pos:line="339" pos:column="17">weekwage</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="340" pos:column="13">int</name></type> <name pos:line="340" pos:column="17">selfemployed</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name pos:line="341" pos:column="13">int</name></type> <name pos:line="341" pos:column="17">workweeks</name></decl>;</decl_stmt>


	    <comment type="line" pos:line="344" pos:column="13">//Ensure we start with first row</comment>

        <expr_stmt><expr><call><name><name pos:line="346" pos:column="9">rs</name><op:operator pos:line="346" pos:column="11">.</op:operator><name pos:line="346" pos:column="12">beforeFirst</name></name><argument_list pos:line="346" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	    <while pos:line="347" pos:column="13">while<condition pos:line="347" pos:column="18">(<expr><call><name><name pos:line="347" pos:column="19">rs</name><op:operator pos:line="347" pos:column="21">.</op:operator><name pos:line="347" pos:column="22">next</name></name><argument_list pos:line="347" pos:column="26">()</argument_list></call></expr>)</condition><block pos:line="347" pos:column="29">{
	      <comment type="line" pos:line="348" pos:column="15">//Retrieve by column name</comment>
	    	<expr_stmt><expr><name pos:line="349" pos:column="17">ssn</name> <op:operator pos:line="349" pos:column="21">=</op:operator> <call><name><name pos:line="349" pos:column="23">rs</name><op:operator pos:line="349" pos:column="25">.</op:operator><name pos:line="349" pos:column="26">getInt</name></name><argument_list pos:line="349" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="33">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><name pos:line="350" pos:column="17">workclass</name> <op:operator pos:line="350" pos:column="27">=</op:operator> <call><name><name pos:line="350" pos:column="29">rs</name><op:operator pos:line="350" pos:column="31">.</op:operator><name pos:line="350" pos:column="32">getString</name></name><argument_list pos:line="350" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="42">"workclass"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="351" pos:column="17">industrycode</name><op:operator pos:line="351" pos:column="29">=</op:operator> <call><name><name pos:line="351" pos:column="31">rs</name><op:operator pos:line="351" pos:column="33">.</op:operator><name pos:line="351" pos:column="34">getInt</name></name><argument_list pos:line="351" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="351" pos:column="41">"industrycode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="352" pos:column="17">occupationcode</name> <op:operator pos:line="352" pos:column="32">=</op:operator> <call><name><name pos:line="352" pos:column="34">rs</name><op:operator pos:line="352" pos:column="36">.</op:operator><name pos:line="352" pos:column="37">getInt</name></name><argument_list pos:line="352" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="352" pos:column="44">"occupationcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="353" pos:column="17">unionmember</name> <op:operator pos:line="353" pos:column="29">=</op:operator> <call><name><name pos:line="353" pos:column="31">rs</name><op:operator pos:line="353" pos:column="33">.</op:operator><name pos:line="353" pos:column="34">getString</name></name><argument_list pos:line="353" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="353" pos:column="44">"unionmember"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="354" pos:column="17">employersize</name> <op:operator pos:line="354" pos:column="30">=</op:operator> <call><name><name pos:line="354" pos:column="32">rs</name><op:operator pos:line="354" pos:column="34">.</op:operator><name pos:line="354" pos:column="35">getInt</name></name><argument_list pos:line="354" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="354" pos:column="42">"employersize"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="355" pos:column="17">weekwage</name> <op:operator pos:line="355" pos:column="26">=</op:operator> <call><name><name pos:line="355" pos:column="28">rs</name><op:operator pos:line="355" pos:column="30">.</op:operator><name pos:line="355" pos:column="31">getInt</name></name><argument_list pos:line="355" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="355" pos:column="38">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="356" pos:column="17">selfemployed</name> <op:operator pos:line="356" pos:column="30">=</op:operator> <call><name><name pos:line="356" pos:column="32">rs</name><op:operator pos:line="356" pos:column="34">.</op:operator><name pos:line="356" pos:column="35">getInt</name></name><argument_list pos:line="356" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="42">"selfemployed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="357" pos:column="17">workweeks</name> <op:operator pos:line="357" pos:column="27">=</op:operator> <call><name><name pos:line="357" pos:column="29">rs</name><op:operator pos:line="357" pos:column="31">.</op:operator><name pos:line="357" pos:column="32">getInt</name></name><argument_list pos:line="357" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="357" pos:column="39">"workweeks"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="line" pos:line="359" pos:column="15">//Display values</comment>
	      <expr_stmt><expr><call><name><name pos:line="360" pos:column="15">System</name><op:operator pos:line="360" pos:column="21">.</op:operator><name pos:line="360" pos:column="22">out</name><op:operator pos:line="360" pos:column="25">.</op:operator><name pos:line="360" pos:column="26">print</name></name><argument_list pos:line="360" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="360" pos:column="32">"Row Number="</lit:literal> <op:operator pos:line="360" pos:column="46">+</op:operator> <call><name><name pos:line="360" pos:column="48">rs</name><op:operator pos:line="360" pos:column="50">.</op:operator><name pos:line="360" pos:column="51">getRow</name></name><argument_list pos:line="360" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="361" pos:column="15">System</name><op:operator pos:line="361" pos:column="21">.</op:operator><name pos:line="361" pos:column="22">out</name><op:operator pos:line="361" pos:column="25">.</op:operator><name pos:line="361" pos:column="26">println</name></name><argument_list pos:line="361" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="361" pos:column="34">","</lit:literal> <op:operator pos:line="361" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="361" pos:column="40">" ssn: "</lit:literal> <op:operator pos:line="361" pos:column="49">+</op:operator> <name pos:line="361" pos:column="51">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="362" pos:column="15">System</name><op:operator pos:line="362" pos:column="21">.</op:operator><name pos:line="362" pos:column="22">out</name><op:operator pos:line="362" pos:column="25">.</op:operator><name pos:line="362" pos:column="26">println</name></name><argument_list pos:line="362" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="362" pos:column="34">","</lit:literal> <op:operator pos:line="362" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="362" pos:column="40">" workclass: "</lit:literal> <op:operator pos:line="362" pos:column="55">+</op:operator> <name pos:line="362" pos:column="57">workclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="363" pos:column="15">System</name><op:operator pos:line="363" pos:column="21">.</op:operator><name pos:line="363" pos:column="22">out</name><op:operator pos:line="363" pos:column="25">.</op:operator><name pos:line="363" pos:column="26">println</name></name><argument_list pos:line="363" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="363" pos:column="34">","</lit:literal>   <op:operator pos:line="363" pos:column="40">+</op:operator> <lit:literal type="string" pos:line="363" pos:column="42">" industrycode: "</lit:literal> <op:operator pos:line="363" pos:column="60">+</op:operator> <name pos:line="363" pos:column="62">industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="364" pos:column="15">System</name><op:operator pos:line="364" pos:column="21">.</op:operator><name pos:line="364" pos:column="22">out</name><op:operator pos:line="364" pos:column="25">.</op:operator><name pos:line="364" pos:column="26">println</name></name><argument_list pos:line="364" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="364" pos:column="34">","</lit:literal>   <op:operator pos:line="364" pos:column="40">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="42">" occupationcode: "</lit:literal> <op:operator pos:line="364" pos:column="62">+</op:operator> <name pos:line="364" pos:column="64">occupationcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="365" pos:column="15">System</name><op:operator pos:line="365" pos:column="21">.</op:operator><name pos:line="365" pos:column="22">out</name><op:operator pos:line="365" pos:column="25">.</op:operator><name pos:line="365" pos:column="26">println</name></name><argument_list pos:line="365" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="365" pos:column="34">","</lit:literal> <op:operator pos:line="365" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="365" pos:column="40">" unionmember: "</lit:literal> <op:operator pos:line="365" pos:column="57">+</op:operator> <name pos:line="365" pos:column="59">unionmember</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="366" pos:column="15">System</name><op:operator pos:line="366" pos:column="21">.</op:operator><name pos:line="366" pos:column="22">out</name><op:operator pos:line="366" pos:column="25">.</op:operator><name pos:line="366" pos:column="26">println</name></name><argument_list pos:line="366" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="34">","</lit:literal> <op:operator pos:line="366" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="366" pos:column="40">" employersize: "</lit:literal> <op:operator pos:line="366" pos:column="58">+</op:operator> <name pos:line="366" pos:column="60">employersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="367" pos:column="15">System</name><op:operator pos:line="367" pos:column="21">.</op:operator><name pos:line="367" pos:column="22">out</name><op:operator pos:line="367" pos:column="25">.</op:operator><name pos:line="367" pos:column="26">println</name></name><argument_list pos:line="367" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="34">","</lit:literal> <op:operator pos:line="367" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="367" pos:column="40">" weekwage: "</lit:literal> <op:operator pos:line="367" pos:column="54">+</op:operator> <name pos:line="367" pos:column="56">weekwage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="368" pos:column="15">System</name><op:operator pos:line="368" pos:column="21">.</op:operator><name pos:line="368" pos:column="22">out</name><op:operator pos:line="368" pos:column="25">.</op:operator><name pos:line="368" pos:column="26">println</name></name><argument_list pos:line="368" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="34">","</lit:literal> <op:operator pos:line="368" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="368" pos:column="40">" selfemployed: "</lit:literal> <op:operator pos:line="368" pos:column="58">+</op:operator> <name pos:line="368" pos:column="60">selfemployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt><expr><call><name><name pos:line="370" pos:column="15">System</name><op:operator pos:line="370" pos:column="21">.</op:operator><name pos:line="370" pos:column="22">out</name><op:operator pos:line="370" pos:column="25">.</op:operator><name pos:line="370" pos:column="26">println</name></name><argument_list pos:line="370" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="370" pos:column="34">","</lit:literal> <op:operator pos:line="370" pos:column="38">+</op:operator> <lit:literal type="string" pos:line="370" pos:column="40">" workweeks: "</lit:literal> <op:operator pos:line="370" pos:column="55">+</op:operator> <name pos:line="370" pos:column="57">workweeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></while>
	    <expr_stmt><expr><call><name><name pos:line="372" pos:column="13">System</name><op:operator pos:line="372" pos:column="19">.</op:operator><name pos:line="372" pos:column="20">out</name><op:operator pos:line="372" pos:column="23">.</op:operator><name pos:line="372" pos:column="24">println</name></name><argument_list pos:line="372" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	  }</block></function>

	<function><type><specifier pos:line="375" pos:column="9">public</specifier> <name pos:line="375" pos:column="16">void</name></type> <name pos:line="375" pos:column="21">printIndustry</name><parameter_list pos:line="375" pos:column="34">(<param><decl><type><name pos:line="375" pos:column="35">ResultSet</name></type> <name pos:line="375" pos:column="45">rs</name></decl></param>)</parameter_list> <throws pos:line="375" pos:column="49">throws <argument><expr><name pos:line="375" pos:column="56">SQLException</name></expr></argument></throws><block pos:line="375" pos:column="68">{
		<decl_stmt><decl><type><name pos:line="376" pos:column="17">int</name></type> <name pos:line="376" pos:column="21">industrycode</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="377" pos:column="12">String</name></type> <name pos:line="377" pos:column="19">industry</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="378" pos:column="12">int</name></type> <name pos:line="378" pos:column="16">Stability</name></decl>;</decl_stmt>

	    <comment type="line" pos:line="380" pos:column="13">//Ensure we start with first row</comment>

       <expr_stmt><expr><call><name><name pos:line="382" pos:column="8">rs</name><op:operator pos:line="382" pos:column="10">.</op:operator><name pos:line="382" pos:column="11">beforeFirst</name></name><argument_list pos:line="382" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	    <while pos:line="383" pos:column="13">while<condition pos:line="383" pos:column="18">(<expr><call><name><name pos:line="383" pos:column="19">rs</name><op:operator pos:line="383" pos:column="21">.</op:operator><name pos:line="383" pos:column="22">next</name></name><argument_list pos:line="383" pos:column="26">()</argument_list></call></expr>)</condition><block pos:line="383" pos:column="29">{
	      <comment type="line" pos:line="384" pos:column="15">//Retrieve by column name</comment>
	      <expr_stmt><expr><name pos:line="385" pos:column="15">industrycode</name><op:operator pos:line="385" pos:column="27">=</op:operator> <call><name><name pos:line="385" pos:column="29">rs</name><op:operator pos:line="385" pos:column="31">.</op:operator><name pos:line="385" pos:column="32">getInt</name></name><argument_list pos:line="385" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="385" pos:column="39">"industrycode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     <expr_stmt><expr><name pos:line="386" pos:column="14">industry</name> <op:operator pos:line="386" pos:column="23">=</op:operator> <call><name><name pos:line="386" pos:column="25">rs</name><op:operator pos:line="386" pos:column="27">.</op:operator><name pos:line="386" pos:column="28">getString</name></name><argument_list pos:line="386" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="38">"industry"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name pos:line="387" pos:column="15">Stability</name> <op:operator pos:line="387" pos:column="25">=</op:operator> <call><name><name pos:line="387" pos:column="27">rs</name><op:operator pos:line="387" pos:column="29">.</op:operator><name pos:line="387" pos:column="30">getInt</name></name><argument_list pos:line="387" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="37">"Stability"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="line" pos:line="389" pos:column="15">//Display values</comment>
	      <expr_stmt><expr><call><name><name pos:line="390" pos:column="15">System</name><op:operator pos:line="390" pos:column="21">.</op:operator><name pos:line="390" pos:column="22">out</name><op:operator pos:line="390" pos:column="25">.</op:operator><name pos:line="390" pos:column="26">print</name></name><argument_list pos:line="390" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="32">"Row Number="</lit:literal> <op:operator pos:line="390" pos:column="46">+</op:operator> <call><name><name pos:line="390" pos:column="48">rs</name><op:operator pos:line="390" pos:column="50">.</op:operator><name pos:line="390" pos:column="51">getRow</name></name><argument_list pos:line="390" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="391" pos:column="15">System</name><op:operator pos:line="391" pos:column="21">.</op:operator><name pos:line="391" pos:column="22">out</name><op:operator pos:line="391" pos:column="25">.</op:operator><name pos:line="391" pos:column="26">print</name></name><argument_list pos:line="391" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="391" pos:column="32">", industrycode: "</lit:literal> <op:operator pos:line="391" pos:column="51">+</op:operator> <name pos:line="391" pos:column="53">industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="392" pos:column="15">System</name><op:operator pos:line="392" pos:column="21">.</op:operator><name pos:line="392" pos:column="22">out</name><op:operator pos:line="392" pos:column="25">.</op:operator><name pos:line="392" pos:column="26">print</name></name><argument_list pos:line="392" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="392" pos:column="32">", industry: "</lit:literal> <op:operator pos:line="392" pos:column="47">+</op:operator> <name pos:line="392" pos:column="49">industry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="393" pos:column="15">System</name><op:operator pos:line="393" pos:column="21">.</op:operator><name pos:line="393" pos:column="22">out</name><op:operator pos:line="393" pos:column="25">.</op:operator><name pos:line="393" pos:column="26">println</name></name><argument_list pos:line="393" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="34">", Stability: "</lit:literal> <op:operator pos:line="393" pos:column="50">+</op:operator> <name pos:line="393" pos:column="52">Stability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></while>
	    <expr_stmt><expr><call><name><name pos:line="395" pos:column="13">System</name><op:operator pos:line="395" pos:column="19">.</op:operator><name pos:line="395" pos:column="20">out</name><op:operator pos:line="395" pos:column="23">.</op:operator><name pos:line="395" pos:column="24">println</name></name><argument_list pos:line="395" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	  }</block></function>
	<function><type><specifier pos:line="397" pos:column="9">public</specifier> <name pos:line="397" pos:column="16">void</name></type> <name pos:line="397" pos:column="21">printOccupation</name><parameter_list pos:line="397" pos:column="36">(<param><decl><type><name pos:line="397" pos:column="37">ResultSet</name></type> <name pos:line="397" pos:column="47">rs</name></decl></param>)</parameter_list> <throws pos:line="397" pos:column="51">throws <argument><expr><name pos:line="397" pos:column="58">SQLException</name></expr></argument></throws><block pos:line="397" pos:column="70">{
		<decl_stmt><decl><type><name pos:line="398" pos:column="17">int</name></type> <name pos:line="398" pos:column="21">occupationcode</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="399" pos:column="12">String</name></type> <name pos:line="399" pos:column="19">occupation</name></decl>;</decl_stmt>
	   <decl_stmt><decl><type><name pos:line="400" pos:column="12">int</name></type> <name pos:line="400" pos:column="16">Stability</name></decl>;</decl_stmt>

	    <comment type="line" pos:line="402" pos:column="13">//Ensure we start with first row</comment>

        <expr_stmt><expr><call><name><name pos:line="404" pos:column="9">rs</name><op:operator pos:line="404" pos:column="11">.</op:operator><name pos:line="404" pos:column="12">beforeFirst</name></name><argument_list pos:line="404" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	    <while pos:line="405" pos:column="13">while<condition pos:line="405" pos:column="18">(<expr><call><name><name pos:line="405" pos:column="19">rs</name><op:operator pos:line="405" pos:column="21">.</op:operator><name pos:line="405" pos:column="22">next</name></name><argument_list pos:line="405" pos:column="26">()</argument_list></call></expr>)</condition><block pos:line="405" pos:column="29">{
	      <comment type="line" pos:line="406" pos:column="15">//Retrieve by column name</comment>
	      <expr_stmt><expr><name pos:line="407" pos:column="15">occupationcode</name><op:operator pos:line="407" pos:column="29">=</op:operator> <call><name><name pos:line="407" pos:column="31">rs</name><op:operator pos:line="407" pos:column="33">.</op:operator><name pos:line="407" pos:column="34">getInt</name></name><argument_list pos:line="407" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="407" pos:column="41">"occupationcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name pos:line="408" pos:column="15">occupation</name> <op:operator pos:line="408" pos:column="26">=</op:operator> <call><name><name pos:line="408" pos:column="28">rs</name><op:operator pos:line="408" pos:column="30">.</op:operator><name pos:line="408" pos:column="31">getString</name></name><argument_list pos:line="408" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="408" pos:column="41">"occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name pos:line="409" pos:column="15">Stability</name> <op:operator pos:line="409" pos:column="25">=</op:operator> <call><name><name pos:line="409" pos:column="27">rs</name><op:operator pos:line="409" pos:column="29">.</op:operator><name pos:line="409" pos:column="30">getInt</name></name><argument_list pos:line="409" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="409" pos:column="37">"Stability"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <comment type="line" pos:line="411" pos:column="15">//Display values</comment>
	      <expr_stmt><expr><call><name><name pos:line="412" pos:column="15">System</name><op:operator pos:line="412" pos:column="21">.</op:operator><name pos:line="412" pos:column="22">out</name><op:operator pos:line="412" pos:column="25">.</op:operator><name pos:line="412" pos:column="26">print</name></name><argument_list pos:line="412" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="412" pos:column="32">"Row Number="</lit:literal> <op:operator pos:line="412" pos:column="46">+</op:operator> <call><name><name pos:line="412" pos:column="48">rs</name><op:operator pos:line="412" pos:column="50">.</op:operator><name pos:line="412" pos:column="51">getRow</name></name><argument_list pos:line="412" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="413" pos:column="15">System</name><op:operator pos:line="413" pos:column="21">.</op:operator><name pos:line="413" pos:column="22">out</name><op:operator pos:line="413" pos:column="25">.</op:operator><name pos:line="413" pos:column="26">print</name></name><argument_list pos:line="413" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="413" pos:column="32">", occupationcode: "</lit:literal> <op:operator pos:line="413" pos:column="53">+</op:operator> <name pos:line="413" pos:column="55">occupationcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="414" pos:column="15">System</name><op:operator pos:line="414" pos:column="21">.</op:operator><name pos:line="414" pos:column="22">out</name><op:operator pos:line="414" pos:column="25">.</op:operator><name pos:line="414" pos:column="26">print</name></name><argument_list pos:line="414" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="32">", occupation: "</lit:literal> <op:operator pos:line="414" pos:column="49">+</op:operator> <name pos:line="414" pos:column="51">occupation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name pos:line="415" pos:column="15">System</name><op:operator pos:line="415" pos:column="21">.</op:operator><name pos:line="415" pos:column="22">out</name><op:operator pos:line="415" pos:column="25">.</op:operator><name pos:line="415" pos:column="26">println</name></name><argument_list pos:line="415" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="415" pos:column="34">", Stability: "</lit:literal> <op:operator pos:line="415" pos:column="50">+</op:operator> <name pos:line="415" pos:column="52">Stability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></while>
	      <expr_stmt><expr><call><name><name pos:line="417" pos:column="15">System</name><op:operator pos:line="417" pos:column="21">.</op:operator><name pos:line="417" pos:column="22">out</name><op:operator pos:line="417" pos:column="25">.</op:operator><name pos:line="417" pos:column="26">println</name></name><argument_list pos:line="417" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
	  }</block></function>
	<function><type><specifier pos:line="419" pos:column="9">public</specifier> <name pos:line="419" pos:column="16">int</name></type> <name pos:line="419" pos:column="20">getOccupation</name><parameter_list pos:line="419" pos:column="33">(<param><decl><type><name><name pos:line="419" pos:column="34">int</name><index pos:line="419" pos:column="37">[]</index></name></type> <name pos:line="419" pos:column="40">code</name></decl></param>, <param><decl><type><name pos:line="419" pos:column="46">int</name></type> <name pos:line="419" pos:column="50">occupcode</name></decl></param>)</parameter_list>
	    <block pos:line="420" pos:column="13">{
	       <decl_stmt><decl><type><name pos:line="421" pos:column="16">int</name></type> <name pos:line="421" pos:column="20">i</name><init pos:line="421" pos:column="21">=<expr><lit:literal type="number" pos:line="421" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>

	       <for pos:line="423" pos:column="16">for(<init><expr><name pos:line="423" pos:column="20">i</name><op:operator pos:line="423" pos:column="21">=</op:operator><lit:literal type="number" pos:line="423" pos:column="22">0</lit:literal></expr>;</init> <condition><expr><name pos:line="423" pos:column="25">i</name><op:operator pos:line="423" pos:column="26">&lt;</op:operator><lit:literal type="number" pos:line="423" pos:column="27">50</lit:literal></expr>;</condition> <incr><expr><name pos:line="423" pos:column="31">i</name><op:operator pos:line="423" pos:column="32">++</op:operator></expr></incr>)
	       <block pos:line="424" pos:column="16">{

	        <if pos:line="426" pos:column="17">if<condition pos:line="426" pos:column="19">(<expr><name><name pos:line="426" pos:column="20">code</name><index pos:line="426" pos:column="24">[<expr><name pos:line="426" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="426" pos:column="27">==</op:operator><lit:literal type="number" pos:line="426" pos:column="29">0</lit:literal> <op:operator pos:line="426" pos:column="31">||</op:operator> <name pos:line="426" pos:column="34">occupcode</name> <op:operator pos:line="426" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="426" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="426" pos:column="49">
	           <continue pos:line="427" pos:column="20">continue;</continue></then></if>

	        <if pos:line="429" pos:column="17">if<condition pos:line="429" pos:column="19">(<expr><name><name pos:line="429" pos:column="20">code</name><index pos:line="429" pos:column="24">[<expr><name pos:line="429" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="429" pos:column="28">==</op:operator> <name pos:line="429" pos:column="31">occupcode</name></expr>)</condition><then pos:line="429" pos:column="41">
	          <return pos:line="430" pos:column="19">return <expr><name pos:line="430" pos:column="26">i</name></expr>;</return></then></if>
	       }</block></for>
	       <return pos:line="432" pos:column="16">return <expr><name pos:line="432" pos:column="23">i</name></expr>;</return>
	    }</block></function>
	<function><type><specifier pos:line="434" pos:column="9">public</specifier> <name pos:line="434" pos:column="16">int</name></type> <name pos:line="434" pos:column="20">getIndustryCode</name><parameter_list pos:line="434" pos:column="35">(<param><decl><type><name><name pos:line="434" pos:column="36">int</name><index pos:line="434" pos:column="39">[]</index></name></type> <name pos:line="434" pos:column="42">code</name></decl></param>, <param><decl><type><name pos:line="434" pos:column="48">int</name></type> <name pos:line="434" pos:column="52">inccode</name></decl></param>)</parameter_list>
	    <block pos:line="435" pos:column="13">{
			   <decl_stmt><decl><type><name pos:line="436" pos:column="28">int</name></type> <name pos:line="436" pos:column="32">i</name><init pos:line="436" pos:column="33">=<expr><lit:literal type="number" pos:line="436" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
			   <for pos:line="437" pos:column="28">for(<init><expr><name pos:line="437" pos:column="32">i</name><op:operator pos:line="437" pos:column="33">=</op:operator><lit:literal type="number" pos:line="437" pos:column="34">0</lit:literal></expr>;</init> <condition><expr><name pos:line="437" pos:column="37">i</name><op:operator pos:line="437" pos:column="38">&lt;</op:operator><lit:literal type="number" pos:line="437" pos:column="39">50</lit:literal></expr>;</condition> <incr><expr><name pos:line="437" pos:column="43">i</name><op:operator pos:line="437" pos:column="44">++</op:operator></expr></incr>)
			  <block pos:line="438" pos:column="27">{
			      <if pos:line="439" pos:column="31">if<condition pos:line="439" pos:column="33">(<expr><name><name pos:line="439" pos:column="34">code</name><index pos:line="439" pos:column="38">[<expr><name pos:line="439" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="439" pos:column="41">==</op:operator><lit:literal type="number" pos:line="439" pos:column="43">0</lit:literal> <op:operator pos:line="439" pos:column="45">||</op:operator> <name pos:line="439" pos:column="48">inccode</name> <op:operator pos:line="439" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="439" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="439" pos:column="61">
			           <continue pos:line="440" pos:column="36">continue;</continue></then></if>
			      <if pos:line="441" pos:column="31">if<condition pos:line="441" pos:column="33">(<expr><name><name pos:line="441" pos:column="34">code</name><index pos:line="441" pos:column="38">[<expr><name pos:line="441" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="441" pos:column="42">==</op:operator> <name pos:line="441" pos:column="45">inccode</name></expr>)</condition><then pos:line="441" pos:column="53">
			          <return pos:line="442" pos:column="35">return <expr><name pos:line="442" pos:column="42">i</name></expr>;</return></then></if>
			   }</block></for>
			       <return pos:line="444" pos:column="32">return <expr><name pos:line="444" pos:column="39">i</name></expr>;</return>
	    }</block></function>
}</block></class>
</unit>
