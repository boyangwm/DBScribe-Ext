<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\core\server\XincoCoreGroupServer.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2009 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoCoreGroupServer
 *
 * Description:     group
 *
 * Original Author: Alexander Manes
 * Date:            2004
 *
 * Modifications:
 *
 * Who?             When?             What?
 * -                -                 -
 *
 *************************************************************
 */</comment>

<package pos:line="37" pos:column="1">package <name><name pos:line="37" pos:column="9">com</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">bluecubs</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">xinco</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">core</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">server</name></name>;</package>

<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">util</name><op:operator pos:line="39" pos:column="17">.</op:operator><name pos:line="39" pos:column="18">Vector</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">sql</name></name>.*;</import>

<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">com</name><op:operator pos:line="42" pos:column="11">.</op:operator><name pos:line="42" pos:column="12">bluecubs</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">xinco</name><op:operator pos:line="42" pos:column="26">.</op:operator><name pos:line="42" pos:column="27">core</name></name>.*;</import>

<class><specifier pos:line="44" pos:column="1">public</specifier> class <name pos:line="44" pos:column="14">XincoCoreGroupServer</name> <super><extends pos:line="44" pos:column="35">extends <name pos:line="44" pos:column="43">XincoCoreGroup</name></extends></super> <block pos:line="44" pos:column="58">{
    
    <comment type="line" pos:line="46" pos:column="5">//create group object for data structures</comment>
    <constructor><specifier pos:line="47" pos:column="5">public</specifier> <name pos:line="47" pos:column="12">XincoCoreGroupServer</name><parameter_list pos:line="47" pos:column="32">(<param><decl><type><name pos:line="47" pos:column="33">int</name></type> <name pos:line="47" pos:column="37">attrID</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="45">XincoDBManager</name></type> <name pos:line="47" pos:column="60">DBM</name></decl></param>)</parameter_list> <throws pos:line="47" pos:column="65">throws <argument><expr><name pos:line="47" pos:column="72">XincoException</name></expr></argument></throws> <block pos:line="47" pos:column="87">{
        <try pos:line="48" pos:column="9">try <block pos:line="48" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">Statement</name></type> <name pos:line="49" pos:column="23">stmt</name> <init pos:line="49" pos:column="28">= <expr><call><name><name pos:line="49" pos:column="30">DBM</name><op:operator pos:line="49" pos:column="33">.</op:operator><name pos:line="49" pos:column="34">con</name><op:operator pos:line="49" pos:column="37">.</op:operator><name pos:line="49" pos:column="38">createStatement</name></name><argument_list pos:line="49" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">ResultSet</name></type> <name pos:line="50" pos:column="23">rs</name> <init pos:line="50" pos:column="26">= <expr><call><name><name pos:line="50" pos:column="28">stmt</name><op:operator pos:line="50" pos:column="32">.</op:operator><name pos:line="50" pos:column="33">executeQuery</name></name><argument_list pos:line="50" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="46">"SELECT * FROM xinco_core_group WHERE id="</lit:literal> <op:operator pos:line="50" pos:column="89">+</op:operator> <name pos:line="50" pos:column="91">attrID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="51" pos:column="13">//throw exception if no result found</comment>
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">int</name></type> <name pos:line="52" pos:column="17">RowCount</name> <init pos:line="52" pos:column="26">= <expr><lit:literal type="number" pos:line="52" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="53" pos:column="13">while <condition pos:line="53" pos:column="19">(<expr><call><name><name pos:line="53" pos:column="20">rs</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">next</name></name><argument_list pos:line="53" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="53" pos:column="31">{
                <expr_stmt><expr><name pos:line="54" pos:column="17">RowCount</name><op:operator pos:line="54" pos:column="25">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">setId</name><argument_list pos:line="55" pos:column="22">(<argument><expr><call><name><name pos:line="55" pos:column="23">rs</name><op:operator pos:line="55" pos:column="25">.</op:operator><name pos:line="55" pos:column="26">getInt</name></name><argument_list pos:line="55" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="33">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">setDesignation</name><argument_list pos:line="56" pos:column="31">(<argument><expr><call><name><name pos:line="56" pos:column="32">rs</name><op:operator pos:line="56" pos:column="34">.</op:operator><name pos:line="56" pos:column="35">getString</name></name><argument_list pos:line="56" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="45">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">setStatus_number</name><argument_list pos:line="57" pos:column="33">(<argument><expr><call><name><name pos:line="57" pos:column="34">rs</name><op:operator pos:line="57" pos:column="36">.</op:operator><name pos:line="57" pos:column="37">getInt</name></name><argument_list pos:line="57" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="44">"status_number"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><name pos:line="59" pos:column="17">RowCount</name> <op:operator pos:line="59" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="59" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="59" pos:column="30"> <block pos:line="59" pos:column="31">{
                <throw pos:line="60" pos:column="17">throw <expr><op:operator pos:line="60" pos:column="23">new</op:operator> <call><name pos:line="60" pos:column="27">XincoException</name><argument_list pos:line="60" pos:column="41">()</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="62" pos:column="13">stmt</name><op:operator pos:line="62" pos:column="17">.</op:operator><name pos:line="62" pos:column="18">close</name></name><argument_list pos:line="62" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="63" pos:column="11">catch <parameter_list pos:line="63" pos:column="17">(<param><decl><type><name pos:line="63" pos:column="18">Exception</name></type> <name pos:line="63" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="31">{
            <throw pos:line="64" pos:column="13">throw <expr><op:operator pos:line="64" pos:column="19">new</op:operator> <call><name pos:line="64" pos:column="23">XincoException</name><argument_list pos:line="64" pos:column="37">(<argument><expr><call><name><name pos:line="64" pos:column="38">e</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">getMessage</name></name><argument_list pos:line="64" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></constructor>
    
    <comment type="line" pos:line="68" pos:column="5">//create group object for data structures</comment>
    <constructor><specifier pos:line="69" pos:column="5">public</specifier> <name pos:line="69" pos:column="12">XincoCoreGroupServer</name><parameter_list pos:line="69" pos:column="32">(<param><decl><type><name pos:line="69" pos:column="33">int</name></type> <name pos:line="69" pos:column="37">attrID</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="45">String</name></type> <name pos:line="69" pos:column="52">attrD</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="59">int</name></type> <name pos:line="69" pos:column="63">attrSN</name></decl></param>)</parameter_list> <throws pos:line="69" pos:column="71">throws <argument><expr><name pos:line="69" pos:column="78">XincoException</name></expr></argument></throws> <block pos:line="69" pos:column="93">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">setId</name><argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">attrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">setDesignation</name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">attrD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">setStatus_number</name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">attrSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="line" pos:line="75" pos:column="5">//write to db</comment>
    <function><type><specifier pos:line="76" pos:column="5">public</specifier> <name pos:line="76" pos:column="12">int</name></type> <name pos:line="76" pos:column="16">write2DB</name><parameter_list pos:line="76" pos:column="24">(<param><decl><type><name pos:line="76" pos:column="25">XincoDBManager</name></type> <name pos:line="76" pos:column="40">DBM</name></decl></param>)</parameter_list> <throws pos:line="76" pos:column="45">throws <argument><expr><name pos:line="76" pos:column="52">XincoException</name></expr></argument></throws><block pos:line="76" pos:column="66">{
        <try pos:line="77" pos:column="9">try <block pos:line="77" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">Statement</name></type> <name pos:line="78" pos:column="23">stmt</name></decl>;</decl_stmt>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><call><name pos:line="79" pos:column="17">getId</name><argument_list pos:line="79" pos:column="22">()</argument_list></call> <op:operator pos:line="79" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="79" pos:column="29"> <block pos:line="79" pos:column="30">{
                <decl_stmt><decl><type><name pos:line="80" pos:column="17">XincoCoreAuditServer</name></type> <name pos:line="80" pos:column="38">audit</name><init pos:line="80" pos:column="43">= <expr><op:operator pos:line="80" pos:column="45">new</op:operator> <call><name pos:line="80" pos:column="49">XincoCoreAuditServer</name><argument_list pos:line="80" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="81" pos:column="17">audit</name><op:operator pos:line="81" pos:column="22">.</op:operator><name pos:line="81" pos:column="23">updateAuditTrail</name></name><argument_list pos:line="81" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="40">"xinco_core_group"</lit:literal></expr></argument>,<argument><expr><op:operator pos:line="81" pos:column="59">new</op:operator> <name><name pos:line="81" pos:column="63">String</name> <index pos:line="81" pos:column="70">[]</index></name> <block pos:line="81" pos:column="73">{<expr><lit:literal type="string" pos:line="81" pos:column="74">"id ="</lit:literal><op:operator pos:line="81" pos:column="80">+</op:operator><call><name pos:line="81" pos:column="81">getId</name><argument_list pos:line="81" pos:column="86">()</argument_list></call></expr>}</block></expr></argument>,
                        <argument><expr><name pos:line="82" pos:column="25">DBM</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="82" pos:column="29">"audit.coregroup.change"</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="82" pos:column="54">this</name><op:operator pos:line="82" pos:column="58">.</op:operator><name pos:line="82" pos:column="59">getChangerID</name></name><argument_list pos:line="82" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="83" pos:column="17">stmt</name> <op:operator pos:line="83" pos:column="22">=</op:operator> <call><name><name pos:line="83" pos:column="24">DBM</name><op:operator pos:line="83" pos:column="27">.</op:operator><name pos:line="83" pos:column="28">con</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">createStatement</name></name><argument_list pos:line="83" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="84" pos:column="17">stmt</name><op:operator pos:line="84" pos:column="21">.</op:operator><name pos:line="84" pos:column="22">executeUpdate</name></name><argument_list pos:line="84" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="36">"UPDATE xinco_core_group SET designation='"</lit:literal> <op:operator pos:line="84" pos:column="80">+</op:operator> <call><name pos:line="84" pos:column="82">getDesignation</name><argument_list pos:line="84" pos:column="96">()</argument_list></call><op:operator pos:line="84" pos:column="98">.</op:operator><call><name pos:line="84" pos:column="99">replaceAll</name><argument_list pos:line="84" pos:column="109">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="110">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="84" pos:column="114">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="84" pos:column="123">+</op:operator> <lit:literal type="string" pos:line="84" pos:column="125">"', status_number="</lit:literal> <op:operator pos:line="84" pos:column="145">+</op:operator> <call><name pos:line="84" pos:column="147">getStatus_number</name><argument_list pos:line="84" pos:column="163">()</argument_list></call> <op:operator pos:line="84" pos:column="166">+</op:operator> <lit:literal type="string" pos:line="84" pos:column="168">" WHERE id="</lit:literal> <op:operator pos:line="84" pos:column="181">+</op:operator> <call><name pos:line="84" pos:column="183">getId</name><argument_list pos:line="84" pos:column="188">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">stmt</name><op:operator pos:line="85" pos:column="21">.</op:operator><name pos:line="85" pos:column="22">close</name></name><argument_list pos:line="85" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="86" pos:column="15">else <block pos:line="86" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="87" pos:column="17">setId</name><argument_list pos:line="87" pos:column="22">(<argument><expr><call><name><name pos:line="87" pos:column="23">DBM</name><op:operator pos:line="87" pos:column="26">.</op:operator><name pos:line="87" pos:column="27">getNewID</name></name><argument_list pos:line="87" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="36">"xinco_core_group"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="88" pos:column="17">stmt</name> <op:operator pos:line="88" pos:column="22">=</op:operator> <call><name><name pos:line="88" pos:column="24">DBM</name><op:operator pos:line="88" pos:column="27">.</op:operator><name pos:line="88" pos:column="28">con</name><op:operator pos:line="88" pos:column="31">.</op:operator><name pos:line="88" pos:column="32">createStatement</name></name><argument_list pos:line="88" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="89" pos:column="17">stmt</name><op:operator pos:line="89" pos:column="21">.</op:operator><name pos:line="89" pos:column="22">executeUpdate</name></name><argument_list pos:line="89" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="36">"INSERT INTO xinco_core_group VALUES ("</lit:literal> <op:operator pos:line="89" pos:column="76">+</op:operator> <call><name pos:line="89" pos:column="78">getId</name><argument_list pos:line="89" pos:column="83">()</argument_list></call> <op:operator pos:line="89" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="89" pos:column="88">", '"</lit:literal> <op:operator pos:line="89" pos:column="94">+</op:operator> <call><name pos:line="89" pos:column="96">getDesignation</name><argument_list pos:line="89" pos:column="110">()</argument_list></call><op:operator pos:line="89" pos:column="112">.</op:operator><call><name pos:line="89" pos:column="113">replaceAll</name><argument_list pos:line="89" pos:column="123">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="124">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="89" pos:column="128">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="137">+</op:operator> <lit:literal type="string" pos:line="89" pos:column="139">"', "</lit:literal> <op:operator pos:line="89" pos:column="145">+</op:operator> <call><name pos:line="89" pos:column="147">getStatus_number</name><argument_list pos:line="89" pos:column="163">()</argument_list></call> <op:operator pos:line="89" pos:column="166">+</op:operator> <lit:literal type="string" pos:line="89" pos:column="168">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="90" pos:column="17">stmt</name><op:operator pos:line="90" pos:column="21">.</op:operator><name pos:line="90" pos:column="22">close</name></name><argument_list pos:line="90" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">DBM</name><op:operator pos:line="92" pos:column="16">.</op:operator><name pos:line="92" pos:column="17">con</name><op:operator pos:line="92" pos:column="20">.</op:operator><name pos:line="92" pos:column="21">commit</name></name><argument_list pos:line="92" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="93" pos:column="11">catch <parameter_list pos:line="93" pos:column="17">(<param><decl><type><name pos:line="93" pos:column="18">Exception</name></type> <name pos:line="93" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="31">{
            <try pos:line="94" pos:column="13">try <block pos:line="94" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="95" pos:column="17">DBM</name><op:operator pos:line="95" pos:column="20">.</op:operator><name pos:line="95" pos:column="21">con</name><op:operator pos:line="95" pos:column="24">.</op:operator><name pos:line="95" pos:column="25">rollback</name></name><argument_list pos:line="95" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="96" pos:column="15">catch <parameter_list pos:line="96" pos:column="21">(<param><decl><type><name pos:line="96" pos:column="22">Exception</name></type> <name pos:line="96" pos:column="32">erollback</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="43">{
            }</block></catch></try>
            <throw pos:line="98" pos:column="13">throw <expr><op:operator pos:line="98" pos:column="19">new</op:operator> <call><name pos:line="98" pos:column="23">XincoException</name><argument_list pos:line="98" pos:column="37">()</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return pos:line="100" pos:column="9">return <expr><call><name pos:line="100" pos:column="16">getId</name><argument_list pos:line="100" pos:column="21">()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="line" pos:line="103" pos:column="5">//create complete list of groups</comment>
    <function><type><specifier pos:line="104" pos:column="5">public</specifier> <specifier pos:line="104" pos:column="12">static</specifier> <name pos:line="104" pos:column="19">Vector</name></type> <name pos:line="104" pos:column="26">getXincoCoreGroups</name><parameter_list pos:line="104" pos:column="44">(<param><decl><type><name pos:line="104" pos:column="45">XincoDBManager</name></type> <name pos:line="104" pos:column="60">DBM</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="65">{
        <decl_stmt><decl><type><name pos:line="105" pos:column="9">Vector</name></type> <name pos:line="105" pos:column="16">coreGroups</name> <init pos:line="105" pos:column="27">= <expr><op:operator pos:line="105" pos:column="29">new</op:operator> <call><name pos:line="105" pos:column="33">Vector</name><argument_list pos:line="105" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try pos:line="106" pos:column="9">try <block pos:line="106" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">Statement</name></type> <name pos:line="107" pos:column="23">stmt</name> <init pos:line="107" pos:column="28">= <expr><call><name><name pos:line="107" pos:column="30">DBM</name><op:operator pos:line="107" pos:column="33">.</op:operator><name pos:line="107" pos:column="34">con</name><op:operator pos:line="107" pos:column="37">.</op:operator><name pos:line="107" pos:column="38">createStatement</name></name><argument_list pos:line="107" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="108" pos:column="13">ResultSet</name></type> <name pos:line="108" pos:column="23">rs</name> <init pos:line="108" pos:column="26">= <expr><call><name><name pos:line="108" pos:column="28">stmt</name><op:operator pos:line="108" pos:column="32">.</op:operator><name pos:line="108" pos:column="33">executeQuery</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="46">"SELECT * FROM xinco_core_group ORDER BY designation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="109" pos:column="13">while <condition pos:line="109" pos:column="19">(<expr><call><name><name pos:line="109" pos:column="20">rs</name><op:operator pos:line="109" pos:column="22">.</op:operator><name pos:line="109" pos:column="23">next</name></name><argument_list pos:line="109" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="109" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="110" pos:column="17">coreGroups</name><op:operator pos:line="110" pos:column="27">.</op:operator><name pos:line="110" pos:column="28">addElement</name></name><argument_list pos:line="110" pos:column="38">(<argument><expr><op:operator pos:line="110" pos:column="39">new</op:operator> <call><name pos:line="110" pos:column="43">XincoCoreGroupServer</name><argument_list pos:line="110" pos:column="63">(<argument><expr><call><name><name pos:line="110" pos:column="64">rs</name><op:operator pos:line="110" pos:column="66">.</op:operator><name pos:line="110" pos:column="67">getInt</name></name><argument_list pos:line="110" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="74">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="110" pos:column="81">rs</name><op:operator pos:line="110" pos:column="83">.</op:operator><name pos:line="110" pos:column="84">getString</name></name><argument_list pos:line="110" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="94">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="110" pos:column="110">rs</name><op:operator pos:line="110" pos:column="112">.</op:operator><name pos:line="110" pos:column="113">getInt</name></name><argument_list pos:line="110" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="120">"status_number"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name pos:line="112" pos:column="13">stmt</name><op:operator pos:line="112" pos:column="17">.</op:operator><name pos:line="112" pos:column="18">close</name></name><argument_list pos:line="112" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="113" pos:column="11">catch <parameter_list pos:line="113" pos:column="17">(<param><decl><type><name pos:line="113" pos:column="18">Exception</name></type> <name pos:line="113" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">coreGroups</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">removeAllElements</name></name><argument_list pos:line="114" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="116" pos:column="9">return <expr><name pos:line="116" pos:column="16">coreGroups</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
