<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\index\XincoIndexer.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2009 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoIndexer
 *
 * Description:     handle document indexing 
 *
 * Original Author: Alexander Manes
 * Date:            2004/10/31
 *
 * Modifications:
 * 
 * Who?             When?             What?
 * -                -                 -
 *
 *************************************************************
 */</comment>
<package pos:line="36" pos:column="1">package <name><name pos:line="36" pos:column="9">com</name><op:operator pos:line="36" pos:column="12">.</op:operator><name pos:line="36" pos:column="13">bluecubs</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">xinco</name><op:operator pos:line="36" pos:column="27">.</op:operator><name pos:line="36" pos:column="28">index</name></name>;</package>

<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">java</name><op:operator pos:line="38" pos:column="12">.</op:operator><name pos:line="38" pos:column="13">util</name><op:operator pos:line="38" pos:column="17">.</op:operator><name pos:line="38" pos:column="18">Vector</name></name>;</import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">org</name><op:operator pos:line="39" pos:column="11">.</op:operator><name pos:line="39" pos:column="12">apache</name><op:operator pos:line="39" pos:column="18">.</op:operator><name pos:line="39" pos:column="19">lucene</name><op:operator pos:line="39" pos:column="25">.</op:operator><name pos:line="39" pos:column="26">analysis</name><op:operator pos:line="39" pos:column="34">.</op:operator><name pos:line="39" pos:column="35">standard</name><op:operator pos:line="39" pos:column="43">.</op:operator><name pos:line="39" pos:column="44">StandardAnalyzer</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">org</name><op:operator pos:line="40" pos:column="11">.</op:operator><name pos:line="40" pos:column="12">apache</name><op:operator pos:line="40" pos:column="18">.</op:operator><name pos:line="40" pos:column="19">lucene</name><op:operator pos:line="40" pos:column="25">.</op:operator><name pos:line="40" pos:column="26">index</name></name>.*;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">org</name><op:operator pos:line="41" pos:column="11">.</op:operator><name pos:line="41" pos:column="12">apache</name><op:operator pos:line="41" pos:column="18">.</op:operator><name pos:line="41" pos:column="19">lucene</name><op:operator pos:line="41" pos:column="25">.</op:operator><name pos:line="41" pos:column="26">search</name></name>.*;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">org</name><op:operator pos:line="42" pos:column="11">.</op:operator><name pos:line="42" pos:column="12">apache</name><op:operator pos:line="42" pos:column="18">.</op:operator><name pos:line="42" pos:column="19">lucene</name><op:operator pos:line="42" pos:column="25">.</op:operator><name pos:line="42" pos:column="26">queryParser</name><op:operator pos:line="42" pos:column="37">.</op:operator><name pos:line="42" pos:column="38">QueryParser</name></name>;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">org</name><op:operator pos:line="43" pos:column="11">.</op:operator><name pos:line="43" pos:column="12">apache</name><op:operator pos:line="43" pos:column="18">.</op:operator><name pos:line="43" pos:column="19">lucene</name><op:operator pos:line="43" pos:column="25">.</op:operator><name pos:line="43" pos:column="26">analysis</name></name>.*;</import>
<import pos:line="44" pos:column="1">import <name><name pos:line="44" pos:column="8">com</name><op:operator pos:line="44" pos:column="11">.</op:operator><name pos:line="44" pos:column="12">bluecubs</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">xinco</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">core</name></name>.*;</import>
<import pos:line="45" pos:column="1">import <name><name pos:line="45" pos:column="8">com</name><op:operator pos:line="45" pos:column="11">.</op:operator><name pos:line="45" pos:column="12">bluecubs</name><op:operator pos:line="45" pos:column="20">.</op:operator><name pos:line="45" pos:column="21">xinco</name><op:operator pos:line="45" pos:column="26">.</op:operator><name pos:line="45" pos:column="27">core</name><op:operator pos:line="45" pos:column="31">.</op:operator><name pos:line="45" pos:column="32">server</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="47" pos:column="1">/**
 * This class handles document indexing for xinco.
 * Edit configuration values in context.xml
 */</comment>
<class><specifier pos:line="51" pos:column="1">public</specifier> class <name pos:line="51" pos:column="14">XincoIndexer</name> <block pos:line="51" pos:column="27">{

    <function><type><specifier pos:line="53" pos:column="5">public</specifier> <specifier pos:line="53" pos:column="12">static</specifier> <specifier pos:line="53" pos:column="19">synchronized</specifier> <name pos:line="53" pos:column="32">boolean</name></type> <name pos:line="53" pos:column="40">indexXincoCoreData</name><parameter_list pos:line="53" pos:column="58">(<param><decl><type><name pos:line="53" pos:column="59">XincoCoreData</name></type> <name pos:line="53" pos:column="73">d</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="76">boolean</name></type> <name pos:line="53" pos:column="84">index_content</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="99">XincoDBManager</name></type> <name pos:line="53" pos:column="114">dbm</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="119">{

        <decl_stmt><decl><type><name pos:line="55" pos:column="9">IndexWriter</name></type> <name pos:line="55" pos:column="21">writer</name> <init pos:line="55" pos:column="28">= <expr><lit:literal type="null" pos:line="55" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>

        <try pos:line="57" pos:column="9">try <block pos:line="57" pos:column="13">{

            <comment type="line" pos:line="59" pos:column="13">//check if document exists in index and delete</comment>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">XincoIndexer</name><op:operator pos:line="60" pos:column="25">.</op:operator><name pos:line="60" pos:column="26">removeXincoCoreData</name></name><argument_list pos:line="60" pos:column="45">(<argument><expr><name pos:line="60" pos:column="46">d</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="49">dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="62" pos:column="13">//add document to index</comment>
            <try pos:line="63" pos:column="13">try <block pos:line="63" pos:column="17">{
                <expr_stmt><expr><name pos:line="64" pos:column="17">writer</name> <op:operator pos:line="64" pos:column="24">=</op:operator> <op:operator pos:line="64" pos:column="26">new</op:operator> <call><name pos:line="64" pos:column="30">IndexWriter</name><argument_list pos:line="64" pos:column="41">(<argument><expr><name><name pos:line="64" pos:column="42">dbm</name><op:operator pos:line="64" pos:column="45">.</op:operator><name pos:line="64" pos:column="46">config</name><op:operator pos:line="64" pos:column="52">.</op:operator><name pos:line="64" pos:column="53">FileIndexPath</name></name></expr></argument>, <argument><expr><op:operator pos:line="64" pos:column="68">new</op:operator> <call><name pos:line="64" pos:column="72">StandardAnalyzer</name><argument_list pos:line="64" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="64" pos:column="92">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="65" pos:column="15">catch <parameter_list pos:line="65" pos:column="21">(<param><decl><type><name pos:line="65" pos:column="22">Exception</name></type> <name pos:line="65" pos:column="32">ie</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="36">{
                <expr_stmt><expr><name pos:line="66" pos:column="17">writer</name> <op:operator pos:line="66" pos:column="24">=</op:operator> <op:operator pos:line="66" pos:column="26">new</op:operator> <call><name pos:line="66" pos:column="30">IndexWriter</name><argument_list pos:line="66" pos:column="41">(<argument><expr><name><name pos:line="66" pos:column="42">dbm</name><op:operator pos:line="66" pos:column="45">.</op:operator><name pos:line="66" pos:column="46">config</name><op:operator pos:line="66" pos:column="52">.</op:operator><name pos:line="66" pos:column="53">FileIndexPath</name></name></expr></argument>, <argument><expr><op:operator pos:line="66" pos:column="68">new</op:operator> <call><name pos:line="66" pos:column="72">StandardAnalyzer</name><argument_list pos:line="66" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="66" pos:column="92">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">writer</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">addDocument</name></name><argument_list pos:line="68" pos:column="31">(<argument><expr><call><name><name pos:line="68" pos:column="32">XincoDocument</name><op:operator pos:line="68" pos:column="45">.</op:operator><name pos:line="68" pos:column="46">getXincoDocument</name></name><argument_list pos:line="68" pos:column="62">(<argument><expr><name pos:line="68" pos:column="63">d</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="66">index_content</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="81">dbm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="69" pos:column="13">//writer.optimize();</comment>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">writer</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">close</name></name><argument_list pos:line="70" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch pos:line="72" pos:column="11">catch <parameter_list pos:line="72" pos:column="17">(<param><decl><type><name pos:line="72" pos:column="18">Exception</name></type> <name pos:line="72" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="31">{
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><name pos:line="73" pos:column="17">writer</name> <op:operator pos:line="73" pos:column="24">!=</op:operator> <lit:literal type="null" pos:line="73" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="73" pos:column="32"> <block pos:line="73" pos:column="33">{
                <try pos:line="74" pos:column="17">try <block pos:line="74" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="75" pos:column="21">writer</name><op:operator pos:line="75" pos:column="27">.</op:operator><name pos:line="75" pos:column="28">close</name></name><argument_list pos:line="75" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="76" pos:column="19">catch <parameter_list pos:line="76" pos:column="25">(<param><decl><type><name pos:line="76" pos:column="26">Exception</name></type> <name pos:line="76" pos:column="36">we</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="40">{
                }</block></catch></try>
            }</block></then></if>
            <return pos:line="79" pos:column="13">return <expr><lit:literal type="boolean" pos:line="79" pos:column="20">false</lit:literal></expr>;</return>
        }</block></catch></try>

        <return pos:line="82" pos:column="9">return <expr><lit:literal type="boolean" pos:line="82" pos:column="16">true</lit:literal></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="85" pos:column="5">public</specifier> <specifier pos:line="85" pos:column="12">static</specifier> <specifier pos:line="85" pos:column="19">synchronized</specifier> <name pos:line="85" pos:column="32">boolean</name></type> <name pos:line="85" pos:column="40">removeXincoCoreData</name><parameter_list pos:line="85" pos:column="59">(<param><decl><type><name pos:line="85" pos:column="60">XincoCoreData</name></type> <name pos:line="85" pos:column="74">d</name></decl></param>, <param><decl><type><name pos:line="85" pos:column="77">XincoDBManager</name></type> <name pos:line="85" pos:column="92">dbm</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="97">{

        <decl_stmt><decl><type><name pos:line="87" pos:column="9">IndexReader</name></type> <name pos:line="87" pos:column="21">reader</name> <init pos:line="87" pos:column="28">= <expr><lit:literal type="null" pos:line="87" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="89" pos:column="9">//check if document exists in index and delete</comment>
        <try pos:line="90" pos:column="9">try <block pos:line="90" pos:column="13">{
            <expr_stmt><expr><name pos:line="91" pos:column="13">reader</name> <op:operator pos:line="91" pos:column="20">=</op:operator> <call><name><name pos:line="91" pos:column="22">IndexReader</name><op:operator pos:line="91" pos:column="33">.</op:operator><name pos:line="91" pos:column="34">open</name></name><argument_list pos:line="91" pos:column="38">(<argument><expr><name><name pos:line="91" pos:column="39">dbm</name><op:operator pos:line="91" pos:column="42">.</op:operator><name pos:line="91" pos:column="43">config</name><op:operator pos:line="91" pos:column="49">.</op:operator><name pos:line="91" pos:column="50">FileIndexPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">reader</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">delete</name></name><argument_list pos:line="92" pos:column="26">(<argument><expr><op:operator pos:line="92" pos:column="27">new</op:operator> <call><name pos:line="92" pos:column="31">Term</name><argument_list pos:line="92" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="36">"id"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="42">""</lit:literal> <op:operator pos:line="92" pos:column="45">+</op:operator> <call><name><name pos:line="92" pos:column="47">d</name><op:operator pos:line="92" pos:column="48">.</op:operator><name pos:line="92" pos:column="49">getId</name></name><argument_list pos:line="92" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">reader</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">close</name></name><argument_list pos:line="93" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="94" pos:column="11">catch <parameter_list pos:line="94" pos:column="17">(<param><decl><type><name pos:line="94" pos:column="18">Exception</name></type> <name pos:line="94" pos:column="28">re</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="32">{
            <if pos:line="95" pos:column="13">if <condition pos:line="95" pos:column="16">(<expr><name pos:line="95" pos:column="17">reader</name> <op:operator pos:line="95" pos:column="24">!=</op:operator> <lit:literal type="null" pos:line="95" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="95" pos:column="32"> <block pos:line="95" pos:column="33">{
                <try pos:line="96" pos:column="17">try <block pos:line="96" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="97" pos:column="21">reader</name><op:operator pos:line="97" pos:column="27">.</op:operator><name pos:line="97" pos:column="28">close</name></name><argument_list pos:line="97" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="98" pos:column="19">catch <parameter_list pos:line="98" pos:column="25">(<param><decl><type><name pos:line="98" pos:column="26">Exception</name></type> <name pos:line="98" pos:column="36">re2</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="41">{
                }</block></catch></try>
            }</block></then></if>
            <return pos:line="101" pos:column="13">return <expr><lit:literal type="boolean" pos:line="101" pos:column="20">false</lit:literal></expr>;</return>
        }</block></catch></try>

        <return pos:line="104" pos:column="9">return <expr><lit:literal type="boolean" pos:line="104" pos:column="16">true</lit:literal></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="107" pos:column="5">public</specifier> <specifier pos:line="107" pos:column="12">static</specifier> <specifier pos:line="107" pos:column="19">synchronized</specifier> <name pos:line="107" pos:column="32">boolean</name></type> <name pos:line="107" pos:column="40">optimizeIndex</name><parameter_list pos:line="107" pos:column="53">(<param><decl><type><name pos:line="107" pos:column="54">XincoDBManager</name></type> <name pos:line="107" pos:column="69">dbm</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="74">{

        <decl_stmt><decl><type><name pos:line="109" pos:column="9">IndexWriter</name></type> <name pos:line="109" pos:column="21">writer</name> <init pos:line="109" pos:column="28">= <expr><lit:literal type="null" pos:line="109" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>

        <try pos:line="111" pos:column="9">try <block pos:line="111" pos:column="13">{

            <comment type="line" pos:line="113" pos:column="13">//optimize index</comment>
            <expr_stmt><expr><name pos:line="114" pos:column="13">writer</name> <op:operator pos:line="114" pos:column="20">=</op:operator> <op:operator pos:line="114" pos:column="22">new</op:operator> <call><name pos:line="114" pos:column="26">IndexWriter</name><argument_list pos:line="114" pos:column="37">(<argument><expr><name><name pos:line="114" pos:column="38">dbm</name><op:operator pos:line="114" pos:column="41">.</op:operator><name pos:line="114" pos:column="42">config</name><op:operator pos:line="114" pos:column="48">.</op:operator><name pos:line="114" pos:column="49">FileIndexPath</name></name></expr></argument>, <argument><expr><op:operator pos:line="114" pos:column="64">new</op:operator> <call><name pos:line="114" pos:column="68">StandardAnalyzer</name><argument_list pos:line="114" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="114" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">writer</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">optimize</name></name><argument_list pos:line="115" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">writer</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">close</name></name><argument_list pos:line="116" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch pos:line="118" pos:column="11">catch <parameter_list pos:line="118" pos:column="17">(<param><decl><type><name pos:line="118" pos:column="18">Exception</name></type> <name pos:line="118" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="31">{
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><name pos:line="119" pos:column="17">writer</name> <op:operator pos:line="119" pos:column="24">!=</op:operator> <lit:literal type="null" pos:line="119" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="119" pos:column="32"> <block pos:line="119" pos:column="33">{
                <try pos:line="120" pos:column="17">try <block pos:line="120" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="121" pos:column="21">writer</name><op:operator pos:line="121" pos:column="27">.</op:operator><name pos:line="121" pos:column="28">close</name></name><argument_list pos:line="121" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="122" pos:column="19">catch <parameter_list pos:line="122" pos:column="25">(<param><decl><type><name pos:line="122" pos:column="26">Exception</name></type> <name pos:line="122" pos:column="36">we</name></decl></param>)</parameter_list> <block pos:line="122" pos:column="40">{
                }</block></catch></try>
            }</block></then></if>
            <return pos:line="125" pos:column="13">return <expr><lit:literal type="boolean" pos:line="125" pos:column="20">false</lit:literal></expr>;</return>
        }</block></catch></try>

        <return pos:line="128" pos:column="9">return <expr><lit:literal type="boolean" pos:line="128" pos:column="16">true</lit:literal></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="131" pos:column="5">public</specifier> <specifier pos:line="131" pos:column="12">static</specifier> <specifier pos:line="131" pos:column="19">synchronized</specifier> <name pos:line="131" pos:column="32">Vector</name></type> <name pos:line="131" pos:column="39">findXincoCoreData</name><parameter_list pos:line="131" pos:column="56">(<param><decl><type><name pos:line="131" pos:column="57">String</name></type> <name pos:line="131" pos:column="64">s</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="67">int</name></type> <name pos:line="131" pos:column="71">l</name></decl></param>, <param><decl><type><name pos:line="131" pos:column="74">XincoDBManager</name></type> <name pos:line="131" pos:column="89">dbm</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="94">{

        <decl_stmt><decl><type><name pos:line="133" pos:column="9">int</name></type> <name pos:line="133" pos:column="13">i</name> <init pos:line="133" pos:column="15">= <expr><lit:literal type="number" pos:line="133" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="134" pos:column="9">Vector</name></type> <name pos:line="134" pos:column="16">v</name> <init pos:line="134" pos:column="18">= <expr><op:operator pos:line="134" pos:column="20">new</op:operator> <call><name pos:line="134" pos:column="24">Vector</name><argument_list pos:line="134" pos:column="30">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="135" pos:column="9">Searcher</name></type> <name pos:line="135" pos:column="18">searcher</name> <init pos:line="135" pos:column="27">= <expr><lit:literal type="null" pos:line="135" pos:column="29">null</lit:literal></expr></init></decl>;</decl_stmt>

        <try pos:line="137" pos:column="9">try <block pos:line="137" pos:column="13">{

            <expr_stmt><expr><name pos:line="139" pos:column="13">searcher</name> <op:operator pos:line="139" pos:column="22">=</op:operator> <op:operator pos:line="139" pos:column="24">new</op:operator> <call><name pos:line="139" pos:column="28">IndexSearcher</name><argument_list pos:line="139" pos:column="41">(<argument><expr><name><name pos:line="139" pos:column="42">dbm</name><op:operator pos:line="139" pos:column="45">.</op:operator><name pos:line="139" pos:column="46">config</name><op:operator pos:line="139" pos:column="52">.</op:operator><name pos:line="139" pos:column="53">FileIndexPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="140" pos:column="13">Analyzer</name></type> <name pos:line="140" pos:column="22">analyzer</name> <init pos:line="140" pos:column="31">= <expr><op:operator pos:line="140" pos:column="33">new</op:operator> <call><name pos:line="140" pos:column="37">StandardAnalyzer</name><argument_list pos:line="140" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="142" pos:column="13">//add language to query</comment>
            <if pos:line="143" pos:column="13">if <condition pos:line="143" pos:column="16">(<expr><name pos:line="143" pos:column="17">l</name> <op:operator pos:line="143" pos:column="19">!=</op:operator> <lit:literal type="number" pos:line="143" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="143" pos:column="24"> <block pos:line="143" pos:column="25">{
                <expr_stmt><expr><name pos:line="144" pos:column="17">s</name> <op:operator pos:line="144" pos:column="19">=</op:operator> <name pos:line="144" pos:column="21">s</name> <op:operator pos:line="144" pos:column="23">+</op:operator> <lit:literal type="string" pos:line="144" pos:column="25">" AND language:"</lit:literal> <op:operator pos:line="144" pos:column="42">+</op:operator> <name pos:line="144" pos:column="44">l</name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="146" pos:column="13">Query</name></type> <name pos:line="146" pos:column="19">query</name> <init pos:line="146" pos:column="25">= <expr><call><name><name pos:line="146" pos:column="27">QueryParser</name><op:operator pos:line="146" pos:column="38">.</op:operator><name pos:line="146" pos:column="39">parse</name></name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="48">"designation"</lit:literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="63">analyzer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="148" pos:column="13">Hits</name></type> <name pos:line="148" pos:column="18">hits</name> <init pos:line="148" pos:column="23">= <expr><call><name><name pos:line="148" pos:column="25">searcher</name><op:operator pos:line="148" pos:column="33">.</op:operator><name pos:line="148" pos:column="34">search</name></name><argument_list pos:line="148" pos:column="40">(<argument><expr><name pos:line="148" pos:column="41">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:line="150" pos:column="13">for (<init><expr><name pos:line="150" pos:column="18">i</name> <op:operator pos:line="150" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="150" pos:column="22">0</lit:literal></expr>;</init> <condition><expr><name pos:line="150" pos:column="25">i</name> <op:operator pos:line="150" pos:column="27">&lt;</op:operator> <call><name><name pos:line="150" pos:column="29">hits</name><op:operator pos:line="150" pos:column="33">.</op:operator><name pos:line="150" pos:column="34">length</name></name><argument_list pos:line="150" pos:column="40">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="150" pos:column="44">i</name><op:operator pos:line="150" pos:column="45">++</op:operator></expr></incr>) <block pos:line="150" pos:column="49">{
                <try pos:line="151" pos:column="17">try <block pos:line="151" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="152" pos:column="21">v</name><op:operator pos:line="152" pos:column="22">.</op:operator><name pos:line="152" pos:column="23">addElement</name></name><argument_list pos:line="152" pos:column="33">(<argument><expr><op:operator pos:line="152" pos:column="34">new</op:operator> <call><name pos:line="152" pos:column="38">XincoCoreDataServer</name><argument_list pos:line="152" pos:column="57">(<argument><expr><call><name><name pos:line="152" pos:column="58">Integer</name><op:operator pos:line="152" pos:column="65">.</op:operator><name pos:line="152" pos:column="66">parseInt</name></name><argument_list pos:line="152" pos:column="74">(<argument><expr><call><name><name pos:line="152" pos:column="75">hits</name><op:operator pos:line="152" pos:column="79">.</op:operator><name pos:line="152" pos:column="80">doc</name></name><argument_list pos:line="152" pos:column="83">(<argument><expr><name pos:line="152" pos:column="84">i</name></expr></argument>)</argument_list></call><op:operator pos:line="152" pos:column="86">.</op:operator><call><name pos:line="152" pos:column="87">get</name><argument_list pos:line="152" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="91">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="152" pos:column="99">dbm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="153" pos:column="19">catch <parameter_list pos:line="153" pos:column="25">(<param><decl><type><name pos:line="153" pos:column="26">Exception</name></type> <name pos:line="153" pos:column="36">xcde</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="42">{
                <comment type="line" pos:line="154" pos:column="17">// don't add non-existing data</comment>
                }</block></catch></try>
                <if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><name pos:line="156" pos:column="21">i</name> <op:operator pos:line="156" pos:column="23">&gt;=</op:operator> <name><name pos:line="156" pos:column="26">dbm</name><op:operator pos:line="156" pos:column="29">.</op:operator><name pos:line="156" pos:column="30">config</name><op:operator pos:line="156" pos:column="36">.</op:operator><name pos:line="156" pos:column="37">MaxSearchResult</name></name></expr>)</condition><then pos:line="156" pos:column="53"> <block pos:line="156" pos:column="54">{
                    <break pos:line="157" pos:column="21">break;</break>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">searcher</name><op:operator pos:line="161" pos:column="21">.</op:operator><name pos:line="161" pos:column="22">close</name></name><argument_list pos:line="161" pos:column="27">()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch pos:line="163" pos:column="11">catch <parameter_list pos:line="163" pos:column="17">(<param><decl><type><name pos:line="163" pos:column="18">Exception</name></type> <name pos:line="163" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="163" pos:column="31">{
            <if pos:line="164" pos:column="13">if <condition pos:line="164" pos:column="16">(<expr><name pos:line="164" pos:column="17">searcher</name> <op:operator pos:line="164" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="164" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="164" pos:column="34"> <block pos:line="164" pos:column="35">{
                <try pos:line="165" pos:column="17">try <block pos:line="165" pos:column="21">{
                    <expr_stmt><expr><call><name><name pos:line="166" pos:column="21">searcher</name><op:operator pos:line="166" pos:column="29">.</op:operator><name pos:line="166" pos:column="30">close</name></name><argument_list pos:line="166" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch pos:line="167" pos:column="19">catch <parameter_list pos:line="167" pos:column="25">(<param><decl><type><name pos:line="167" pos:column="26">Exception</name></type> <name pos:line="167" pos:column="36">se</name></decl></param>)</parameter_list> <block pos:line="167" pos:column="40">{
                }</block></catch></try>
            }</block></then></if>
            <return pos:line="170" pos:column="13">return <expr><lit:literal type="null" pos:line="170" pos:column="20">null</lit:literal></expr>;</return>
        }</block></catch></try>

        <return pos:line="173" pos:column="9">return <expr><name pos:line="173" pos:column="16">v</name></expr>;</return>
    }</block></function>

    <comment type="line" pos:line="176" pos:column="5">//private constructor to avoid instance generation with new-operator!</comment>
    <constructor><specifier pos:line="177" pos:column="5">private</specifier> <name pos:line="177" pos:column="13">XincoIndexer</name><parameter_list pos:line="177" pos:column="25">()</parameter_list> <block pos:line="177" pos:column="28">{
    }</block></constructor>
}</block></class>
</unit>
