<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\controller\UserManager.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">SQLException</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Statement</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">tada</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">com</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">riskIt</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">db</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">DatabaseConnection</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">util</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">AccessorMethods</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">util</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">RiskItConstants</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">data</name><op:operator pos:line="14" pos:column="23">.</op:operator><name pos:line="14" pos:column="24">Invitation</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">controller</name><op:operator pos:line="15" pos:column="29">.</op:operator><name pos:line="15" pos:column="30">AgentManager</name></name>;</import>

<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">UserManager</name> 
<block pos:line="18" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">AccessorMethods</name></type> <name pos:line="19" pos:column="33">acc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">AgentManager</name></type> <name pos:line="20" pos:column="30">agent</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">UserManager</name><parameter_list pos:line="22" pos:column="27">()</parameter_list>
	<block pos:line="23" pos:column="9">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">acc</name> <op:operator pos:line="24" pos:column="21">=</op:operator> <op:operator pos:line="24" pos:column="23">new</op:operator> <call><name pos:line="24" pos:column="27">AccessorMethods</name><argument_list pos:line="24" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">agent</name> <op:operator pos:line="25" pos:column="23">=</op:operator> <op:operator pos:line="25" pos:column="25">new</op:operator> <call><name pos:line="25" pos:column="29">AgentManager</name><argument_list pos:line="25" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="block" format="javadoc" pos:line="28" pos:column="9">/**
	 * This method filters data from "user-record" table that matches same 
	 * zipcode and displays the data.
	 * @param zip - holds the value of zip-code to be compared with and filtered
	 * @return count - number of people living in this zip-code
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">int</name></type> <name pos:line="35" pos:column="20">filterZipcode</name><parameter_list pos:line="35" pos:column="33">(<param><decl><type><name pos:line="35" pos:column="34">String</name></type> <name pos:line="35" pos:column="41">zip</name></decl></param>)</parameter_list>
	<block pos:line="36" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int</name></type> <name pos:line="37" pos:column="21">count</name> <init pos:line="37" pos:column="27">= <expr><lit:literal type="number" pos:line="37" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">Statement</name></type> <name pos:line="38" pos:column="27">stat</name> <init pos:line="38" pos:column="32">= <expr><lit:literal type="null" pos:line="38" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">ResultSet</name></type> <name pos:line="39" pos:column="27">result</name> <init pos:line="39" pos:column="34">= <expr><lit:literal type="null" pos:line="39" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="41" pos:column="17">if<condition pos:line="41" pos:column="19">(<expr><call><name><name pos:line="41" pos:column="20">zip</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">length</name></name><argument_list pos:line="41" pos:column="30">()</argument_list></call> <op:operator pos:line="41" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="41" pos:column="36">0</lit:literal> <op:operator pos:line="41" pos:column="38">||</op:operator> <call><name><name pos:line="41" pos:column="41">zip</name><op:operator pos:line="41" pos:column="44">.</op:operator><name pos:line="41" pos:column="45">equals</name></name><argument_list pos:line="41" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="52">"null"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="41" pos:column="61">
			<expr_stmt><expr><name pos:line="42" pos:column="25">zip</name> <op:operator pos:line="42" pos:column="29">=</op:operator> <lit:literal type="null" pos:line="42" pos:column="31">null</lit:literal></expr>;</expr_stmt></then></if>
		
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">String</name></type> <name pos:line="44" pos:column="24">cmd_zipSearch</name> <init pos:line="44" pos:column="38">= <expr><lit:literal type="string" pos:line="44" pos:column="40">"SELECT * from userrecord where zip = '"</lit:literal> <op:operator pos:line="44" pos:column="81">+</op:operator> <name pos:line="44" pos:column="83">zip</name> <op:operator pos:line="44" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="44" pos:column="89">"'"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="46" pos:column="17">try
		<block pos:line="47" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">Connection</name></type> <name pos:line="48" pos:column="36">conn</name> <init pos:line="48" pos:column="41">= <expr><call><name><name pos:line="48" pos:column="43">DatabaseConnection</name><op:operator pos:line="48" pos:column="61">.</op:operator><name pos:line="48" pos:column="62">getConnection</name></name><argument_list pos:line="48" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="49" pos:column="25">stat</name> <op:operator pos:line="49" pos:column="30">=</op:operator> <call><name><name pos:line="49" pos:column="32">conn</name><op:operator pos:line="49" pos:column="36">.</op:operator><name pos:line="49" pos:column="37">createStatement</name></name><argument_list pos:line="49" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
					
			<expr_stmt><expr><name pos:line="51" pos:column="25">result</name> <op:operator pos:line="51" pos:column="32">=</op:operator> <call><name><name pos:line="51" pos:column="34">stat</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">executeQuery</name></name><argument_list pos:line="51" pos:column="51">(<argument><expr><name pos:line="51" pos:column="52">cmd_zipSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">System</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">out</name><op:operator pos:line="53" pos:column="35">.</op:operator><name pos:line="53" pos:column="36">println</name></name><argument_list pos:line="53" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="44">"List of customers for zipcode : "</lit:literal> <op:operator pos:line="53" pos:column="79">+</op:operator> <name pos:line="53" pos:column="81">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">System</name><op:operator pos:line="54" pos:column="31">.</op:operator><name pos:line="54" pos:column="32">out</name><op:operator pos:line="54" pos:column="35">.</op:operator><name pos:line="54" pos:column="36">printf</name></name><argument_list pos:line="54" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="43">"%20s |%20s |"</lit:literal></expr></argument> ,<argument><expr><lit:literal type="string" pos:line="54" pos:column="59">"NAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="67">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="55" pos:column="25">System</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">out</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">println</name></name><argument_list pos:line="55" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="57" pos:column="25">//display data from result set</comment>
			<while pos:line="58" pos:column="25">while<condition pos:line="58" pos:column="30">(<expr><call><name><name pos:line="58" pos:column="31">result</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">next</name></name><argument_list pos:line="58" pos:column="42">()</argument_list></call></expr>)</condition>
			<block pos:line="59" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="60" pos:column="33">++</op:operator><name pos:line="60" pos:column="35">count</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="61" pos:column="33">System</name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">out</name><op:operator pos:line="61" pos:column="43">.</op:operator><name pos:line="61" pos:column="44">printf</name></name><argument_list pos:line="61" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="51">"%s |%s |"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="63">result</name><op:operator pos:line="61" pos:column="69">.</op:operator><name pos:line="61" pos:column="70">getString</name></name><argument_list pos:line="61" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="80">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="61" pos:column="89">result</name><op:operator pos:line="61" pos:column="95">.</op:operator><name pos:line="61" pos:column="96">getString</name></name><argument_list pos:line="61" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="106">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="62" pos:column="33">System</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">out</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">println</name></name><argument_list pos:line="62" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			
			<if pos:line="65" pos:column="25">if<condition pos:line="65" pos:column="27">(<expr><name pos:line="65" pos:column="28">count</name> <op:operator pos:line="65" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="65" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="65" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="66" pos:column="33">System</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">out</name><op:operator pos:line="66" pos:column="43">.</op:operator><name pos:line="66" pos:column="44">println</name></name><argument_list pos:line="66" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="52">"There are no customers enrolled in this zipcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="67" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="68" pos:column="33">System</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">out</name><op:operator pos:line="68" pos:column="43">.</op:operator><name pos:line="68" pos:column="44">println</name></name><argument_list pos:line="68" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="52">"No. of customers in zipcode : "</lit:literal> <op:operator pos:line="68" pos:column="85">+</op:operator> <name pos:line="68" pos:column="87">zip</name> <op:operator pos:line="68" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="68" pos:column="93">" is "</lit:literal> <op:operator pos:line="68" pos:column="100">+</op:operator> <name pos:line="68" pos:column="102">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="69" pos:column="25">result</name><op:operator pos:line="69" pos:column="31">.</op:operator><name pos:line="69" pos:column="32">close</name></name><argument_list pos:line="69" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="71" pos:column="17">catch<parameter_list pos:line="71" pos:column="22">(<param><decl><type><name pos:line="71" pos:column="23">Exception</name></type> <name pos:line="71" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="72" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">System</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">out</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">println</name></name><argument_list pos:line="73" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="44">"Exception in filterZipcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="74" pos:column="25">e</name><op:operator pos:line="74" pos:column="26">.</op:operator><name pos:line="74" pos:column="27">printStackTrace</name></name><argument_list pos:line="74" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">count</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="80" pos:column="9">/**
	 * This method accepts name of the state and calculates number of 
	 * people employment within the state as well as number of people unemployed 
	 * within the state and gives the percentage of unemployment rate..
	 * @param stateName - holds value of the state
	 * @return ratePercent - return the unemployment rate for the given state
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><annotation pos:line="89" pos:column="9">@<name pos:line="89" pos:column="10">TaDaMethod</name><argument_list pos:line="89" pos:column="20">(<argument><expr><name pos:line="89" pos:column="21">variablesToTrack</name><op:operator pos:line="89" pos:column="37">=</op:operator> <block pos:line="89" pos:column="39">{<expr><lit:literal type="string" pos:line="89" pos:column="40">"countOfAllEmployees"</lit:literal></expr><op:operator pos:line="89" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="89" pos:column="63">"countOfAllEmployees"</lit:literal></expr></argument><op:operator pos:line="89" pos:column="84">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="90" pos:column="25">"countOfUnemployed"</lit:literal></expr></argument><op:operator pos:line="90" pos:column="44">,</op:operator> <argument><expr><lit:literal type="string" pos:line="90" pos:column="46">"countOfUnemployed"</lit:literal></expr></argument><op:operator pos:line="90" pos:column="65">,</op:operator> <argument><expr><lit:literal type="string" pos:line="90" pos:column="67">"countOfUnemployed"</lit:literal></expr></argument><op:operator pos:line="90" pos:column="86">,</op:operator> <argument><expr><lit:literal type="string" pos:line="90" pos:column="88">"countOfUnemployed"</lit:literal></expr></argument><op:operator pos:line="90" pos:column="107">,</op:operator> <argument><expr><lit:literal type="string" pos:line="90" pos:column="109">"countOfUnemployed"</lit:literal></expr></argument>}</block></expr></argument>
	, <argument><expr><name pos:line="91" pos:column="11">correspondingDatabaseAttribute</name> <op:operator pos:line="91" pos:column="42">=</op:operator> <block pos:line="91" pos:column="44">{<expr><lit:literal type="string" pos:line="91" pos:column="45">"ziptable.zip"</lit:literal></expr><op:operator pos:line="91" pos:column="59">,</op:operator> <argument><expr><lit:literal type="string" pos:line="91" pos:column="61">"userrecord.zip"</lit:literal></expr></argument><op:operator pos:line="91" pos:column="77">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="92" pos:column="25">"employmentStat.ssn"</lit:literal></expr></argument><op:operator pos:line="92" pos:column="45">,</op:operator> <argument><expr><lit:literal type="string" pos:line="92" pos:column="47">"userrecord.ssn"</lit:literal></expr></argument><op:operator pos:line="92" pos:column="63">,</op:operator> <argument><expr><lit:literal type="string" pos:line="92" pos:column="65">"ziptable.statename"</lit:literal></expr></argument><op:operator pos:line="92" pos:column="85">,</op:operator> <argument><expr><lit:literal type="string" pos:line="92" pos:column="87">"ziptable.zip"</lit:literal></expr></argument><op:operator pos:line="92" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="92" pos:column="103">"userrecord.zip"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
			
	<specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">double</name></type> <name pos:line="94" pos:column="23">calculateUnEmploymentRate</name><parameter_list pos:line="94" pos:column="48">(<param><decl><type><name pos:line="94" pos:column="49">String</name></type> <name pos:line="94" pos:column="56">stateName</name></decl></param>)</parameter_list>
	<block pos:line="95" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="96" pos:column="17">int</name></type> <name pos:line="96" pos:column="21">countOfAllEmployees</name> <init pos:line="96" pos:column="41">= <expr><lit:literal type="number" pos:line="96" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">int</name></type> <name pos:line="97" pos:column="21">countOfUnemployed</name> <init pos:line="97" pos:column="39">= <expr><lit:literal type="number" pos:line="97" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">double</name></type> <name pos:line="98" pos:column="24">ratePercent</name> <init pos:line="98" pos:column="36">= <expr><lit:literal type="number" pos:line="98" pos:column="38">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="100" pos:column="17">Statement</name></type> <name pos:line="100" pos:column="27">stat</name> <init pos:line="100" pos:column="32">= <expr><lit:literal type="null" pos:line="100" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="101" pos:column="17">ResultSet</name></type> <name pos:line="101" pos:column="27">result</name> <init pos:line="101" pos:column="34">= <expr><lit:literal type="null" pos:line="101" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="103" pos:column="17">//validate input</comment>
		<expr_stmt><expr><name pos:line="104" pos:column="17">stateName</name> <op:operator pos:line="104" pos:column="27">=</op:operator> <call><name><name pos:line="104" pos:column="29">acc</name><op:operator pos:line="104" pos:column="32">.</op:operator><name pos:line="104" pos:column="33">checkLetter</name></name><argument_list pos:line="104" pos:column="44">(<argument><expr><name pos:line="104" pos:column="45">stateName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if pos:line="106" pos:column="17">if<condition pos:line="106" pos:column="19">(<expr><call><name><name pos:line="106" pos:column="20">stateName</name><op:operator pos:line="106" pos:column="29">.</op:operator><name pos:line="106" pos:column="30">equals</name></name><argument_list pos:line="106" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="37">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="41">
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">System</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">out</name><op:operator pos:line="107" pos:column="35">.</op:operator><name pos:line="107" pos:column="36">println</name></name><argument_list pos:line="107" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="44">"You have entered a incorrect value."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="108" pos:column="17">else
		<block pos:line="109" pos:column="17">{
			<try pos:line="110" pos:column="25">try
			<block pos:line="111" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="112" pos:column="33">Connection</name></type> <name pos:line="112" pos:column="44">conn</name> <init pos:line="112" pos:column="49">= <expr><call><name><name pos:line="112" pos:column="51">DatabaseConnection</name><op:operator pos:line="112" pos:column="69">.</op:operator><name pos:line="112" pos:column="70">getConnection</name></name><argument_list pos:line="112" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="113" pos:column="33">stat</name> <op:operator pos:line="113" pos:column="38">=</op:operator> <call><name><name pos:line="113" pos:column="40">conn</name><op:operator pos:line="113" pos:column="44">.</op:operator><name pos:line="113" pos:column="45">createStatement</name></name><argument_list pos:line="113" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
					
				<decl_stmt><decl><type><name pos:line="115" pos:column="33">String</name></type> <name pos:line="115" pos:column="40">cmd_getAllUnemployed</name> <init pos:line="115" pos:column="61">= <expr><lit:literal type="string" pos:line="115" pos:column="63">"SELECT count(*) as totalUnemploy "</lit:literal>
											<op:operator pos:line="116" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="116" pos:column="91">" FROM ziptable, employmentStat, userrecord "</lit:literal>
											<op:operator pos:line="117" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="117" pos:column="91">" WHERE employmentStat.ssn = userrecord.ssn "</lit:literal> 
											<op:operator pos:line="118" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="118" pos:column="91">"and employmentstat.unemploymentreason &lt;&gt; 'null' "</lit:literal>
											<op:operator pos:line="119" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="119" pos:column="91">"and ziptable.statename = '"</lit:literal> <op:operator pos:line="119" pos:column="120">+</op:operator> <name pos:line="119" pos:column="122">stateName</name> <op:operator pos:line="119" pos:column="132">+</op:operator> <lit:literal type="string" pos:line="119" pos:column="134">"' "</lit:literal>
											<op:operator pos:line="120" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="120" pos:column="91">"and ziptable.zip = userrecord.zip"</lit:literal></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name pos:line="122" pos:column="33">String</name></type> <name pos:line="122" pos:column="40">cmd_getTotalCount</name> <init pos:line="122" pos:column="58">= <expr><lit:literal type="string" pos:line="122" pos:column="60">"SELECT count(*) as totalCount FROM  ziptable, userrecord "</lit:literal>
											<op:operator pos:line="123" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="123" pos:column="91">" WHERE ziptable.statename = '"</lit:literal> <op:operator pos:line="123" pos:column="123">+</op:operator> <name pos:line="123" pos:column="125">stateName</name> <op:operator pos:line="123" pos:column="135">+</op:operator> <lit:literal type="string" pos:line="123" pos:column="137">"' and ziptable.zip = userrecord.zip"</lit:literal></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name pos:line="125" pos:column="33">result</name> <op:operator pos:line="125" pos:column="40">=</op:operator> <call><name><name pos:line="125" pos:column="42">stat</name><op:operator pos:line="125" pos:column="46">.</op:operator><name pos:line="125" pos:column="47">executeQuery</name></name><argument_list pos:line="125" pos:column="59">(<argument><expr><name pos:line="125" pos:column="60">cmd_getTotalCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
				
				<if pos:line="127" pos:column="33">if<condition pos:line="127" pos:column="35">(<expr><call><name><name pos:line="127" pos:column="36">result</name><op:operator pos:line="127" pos:column="42">.</op:operator><name pos:line="127" pos:column="43">next</name></name><argument_list pos:line="127" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="127" pos:column="50">
					<expr_stmt><expr><name pos:line="128" pos:column="41">countOfAllEmployees</name> <op:operator pos:line="128" pos:column="61">=</op:operator> <call><name><name pos:line="128" pos:column="63">result</name><op:operator pos:line="128" pos:column="69">.</op:operator><name pos:line="128" pos:column="70">getInt</name></name><argument_list pos:line="128" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="77">"totalCount"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>			
				<expr_stmt><expr><call><name><name pos:line="129" pos:column="33">result</name><op:operator pos:line="129" pos:column="39">.</op:operator><name pos:line="129" pos:column="40">close</name></name><argument_list pos:line="129" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
			
				<expr_stmt><expr><call><name><name pos:line="131" pos:column="33">System</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">out</name><op:operator pos:line="131" pos:column="43">.</op:operator><name pos:line="131" pos:column="44">println</name></name><argument_list pos:line="131" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="52">"Total number of people working for the state of "</lit:literal>
									<op:operator pos:line="132" pos:column="73">+</op:operator> <name pos:line="132" pos:column="75">stateName</name> <op:operator pos:line="132" pos:column="85">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="87">" is "</lit:literal> <op:operator pos:line="132" pos:column="94">+</op:operator> <name pos:line="132" pos:column="96">countOfAllEmployees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="line" pos:line="134" pos:column="33">//check if total count is 0, </comment>
				<comment type="line" pos:line="135" pos:column="33">//then set it to 1, to avoid division by zero</comment>
				<if pos:line="136" pos:column="33">if<condition pos:line="136" pos:column="35">(<expr><name pos:line="136" pos:column="36">countOfAllEmployees</name> <op:operator pos:line="136" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="136" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="136" pos:column="61">
					<expr_stmt><expr><name pos:line="137" pos:column="41">countOfAllEmployees</name> <op:operator pos:line="137" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="137" pos:column="63">1</lit:literal></expr>;</expr_stmt></then></if>
				
				<expr_stmt><expr><name pos:line="139" pos:column="33">result</name> <op:operator pos:line="139" pos:column="40">=</op:operator> <call><name><name pos:line="139" pos:column="42">stat</name><op:operator pos:line="139" pos:column="46">.</op:operator><name pos:line="139" pos:column="47">executeQuery</name></name><argument_list pos:line="139" pos:column="59">(<argument><expr><name pos:line="139" pos:column="60">cmd_getAllUnemployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
				
				<if pos:line="141" pos:column="33">if<condition pos:line="141" pos:column="35">(<expr><call><name><name pos:line="141" pos:column="36">result</name><op:operator pos:line="141" pos:column="42">.</op:operator><name pos:line="141" pos:column="43">next</name></name><argument_list pos:line="141" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="141" pos:column="50">
					<expr_stmt><expr><name pos:line="142" pos:column="41">countOfUnemployed</name> <op:operator pos:line="142" pos:column="59">=</op:operator> <call><name><name pos:line="142" pos:column="61">result</name><op:operator pos:line="142" pos:column="67">.</op:operator><name pos:line="142" pos:column="68">getInt</name></name><argument_list pos:line="142" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="75">"totalUnemploy"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>		
				<expr_stmt><expr><call><name><name pos:line="143" pos:column="33">result</name><op:operator pos:line="143" pos:column="39">.</op:operator><name pos:line="143" pos:column="40">close</name></name><argument_list pos:line="143" pos:column="45">()</argument_list></call></expr>;</expr_stmt>		
				
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">System</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">out</name><op:operator pos:line="145" pos:column="43">.</op:operator><name pos:line="145" pos:column="44">println</name></name><argument_list pos:line="145" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="52">"Total number of unemployed people for the state of "</lit:literal>
						<op:operator pos:line="146" pos:column="49">+</op:operator> <name pos:line="146" pos:column="51">stateName</name> <op:operator pos:line="146" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="146" pos:column="63">" is "</lit:literal> <op:operator pos:line="146" pos:column="70">+</op:operator> <name pos:line="146" pos:column="72">countOfUnemployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				
				<comment type="line" pos:line="148" pos:column="33">//calculate the unemployment rate</comment>
				<expr_stmt><expr><name pos:line="149" pos:column="33">ratePercent</name> <op:operator pos:line="149" pos:column="45">=</op:operator> <op:operator pos:line="149" pos:column="47">(</op:operator><op:operator pos:line="149" pos:column="48">(</op:operator><name pos:line="149" pos:column="49">double</name><op:operator pos:line="149" pos:column="55">)</op:operator><name pos:line="149" pos:column="56">countOfUnemployed</name><op:operator pos:line="149" pos:column="73">/</op:operator><name pos:line="149" pos:column="74">countOfAllEmployees</name><op:operator pos:line="149" pos:column="93">)</op:operator><op:operator pos:line="149" pos:column="94">*</op:operator><lit:literal type="number" pos:line="149" pos:column="95">100</lit:literal></expr>;</expr_stmt>
				
				<comment type="line" pos:line="151" pos:column="33">//get the precision to 2 digits</comment>
				<expr_stmt><expr><name pos:line="152" pos:column="33">ratePercent</name> <op:operator pos:line="152" pos:column="45">=</op:operator> <name pos:line="152" pos:column="47">ratePercent</name> <op:operator pos:line="152" pos:column="59">*</op:operator> <lit:literal type="number" pos:line="152" pos:column="61">100</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="153" pos:column="33">ratePercent</name> <op:operator pos:line="153" pos:column="45">=</op:operator> <call><name><name pos:line="153" pos:column="47">Math</name><op:operator pos:line="153" pos:column="51">.</op:operator><name pos:line="153" pos:column="52">round</name></name><argument_list pos:line="153" pos:column="57">(<argument><expr><name pos:line="153" pos:column="58">ratePercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="154" pos:column="33">ratePercent</name> <op:operator pos:line="154" pos:column="45">=</op:operator> <name pos:line="154" pos:column="47">ratePercent</name><op:operator pos:line="154" pos:column="58">/</op:operator><lit:literal type="number" pos:line="154" pos:column="59">100</lit:literal></expr>;</expr_stmt>
			
				<expr_stmt><expr><call><name><name pos:line="156" pos:column="33">System</name><op:operator pos:line="156" pos:column="39">.</op:operator><name pos:line="156" pos:column="40">out</name><op:operator pos:line="156" pos:column="43">.</op:operator><name pos:line="156" pos:column="44">printf</name></name><argument_list pos:line="156" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="51">"The unemployment rate for the state of %s is %3.2f"</lit:literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="105">stateName</name></expr></argument>,<argument><expr><name pos:line="156" pos:column="115">ratePercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="157" pos:column="33">System</name><op:operator pos:line="157" pos:column="39">.</op:operator><name pos:line="157" pos:column="40">out</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">println</name></name><argument_list pos:line="157" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="158" pos:column="33">stat</name><op:operator pos:line="158" pos:column="37">.</op:operator><name pos:line="158" pos:column="38">close</name></name><argument_list pos:line="158" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="160" pos:column="25">catch<parameter_list pos:line="160" pos:column="30">(<param><decl><type><name pos:line="160" pos:column="31">Exception</name></type> <name pos:line="160" pos:column="41">e</name></decl></param>)</parameter_list>
			<block pos:line="161" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">System</name><op:operator pos:line="162" pos:column="39">.</op:operator><name pos:line="162" pos:column="40">out</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">println</name></name><argument_list pos:line="162" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="52">"Catch in calculateUnemployment"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="163" pos:column="33">e</name><op:operator pos:line="163" pos:column="34">.</op:operator><name pos:line="163" pos:column="35">printStackTrace</name></name><argument_list pos:line="163" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>
		<return pos:line="166" pos:column="17">return <expr><name pos:line="166" pos:column="24">ratePercent</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="169" pos:column="9">/**
	 * This method is used to obtain set of results that matches the 
	 * given education level and display the customer's list 
	 * @param edu - holds the value of education to be compared with
	 * @return count - number of people holding this education
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="176" pos:column="9">public</specifier> <name pos:line="176" pos:column="16">int</name></type> <name pos:line="176" pos:column="20">filterEducation</name><parameter_list pos:line="176" pos:column="35">(<param><decl><type><name pos:line="176" pos:column="36">String</name></type> <name pos:line="176" pos:column="43">edu</name></decl></param>)</parameter_list>
	<block pos:line="177" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="178" pos:column="17">int</name></type> <name pos:line="178" pos:column="21">count</name> <init pos:line="178" pos:column="27">= <expr><lit:literal type="number" pos:line="178" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="179" pos:column="17">Statement</name></type> <name pos:line="179" pos:column="27">stat</name> <init pos:line="179" pos:column="32">= <expr><lit:literal type="null" pos:line="179" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="180" pos:column="17">ResultSet</name></type> <name pos:line="180" pos:column="27">result</name> <init pos:line="180" pos:column="34">= <expr><lit:literal type="null" pos:line="180" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="182" pos:column="17">if<condition pos:line="182" pos:column="19">(<expr><call><name><name pos:line="182" pos:column="20">edu</name><op:operator pos:line="182" pos:column="23">.</op:operator><name pos:line="182" pos:column="24">length</name></name><argument_list pos:line="182" pos:column="30">()</argument_list></call> <op:operator pos:line="182" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="182" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="182" pos:column="38">
			<expr_stmt><expr><name pos:line="183" pos:column="25">edu</name> <op:operator pos:line="183" pos:column="29">=</op:operator> <lit:literal type="null" pos:line="183" pos:column="31">null</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="184" pos:column="17">if<condition pos:line="184" pos:column="19">(<expr><call><name><name pos:line="184" pos:column="20">edu</name><op:operator pos:line="184" pos:column="23">.</op:operator><name pos:line="184" pos:column="24">equals</name></name><argument_list pos:line="184" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="31">"null"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="184" pos:column="39">
			<expr_stmt><expr><name pos:line="185" pos:column="25">edu</name> <op:operator pos:line="185" pos:column="29">=</op:operator> <lit:literal type="null" pos:line="185" pos:column="31">null</lit:literal></expr>;</expr_stmt></then></if>
		
		<decl_stmt><decl><type><name pos:line="187" pos:column="17">String</name></type> <name pos:line="187" pos:column="24">cmd_eduSearch</name> <init pos:line="187" pos:column="38">= <expr><lit:literal type="string" pos:line="187" pos:column="40">"SELECT userrecord.ssn, userrecord.name, "</lit:literal> 
								<op:operator pos:line="188" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="188" pos:column="67">" education.education "</lit:literal>
								<op:operator pos:line="189" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="189" pos:column="67">" from userrecord, education where "</lit:literal>
								<op:operator pos:line="190" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="190" pos:column="67">" userrecord.ssn = education.ssn and "</lit:literal>
								<op:operator pos:line="191" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="191" pos:column="67">" education.education = ' "</lit:literal> <op:operator pos:line="191" pos:column="95">+</op:operator> <name pos:line="191" pos:column="97">edu</name> <op:operator pos:line="191" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="191" pos:column="103">"'"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="193" pos:column="17">try
		<block pos:line="194" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="195" pos:column="25">Connection</name></type> <name pos:line="195" pos:column="36">conn</name> <init pos:line="195" pos:column="41">= <expr><call><name><name pos:line="195" pos:column="43">DatabaseConnection</name><op:operator pos:line="195" pos:column="61">.</op:operator><name pos:line="195" pos:column="62">getConnection</name></name><argument_list pos:line="195" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="196" pos:column="25">stat</name> <op:operator pos:line="196" pos:column="30">=</op:operator> <call><name><name pos:line="196" pos:column="32">conn</name><op:operator pos:line="196" pos:column="36">.</op:operator><name pos:line="196" pos:column="37">createStatement</name></name><argument_list pos:line="196" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="197" pos:column="25">result</name> <op:operator pos:line="197" pos:column="32">=</op:operator> <call><name><name pos:line="197" pos:column="34">stat</name><op:operator pos:line="197" pos:column="38">.</op:operator><name pos:line="197" pos:column="39">executeQuery</name></name><argument_list pos:line="197" pos:column="51">(<argument><expr><name pos:line="197" pos:column="52">cmd_eduSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">System</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">out</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">println</name></name><argument_list pos:line="199" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="44">"List of customers for given education : "</lit:literal> <op:operator pos:line="199" pos:column="87">+</op:operator> <name pos:line="199" pos:column="89">edu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="200" pos:column="25">System</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">out</name><op:operator pos:line="200" pos:column="35">.</op:operator><name pos:line="200" pos:column="36">printf</name></name><argument_list pos:line="200" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="43">"%20s |%20s |"</lit:literal></expr></argument> ,<argument><expr><lit:literal type="string" pos:line="200" pos:column="59">"NAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="67">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="201" pos:column="25">System</name><op:operator pos:line="201" pos:column="31">.</op:operator><name pos:line="201" pos:column="32">out</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">println</name></name><argument_list pos:line="201" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="203" pos:column="25">//display data from result set</comment>
			<while pos:line="204" pos:column="25">while<condition pos:line="204" pos:column="30">(<expr><call><name><name pos:line="204" pos:column="31">result</name><op:operator pos:line="204" pos:column="37">.</op:operator><name pos:line="204" pos:column="38">next</name></name><argument_list pos:line="204" pos:column="42">()</argument_list></call></expr>)</condition>
			<block pos:line="205" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="206" pos:column="33">++</op:operator><name pos:line="206" pos:column="35">count</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="207" pos:column="33">System</name><op:operator pos:line="207" pos:column="39">.</op:operator><name pos:line="207" pos:column="40">out</name><op:operator pos:line="207" pos:column="43">.</op:operator><name pos:line="207" pos:column="44">printf</name></name><argument_list pos:line="207" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="51">"%s |%s |"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="207" pos:column="63">result</name><op:operator pos:line="207" pos:column="69">.</op:operator><name pos:line="207" pos:column="70">getString</name></name><argument_list pos:line="207" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="80">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="207" pos:column="89">result</name><op:operator pos:line="207" pos:column="95">.</op:operator><name pos:line="207" pos:column="96">getString</name></name><argument_list pos:line="207" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="106">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="208" pos:column="33">System</name><op:operator pos:line="208" pos:column="39">.</op:operator><name pos:line="208" pos:column="40">out</name><op:operator pos:line="208" pos:column="43">.</op:operator><name pos:line="208" pos:column="44">println</name></name><argument_list pos:line="208" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			
			<if pos:line="211" pos:column="25">if<condition pos:line="211" pos:column="27">(<expr><name pos:line="211" pos:column="28">count</name> <op:operator pos:line="211" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="211" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="211" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="212" pos:column="33">System</name><op:operator pos:line="212" pos:column="39">.</op:operator><name pos:line="212" pos:column="40">out</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">println</name></name><argument_list pos:line="212" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="52">"There are no customers enrolled with this education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="213" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="214" pos:column="33">System</name><op:operator pos:line="214" pos:column="39">.</op:operator><name pos:line="214" pos:column="40">out</name><op:operator pos:line="214" pos:column="43">.</op:operator><name pos:line="214" pos:column="44">println</name></name><argument_list pos:line="214" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="52">"No. of customers with education : "</lit:literal> <op:operator pos:line="214" pos:column="89">+</op:operator> <name pos:line="214" pos:column="91">edu</name> <op:operator pos:line="214" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="214" pos:column="97">" is "</lit:literal> <op:operator pos:line="214" pos:column="104">+</op:operator> <name pos:line="214" pos:column="106">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="215" pos:column="25">result</name><op:operator pos:line="215" pos:column="31">.</op:operator><name pos:line="215" pos:column="32">close</name></name><argument_list pos:line="215" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			
		}</block>
		<catch pos:line="218" pos:column="17">catch<parameter_list pos:line="218" pos:column="22">(<param><decl><type><name pos:line="218" pos:column="23">Exception</name></type> <name pos:line="218" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="219" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="220" pos:column="25">System</name><op:operator pos:line="220" pos:column="31">.</op:operator><name pos:line="220" pos:column="32">out</name><op:operator pos:line="220" pos:column="35">.</op:operator><name pos:line="220" pos:column="36">println</name></name><argument_list pos:line="220" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="44">"Exception in filterEducation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="221" pos:column="25">e</name><op:operator pos:line="221" pos:column="26">.</op:operator><name pos:line="221" pos:column="27">printStackTrace</name></name><argument_list pos:line="221" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="224" pos:column="17">return <expr><name pos:line="224" pos:column="24">count</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc" pos:line="228" pos:column="9">/**
	 * This method displays customer's list that is a match with resepct to the 
	 * specified occupation
	 * @param occupation - holds the value of the occupation name to be compared with
	 * @return count - count of number of people with the given occupation
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="236" pos:column="9">public</specifier> <name pos:line="236" pos:column="16">int</name></type> <name pos:line="236" pos:column="20">filterOccupation</name><parameter_list pos:line="236" pos:column="36">(<param><decl><type><name pos:line="236" pos:column="37">String</name></type> <name pos:line="236" pos:column="44">occupation</name></decl></param>)</parameter_list>
	<block pos:line="237" pos:column="9">{
		
		<decl_stmt><decl><type><name pos:line="239" pos:column="17">int</name></type> <name pos:line="239" pos:column="21">count</name> <init pos:line="239" pos:column="27">= <expr><lit:literal type="number" pos:line="239" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="240" pos:column="17">Statement</name></type> <name pos:line="240" pos:column="27">stat</name> <init pos:line="240" pos:column="32">= <expr><lit:literal type="null" pos:line="240" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="241" pos:column="17">ResultSet</name></type> <name pos:line="241" pos:column="27">result</name> <init pos:line="241" pos:column="34">= <expr><lit:literal type="null" pos:line="241" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="243" pos:column="17">if<condition pos:line="243" pos:column="19">(<expr><call><name><name pos:line="243" pos:column="20">occupation</name><op:operator pos:line="243" pos:column="30">.</op:operator><name pos:line="243" pos:column="31">length</name></name><argument_list pos:line="243" pos:column="37">()</argument_list></call> <op:operator pos:line="243" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="243" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="243" pos:column="45">
			<expr_stmt><expr><name pos:line="244" pos:column="25">occupation</name> <op:operator pos:line="244" pos:column="36">=</op:operator> <lit:literal type="null" pos:line="244" pos:column="38">null</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="245" pos:column="17">if<condition pos:line="245" pos:column="19">(<expr><call><name><name pos:line="245" pos:column="20">occupation</name><op:operator pos:line="245" pos:column="30">.</op:operator><name pos:line="245" pos:column="31">equals</name></name><argument_list pos:line="245" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="38">"null"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="245" pos:column="46">
			<expr_stmt><expr><name pos:line="246" pos:column="25">occupation</name> <op:operator pos:line="246" pos:column="36">=</op:operator> <lit:literal type="null" pos:line="246" pos:column="38">null</lit:literal></expr>;</expr_stmt></then></if>
		
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">String</name></type> <name pos:line="248" pos:column="24">cmd_OccupationSearch</name> <init pos:line="248" pos:column="45">= <expr><lit:literal type="string" pos:line="248" pos:column="47">"SELECT userrecord.ssn, userrecord.name, "</lit:literal> 
									<op:operator pos:line="249" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="249" pos:column="75">" job.occupationcode "</lit:literal>
									<op:operator pos:line="250" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="250" pos:column="75">" from userrecord, job, occupation where "</lit:literal>
									<op:operator pos:line="251" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="251" pos:column="75">" userrecord.ssn = job.ssn and "</lit:literal>
									<op:operator pos:line="252" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="252" pos:column="75">" job.occupationcode = occupation.occupationcode and "</lit:literal>
									<op:operator pos:line="253" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="253" pos:column="75">" occupation.occupation = ' "</lit:literal> <op:operator pos:line="253" pos:column="105">+</op:operator> <name pos:line="253" pos:column="107">occupation</name> <op:operator pos:line="253" pos:column="118">+</op:operator> <lit:literal type="string" pos:line="253" pos:column="120">"'"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="255" pos:column="17">try
		<block pos:line="256" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="257" pos:column="25">Connection</name></type> <name pos:line="257" pos:column="36">conn</name> <init pos:line="257" pos:column="41">= <expr><call><name><name pos:line="257" pos:column="43">DatabaseConnection</name><op:operator pos:line="257" pos:column="61">.</op:operator><name pos:line="257" pos:column="62">getConnection</name></name><argument_list pos:line="257" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="258" pos:column="25">stat</name> <op:operator pos:line="258" pos:column="30">=</op:operator> <call><name><name pos:line="258" pos:column="32">conn</name><op:operator pos:line="258" pos:column="36">.</op:operator><name pos:line="258" pos:column="37">createStatement</name></name><argument_list pos:line="258" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name pos:line="260" pos:column="25">result</name> <op:operator pos:line="260" pos:column="32">=</op:operator> <call><name><name pos:line="260" pos:column="34">stat</name><op:operator pos:line="260" pos:column="38">.</op:operator><name pos:line="260" pos:column="39">executeQuery</name></name><argument_list pos:line="260" pos:column="51">(<argument><expr><name pos:line="260" pos:column="52">cmd_OccupationSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="262" pos:column="25">System</name><op:operator pos:line="262" pos:column="31">.</op:operator><name pos:line="262" pos:column="32">out</name><op:operator pos:line="262" pos:column="35">.</op:operator><name pos:line="262" pos:column="36">println</name></name><argument_list pos:line="262" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="44">"List of customers for given Occupation : "</lit:literal> <op:operator pos:line="262" pos:column="88">+</op:operator> <name pos:line="262" pos:column="90">occupation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="263" pos:column="25">System</name><op:operator pos:line="263" pos:column="31">.</op:operator><name pos:line="263" pos:column="32">out</name><op:operator pos:line="263" pos:column="35">.</op:operator><name pos:line="263" pos:column="36">printf</name></name><argument_list pos:line="263" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="43">"%20s |%20s |"</lit:literal></expr></argument> ,<argument><expr><lit:literal type="string" pos:line="263" pos:column="59">"NAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="67">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="264" pos:column="25">System</name><op:operator pos:line="264" pos:column="31">.</op:operator><name pos:line="264" pos:column="32">out</name><op:operator pos:line="264" pos:column="35">.</op:operator><name pos:line="264" pos:column="36">println</name></name><argument_list pos:line="264" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="266" pos:column="25">//display data from result set</comment>
			<while pos:line="267" pos:column="25">while<condition pos:line="267" pos:column="30">(<expr><call><name><name pos:line="267" pos:column="31">result</name><op:operator pos:line="267" pos:column="37">.</op:operator><name pos:line="267" pos:column="38">next</name></name><argument_list pos:line="267" pos:column="42">()</argument_list></call></expr>)</condition>
			<block pos:line="268" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="269" pos:column="33">++</op:operator><name pos:line="269" pos:column="35">count</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="270" pos:column="33">System</name><op:operator pos:line="270" pos:column="39">.</op:operator><name pos:line="270" pos:column="40">out</name><op:operator pos:line="270" pos:column="43">.</op:operator><name pos:line="270" pos:column="44">printf</name></name><argument_list pos:line="270" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="51">"%s -- %s "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="270" pos:column="64">result</name><op:operator pos:line="270" pos:column="70">.</op:operator><name pos:line="270" pos:column="71">getString</name></name><argument_list pos:line="270" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="81">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="270" pos:column="90">result</name><op:operator pos:line="270" pos:column="96">.</op:operator><name pos:line="270" pos:column="97">getString</name></name><argument_list pos:line="270" pos:column="106">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="107">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="271" pos:column="33">System</name><op:operator pos:line="271" pos:column="39">.</op:operator><name pos:line="271" pos:column="40">out</name><op:operator pos:line="271" pos:column="43">.</op:operator><name pos:line="271" pos:column="44">println</name></name><argument_list pos:line="271" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			
			<if pos:line="274" pos:column="25">if<condition pos:line="274" pos:column="27">(<expr><name pos:line="274" pos:column="28">count</name> <op:operator pos:line="274" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="274" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="274" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="275" pos:column="33">System</name><op:operator pos:line="275" pos:column="39">.</op:operator><name pos:line="275" pos:column="40">out</name><op:operator pos:line="275" pos:column="43">.</op:operator><name pos:line="275" pos:column="44">println</name></name><argument_list pos:line="275" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="52">"There are no customers enrolled with this occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="276" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="277" pos:column="33">System</name><op:operator pos:line="277" pos:column="39">.</op:operator><name pos:line="277" pos:column="40">out</name><op:operator pos:line="277" pos:column="43">.</op:operator><name pos:line="277" pos:column="44">println</name></name><argument_list pos:line="277" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="52">"No. of customers with occupation : "</lit:literal> <op:operator pos:line="277" pos:column="90">+</op:operator> <name pos:line="277" pos:column="92">occupation</name> <op:operator pos:line="277" pos:column="103">+</op:operator> <lit:literal type="string" pos:line="277" pos:column="105">" is "</lit:literal> <op:operator pos:line="277" pos:column="112">+</op:operator> <name pos:line="277" pos:column="114">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="278" pos:column="25">result</name><op:operator pos:line="278" pos:column="31">.</op:operator><name pos:line="278" pos:column="32">close</name></name><argument_list pos:line="278" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			
		}</block>
		<catch pos:line="281" pos:column="17">catch<parameter_list pos:line="281" pos:column="22">(<param><decl><type><name pos:line="281" pos:column="23">Exception</name></type> <name pos:line="281" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="282" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="283" pos:column="25">System</name><op:operator pos:line="283" pos:column="31">.</op:operator><name pos:line="283" pos:column="32">out</name><op:operator pos:line="283" pos:column="35">.</op:operator><name pos:line="283" pos:column="36">println</name></name><argument_list pos:line="283" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="44">"Exception in filterOccupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="284" pos:column="25">e</name><op:operator pos:line="284" pos:column="26">.</op:operator><name pos:line="284" pos:column="27">printStackTrace</name></name><argument_list pos:line="284" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="287" pos:column="17">return <expr><name pos:line="287" pos:column="24">count</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc" pos:line="291" pos:column="9">/**
	 * This method filters customers based on the marital status and prints the results.
	 * @param status - holds value of the marital status to be compared with
	 * @return count - number of people with the given marital status
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="298" pos:column="9">public</specifier> <name pos:line="298" pos:column="16">int</name></type> <name pos:line="298" pos:column="20">filterMaritalStatus</name><parameter_list pos:line="298" pos:column="39">(<param><decl><type><name pos:line="298" pos:column="40">String</name></type> <name pos:line="298" pos:column="47">status</name></decl></param>)</parameter_list>
	<block pos:line="299" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="300" pos:column="17">int</name></type> <name pos:line="300" pos:column="21">count</name> <init pos:line="300" pos:column="27">= <expr><lit:literal type="number" pos:line="300" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="301" pos:column="17">Statement</name></type> <name pos:line="301" pos:column="27">stat</name> <init pos:line="301" pos:column="32">= <expr><lit:literal type="null" pos:line="301" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="302" pos:column="17">ResultSet</name></type> <name pos:line="302" pos:column="27">result</name> <init pos:line="302" pos:column="34">= <expr><lit:literal type="null" pos:line="302" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="304" pos:column="17">if<condition pos:line="304" pos:column="19">(<expr><call><name><name pos:line="304" pos:column="20">status</name><op:operator pos:line="304" pos:column="26">.</op:operator><name pos:line="304" pos:column="27">length</name></name><argument_list pos:line="304" pos:column="33">()</argument_list></call> <op:operator pos:line="304" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="304" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="304" pos:column="41">
			<expr_stmt><expr><name pos:line="305" pos:column="25">status</name> <op:operator pos:line="305" pos:column="32">=</op:operator> <lit:literal type="null" pos:line="305" pos:column="34">null</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="306" pos:column="17">if<condition pos:line="306" pos:column="19">(<expr><call><name><name pos:line="306" pos:column="20">status</name><op:operator pos:line="306" pos:column="26">.</op:operator><name pos:line="306" pos:column="27">equals</name></name><argument_list pos:line="306" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="34">"null"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="306" pos:column="42">
			<expr_stmt><expr><name pos:line="307" pos:column="25">status</name> <op:operator pos:line="307" pos:column="32">=</op:operator> <lit:literal type="null" pos:line="307" pos:column="34">null</lit:literal></expr>;</expr_stmt></then></if>
		
		<decl_stmt><decl><type><name pos:line="309" pos:column="17">String</name></type> <name pos:line="309" pos:column="24">cmd_statusSearch</name> <init pos:line="309" pos:column="41">= <expr><lit:literal type="string" pos:line="309" pos:column="43">"SELECT * from userrecord where marital = ' "</lit:literal> <op:operator pos:line="309" pos:column="89">+</op:operator> <name pos:line="309" pos:column="91">status</name> <op:operator pos:line="309" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="309" pos:column="100">"'"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="311" pos:column="17">try
		<block pos:line="312" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="313" pos:column="25">Connection</name></type> <name pos:line="313" pos:column="36">conn</name> <init pos:line="313" pos:column="41">= <expr><call><name><name pos:line="313" pos:column="43">DatabaseConnection</name><op:operator pos:line="313" pos:column="61">.</op:operator><name pos:line="313" pos:column="62">getConnection</name></name><argument_list pos:line="313" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="314" pos:column="25">stat</name> <op:operator pos:line="314" pos:column="30">=</op:operator> <call><name><name pos:line="314" pos:column="32">conn</name><op:operator pos:line="314" pos:column="36">.</op:operator><name pos:line="314" pos:column="37">createStatement</name></name><argument_list pos:line="314" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="315" pos:column="25">result</name> <op:operator pos:line="315" pos:column="32">=</op:operator> <call><name><name pos:line="315" pos:column="34">stat</name><op:operator pos:line="315" pos:column="38">.</op:operator><name pos:line="315" pos:column="39">executeQuery</name></name><argument_list pos:line="315" pos:column="51">(<argument><expr><name pos:line="315" pos:column="52">cmd_statusSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="317" pos:column="25">System</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">out</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">println</name></name><argument_list pos:line="317" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="317" pos:column="44">"List of customers for given Marital Status : "</lit:literal> <op:operator pos:line="317" pos:column="92">+</op:operator> <name pos:line="317" pos:column="94">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="318" pos:column="25">System</name><op:operator pos:line="318" pos:column="31">.</op:operator><name pos:line="318" pos:column="32">out</name><op:operator pos:line="318" pos:column="35">.</op:operator><name pos:line="318" pos:column="36">printf</name></name><argument_list pos:line="318" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="43">"%20s |%20s |"</lit:literal></expr></argument> ,<argument><expr><lit:literal type="string" pos:line="318" pos:column="59">"NAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="67">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="319" pos:column="25">System</name><op:operator pos:line="319" pos:column="31">.</op:operator><name pos:line="319" pos:column="32">out</name><op:operator pos:line="319" pos:column="35">.</op:operator><name pos:line="319" pos:column="36">println</name></name><argument_list pos:line="319" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="321" pos:column="25">//display data from result set</comment>
			<while pos:line="322" pos:column="25">while<condition pos:line="322" pos:column="30">(<expr><call><name><name pos:line="322" pos:column="31">result</name><op:operator pos:line="322" pos:column="37">.</op:operator><name pos:line="322" pos:column="38">next</name></name><argument_list pos:line="322" pos:column="42">()</argument_list></call></expr>)</condition>
			<block pos:line="323" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="324" pos:column="33">++</op:operator><name pos:line="324" pos:column="35">count</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="325" pos:column="33">System</name><op:operator pos:line="325" pos:column="39">.</op:operator><name pos:line="325" pos:column="40">out</name><op:operator pos:line="325" pos:column="43">.</op:operator><name pos:line="325" pos:column="44">printf</name></name><argument_list pos:line="325" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="51">"%s -- %s "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="325" pos:column="64">result</name><op:operator pos:line="325" pos:column="70">.</op:operator><name pos:line="325" pos:column="71">getString</name></name><argument_list pos:line="325" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="81">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="325" pos:column="90">result</name><op:operator pos:line="325" pos:column="96">.</op:operator><name pos:line="325" pos:column="97">getString</name></name><argument_list pos:line="325" pos:column="106">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="107">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="326" pos:column="33">System</name><op:operator pos:line="326" pos:column="39">.</op:operator><name pos:line="326" pos:column="40">out</name><op:operator pos:line="326" pos:column="43">.</op:operator><name pos:line="326" pos:column="44">println</name></name><argument_list pos:line="326" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			
			<if pos:line="329" pos:column="25">if<condition pos:line="329" pos:column="27">(<expr><name pos:line="329" pos:column="28">count</name> <op:operator pos:line="329" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="329" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="329" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="330" pos:column="33">System</name><op:operator pos:line="330" pos:column="39">.</op:operator><name pos:line="330" pos:column="40">out</name><op:operator pos:line="330" pos:column="43">.</op:operator><name pos:line="330" pos:column="44">println</name></name><argument_list pos:line="330" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="330" pos:column="52">"There are no customers enrolled with this status"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="331" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="332" pos:column="33">System</name><op:operator pos:line="332" pos:column="39">.</op:operator><name pos:line="332" pos:column="40">out</name><op:operator pos:line="332" pos:column="43">.</op:operator><name pos:line="332" pos:column="44">println</name></name><argument_list pos:line="332" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="332" pos:column="52">"No. of customers with marital status : "</lit:literal> <op:operator pos:line="332" pos:column="94">+</op:operator> <name pos:line="332" pos:column="96">status</name> <op:operator pos:line="332" pos:column="103">+</op:operator> <lit:literal type="string" pos:line="332" pos:column="105">" is "</lit:literal> <op:operator pos:line="332" pos:column="112">+</op:operator> <name pos:line="332" pos:column="114">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="333" pos:column="25">result</name><op:operator pos:line="333" pos:column="31">.</op:operator><name pos:line="333" pos:column="32">close</name></name><argument_list pos:line="333" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="335" pos:column="17">catch<parameter_list pos:line="335" pos:column="22">(<param><decl><type><name pos:line="335" pos:column="23">Exception</name></type> <name pos:line="335" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="336" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="337" pos:column="25">System</name><op:operator pos:line="337" pos:column="31">.</op:operator><name pos:line="337" pos:column="32">out</name><op:operator pos:line="337" pos:column="35">.</op:operator><name pos:line="337" pos:column="36">println</name></name><argument_list pos:line="337" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="337" pos:column="44">"Exception in filterMaritalStatus"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="338" pos:column="25">e</name><op:operator pos:line="338" pos:column="26">.</op:operator><name pos:line="338" pos:column="27">printStackTrace</name></name><argument_list pos:line="338" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="341" pos:column="17">return <expr><name pos:line="341" pos:column="24">count</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="344" pos:column="9">/**
	 * This method accepts a estimated range of income and then finds how
	 * many people are there in this range of income and lists them
	 * @param getIncome - holds estimated income value to be compared with
	 * @return count - number of people in this income range
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><annotation pos:line="352" pos:column="9">@<name pos:line="352" pos:column="10">TaDaMethod</name><argument_list pos:line="352" pos:column="20">(<argument><expr><name pos:line="352" pos:column="21">variablesToTrack</name> <op:operator pos:line="352" pos:column="38">=</op:operator> <block pos:line="352" pos:column="40">{<expr><lit:literal type="string" pos:line="352" pos:column="41">"dataIncome"</lit:literal></expr><op:operator pos:line="352" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="352" pos:column="55">"dataIncome"</lit:literal></expr></argument><op:operator pos:line="352" pos:column="67">,</op:operator> <argument><expr><lit:literal type="string" pos:line="352" pos:column="69">"dataIncome"</lit:literal></expr></argument><op:operator pos:line="352" pos:column="81">,</op:operator> <argument><expr><lit:literal type="string" pos:line="352" pos:column="83">"dataIncome"</lit:literal></expr></argument><op:operator pos:line="352" pos:column="95">,</op:operator> <argument><expr><lit:literal type="string" pos:line="352" pos:column="97">"dataIncome"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="353" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="353" pos:column="56">=</op:operator> <block pos:line="353" pos:column="58">{<expr><lit:literal type="string" pos:line="353" pos:column="59">"job.workweeks"</lit:literal></expr><op:operator pos:line="353" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="353" pos:column="76">"job.weekwage"</lit:literal></expr></argument><op:operator pos:line="353" pos:column="90">,</op:operator> <argument><expr><lit:literal type="string" pos:line="353" pos:column="92">"investment.capitalgains"</lit:literal></expr></argument><op:operator pos:line="353" pos:column="117">,</op:operator> 
			<argument><expr><lit:literal type="string" pos:line="354" pos:column="25">"investment.capitallosses"</lit:literal></expr></argument><op:operator pos:line="354" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="354" pos:column="53">"investment.stockdividends"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="355" pos:column="9">public</specifier> <name pos:line="355" pos:column="16">int</name></type> <name pos:line="355" pos:column="20">filterEstimatedIncome</name><parameter_list pos:line="355" pos:column="41">(<param><decl><type><name pos:line="355" pos:column="42">String</name></type> <name pos:line="355" pos:column="49">getIncome</name></decl></param>)</parameter_list>
	<block pos:line="356" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="357" pos:column="17">double</name></type> <name pos:line="357" pos:column="24">income</name> <init pos:line="357" pos:column="31">= <expr><lit:literal type="number" pos:line="357" pos:column="33">0</lit:literal></expr></init><op:operator pos:line="357" pos:column="34">,</op:operator> <name pos:line="357" pos:column="36">dataIncome</name> <init pos:line="357" pos:column="47">= <expr><lit:literal type="number" pos:line="357" pos:column="49">0</lit:literal></expr></init></decl>;</decl_stmt>	
		<decl_stmt><decl><type><name pos:line="358" pos:column="17">int</name></type> <name pos:line="358" pos:column="21">count</name> <init pos:line="358" pos:column="27">= <expr><lit:literal type="number" pos:line="358" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="359" pos:column="17">Statement</name></type> <name pos:line="359" pos:column="27">stat</name> <init pos:line="359" pos:column="32">= <expr><lit:literal type="null" pos:line="359" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="360" pos:column="17">ResultSet</name></type> <name pos:line="360" pos:column="27">result</name> <init pos:line="360" pos:column="34">= <expr><lit:literal type="null" pos:line="360" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>		
		
		
		<expr_stmt><expr><name pos:line="363" pos:column="17">income</name> <op:operator pos:line="363" pos:column="24">=</op:operator> <call><name><name pos:line="363" pos:column="26">acc</name><op:operator pos:line="363" pos:column="29">.</op:operator><name pos:line="363" pos:column="30">checkLetterDigit</name></name><argument_list pos:line="363" pos:column="46">(<argument><expr><name pos:line="363" pos:column="47">getIncome</name></expr></argument>, <argument><expr><name><name pos:line="363" pos:column="58">RiskItConstants</name><op:operator pos:line="363" pos:column="73">.</op:operator><name pos:line="363" pos:column="74">INVALID_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="365" pos:column="17">String</name></type> <name pos:line="365" pos:column="24">cmd_filterIncome</name> <init pos:line="365" pos:column="41">= <expr><lit:literal type="string" pos:line="365" pos:column="43">"SELECT  userrecord.name, userrecord.ssn, investment.capitalgains, "</lit:literal> 
								<op:operator pos:line="366" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="366" pos:column="67">"investment.capitallosses, investment.stockdividends, "</lit:literal> 
								<op:operator pos:line="367" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="367" pos:column="67">"job.workweeks, job.weekwage "</lit:literal> 
								<op:operator pos:line="368" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="368" pos:column="67">"FROM  investment, userrecord, job WHERE "</lit:literal>
								<op:operator pos:line="369" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="369" pos:column="67">" investment.ssn = userrecord.ssn and "</lit:literal>
								<op:operator pos:line="370" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="370" pos:column="67">" job.ssn = userrecord.ssn"</lit:literal></expr></init></decl>;</decl_stmt>
			
		<try pos:line="372" pos:column="17">try
		<block pos:line="373" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="374" pos:column="25">Connection</name></type> <name pos:line="374" pos:column="36">conn</name> <init pos:line="374" pos:column="41">= <expr><call><name><name pos:line="374" pos:column="43">DatabaseConnection</name><op:operator pos:line="374" pos:column="61">.</op:operator><name pos:line="374" pos:column="62">getConnection</name></name><argument_list pos:line="374" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="375" pos:column="25">stat</name> <op:operator pos:line="375" pos:column="30">=</op:operator> <call><name><name pos:line="375" pos:column="32">conn</name><op:operator pos:line="375" pos:column="36">.</op:operator><name pos:line="375" pos:column="37">createStatement</name></name><argument_list pos:line="375" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="376" pos:column="25">result</name> <op:operator pos:line="376" pos:column="32">=</op:operator> <call><name><name pos:line="376" pos:column="34">stat</name><op:operator pos:line="376" pos:column="38">.</op:operator><name pos:line="376" pos:column="39">executeQuery</name></name><argument_list pos:line="376" pos:column="51">(<argument><expr><name pos:line="376" pos:column="52">cmd_filterIncome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="378" pos:column="25">System</name><op:operator pos:line="378" pos:column="31">.</op:operator><name pos:line="378" pos:column="32">out</name><op:operator pos:line="378" pos:column="35">.</op:operator><name pos:line="378" pos:column="36">println</name></name><argument_list pos:line="378" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="378" pos:column="44">"List of customers for given Estimated Income : "</lit:literal> <op:operator pos:line="378" pos:column="94">+</op:operator> <name pos:line="378" pos:column="96">income</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="379" pos:column="25">System</name><op:operator pos:line="379" pos:column="31">.</op:operator><name pos:line="379" pos:column="32">out</name><op:operator pos:line="379" pos:column="35">.</op:operator><name pos:line="379" pos:column="36">printf</name></name><argument_list pos:line="379" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="43">"%20s |%20s |"</lit:literal></expr></argument> ,<argument><expr><lit:literal type="string" pos:line="379" pos:column="59">"NAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="379" pos:column="67">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="380" pos:column="25">System</name><op:operator pos:line="380" pos:column="31">.</op:operator><name pos:line="380" pos:column="32">out</name><op:operator pos:line="380" pos:column="35">.</op:operator><name pos:line="380" pos:column="36">println</name></name><argument_list pos:line="380" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="380" pos:column="44">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="382" pos:column="25">//display data from result set</comment>
			<while pos:line="383" pos:column="25">while<condition pos:line="383" pos:column="30">(<expr><call><name><name pos:line="383" pos:column="31">result</name><op:operator pos:line="383" pos:column="37">.</op:operator><name pos:line="383" pos:column="38">next</name></name><argument_list pos:line="383" pos:column="42">()</argument_list></call></expr>)</condition>
			<block pos:line="384" pos:column="25">{		
				<expr_stmt><expr><name pos:line="385" pos:column="33">dataIncome</name> <op:operator pos:line="385" pos:column="44">=</op:operator> <call><name><name pos:line="385" pos:column="46">acc</name><op:operator pos:line="385" pos:column="49">.</op:operator><name pos:line="385" pos:column="50">calculateIncome</name></name><argument_list pos:line="385" pos:column="65">(<argument><expr><call><name><name pos:line="385" pos:column="66">result</name><op:operator pos:line="385" pos:column="72">.</op:operator><name pos:line="385" pos:column="73">getInt</name></name><argument_list pos:line="385" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="385" pos:column="80">"workweeks"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><call><name><name pos:line="386" pos:column="98">result</name><op:operator pos:line="386" pos:column="104">.</op:operator><name pos:line="386" pos:column="105">getInt</name></name><argument_list pos:line="386" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="112">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><call><name><name pos:line="387" pos:column="98">result</name><op:operator pos:line="387" pos:column="104">.</op:operator><name pos:line="387" pos:column="105">getInt</name></name><argument_list pos:line="387" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="112">"capitalGains"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><call><name><name pos:line="388" pos:column="98">result</name><op:operator pos:line="388" pos:column="104">.</op:operator><name pos:line="388" pos:column="105">getInt</name></name><argument_list pos:line="388" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="388" pos:column="112">"capitallosses"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><call><name><name pos:line="389" pos:column="98">result</name><op:operator pos:line="389" pos:column="104">.</op:operator><name pos:line="389" pos:column="105">getInt</name></name><argument_list pos:line="389" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="389" pos:column="112">"stockdividends"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="390" pos:column="33">if<condition pos:line="390" pos:column="35">(<expr><call><name><name pos:line="390" pos:column="36">Math</name><op:operator pos:line="390" pos:column="40">.</op:operator><name pos:line="390" pos:column="41">floor</name></name><argument_list pos:line="390" pos:column="46">(<argument><expr><name pos:line="390" pos:column="47">dataIncome</name></expr></argument>)</argument_list></call> <op:operator pos:line="390" pos:column="59">==</op:operator> <call><name><name pos:line="390" pos:column="62">Math</name><op:operator pos:line="390" pos:column="66">.</op:operator><name pos:line="390" pos:column="67">floor</name></name><argument_list pos:line="390" pos:column="72">(<argument><expr><name pos:line="390" pos:column="73">income</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="81">
				<block pos:line="391" pos:column="33">{
					<expr_stmt><expr><op:operator pos:line="392" pos:column="41">++</op:operator><name pos:line="392" pos:column="43">count</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="393" pos:column="41">System</name><op:operator pos:line="393" pos:column="47">.</op:operator><name pos:line="393" pos:column="48">out</name><op:operator pos:line="393" pos:column="51">.</op:operator><name pos:line="393" pos:column="52">printf</name></name><argument_list pos:line="393" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="59">"%s -- %s "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="393" pos:column="72">result</name><op:operator pos:line="393" pos:column="78">.</op:operator><name pos:line="393" pos:column="79">getString</name></name><argument_list pos:line="393" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="89">"name"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="393" pos:column="98">result</name><op:operator pos:line="393" pos:column="104">.</op:operator><name pos:line="393" pos:column="105">getString</name></name><argument_list pos:line="393" pos:column="114">(<argument><expr><lit:literal type="string" pos:line="393" pos:column="115">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="394" pos:column="41">System</name><op:operator pos:line="394" pos:column="47">.</op:operator><name pos:line="394" pos:column="48">out</name><op:operator pos:line="394" pos:column="51">.</op:operator><name pos:line="394" pos:column="52">println</name></name><argument_list pos:line="394" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="394" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></while>
			
			<if pos:line="398" pos:column="25">if<condition pos:line="398" pos:column="27">(<expr><name pos:line="398" pos:column="28">count</name> <op:operator pos:line="398" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="398" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="398" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="399" pos:column="33">System</name><op:operator pos:line="399" pos:column="39">.</op:operator><name pos:line="399" pos:column="40">out</name><op:operator pos:line="399" pos:column="43">.</op:operator><name pos:line="399" pos:column="44">println</name></name><argument_list pos:line="399" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="399" pos:column="52">"There are no customers enrolled with this estimated income"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="400" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="401" pos:column="33">System</name><op:operator pos:line="401" pos:column="39">.</op:operator><name pos:line="401" pos:column="40">out</name><op:operator pos:line="401" pos:column="43">.</op:operator><name pos:line="401" pos:column="44">println</name></name><argument_list pos:line="401" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="401" pos:column="52">"No. of customers with estimated income : "</lit:literal> <op:operator pos:line="401" pos:column="96">+</op:operator> <name pos:line="401" pos:column="98">income</name> <op:operator pos:line="401" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="401" pos:column="107">" is "</lit:literal> <op:operator pos:line="401" pos:column="114">+</op:operator> <name pos:line="401" pos:column="116">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="402" pos:column="25">result</name><op:operator pos:line="402" pos:column="31">.</op:operator><name pos:line="402" pos:column="32">close</name></name><argument_list pos:line="402" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="404" pos:column="17">catch<parameter_list pos:line="404" pos:column="22">(<param><decl><type><name pos:line="404" pos:column="23">Exception</name></type> <name pos:line="404" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="405" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="406" pos:column="25">System</name><op:operator pos:line="406" pos:column="31">.</op:operator><name pos:line="406" pos:column="32">out</name><op:operator pos:line="406" pos:column="35">.</op:operator><name pos:line="406" pos:column="36">println</name></name><argument_list pos:line="406" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="406" pos:column="44">"Exception in filterEstimatedIncome"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="407" pos:column="25">e</name><op:operator pos:line="407" pos:column="26">.</op:operator><name pos:line="407" pos:column="27">printStackTrace</name></name><argument_list pos:line="407" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="409" pos:column="17">return <expr><name pos:line="409" pos:column="24">count</name></expr>;</return>
	}</block></function>	
	
	<comment type="block" format="javadoc" pos:line="412" pos:column="9">/**
	 * This method accepts any number of inputs and produces a filtered result of customers
	 * @param prop - arraylist containing properties of user input that will used as filter 
	 * @return count - number of customers present that match the given criteria
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="418" pos:column="9">public</specifier> <name pos:line="418" pos:column="16">int</name></type> <name pos:line="418" pos:column="20">browseUserProperties</name><parameter_list pos:line="418" pos:column="40">(<param><decl><type><name><name pos:line="418" pos:column="41">ArrayList</name><argument_list pos:line="418" pos:column="50">&lt;<argument><name pos:line="418" pos:column="51">String</name></argument>&gt;</argument_list></name></type> <name pos:line="418" pos:column="59">prop</name></decl></param>)</parameter_list>
	<block pos:line="419" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="420" pos:column="17">int</name></type> <name pos:line="420" pos:column="21">count</name> <init pos:line="420" pos:column="27">= <expr><lit:literal type="number" pos:line="420" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="421" pos:column="17">Statement</name></type> <name pos:line="421" pos:column="27">stat</name> <init pos:line="421" pos:column="32">= <expr><lit:literal type="null" pos:line="421" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="422" pos:column="17">ResultSet</name></type> <name pos:line="422" pos:column="27">result</name> <init pos:line="422" pos:column="34">= <expr><lit:literal type="null" pos:line="422" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="424" pos:column="17">String</name></type> <name pos:line="424" pos:column="24">cmd_generalSearch</name> <init pos:line="424" pos:column="42">= <expr><lit:literal type="string" pos:line="424" pos:column="44">"Select * from userrecord where "</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="425" pos:column="17">String</name></type> <name pos:line="425" pos:column="24">cmd_userSQL</name> <init pos:line="425" pos:column="36">= <expr><lit:literal type="string" pos:line="425" pos:column="38">""</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="427" pos:column="17">boolean</name></type> <name pos:line="427" pos:column="25">checkDataFlag</name> <init pos:line="427" pos:column="39">= <expr><lit:literal type="boolean" pos:line="427" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="428" pos:column="17">for(<init><decl><type><name pos:line="428" pos:column="21">int</name></type> <name pos:line="428" pos:column="25">i</name><init pos:line="428" pos:column="26">=<expr><lit:literal type="number" pos:line="428" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="428" pos:column="30">i</name> <op:operator pos:line="428" pos:column="32">&lt;</op:operator> <call><name><name pos:line="428" pos:column="34">prop</name><op:operator pos:line="428" pos:column="38">.</op:operator><name pos:line="428" pos:column="39">size</name></name><argument_list pos:line="428" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="428" pos:column="47">++</op:operator><name pos:line="428" pos:column="49">i</name></expr></incr>)
		<block pos:line="429" pos:column="17">{
			<if pos:line="430" pos:column="25">if<condition pos:line="430" pos:column="27">(<expr><call><name><name pos:line="430" pos:column="28">prop</name><op:operator pos:line="430" pos:column="32">.</op:operator><name pos:line="430" pos:column="33">get</name></name><argument_list pos:line="430" pos:column="36">(<argument><expr><name pos:line="430" pos:column="37">i</name></expr></argument>)</argument_list></call><op:operator pos:line="430" pos:column="39">.</op:operator><call><name pos:line="430" pos:column="40">length</name><argument_list pos:line="430" pos:column="46">()</argument_list></call> <op:operator pos:line="430" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="430" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="430" pos:column="53">
				<expr_stmt><expr><name pos:line="431" pos:column="33">checkDataFlag</name> <op:operator pos:line="431" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="431" pos:column="49">true</lit:literal></expr>;</expr_stmt></then></if>
		}</block></for>
		<decl_stmt><decl><type><name pos:line="433" pos:column="17">int</name></type> <name pos:line="433" pos:column="21">index</name> <init pos:line="433" pos:column="27">=<expr><lit:literal type="number" pos:line="433" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="435" pos:column="17">//check to see which data are available to build the SQL query</comment>
		
		<if pos:line="437" pos:column="17">if<condition pos:line="437" pos:column="19">(<expr><name pos:line="437" pos:column="20">checkDataFlag</name></expr>)</condition><then pos:line="437" pos:column="34">
		<block pos:line="438" pos:column="17">{
			<comment type="line" pos:line="439" pos:column="25">//name</comment>
			<if pos:line="440" pos:column="25">if<condition pos:line="440" pos:column="27">(<expr><call><name><name pos:line="440" pos:column="28">prop</name><op:operator pos:line="440" pos:column="32">.</op:operator><name pos:line="440" pos:column="33">get</name></name><argument_list pos:line="440" pos:column="36">(<argument><expr><name pos:line="440" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="440" pos:column="43">.</op:operator><call><name pos:line="440" pos:column="44">length</name><argument_list pos:line="440" pos:column="50">()</argument_list></call> <op:operator pos:line="440" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="440" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="440" pos:column="57">
				<expr_stmt><expr><name pos:line="441" pos:column="33">cmd_userSQL</name> <op:operator pos:line="441" pos:column="45">=</op:operator> <name pos:line="441" pos:column="47">cmd_userSQL</name> <op:operator pos:line="441" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="441" pos:column="61">"name = '"</lit:literal> <op:operator pos:line="441" pos:column="72">+</op:operator> <call><name><name pos:line="441" pos:column="74">prop</name><op:operator pos:line="441" pos:column="78">.</op:operator><name pos:line="441" pos:column="79">get</name></name><argument_list pos:line="441" pos:column="82">(<argument><expr><name pos:line="441" pos:column="83">index</name></expr></argument>)</argument_list></call> <op:operator pos:line="441" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="441" pos:column="92">"'"</lit:literal></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><op:operator pos:line="442" pos:column="25">++</op:operator><name pos:line="442" pos:column="27">index</name></expr>;</expr_stmt>
			
			
			<comment type="line" pos:line="445" pos:column="25">//ssn</comment>
			<if pos:line="446" pos:column="25">if<condition pos:line="446" pos:column="27">(<expr><call><name><name pos:line="446" pos:column="28">prop</name><op:operator pos:line="446" pos:column="32">.</op:operator><name pos:line="446" pos:column="33">get</name></name><argument_list pos:line="446" pos:column="36">(<argument><expr><name pos:line="446" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="446" pos:column="43">.</op:operator><call><name pos:line="446" pos:column="44">length</name><argument_list pos:line="446" pos:column="50">()</argument_list></call> <op:operator pos:line="446" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="446" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="446" pos:column="57">
			<block pos:line="447" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="448" pos:column="33">String</name></type> <name pos:line="448" pos:column="40">andJoin</name> <init pos:line="448" pos:column="48">= <expr><lit:literal type="string" pos:line="448" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="449" pos:column="33">if<condition pos:line="449" pos:column="35">(<expr><call><name><name pos:line="449" pos:column="36">cmd_userSQL</name><op:operator pos:line="449" pos:column="47">.</op:operator><name pos:line="449" pos:column="48">length</name></name><argument_list pos:line="449" pos:column="54">()</argument_list></call> <op:operator pos:line="449" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="449" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="449" pos:column="61">
					<expr_stmt><expr><name pos:line="450" pos:column="41">andJoin</name> <op:operator pos:line="450" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="450" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="451" pos:column="33">cmd_userSQL</name> <op:operator pos:line="451" pos:column="45">=</op:operator> <name pos:line="451" pos:column="47">cmd_userSQL</name> <op:operator pos:line="451" pos:column="59">+</op:operator> <name pos:line="451" pos:column="61">andJoin</name> <op:operator pos:line="451" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="451" pos:column="71">" ssn = "</lit:literal> <op:operator pos:line="451" pos:column="81">+</op:operator> <call><name><name pos:line="451" pos:column="83">prop</name><op:operator pos:line="451" pos:column="87">.</op:operator><name pos:line="451" pos:column="88">get</name></name><argument_list pos:line="451" pos:column="91">(<argument><expr><name pos:line="451" pos:column="92">index</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="454" pos:column="25">++</op:operator><name pos:line="454" pos:column="27">index</name></expr>;</expr_stmt>
			
			<comment type="line" pos:line="456" pos:column="25">//age</comment>
			<if pos:line="457" pos:column="25">if<condition pos:line="457" pos:column="27">(<expr><call><name><name pos:line="457" pos:column="28">prop</name><op:operator pos:line="457" pos:column="32">.</op:operator><name pos:line="457" pos:column="33">get</name></name><argument_list pos:line="457" pos:column="36">(<argument><expr><name pos:line="457" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="457" pos:column="43">.</op:operator><call><name pos:line="457" pos:column="44">length</name><argument_list pos:line="457" pos:column="50">()</argument_list></call> <op:operator pos:line="457" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="457" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="457" pos:column="57">
			<block pos:line="458" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="459" pos:column="33">String</name></type> <name pos:line="459" pos:column="40">andJoin</name> <init pos:line="459" pos:column="48">= <expr><lit:literal type="string" pos:line="459" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="460" pos:column="33">if<condition pos:line="460" pos:column="35">(<expr><call><name><name pos:line="460" pos:column="36">cmd_userSQL</name><op:operator pos:line="460" pos:column="47">.</op:operator><name pos:line="460" pos:column="48">length</name></name><argument_list pos:line="460" pos:column="54">()</argument_list></call> <op:operator pos:line="460" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="460" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="460" pos:column="61">
					<expr_stmt><expr><name pos:line="461" pos:column="41">andJoin</name> <op:operator pos:line="461" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="461" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="462" pos:column="33">cmd_userSQL</name> <op:operator pos:line="462" pos:column="45">=</op:operator> <name pos:line="462" pos:column="47">cmd_userSQL</name> <op:operator pos:line="462" pos:column="59">+</op:operator> <name pos:line="462" pos:column="61">andJoin</name> <op:operator pos:line="462" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="462" pos:column="71">" age = "</lit:literal> <op:operator pos:line="462" pos:column="81">+</op:operator> <call><name><name pos:line="462" pos:column="83">prop</name><op:operator pos:line="462" pos:column="87">.</op:operator><name pos:line="462" pos:column="88">get</name></name><argument_list pos:line="462" pos:column="91">(<argument><expr><name pos:line="462" pos:column="92">index</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
				
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="465" pos:column="25">++</op:operator><name pos:line="465" pos:column="27">index</name></expr>;</expr_stmt>
			
			<comment type="line" pos:line="467" pos:column="25">//sex</comment>
			<if pos:line="468" pos:column="25">if<condition pos:line="468" pos:column="27">(<expr><call><name><name pos:line="468" pos:column="28">prop</name><op:operator pos:line="468" pos:column="32">.</op:operator><name pos:line="468" pos:column="33">get</name></name><argument_list pos:line="468" pos:column="36">(<argument><expr><name pos:line="468" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="468" pos:column="43">.</op:operator><call><name pos:line="468" pos:column="44">length</name><argument_list pos:line="468" pos:column="50">()</argument_list></call> <op:operator pos:line="468" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="468" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="468" pos:column="57">
			<block pos:line="469" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="470" pos:column="33">String</name></type> <name pos:line="470" pos:column="40">andJoin</name> <init pos:line="470" pos:column="48">= <expr><lit:literal type="string" pos:line="470" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="471" pos:column="33">if<condition pos:line="471" pos:column="35">(<expr><call><name><name pos:line="471" pos:column="36">cmd_userSQL</name><op:operator pos:line="471" pos:column="47">.</op:operator><name pos:line="471" pos:column="48">length</name></name><argument_list pos:line="471" pos:column="54">()</argument_list></call> <op:operator pos:line="471" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="471" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="471" pos:column="61">
					<expr_stmt><expr><name pos:line="472" pos:column="41">andJoin</name> <op:operator pos:line="472" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="472" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				
				<expr_stmt><expr><name pos:line="474" pos:column="33">cmd_userSQL</name> <op:operator pos:line="474" pos:column="45">=</op:operator> <name pos:line="474" pos:column="47">cmd_userSQL</name> <op:operator pos:line="474" pos:column="59">+</op:operator> <name pos:line="474" pos:column="61">andJoin</name> <op:operator pos:line="474" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="474" pos:column="71">" sex = ' "</lit:literal> <op:operator pos:line="474" pos:column="83">+</op:operator> <call><name><name pos:line="474" pos:column="85">prop</name><op:operator pos:line="474" pos:column="89">.</op:operator><name pos:line="474" pos:column="90">get</name></name><argument_list pos:line="474" pos:column="93">(<argument><expr><name pos:line="474" pos:column="94">index</name></expr></argument>)</argument_list></call> <op:operator pos:line="474" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="474" pos:column="103">"'"</lit:literal></expr>;</expr_stmt>
				
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="477" pos:column="25">++</op:operator><name pos:line="477" pos:column="27">index</name></expr>;</expr_stmt>
			
			<comment type="line" pos:line="479" pos:column="25">//marital-status</comment>
			<if pos:line="480" pos:column="25">if<condition pos:line="480" pos:column="27">(<expr><call><name><name pos:line="480" pos:column="28">prop</name><op:operator pos:line="480" pos:column="32">.</op:operator><name pos:line="480" pos:column="33">get</name></name><argument_list pos:line="480" pos:column="36">(<argument><expr><name pos:line="480" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="480" pos:column="43">.</op:operator><call><name pos:line="480" pos:column="44">length</name><argument_list pos:line="480" pos:column="50">()</argument_list></call> <op:operator pos:line="480" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="480" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="480" pos:column="57">
			<block pos:line="481" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="482" pos:column="33">String</name></type> <name pos:line="482" pos:column="40">andJoin</name> <init pos:line="482" pos:column="48">= <expr><lit:literal type="string" pos:line="482" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="483" pos:column="33">if<condition pos:line="483" pos:column="35">(<expr><call><name><name pos:line="483" pos:column="36">cmd_userSQL</name><op:operator pos:line="483" pos:column="47">.</op:operator><name pos:line="483" pos:column="48">length</name></name><argument_list pos:line="483" pos:column="54">()</argument_list></call> <op:operator pos:line="483" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="483" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="483" pos:column="61">
					<expr_stmt><expr><name pos:line="484" pos:column="41">andJoin</name> <op:operator pos:line="484" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="484" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				
				<expr_stmt><expr><name pos:line="486" pos:column="33">cmd_userSQL</name> <op:operator pos:line="486" pos:column="45">=</op:operator> <name pos:line="486" pos:column="47">cmd_userSQL</name> <op:operator pos:line="486" pos:column="59">+</op:operator> <name pos:line="486" pos:column="61">andJoin</name> <op:operator pos:line="486" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="486" pos:column="71">" marital = ' "</lit:literal> <op:operator pos:line="486" pos:column="87">+</op:operator> <call><name><name pos:line="486" pos:column="89">prop</name><op:operator pos:line="486" pos:column="93">.</op:operator><name pos:line="486" pos:column="94">get</name></name><argument_list pos:line="486" pos:column="97">(<argument><expr><name pos:line="486" pos:column="98">index</name></expr></argument>)</argument_list></call> <op:operator pos:line="486" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="486" pos:column="107">"'"</lit:literal></expr>;</expr_stmt>
				
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="489" pos:column="25">++</op:operator><name pos:line="489" pos:column="27">index</name></expr>;</expr_stmt>
			
			<comment type="line" pos:line="491" pos:column="25">//race</comment>
			<if pos:line="492" pos:column="25">if<condition pos:line="492" pos:column="27">(<expr><call><name><name pos:line="492" pos:column="28">prop</name><op:operator pos:line="492" pos:column="32">.</op:operator><name pos:line="492" pos:column="33">get</name></name><argument_list pos:line="492" pos:column="36">(<argument><expr><name pos:line="492" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="492" pos:column="43">.</op:operator><call><name pos:line="492" pos:column="44">length</name><argument_list pos:line="492" pos:column="50">()</argument_list></call> <op:operator pos:line="492" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="492" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="492" pos:column="57">
			<block pos:line="493" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="494" pos:column="33">String</name></type> <name pos:line="494" pos:column="40">andJoin</name> <init pos:line="494" pos:column="48">= <expr><lit:literal type="string" pos:line="494" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="495" pos:column="33">if<condition pos:line="495" pos:column="35">(<expr><call><name><name pos:line="495" pos:column="36">cmd_userSQL</name><op:operator pos:line="495" pos:column="47">.</op:operator><name pos:line="495" pos:column="48">length</name></name><argument_list pos:line="495" pos:column="54">()</argument_list></call> <op:operator pos:line="495" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="495" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="495" pos:column="61">
					<expr_stmt><expr><name pos:line="496" pos:column="41">andJoin</name> <op:operator pos:line="496" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="496" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				
				<expr_stmt><expr><name pos:line="498" pos:column="33">cmd_userSQL</name> <op:operator pos:line="498" pos:column="45">=</op:operator> <name pos:line="498" pos:column="47">cmd_userSQL</name> <op:operator pos:line="498" pos:column="59">+</op:operator> <name pos:line="498" pos:column="61">andJoin</name> <op:operator pos:line="498" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="498" pos:column="71">" race = ' "</lit:literal> <op:operator pos:line="498" pos:column="84">+</op:operator> <call><name><name pos:line="498" pos:column="86">prop</name><op:operator pos:line="498" pos:column="90">.</op:operator><name pos:line="498" pos:column="91">get</name></name><argument_list pos:line="498" pos:column="94">(<argument><expr><name pos:line="498" pos:column="95">index</name></expr></argument>)</argument_list></call> <op:operator pos:line="498" pos:column="102">+</op:operator> <lit:literal type="string" pos:line="498" pos:column="104">"'"</lit:literal></expr>;</expr_stmt>			
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="500" pos:column="25">++</op:operator><name pos:line="500" pos:column="27">index</name></expr>;</expr_stmt>
			
			<comment type="line" pos:line="502" pos:column="25">//country</comment>
			<if pos:line="503" pos:column="25">if<condition pos:line="503" pos:column="27">(<expr><call><name><name pos:line="503" pos:column="28">prop</name><op:operator pos:line="503" pos:column="32">.</op:operator><name pos:line="503" pos:column="33">get</name></name><argument_list pos:line="503" pos:column="36">(<argument><expr><name pos:line="503" pos:column="37">index</name></expr></argument>)</argument_list></call><op:operator pos:line="503" pos:column="43">.</op:operator><call><name pos:line="503" pos:column="44">length</name><argument_list pos:line="503" pos:column="50">()</argument_list></call> <op:operator pos:line="503" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="503" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="503" pos:column="57">
			<block pos:line="504" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="505" pos:column="33">String</name></type> <name pos:line="505" pos:column="40">andJoin</name> <init pos:line="505" pos:column="48">= <expr><lit:literal type="string" pos:line="505" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="506" pos:column="33">if<condition pos:line="506" pos:column="35">(<expr><call><name><name pos:line="506" pos:column="36">cmd_userSQL</name><op:operator pos:line="506" pos:column="47">.</op:operator><name pos:line="506" pos:column="48">length</name></name><argument_list pos:line="506" pos:column="54">()</argument_list></call> <op:operator pos:line="506" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="506" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="506" pos:column="61">
					<expr_stmt><expr><name pos:line="507" pos:column="41">andJoin</name> <op:operator pos:line="507" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="507" pos:column="51">" and "</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="508" pos:column="33">cmd_userSQL</name> <op:operator pos:line="508" pos:column="45">=</op:operator> <name pos:line="508" pos:column="47">cmd_userSQL</name> <op:operator pos:line="508" pos:column="59">+</op:operator> <name pos:line="508" pos:column="61">andJoin</name> <op:operator pos:line="508" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="508" pos:column="71">" birthcountry = ' "</lit:literal> <op:operator pos:line="508" pos:column="92">+</op:operator> <call><name><name pos:line="508" pos:column="94">prop</name><op:operator pos:line="508" pos:column="98">.</op:operator><name pos:line="508" pos:column="99">get</name></name><argument_list pos:line="508" pos:column="102">(<argument><expr><name pos:line="508" pos:column="103">index</name></expr></argument>)</argument_list></call> <op:operator pos:line="508" pos:column="110">+</op:operator> <lit:literal type="string" pos:line="508" pos:column="112">"'"</lit:literal></expr>;</expr_stmt>
				
			}</block></then></if>
			<expr_stmt><expr><op:operator pos:line="511" pos:column="25">++</op:operator><name pos:line="511" pos:column="27">index</name></expr>;</expr_stmt>	
			
			<expr_stmt><expr><name pos:line="513" pos:column="25">cmd_generalSearch</name> <op:operator pos:line="513" pos:column="43">=</op:operator> <name pos:line="513" pos:column="45">cmd_generalSearch</name> <op:operator pos:line="513" pos:column="63">+</op:operator>  <name pos:line="513" pos:column="66">cmd_userSQL</name></expr>;</expr_stmt>
				
			<try pos:line="515" pos:column="25">try
			<block pos:line="516" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="517" pos:column="33">Connection</name></type> <name pos:line="517" pos:column="44">conn</name> <init pos:line="517" pos:column="49">= <expr><call><name><name pos:line="517" pos:column="51">DatabaseConnection</name><op:operator pos:line="517" pos:column="69">.</op:operator><name pos:line="517" pos:column="70">getConnection</name></name><argument_list pos:line="517" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="518" pos:column="33">stat</name> <op:operator pos:line="518" pos:column="38">=</op:operator> <call><name><name pos:line="518" pos:column="40">conn</name><op:operator pos:line="518" pos:column="44">.</op:operator><name pos:line="518" pos:column="45">createStatement</name></name><argument_list pos:line="518" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="519" pos:column="33">result</name> <op:operator pos:line="519" pos:column="40">=</op:operator> <call><name><name pos:line="519" pos:column="42">stat</name><op:operator pos:line="519" pos:column="46">.</op:operator><name pos:line="519" pos:column="47">executeQuery</name></name><argument_list pos:line="519" pos:column="59">(<argument><expr><name pos:line="519" pos:column="60">cmd_generalSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
				
				<while pos:line="521" pos:column="33">while<condition pos:line="521" pos:column="38">(<expr><call><name><name pos:line="521" pos:column="39">result</name><op:operator pos:line="521" pos:column="45">.</op:operator><name pos:line="521" pos:column="46">next</name></name><argument_list pos:line="521" pos:column="50">()</argument_list></call></expr>)</condition>
				<block pos:line="522" pos:column="33">{
					<expr_stmt><expr><op:operator pos:line="523" pos:column="41">++</op:operator><name pos:line="523" pos:column="43">count</name></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="525" pos:column="41">System</name><op:operator pos:line="525" pos:column="47">.</op:operator><name pos:line="525" pos:column="48">out</name><op:operator pos:line="525" pos:column="51">.</op:operator><name pos:line="525" pos:column="52">println</name></name><argument_list pos:line="525" pos:column="59">(   <argument><expr><call><name><name pos:line="525" pos:column="63">result</name><op:operator pos:line="525" pos:column="69">.</op:operator><name pos:line="525" pos:column="70">getString</name></name><argument_list pos:line="525" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="525" pos:column="80">"name"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="525" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="525" pos:column="89">"-&gt;"</lit:literal> 
										<op:operator pos:line="526" pos:column="81">+</op:operator> <call><name><name pos:line="526" pos:column="83">result</name><op:operator pos:line="526" pos:column="89">.</op:operator><name pos:line="526" pos:column="90">getInt</name></name><argument_list pos:line="526" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="97">"ssn"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="526" pos:column="104">+</op:operator> <lit:literal type="string" pos:line="526" pos:column="106">"-&gt;"</lit:literal> 
										<op:operator pos:line="527" pos:column="81">+</op:operator> <call><name><name pos:line="527" pos:column="83">result</name><op:operator pos:line="527" pos:column="89">.</op:operator><name pos:line="527" pos:column="90">getString</name></name><argument_list pos:line="527" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="527" pos:column="100">"age"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="527" pos:column="107">+</op:operator> <lit:literal type="string" pos:line="527" pos:column="109">"-&gt;"</lit:literal>
										<op:operator pos:line="528" pos:column="81">+</op:operator> <call><name><name pos:line="528" pos:column="83">result</name><op:operator pos:line="528" pos:column="89">.</op:operator><name pos:line="528" pos:column="90">getString</name></name><argument_list pos:line="528" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="100">"sex"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="528" pos:column="107">+</op:operator> <lit:literal type="string" pos:line="528" pos:column="109">"-&gt;"</lit:literal>
										<op:operator pos:line="529" pos:column="81">+</op:operator> <call><name><name pos:line="529" pos:column="83">result</name><op:operator pos:line="529" pos:column="89">.</op:operator><name pos:line="529" pos:column="90">getString</name></name><argument_list pos:line="529" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="529" pos:column="100">"marital"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="529" pos:column="111">+</op:operator> <lit:literal type="string" pos:line="529" pos:column="113">"-&gt;"</lit:literal>
										<op:operator pos:line="530" pos:column="81">+</op:operator> <call><name><name pos:line="530" pos:column="83">result</name><op:operator pos:line="530" pos:column="89">.</op:operator><name pos:line="530" pos:column="90">getString</name></name><argument_list pos:line="530" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="530" pos:column="100">"race"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="530" pos:column="108">+</op:operator> <lit:literal type="string" pos:line="530" pos:column="110">"-&gt;"</lit:literal>
										<op:operator pos:line="531" pos:column="81">+</op:operator> <call><name><name pos:line="531" pos:column="83">result</name><op:operator pos:line="531" pos:column="89">.</op:operator><name pos:line="531" pos:column="90">getString</name></name><argument_list pos:line="531" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="531" pos:column="100">"birthcountry"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				}</block></while>
				<expr_stmt><expr><call><name><name pos:line="533" pos:column="33">result</name><op:operator pos:line="533" pos:column="39">.</op:operator><name pos:line="533" pos:column="40">close</name></name><argument_list pos:line="533" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
			}</block>					
			<catch pos:line="535" pos:column="25">catch<parameter_list pos:line="535" pos:column="30">(<param><decl><type><name pos:line="535" pos:column="31">Exception</name></type> <name pos:line="535" pos:column="41">e</name></decl></param>)</parameter_list>
			<block pos:line="536" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="537" pos:column="33">System</name><op:operator pos:line="537" pos:column="39">.</op:operator><name pos:line="537" pos:column="40">out</name><op:operator pos:line="537" pos:column="43">.</op:operator><name pos:line="537" pos:column="44">println</name></name><argument_list pos:line="537" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="537" pos:column="52">"Exception in browseUserProperties"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="538" pos:column="33">e</name><op:operator pos:line="538" pos:column="34">.</op:operator><name pos:line="538" pos:column="35">printStackTrace</name></name><argument_list pos:line="538" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then>
		<else pos:line="541" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="542" pos:column="25">System</name><op:operator pos:line="542" pos:column="31">.</op:operator><name pos:line="542" pos:column="32">out</name><op:operator pos:line="542" pos:column="35">.</op:operator><name pos:line="542" pos:column="36">println</name></name><argument_list pos:line="542" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="542" pos:column="44">"There is no data to filter out customers"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		
		<return pos:line="544" pos:column="17">return <expr><name pos:line="544" pos:column="24">count</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="547" pos:column="9">/**
	 * This method calculates a quote for a customer, when they choose to find
	 * quotes by themselves. This method will accept the net worth of the property
	 *  with all expenses and and deductibles and gives a value.
	 * @param ssn - SSN of the customer
	 * @param deductible - deductible that customer wishes to pay
	 * @param netWorth - worth of all of property
	 * @param userList - list of all customers, if available , to match data
	 * @return calc_invite - user object with all calculated values
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="559" pos:column="9">public</specifier> <name pos:line="559" pos:column="16">Invitation</name></type> <name pos:line="559" pos:column="27">calculateQuoteForCustomer</name><parameter_list pos:line="559" pos:column="52">(<param><decl><type><name pos:line="559" pos:column="53">long</name></type> <name pos:line="559" pos:column="58">ssn</name></decl></param>, <param><decl><type><name pos:line="559" pos:column="63">double</name></type> <name pos:line="559" pos:column="70">deductible</name></decl></param>, 
											<param><decl><type><name pos:line="560" pos:column="89">double</name></type> <name pos:line="560" pos:column="96">netWorth</name></decl></param>, 
											<param><decl><type><name><name pos:line="561" pos:column="89">ArrayList</name><argument_list pos:line="561" pos:column="98">&lt;<argument><name pos:line="561" pos:column="99">Invitation</name></argument>&gt;</argument_list></name></type> <name pos:line="561" pos:column="111">userList</name></decl></param>)</parameter_list>
	<block pos:line="562" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="563" pos:column="17">double</name></type> <name pos:line="563" pos:column="24">quote</name> <init pos:line="563" pos:column="30">= <expr><lit:literal type="number" pos:line="563" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="564" pos:column="17">Invitation</name></type> <name pos:line="564" pos:column="28">inv</name> <init pos:line="564" pos:column="32">= <expr><op:operator pos:line="564" pos:column="34">new</op:operator> <call><name pos:line="564" pos:column="38">Invitation</name><argument_list pos:line="564" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="565" pos:column="17">Invitation</name></type> <name pos:line="565" pos:column="28">calc_invite</name> <init pos:line="565" pos:column="40">= <expr><op:operator pos:line="565" pos:column="42">new</op:operator> <call><name pos:line="565" pos:column="46">Invitation</name><argument_list pos:line="565" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="566" pos:column="17">int</name></type> <name><name pos:line="566" pos:column="21">deduct_list</name><index pos:line="566" pos:column="32">[]</index></name> <init pos:line="566" pos:column="35">= <expr><block pos:line="566" pos:column="37">{<expr><lit:literal type="number" pos:line="566" pos:column="38">100</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="43">250</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="48">500</lit:literal></expr>,<expr><lit:literal type="number" pos:line="566" pos:column="52">1000</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="58">1500</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="64">2000</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="70">2500</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="76">5000</lit:literal></expr>, <expr><lit:literal type="number" pos:line="566" pos:column="82">10000</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="567" pos:column="17">boolean</name></type> <name pos:line="567" pos:column="25">checkFlag</name> <init pos:line="567" pos:column="35">= <expr><lit:literal type="boolean" pos:line="567" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="569" pos:column="17">//check to see if customer is already present in lsit</comment>
		<for pos:line="570" pos:column="17">for(<init><decl><type><name pos:line="570" pos:column="21">int</name></type> <name pos:line="570" pos:column="25">i</name><init pos:line="570" pos:column="26">=<expr><lit:literal type="number" pos:line="570" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="570" pos:column="30">i</name> <op:operator pos:line="570" pos:column="32">&lt;</op:operator> <call><name><name pos:line="570" pos:column="34">userList</name><op:operator pos:line="570" pos:column="42">.</op:operator><name pos:line="570" pos:column="43">size</name></name><argument_list pos:line="570" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="570" pos:column="51">++</op:operator><name pos:line="570" pos:column="53">i</name></expr></incr>)
		<block pos:line="571" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="572" pos:column="25">System</name><op:operator pos:line="572" pos:column="31">.</op:operator><name pos:line="572" pos:column="32">out</name><op:operator pos:line="572" pos:column="35">.</op:operator><name pos:line="572" pos:column="36">println</name></name><argument_list pos:line="572" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="572" pos:column="44">"flow:10"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="573" pos:column="25">inv</name> <op:operator pos:line="573" pos:column="29">=</op:operator> <call><name><name pos:line="573" pos:column="31">userList</name><op:operator pos:line="573" pos:column="39">.</op:operator><name pos:line="573" pos:column="40">get</name></name><argument_list pos:line="573" pos:column="43">(<argument><expr><name pos:line="573" pos:column="44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="574" pos:column="25">if<condition pos:line="574" pos:column="27">(<expr><call><name><name pos:line="574" pos:column="28">inv</name><op:operator pos:line="574" pos:column="31">.</op:operator><name pos:line="574" pos:column="32">getUserSSN</name></name><argument_list pos:line="574" pos:column="42">()</argument_list></call> <op:operator pos:line="574" pos:column="45">==</op:operator> <name pos:line="574" pos:column="48">ssn</name></expr>)</condition><then pos:line="574" pos:column="52">
			<block pos:line="575" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="576" pos:column="33">System</name><op:operator pos:line="576" pos:column="39">.</op:operator><name pos:line="576" pos:column="40">out</name><op:operator pos:line="576" pos:column="43">.</op:operator><name pos:line="576" pos:column="44">println</name></name><argument_list pos:line="576" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="576" pos:column="52">"flow:11"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="577" pos:column="33">checkFlag</name> <op:operator pos:line="577" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="577" pos:column="45">true</lit:literal></expr>;</expr_stmt>
				<break pos:line="578" pos:column="33">break;</break>
			}</block></then></if>
		}</block></for>
		
		<if pos:line="582" pos:column="17">if<condition pos:line="582" pos:column="19">(<expr><name pos:line="582" pos:column="20">checkFlag</name></expr>)</condition><then pos:line="582" pos:column="30">
		<block pos:line="583" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="584" pos:column="25">System</name><op:operator pos:line="584" pos:column="31">.</op:operator><name pos:line="584" pos:column="32">out</name><op:operator pos:line="584" pos:column="35">.</op:operator><name pos:line="584" pos:column="36">println</name></name><argument_list pos:line="584" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="584" pos:column="44">"flow:12"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="585" pos:column="25">System</name><op:operator pos:line="585" pos:column="31">.</op:operator><name pos:line="585" pos:column="32">out</name><op:operator pos:line="585" pos:column="35">.</op:operator><name pos:line="585" pos:column="36">println</name></name><argument_list pos:line="585" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="585" pos:column="44">"You have received $"</lit:literal> <op:operator pos:line="585" pos:column="66">+</op:operator> <call><name><name pos:line="585" pos:column="68">inv</name><op:operator pos:line="585" pos:column="71">.</op:operator><name pos:line="585" pos:column="72">getPremium</name></name><argument_list pos:line="585" pos:column="82">()</argument_list></call> <op:operator pos:line="585" pos:column="85">+</op:operator>
					<lit:literal type="string" pos:line="586" pos:column="41">" for the property value of "</lit:literal> <op:operator pos:line="586" pos:column="71">+</op:operator> <call><name><name pos:line="586" pos:column="73">inv</name><op:operator pos:line="586" pos:column="76">.</op:operator><name pos:line="586" pos:column="77">getPropertyValue</name></name><argument_list pos:line="586" pos:column="93">()</argument_list></call> <op:operator pos:line="586" pos:column="96">+</op:operator>
					<lit:literal type="string" pos:line="587" pos:column="41">" and deductible of $"</lit:literal> <op:operator pos:line="587" pos:column="64">+</op:operator> <call><name><name pos:line="587" pos:column="66">inv</name><op:operator pos:line="587" pos:column="69">.</op:operator><name pos:line="587" pos:column="70">getDeductible</name></name><argument_list pos:line="587" pos:column="83">()</argument_list></call> <op:operator pos:line="587" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="587" pos:column="88">"\n\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name pos:line="589" pos:column="17">System</name><op:operator pos:line="589" pos:column="23">.</op:operator><name pos:line="589" pos:column="24">out</name><op:operator pos:line="589" pos:column="27">.</op:operator><name pos:line="589" pos:column="28">println</name></name><argument_list pos:line="589" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="589" pos:column="36">"For the expenses that you have provided, the quote will be ..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		<for pos:line="591" pos:column="17">for(<init><decl><type><name pos:line="591" pos:column="21">int</name></type> <name pos:line="591" pos:column="25">i</name><init pos:line="591" pos:column="26">=<expr><lit:literal type="number" pos:line="591" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="591" pos:column="30">i</name> <op:operator pos:line="591" pos:column="32">&lt;</op:operator> <name><name pos:line="591" pos:column="34">deduct_list</name><op:operator pos:line="591" pos:column="45">.</op:operator><name pos:line="591" pos:column="46">length</name></name></expr>;</condition> <incr><expr><op:operator pos:line="591" pos:column="54">++</op:operator><name pos:line="591" pos:column="56">i</name></expr></incr>)
		<block pos:line="592" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="593" pos:column="25">System</name><op:operator pos:line="593" pos:column="31">.</op:operator><name pos:line="593" pos:column="32">out</name><op:operator pos:line="593" pos:column="35">.</op:operator><name pos:line="593" pos:column="36">println</name></name><argument_list pos:line="593" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="593" pos:column="44">"flow:13"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="594" pos:column="25">//set all the values</comment>
			<expr_stmt><expr><call><name><name pos:line="595" pos:column="25">calc_invite</name><op:operator pos:line="595" pos:column="36">.</op:operator><name pos:line="595" pos:column="37">setUserSSN</name></name><argument_list pos:line="595" pos:column="47">(<argument><expr><name pos:line="595" pos:column="48">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="596" pos:column="25">calc_invite</name><op:operator pos:line="596" pos:column="36">.</op:operator><name pos:line="596" pos:column="37">setDeductible</name></name><argument_list pos:line="596" pos:column="50">(<argument><expr><name><name pos:line="596" pos:column="51">deduct_list</name><index pos:line="596" pos:column="62">[<expr><name pos:line="596" pos:column="63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="597" pos:column="25">calc_invite</name><op:operator pos:line="597" pos:column="36">.</op:operator><name pos:line="597" pos:column="37">setPropertyValue</name></name><argument_list pos:line="597" pos:column="53">(<argument><expr><name pos:line="597" pos:column="54">netWorth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="599" pos:column="25">//assume the property exposure unit is 30% of the property value</comment>
			<expr_stmt><expr><call><name><name pos:line="600" pos:column="25">calc_invite</name><op:operator pos:line="600" pos:column="36">.</op:operator><name pos:line="600" pos:column="37">setExpoUnit</name></name><argument_list pos:line="600" pos:column="48">(<argument><expr><name pos:line="600" pos:column="49">netWorth</name> <op:operator pos:line="600" pos:column="58">*</op:operator> <name><name pos:line="600" pos:column="60">RiskItConstants</name><op:operator pos:line="600" pos:column="75">.</op:operator><name pos:line="600" pos:column="76">THIRTY_PERCENT</name></name><op:operator pos:line="600" pos:column="90">/</op:operator><lit:literal type="number" pos:line="600" pos:column="91">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="602" pos:column="25">//assume loss coverage is 50% of the total expense and property value</comment>
			<expr_stmt><expr><call><name><name pos:line="603" pos:column="25">calc_invite</name><op:operator pos:line="603" pos:column="36">.</op:operator><name pos:line="603" pos:column="37">setlossCoverage</name></name><argument_list pos:line="603" pos:column="52">(<argument><expr><name pos:line="603" pos:column="53">netWorth</name> <op:operator pos:line="603" pos:column="62">*</op:operator> <name><name pos:line="603" pos:column="64">RiskItConstants</name><op:operator pos:line="603" pos:column="79">.</op:operator><name pos:line="603" pos:column="80">FIFTY_PERCENT</name></name><op:operator pos:line="603" pos:column="93">/</op:operator><lit:literal type="number" pos:line="603" pos:column="94">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="605" pos:column="25">//calculate the score of customer</comment>
			<decl_stmt><decl><type><name pos:line="606" pos:column="25">double</name></type> <name pos:line="606" pos:column="32">score</name> <init pos:line="606" pos:column="38">= <expr><call><name><name pos:line="606" pos:column="40">agent</name><op:operator pos:line="606" pos:column="45">.</op:operator><name pos:line="606" pos:column="46">calculateScore</name></name><argument_list pos:line="606" pos:column="60">(<argument><expr><name pos:line="606" pos:column="61">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="607" pos:column="25">calc_invite</name><op:operator pos:line="607" pos:column="36">.</op:operator><name pos:line="607" pos:column="37">setScore</name></name><argument_list pos:line="607" pos:column="45">(<argument><expr><name pos:line="607" pos:column="46">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="609" pos:column="25">//calculate the final quote</comment>
			<expr_stmt><expr><name pos:line="610" pos:column="25">quote</name> <op:operator pos:line="610" pos:column="31">=</op:operator> <call><name><name pos:line="610" pos:column="33">agent</name><op:operator pos:line="610" pos:column="38">.</op:operator><name pos:line="610" pos:column="39">calculateTotalValue</name></name><argument_list pos:line="610" pos:column="58">(<argument><expr><name pos:line="610" pos:column="59">calc_invite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="611" pos:column="25">calc_invite</name><op:operator pos:line="611" pos:column="36">.</op:operator><name pos:line="611" pos:column="37">setPremium</name></name><argument_list pos:line="611" pos:column="47">(<argument><expr><name pos:line="611" pos:column="48">quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="613" pos:column="25">System</name><op:operator pos:line="613" pos:column="31">.</op:operator><name pos:line="613" pos:column="32">out</name><op:operator pos:line="613" pos:column="35">.</op:operator><name pos:line="613" pos:column="36">println</name></name><argument_list pos:line="613" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="613" pos:column="44">"The quote for deductible of $"</lit:literal> <op:operator pos:line="613" pos:column="76">+</op:operator> <name><name pos:line="613" pos:column="78">deduct_list</name><index pos:line="613" pos:column="89">[<expr><name pos:line="613" pos:column="90">i</name></expr>]</index></name> <op:operator pos:line="613" pos:column="93">+</op:operator> <lit:literal type="string" pos:line="613" pos:column="95">" is : $"</lit:literal> <op:operator pos:line="613" pos:column="105">+</op:operator> <name pos:line="613" pos:column="107">quote</name> <op:operator pos:line="613" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="613" pos:column="115">" per month."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="615" pos:column="17">System</name><op:operator pos:line="615" pos:column="23">.</op:operator><name pos:line="615" pos:column="24">out</name><op:operator pos:line="615" pos:column="27">.</op:operator><name pos:line="615" pos:column="28">println</name></name><argument_list pos:line="615" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="615" pos:column="36">"---------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="616" pos:column="17">return <expr><name pos:line="616" pos:column="24">calc_invite</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="619" pos:column="9">public</specifier> <name pos:line="619" pos:column="16">double</name></type> <name pos:line="619" pos:column="23">updatewagetable</name><parameter_list pos:line="619" pos:column="38">(<param><decl><type><name pos:line="619" pos:column="39">int</name></type> <name pos:line="619" pos:column="43">industrycode</name></decl></param>,<param><decl><type><name pos:line="619" pos:column="56">int</name></type> <name pos:line="619" pos:column="60">occupcode</name></decl></param>)</parameter_list><block pos:line="619" pos:column="70">{
		<decl_stmt><decl><type><name pos:line="620" pos:column="17">int</name></type> <name pos:line="620" pos:column="21">sum</name> <init pos:line="620" pos:column="25">= <expr><lit:literal type="number" pos:line="620" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name pos:line="621" pos:column="17">int</name></type> <name pos:line="621" pos:column="21">count_industrycode</name> <init pos:line="621" pos:column="40">= <expr><lit:literal type="number" pos:line="621" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="622" pos:column="17">int</name></type> <name pos:line="622" pos:column="21">count</name> <init pos:line="622" pos:column="27">= <expr><lit:literal type="number" pos:line="622" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="623" pos:column="17">double</name></type> <name pos:line="623" pos:column="24">average</name> <init pos:line="623" pos:column="32">= <expr><lit:literal type="number" pos:line="623" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="624" pos:column="17">int</name></type> <name pos:line="624" pos:column="21">meanweekwage</name> <init pos:line="624" pos:column="34">= <expr><lit:literal type="number" pos:line="624" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="625" pos:column="17">Statement</name></type> <name pos:line="625" pos:column="27">stat</name> <init pos:line="625" pos:column="32">= <expr><lit:literal type="null" pos:line="625" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="626" pos:column="17">ResultSet</name></type> <name pos:line="626" pos:column="27">result</name> <init pos:line="626" pos:column="34">= <expr><lit:literal type="null" pos:line="626" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="628" pos:column="17">try
        <block pos:line="629" pos:column="9">{
        	
            <decl_stmt><decl><type><name pos:line="631" pos:column="13">Connection</name></type> <name pos:line="631" pos:column="24">conn</name> <init pos:line="631" pos:column="29">= <expr><call><name><name pos:line="631" pos:column="31">DatabaseConnection</name><op:operator pos:line="631" pos:column="49">.</op:operator><name pos:line="631" pos:column="50">getConnection</name></name><argument_list pos:line="631" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="632" pos:column="25">stat</name> <op:operator pos:line="632" pos:column="30">=</op:operator> <call><name><name pos:line="632" pos:column="32">conn</name><op:operator pos:line="632" pos:column="36">.</op:operator><name pos:line="632" pos:column="37">createStatement</name></name><argument_list pos:line="632" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="633" pos:column="13">stat</name><op:operator pos:line="633" pos:column="17">=</op:operator><call><name><name pos:line="633" pos:column="18">conn</name><op:operator pos:line="633" pos:column="22">.</op:operator><name pos:line="633" pos:column="23">createStatement</name></name><argument_list pos:line="633" pos:column="38">(<argument><expr><name><name pos:line="633" pos:column="39">ResultSet</name><op:operator pos:line="633" pos:column="48">.</op:operator><name pos:line="633" pos:column="49">TYPE_SCROLL_INSENSITIVE</name></name></expr></argument>,
                    <argument><expr><name><name pos:line="634" pos:column="21">ResultSet</name><op:operator pos:line="634" pos:column="30">.</op:operator><name pos:line="634" pos:column="31">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <decl_stmt><decl><type><name pos:line="636" pos:column="13">String</name></type> <name pos:line="636" pos:column="20">select_occupcode</name> <init pos:line="636" pos:column="37">= <expr><lit:literal type="string" pos:line="636" pos:column="39">"select  wage.occupationcode,wage.industrycode,weekwage from wage,job where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.occupationcode = "</lit:literal>  <op:operator pos:line="636" pos:column="226">+</op:operator> <name pos:line="636" pos:column="228">occupcode</name> <op:operator pos:line="636" pos:column="238">+</op:operator> <lit:literal type="string" pos:line="636" pos:column="240">" and wage.industrycode = "</lit:literal> <op:operator pos:line="636" pos:column="268">+</op:operator> <name pos:line="636" pos:column="270">industrycode</name><op:operator pos:line="636" pos:column="282">+</op:operator> <lit:literal type="string" pos:line="636" pos:column="284">" group by wage.occupationcode,wage.industrycode,weekwage"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="637" pos:column="13">String</name></type> <name pos:line="637" pos:column="20">select_industrycode</name> <init pos:line="637" pos:column="40">= <expr><lit:literal type="string" pos:line="637" pos:column="42">"select  industrycode from wage where industrycode = "</lit:literal> <op:operator pos:line="637" pos:column="97">+</op:operator> <name pos:line="637" pos:column="99">industrycode</name> <op:operator pos:line="637" pos:column="112">+</op:operator><lit:literal type="string" pos:line="637" pos:column="113">""</lit:literal></expr></init></decl>;</decl_stmt>         
            <decl_stmt><decl><type><name pos:line="638" pos:column="13">String</name></type> <name pos:line="638" pos:column="20">query</name> <init pos:line="638" pos:column="26">= <expr><lit:literal type="string" pos:line="638" pos:column="28">"select meanweekwage,weekwage from job,wage where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.industrycode = "</lit:literal> <op:operator pos:line="638" pos:column="186">+</op:operator> <name pos:line="638" pos:column="188">industrycode</name> <op:operator pos:line="638" pos:column="201">+</op:operator><lit:literal type="string" pos:line="638" pos:column="202">" and wage.occupationcode =  "</lit:literal> <op:operator pos:line="638" pos:column="233">+</op:operator> <name pos:line="638" pos:column="235">occupcode</name> <op:operator pos:line="638" pos:column="245">+</op:operator><lit:literal type="string" pos:line="638" pos:column="246">" group by wage.occupationcode,wage.industrycode,weekwage,meanweekwage"</lit:literal></expr></init></decl>;</decl_stmt>    
            <decl_stmt><decl><type><name pos:line="639" pos:column="13">String</name></type> <name pos:line="639" pos:column="20">updatetable</name> <init pos:line="639" pos:column="32">= <expr><lit:literal type="string" pos:line="639" pos:column="34">"select industrycode, occupationcode,meanweekwage from wage where industrycode = "</lit:literal> <op:operator pos:line="639" pos:column="117">+</op:operator> <name pos:line="639" pos:column="119">industrycode</name> <op:operator pos:line="639" pos:column="132">+</op:operator><lit:literal type="string" pos:line="639" pos:column="133">" and occupationcode = "</lit:literal> <op:operator pos:line="639" pos:column="158">+</op:operator> <name pos:line="639" pos:column="160">occupcode</name><op:operator pos:line="639" pos:column="169">+</op:operator><lit:literal type="string" pos:line="639" pos:column="170">""</lit:literal></expr></init></decl>;</decl_stmt>
            
            
           <comment type="line" pos:line="642" pos:column="12">// Total number of occupation code</comment>
            <expr_stmt><expr><name pos:line="643" pos:column="13">result</name> <op:operator pos:line="643" pos:column="20">=</op:operator> <call><name><name pos:line="643" pos:column="22">stat</name><op:operator pos:line="643" pos:column="26">.</op:operator><name pos:line="643" pos:column="27">executeQuery</name></name><argument_list pos:line="643" pos:column="39">(<argument><expr><name pos:line="643" pos:column="40">select_occupcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="644" pos:column="13">while<condition pos:line="644" pos:column="18">(<expr><call><name><name pos:line="644" pos:column="19">result</name><op:operator pos:line="644" pos:column="25">.</op:operator><name pos:line="644" pos:column="26">next</name></name><argument_list pos:line="644" pos:column="30">()</argument_list></call></expr>)</condition>
        	      <expr_stmt><expr><name pos:line="645" pos:column="23">count</name><op:operator pos:line="645" pos:column="28">++</op:operator></expr>;</expr_stmt></while>
                  <comment type="line" pos:line="646" pos:column="19">//System.out.println(count);</comment>
                            
           <expr_stmt><expr><name pos:line="648" pos:column="12">result</name> <op:operator pos:line="648" pos:column="19">=</op:operator> <call><name><name pos:line="648" pos:column="21">stat</name><op:operator pos:line="648" pos:column="25">.</op:operator><name pos:line="648" pos:column="26">executeQuery</name></name><argument_list pos:line="648" pos:column="38">(<argument><expr><name pos:line="648" pos:column="39">select_industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line" pos:line="649" pos:column="11">//Total number of industry code</comment>
           <while pos:line="650" pos:column="12">while<condition pos:line="650" pos:column="17">(<expr><call><name><name pos:line="650" pos:column="18">result</name><op:operator pos:line="650" pos:column="24">.</op:operator><name pos:line="650" pos:column="25">next</name></name><argument_list pos:line="650" pos:column="29">()</argument_list></call></expr>)</condition>
        	    <expr_stmt><expr><name pos:line="651" pos:column="21">count_industrycode</name><op:operator pos:line="651" pos:column="39">++</op:operator></expr>;</expr_stmt></while>
                       
          <expr_stmt><expr><name pos:line="653" pos:column="11">result</name> <op:operator pos:line="653" pos:column="18">=</op:operator> <call><name><name pos:line="653" pos:column="20">stat</name><op:operator pos:line="653" pos:column="24">.</op:operator><name pos:line="653" pos:column="25">executeQuery</name></name><argument_list pos:line="653" pos:column="37">(<argument><expr><name pos:line="653" pos:column="38">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <while pos:line="654" pos:column="11">while<condition pos:line="654" pos:column="16">(<expr><call><name><name pos:line="654" pos:column="17">result</name><op:operator pos:line="654" pos:column="23">.</op:operator><name pos:line="654" pos:column="24">next</name></name><argument_list pos:line="654" pos:column="28">()</argument_list></call></expr>)</condition>
               <expr_stmt><expr><name pos:line="655" pos:column="16">sum</name> <op:operator pos:line="655" pos:column="20">=</op:operator> <name pos:line="655" pos:column="22">sum</name> <op:operator pos:line="655" pos:column="26">+</op:operator> <op:operator pos:line="655" pos:column="28">(</op:operator><call><name><name pos:line="655" pos:column="29">result</name><op:operator pos:line="655" pos:column="35">.</op:operator><name pos:line="655" pos:column="36">getInt</name></name><argument_list pos:line="655" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="655" pos:column="43">"weekwage"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="655" pos:column="54">)</op:operator></expr>;</expr_stmt></while>            
               <expr_stmt><expr><name pos:line="656" pos:column="16">average</name> <op:operator pos:line="656" pos:column="24">=</op:operator> <op:operator pos:line="656" pos:column="26">(</op:operator><name pos:line="656" pos:column="27">double</name><op:operator pos:line="656" pos:column="33">)</op:operator><name pos:line="656" pos:column="34">sum</name><op:operator pos:line="656" pos:column="37">/</op:operator><op:operator pos:line="656" pos:column="38">(</op:operator><name pos:line="656" pos:column="39">double</name><op:operator pos:line="656" pos:column="45">)</op:operator><name pos:line="656" pos:column="46">count</name></expr>;</expr_stmt>             
               <expr_stmt><expr><call><name><name pos:line="657" pos:column="16">System</name><op:operator pos:line="657" pos:column="22">.</op:operator><name pos:line="657" pos:column="23">out</name><op:operator pos:line="657" pos:column="26">.</op:operator><name pos:line="657" pos:column="27">println</name></name><argument_list pos:line="657" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="657" pos:column="35">"Industrycode"</lit:literal> <op:operator pos:line="657" pos:column="50">+</op:operator> <lit:literal type="string" pos:line="657" pos:column="52">"  OccupationCode"</lit:literal> <op:operator pos:line="657" pos:column="71">+</op:operator><lit:literal type="string" pos:line="657" pos:column="72">"     Sum"</lit:literal> <op:operator pos:line="657" pos:column="83">+</op:operator><lit:literal type="string" pos:line="657" pos:column="84">"      Average"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="658" pos:column="16">System</name><op:operator pos:line="658" pos:column="22">.</op:operator><name pos:line="658" pos:column="23">out</name><op:operator pos:line="658" pos:column="26">.</op:operator><name pos:line="658" pos:column="27">println</name></name><argument_list pos:line="658" pos:column="34">( <argument><expr><name pos:line="658" pos:column="36">industrycode</name> <op:operator pos:line="658" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="658" pos:column="51">"              "</lit:literal> <op:operator pos:line="658" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="658" pos:column="70">"  "</lit:literal> <op:operator pos:line="658" pos:column="75">+</op:operator> <name pos:line="658" pos:column="77">occupcode</name> <op:operator pos:line="658" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="658" pos:column="89">"           "</lit:literal> <op:operator pos:line="658" pos:column="103">+</op:operator> <name pos:line="658" pos:column="105">sum</name> <op:operator pos:line="658" pos:column="109">+</op:operator><lit:literal type="string" pos:line="658" pos:column="110">"       "</lit:literal> <op:operator pos:line="658" pos:column="120">+</op:operator>  <name pos:line="658" pos:column="123">average</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
          <if pos:line="660" pos:column="11">if <condition pos:line="660" pos:column="14">(<expr><call><name><name pos:line="660" pos:column="15">result</name><op:operator pos:line="660" pos:column="21">.</op:operator><name pos:line="660" pos:column="22">getConcurrency</name></name><argument_list pos:line="660" pos:column="36">()</argument_list></call> <op:operator pos:line="660" pos:column="39">==</op:operator> <name><name pos:line="660" pos:column="42">ResultSet</name><op:operator pos:line="660" pos:column="51">.</op:operator><name pos:line="660" pos:column="52">CONCUR_UPDATABLE</name></name></expr>)</condition><then pos:line="660" pos:column="69"> <block pos:line="660" pos:column="70">{
              <expr_stmt><expr><call><name><name pos:line="661" pos:column="15">System</name><op:operator pos:line="661" pos:column="21">.</op:operator><name pos:line="661" pos:column="22">out</name><op:operator pos:line="661" pos:column="25">.</op:operator><name pos:line="661" pos:column="26">println</name></name><argument_list pos:line="661" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="661" pos:column="34">"ResultSet non-updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else pos:line="662" pos:column="13">else <block pos:line="662" pos:column="18">{
             <expr_stmt><expr><call><name><name pos:line="663" pos:column="14">System</name><op:operator pos:line="663" pos:column="20">.</op:operator><name pos:line="663" pos:column="21">out</name><op:operator pos:line="663" pos:column="24">.</op:operator><name pos:line="663" pos:column="25">println</name></name><argument_list pos:line="663" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="663" pos:column="33">"ResultSet updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><name pos:line="665" pos:column="11">result</name> <op:operator pos:line="665" pos:column="18">=</op:operator> <call><name><name pos:line="665" pos:column="20">stat</name><op:operator pos:line="665" pos:column="24">.</op:operator><name pos:line="665" pos:column="25">executeQuery</name></name><argument_list pos:line="665" pos:column="37">(<argument><expr><name pos:line="665" pos:column="38">updatetable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="666" pos:column="11">result</name><op:operator pos:line="666" pos:column="17">.</op:operator><name pos:line="666" pos:column="18">beforeFirst</name></name><argument_list pos:line="666" pos:column="29">()</argument_list></call></expr>;</expr_stmt>         
         <while pos:line="667" pos:column="10">while<condition pos:line="667" pos:column="15">( <expr><call><name><name pos:line="667" pos:column="17">result</name><op:operator pos:line="667" pos:column="23">.</op:operator><name pos:line="667" pos:column="24">next</name></name><argument_list pos:line="667" pos:column="28">()</argument_list></call></expr>)</condition><block pos:line="667" pos:column="31">{      
               <expr_stmt><expr><call><name><name pos:line="668" pos:column="16">result</name><op:operator pos:line="668" pos:column="22">.</op:operator><name pos:line="668" pos:column="23">updateDouble</name></name><argument_list pos:line="668" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="668" pos:column="36">"meanweekwage"</lit:literal></expr></argument>,<argument><expr><name pos:line="668" pos:column="51">average</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    	
               <expr_stmt><expr><call><name><name pos:line="669" pos:column="16">result</name><op:operator pos:line="669" pos:column="22">.</op:operator><name pos:line="669" pos:column="23">updateRow</name></name><argument_list pos:line="669" pos:column="32">()</argument_list></call></expr>;</expr_stmt>       
        }</block></while>
        
      <expr_stmt><expr><call><name><name pos:line="672" pos:column="7">acc</name><op:operator pos:line="672" pos:column="10">.</op:operator><name pos:line="672" pos:column="11">printRs</name></name><argument_list pos:line="672" pos:column="18">(<argument><expr><name pos:line="672" pos:column="19">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line" pos:line="673" pos:column="8">// result.close();</comment>
      
        <expr_stmt><expr><call><name><name pos:line="675" pos:column="9">System</name><op:operator pos:line="675" pos:column="15">.</op:operator><name pos:line="675" pos:column="16">out</name><op:operator pos:line="675" pos:column="19">.</op:operator><name pos:line="675" pos:column="20">println</name></name><argument_list pos:line="675" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="675" pos:column="28">"-------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>               
         <expr_stmt><expr><call><name><name pos:line="676" pos:column="10">System</name><op:operator pos:line="676" pos:column="16">.</op:operator><name pos:line="676" pos:column="17">out</name><op:operator pos:line="676" pos:column="20">.</op:operator><name pos:line="676" pos:column="21">println</name></name><argument_list pos:line="676" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="676" pos:column="29">"meanweekwage is updated for industry code: "</lit:literal> <op:operator pos:line="676" pos:column="75">+</op:operator> <name pos:line="676" pos:column="77">industrycode</name> <op:operator pos:line="676" pos:column="90">+</op:operator>  <lit:literal type="string" pos:line="676" pos:column="93">" and  Occupation code: "</lit:literal> <op:operator pos:line="676" pos:column="119">+</op:operator> <name pos:line="676" pos:column="121">occupcode</name> <op:operator pos:line="676" pos:column="131">+</op:operator> <lit:literal type="string" pos:line="676" pos:column="133">" Old value for meanweekwage is:  "</lit:literal> <op:operator pos:line="676" pos:column="169">+</op:operator> <name pos:line="676" pos:column="171">meanweekwage</name> <op:operator pos:line="676" pos:column="184">+</op:operator> <lit:literal type="string" pos:line="676" pos:column="186">" and new value for meanweekwage is:  "</lit:literal> <op:operator pos:line="676" pos:column="226">+</op:operator> <op:operator pos:line="676" pos:column="228">(</op:operator><name pos:line="676" pos:column="229">int</name><op:operator pos:line="676" pos:column="232">)</op:operator><name pos:line="676" pos:column="233">average</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name><name pos:line="677" pos:column="9">stat</name><op:operator pos:line="677" pos:column="13">.</op:operator><name pos:line="677" pos:column="14">close</name></name><argument_list pos:line="677" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
           
        }</block>
        <catch pos:line="680" pos:column="9">catch<parameter_list pos:line="680" pos:column="14">(<param><decl><type><name pos:line="680" pos:column="15">Exception</name></type> <name pos:line="680" pos:column="25">e</name></decl></param>)</parameter_list><block pos:line="680" pos:column="27">{
         
            <expr_stmt><expr><call><name><name pos:line="682" pos:column="13">e</name><op:operator pos:line="682" pos:column="14">.</op:operator><name pos:line="682" pos:column="15">printStackTrace</name></name><argument_list pos:line="682" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    
		<return pos:line="685" pos:column="17">return <expr><name pos:line="685" pos:column="24">average</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="688" pos:column="9">public</specifier> <name pos:line="688" pos:column="16">double</name></type> <name pos:line="688" pos:column="23">updatetable</name><parameter_list pos:line="688" pos:column="34">(<param><decl><type><name pos:line="688" pos:column="35">long</name></type> <name pos:line="688" pos:column="40">ssn</name></decl></param>,<param><decl><type><name pos:line="688" pos:column="44">int</name></type> <name pos:line="688" pos:column="48">industrycode</name></decl></param>,<param><decl><type><name pos:line="688" pos:column="61">int</name></type> <name pos:line="688" pos:column="65">occupationcode</name></decl></param>)</parameter_list><block pos:line="688" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="689" pos:column="17">int</name></type> <name pos:line="689" pos:column="21">sum</name> <init pos:line="689" pos:column="25">= <expr><lit:literal type="number" pos:line="689" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name pos:line="690" pos:column="17">int</name></type> <name pos:line="690" pos:column="21">count_industrycode</name> <init pos:line="690" pos:column="40">= <expr><lit:literal type="number" pos:line="690" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="691" pos:column="17">int</name></type> <name pos:line="691" pos:column="21">count</name> <init pos:line="691" pos:column="27">= <expr><lit:literal type="number" pos:line="691" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="692" pos:column="17">int</name></type> <name pos:line="692" pos:column="21">countwage</name> <init pos:line="692" pos:column="31">= <expr><lit:literal type="number" pos:line="692" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="693" pos:column="17">double</name></type> <name pos:line="693" pos:column="24">average</name> <init pos:line="693" pos:column="32">= <expr><lit:literal type="number" pos:line="693" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="694" pos:column="17">Statement</name></type> <name pos:line="694" pos:column="27">stat</name> <init pos:line="694" pos:column="32">= <expr><lit:literal type="null" pos:line="694" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="695" pos:column="17">ResultSet</name></type> <name pos:line="695" pos:column="27">result</name> <init pos:line="695" pos:column="34">= <expr><lit:literal type="null" pos:line="695" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="696" pos:column="17">try
        <block pos:line="697" pos:column="9">{
			<decl_stmt><decl><type><name pos:line="698" pos:column="25">Connection</name></type> <name pos:line="698" pos:column="36">conn</name> <init pos:line="698" pos:column="41">= <expr><call><name><name pos:line="698" pos:column="43">DatabaseConnection</name><op:operator pos:line="698" pos:column="61">.</op:operator><name pos:line="698" pos:column="62">getConnection</name></name><argument_list pos:line="698" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="699" pos:column="25">stat</name> <op:operator pos:line="699" pos:column="30">=</op:operator> <call><name><name pos:line="699" pos:column="32">conn</name><op:operator pos:line="699" pos:column="36">.</op:operator><name pos:line="699" pos:column="37">createStatement</name></name><argument_list pos:line="699" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="700" pos:column="13">stat</name><op:operator pos:line="700" pos:column="17">=</op:operator><call><name><name pos:line="700" pos:column="18">conn</name><op:operator pos:line="700" pos:column="22">.</op:operator><name pos:line="700" pos:column="23">createStatement</name></name><argument_list pos:line="700" pos:column="38">(<argument><expr><name><name pos:line="700" pos:column="39">ResultSet</name><op:operator pos:line="700" pos:column="48">.</op:operator><name pos:line="700" pos:column="49">TYPE_SCROLL_INSENSITIVE</name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="701" pos:column="39">ResultSet</name><op:operator pos:line="701" pos:column="48">.</op:operator><name pos:line="701" pos:column="49">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <decl_stmt><decl><type><name pos:line="703" pos:column="13">String</name></type> <name pos:line="703" pos:column="20">select_occupcode</name> <init pos:line="703" pos:column="37">= <expr><lit:literal type="string" pos:line="703" pos:column="39">"select  wage.occupationcode,wage.industrycode,weekwage from wage,job where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.industrycode = "</lit:literal> <op:operator pos:line="703" pos:column="223">+</op:operator> <name pos:line="703" pos:column="225">industrycode</name><op:operator pos:line="703" pos:column="237">+</op:operator><lit:literal type="string" pos:line="703" pos:column="238">" and wage.occupationcode = "</lit:literal> <op:operator pos:line="703" pos:column="268">+</op:operator> <name pos:line="703" pos:column="270">occupationcode</name><op:operator pos:line="703" pos:column="284">+</op:operator><lit:literal type="string" pos:line="703" pos:column="285">"  group by wage.occupationcode,wage.industrycode,weekwage"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="704" pos:column="13">String</name></type> <name pos:line="704" pos:column="20">select_industrycode</name> <init pos:line="704" pos:column="40">= <expr><lit:literal type="string" pos:line="704" pos:column="42">"select  industrycode from wage "</lit:literal></expr></init></decl>;</decl_stmt>         
            <decl_stmt><decl><type><name pos:line="705" pos:column="13">String</name></type> <name pos:line="705" pos:column="20">query</name> <init pos:line="705" pos:column="26">= <expr><lit:literal type="string" pos:line="705" pos:column="28">"select meanweekwage,weekwage from job,wage where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.industrycode = "</lit:literal> <op:operator pos:line="705" pos:column="186">+</op:operator> <name pos:line="705" pos:column="188">industrycode</name><op:operator pos:line="705" pos:column="200">+</op:operator><lit:literal type="string" pos:line="705" pos:column="201">" and wage.occupationcode = "</lit:literal> <op:operator pos:line="705" pos:column="231">+</op:operator> <name pos:line="705" pos:column="233">occupationcode</name><op:operator pos:line="705" pos:column="247">+</op:operator><lit:literal type="string" pos:line="705" pos:column="248">"   group by wage.occupationcode,wage.industrycode,weekwage,meanweekwage"</lit:literal></expr></init></decl>;</decl_stmt>    
            <decl_stmt><decl><type><name pos:line="706" pos:column="13">String</name></type> <name pos:line="706" pos:column="20">updatetable</name> <init pos:line="706" pos:column="32">= <expr><lit:literal type="string" pos:line="706" pos:column="34">"select industrycode, occupationcode,meanweekwage from wage where industrycode = "</lit:literal> <op:operator pos:line="706" pos:column="117">+</op:operator> <name pos:line="706" pos:column="119">industrycode</name><op:operator pos:line="706" pos:column="131">+</op:operator><lit:literal type="string" pos:line="706" pos:column="132">" and occupationcode = "</lit:literal> <op:operator pos:line="706" pos:column="157">+</op:operator> <name pos:line="706" pos:column="159">occupationcode</name><op:operator pos:line="706" pos:column="173">+</op:operator><lit:literal type="string" pos:line="706" pos:column="174">" "</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="707" pos:column="13">String</name></type> <name pos:line="707" pos:column="20">wage</name> <init pos:line="707" pos:column="25">= <expr><lit:literal type="string" pos:line="707" pos:column="27">"select wage.industrycode,wage.occupationcode,job.ssn,weekwage,unemploymentreason from job,wage,employmentstat where job.ssn = employmentstat.ssn and wage.industrycode = job.industrycode and wage.occupationcode = job.occupationcode  and job.ssn = "</lit:literal> <op:operator pos:line="707" pos:column="276">+</op:operator><name pos:line="707" pos:column="277">ssn</name><op:operator pos:line="707" pos:column="280">+</op:operator><lit:literal type="string" pos:line="707" pos:column="281">""</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="707" pos:column="285">//group by job.industrycode,job.occupationcode,job.ssn,weekwage,unemploymentreason";</comment>
            
           <comment type="line" pos:line="709" pos:column="12">// Total number of occupation code</comment>
            <expr_stmt><expr><name pos:line="710" pos:column="13">result</name> <op:operator pos:line="710" pos:column="20">=</op:operator> <call><name><name pos:line="710" pos:column="22">stat</name><op:operator pos:line="710" pos:column="26">.</op:operator><name pos:line="710" pos:column="27">executeQuery</name></name><argument_list pos:line="710" pos:column="39">(<argument><expr><name pos:line="710" pos:column="40">select_occupcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="711" pos:column="13">while<condition pos:line="711" pos:column="18">(<expr><call><name><name pos:line="711" pos:column="19">result</name><op:operator pos:line="711" pos:column="25">.</op:operator><name pos:line="711" pos:column="26">next</name></name><argument_list pos:line="711" pos:column="30">()</argument_list></call></expr>)</condition>
        	   <expr_stmt><expr><name pos:line="712" pos:column="20">count</name><op:operator pos:line="712" pos:column="25">++</op:operator></expr>;</expr_stmt></while>
               <expr_stmt><expr><call><name><name pos:line="713" pos:column="16">System</name><op:operator pos:line="713" pos:column="22">.</op:operator><name pos:line="713" pos:column="23">out</name><op:operator pos:line="713" pos:column="26">.</op:operator><name pos:line="713" pos:column="27">println</name></name><argument_list pos:line="713" pos:column="34">( <argument><expr><lit:literal type="string" pos:line="713" pos:column="36">"Total number of occupation code and industrycode "</lit:literal> <op:operator pos:line="713" pos:column="88">+</op:operator> <name pos:line="713" pos:column="90">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="714" pos:column="16">result</name><op:operator pos:line="714" pos:column="22">.</op:operator><name pos:line="714" pos:column="23">close</name></name><argument_list pos:line="714" pos:column="28">()</argument_list></call></expr>;</expr_stmt>             
           <expr_stmt><expr><name pos:line="715" pos:column="12">result</name> <op:operator pos:line="715" pos:column="19">=</op:operator> <call><name><name pos:line="715" pos:column="21">stat</name><op:operator pos:line="715" pos:column="25">.</op:operator><name pos:line="715" pos:column="26">executeQuery</name></name><argument_list pos:line="715" pos:column="38">(<argument><expr><name pos:line="715" pos:column="39">select_industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <comment type="line" pos:line="716" pos:column="10">//Total number of industry code</comment>
           <while pos:line="717" pos:column="12">while<condition pos:line="717" pos:column="17">(<expr><call><name><name pos:line="717" pos:column="18">result</name><op:operator pos:line="717" pos:column="24">.</op:operator><name pos:line="717" pos:column="25">next</name></name><argument_list pos:line="717" pos:column="29">()</argument_list></call></expr>)</condition>
        	    <expr_stmt><expr><name pos:line="718" pos:column="21">count_industrycode</name><op:operator pos:line="718" pos:column="39">++</op:operator></expr>;</expr_stmt></while>
                      
            <expr_stmt><expr><name pos:line="720" pos:column="13">result</name> <op:operator pos:line="720" pos:column="20">=</op:operator> <call><name><name pos:line="720" pos:column="22">stat</name><op:operator pos:line="720" pos:column="26">.</op:operator><name pos:line="720" pos:column="27">executeQuery</name></name><argument_list pos:line="720" pos:column="39">(<argument><expr><name pos:line="720" pos:column="40">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="721" pos:column="13">while<condition pos:line="721" pos:column="18">(<expr><call><name><name pos:line="721" pos:column="19">result</name><op:operator pos:line="721" pos:column="25">.</op:operator><name pos:line="721" pos:column="26">next</name></name><argument_list pos:line="721" pos:column="30">()</argument_list></call></expr>)</condition>
        	  <expr_stmt><expr><name pos:line="722" pos:column="19">sum</name> <op:operator pos:line="722" pos:column="23">=</op:operator> <name pos:line="722" pos:column="25">sum</name> <op:operator pos:line="722" pos:column="29">+</op:operator> <op:operator pos:line="722" pos:column="31">(</op:operator><call><name><name pos:line="722" pos:column="32">result</name><op:operator pos:line="722" pos:column="38">.</op:operator><name pos:line="722" pos:column="39">getInt</name></name><argument_list pos:line="722" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="722" pos:column="46">"weekwage"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="722" pos:column="57">)</op:operator></expr>;</expr_stmt></while>     
          <decl_stmt><decl><type><name pos:line="723" pos:column="11">double</name></type> <name pos:line="723" pos:column="18">oldaverage</name> <init pos:line="723" pos:column="29">= <expr><op:operator pos:line="723" pos:column="31">(</op:operator><name pos:line="723" pos:column="32">double</name><op:operator pos:line="723" pos:column="38">)</op:operator><name pos:line="723" pos:column="39">sum</name><op:operator pos:line="723" pos:column="42">/</op:operator><call pos:line="723" pos:column="43">(<name pos:line="723" pos:column="44">double</name>)<argument_list pos:line="723" pos:column="51">(<argument><expr><name pos:line="723" pos:column="52">count</name><op:operator pos:line="723" pos:column="57">-</op:operator><lit:literal type="number" pos:line="723" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name pos:line="724" pos:column="15">average</name> <op:operator pos:line="724" pos:column="23">=</op:operator> <op:operator pos:line="724" pos:column="25">(</op:operator><name pos:line="724" pos:column="26">double</name><op:operator pos:line="724" pos:column="32">)</op:operator><name pos:line="724" pos:column="33">sum</name><op:operator pos:line="724" pos:column="36">/</op:operator><call pos:line="724" pos:column="37">(<name pos:line="724" pos:column="38">double</name>)<argument_list pos:line="724" pos:column="45">(<argument><expr><name pos:line="724" pos:column="46">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
              
              <expr_stmt><expr><call><name><name pos:line="726" pos:column="15">System</name><op:operator pos:line="726" pos:column="21">.</op:operator><name pos:line="726" pos:column="22">out</name><op:operator pos:line="726" pos:column="25">.</op:operator><name pos:line="726" pos:column="26">println</name></name><argument_list pos:line="726" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="726" pos:column="34">"ssn "</lit:literal><op:operator pos:line="726" pos:column="40">+</op:operator>  <name pos:line="726" pos:column="43">ssn</name> <op:operator pos:line="726" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="726" pos:column="49">"  Sum  "</lit:literal> <op:operator pos:line="726" pos:column="59">+</op:operator> <name pos:line="726" pos:column="61">sum</name> <op:operator pos:line="726" pos:column="65">+</op:operator><lit:literal type="string" pos:line="726" pos:column="66">" Average "</lit:literal> <op:operator pos:line="726" pos:column="78">+</op:operator>  <name pos:line="726" pos:column="81">average</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>            
              <expr_stmt><expr><name pos:line="727" pos:column="15">result</name> <op:operator pos:line="727" pos:column="22">=</op:operator> <call><name><name pos:line="727" pos:column="24">stat</name><op:operator pos:line="727" pos:column="28">.</op:operator><name pos:line="727" pos:column="29">executeQuery</name></name><argument_list pos:line="727" pos:column="41">(<argument><expr><name pos:line="727" pos:column="42">wage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <while pos:line="729" pos:column="13">while<condition pos:line="729" pos:column="18">(<expr><call><name><name pos:line="729" pos:column="19">result</name><op:operator pos:line="729" pos:column="25">.</op:operator><name pos:line="729" pos:column="26">next</name></name><argument_list pos:line="729" pos:column="30">()</argument_list></call></expr>)</condition><block pos:line="729" pos:column="33">{
               <expr_stmt><expr><name pos:line="730" pos:column="16">countwage</name><op:operator pos:line="730" pos:column="25">++</op:operator></expr>;</expr_stmt>
               <decl_stmt><decl><type><name pos:line="731" pos:column="16">int</name></type> <name pos:line="731" pos:column="20">weekwage</name> <init pos:line="731" pos:column="29">= <expr><call><name><name pos:line="731" pos:column="31">result</name><op:operator pos:line="731" pos:column="37">.</op:operator><name pos:line="731" pos:column="38">getInt</name></name><argument_list pos:line="731" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="731" pos:column="45">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <decl_stmt><decl><type><name pos:line="732" pos:column="16">String</name></type> <name pos:line="732" pos:column="23">reason</name> <init pos:line="732" pos:column="30">= <expr><call><name><name pos:line="732" pos:column="32">result</name><op:operator pos:line="732" pos:column="38">.</op:operator><name pos:line="732" pos:column="39">getString</name></name><argument_list pos:line="732" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="732" pos:column="49">"unemploymentreason"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
               <comment type="line" pos:line="733" pos:column="16">//int ssn = result.getInt(3);</comment>
               <expr_stmt><expr><call><name><name pos:line="734" pos:column="16">System</name><op:operator pos:line="734" pos:column="22">.</op:operator><name pos:line="734" pos:column="23">out</name><op:operator pos:line="734" pos:column="26">.</op:operator><name pos:line="734" pos:column="27">println</name></name><argument_list pos:line="734" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="734" pos:column="35">"Number of row  "</lit:literal>  <op:operator pos:line="734" pos:column="54">+</op:operator> <name pos:line="734" pos:column="56">countwage</name> <op:operator pos:line="734" pos:column="66">+</op:operator> <lit:literal type="string" pos:line="734" pos:column="68">"  ssn  "</lit:literal>  <op:operator pos:line="734" pos:column="79">+</op:operator>  <name pos:line="734" pos:column="82">ssn</name> <op:operator pos:line="734" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="734" pos:column="88">"  weekwage  "</lit:literal> <op:operator pos:line="734" pos:column="103">+</op:operator>  <name pos:line="734" pos:column="106">weekwage</name><op:operator pos:line="734" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="734" pos:column="116">"   unemploymentreason  "</lit:literal> <op:operator pos:line="734" pos:column="142">+</op:operator> <name pos:line="734" pos:column="144">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            	 
              
             <if pos:line="738" pos:column="14">if <condition pos:line="738" pos:column="17">(<expr><call><name><name pos:line="738" pos:column="18">result</name><op:operator pos:line="738" pos:column="24">.</op:operator><name pos:line="738" pos:column="25">getConcurrency</name></name><argument_list pos:line="738" pos:column="39">()</argument_list></call> <op:operator pos:line="738" pos:column="42">==</op:operator> <name><name pos:line="738" pos:column="45">ResultSet</name><op:operator pos:line="738" pos:column="54">.</op:operator><name pos:line="738" pos:column="55">CONCUR_UPDATABLE</name></name></expr>)</condition><then pos:line="738" pos:column="72"> <block pos:line="738" pos:column="73">{
                 <expr_stmt><expr><call><name><name pos:line="739" pos:column="18">System</name><op:operator pos:line="739" pos:column="24">.</op:operator><name pos:line="739" pos:column="25">out</name><op:operator pos:line="739" pos:column="28">.</op:operator><name pos:line="739" pos:column="29">println</name></name><argument_list pos:line="739" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="739" pos:column="37">"ResultSet non-updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }</block></then> <else pos:line="740" pos:column="16">else <block pos:line="740" pos:column="21">{
               <expr_stmt><expr><call><name><name pos:line="741" pos:column="16">System</name><op:operator pos:line="741" pos:column="22">.</op:operator><name pos:line="741" pos:column="23">out</name><op:operator pos:line="741" pos:column="26">.</op:operator><name pos:line="741" pos:column="27">println</name></name><argument_list pos:line="741" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="741" pos:column="35">"ResultSet updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }</block></else></if>
             
            <expr_stmt><expr><name pos:line="744" pos:column="13">result</name> <op:operator pos:line="744" pos:column="20">=</op:operator> <call><name><name pos:line="744" pos:column="22">stat</name><op:operator pos:line="744" pos:column="26">.</op:operator><name pos:line="744" pos:column="27">executeQuery</name></name><argument_list pos:line="744" pos:column="39">(<argument><expr><name pos:line="744" pos:column="40">updatetable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="745" pos:column="13">result</name><op:operator pos:line="745" pos:column="19">.</op:operator><name pos:line="745" pos:column="20">beforeFirst</name></name><argument_list pos:line="745" pos:column="31">()</argument_list></call></expr>;</expr_stmt>         
            <while pos:line="746" pos:column="13">while<condition pos:line="746" pos:column="18">( <expr><call><name><name pos:line="746" pos:column="20">result</name><op:operator pos:line="746" pos:column="26">.</op:operator><name pos:line="746" pos:column="27">next</name></name><argument_list pos:line="746" pos:column="31">()</argument_list></call></expr>)</condition><block pos:line="746" pos:column="34">{      
             <expr_stmt><expr><call><name><name pos:line="747" pos:column="14">result</name><op:operator pos:line="747" pos:column="20">.</op:operator><name pos:line="747" pos:column="21">updateDouble</name></name><argument_list pos:line="747" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="747" pos:column="34">"meanweekwage"</lit:literal></expr></argument>,<argument><expr><name pos:line="747" pos:column="49">average</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   	
             <expr_stmt><expr><call><name><name pos:line="748" pos:column="14">result</name><op:operator pos:line="748" pos:column="20">.</op:operator><name pos:line="748" pos:column="21">updateRow</name></name><argument_list pos:line="748" pos:column="30">()</argument_list></call></expr>;</expr_stmt>       
           }</block></while>
        
        <expr_stmt><expr><call><name><name pos:line="751" pos:column="9">acc</name><op:operator pos:line="751" pos:column="12">.</op:operator><name pos:line="751" pos:column="13">printRs</name></name><argument_list pos:line="751" pos:column="20">(<argument><expr><name pos:line="751" pos:column="21">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><call><name><name pos:line="753" pos:column="9">System</name><op:operator pos:line="753" pos:column="15">.</op:operator><name pos:line="753" pos:column="16">out</name><op:operator pos:line="753" pos:column="19">.</op:operator><name pos:line="753" pos:column="20">println</name></name><argument_list pos:line="753" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="753" pos:column="28">"-------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>               
        <expr_stmt><expr><call><name><name pos:line="754" pos:column="9">System</name><op:operator pos:line="754" pos:column="15">.</op:operator><name pos:line="754" pos:column="16">out</name><op:operator pos:line="754" pos:column="19">.</op:operator><name pos:line="754" pos:column="20">println</name></name><argument_list pos:line="754" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="754" pos:column="28">"meanweekwage is updated for  ssn  = "</lit:literal> <op:operator pos:line="754" pos:column="67">+</op:operator> <name pos:line="754" pos:column="69">ssn</name> <op:operator pos:line="754" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="754" pos:column="75">" industry code: "</lit:literal> <op:operator pos:line="754" pos:column="94">+</op:operator> <name pos:line="754" pos:column="96">industrycode</name> <op:operator pos:line="754" pos:column="109">+</op:operator>  <lit:literal type="string" pos:line="754" pos:column="112">" and  Occupation code: "</lit:literal> <op:operator pos:line="754" pos:column="138">+</op:operator> <name pos:line="754" pos:column="140">occupationcode</name> <op:operator pos:line="754" pos:column="155">+</op:operator> <lit:literal type="string" pos:line="754" pos:column="157">" Old value for meanweekwage is:  "</lit:literal> <op:operator pos:line="754" pos:column="193">+</op:operator> <op:operator pos:line="754" pos:column="195">(</op:operator><name pos:line="754" pos:column="196">int</name><op:operator pos:line="754" pos:column="199">)</op:operator><name pos:line="754" pos:column="200">oldaverage</name> <op:operator pos:line="754" pos:column="211">+</op:operator> <lit:literal type="string" pos:line="754" pos:column="213">" and new value for meanweekwage is:  "</lit:literal> <op:operator pos:line="754" pos:column="253">+</op:operator> <op:operator pos:line="754" pos:column="255">(</op:operator><name pos:line="754" pos:column="256">int</name><op:operator pos:line="754" pos:column="259">)</op:operator><name pos:line="754" pos:column="260">average</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name><name pos:line="755" pos:column="9">stat</name><op:operator pos:line="755" pos:column="13">.</op:operator><name pos:line="755" pos:column="14">close</name></name><argument_list pos:line="755" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
      
       }</block>
        <catch pos:line="758" pos:column="9">catch<parameter_list pos:line="758" pos:column="14">(<param><decl><type><name pos:line="758" pos:column="15">Exception</name></type> <name pos:line="758" pos:column="25">e</name></decl></param>)</parameter_list><block pos:line="758" pos:column="27">{
         
            <expr_stmt><expr><call><name><name pos:line="760" pos:column="13">e</name><op:operator pos:line="760" pos:column="14">.</op:operator><name pos:line="760" pos:column="15">printStackTrace</name></name><argument_list pos:line="760" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
		
		<return pos:line="763" pos:column="17">return <expr><name pos:line="763" pos:column="24">average</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="766" pos:column="9">public</specifier> <name pos:line="766" pos:column="16">double</name></type> <name pos:line="766" pos:column="23">userinformation</name><parameter_list pos:line="766" pos:column="38">(<param><decl><type><name pos:line="766" pos:column="39">long</name></type> <name pos:line="766" pos:column="44">ssn</name></decl></param>,<param><decl><type><name pos:line="766" pos:column="48">int</name></type> <name pos:line="766" pos:column="52">industrycode</name></decl></param>,<param><decl><type><name pos:line="766" pos:column="65">int</name></type> <name pos:line="766" pos:column="69">occupationcode</name></decl></param>)</parameter_list><block pos:line="766" pos:column="84">{
		<decl_stmt><decl><type><name pos:line="767" pos:column="17">int</name></type> <name pos:line="767" pos:column="21">sum</name> <init pos:line="767" pos:column="25">= <expr><lit:literal type="number" pos:line="767" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name pos:line="768" pos:column="17">int</name></type> <name pos:line="768" pos:column="21">count_industrycode</name> <init pos:line="768" pos:column="40">= <expr><lit:literal type="number" pos:line="768" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="769" pos:column="17">int</name></type> <name pos:line="769" pos:column="21">count</name> <init pos:line="769" pos:column="27">= <expr><lit:literal type="number" pos:line="769" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="770" pos:column="17">int</name></type> <name pos:line="770" pos:column="21">countwage</name> <init pos:line="770" pos:column="31">= <expr><lit:literal type="number" pos:line="770" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="771" pos:column="17">double</name></type> <name pos:line="771" pos:column="24">average</name> <init pos:line="771" pos:column="32">= <expr><lit:literal type="number" pos:line="771" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="772" pos:column="17">Statement</name></type> <name pos:line="772" pos:column="27">stat</name> <init pos:line="772" pos:column="32">= <expr><lit:literal type="null" pos:line="772" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="773" pos:column="17">ResultSet</name></type> <name pos:line="773" pos:column="27">result</name> <init pos:line="773" pos:column="34">= <expr><lit:literal type="null" pos:line="773" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		 <try pos:line="774" pos:column="18">try
	        <block pos:line="775" pos:column="17">{
			    <decl_stmt><decl><type><name pos:line="776" pos:column="29">Connection</name></type> <name pos:line="776" pos:column="40">conn</name> <init pos:line="776" pos:column="45">= <expr><call><name><name pos:line="776" pos:column="47">DatabaseConnection</name><op:operator pos:line="776" pos:column="65">.</op:operator><name pos:line="776" pos:column="66">getConnection</name></name><argument_list pos:line="776" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>				
	            <expr_stmt><expr><name pos:line="777" pos:column="21">stat</name> <op:operator pos:line="777" pos:column="26">=</op:operator> <call><name><name pos:line="777" pos:column="28">conn</name><op:operator pos:line="777" pos:column="32">.</op:operator><name pos:line="777" pos:column="33">createStatement</name></name><argument_list pos:line="777" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><name pos:line="778" pos:column="21">stat</name><op:operator pos:line="778" pos:column="25">=</op:operator><call><name><name pos:line="778" pos:column="26">conn</name><op:operator pos:line="778" pos:column="30">.</op:operator><name pos:line="778" pos:column="31">createStatement</name></name><argument_list pos:line="778" pos:column="46">(<argument><expr><name><name pos:line="778" pos:column="47">ResultSet</name><op:operator pos:line="778" pos:column="56">.</op:operator><name pos:line="778" pos:column="57">TYPE_SCROLL_INSENSITIVE</name></name></expr></argument>,
	                                      <argument><expr><name><name pos:line="779" pos:column="47">ResultSet</name><op:operator pos:line="779" pos:column="56">.</op:operator><name pos:line="779" pos:column="57">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          
	            <decl_stmt><decl><type><name pos:line="781" pos:column="21">String</name></type> <name pos:line="781" pos:column="28">select_occupcode</name> <init pos:line="781" pos:column="45">= <expr><lit:literal type="string" pos:line="781" pos:column="47">"select  wage.occupationcode,wage.industrycode,weekwage from wage,job where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.industrycode = "</lit:literal> <op:operator pos:line="781" pos:column="231">+</op:operator> <name pos:line="781" pos:column="233">industrycode</name><op:operator pos:line="781" pos:column="245">+</op:operator><lit:literal type="string" pos:line="781" pos:column="246">" and wage.occupationcode = "</lit:literal> <op:operator pos:line="781" pos:column="276">+</op:operator> <name pos:line="781" pos:column="278">occupationcode</name><op:operator pos:line="781" pos:column="292">+</op:operator><lit:literal type="string" pos:line="781" pos:column="293">"  group by wage.occupationcode,wage.industrycode,weekwage"</lit:literal></expr></init></decl>;</decl_stmt>
	            <decl_stmt><decl><type><name pos:line="782" pos:column="21">String</name></type> <name pos:line="782" pos:column="28">select_industrycode</name> <init pos:line="782" pos:column="48">= <expr><lit:literal type="string" pos:line="782" pos:column="50">"select  industrycode from wage "</lit:literal></expr></init></decl>;</decl_stmt>         
	            <decl_stmt><decl><type><name pos:line="783" pos:column="21">String</name></type> <name pos:line="783" pos:column="28">query</name> <init pos:line="783" pos:column="34">= <expr><lit:literal type="string" pos:line="783" pos:column="36">"select meanweekwage,weekwage from job,wage where wage.occupationcode = job.occupationcode and wage.industrycode = job.industrycode and wage.industrycode = "</lit:literal> <op:operator pos:line="783" pos:column="194">+</op:operator> <name pos:line="783" pos:column="196">industrycode</name><op:operator pos:line="783" pos:column="208">+</op:operator><lit:literal type="string" pos:line="783" pos:column="209">" and wage.occupationcode = "</lit:literal> <op:operator pos:line="783" pos:column="239">+</op:operator> <name pos:line="783" pos:column="241">occupationcode</name><op:operator pos:line="783" pos:column="255">+</op:operator><lit:literal type="string" pos:line="783" pos:column="256">"   group by wage.occupationcode,wage.industrycode,weekwage,meanweekwage"</lit:literal></expr></init></decl>;</decl_stmt>    
	            <decl_stmt><decl><type><name pos:line="784" pos:column="21">String</name></type> <name pos:line="784" pos:column="28">updatetable</name> <init pos:line="784" pos:column="40">= <expr><lit:literal type="string" pos:line="784" pos:column="42">"select ssn,workclass,industrycode, occupationcode,unionmember,employersize,weekwage,selfemployed,workweeks from job where industrycode = "</lit:literal> <op:operator pos:line="784" pos:column="182">+</op:operator> <name pos:line="784" pos:column="184">industrycode</name><op:operator pos:line="784" pos:column="196">+</op:operator><lit:literal type="string" pos:line="784" pos:column="197">" and occupationcode = "</lit:literal> <op:operator pos:line="784" pos:column="222">+</op:operator> <name pos:line="784" pos:column="224">occupationcode</name><op:operator pos:line="784" pos:column="238">+</op:operator><lit:literal type="string" pos:line="784" pos:column="239">" and job.ssn = "</lit:literal> <op:operator pos:line="784" pos:column="257">+</op:operator> <name pos:line="784" pos:column="259">ssn</name><op:operator pos:line="784" pos:column="262">+</op:operator> <lit:literal type="string" pos:line="784" pos:column="264">""</lit:literal></expr></init></decl>;</decl_stmt>
	            <decl_stmt><decl><type><name pos:line="785" pos:column="21">String</name></type> <name pos:line="785" pos:column="28">wage</name> <init pos:line="785" pos:column="33">= <expr><lit:literal type="string" pos:line="785" pos:column="35">"select job.industrycode,job.occupationcode,job.ssn,weekwage,unemploymentreason from job,wage,employmentstat where job.ssn = employmentstat.ssn and wage.industrycode = job.industrycode and wage.occupationcode = job.occupationcode  and job.ssn = "</lit:literal> <op:operator pos:line="785" pos:column="282">+</op:operator><name pos:line="785" pos:column="283">ssn</name><op:operator pos:line="785" pos:column="286">+</op:operator><lit:literal type="string" pos:line="785" pos:column="287">""</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="785" pos:column="291">//group by job.industrycode,job.occupationcode,job.ssn,weekwage,unemploymentreason";</comment>
	            
	           <comment type="line" pos:line="787" pos:column="20">// Total number of occupation code</comment>
	            <expr_stmt><expr><name pos:line="788" pos:column="21">result</name> <op:operator pos:line="788" pos:column="28">=</op:operator> <call><name><name pos:line="788" pos:column="30">stat</name><op:operator pos:line="788" pos:column="34">.</op:operator><name pos:line="788" pos:column="35">executeQuery</name></name><argument_list pos:line="788" pos:column="47">(<argument><expr><name pos:line="788" pos:column="48">select_occupcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <while pos:line="789" pos:column="21">while<condition pos:line="789" pos:column="26">(<expr><call><name><name pos:line="789" pos:column="27">result</name><op:operator pos:line="789" pos:column="33">.</op:operator><name pos:line="789" pos:column="34">next</name></name><argument_list pos:line="789" pos:column="38">()</argument_list></call></expr>)</condition>
	        	      <expr_stmt><expr><name pos:line="790" pos:column="31">count</name><op:operator pos:line="790" pos:column="36">++</op:operator></expr>;</expr_stmt></while>
	                  <expr_stmt><expr><call><name><name pos:line="791" pos:column="27">System</name><op:operator pos:line="791" pos:column="33">.</op:operator><name pos:line="791" pos:column="34">out</name><op:operator pos:line="791" pos:column="37">.</op:operator><name pos:line="791" pos:column="38">println</name></name><argument_list pos:line="791" pos:column="45">( <argument><expr><lit:literal type="string" pos:line="791" pos:column="47">"Total number of occupation code and industrycode "</lit:literal> <op:operator pos:line="791" pos:column="99">+</op:operator> <name pos:line="791" pos:column="101">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                              
	           <expr_stmt><expr><name pos:line="793" pos:column="20">result</name> <op:operator pos:line="793" pos:column="27">=</op:operator> <call><name><name pos:line="793" pos:column="29">stat</name><op:operator pos:line="793" pos:column="33">.</op:operator><name pos:line="793" pos:column="34">executeQuery</name></name><argument_list pos:line="793" pos:column="46">(<argument><expr><name pos:line="793" pos:column="47">select_industrycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <comment type="line" pos:line="794" pos:column="19">//Total number of industry code</comment>
	           <while pos:line="795" pos:column="20">while<condition pos:line="795" pos:column="25">(<expr><call><name><name pos:line="795" pos:column="26">result</name><op:operator pos:line="795" pos:column="32">.</op:operator><name pos:line="795" pos:column="33">next</name></name><argument_list pos:line="795" pos:column="37">()</argument_list></call></expr>)</condition>
	        	     <expr_stmt><expr><name pos:line="796" pos:column="30">count_industrycode</name><op:operator pos:line="796" pos:column="48">++</op:operator></expr>;</expr_stmt></while>
	                          
	           <expr_stmt><expr><name pos:line="798" pos:column="20">result</name> <op:operator pos:line="798" pos:column="27">=</op:operator> <call><name><name pos:line="798" pos:column="29">stat</name><op:operator pos:line="798" pos:column="33">.</op:operator><name pos:line="798" pos:column="34">executeQuery</name></name><argument_list pos:line="798" pos:column="46">(<argument><expr><name pos:line="798" pos:column="47">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	           <while pos:line="799" pos:column="20">while<condition pos:line="799" pos:column="25">(<expr><call><name><name pos:line="799" pos:column="26">result</name><op:operator pos:line="799" pos:column="32">.</op:operator><name pos:line="799" pos:column="33">next</name></name><argument_list pos:line="799" pos:column="37">()</argument_list></call></expr>)</condition>
	        	    <expr_stmt><expr><name pos:line="800" pos:column="29">sum</name> <op:operator pos:line="800" pos:column="33">=</op:operator> <name pos:line="800" pos:column="35">sum</name> <op:operator pos:line="800" pos:column="39">+</op:operator> <op:operator pos:line="800" pos:column="41">(</op:operator><call><name><name pos:line="800" pos:column="42">result</name><op:operator pos:line="800" pos:column="48">.</op:operator><name pos:line="800" pos:column="49">getInt</name></name><argument_list pos:line="800" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="800" pos:column="56">"weekwage"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="800" pos:column="67">)</op:operator></expr>;</expr_stmt></while>            
	                <expr_stmt><expr><name pos:line="801" pos:column="25">average</name> <op:operator pos:line="801" pos:column="33">=</op:operator> <op:operator pos:line="801" pos:column="35">(</op:operator><name pos:line="801" pos:column="36">double</name><op:operator pos:line="801" pos:column="42">)</op:operator><name pos:line="801" pos:column="43">sum</name><op:operator pos:line="801" pos:column="46">/</op:operator><op:operator pos:line="801" pos:column="47">(</op:operator><name pos:line="801" pos:column="48">double</name><op:operator pos:line="801" pos:column="54">)</op:operator><name pos:line="801" pos:column="55">count</name></expr>;</expr_stmt>             
	                <expr_stmt><expr><call><name><name pos:line="802" pos:column="25">System</name><op:operator pos:line="802" pos:column="31">.</op:operator><name pos:line="802" pos:column="32">out</name><op:operator pos:line="802" pos:column="35">.</op:operator><name pos:line="802" pos:column="36">println</name></name><argument_list pos:line="802" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="802" pos:column="44">"ssn "</lit:literal><op:operator pos:line="802" pos:column="50">+</op:operator>  <name pos:line="802" pos:column="53">ssn</name> <op:operator pos:line="802" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="802" pos:column="59">"  Sum  "</lit:literal> <op:operator pos:line="802" pos:column="69">+</op:operator> <name pos:line="802" pos:column="71">sum</name> <op:operator pos:line="802" pos:column="75">+</op:operator><lit:literal type="string" pos:line="802" pos:column="76">" Average "</lit:literal> <op:operator pos:line="802" pos:column="88">+</op:operator>  <name pos:line="802" pos:column="91">average</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>           
	           <expr_stmt><expr><name pos:line="803" pos:column="20">result</name> <op:operator pos:line="803" pos:column="27">=</op:operator> <call><name><name pos:line="803" pos:column="29">stat</name><op:operator pos:line="803" pos:column="33">.</op:operator><name pos:line="803" pos:column="34">executeQuery</name></name><argument_list pos:line="803" pos:column="46">(<argument><expr><name pos:line="803" pos:column="47">wage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	           <while pos:line="804" pos:column="20">while<condition pos:line="804" pos:column="25">(<expr><call><name><name pos:line="804" pos:column="26">result</name><op:operator pos:line="804" pos:column="32">.</op:operator><name pos:line="804" pos:column="33">next</name></name><argument_list pos:line="804" pos:column="37">()</argument_list></call></expr>)</condition><block pos:line="804" pos:column="40">{
	            	 <expr_stmt><expr><name pos:line="805" pos:column="26">countwage</name><op:operator pos:line="805" pos:column="35">++</op:operator></expr>;</expr_stmt>
	            	 <decl_stmt><decl><type><name pos:line="806" pos:column="26">int</name></type> <name pos:line="806" pos:column="30">weekwage</name> <init pos:line="806" pos:column="39">= <expr><call><name><name pos:line="806" pos:column="41">result</name><op:operator pos:line="806" pos:column="47">.</op:operator><name pos:line="806" pos:column="48">getInt</name></name><argument_list pos:line="806" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="806" pos:column="55">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	            	 <decl_stmt><decl><type><name pos:line="807" pos:column="26">String</name></type> <name pos:line="807" pos:column="33">reason</name> <init pos:line="807" pos:column="40">= <expr><call><name><name pos:line="807" pos:column="42">result</name><op:operator pos:line="807" pos:column="48">.</op:operator><name pos:line="807" pos:column="49">getString</name></name><argument_list pos:line="807" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="807" pos:column="59">"unemploymentreason"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	            	 <comment type="line" pos:line="808" pos:column="26">//int ssn = result.getInt(3);</comment>
	            	 <expr_stmt><expr><call><name><name pos:line="809" pos:column="26">System</name><op:operator pos:line="809" pos:column="32">.</op:operator><name pos:line="809" pos:column="33">out</name><op:operator pos:line="809" pos:column="36">.</op:operator><name pos:line="809" pos:column="37">println</name></name><argument_list pos:line="809" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="809" pos:column="45">"Number of row  "</lit:literal>  <op:operator pos:line="809" pos:column="64">+</op:operator> <name pos:line="809" pos:column="66">countwage</name> <op:operator pos:line="809" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="809" pos:column="78">"  ssn  "</lit:literal>  <op:operator pos:line="809" pos:column="89">+</op:operator>  <name pos:line="809" pos:column="92">ssn</name> <op:operator pos:line="809" pos:column="96">+</op:operator> <lit:literal type="string" pos:line="809" pos:column="98">"  weekwage  "</lit:literal> <op:operator pos:line="809" pos:column="113">+</op:operator>  <name pos:line="809" pos:column="116">weekwage</name><op:operator pos:line="809" pos:column="124">+</op:operator> <lit:literal type="string" pos:line="809" pos:column="126">"   unemploymentreason  "</lit:literal> <op:operator pos:line="809" pos:column="152">+</op:operator> <name pos:line="809" pos:column="154">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          }</block></while>
	            	               
	          <if pos:line="812" pos:column="19">if <condition pos:line="812" pos:column="22">(<expr><call><name><name pos:line="812" pos:column="23">result</name><op:operator pos:line="812" pos:column="29">.</op:operator><name pos:line="812" pos:column="30">getConcurrency</name></name><argument_list pos:line="812" pos:column="44">()</argument_list></call> <op:operator pos:line="812" pos:column="47">==</op:operator> <name><name pos:line="812" pos:column="50">ResultSet</name><op:operator pos:line="812" pos:column="59">.</op:operator><name pos:line="812" pos:column="60">CONCUR_UPDATABLE</name></name></expr>)</condition><then pos:line="812" pos:column="77"> <block pos:line="812" pos:column="78">{
	              <expr_stmt><expr><call><name><name pos:line="813" pos:column="23">System</name><op:operator pos:line="813" pos:column="29">.</op:operator><name pos:line="813" pos:column="30">out</name><op:operator pos:line="813" pos:column="33">.</op:operator><name pos:line="813" pos:column="34">println</name></name><argument_list pos:line="813" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="813" pos:column="42">"ResultSet non-updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          }</block></then> <else pos:line="814" pos:column="21">else <block pos:line="814" pos:column="26">{
	              <expr_stmt><expr><call><name><name pos:line="815" pos:column="23">System</name><op:operator pos:line="815" pos:column="29">.</op:operator><name pos:line="815" pos:column="30">out</name><op:operator pos:line="815" pos:column="33">.</op:operator><name pos:line="815" pos:column="34">println</name></name><argument_list pos:line="815" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="815" pos:column="42">"ResultSet updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          }</block></else></if>
	          <expr_stmt><expr><name pos:line="817" pos:column="19">result</name> <op:operator pos:line="817" pos:column="26">=</op:operator> <call><name><name pos:line="817" pos:column="28">stat</name><op:operator pos:line="817" pos:column="32">.</op:operator><name pos:line="817" pos:column="33">executeQuery</name></name><argument_list pos:line="817" pos:column="45">(<argument><expr><name pos:line="817" pos:column="46">updatetable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><call><name><name pos:line="818" pos:column="19">result</name><op:operator pos:line="818" pos:column="25">.</op:operator><name pos:line="818" pos:column="26">beforeFirst</name></name><argument_list pos:line="818" pos:column="37">()</argument_list></call></expr>;</expr_stmt>  
	          <while pos:line="819" pos:column="19">while<condition pos:line="819" pos:column="24">(<expr><call><name><name pos:line="819" pos:column="25">result</name><op:operator pos:line="819" pos:column="31">.</op:operator><name pos:line="819" pos:column="32">next</name></name><argument_list pos:line="819" pos:column="36">()</argument_list></call></expr>)</condition><block pos:line="819" pos:column="39">{       	  
	        	  <decl_stmt><decl><type><name pos:line="820" pos:column="27">int</name></type> <name pos:line="820" pos:column="31">weekwage</name> <init pos:line="820" pos:column="40">=<expr><op:operator pos:line="820" pos:column="41">(</op:operator> <call><name><name pos:line="820" pos:column="43">result</name><op:operator pos:line="820" pos:column="49">.</op:operator><name pos:line="820" pos:column="50">getInt</name></name><argument_list pos:line="820" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="820" pos:column="57">"weekwage"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="820" pos:column="68">)</op:operator></expr></init></decl>;</decl_stmt>
	        	  <comment type="line" pos:line="821" pos:column="27">// System.out.println( " ," + weekwage);</comment>
	        	  <expr_stmt><expr><call><name><name pos:line="822" pos:column="27">result</name><op:operator pos:line="822" pos:column="33">.</op:operator><name pos:line="822" pos:column="34">updateInt</name></name><argument_list pos:line="822" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="822" pos:column="44">"weekwage"</lit:literal></expr></argument>,<argument><expr><name pos:line="822" pos:column="55">weekwage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         	
	              <expr_stmt><expr><call><name><name pos:line="823" pos:column="23">result</name><op:operator pos:line="823" pos:column="29">.</op:operator><name pos:line="823" pos:column="30">updateRow</name></name><argument_list pos:line="823" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
	          }</block></while>
	               
	        <expr_stmt><expr><call><name><name pos:line="826" pos:column="17">acc</name><op:operator pos:line="826" pos:column="20">.</op:operator><name pos:line="826" pos:column="21">printResult</name></name><argument_list pos:line="826" pos:column="32">(<argument><expr><name pos:line="826" pos:column="33">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        
	        <expr_stmt><expr><call><name><name pos:line="828" pos:column="17">System</name><op:operator pos:line="828" pos:column="23">.</op:operator><name pos:line="828" pos:column="24">out</name><op:operator pos:line="828" pos:column="27">.</op:operator><name pos:line="828" pos:column="28">println</name></name><argument_list pos:line="828" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="828" pos:column="36">"-------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>               
	        <expr_stmt><expr><call><name><name pos:line="829" pos:column="17">stat</name><op:operator pos:line="829" pos:column="21">.</op:operator><name pos:line="829" pos:column="22">close</name></name><argument_list pos:line="829" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	       
	        }</block>
	        <catch pos:line="832" pos:column="17">catch<parameter_list pos:line="832" pos:column="22">(<param><decl><type><name pos:line="832" pos:column="23">Exception</name></type> <name pos:line="832" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="832" pos:column="35">{
	        
	            <expr_stmt><expr><call><name><name pos:line="834" pos:column="21">e</name><op:operator pos:line="834" pos:column="22">.</op:operator><name pos:line="834" pos:column="23">printStackTrace</name></name><argument_list pos:line="834" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
	        }</block></catch></try>
			
		<return pos:line="837" pos:column="17">return <expr><name pos:line="837" pos:column="24">average</name></expr>;</return>
	}</block></function>
	
	
	<function><type><specifier pos:line="841" pos:column="9">public</specifier> <name pos:line="841" pos:column="16">int</name></type> <name pos:line="841" pos:column="20">updatestability</name><parameter_list pos:line="841" pos:column="35">(<param><decl><type><name pos:line="841" pos:column="36">String</name></type> <name pos:line="841" pos:column="43">zipcode</name></decl></param>,<param><decl><type><name pos:line="841" pos:column="51">int</name></type> <name pos:line="841" pos:column="55">industrycode</name></decl></param>,<param><decl><type><name pos:line="841" pos:column="68">int</name></type> <name pos:line="841" pos:column="72">occupationcode</name></decl></param>)</parameter_list><block pos:line="841" pos:column="87">{
		<decl_stmt><decl><type><name pos:line="842" pos:column="17">int</name></type> <name pos:line="842" pos:column="21">count</name> <init pos:line="842" pos:column="27">= <expr><lit:literal type="number" pos:line="842" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="843" pos:column="17">int</name></type> <name pos:line="843" pos:column="21">numcount</name> <init pos:line="843" pos:column="30">= <expr><lit:literal type="number" pos:line="843" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="844" pos:column="17">int</name></type> <name pos:line="844" pos:column="21">stability</name> <init pos:line="844" pos:column="31">= <expr><lit:literal type="number" pos:line="844" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="845" pos:column="17">Statement</name></type> <name pos:line="845" pos:column="27">stat</name> <init pos:line="845" pos:column="32">= <expr><lit:literal type="null" pos:line="845" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="846" pos:column="17">ResultSet</name></type> <name pos:line="846" pos:column="27">result</name> <init pos:line="846" pos:column="34">= <expr><lit:literal type="null" pos:line="846" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="847" pos:column="17">try<block pos:line="847" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="848" pos:column="25">Connection</name></type> <name pos:line="848" pos:column="36">conn</name> <init pos:line="848" pos:column="41">= <expr><call><name><name pos:line="848" pos:column="43">DatabaseConnection</name><op:operator pos:line="848" pos:column="61">.</op:operator><name pos:line="848" pos:column="62">getConnection</name></name><argument_list pos:line="848" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="849" pos:column="13">stat</name> <op:operator pos:line="849" pos:column="18">=</op:operator> <call><name><name pos:line="849" pos:column="20">conn</name><op:operator pos:line="849" pos:column="24">.</op:operator><name pos:line="849" pos:column="25">createStatement</name></name><argument_list pos:line="849" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="850" pos:column="13">stat</name><op:operator pos:line="850" pos:column="17">=</op:operator><call><name><name pos:line="850" pos:column="18">conn</name><op:operator pos:line="850" pos:column="22">.</op:operator><name pos:line="850" pos:column="23">createStatement</name></name><argument_list pos:line="850" pos:column="38">(<argument><expr><name><name pos:line="850" pos:column="39">ResultSet</name><op:operator pos:line="850" pos:column="48">.</op:operator><name pos:line="850" pos:column="49">TYPE_SCROLL_INSENSITIVE</name></name></expr></argument>,
                                      <argument><expr><name><name pos:line="851" pos:column="39">ResultSet</name><op:operator pos:line="851" pos:column="48">.</op:operator><name pos:line="851" pos:column="49">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               
            <decl_stmt><decl><type><name pos:line="853" pos:column="13">String</name></type> <name pos:line="853" pos:column="20">table</name> <init pos:line="853" pos:column="26">= <expr><lit:literal type="string" pos:line="853" pos:column="28">"SELECT  distinct userrecord.ssn,ziptable.zip  FROM  ziptable, userrecord,job "</lit:literal>
				<op:operator pos:line="854" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="854" pos:column="35">" WHERE ziptable.zip = '"</lit:literal> <op:operator pos:line="854" pos:column="61">+</op:operator> <name pos:line="854" pos:column="63">zipcode</name> <op:operator pos:line="854" pos:column="71">+</op:operator> <lit:literal type="string" pos:line="854" pos:column="73">"' and industrycode = "</lit:literal> <op:operator pos:line="854" pos:column="97">+</op:operator> <name pos:line="854" pos:column="99">industrycode</name> <op:operator pos:line="854" pos:column="112">+</op:operator> <lit:literal type="string" pos:line="854" pos:column="114">" and occupationcode = "</lit:literal> <op:operator pos:line="854" pos:column="139">+</op:operator> <name pos:line="854" pos:column="141">occupationcode</name> <op:operator pos:line="854" pos:column="156">+</op:operator> <lit:literal type="string" pos:line="854" pos:column="158">" and  ziptable.zip = userrecord.zip and job.ssn = userrecord.ssn"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="855" pos:column="13">String</name></type> <name pos:line="855" pos:column="20">cmd_getAllUnemployed</name> <init pos:line="855" pos:column="41">= <expr><lit:literal type="string" pos:line="855" pos:column="43">"SELECT distinct employmentStat.ssn,ziptable.zip, employmentStat.unemploymentreason "</lit:literal>
				<op:operator pos:line="856" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="856" pos:column="35">" FROM ziptable, employmentStat, userrecord ,job"</lit:literal>
				<op:operator pos:line="857" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="857" pos:column="35">" WHERE job.ssn = employmentstat.ssn "</lit:literal> 
				<op:operator pos:line="858" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="858" pos:column="35">"and employmentstat.unemploymentreason &lt;&gt; 'null' "</lit:literal>
				<op:operator pos:line="859" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="859" pos:column="35">"and ziptable.zip = '"</lit:literal> <op:operator pos:line="859" pos:column="58">+</op:operator> <name pos:line="859" pos:column="60">zipcode</name> <op:operator pos:line="859" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="859" pos:column="70">"' "</lit:literal>
				<op:operator pos:line="860" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="860" pos:column="35">"and industrycode = "</lit:literal> <op:operator pos:line="860" pos:column="57">+</op:operator> <name pos:line="860" pos:column="59">industrycode</name> <op:operator pos:line="860" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="860" pos:column="74">""</lit:literal>
				<op:operator pos:line="861" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="861" pos:column="35">"and occupationcode = "</lit:literal> <op:operator pos:line="861" pos:column="59">+</op:operator> <name pos:line="861" pos:column="61">occupationcode</name> <op:operator pos:line="861" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="861" pos:column="78">""</lit:literal>
				<op:operator pos:line="862" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="862" pos:column="35">"and ziptable.zip = userrecord.zip"</lit:literal></expr></init></decl>;</decl_stmt>
           
			<decl_stmt><decl><type><name pos:line="864" pos:column="25">String</name></type> <name pos:line="864" pos:column="32">industry</name> <init pos:line="864" pos:column="41">= <expr><lit:literal type="string" pos:line="864" pos:column="43">"select industrycode,industry,stability from industry where industrycode = "</lit:literal> <op:operator pos:line="864" pos:column="120">+</op:operator> <name pos:line="864" pos:column="122">industrycode</name> <op:operator pos:line="864" pos:column="135">+</op:operator><lit:literal type="string" pos:line="864" pos:column="136">""</lit:literal></expr></init></decl>;</decl_stmt>		
            <decl_stmt><decl><type><name pos:line="865" pos:column="13">String</name></type> <name pos:line="865" pos:column="20">occupation</name> <init pos:line="865" pos:column="31">= <expr><lit:literal type="string" pos:line="865" pos:column="33">"select occupationcode ,occupation,stability from occupation where occupationcode = "</lit:literal> <op:operator pos:line="865" pos:column="119">+</op:operator> <name pos:line="865" pos:column="121">occupationcode</name> <op:operator pos:line="865" pos:column="136">+</op:operator> <lit:literal type="string" pos:line="865" pos:column="138">""</lit:literal></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name pos:line="867" pos:column="13">result</name> <op:operator pos:line="867" pos:column="20">=</op:operator> <call><name><name pos:line="867" pos:column="22">stat</name><op:operator pos:line="867" pos:column="26">.</op:operator><name pos:line="867" pos:column="27">executeQuery</name></name><argument_list pos:line="867" pos:column="39">(<argument><expr><name pos:line="867" pos:column="40">table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="868" pos:column="13">while<condition pos:line="868" pos:column="18">(<expr><call><name><name pos:line="868" pos:column="19">result</name><op:operator pos:line="868" pos:column="25">.</op:operator><name pos:line="868" pos:column="26">next</name></name><argument_list pos:line="868" pos:column="30">()</argument_list></call></expr>)</condition><block pos:line="868" pos:column="33">{			
			     <decl_stmt><decl><type><name pos:line="869" pos:column="30">int</name></type> <name pos:line="869" pos:column="34">ssn</name> <init pos:line="869" pos:column="38">= <expr><call><name><name pos:line="869" pos:column="40">result</name><op:operator pos:line="869" pos:column="46">.</op:operator><name pos:line="869" pos:column="47">getInt</name></name><argument_list pos:line="869" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="869" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>						
			     <comment type="line" pos:line="870" pos:column="30">//System.out.println(ssn + "," + zip  );			</comment>
		}</block></while>
            <expr_stmt><expr><name pos:line="872" pos:column="13">result</name> <op:operator pos:line="872" pos:column="20">=</op:operator> <call><name><name pos:line="872" pos:column="22">stat</name><op:operator pos:line="872" pos:column="26">.</op:operator><name pos:line="872" pos:column="27">executeQuery</name></name><argument_list pos:line="872" pos:column="39">(<argument><expr><name pos:line="872" pos:column="40">table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="873" pos:column="13">while<condition pos:line="873" pos:column="18">(<expr><call><name><name pos:line="873" pos:column="19">result</name><op:operator pos:line="873" pos:column="25">.</op:operator><name pos:line="873" pos:column="26">next</name></name><argument_list pos:line="873" pos:column="30">()</argument_list></call></expr>)</condition>
            	<expr_stmt><expr><name pos:line="874" pos:column="17">numcount</name><op:operator pos:line="874" pos:column="25">++</op:operator></expr>;</expr_stmt></while>
                <expr_stmt><expr><call><name><name pos:line="875" pos:column="17">System</name><op:operator pos:line="875" pos:column="23">.</op:operator><name pos:line="875" pos:column="24">out</name><op:operator pos:line="875" pos:column="27">.</op:operator><name pos:line="875" pos:column="28">println</name></name><argument_list pos:line="875" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="875" pos:column="36">"Total number of people working in zipcode "</lit:literal> <op:operator pos:line="875" pos:column="81">+</op:operator> <name pos:line="875" pos:column="83">zipcode</name> <op:operator pos:line="875" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="875" pos:column="93">" is "</lit:literal> <op:operator pos:line="875" pos:column="100">+</op:operator> <name pos:line="875" pos:column="102">numcount</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>    
		
		
		    <expr_stmt><expr><name pos:line="878" pos:column="21">result</name> <op:operator pos:line="878" pos:column="28">=</op:operator> <call><name><name pos:line="878" pos:column="30">stat</name><op:operator pos:line="878" pos:column="34">.</op:operator><name pos:line="878" pos:column="35">executeQuery</name></name><argument_list pos:line="878" pos:column="47">(<argument><expr><name pos:line="878" pos:column="48">cmd_getAllUnemployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <while pos:line="879" pos:column="21">while<condition pos:line="879" pos:column="26">(<expr><call><name><name pos:line="879" pos:column="27">result</name><op:operator pos:line="879" pos:column="33">.</op:operator><name pos:line="879" pos:column="34">next</name></name><argument_list pos:line="879" pos:column="38">()</argument_list></call></expr>)</condition><block pos:line="879" pos:column="41">{			
			      <decl_stmt><decl><type><name pos:line="880" pos:column="31">String</name></type> <name pos:line="880" pos:column="38">reason</name> <init pos:line="880" pos:column="45">= <expr><call><name><name pos:line="880" pos:column="47">result</name><op:operator pos:line="880" pos:column="53">.</op:operator><name pos:line="880" pos:column="54">getString</name></name><argument_list pos:line="880" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="880" pos:column="64">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			      <decl_stmt><decl><type><name pos:line="881" pos:column="31">int</name></type> <name pos:line="881" pos:column="35">ssn</name> <init pos:line="881" pos:column="39">= <expr><call><name><name pos:line="881" pos:column="41">result</name><op:operator pos:line="881" pos:column="47">.</op:operator><name pos:line="881" pos:column="48">getInt</name></name><argument_list pos:line="881" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="881" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			      <comment type="line" pos:line="882" pos:column="31">//System.out.println( ssn + "," + zip  + "," + reason );</comment>
			      <comment type="line" pos:line="883" pos:column="31">//System.out.println("=============");</comment>
	   	}</block></while>
		    <expr_stmt><expr><name pos:line="885" pos:column="21">result</name> <op:operator pos:line="885" pos:column="28">=</op:operator> <call><name><name pos:line="885" pos:column="30">stat</name><op:operator pos:line="885" pos:column="34">.</op:operator><name pos:line="885" pos:column="35">executeQuery</name></name><argument_list pos:line="885" pos:column="47">(<argument><expr><name pos:line="885" pos:column="48">cmd_getAllUnemployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <while pos:line="886" pos:column="21">while<condition pos:line="886" pos:column="26">(<expr><call><name><name pos:line="886" pos:column="27">result</name><op:operator pos:line="886" pos:column="33">.</op:operator><name pos:line="886" pos:column="34">next</name></name><argument_list pos:line="886" pos:column="38">()</argument_list></call></expr>)</condition>
			     <expr_stmt><expr><name pos:line="887" pos:column="30">count</name><op:operator pos:line="887" pos:column="35">++</op:operator></expr>;</expr_stmt></while>
		         <expr_stmt><expr><call><name><name pos:line="888" pos:column="26">System</name><op:operator pos:line="888" pos:column="32">.</op:operator><name pos:line="888" pos:column="33">out</name><op:operator pos:line="888" pos:column="36">.</op:operator><name pos:line="888" pos:column="37">println</name></name><argument_list pos:line="888" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="888" pos:column="45">"Total number of unemployed  people in zipcode "</lit:literal> <op:operator pos:line="888" pos:column="94">+</op:operator> <name pos:line="888" pos:column="96">zipcode</name> <op:operator pos:line="888" pos:column="104">+</op:operator>  <lit:literal type="string" pos:line="888" pos:column="107">" is "</lit:literal> <op:operator pos:line="888" pos:column="114">+</op:operator> <name pos:line="888" pos:column="116">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		         <expr_stmt><expr><call><name><name pos:line="889" pos:column="26">System</name><op:operator pos:line="889" pos:column="32">.</op:operator><name pos:line="889" pos:column="33">out</name><op:operator pos:line="889" pos:column="36">.</op:operator><name pos:line="889" pos:column="37">println</name></name><argument_list pos:line="889" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="889" pos:column="45">"======================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		         <decl_stmt><decl><type><name pos:line="890" pos:column="26">int</name></type>  <name pos:line="890" pos:column="31">sum</name> <init pos:line="890" pos:column="35">= <expr><name pos:line="890" pos:column="37">count</name> <op:operator pos:line="890" pos:column="43">+</op:operator> <name pos:line="890" pos:column="45">numcount</name></expr></init></decl>;</decl_stmt>
		
		  <if pos:line="892" pos:column="19">if <condition pos:line="892" pos:column="22">(<expr><call><name><name pos:line="892" pos:column="23">result</name><op:operator pos:line="892" pos:column="29">.</op:operator><name pos:line="892" pos:column="30">getConcurrency</name></name><argument_list pos:line="892" pos:column="44">()</argument_list></call> <op:operator pos:line="892" pos:column="47">==</op:operator> <name><name pos:line="892" pos:column="50">ResultSet</name><op:operator pos:line="892" pos:column="59">.</op:operator><name pos:line="892" pos:column="60">CONCUR_UPDATABLE</name></name></expr>)</condition><then pos:line="892" pos:column="77"> <block pos:line="892" pos:column="78">{
            <expr_stmt><expr><call><name><name pos:line="893" pos:column="13">System</name><op:operator pos:line="893" pos:column="19">.</op:operator><name pos:line="893" pos:column="20">out</name><op:operator pos:line="893" pos:column="23">.</op:operator><name pos:line="893" pos:column="24">println</name></name><argument_list pos:line="893" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="893" pos:column="32">"ResultSet non-updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else pos:line="894" pos:column="13">else <block pos:line="894" pos:column="18">{
            <expr_stmt><expr><call><name><name pos:line="895" pos:column="13">System</name><op:operator pos:line="895" pos:column="19">.</op:operator><name pos:line="895" pos:column="20">out</name><op:operator pos:line="895" pos:column="23">.</op:operator><name pos:line="895" pos:column="24">println</name></name><argument_list pos:line="895" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="895" pos:column="32">"ResultSet updatable."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="897" pos:column="25">System</name><op:operator pos:line="897" pos:column="31">.</op:operator><name pos:line="897" pos:column="32">out</name><op:operator pos:line="897" pos:column="35">.</op:operator><name pos:line="897" pos:column="36">println</name></name><argument_list pos:line="897" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="897" pos:column="44">"======================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		   <expr_stmt><expr><name pos:line="899" pos:column="20">result</name> <op:operator pos:line="899" pos:column="27">=</op:operator> <call><name><name pos:line="899" pos:column="29">stat</name><op:operator pos:line="899" pos:column="33">.</op:operator><name pos:line="899" pos:column="34">executeQuery</name></name><argument_list pos:line="899" pos:column="46">(<argument><expr><name pos:line="899" pos:column="47">industry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		   <expr_stmt><expr><call><name><name pos:line="900" pos:column="20">result</name><op:operator pos:line="900" pos:column="26">.</op:operator><name pos:line="900" pos:column="27">beforeFirst</name></name><argument_list pos:line="900" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		   <while pos:line="901" pos:column="20">while<condition pos:line="901" pos:column="25">(<expr><call><name><name pos:line="901" pos:column="26">result</name><op:operator pos:line="901" pos:column="32">.</op:operator><name pos:line="901" pos:column="33">next</name></name><argument_list pos:line="901" pos:column="37">()</argument_list></call></expr>)</condition><block pos:line="901" pos:column="40">{
			   <if pos:line="902" pos:column="28">if<condition pos:line="902" pos:column="30">(<expr><name pos:line="902" pos:column="31">sum</name> <op:operator pos:line="902" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="902" pos:column="38">0</lit:literal></expr>)</condition><then><block pos:line="902" pos:column="40">{
					  <expr_stmt><expr><name pos:line="903" pos:column="43">stability</name> <op:operator pos:line="903" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="903" pos:column="55">0</lit:literal></expr>;</expr_stmt>
				   }</block></then><else pos:line="904" pos:column="37">else<block pos:line="904" pos:column="41">{
				   
		             <expr_stmt><expr><name pos:line="906" pos:column="30">stability</name> <op:operator pos:line="906" pos:column="40">=</op:operator> <op:operator pos:line="906" pos:column="42">(</op:operator><name pos:line="906" pos:column="43">numcount</name><op:operator pos:line="906" pos:column="51">*</op:operator><lit:literal type="number" pos:line="906" pos:column="52">10</lit:literal><op:operator pos:line="906" pos:column="54">/</op:operator><op:operator pos:line="906" pos:column="55">(</op:operator><name pos:line="906" pos:column="56">sum</name><op:operator pos:line="906" pos:column="59">)</op:operator><op:operator pos:line="906" pos:column="60">)</op:operator></expr>;</expr_stmt>
				   }</block></else></if>
	            
	             <comment type="line" pos:line="909" pos:column="22">// int indu_code = result.getInt(1);</comment>
	             <comment type="line" pos:line="910" pos:column="22">// String indus = result.getString(2);</comment>
	             <comment type="line" pos:line="911" pos:column="22">//System.out.println(indu_code + "," + indus + "," + stability);</comment>
	             <expr_stmt><expr><call><name><name pos:line="912" pos:column="22">result</name><op:operator pos:line="912" pos:column="28">.</op:operator><name pos:line="912" pos:column="29">updateInt</name></name><argument_list pos:line="912" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="912" pos:column="39">"stability"</lit:literal></expr></argument>,<argument><expr><name pos:line="912" pos:column="51">stability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   	
                 <expr_stmt><expr><call><name><name pos:line="913" pos:column="18">result</name><op:operator pos:line="913" pos:column="24">.</op:operator><name pos:line="913" pos:column="25">updateRow</name></name><argument_list pos:line="913" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name pos:line="915" pos:column="17">acc</name><op:operator pos:line="915" pos:column="20">.</op:operator><name pos:line="915" pos:column="21">printIndustry</name></name><argument_list pos:line="915" pos:column="34">(<argument><expr><name pos:line="915" pos:column="35">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="916" pos:column="17">System</name><op:operator pos:line="916" pos:column="23">.</op:operator><name pos:line="916" pos:column="24">out</name><op:operator pos:line="916" pos:column="27">.</op:operator><name pos:line="916" pos:column="28">println</name></name><argument_list pos:line="916" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="916" pos:column="36">"======================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name pos:line="917" pos:column="19">result</name> <op:operator pos:line="917" pos:column="26">=</op:operator> <call><name><name pos:line="917" pos:column="28">stat</name><op:operator pos:line="917" pos:column="32">.</op:operator><name pos:line="917" pos:column="33">executeQuery</name></name><argument_list pos:line="917" pos:column="45">(<argument><expr><name pos:line="917" pos:column="46">occupation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name><name pos:line="918" pos:column="19">result</name><op:operator pos:line="918" pos:column="25">.</op:operator><name pos:line="918" pos:column="26">beforeFirst</name></name><argument_list pos:line="918" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		  <while pos:line="919" pos:column="19">while<condition pos:line="919" pos:column="24">(<expr><call><name><name pos:line="919" pos:column="25">result</name><op:operator pos:line="919" pos:column="31">.</op:operator><name pos:line="919" pos:column="32">next</name></name><argument_list pos:line="919" pos:column="36">()</argument_list></call></expr>)</condition><block pos:line="919" pos:column="39">{
			  <if pos:line="920" pos:column="27">if<condition pos:line="920" pos:column="29">(<expr><name pos:line="920" pos:column="30">sum</name> <op:operator pos:line="920" pos:column="34">==</op:operator> <lit:literal type="number" pos:line="920" pos:column="37">0</lit:literal></expr>)</condition><then><block pos:line="920" pos:column="39">{
				  <expr_stmt><expr><name pos:line="921" pos:column="35">stability</name> <op:operator pos:line="921" pos:column="45">=</op:operator> <lit:literal type="number" pos:line="921" pos:column="47">0</lit:literal></expr>;</expr_stmt>
			   }</block></then><else pos:line="922" pos:column="29">else<block pos:line="922" pos:column="33">{
			   
	             <expr_stmt><expr><name pos:line="924" pos:column="22">stability</name> <op:operator pos:line="924" pos:column="32">=</op:operator> <op:operator pos:line="924" pos:column="34">(</op:operator><name pos:line="924" pos:column="35">numcount</name><op:operator pos:line="924" pos:column="43">*</op:operator><lit:literal type="number" pos:line="924" pos:column="44">10</lit:literal><op:operator pos:line="924" pos:column="46">/</op:operator><op:operator pos:line="924" pos:column="47">(</op:operator><name pos:line="924" pos:column="48">sum</name><op:operator pos:line="924" pos:column="51">)</op:operator><op:operator pos:line="924" pos:column="52">)</op:operator></expr>;</expr_stmt>
			   }</block></else></if>
	             <comment type="line" pos:line="926" pos:column="22">//stability = (numcount*10/(count+numcount));</comment>
	           <comment type="line" pos:line="927" pos:column="20">//int occupcode = result.getInt(1);</comment>
	           <comment type="line" pos:line="928" pos:column="20">//String occup = result.getString(2);</comment>
	           <comment type="line" pos:line="929" pos:column="20">// System.out.println(occupcode + "," +  occup +  "," + stability);</comment>
	           <expr_stmt><expr><call><name><name pos:line="930" pos:column="20">result</name><op:operator pos:line="930" pos:column="26">.</op:operator><name pos:line="930" pos:column="27">updateInt</name></name><argument_list pos:line="930" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="930" pos:column="37">"stability"</lit:literal></expr></argument>,<argument><expr><name pos:line="930" pos:column="49">stability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   	
               <expr_stmt><expr><call><name><name pos:line="931" pos:column="16">result</name><op:operator pos:line="931" pos:column="22">.</op:operator><name pos:line="931" pos:column="23">updateRow</name></name><argument_list pos:line="931" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><name pos:line="933" pos:column="17">acc</name><op:operator pos:line="933" pos:column="20">.</op:operator><name pos:line="933" pos:column="21">printOccupation</name></name><argument_list pos:line="933" pos:column="36">(<argument><expr><name pos:line="933" pos:column="37">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="934" pos:column="17">System</name><op:operator pos:line="934" pos:column="23">.</op:operator><name pos:line="934" pos:column="24">out</name><op:operator pos:line="934" pos:column="27">.</op:operator><name pos:line="934" pos:column="28">println</name></name><argument_list pos:line="934" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="934" pos:column="36">"======================================="</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name pos:line="936" pos:column="17">stat</name><op:operator pos:line="936" pos:column="21">.</op:operator><name pos:line="936" pos:column="22">close</name></name><argument_list pos:line="936" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
       
		}</block><catch pos:line="938" pos:column="18">catch<parameter_list pos:line="938" pos:column="23">(<param><decl><type><name pos:line="938" pos:column="24">SQLException</name></type> <name pos:line="938" pos:column="37">e</name></decl></param>)</parameter_list><block pos:line="938" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="939" pos:column="25">e</name><op:operator pos:line="939" pos:column="26">.</op:operator><name pos:line="939" pos:column="27">printStackTrace</name></name><argument_list pos:line="939" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		
		}</block></catch></try>
		<return pos:line="942" pos:column="17">return <expr><name pos:line="942" pos:column="24">stability</name></expr>;</return>
	}</block></function>
	 <function><type><specifier pos:line="944" pos:column="10">public</specifier> <name pos:line="944" pos:column="17">int</name></type> <name pos:line="944" pos:column="21">FindTopOccupationCode</name><parameter_list pos:line="944" pos:column="42">( <param><decl><type><name pos:line="944" pos:column="44">String</name></type> <name pos:line="944" pos:column="51">statename</name></decl></param>)</parameter_list> <block pos:line="944" pos:column="62">{
		 <decl_stmt><decl><type><name pos:line="945" pos:column="18">Statement</name></type> <name pos:line="945" pos:column="28">stat</name> <init pos:line="945" pos:column="33">= <expr><lit:literal type="null" pos:line="945" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		 <decl_stmt><decl><type><name pos:line="946" pos:column="18">ResultSet</name></type> <name pos:line="946" pos:column="28">result</name> <init pos:line="946" pos:column="35">= <expr><lit:literal type="null" pos:line="946" pos:column="37">null</lit:literal></expr></init></decl>;</decl_stmt>
	     

	      <try pos:line="949" pos:column="15">try<block pos:line="949" pos:column="18">{
	    	  <decl_stmt><decl><type><name pos:line="950" pos:column="19">Connection</name></type> <name pos:line="950" pos:column="30">conn</name> <init pos:line="950" pos:column="35">= <expr><call><name><name pos:line="950" pos:column="37">DatabaseConnection</name><op:operator pos:line="950" pos:column="55">.</op:operator><name pos:line="950" pos:column="56">getConnection</name></name><argument_list pos:line="950" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
	     	    <expr_stmt><expr><name pos:line="951" pos:column="21">stat</name> <op:operator pos:line="951" pos:column="26">=</op:operator> <call><name><name pos:line="951" pos:column="28">conn</name><op:operator pos:line="951" pos:column="32">.</op:operator><name pos:line="951" pos:column="33">createStatement</name></name><argument_list pos:line="951" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="952" pos:column="17">result</name> <op:operator pos:line="952" pos:column="24">=</op:operator> <call><name><name pos:line="952" pos:column="26">stat</name><op:operator pos:line="952" pos:column="30">.</op:operator><name pos:line="952" pos:column="31">executeQuery</name></name><argument_list pos:line="952" pos:column="43">(     
	             
	        <argument><expr><lit:literal type="string" pos:line="954" pos:column="17">"select occupationcode from job,userrecord,ziptable where userrecord.zip = ziptable.zip and userrecord.ssn = job.ssn and statename = '"</lit:literal> <op:operator pos:line="954" pos:column="153">+</op:operator> <name pos:line="954" pos:column="155">statename</name> <op:operator pos:line="954" pos:column="165">+</op:operator><lit:literal type="string" pos:line="954" pos:column="166">"' group by occupationcode,employersize,statename"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       <if pos:line="955" pos:column="16">if <condition pos:line="955" pos:column="19">(<expr><op:operator pos:line="955" pos:column="20">!</op:operator><call><name><name pos:line="955" pos:column="21">result</name><op:operator pos:line="955" pos:column="27">.</op:operator><name pos:line="955" pos:column="28">next</name></name><argument_list pos:line="955" pos:column="32">()</argument_list></call></expr>)</condition><then pos:line="955" pos:column="35">
	        <block pos:line="956" pos:column="17">{
	                <comment type="line" pos:line="957" pos:column="25">//reportFailure("No rows in ResultSet");</comment>
	                <comment type="line" pos:line="958" pos:column="25">//return 1;</comment>
	        }</block></then></if>
	        
	        <expr_stmt><expr><call><name pos:line="961" pos:column="17">FindTop5Occupationcode</name><argument_list pos:line="961" pos:column="39">(<argument><expr><name pos:line="961" pos:column="40">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      }</block> <catch pos:line="962" pos:column="17">catch <parameter_list pos:line="962" pos:column="23">(<param><decl><type><name pos:line="962" pos:column="24">SQLException</name></type> <name pos:line="962" pos:column="37">e</name></decl></param>)</parameter_list>
	        <block pos:line="963" pos:column="17">{
	           <expr_stmt><expr><call><name><name pos:line="964" pos:column="20">e</name><op:operator pos:line="964" pos:column="21">.</op:operator><name pos:line="964" pos:column="22">printStackTrace</name></name><argument_list pos:line="964" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	      }</block></catch></try> 
	      <return pos:line="966" pos:column="15">return <expr><lit:literal type="number" pos:line="966" pos:column="22">5</lit:literal></expr>;</return>
	   }</block></function>

	 <function><type><annotation pos:line="969" pos:column="10">@<name pos:line="969" pos:column="11">TaDaMethod</name><argument_list pos:line="969" pos:column="21">(<argument><expr><name pos:line="969" pos:column="22">variablesToTrack</name> <op:operator pos:line="969" pos:column="39">=</op:operator> <block pos:line="969" pos:column="41">{<expr><lit:literal type="string" pos:line="969" pos:column="42">"code"</lit:literal></expr>}</block></expr></argument>,
			 <argument><expr><name pos:line="970" pos:column="26">correspondingDatabaseAttribute</name> <op:operator pos:line="970" pos:column="57">=</op:operator> <block pos:line="970" pos:column="59">{<expr><lit:literal type="string" pos:line="970" pos:column="60">"job.occupationcode"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	   <specifier pos:line="971" pos:column="12">private</specifier> <name pos:line="971" pos:column="20">void</name></type> <name pos:line="971" pos:column="25">FindTop5Occupationcode</name><parameter_list pos:line="971" pos:column="47">(<param><decl><type><name pos:line="971" pos:column="48">ResultSet</name></type> <name pos:line="971" pos:column="58">rs</name></decl></param>)</parameter_list><block pos:line="971" pos:column="61">{
	      
	     <decl_stmt><decl><type><name pos:line="973" pos:column="14">int</name><index pos:line="973" pos:column="17">[]</index></type> <name pos:line="973" pos:column="20">resultCount</name> <init pos:line="973" pos:column="32">= <expr><op:operator pos:line="973" pos:column="34">new</op:operator> <name><name pos:line="973" pos:column="38">int</name><index pos:line="973" pos:column="41">[<expr><lit:literal type="number" pos:line="973" pos:column="42">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	     <decl_stmt><decl><type><name pos:line="974" pos:column="14">int</name><index pos:line="974" pos:column="17">[]</index></type> <name pos:line="974" pos:column="20">resultStates</name><init pos:line="974" pos:column="32">= <expr><op:operator pos:line="974" pos:column="34">new</op:operator> <name><name pos:line="974" pos:column="38">int</name><index pos:line="974" pos:column="41">[<expr><lit:literal type="number" pos:line="974" pos:column="42">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	     <decl_stmt><decl><type><name pos:line="975" pos:column="14">int</name></type> <name pos:line="975" pos:column="18">resultIndex</name> <init pos:line="975" pos:column="30">= <expr><lit:literal type="number" pos:line="975" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	     <decl_stmt><decl><type><name pos:line="976" pos:column="14">int</name></type> <name pos:line="976" pos:column="18">stateIndex</name> <init pos:line="976" pos:column="29">=<expr><lit:literal type="number" pos:line="976" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	     <try pos:line="977" pos:column="14">try<block pos:line="977" pos:column="17">{
	       <do pos:line="978" pos:column="16">do<block pos:line="978" pos:column="18">{	          
	    	  <decl_stmt><decl><type><name pos:line="979" pos:column="19">int</name></type> <name pos:line="979" pos:column="23">code</name> <init pos:line="979" pos:column="28">= <expr><call><name><name pos:line="979" pos:column="30">rs</name><op:operator pos:line="979" pos:column="32">.</op:operator><name pos:line="979" pos:column="33">getInt</name></name><argument_list pos:line="979" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="979" pos:column="40">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	          <expr_stmt><expr><name pos:line="980" pos:column="19">stateIndex</name> <op:operator pos:line="980" pos:column="30">=</op:operator> <call><name><name pos:line="980" pos:column="32">acc</name><op:operator pos:line="980" pos:column="35">.</op:operator><name pos:line="980" pos:column="36">getOccupation</name></name><argument_list pos:line="980" pos:column="49">(<argument><expr><name pos:line="980" pos:column="50">resultStates</name></expr></argument>, <argument><expr><name pos:line="980" pos:column="64">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <if pos:line="981" pos:column="19">if<condition pos:line="981" pos:column="21">( <expr><name pos:line="981" pos:column="23">stateIndex</name> <op:operator pos:line="981" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="981" pos:column="36">50</lit:literal></expr>)</condition><then><block pos:line="981" pos:column="39">{	            
	            <expr_stmt><expr><name><name pos:line="982" pos:column="21">resultCount</name><index pos:line="982" pos:column="32">[<expr><name pos:line="982" pos:column="33">stateIndex</name></expr>]</index></name><op:operator pos:line="982" pos:column="44">++</op:operator></expr>;</expr_stmt>	            
	          }</block></then>
	          <else pos:line="984" pos:column="19">else<block pos:line="984" pos:column="23">{	            
	            <expr_stmt><expr><name><name pos:line="985" pos:column="21">resultCount</name><index pos:line="985" pos:column="32">[<expr><name pos:line="985" pos:column="33">resultIndex</name></expr>]</index></name><op:operator pos:line="985" pos:column="45">++</op:operator></expr>;</expr_stmt>
	            <expr_stmt><expr><name><name pos:line="986" pos:column="21">resultStates</name><index pos:line="986" pos:column="33">[<expr><name pos:line="986" pos:column="34">resultIndex</name></expr>]</index></name> <op:operator pos:line="986" pos:column="47">=</op:operator> <name pos:line="986" pos:column="49">code</name></expr>;</expr_stmt>
	            <expr_stmt><expr><name pos:line="987" pos:column="21">resultIndex</name><op:operator pos:line="987" pos:column="32">++</op:operator></expr>;</expr_stmt>
	          }</block></else></if>         
	          
	       }</block>while<condition pos:line="990" pos:column="22">(<expr><call><name><name pos:line="990" pos:column="23">rs</name><op:operator pos:line="990" pos:column="25">.</op:operator><name pos:line="990" pos:column="26">next</name></name><argument_list pos:line="990" pos:column="30">()</argument_list></call></expr>)</condition>;</do>
	       <expr_stmt><expr><call><name pos:line="991" pos:column="16">FindBestoccupationcode</name><argument_list pos:line="991" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="991" pos:column="39">5</lit:literal></expr></argument>, <argument><expr><name pos:line="991" pos:column="42">resultStates</name></expr></argument>, <argument><expr><name pos:line="991" pos:column="56">resultCount</name></expr></argument>, <argument><expr><name pos:line="991" pos:column="69">resultIndex</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="991" pos:column="82">" Number of workers: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	       
	      }</block> <catch pos:line="993" pos:column="17">catch <parameter_list pos:line="993" pos:column="23">(<param><decl><type><name pos:line="993" pos:column="24">SQLException</name></type> <name pos:line="993" pos:column="37">e</name></decl></param>)</parameter_list>
	        <block pos:line="994" pos:column="17">{
		   <expr_stmt><expr><call><name><name pos:line="995" pos:column="20">e</name><op:operator pos:line="995" pos:column="21">.</op:operator><name pos:line="995" pos:column="22">printStackTrace</name></name><argument_list pos:line="995" pos:column="37">()</argument_list></call></expr>;</expr_stmt>     
	      }</block></catch></try>     
	      
	    }</block></function>

	   <function><type><specifier pos:line="1000" pos:column="12">public</specifier> <name pos:line="1000" pos:column="19">void</name></type> <name pos:line="1000" pos:column="24">FindBestoccupationcode</name><parameter_list pos:line="1000" pos:column="46">(<param><decl><type><name pos:line="1000" pos:column="47">int</name></type> <name pos:line="1000" pos:column="51">numResults</name></decl></param>, <param><decl><type><name><name pos:line="1000" pos:column="63">int</name><index pos:line="1000" pos:column="66">[]</index></name></type> <name pos:line="1000" pos:column="69">resultStates</name></decl></param>, <param><decl><type><name><name pos:line="1000" pos:column="83">int</name><index pos:line="1000" pos:column="86">[]</index></name></type> <name pos:line="1000" pos:column="89">resultValues</name></decl></param>, <param><decl><type><name pos:line="1000" pos:column="103">int</name></type> <name pos:line="1000" pos:column="107">resultIndex</name></decl></param>, <param><decl><type><name pos:line="1000" pos:column="120">String</name></type> <name pos:line="1000" pos:column="127">text</name></decl></param>)</parameter_list><block pos:line="1000" pos:column="132">{

	       <decl_stmt><decl><type><name pos:line="1002" pos:column="16">int</name></type> <name pos:line="1002" pos:column="20">maxValue</name> <init pos:line="1002" pos:column="29">=<expr><lit:literal type="number" pos:line="1002" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	       <decl_stmt><decl><type><name pos:line="1003" pos:column="16">int</name></type> <name pos:line="1003" pos:column="20">maxIndex</name> <init pos:line="1003" pos:column="29">=<expr><lit:literal type="number" pos:line="1003" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	       <decl_stmt><decl><type><name pos:line="1004" pos:column="16">int</name></type> <name pos:line="1004" pos:column="20">j</name><init pos:line="1004" pos:column="21">=<expr><lit:literal type="number" pos:line="1004" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	       <for pos:line="1005" pos:column="16">for(<init><decl><type><name pos:line="1005" pos:column="20">int</name></type> <name pos:line="1005" pos:column="24">i</name><init pos:line="1005" pos:column="25">=<expr><lit:literal type="number" pos:line="1005" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1005" pos:column="29">i</name><op:operator pos:line="1005" pos:column="30">&lt;</op:operator><name pos:line="1005" pos:column="31">numResults</name></expr>;</condition> <incr><expr><name pos:line="1005" pos:column="43">i</name><op:operator pos:line="1005" pos:column="44">++</op:operator></expr></incr>)<block pos:line="1005" pos:column="47">{
	          <for pos:line="1006" pos:column="19">for(<init><expr><name pos:line="1006" pos:column="23">j</name><op:operator pos:line="1006" pos:column="24">=</op:operator><lit:literal type="number" pos:line="1006" pos:column="25">0</lit:literal></expr>;</init> <condition><expr><name pos:line="1006" pos:column="28">j</name><op:operator pos:line="1006" pos:column="29">&lt;</op:operator><name pos:line="1006" pos:column="30">resultIndex</name></expr>;</condition> <incr><expr><name pos:line="1006" pos:column="43">j</name><op:operator pos:line="1006" pos:column="44">++</op:operator></expr></incr>)<block pos:line="1006" pos:column="47">{
	             <if pos:line="1007" pos:column="22">if<condition pos:line="1007" pos:column="24">(<expr><name pos:line="1007" pos:column="25">maxValue</name> <op:operator pos:line="1007" pos:column="34">&lt;</op:operator> <name><name pos:line="1007" pos:column="36">resultValues</name><index pos:line="1007" pos:column="48">[<expr><name pos:line="1007" pos:column="49">j</name></expr>]</index></name></expr>)</condition><then><block pos:line="1007" pos:column="52">{
	                <expr_stmt><expr><name pos:line="1008" pos:column="25">maxValue</name> <op:operator pos:line="1008" pos:column="34">=</op:operator> <name><name pos:line="1008" pos:column="36">resultValues</name><index pos:line="1008" pos:column="48">[<expr><name pos:line="1008" pos:column="49">j</name></expr>]</index></name></expr>;</expr_stmt>
	                <expr_stmt><expr><name pos:line="1009" pos:column="25">maxIndex</name><op:operator pos:line="1009" pos:column="33">=</op:operator><name pos:line="1009" pos:column="34">j</name></expr>;</expr_stmt>
	           }</block></then></if>
	       }</block></for>

	          <if pos:line="1013" pos:column="19">if<condition pos:line="1013" pos:column="21">(<expr><name pos:line="1013" pos:column="22">maxValue</name> <op:operator pos:line="1013" pos:column="31">!=</op:operator> <lit:literal type="number" pos:line="1013" pos:column="34">0</lit:literal></expr>)</condition><then><block pos:line="1013" pos:column="36">{
	            <expr_stmt><expr><call><name><name pos:line="1014" pos:column="21">System</name><op:operator pos:line="1014" pos:column="27">.</op:operator><name pos:line="1014" pos:column="28">out</name><op:operator pos:line="1014" pos:column="31">.</op:operator><name pos:line="1014" pos:column="32">println</name></name><argument_list pos:line="1014" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="1014" pos:column="40">"OccupationCode: "</lit:literal> <op:operator pos:line="1014" pos:column="59">+</op:operator> <name><name pos:line="1014" pos:column="61">resultStates</name><index pos:line="1014" pos:column="73">[<expr><name pos:line="1014" pos:column="74">maxIndex</name></expr>]</index></name> <op:operator pos:line="1014" pos:column="84">+</op:operator> <name pos:line="1014" pos:column="86">text</name> <op:operator pos:line="1014" pos:column="91">+</op:operator> <name pos:line="1014" pos:column="93">maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="1015" pos:column="21">System</name><op:operator pos:line="1015" pos:column="27">.</op:operator><name pos:line="1015" pos:column="28">out</name><op:operator pos:line="1015" pos:column="31">.</op:operator><name pos:line="1015" pos:column="32">println</name></name><argument_list pos:line="1015" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="1015" pos:column="40">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><name pos:line="1016" pos:column="21">maxValue</name> <op:operator pos:line="1016" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="1016" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	            <expr_stmt><expr><name><name pos:line="1017" pos:column="21">resultValues</name><index pos:line="1017" pos:column="33">[<expr><name pos:line="1017" pos:column="34">maxIndex</name></expr>]</index></name> <op:operator pos:line="1017" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1017" pos:column="46">0</lit:literal></expr>;</expr_stmt>
	          }</block></then></if>
	       }</block></for>
	      
	    }</block></function>
	    <function><type><specifier pos:line="1022" pos:column="13">public</specifier> <name pos:line="1022" pos:column="20">int</name></type> <name pos:line="1022" pos:column="24">FindTopIndustryCode</name><parameter_list pos:line="1022" pos:column="43">(<param><decl><type><name pos:line="1022" pos:column="44">String</name></type> <name pos:line="1022" pos:column="51">statename</name></decl></param>)</parameter_list> <block pos:line="1022" pos:column="62">{
	    	<decl_stmt><decl><type><name pos:line="1023" pos:column="17">Statement</name></type> <name pos:line="1023" pos:column="27">stat</name> <init pos:line="1023" pos:column="32">= <expr><lit:literal type="null" pos:line="1023" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
			 <decl_stmt><decl><type><name pos:line="1024" pos:column="26">ResultSet</name></type> <name pos:line="1024" pos:column="36">result</name> <init pos:line="1024" pos:column="43">= <expr><lit:literal type="null" pos:line="1024" pos:column="45">null</lit:literal></expr></init></decl>;</decl_stmt>
		      <try pos:line="1025" pos:column="23">try<block pos:line="1025" pos:column="26">{
		    	  <decl_stmt><decl><type><name pos:line="1026" pos:column="27">Connection</name></type> <name pos:line="1026" pos:column="38">conn</name> <init pos:line="1026" pos:column="43">= <expr><call><name><name pos:line="1026" pos:column="45">DatabaseConnection</name><op:operator pos:line="1026" pos:column="63">.</op:operator><name pos:line="1026" pos:column="64">getConnection</name></name><argument_list pos:line="1026" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
		     	  <expr_stmt><expr><name pos:line="1027" pos:column="27">stat</name> <op:operator pos:line="1027" pos:column="32">=</op:operator> <call><name><name pos:line="1027" pos:column="34">conn</name><op:operator pos:line="1027" pos:column="38">.</op:operator><name pos:line="1027" pos:column="39">createStatement</name></name><argument_list pos:line="1027" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><name pos:line="1028" pos:column="27">result</name> <op:operator pos:line="1028" pos:column="34">=</op:operator> <call><name><name pos:line="1028" pos:column="36">stat</name><op:operator pos:line="1028" pos:column="40">.</op:operator><name pos:line="1028" pos:column="41">executeQuery</name></name><argument_list pos:line="1028" pos:column="53">(     
		               <argument><expr><lit:literal type="string" pos:line="1029" pos:column="32">"select industrycode from job,userrecord,ziptable where userrecord.zip = ziptable.zip and userrecord.ssn = job.ssn and statename = '"</lit:literal> <op:operator pos:line="1029" pos:column="166">+</op:operator> <name pos:line="1029" pos:column="168">statename</name> <op:operator pos:line="1029" pos:column="178">+</op:operator><lit:literal type="string" pos:line="1029" pos:column="179">"' group by industrycode,employersize,statename"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		       <if pos:line="1030" pos:column="24">if <condition pos:line="1030" pos:column="27">(<expr><op:operator pos:line="1030" pos:column="28">!</op:operator><call><name><name pos:line="1030" pos:column="29">result</name><op:operator pos:line="1030" pos:column="35">.</op:operator><name pos:line="1030" pos:column="36">next</name></name><argument_list pos:line="1030" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="1030" pos:column="43">
		        <block pos:line="1031" pos:column="25">{
		                <comment type="line" pos:line="1032" pos:column="33">//reportFailure("No rows in ResultSet");</comment>
		                <comment type="line" pos:line="1033" pos:column="33">//return;</comment>
		        }</block></then></if>
		        
		        <expr_stmt><expr><call><name pos:line="1036" pos:column="25">FindTop5Industrycode</name><argument_list pos:line="1036" pos:column="45">(<argument><expr><name pos:line="1036" pos:column="46">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block> <catch pos:line="1037" pos:column="25">catch <parameter_list pos:line="1037" pos:column="31">(<param><decl><type><name pos:line="1037" pos:column="32">SQLException</name></type> <name pos:line="1037" pos:column="45">e</name></decl></param>)</parameter_list>
		        <block pos:line="1038" pos:column="25">{
		           <expr_stmt><expr><call><name><name pos:line="1039" pos:column="28">e</name><op:operator pos:line="1039" pos:column="29">.</op:operator><name pos:line="1039" pos:column="30">printStackTrace</name></name><argument_list pos:line="1039" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
		      }</block></catch></try> 
		      <return pos:line="1041" pos:column="23">return <expr><lit:literal type="number" pos:line="1041" pos:column="30">5</lit:literal></expr>;</return>
		   }</block></function>

	    <function><type><annotation pos:line="1044" pos:column="13">@<name pos:line="1044" pos:column="14">TaDaMethod</name><argument_list pos:line="1044" pos:column="24">(<argument><expr><name pos:line="1044" pos:column="25">variablesToTrack</name> <op:operator pos:line="1044" pos:column="42">=</op:operator> <block pos:line="1044" pos:column="44">{<expr><lit:literal type="string" pos:line="1044" pos:column="45">"code"</lit:literal></expr>}</block></expr></argument>,
				 <argument><expr><name pos:line="1045" pos:column="34">correspondingDatabaseAttribute</name> <op:operator pos:line="1045" pos:column="65">=</op:operator> <block pos:line="1045" pos:column="67">{<expr><lit:literal type="string" pos:line="1045" pos:column="68">"job.industrycode"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
		   <specifier pos:line="1046" pos:column="20">private</specifier> <name pos:line="1046" pos:column="28">void</name></type> <name pos:line="1046" pos:column="33">FindTop5Industrycode</name><parameter_list pos:line="1046" pos:column="53">(<param><decl><type><name pos:line="1046" pos:column="54">ResultSet</name></type> <name pos:line="1046" pos:column="64">rs</name></decl></param>)</parameter_list><block pos:line="1046" pos:column="67">{
		      
		     <decl_stmt><decl><type><name pos:line="1048" pos:column="22">int</name><index pos:line="1048" pos:column="25">[]</index></type> <name pos:line="1048" pos:column="28">resultCount</name> <init pos:line="1048" pos:column="40">= <expr><op:operator pos:line="1048" pos:column="42">new</op:operator> <name><name pos:line="1048" pos:column="46">int</name><index pos:line="1048" pos:column="49">[<expr><lit:literal type="number" pos:line="1048" pos:column="50">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		     <decl_stmt><decl><type><name pos:line="1049" pos:column="22">int</name><index pos:line="1049" pos:column="25">[]</index></type> <name pos:line="1049" pos:column="28">resultStates</name><init pos:line="1049" pos:column="40">= <expr><op:operator pos:line="1049" pos:column="42">new</op:operator> <name><name pos:line="1049" pos:column="46">int</name><index pos:line="1049" pos:column="49">[<expr><lit:literal type="number" pos:line="1049" pos:column="50">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		     <decl_stmt><decl><type><name pos:line="1050" pos:column="22">int</name></type> <name pos:line="1050" pos:column="26">resultIndex</name> <init pos:line="1050" pos:column="38">= <expr><lit:literal type="number" pos:line="1050" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
		     <decl_stmt><decl><type><name pos:line="1051" pos:column="22">int</name></type> <name pos:line="1051" pos:column="26">stateIndex</name> <init pos:line="1051" pos:column="37">=<expr><lit:literal type="number" pos:line="1051" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		     <try pos:line="1052" pos:column="22">try<block pos:line="1052" pos:column="25">{
		       <do pos:line="1053" pos:column="24">do<block pos:line="1053" pos:column="26">{		          
		    	  <decl_stmt><decl><type><name pos:line="1054" pos:column="27">int</name></type> <name pos:line="1054" pos:column="31">code</name> <init pos:line="1054" pos:column="36">= <expr><call><name><name pos:line="1054" pos:column="38">rs</name><op:operator pos:line="1054" pos:column="40">.</op:operator><name pos:line="1054" pos:column="41">getInt</name></name><argument_list pos:line="1054" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="1054" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		          <expr_stmt><expr><name pos:line="1055" pos:column="27">stateIndex</name> <op:operator pos:line="1055" pos:column="38">=</op:operator> <call><name><name pos:line="1055" pos:column="40">acc</name><op:operator pos:line="1055" pos:column="43">.</op:operator><name pos:line="1055" pos:column="44">getIndustryCode</name></name><argument_list pos:line="1055" pos:column="59">(<argument><expr><name pos:line="1055" pos:column="60">resultStates</name></expr></argument>, <argument><expr><name pos:line="1055" pos:column="74">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <if pos:line="1056" pos:column="27">if<condition pos:line="1056" pos:column="29">( <expr><name pos:line="1056" pos:column="31">stateIndex</name> <op:operator pos:line="1056" pos:column="42">&lt;</op:operator> <lit:literal type="number" pos:line="1056" pos:column="44">50</lit:literal></expr>)</condition><then><block pos:line="1056" pos:column="47">{	            
		            <expr_stmt><expr><name><name pos:line="1057" pos:column="29">resultCount</name><index pos:line="1057" pos:column="40">[<expr><name pos:line="1057" pos:column="41">stateIndex</name></expr>]</index></name><op:operator pos:line="1057" pos:column="52">++</op:operator></expr>;</expr_stmt>		            
		          }</block></then>
		          <else pos:line="1059" pos:column="27">else<block pos:line="1059" pos:column="31">{		            
		            <expr_stmt><expr><name><name pos:line="1060" pos:column="29">resultCount</name><index pos:line="1060" pos:column="40">[<expr><name pos:line="1060" pos:column="41">resultIndex</name></expr>]</index></name><op:operator pos:line="1060" pos:column="53">++</op:operator></expr>;</expr_stmt>
		            <expr_stmt><expr><name><name pos:line="1061" pos:column="29">resultStates</name><index pos:line="1061" pos:column="41">[<expr><name pos:line="1061" pos:column="42">resultIndex</name></expr>]</index></name> <op:operator pos:line="1061" pos:column="55">=</op:operator> <name pos:line="1061" pos:column="57">code</name></expr>;</expr_stmt>
		            <expr_stmt><expr><name pos:line="1062" pos:column="29">resultIndex</name><op:operator pos:line="1062" pos:column="40">++</op:operator></expr>;</expr_stmt>
		          }</block></else></if>         
		          
		       }</block>while<condition pos:line="1065" pos:column="30">(<expr><call><name><name pos:line="1065" pos:column="31">rs</name><op:operator pos:line="1065" pos:column="33">.</op:operator><name pos:line="1065" pos:column="34">next</name></name><argument_list pos:line="1065" pos:column="38">()</argument_list></call></expr>)</condition>;</do>
		       <expr_stmt><expr><call><name pos:line="1066" pos:column="24">FindBestIndustrycode</name><argument_list pos:line="1066" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="1066" pos:column="45">5</lit:literal></expr></argument>, <argument><expr><name pos:line="1066" pos:column="48">resultStates</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="62">resultCount</name></expr></argument>, <argument><expr><name pos:line="1066" pos:column="75">resultIndex</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1066" pos:column="88">" Number of workers: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		       
		      }</block> <catch pos:line="1068" pos:column="25">catch <parameter_list pos:line="1068" pos:column="31">(<param><decl><type><name pos:line="1068" pos:column="32">SQLException</name></type> <name pos:line="1068" pos:column="45">e</name></decl></param>)</parameter_list>
		        <block pos:line="1069" pos:column="25">{
			   <expr_stmt><expr><call><name><name pos:line="1070" pos:column="28">e</name><op:operator pos:line="1070" pos:column="29">.</op:operator><name pos:line="1070" pos:column="30">printStackTrace</name></name><argument_list pos:line="1070" pos:column="45">()</argument_list></call></expr>;</expr_stmt>     
		      }</block></catch></try>     
		      
		    }</block></function>
    <function><type><specifier pos:line="1074" pos:column="5">private</specifier> <name pos:line="1074" pos:column="13">void</name></type> <name pos:line="1074" pos:column="18">FindBestIndustrycode</name><parameter_list pos:line="1074" pos:column="38">(<param><decl><type><name pos:line="1074" pos:column="39">int</name></type> <name pos:line="1074" pos:column="43">numResults</name></decl></param>, <param><decl><type><name><name pos:line="1074" pos:column="55">int</name><index pos:line="1074" pos:column="58">[]</index></name></type> <name pos:line="1074" pos:column="61">resultStates</name></decl></param>, <param><decl><type><name><name pos:line="1074" pos:column="75">int</name><index pos:line="1074" pos:column="78">[]</index></name></type> <name pos:line="1074" pos:column="81">resultValues</name></decl></param>, <param><decl><type><name pos:line="1074" pos:column="95">int</name></type> <name pos:line="1074" pos:column="99">resultIndex</name></decl></param>, <param><decl><type><name pos:line="1074" pos:column="112">String</name></type> <name pos:line="1074" pos:column="119">text</name></decl></param>)</parameter_list><block pos:line="1074" pos:column="124">{

		       <decl_stmt><decl><type><name pos:line="1076" pos:column="24">int</name></type> <name pos:line="1076" pos:column="28">maxValue</name> <init pos:line="1076" pos:column="37">=<expr><lit:literal type="number" pos:line="1076" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		       <decl_stmt><decl><type><name pos:line="1077" pos:column="24">int</name></type> <name pos:line="1077" pos:column="28">maxIndex</name> <init pos:line="1077" pos:column="37">=<expr><lit:literal type="number" pos:line="1077" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		       <decl_stmt><decl><type><name pos:line="1078" pos:column="24">int</name></type> <name pos:line="1078" pos:column="28">j</name><init pos:line="1078" pos:column="29">=<expr><lit:literal type="number" pos:line="1078" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		        <for pos:line="1079" pos:column="25">for(<init><decl><type><name pos:line="1079" pos:column="29">int</name></type> <name pos:line="1079" pos:column="33">i</name><init pos:line="1079" pos:column="34">=<expr><lit:literal type="number" pos:line="1079" pos:column="35">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1079" pos:column="38">i</name><op:operator pos:line="1079" pos:column="39">&lt;</op:operator><name pos:line="1079" pos:column="40">numResults</name></expr>;</condition> <incr><expr><name pos:line="1079" pos:column="52">i</name><op:operator pos:line="1079" pos:column="53">++</op:operator></expr></incr>)<block pos:line="1079" pos:column="56">{
		          <for pos:line="1080" pos:column="27">for(<init><expr><name pos:line="1080" pos:column="31">j</name><op:operator pos:line="1080" pos:column="32">=</op:operator><lit:literal type="number" pos:line="1080" pos:column="33">0</lit:literal></expr>;</init> <condition><expr><name pos:line="1080" pos:column="36">j</name><op:operator pos:line="1080" pos:column="37">&lt;</op:operator><name pos:line="1080" pos:column="38">resultIndex</name></expr>;</condition> <incr><expr><name pos:line="1080" pos:column="51">j</name><op:operator pos:line="1080" pos:column="52">++</op:operator></expr></incr>)<block pos:line="1080" pos:column="55">{
		             <if pos:line="1081" pos:column="30">if<condition pos:line="1081" pos:column="32">(<expr><name pos:line="1081" pos:column="33">maxValue</name> <op:operator pos:line="1081" pos:column="42">&lt;</op:operator> <name><name pos:line="1081" pos:column="44">resultValues</name><index pos:line="1081" pos:column="56">[<expr><name pos:line="1081" pos:column="57">j</name></expr>]</index></name></expr>)</condition><then><block pos:line="1081" pos:column="60">{
		                <expr_stmt><expr><name pos:line="1082" pos:column="33">maxValue</name> <op:operator pos:line="1082" pos:column="42">=</op:operator> <name><name pos:line="1082" pos:column="44">resultValues</name><index pos:line="1082" pos:column="56">[<expr><name pos:line="1082" pos:column="57">j</name></expr>]</index></name></expr>;</expr_stmt>
		                <expr_stmt><expr><name pos:line="1083" pos:column="33">maxIndex</name><op:operator pos:line="1083" pos:column="41">=</op:operator><name pos:line="1083" pos:column="42">j</name></expr>;</expr_stmt>
		          }</block></then></if>
		       }</block></for>

		          <if pos:line="1087" pos:column="27">if<condition pos:line="1087" pos:column="29">(<expr><name pos:line="1087" pos:column="30">maxValue</name> <op:operator pos:line="1087" pos:column="39">!=</op:operator> <lit:literal type="number" pos:line="1087" pos:column="42">0</lit:literal></expr>)</condition><then><block pos:line="1087" pos:column="44">{
		            <expr_stmt><expr><call><name><name pos:line="1088" pos:column="29">System</name><op:operator pos:line="1088" pos:column="35">.</op:operator><name pos:line="1088" pos:column="36">out</name><op:operator pos:line="1088" pos:column="39">.</op:operator><name pos:line="1088" pos:column="40">println</name></name><argument_list pos:line="1088" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="1088" pos:column="48">"IndustryCode: "</lit:literal> <op:operator pos:line="1088" pos:column="65">+</op:operator> <name><name pos:line="1088" pos:column="67">resultStates</name><index pos:line="1088" pos:column="79">[<expr><name pos:line="1088" pos:column="80">maxIndex</name></expr>]</index></name> <op:operator pos:line="1088" pos:column="90">+</op:operator> <name pos:line="1088" pos:column="92">text</name> <op:operator pos:line="1088" pos:column="97">+</op:operator> <name pos:line="1088" pos:column="99">maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            <expr_stmt><expr><call><name><name pos:line="1089" pos:column="29">System</name><op:operator pos:line="1089" pos:column="35">.</op:operator><name pos:line="1089" pos:column="36">out</name><op:operator pos:line="1089" pos:column="39">.</op:operator><name pos:line="1089" pos:column="40">println</name></name><argument_list pos:line="1089" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="1089" pos:column="48">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            <expr_stmt><expr><name pos:line="1090" pos:column="29">maxValue</name> <op:operator pos:line="1090" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="1090" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		            <expr_stmt><expr><name><name pos:line="1091" pos:column="29">resultValues</name><index pos:line="1091" pos:column="41">[<expr><name pos:line="1091" pos:column="42">maxIndex</name></expr>]</index></name> <op:operator pos:line="1091" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="1091" pos:column="54">0</lit:literal></expr>;</expr_stmt>
		          }</block></then></if>
		       }</block></for>
		    }</block></function>    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
}</block></class>

</unit>
