<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\tools\XincoCrypter.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2007 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoCrypter
 *
 * Description:     Xinco Crypter
 *
 * Original Author: Javier A. Ortiz
 * Date:            March 6, 2006, 3:43 PM
 *
 * Modifications:
 *
 * Who?             When?             What?
 * 
 *************************************************************
 */</comment>
<package pos:line="35" pos:column="1">package <name><name pos:line="35" pos:column="9">com</name><op:operator pos:line="35" pos:column="12">.</op:operator><name pos:line="35" pos:column="13">bluecubs</name><op:operator pos:line="35" pos:column="21">.</op:operator><name pos:line="35" pos:column="22">xinco</name><op:operator pos:line="35" pos:column="27">.</op:operator><name pos:line="35" pos:column="28">tools</name></name>;</package>

<import pos:line="37" pos:column="1">import <name><name pos:line="37" pos:column="8">java</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">io</name><op:operator pos:line="37" pos:column="15">.</op:operator><name pos:line="37" pos:column="16">UnsupportedEncodingException</name></name>;</import>
<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">java</name><op:operator pos:line="38" pos:column="12">.</op:operator><name pos:line="38" pos:column="13">security</name><op:operator pos:line="38" pos:column="21">.</op:operator><name pos:line="38" pos:column="22">spec</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">AlgorithmParameterSpec</name></name>;</import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">security</name><op:operator pos:line="39" pos:column="21">.</op:operator><name pos:line="39" pos:column="22">spec</name><op:operator pos:line="39" pos:column="26">.</op:operator><name pos:line="39" pos:column="27">KeySpec</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">javax</name><op:operator pos:line="40" pos:column="13">.</op:operator><name pos:line="40" pos:column="14">crypto</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">Cipher</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">javax</name><op:operator pos:line="41" pos:column="13">.</op:operator><name pos:line="41" pos:column="14">crypto</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">IllegalBlockSizeException</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">javax</name><op:operator pos:line="42" pos:column="13">.</op:operator><name pos:line="42" pos:column="14">crypto</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">SecretKey</name></name>;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">javax</name><op:operator pos:line="43" pos:column="13">.</op:operator><name pos:line="43" pos:column="14">crypto</name><op:operator pos:line="43" pos:column="20">.</op:operator><name pos:line="43" pos:column="21">SecretKeyFactory</name></name>;</import>
<import pos:line="44" pos:column="1">import <name><name pos:line="44" pos:column="8">javax</name><op:operator pos:line="44" pos:column="13">.</op:operator><name pos:line="44" pos:column="14">crypto</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">spec</name><op:operator pos:line="44" pos:column="25">.</op:operator><name pos:line="44" pos:column="26">PBEKeySpec</name></name>;</import>
<import pos:line="45" pos:column="1">import <name><name pos:line="45" pos:column="8">javax</name><op:operator pos:line="45" pos:column="13">.</op:operator><name pos:line="45" pos:column="14">crypto</name><op:operator pos:line="45" pos:column="20">.</op:operator><name pos:line="45" pos:column="21">spec</name><op:operator pos:line="45" pos:column="25">.</op:operator><name pos:line="45" pos:column="26">PBEParameterSpec</name></name>;</import>
<import pos:line="46" pos:column="1">import <name><name pos:line="46" pos:column="8">org</name><op:operator pos:line="46" pos:column="11">.</op:operator><name pos:line="46" pos:column="12">apache</name><op:operator pos:line="46" pos:column="18">.</op:operator><name pos:line="46" pos:column="19">axis</name><op:operator pos:line="46" pos:column="23">.</op:operator><name pos:line="46" pos:column="24">encoding</name><op:operator pos:line="46" pos:column="32">.</op:operator><name pos:line="46" pos:column="33">Base64</name></name>;</import>

<comment type="block" format="javadoc" pos:line="48" pos:column="1">/**
 *
 * @author Javier A. Ortiz
 */</comment>
<comment type="block" format="javadoc" pos:line="52" pos:column="1">/**
 * Creates a new instance of XincoCrypter
 */</comment>
<class><specifier pos:line="55" pos:column="1">public</specifier> class <name pos:line="55" pos:column="14">XincoCrypter</name> <block pos:line="55" pos:column="27">{

    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">private</specifier> <name pos:line="57" pos:column="13">Cipher</name></type> <name pos:line="57" pos:column="20">ecipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="58" pos:column="5">private</specifier> <name pos:line="58" pos:column="13">Cipher</name></type> <name pos:line="58" pos:column="20">dcipher</name></decl>;</decl_stmt>
    <comment type="line" pos:line="59" pos:column="5">// 8-byte Salt</comment>
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">byte</name><index pos:line="60" pos:column="9">[]</index></type> <name pos:line="60" pos:column="12">salt</name> <init pos:line="60" pos:column="17">= <expr><block pos:line="60" pos:column="19">{
        <expr><op:operator pos:line="61" pos:column="9">(</op:operator><name pos:line="61" pos:column="10">byte</name><op:operator pos:line="61" pos:column="14">)</op:operator> <lit:literal type="number" pos:line="61" pos:column="16">0xA9</lit:literal></expr>, <expr><op:operator pos:line="61" pos:column="22">(</op:operator><name pos:line="61" pos:column="23">byte</name><op:operator pos:line="61" pos:column="27">)</op:operator> <lit:literal type="number" pos:line="61" pos:column="29">0x9B</lit:literal></expr>, <expr><op:operator pos:line="61" pos:column="35">(</op:operator><name pos:line="61" pos:column="36">byte</name><op:operator pos:line="61" pos:column="40">)</op:operator> <lit:literal type="number" pos:line="61" pos:column="42">0xC8</lit:literal></expr>, <expr><op:operator pos:line="61" pos:column="48">(</op:operator><name pos:line="61" pos:column="49">byte</name><op:operator pos:line="61" pos:column="53">)</op:operator> <lit:literal type="number" pos:line="61" pos:column="55">0x32</lit:literal></expr>,
        <expr><op:operator pos:line="62" pos:column="9">(</op:operator><name pos:line="62" pos:column="10">byte</name><op:operator pos:line="62" pos:column="14">)</op:operator> <lit:literal type="number" pos:line="62" pos:column="16">0x56</lit:literal></expr>, <expr><op:operator pos:line="62" pos:column="22">(</op:operator><name pos:line="62" pos:column="23">byte</name><op:operator pos:line="62" pos:column="27">)</op:operator> <lit:literal type="number" pos:line="62" pos:column="29">0x35</lit:literal></expr>, <expr><op:operator pos:line="62" pos:column="35">(</op:operator><name pos:line="62" pos:column="36">byte</name><op:operator pos:line="62" pos:column="40">)</op:operator> <lit:literal type="number" pos:line="62" pos:column="42">0xE3</lit:literal></expr>, <expr><op:operator pos:line="62" pos:column="48">(</op:operator><name pos:line="62" pos:column="49">byte</name><op:operator pos:line="62" pos:column="53">)</op:operator> <lit:literal type="number" pos:line="62" pos:column="55">0x03</lit:literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="64" pos:column="5">// Iteration count</comment>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">int</name></type> <name pos:line="65" pos:column="9">iterationCount</name> <init pos:line="65" pos:column="24">= <expr><lit:literal type="number" pos:line="65" pos:column="26">19</lit:literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc" pos:line="67" pos:column="5">/**
     * Constructor
     * @param passPhrase
     */</comment>
    <constructor><specifier pos:line="71" pos:column="5">public</specifier> <name pos:line="71" pos:column="12">XincoCrypter</name><parameter_list pos:line="71" pos:column="24">(<param><decl><type><name pos:line="71" pos:column="25">String</name></type> <name pos:line="71" pos:column="32">passPhrase</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="44">{
        <try pos:line="72" pos:column="9">try <block pos:line="72" pos:column="13">{
            <comment type="line" pos:line="73" pos:column="13">// Create the key</comment>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">KeySpec</name></type> <name pos:line="74" pos:column="21">keySpec</name> <init pos:line="74" pos:column="29">= <expr><op:operator pos:line="74" pos:column="31">new</op:operator> <call><name pos:line="74" pos:column="35">PBEKeySpec</name><argument_list pos:line="74" pos:column="45">(<argument><expr><call><name><name pos:line="74" pos:column="46">passPhrase</name><op:operator pos:line="74" pos:column="56">.</op:operator><name pos:line="74" pos:column="57">toCharArray</name></name><argument_list pos:line="74" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="74" pos:column="72">salt</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="78">iterationCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">SecretKey</name></type> <name pos:line="75" pos:column="23">key</name> <init pos:line="75" pos:column="27">= <expr><call><name><name pos:line="75" pos:column="29">SecretKeyFactory</name><op:operator pos:line="75" pos:column="45">.</op:operator><name pos:line="75" pos:column="46">getInstance</name></name><argument_list pos:line="75" pos:column="57">(
                    <argument><expr><lit:literal type="string" pos:line="76" pos:column="21">"PBEWithMD5AndDES"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="40">.</op:operator><call><name pos:line="76" pos:column="41">generateSecret</name><argument_list pos:line="76" pos:column="55">(<argument><expr><name pos:line="76" pos:column="56">keySpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="77" pos:column="13">ecipher</name> <op:operator pos:line="77" pos:column="21">=</op:operator> <call><name><name pos:line="77" pos:column="23">Cipher</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">getInstance</name></name><argument_list pos:line="77" pos:column="41">(<argument><expr><call><name><name pos:line="77" pos:column="42">key</name><op:operator pos:line="77" pos:column="45">.</op:operator><name pos:line="77" pos:column="46">getAlgorithm</name></name><argument_list pos:line="77" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="78" pos:column="13">dcipher</name> <op:operator pos:line="78" pos:column="21">=</op:operator> <call><name><name pos:line="78" pos:column="23">Cipher</name><op:operator pos:line="78" pos:column="29">.</op:operator><name pos:line="78" pos:column="30">getInstance</name></name><argument_list pos:line="78" pos:column="41">(<argument><expr><call><name><name pos:line="78" pos:column="42">key</name><op:operator pos:line="78" pos:column="45">.</op:operator><name pos:line="78" pos:column="46">getAlgorithm</name></name><argument_list pos:line="78" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="80" pos:column="13">// Prepare the parameter to the ciphers</comment>
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">AlgorithmParameterSpec</name></type> <name pos:line="81" pos:column="36">paramSpec</name> <init pos:line="81" pos:column="46">= <expr><op:operator pos:line="81" pos:column="48">new</op:operator> <call><name pos:line="81" pos:column="52">PBEParameterSpec</name><argument_list pos:line="81" pos:column="68">(<argument><expr><name pos:line="81" pos:column="69">salt</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="75">iterationCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="83" pos:column="13">// Create the ciphers</comment>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">ecipher</name><op:operator pos:line="84" pos:column="20">.</op:operator><name pos:line="84" pos:column="21">init</name></name><argument_list pos:line="84" pos:column="25">(<argument><expr><name><name pos:line="84" pos:column="26">Cipher</name><op:operator pos:line="84" pos:column="32">.</op:operator><name pos:line="84" pos:column="33">ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="47">key</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="52">paramSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">dcipher</name><op:operator pos:line="85" pos:column="20">.</op:operator><name pos:line="85" pos:column="21">init</name></name><argument_list pos:line="85" pos:column="25">(<argument><expr><name><name pos:line="85" pos:column="26">Cipher</name><op:operator pos:line="85" pos:column="32">.</op:operator><name pos:line="85" pos:column="33">DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="47">key</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="52">paramSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="86" pos:column="11">catch <parameter_list pos:line="86" pos:column="17">(<param><decl><type><name><name pos:line="86" pos:column="18">java</name><op:operator pos:line="86" pos:column="22">.</op:operator><name pos:line="86" pos:column="23">security</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">InvalidAlgorithmParameterException</name></name></type> <name pos:line="86" pos:column="67">e</name></decl></param>)</parameter_list> <block pos:line="86" pos:column="70">{
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">e</name><op:operator pos:line="87" pos:column="14">.</op:operator><name pos:line="87" pos:column="15">printStackTrace</name></name><argument_list pos:line="87" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="88" pos:column="11">catch <parameter_list pos:line="88" pos:column="17">(<param><decl><type><name><name pos:line="88" pos:column="18">java</name><op:operator pos:line="88" pos:column="22">.</op:operator><name pos:line="88" pos:column="23">security</name><op:operator pos:line="88" pos:column="31">.</op:operator><name pos:line="88" pos:column="32">spec</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">InvalidKeySpecException</name></name></type> <name pos:line="88" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="64">{
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">e</name><op:operator pos:line="89" pos:column="14">.</op:operator><name pos:line="89" pos:column="15">printStackTrace</name></name><argument_list pos:line="89" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="90" pos:column="11">catch <parameter_list pos:line="90" pos:column="17">(<param><decl><type><name><name pos:line="90" pos:column="18">javax</name><op:operator pos:line="90" pos:column="23">.</op:operator><name pos:line="90" pos:column="24">crypto</name><op:operator pos:line="90" pos:column="30">.</op:operator><name pos:line="90" pos:column="31">NoSuchPaddingException</name></name></type> <name pos:line="90" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="57">{
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">e</name><op:operator pos:line="91" pos:column="14">.</op:operator><name pos:line="91" pos:column="15">printStackTrace</name></name><argument_list pos:line="91" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="92" pos:column="11">catch <parameter_list pos:line="92" pos:column="17">(<param><decl><type><name><name pos:line="92" pos:column="18">java</name><op:operator pos:line="92" pos:column="22">.</op:operator><name pos:line="92" pos:column="23">security</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">NoSuchAlgorithmException</name></name></type> <name pos:line="92" pos:column="57">e</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="60">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">e</name><op:operator pos:line="93" pos:column="14">.</op:operator><name pos:line="93" pos:column="15">printStackTrace</name></name><argument_list pos:line="93" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="94" pos:column="11">catch <parameter_list pos:line="94" pos:column="17">(<param><decl><type><name><name pos:line="94" pos:column="18">java</name><op:operator pos:line="94" pos:column="22">.</op:operator><name pos:line="94" pos:column="23">security</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">InvalidKeyException</name></name></type> <name pos:line="94" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="55">{
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">e</name><op:operator pos:line="95" pos:column="14">.</op:operator><name pos:line="95" pos:column="15">printStackTrace</name></name><argument_list pos:line="95" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></constructor>

    <comment type="block" format="javadoc" pos:line="99" pos:column="5">/**
     * Encript string
     * @param str
     * @return String
     */</comment>
    <function><type><specifier pos:line="104" pos:column="5">public</specifier> <name pos:line="104" pos:column="12">String</name></type> <name pos:line="104" pos:column="19">encrypt</name><parameter_list pos:line="104" pos:column="26">(<param><decl><type><name pos:line="104" pos:column="27">String</name></type> <name pos:line="104" pos:column="34">str</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="39">{
        <try pos:line="105" pos:column="9">try <block pos:line="105" pos:column="13">{
            <comment type="line" pos:line="106" pos:column="13">// Encode the string into bytes using utf-8</comment>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">byte</name><index pos:line="107" pos:column="17">[]</index></type> <name pos:line="107" pos:column="20">utf8</name> <init pos:line="107" pos:column="25">= <expr><call><name><name pos:line="107" pos:column="27">str</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">getBytes</name></name><argument_list pos:line="107" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="40">"UTF8"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="109" pos:column="13">// Encrypt</comment>
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">byte</name><index pos:line="110" pos:column="17">[]</index></type> <name pos:line="110" pos:column="20">enc</name> <init pos:line="110" pos:column="24">= <expr><call><name><name pos:line="110" pos:column="26">ecipher</name><op:operator pos:line="110" pos:column="33">.</op:operator><name pos:line="110" pos:column="34">doFinal</name></name><argument_list pos:line="110" pos:column="41">(<argument><expr><name pos:line="110" pos:column="42">utf8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="112" pos:column="13">// Encode bytes to base64 to get a string</comment>
            <return pos:line="113" pos:column="13">return <expr><call><name><name pos:line="113" pos:column="20">Base64</name><op:operator pos:line="113" pos:column="26">.</op:operator><name pos:line="113" pos:column="27">encode</name></name><argument_list pos:line="113" pos:column="33">(<argument><expr><name pos:line="113" pos:column="34">enc</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch pos:line="114" pos:column="11">catch <parameter_list pos:line="114" pos:column="17">(<param><decl><type><name><name pos:line="114" pos:column="18">javax</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">crypto</name><op:operator pos:line="114" pos:column="30">.</op:operator><name pos:line="114" pos:column="31">BadPaddingException</name></name></type> <name pos:line="114" pos:column="51">e</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="54">{
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">e</name><op:operator pos:line="115" pos:column="14">.</op:operator><name pos:line="115" pos:column="15">printStackTrace</name></name><argument_list pos:line="115" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="116" pos:column="11">catch <parameter_list pos:line="116" pos:column="17">(<param><decl><type><name pos:line="116" pos:column="18">IllegalBlockSizeException</name></type> <name pos:line="116" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="47">{
            <expr_stmt><expr><call><name><name pos:line="117" pos:column="13">e</name><op:operator pos:line="117" pos:column="14">.</op:operator><name pos:line="117" pos:column="15">printStackTrace</name></name><argument_list pos:line="117" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="118" pos:column="11">catch <parameter_list pos:line="118" pos:column="17">(<param><decl><type><name pos:line="118" pos:column="18">UnsupportedEncodingException</name></type> <name pos:line="118" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">e</name><op:operator pos:line="119" pos:column="14">.</op:operator><name pos:line="119" pos:column="15">printStackTrace</name></name><argument_list pos:line="119" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="120" pos:column="11">catch <parameter_list pos:line="120" pos:column="17">(<param><decl><type><name><name pos:line="120" pos:column="18">java</name><op:operator pos:line="120" pos:column="22">.</op:operator><name pos:line="120" pos:column="23">io</name><op:operator pos:line="120" pos:column="25">.</op:operator><name pos:line="120" pos:column="26">IOException</name></name></type> <name pos:line="120" pos:column="38">e</name></decl></param>)</parameter_list> <block pos:line="120" pos:column="41">{
            <expr_stmt><expr><call><name><name pos:line="121" pos:column="13">e</name><op:operator pos:line="121" pos:column="14">.</op:operator><name pos:line="121" pos:column="15">printStackTrace</name></name><argument_list pos:line="121" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="123" pos:column="9">return <expr><lit:literal type="null" pos:line="123" pos:column="16">null</lit:literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="126" pos:column="5">/**
     * Decrypt
     * @param str
     * @return
     */</comment>
    <function><type><specifier pos:line="131" pos:column="5">public</specifier> <name pos:line="131" pos:column="12">String</name></type> <name pos:line="131" pos:column="19">decrypt</name><parameter_list pos:line="131" pos:column="26">(<param><decl><type><name pos:line="131" pos:column="27">String</name></type> <name pos:line="131" pos:column="34">str</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="39">{
        <try pos:line="132" pos:column="9">try <block pos:line="132" pos:column="13">{
            <comment type="line" pos:line="133" pos:column="13">// Decode base64 to get bytes</comment>
            <decl_stmt><decl><type><name pos:line="134" pos:column="13">byte</name><index pos:line="134" pos:column="17">[]</index></type> <name pos:line="134" pos:column="20">dec</name> <init pos:line="134" pos:column="24">= <expr><call><name><name pos:line="134" pos:column="26">Base64</name><op:operator pos:line="134" pos:column="32">.</op:operator><name pos:line="134" pos:column="33">decode</name></name><argument_list pos:line="134" pos:column="39">(<argument><expr><name pos:line="134" pos:column="40">str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="136" pos:column="13">// Decrypt</comment>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">byte</name><index pos:line="137" pos:column="17">[]</index></type> <name pos:line="137" pos:column="20">utf8</name> <init pos:line="137" pos:column="25">= <expr><call><name><name pos:line="137" pos:column="27">dcipher</name><op:operator pos:line="137" pos:column="34">.</op:operator><name pos:line="137" pos:column="35">doFinal</name></name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="138" pos:column="13">// Decode using utf-8</comment>
            <return pos:line="139" pos:column="13">return <expr><op:operator pos:line="139" pos:column="20">new</op:operator> <call><name pos:line="139" pos:column="24">String</name><argument_list pos:line="139" pos:column="30">(<argument><expr><name pos:line="139" pos:column="31">utf8</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="37">"UTF8"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch pos:line="140" pos:column="11">catch <parameter_list pos:line="140" pos:column="17">(<param><decl><type><name><name pos:line="140" pos:column="18">javax</name><op:operator pos:line="140" pos:column="23">.</op:operator><name pos:line="140" pos:column="24">crypto</name><op:operator pos:line="140" pos:column="30">.</op:operator><name pos:line="140" pos:column="31">BadPaddingException</name></name></type> <name pos:line="140" pos:column="51">e</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="54">{
            <expr_stmt><expr><call><name><name pos:line="141" pos:column="13">e</name><op:operator pos:line="141" pos:column="14">.</op:operator><name pos:line="141" pos:column="15">printStackTrace</name></name><argument_list pos:line="141" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="142" pos:column="11">catch <parameter_list pos:line="142" pos:column="17">(<param><decl><type><name pos:line="142" pos:column="18">IllegalBlockSizeException</name></type> <name pos:line="142" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="142" pos:column="47">{
            <expr_stmt><expr><call><name><name pos:line="143" pos:column="13">e</name><op:operator pos:line="143" pos:column="14">.</op:operator><name pos:line="143" pos:column="15">printStackTrace</name></name><argument_list pos:line="143" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="144" pos:column="11">catch <parameter_list pos:line="144" pos:column="17">(<param><decl><type><name pos:line="144" pos:column="18">UnsupportedEncodingException</name></type> <name pos:line="144" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="145" pos:column="13">e</name><op:operator pos:line="145" pos:column="14">.</op:operator><name pos:line="145" pos:column="15">printStackTrace</name></name><argument_list pos:line="145" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch pos:line="146" pos:column="11">catch <parameter_list pos:line="146" pos:column="17">(<param><decl><type><name><name pos:line="146" pos:column="18">java</name><op:operator pos:line="146" pos:column="22">.</op:operator><name pos:line="146" pos:column="23">io</name><op:operator pos:line="146" pos:column="25">.</op:operator><name pos:line="146" pos:column="26">IOException</name></name></type> <name pos:line="146" pos:column="38">e</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="41">{
            <expr_stmt><expr><call><name><name pos:line="147" pos:column="13">e</name><op:operator pos:line="147" pos:column="14">.</op:operator><name pos:line="147" pos:column="15">printStackTrace</name></name><argument_list pos:line="147" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="149" pos:column="9">return <expr><lit:literal type="null" pos:line="149" pos:column="16">null</lit:literal></expr>;</return>
    }</block></function>
}</block></class>

</unit>
