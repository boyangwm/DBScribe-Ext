<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Database.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">DriverManager</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">SQLException</name></name>;</import>

<class><specifier pos:line="7" pos:column="1">public</specifier> class <name pos:line="7" pos:column="14">Database</name> <block pos:line="7" pos:column="23">{

	<decl_stmt><decl><type><specifier pos:line="9" pos:column="9">private</specifier> <specifier pos:line="9" pos:column="17">static</specifier> <name pos:line="9" pos:column="24">Connection</name></type> <name pos:line="9" pos:column="35">conn</name></decl>;</decl_stmt>
		
	<decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">static</specifier> <name pos:line="11" pos:column="24">String</name></type> <name pos:line="11" pos:column="31">url</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">static</specifier> <name pos:line="12" pos:column="24">String</name></type> <name pos:line="12" pos:column="31">dbName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">static</specifier> <name pos:line="13" pos:column="24">String</name></type> <name pos:line="13" pos:column="31">driver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">static</specifier> <name pos:line="14" pos:column="24">String</name></type> <name pos:line="14" pos:column="31">userName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">static</specifier> <name pos:line="15" pos:column="24">String</name></type> <name pos:line="15" pos:column="31">password</name></decl>;</decl_stmt>
	
	<expr_stmt><expr pos:line="17" pos:column="9">static<block pos:line="17" pos:column="15">{
		<expr><name pos:line="18" pos:column="17">conn</name> <op:operator pos:line="18" pos:column="22">=</op:operator> <lit:literal type="null" pos:line="18" pos:column="24">null</lit:literal></expr>;
		<expr><name pos:line="19" pos:column="17">url</name> <op:operator pos:line="19" pos:column="21">=</op:operator> <lit:literal type="string" pos:line="19" pos:column="23">"jdbc:mysql://localhost:3306/"</lit:literal></expr>;
		<expr><name pos:line="20" pos:column="17">dbName</name> <op:operator pos:line="20" pos:column="24">=</op:operator> <lit:literal type="string" pos:line="20" pos:column="26">"university"</lit:literal></expr>;
		<expr><name pos:line="21" pos:column="17">driver</name> <op:operator pos:line="21" pos:column="24">=</op:operator> <lit:literal type="string" pos:line="21" pos:column="26">"com.mysql.jdbc.Driver"</lit:literal></expr>;
		<expr><name pos:line="22" pos:column="17">userName</name> <op:operator pos:line="22" pos:column="26">=</op:operator> <lit:literal type="string" pos:line="22" pos:column="28">"root"</lit:literal></expr>;
		<expr><name pos:line="23" pos:column="17">password</name> <op:operator pos:line="23" pos:column="26">=</op:operator> <lit:literal type="string" pos:line="23" pos:column="28">"engineering"</lit:literal></expr>;
	}</block>
	
<comment type="line" pos:line="26" pos:column="1">//Constructor added	</comment>
<comment type="line" pos:line="27" pos:column="1">//	public Database(){</comment>
<comment type="line" pos:line="28" pos:column="1">//		conn = null;</comment>
<comment type="line" pos:line="29" pos:column="1">//		url = "jdbc:mysql://localhost:3306/";</comment>
<comment type="line" pos:line="30" pos:column="1">//		dbName = "university";</comment>
<comment type="line" pos:line="31" pos:column="1">//		driver = "com.mysql.jdbc.Driver";</comment>
<comment type="line" pos:line="32" pos:column="1">//		userName = "root";</comment>
<comment type="line" pos:line="33" pos:column="1">//		password = "engineering";</comment>
<comment type="line" pos:line="34" pos:column="1">//	}</comment>
	
	<comment type="line" pos:line="36" pos:column="9">// Call this function as " Connection conn = Database.getConnection(); " </comment>
	<comment type="line" pos:line="37" pos:column="9">// to connect to the database</comment>
<comment type="line" pos:line="38" pos:column="1">//	public synchronized Connection getConnection(){</comment>
	public static <name pos:line="39" pos:column="23">Connection</name> <call><name pos:line="39" pos:column="34">getConnection</name><argument_list pos:line="39" pos:column="47">()</argument_list></call><block pos:line="39" pos:column="49">{
		<try pos:line="40" pos:column="17">try <block pos:line="40" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="41" pos:column="25">Class</name><op:operator pos:line="41" pos:column="30">.</op:operator><name pos:line="41" pos:column="31">forName</name></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">driver</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="46">.</op:operator><call><name pos:line="41" pos:column="47">newInstance</name><argument_list pos:line="41" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt/></block></try>}</block></expr></expr_stmt> <catch pos:line="42" pos:column="19">catch <parameter_list pos:line="42" pos:column="25">(<param><decl><type><name pos:line="42" pos:column="26">InstantiationException</name></type> <name pos:line="42" pos:column="49">e1</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">System</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">out</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">println</name></name><argument_list pos:line="43" pos:column="43">(<argument><expr><name pos:line="43" pos:column="44">e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">e1</name><op:operator pos:line="44" pos:column="27">.</op:operator><name pos:line="44" pos:column="28">printStackTrace</name></name><argument_list pos:line="44" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="45" pos:column="19">catch <parameter_list pos:line="45" pos:column="25">(<param><decl><type><name pos:line="45" pos:column="26">IllegalAccessException</name></type> <name pos:line="45" pos:column="49">e1</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">System</name><op:operator pos:line="46" pos:column="31">.</op:operator><name pos:line="46" pos:column="32">out</name><op:operator pos:line="46" pos:column="35">.</op:operator><name pos:line="46" pos:column="36">println</name></name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">e1</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">printStackTrace</name></name><argument_list pos:line="47" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="48" pos:column="19">catch <parameter_list pos:line="48" pos:column="25">(<param><decl><type><name pos:line="48" pos:column="26">ClassNotFoundException</name></type> <name pos:line="48" pos:column="49">e1</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">System</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">out</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">println</name></name><argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">e1</name><op:operator pos:line="50" pos:column="27">.</op:operator><name pos:line="50" pos:column="28">printStackTrace</name></name><argument_list pos:line="50" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		
		<try pos:line="53" pos:column="17">try<block pos:line="53" pos:column="20">{
			<if pos:line="54" pos:column="25">if<condition pos:line="54" pos:column="27">(<expr><name pos:line="54" pos:column="28">conn</name> <op:operator pos:line="54" pos:column="33">==</op:operator> <lit:literal type="null" pos:line="54" pos:column="36">null</lit:literal></expr>)</condition><then><block pos:line="54" pos:column="41">{
				<expr_stmt><expr><name pos:line="55" pos:column="33">conn</name> <op:operator pos:line="55" pos:column="38">=</op:operator> <call><name><name pos:line="55" pos:column="40">DriverManager</name><op:operator pos:line="55" pos:column="53">.</op:operator><name pos:line="55" pos:column="54">getConnection</name></name><argument_list pos:line="55" pos:column="67">(<argument><expr><name pos:line="55" pos:column="68">url</name> <op:operator pos:line="55" pos:column="72">+</op:operator> <name pos:line="55" pos:column="74">dbName</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="82">userName</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="92">password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="56" pos:column="33">conn</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">setAutoCommit</name></name><argument_list pos:line="56" pos:column="51">(<argument><expr><lit:literal type="boolean" pos:line="56" pos:column="52">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="57" pos:column="21">System</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">out</name><op:operator pos:line="57" pos:column="31">.</op:operator><name pos:line="57" pos:column="32">println</name></name><argument_list pos:line="57" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="40">"Connected to the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch pos:line="59" pos:column="19">catch <parameter_list pos:line="59" pos:column="25">(<param><decl><type><name pos:line="59" pos:column="26">SQLException</name></type> <name pos:line="59" pos:column="39">e</name></decl></param>)</parameter_list><block pos:line="59" pos:column="41">{
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">System</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">out</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">println</name></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			
		<return pos:line="63" pos:column="17">return <expr><name pos:line="63" pos:column="24">conn</name></expr>;</return>
	}</block></class>
	
	<comment type="line" pos:line="66" pos:column="9">// Call this function to commit when transaction is successful</comment>
	<function><type><specifier pos:line="67" pos:column="9">public</specifier> <specifier pos:line="67" pos:column="16">static</specifier> <name pos:line="67" pos:column="23">void</name></type> <name pos:line="67" pos:column="28">commitTransaction</name><parameter_list pos:line="67" pos:column="45">(<param><decl><type><name pos:line="67" pos:column="46">Connection</name></type> <name pos:line="67" pos:column="57">conn</name></decl></param>)</parameter_list><block pos:line="67" pos:column="62">{
		<try pos:line="68" pos:column="17">try <block pos:line="68" pos:column="21">{
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">conn</name> <op:operator pos:line="69" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="69" pos:column="37">null</lit:literal></expr>)</condition><then pos:line="69" pos:column="42"> <block pos:line="69" pos:column="43">{
		    	<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">conn</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">commit</name></name><argument_list pos:line="70" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name pos:line="71" pos:column="25">System</name><op:operator pos:line="71" pos:column="31">.</op:operator><name pos:line="71" pos:column="32">out</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">println</name></name><argument_list pos:line="71" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="44">"Transaction Committed!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	}</block></then></if>
	    }</block> <catch pos:line="73" pos:column="15">catch <parameter_list pos:line="73" pos:column="21">(<param><decl><type><name pos:line="73" pos:column="22">SQLException</name></type> <name pos:line="73" pos:column="35">e</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="38">{
	    	<expr_stmt><expr><call><name><name pos:line="74" pos:column="17">e</name><op:operator pos:line="74" pos:column="18">.</op:operator><name pos:line="74" pos:column="19">printStackTrace</name></name><argument_list pos:line="74" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
	
	<comment type="line" pos:line="78" pos:column="9">// Call this function to rollback when transaction is unsuccessful</comment>
	<function><type><specifier pos:line="79" pos:column="9">public</specifier> <specifier pos:line="79" pos:column="16">static</specifier> <name pos:line="79" pos:column="23">void</name></type> <name pos:line="79" pos:column="28">rollBackTransaction</name><parameter_list pos:line="79" pos:column="47">(<param><decl><type><name pos:line="79" pos:column="48">Connection</name></type> <name pos:line="79" pos:column="59">conn</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="65">{
		<try pos:line="80" pos:column="17">try <block pos:line="80" pos:column="21">{
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name pos:line="81" pos:column="29">conn</name> <op:operator pos:line="81" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="81" pos:column="37">null</lit:literal></expr>)</condition><then pos:line="81" pos:column="42"> <block pos:line="81" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">conn</name><op:operator pos:line="82" pos:column="37">.</op:operator><name pos:line="82" pos:column="38">rollback</name></name><argument_list pos:line="82" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="83" pos:column="21">System</name><op:operator pos:line="83" pos:column="27">.</op:operator><name pos:line="83" pos:column="28">out</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">println</name></name><argument_list pos:line="83" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="40">"Transaction Rolledback!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></then></if>
	    }</block> <catch pos:line="85" pos:column="15">catch <parameter_list pos:line="85" pos:column="21">(<param><decl><type><name pos:line="85" pos:column="22">SQLException</name></type> <name pos:line="85" pos:column="35">e</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="38">{
	    	<expr_stmt><expr><call><name><name pos:line="86" pos:column="17">e</name><op:operator pos:line="86" pos:column="18">.</op:operator><name pos:line="86" pos:column="19">printStackTrace</name></name><argument_list pos:line="86" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
	    }</block></catch></try>
	}</block></function>
		
	
	<comment type="line" pos:line="91" pos:column="9">//Call this function to close the Database Connection</comment>
	<function><type><specifier pos:line="92" pos:column="9">public</specifier> <specifier pos:line="92" pos:column="16">static</specifier> <name pos:line="92" pos:column="23">void</name></type> <name pos:line="92" pos:column="28">closeConnection</name><parameter_list pos:line="92" pos:column="43">(<param><decl><type><name pos:line="92" pos:column="44">Connection</name></type> <name pos:line="92" pos:column="55">conn</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="61">{
		<try pos:line="93" pos:column="17">try <block pos:line="93" pos:column="21">{
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><name pos:line="94" pos:column="29">conn</name> <op:operator pos:line="94" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="94" pos:column="37">null</lit:literal></expr>)</condition><then pos:line="94" pos:column="42"> <block pos:line="94" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">conn</name><op:operator pos:line="95" pos:column="37">.</op:operator><name pos:line="95" pos:column="38">close</name></name><argument_list pos:line="95" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="96" pos:column="33">System</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">out</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">println</name></name><argument_list pos:line="96" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="52">"Closed the connection to database!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block> <catch pos:line="98" pos:column="19">catch <parameter_list pos:line="98" pos:column="25">(<param><decl><type><name pos:line="98" pos:column="26">SQLException</name></type> <name pos:line="98" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">e</name><op:operator pos:line="99" pos:column="26">.</op:operator><name pos:line="99" pos:column="27">printStackTrace</name></name><argument_list pos:line="99" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
    }</block></function>	
	
}
</unit>
