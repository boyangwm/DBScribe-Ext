<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\CourseOffered.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">io</name><op:operator pos:line="6" pos:column="15">.</op:operator><name pos:line="6" pos:column="16">FileWriter</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">io</name><op:operator pos:line="7" pos:column="15">.</op:operator><name pos:line="7" pos:column="16">IOException</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">java</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">util</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">HashMap</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">mysql</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">jdbc</name><op:operator pos:line="14" pos:column="22">.</op:operator><name pos:line="14" pos:column="23">Statement</name></name>;</import>


<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">CourseOffered</name> <block pos:line="17" pos:column="28">{
	<decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">int</name></type> <name pos:line="18" pos:column="21">offerID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">Course</name></type> <name pos:line="19" pos:column="24">course</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">CourseSchedule</name></type> <name pos:line="20" pos:column="32">courseSchedule</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <name><name pos:line="21" pos:column="17">ArrayList</name><argument_list pos:line="21" pos:column="26">&lt;<argument><name pos:line="21" pos:column="27">File</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="33">files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name pos:line="22" pos:column="17">Professor</name></type> <name pos:line="22" pos:column="27">professor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">int</name></type> <name pos:line="23" pos:column="21">SemesterID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">int</name></type> <name pos:line="24" pos:column="21">totalCapacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">int</name></type> <name pos:line="25" pos:column="21">currentlyFilled</name></decl>;</decl_stmt>	
	
	<comment type="block" pos:line="27" pos:column="9">/*
	 * Initialize a course offered object using the offer id
	 * Throws a course offering does not exist exception if the offering does not exist and
	 * throws a course does not exist exception if the course itself is non existent 
	 */</comment>
	<constructor><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">CourseOffered</name><parameter_list pos:line="32" pos:column="29">(<param><decl><type><name pos:line="32" pos:column="30">int</name></type> <name pos:line="32" pos:column="34">offerID</name></decl></param>)</parameter_list> <throws pos:line="32" pos:column="43">throws <argument><expr><name><name pos:line="32" pos:column="50">Course</name><op:operator pos:line="32" pos:column="56">.</op:operator><name pos:line="32" pos:column="57">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="86">CourseOfferingDoesNotExistException</name></expr></argument></throws><block pos:line="32" pos:column="121">{
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">this</name><op:operator pos:line="33" pos:column="21">.</op:operator><name pos:line="33" pos:column="22">offerID</name></name> <op:operator pos:line="33" pos:column="30">=</op:operator> <name pos:line="33" pos:column="32">offerID</name></expr>;</expr_stmt>
		<try pos:line="34" pos:column="17">try<block pos:line="34" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">Connection</name></type> <name pos:line="35" pos:column="36">conn</name> <init pos:line="35" pos:column="41">= <expr><call><name><name pos:line="35" pos:column="43">Database</name><op:operator pos:line="35" pos:column="51">.</op:operator><name pos:line="35" pos:column="52">getConnection</name></name><argument_list pos:line="35" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="37" pos:column="25">try<block pos:line="37" pos:column="28">{
				<if pos:line="38" pos:column="33">if<condition pos:line="38" pos:column="35">(<expr><name pos:line="38" pos:column="36">conn</name> <op:operator pos:line="38" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="38" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="38" pos:column="49">{
					
					<comment type="line" pos:line="40" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="41" pos:column="41">String</name></type> <name pos:line="41" pos:column="48">SemesterSelect</name> <init pos:line="41" pos:column="63">= <expr><lit:literal type="string" pos:line="41" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="42" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="42" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="43" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="43" pos:column="59">" WHERE OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="44" pos:column="41">PreparedStatement</name></type> <name pos:line="44" pos:column="59">statement</name> <init pos:line="44" pos:column="69">= <expr><call><name><name pos:line="44" pos:column="71">conn</name><op:operator pos:line="44" pos:column="75">.</op:operator><name pos:line="44" pos:column="76">prepareStatement</name></name><argument_list pos:line="44" pos:column="92">(<argument><expr><name pos:line="44" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="45" pos:column="41">statement</name><op:operator pos:line="45" pos:column="50">.</op:operator><name pos:line="45" pos:column="51">setInt</name></name><argument_list pos:line="45" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="45" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="46" pos:column="41">ResultSet</name></type> <name pos:line="46" pos:column="51">rs</name> <init pos:line="46" pos:column="54">= <expr><call><name><name pos:line="46" pos:column="56">statement</name><op:operator pos:line="46" pos:column="65">.</op:operator><name pos:line="46" pos:column="66">executeQuery</name></name><argument_list pos:line="46" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="48" pos:column="41">if<condition pos:line="48" pos:column="43">(<expr><call><name><name pos:line="48" pos:column="44">rs</name><op:operator pos:line="48" pos:column="46">.</op:operator><name pos:line="48" pos:column="47">first</name></name><argument_list pos:line="48" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="48" pos:column="55">{
						<comment type="block" pos:line="49" pos:column="49">/*
						 * course offering exists
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="52" pos:column="49">DBAnnotation</name><op:operator pos:line="52" pos:column="61">.</op:operator><name pos:line="52" pos:column="62">annoate</name></name><argument_list pos:line="52" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="82">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="100">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="52" pos:column="112">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="53" pos:column="49">int</name></type> <name pos:line="53" pos:column="53">courseID</name> <init pos:line="53" pos:column="62">= <expr><call><name><name pos:line="53" pos:column="64">rs</name><op:operator pos:line="53" pos:column="66">.</op:operator><name pos:line="53" pos:column="67">getInt</name></name><argument_list pos:line="53" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="74">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="54" pos:column="49">Course</name></type> <name pos:line="54" pos:column="56">course</name> <init pos:line="54" pos:column="63">= <expr><op:operator pos:line="54" pos:column="65">new</op:operator> <call><name pos:line="54" pos:column="69">Course</name><argument_list pos:line="54" pos:column="75">(<argument><expr><name pos:line="54" pos:column="76">courseID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="55" pos:column="49">CourseSchedule</name></type> <name pos:line="55" pos:column="64">courseSchedule</name> <init pos:line="55" pos:column="79">= <expr><op:operator pos:line="55" pos:column="81">new</op:operator> <call><name pos:line="55" pos:column="85">CourseSchedule</name><argument_list pos:line="55" pos:column="99">(<argument><expr><name pos:line="55" pos:column="100">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name pos:line="56" pos:column="49">ArrayList</name><argument_list pos:line="56" pos:column="58">&lt;<argument><name pos:line="56" pos:column="59">File</name></argument>&gt;</argument_list></name></type> <name pos:line="56" pos:column="65">files</name> <init pos:line="56" pos:column="71">= <expr><call><name><name pos:line="56" pos:column="73">File</name><op:operator pos:line="56" pos:column="77">.</op:operator><name pos:line="56" pos:column="78">getFiles</name></name><argument_list pos:line="56" pos:column="86">(<argument><expr><name pos:line="56" pos:column="87">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="58" pos:column="49">DBAnnotation</name><op:operator pos:line="58" pos:column="61">.</op:operator><name pos:line="58" pos:column="62">annoate</name></name><argument_list pos:line="58" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="70">"taughtBy"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="82">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="100">"TaughtBy"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="58" pos:column="112">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="59" pos:column="49">int</name></type> <name pos:line="59" pos:column="53">taughtBy</name> <init pos:line="59" pos:column="62">= <expr><call><name><name pos:line="59" pos:column="64">rs</name><op:operator pos:line="59" pos:column="66">.</op:operator><name pos:line="59" pos:column="67">getInt</name></name><argument_list pos:line="59" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="74">"TaughtBy"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="60" pos:column="49">Professor</name></type> <name pos:line="60" pos:column="59">professor</name> <init pos:line="60" pos:column="69">= <expr><op:operator pos:line="60" pos:column="71">new</op:operator> <call><name pos:line="60" pos:column="75">Professor</name><argument_list pos:line="60" pos:column="84">(<argument><expr><name pos:line="60" pos:column="85">taughtBy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="62" pos:column="49">DBAnnotation</name><op:operator pos:line="62" pos:column="61">.</op:operator><name pos:line="62" pos:column="62">annoate</name></name><argument_list pos:line="62" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="70">"semID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="79">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="97">"SemesterID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="62" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="63" pos:column="49">int</name></type> <name pos:line="63" pos:column="53">semID</name> <init pos:line="63" pos:column="59">= <expr><call><name><name pos:line="63" pos:column="61">rs</name><op:operator pos:line="63" pos:column="63">.</op:operator><name pos:line="63" pos:column="64">getInt</name></name><argument_list pos:line="63" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="71">"SemesterID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="64" pos:column="49">this</name><op:operator pos:line="64" pos:column="53">.</op:operator><name pos:line="64" pos:column="54">SemesterID</name></name> <op:operator pos:line="64" pos:column="65">=</op:operator> <name pos:line="64" pos:column="67">semID</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="66" pos:column="49">DBAnnotation</name><op:operator pos:line="66" pos:column="61">.</op:operator><name pos:line="66" pos:column="62">annoate</name></name><argument_list pos:line="66" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="70">"totalCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="87">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="105">"TotalCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="66" pos:column="122">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="67" pos:column="49">int</name></type> <name pos:line="67" pos:column="53">totalCapacity</name> <init pos:line="67" pos:column="67">= <expr><call><name><name pos:line="67" pos:column="69">rs</name><op:operator pos:line="67" pos:column="71">.</op:operator><name pos:line="67" pos:column="72">getInt</name></name><argument_list pos:line="67" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="79">"TotalCapacity"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="68" pos:column="49">this</name><op:operator pos:line="68" pos:column="53">.</op:operator><name pos:line="68" pos:column="54">totalCapacity</name></name> <op:operator pos:line="68" pos:column="68">=</op:operator> <name pos:line="68" pos:column="70">totalCapacity</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="70" pos:column="49">DBAnnotation</name><op:operator pos:line="70" pos:column="61">.</op:operator><name pos:line="70" pos:column="62">annoate</name></name><argument_list pos:line="70" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="70">"seatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="85">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="103">"SeatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="70" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="71" pos:column="49">int</name></type> <name pos:line="71" pos:column="53">seatsFilled</name> <init pos:line="71" pos:column="65">= <expr><call><name><name pos:line="71" pos:column="67">rs</name><op:operator pos:line="71" pos:column="69">.</op:operator><name pos:line="71" pos:column="70">getInt</name></name><argument_list pos:line="71" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="77">"SeatsFilled"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="72" pos:column="49">this</name><op:operator pos:line="72" pos:column="53">.</op:operator><name pos:line="72" pos:column="54">currentlyFilled</name></name> <op:operator pos:line="72" pos:column="70">=</op:operator> <name pos:line="72" pos:column="72">seatsFilled</name></expr>;</expr_stmt>
						
						<expr_stmt><expr><name><name pos:line="74" pos:column="49">this</name><op:operator pos:line="74" pos:column="53">.</op:operator><name pos:line="74" pos:column="54">professor</name></name> <op:operator pos:line="74" pos:column="64">=</op:operator> <name pos:line="74" pos:column="66">professor</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="75" pos:column="49">this</name><op:operator pos:line="75" pos:column="53">.</op:operator><name pos:line="75" pos:column="54">course</name></name> <op:operator pos:line="75" pos:column="61">=</op:operator> <name pos:line="75" pos:column="63">course</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="76" pos:column="49">this</name><op:operator pos:line="76" pos:column="53">.</op:operator><name pos:line="76" pos:column="54">courseSchedule</name></name> <op:operator pos:line="76" pos:column="69">=</op:operator> <name pos:line="76" pos:column="71">courseSchedule</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="77" pos:column="49">this</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">files</name></name> <op:operator pos:line="77" pos:column="60">=</op:operator> <name pos:line="77" pos:column="62">files</name></expr>;</expr_stmt>
						
					}</block></then>
					
					<else pos:line="81" pos:column="41">else<block pos:line="81" pos:column="45">{
						<throw pos:line="82" pos:column="49">throw <expr><op:operator pos:line="82" pos:column="55">new</op:operator> <call><name pos:line="82" pos:column="59">CourseOfferingDoesNotExistException</name><argument_list pos:line="82" pos:column="94">()</argument_list></call></expr>;</throw>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="89" pos:column="25">catch<parameter_list pos:line="89" pos:column="30">(<param><decl><type><name pos:line="89" pos:column="31">SQLException</name></type> <name pos:line="89" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="89" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="90" pos:column="33">System</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">out</name><op:operator pos:line="90" pos:column="43">.</op:operator><name pos:line="90" pos:column="44">println</name></name><argument_list pos:line="90" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="52">"Error retrieving course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">System</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">out</name><op:operator pos:line="91" pos:column="43">.</op:operator><name pos:line="91" pos:column="44">println</name></name><argument_list pos:line="91" pos:column="51">(<argument><expr><call><name><name pos:line="91" pos:column="52">e</name><op:operator pos:line="91" pos:column="53">.</op:operator><name pos:line="91" pos:column="54">getMessage</name></name><argument_list pos:line="91" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">e</name><op:operator pos:line="92" pos:column="34">.</op:operator><name pos:line="92" pos:column="35">printStackTrace</name></name><argument_list pos:line="92" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="93" pos:column="27">catch <parameter_list pos:line="93" pos:column="33">(<param><decl><type><name><name pos:line="93" pos:column="34">Student</name><op:operator pos:line="93" pos:column="41">.</op:operator><name pos:line="93" pos:column="42">AccessDeniedException</name></name></type> <name pos:line="93" pos:column="64">e</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="67">{
				<comment type="line" pos:line="94" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">e</name><op:operator pos:line="95" pos:column="34">.</op:operator><name pos:line="95" pos:column="35">printStackTrace</name></name><argument_list pos:line="95" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="96" pos:column="27">catch <parameter_list pos:line="96" pos:column="33">(<param><decl><type><name><name pos:line="96" pos:column="34">People</name><op:operator pos:line="96" pos:column="40">.</op:operator><name pos:line="96" pos:column="41">PersonDoesNotExistException</name></name></type> <name pos:line="96" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="72">{
				<comment type="line" pos:line="97" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">e</name><op:operator pos:line="98" pos:column="34">.</op:operator><name pos:line="98" pos:column="35">printStackTrace</name></name><argument_list pos:line="98" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="103" pos:column="17">finally<block pos:line="103" pos:column="24">{
		}</block></finally></try>

		
	}</block></constructor>
	
	
	<comment type="block" pos:line="110" pos:column="9">/*
	 * Getters and setters start*****************************************************
	 */</comment>
	<comment type="block" format="javadoc" pos:line="113" pos:column="9">/**
	 * @return the offerID
	 */</comment>
	<function><type><specifier pos:line="116" pos:column="9">public</specifier> <specifier pos:line="116" pos:column="16">final</specifier> <name pos:line="116" pos:column="22">int</name></type> <name pos:line="116" pos:column="26">getOfferID</name><parameter_list pos:line="116" pos:column="36">()</parameter_list> <block pos:line="116" pos:column="39">{
		<return pos:line="117" pos:column="17">return <expr><name pos:line="117" pos:column="24">offerID</name></expr>;</return>
	}</block></function>

	
	<comment type="block" format="javadoc" pos:line="121" pos:column="9">/**
	 * @return the course
	 */</comment>
	<function><type><specifier pos:line="124" pos:column="9">public</specifier> <specifier pos:line="124" pos:column="16">final</specifier> <name pos:line="124" pos:column="22">Course</name></type> <name pos:line="124" pos:column="29">getCourse</name><parameter_list pos:line="124" pos:column="38">()</parameter_list> <block pos:line="124" pos:column="41">{
		<return pos:line="125" pos:column="17">return <expr><name pos:line="125" pos:column="24">course</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="129" pos:column="9">/**
	 * @param course the course to set
	 */</comment>
	<function><type><specifier pos:line="132" pos:column="9">public</specifier> <specifier pos:line="132" pos:column="16">final</specifier> <name pos:line="132" pos:column="22">void</name></type> <name pos:line="132" pos:column="27">setCourse</name><parameter_list pos:line="132" pos:column="36">(<param><decl><type><specifier pos:line="132" pos:column="37">final</specifier> <name pos:line="132" pos:column="43">Course</name></type> <name pos:line="132" pos:column="50">course</name></decl></param>)</parameter_list> <block pos:line="132" pos:column="58">{
		<expr_stmt><expr><name><name pos:line="133" pos:column="17">this</name><op:operator pos:line="133" pos:column="21">.</op:operator><name pos:line="133" pos:column="22">course</name></name> <op:operator pos:line="133" pos:column="29">=</op:operator> <name pos:line="133" pos:column="31">course</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="137" pos:column="9">/**
	 * @return the courseSchedule
	 */</comment>
	<function><type><specifier pos:line="140" pos:column="9">public</specifier> <specifier pos:line="140" pos:column="16">final</specifier> <name pos:line="140" pos:column="22">CourseSchedule</name></type> <name pos:line="140" pos:column="37">getCourseSchedule</name><parameter_list pos:line="140" pos:column="54">()</parameter_list> <block pos:line="140" pos:column="57">{
		<return pos:line="141" pos:column="17">return <expr><name pos:line="141" pos:column="24">courseSchedule</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="145" pos:column="9">/**
	 * @param courseSchedule the courseSchedule to set
	 */</comment>
	<function><type><specifier pos:line="148" pos:column="9">public</specifier> <specifier pos:line="148" pos:column="16">final</specifier> <name pos:line="148" pos:column="22">void</name></type> <name pos:line="148" pos:column="27">setCourseSchedule</name><parameter_list pos:line="148" pos:column="44">(<param><decl><type><specifier pos:line="148" pos:column="45">final</specifier> <name pos:line="148" pos:column="51">CourseSchedule</name></type> <name pos:line="148" pos:column="66">courseSchedule</name></decl></param>)</parameter_list> <block pos:line="148" pos:column="82">{
		<expr_stmt><expr><name><name pos:line="149" pos:column="17">this</name><op:operator pos:line="149" pos:column="21">.</op:operator><name pos:line="149" pos:column="22">courseSchedule</name></name> <op:operator pos:line="149" pos:column="37">=</op:operator> <name pos:line="149" pos:column="39">courseSchedule</name></expr>;</expr_stmt>
	}</block></function>

	
	<comment type="block" format="javadoc" pos:line="153" pos:column="9">/**
	 * @return the files
	 */</comment>
	<function><type><specifier pos:line="156" pos:column="9">public</specifier> <specifier pos:line="156" pos:column="16">final</specifier> <name><name pos:line="156" pos:column="22">ArrayList</name><argument_list pos:line="156" pos:column="31">&lt;<argument><name pos:line="156" pos:column="32">File</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="38">getFiles</name><parameter_list pos:line="156" pos:column="46">()</parameter_list> <block pos:line="156" pos:column="49">{
		<return pos:line="157" pos:column="17">return <expr><name pos:line="157" pos:column="24">files</name></expr>;</return>
	}</block></function>
	

	<comment type="block" format="javadoc" pos:line="161" pos:column="9">/**
	 * @param files the files to set
	 */</comment>
	<function><type><specifier pos:line="164" pos:column="9">public</specifier> <specifier pos:line="164" pos:column="16">final</specifier> <name pos:line="164" pos:column="22">void</name></type> <name pos:line="164" pos:column="27">setFiles</name><parameter_list pos:line="164" pos:column="35">(<param><decl><type><specifier pos:line="164" pos:column="36">final</specifier> <name><name pos:line="164" pos:column="42">ArrayList</name><argument_list pos:line="164" pos:column="51">&lt;<argument><name pos:line="164" pos:column="52">File</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="58">files</name></decl></param>)</parameter_list> <block pos:line="164" pos:column="65">{
		<expr_stmt><expr><name><name pos:line="165" pos:column="17">this</name><op:operator pos:line="165" pos:column="21">.</op:operator><name pos:line="165" pos:column="22">files</name></name> <op:operator pos:line="165" pos:column="28">=</op:operator> <name pos:line="165" pos:column="30">files</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="168" pos:column="9">/**
	 * @return the professor
	 */</comment>
	<function><type><specifier pos:line="171" pos:column="9">public</specifier> <specifier pos:line="171" pos:column="16">final</specifier> <name pos:line="171" pos:column="22">Professor</name></type> <name pos:line="171" pos:column="32">getProfessor</name><parameter_list pos:line="171" pos:column="44">()</parameter_list> <block pos:line="171" pos:column="47">{
		<return pos:line="172" pos:column="17">return <expr><name pos:line="172" pos:column="24">professor</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="176" pos:column="9">/**
	 * @param professor the professor to set
	 */</comment>
	<function><type><specifier pos:line="179" pos:column="9">public</specifier> <specifier pos:line="179" pos:column="16">final</specifier> <name pos:line="179" pos:column="22">void</name></type> <name pos:line="179" pos:column="27">setProfessor</name><parameter_list pos:line="179" pos:column="39">(<param><decl><type><specifier pos:line="179" pos:column="40">final</specifier> <name pos:line="179" pos:column="46">Professor</name></type> <name pos:line="179" pos:column="56">professor</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="67">{
		<expr_stmt><expr><name><name pos:line="180" pos:column="17">this</name><op:operator pos:line="180" pos:column="21">.</op:operator><name pos:line="180" pos:column="22">professor</name></name> <op:operator pos:line="180" pos:column="32">=</op:operator> <name pos:line="180" pos:column="34">professor</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="184" pos:column="9">/**
	 * @return the semesterID
	 */</comment>
	<function><type><specifier pos:line="187" pos:column="9">public</specifier> <specifier pos:line="187" pos:column="16">final</specifier> <name pos:line="187" pos:column="22">int</name></type> <name pos:line="187" pos:column="26">getSemesterID</name><parameter_list pos:line="187" pos:column="39">()</parameter_list> <block pos:line="187" pos:column="42">{
		<return pos:line="188" pos:column="17">return <expr><name pos:line="188" pos:column="24">SemesterID</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="192" pos:column="9">/**
	 * @param semesterID the semesterID to set
	 */</comment>
	<function><type><specifier pos:line="195" pos:column="9">public</specifier> <specifier pos:line="195" pos:column="16">final</specifier> <name pos:line="195" pos:column="22">void</name></type> <name pos:line="195" pos:column="27">setSemesterID</name><parameter_list pos:line="195" pos:column="40">(<param><decl><type><specifier pos:line="195" pos:column="41">final</specifier> <name pos:line="195" pos:column="47">int</name></type> <name pos:line="195" pos:column="51">semesterID</name></decl></param>)</parameter_list> <block pos:line="195" pos:column="63">{
		<expr_stmt><expr><name pos:line="196" pos:column="17">SemesterID</name> <op:operator pos:line="196" pos:column="28">=</op:operator> <name pos:line="196" pos:column="30">semesterID</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="200" pos:column="9">/**
	 * @return the totalCapacity
	 */</comment>
	<function><type><specifier pos:line="203" pos:column="9">public</specifier> <specifier pos:line="203" pos:column="16">final</specifier> <name pos:line="203" pos:column="22">int</name></type> <name pos:line="203" pos:column="26">getTotalCapacity</name><parameter_list pos:line="203" pos:column="42">()</parameter_list> <block pos:line="203" pos:column="45">{
		<return pos:line="204" pos:column="17">return <expr><name pos:line="204" pos:column="24">totalCapacity</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="208" pos:column="9">/**
	 * @param totalCapacity the totalCapacity to set
	 */</comment>
	<function><type><specifier pos:line="211" pos:column="9">public</specifier> <specifier pos:line="211" pos:column="16">final</specifier> <name pos:line="211" pos:column="22">void</name></type> <name pos:line="211" pos:column="27">setTotalCapacity</name><parameter_list pos:line="211" pos:column="43">(<param><decl><type><specifier pos:line="211" pos:column="44">final</specifier> <name pos:line="211" pos:column="50">int</name></type> <name pos:line="211" pos:column="54">totalCapacity</name></decl></param>)</parameter_list> <block pos:line="211" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="212" pos:column="17">this</name><op:operator pos:line="212" pos:column="21">.</op:operator><name pos:line="212" pos:column="22">totalCapacity</name></name> <op:operator pos:line="212" pos:column="36">=</op:operator> <name pos:line="212" pos:column="38">totalCapacity</name></expr>;</expr_stmt>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="216" pos:column="9">/**
	 * @return the currentlyFilled
	 */</comment>
	<function><type><specifier pos:line="219" pos:column="9">public</specifier> <specifier pos:line="219" pos:column="16">final</specifier> <name pos:line="219" pos:column="22">int</name></type> <name pos:line="219" pos:column="26">getCurrentlyFilled</name><parameter_list pos:line="219" pos:column="44">()</parameter_list> <block pos:line="219" pos:column="47">{
		<return pos:line="220" pos:column="17">return <expr><name pos:line="220" pos:column="24">currentlyFilled</name></expr>;</return>
	}</block></function>


	<comment type="block" format="javadoc" pos:line="224" pos:column="9">/**
	 * @param currentlyFilled the currentlyFilled to set
	 */</comment>
	<function><type><specifier pos:line="227" pos:column="9">public</specifier> <specifier pos:line="227" pos:column="16">final</specifier> <name pos:line="227" pos:column="22">void</name></type> <name pos:line="227" pos:column="27">setCurrentlyFilled</name><parameter_list pos:line="227" pos:column="45">(<param><decl><type><specifier pos:line="227" pos:column="46">final</specifier> <name pos:line="227" pos:column="52">int</name></type> <name pos:line="227" pos:column="56">currentlyFilled</name></decl></param>)</parameter_list> <block pos:line="227" pos:column="73">{
		<expr_stmt><expr><name><name pos:line="228" pos:column="17">this</name><op:operator pos:line="228" pos:column="21">.</op:operator><name pos:line="228" pos:column="22">currentlyFilled</name></name> <op:operator pos:line="228" pos:column="38">=</op:operator> <name pos:line="228" pos:column="40">currentlyFilled</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="231" pos:column="9">public</specifier> <name pos:line="231" pos:column="16">String</name></type> <name pos:line="231" pos:column="23">getCourseName</name><parameter_list pos:line="231" pos:column="36">()</parameter_list><block pos:line="231" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="232" pos:column="17">Course</name></type> <name pos:line="232" pos:column="24">c</name> <init pos:line="232" pos:column="26">= <expr><call><name pos:line="232" pos:column="28">getCourse</name><argument_list pos:line="232" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="233" pos:column="17">return <expr><call><name><name pos:line="233" pos:column="24">c</name><op:operator pos:line="233" pos:column="25">.</op:operator><name pos:line="233" pos:column="26">getCourseName</name></name><argument_list pos:line="233" pos:column="39">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="236" pos:column="9">public</specifier> <name pos:line="236" pos:column="16">String</name></type> <name pos:line="236" pos:column="23">getProfessorName</name><parameter_list pos:line="236" pos:column="39">()</parameter_list><block pos:line="236" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="237" pos:column="17">Professor</name></type> <name pos:line="237" pos:column="27">p</name> <init pos:line="237" pos:column="29">= <expr><call><name pos:line="237" pos:column="31">getProfessor</name><argument_list pos:line="237" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="238" pos:column="17">return <expr><call><name><name pos:line="238" pos:column="24">p</name><op:operator pos:line="238" pos:column="25">.</op:operator><name pos:line="238" pos:column="26">getName</name></name><argument_list pos:line="238" pos:column="33">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="241" pos:column="9">public</specifier> <name pos:line="241" pos:column="16">String</name></type> <name pos:line="241" pos:column="23">getDepartmentName</name><parameter_list pos:line="241" pos:column="40">()</parameter_list><block pos:line="241" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="242" pos:column="17">Course</name></type> <name pos:line="242" pos:column="24">c</name> <init pos:line="242" pos:column="26">= <expr><call><name pos:line="242" pos:column="28">getCourse</name><argument_list pos:line="242" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="243" pos:column="17">Department</name></type> <name pos:line="243" pos:column="28">d</name> <init pos:line="243" pos:column="30">= <expr><call><name><name pos:line="243" pos:column="32">c</name><op:operator pos:line="243" pos:column="33">.</op:operator><name pos:line="243" pos:column="34">getDepartment</name></name><argument_list pos:line="243" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="244" pos:column="17">return <expr><call><name><name pos:line="244" pos:column="24">d</name><op:operator pos:line="244" pos:column="25">.</op:operator><name pos:line="244" pos:column="26">getDepartmentName</name></name><argument_list pos:line="244" pos:column="43">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="247" pos:column="9">public</specifier> <name pos:line="247" pos:column="16">String</name></type> <name pos:line="247" pos:column="23">getClassRoomName</name><parameter_list pos:line="247" pos:column="39">()</parameter_list><block pos:line="247" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">CourseSchedule</name></type> <name pos:line="248" pos:column="32">cs</name> <init pos:line="248" pos:column="35">= <expr><call><name pos:line="248" pos:column="37">getCourseSchedule</name><argument_list pos:line="248" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="249" pos:column="17">Classroom</name></type> <name pos:line="249" pos:column="27">cr</name> <init pos:line="249" pos:column="30">= <expr><call><name><name pos:line="249" pos:column="32">cs</name><op:operator pos:line="249" pos:column="34">.</op:operator><name pos:line="249" pos:column="35">getClassroom</name></name><argument_list pos:line="249" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="250" pos:column="17">ClassroomName</name></type> <name pos:line="250" pos:column="31">cn</name> <init pos:line="250" pos:column="34">= <expr><call><name><name pos:line="250" pos:column="36">cr</name><op:operator pos:line="250" pos:column="38">.</op:operator><name pos:line="250" pos:column="39">getClassroomName</name></name><argument_list pos:line="250" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="251" pos:column="17">return <expr><call><name><name pos:line="251" pos:column="24">cn</name><op:operator pos:line="251" pos:column="26">.</op:operator><name pos:line="251" pos:column="27">toString</name></name><argument_list pos:line="251" pos:column="35">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="254" pos:column="9">public</specifier> <name pos:line="254" pos:column="16">String</name></type> <name pos:line="254" pos:column="23">getClassRoomLocation</name><parameter_list pos:line="254" pos:column="43">()</parameter_list><block pos:line="254" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="255" pos:column="17">CourseSchedule</name></type> <name pos:line="255" pos:column="32">cs</name> <init pos:line="255" pos:column="35">= <expr><call><name pos:line="255" pos:column="37">getCourseSchedule</name><argument_list pos:line="255" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="256" pos:column="17">Classroom</name></type> <name pos:line="256" pos:column="27">cr</name> <init pos:line="256" pos:column="30">= <expr><call><name><name pos:line="256" pos:column="32">cs</name><op:operator pos:line="256" pos:column="34">.</op:operator><name pos:line="256" pos:column="35">getClassroom</name></name><argument_list pos:line="256" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="257" pos:column="17">ClassroomLocation</name></type> <name pos:line="257" pos:column="35">cl</name> <init pos:line="257" pos:column="38">= <expr><call><name><name pos:line="257" pos:column="40">cr</name><op:operator pos:line="257" pos:column="42">.</op:operator><name pos:line="257" pos:column="43">getClassroomLocation</name></name><argument_list pos:line="257" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="258" pos:column="17">return <expr><call><name><name pos:line="258" pos:column="24">cl</name><op:operator pos:line="258" pos:column="26">.</op:operator><name pos:line="258" pos:column="27">toString</name></name><argument_list pos:line="258" pos:column="35">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="261" pos:column="9">public</specifier> <name pos:line="261" pos:column="16">String</name></type> <name pos:line="261" pos:column="23">getTiming</name><parameter_list pos:line="261" pos:column="32">()</parameter_list><block pos:line="261" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="262" pos:column="17">CourseSchedule</name></type> <name pos:line="262" pos:column="32">cs</name> <init pos:line="262" pos:column="35">= <expr><call><name pos:line="262" pos:column="37">getCourseSchedule</name><argument_list pos:line="262" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="263" pos:column="17">Timeslots</name></type> <name pos:line="263" pos:column="27">ts</name> <init pos:line="263" pos:column="30">= <expr><call><name><name pos:line="263" pos:column="32">cs</name><op:operator pos:line="263" pos:column="34">.</op:operator><name pos:line="263" pos:column="35">getTimeslot</name></name><argument_list pos:line="263" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="264" pos:column="17">String</name></type> <name pos:line="264" pos:column="24">times</name> <init pos:line="264" pos:column="30">= <expr><lit:literal type="string" pos:line="264" pos:column="32">""</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="265" pos:column="17">if<condition pos:line="265" pos:column="19">(<expr><call><name><name pos:line="265" pos:column="20">ts</name><op:operator pos:line="265" pos:column="22">.</op:operator><name pos:line="265" pos:column="23">getTimeslotType</name></name><argument_list pos:line="265" pos:column="38">()</argument_list></call><op:operator pos:line="265" pos:column="40">==</op:operator><lit:literal type="number" pos:line="265" pos:column="42">1</lit:literal></expr>)</condition><then><block pos:line="265" pos:column="44">{
			<expr_stmt><expr><name pos:line="266" pos:column="25">times</name><op:operator pos:line="266" pos:column="30">+=</op:operator><lit:literal type="string" pos:line="266" pos:column="32">"M-W-F -&gt; "</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="267" pos:column="25">times</name> <op:operator pos:line="267" pos:column="31">+=</op:operator> <call><name><name pos:line="267" pos:column="34">ts</name><op:operator pos:line="267" pos:column="36">.</op:operator><name pos:line="267" pos:column="37">getStartHour</name></name><argument_list pos:line="267" pos:column="49">()</argument_list></call><op:operator pos:line="267" pos:column="51">+</op:operator><lit:literal type="string" pos:line="267" pos:column="52">"00 TO "</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="268" pos:column="25">times</name> <op:operator pos:line="268" pos:column="31">+=</op:operator> <call><name><name pos:line="268" pos:column="34">ts</name><op:operator pos:line="268" pos:column="36">.</op:operator><name pos:line="268" pos:column="37">getEndHour</name></name><argument_list pos:line="268" pos:column="47">()</argument_list></call><op:operator pos:line="268" pos:column="49">+</op:operator><lit:literal type="string" pos:line="268" pos:column="50">"00"</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		
		<if pos:line="271" pos:column="17">if<condition pos:line="271" pos:column="19">(<expr><call><name><name pos:line="271" pos:column="20">ts</name><op:operator pos:line="271" pos:column="22">.</op:operator><name pos:line="271" pos:column="23">getTimeslotType</name></name><argument_list pos:line="271" pos:column="38">()</argument_list></call><op:operator pos:line="271" pos:column="40">==</op:operator><lit:literal type="number" pos:line="271" pos:column="42">2</lit:literal></expr>)</condition><then><block pos:line="271" pos:column="44">{
			<expr_stmt><expr><name pos:line="272" pos:column="25">times</name><op:operator pos:line="272" pos:column="30">+=</op:operator><lit:literal type="string" pos:line="272" pos:column="32">"T-TH -&gt; "</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="273" pos:column="25">times</name> <op:operator pos:line="273" pos:column="31">+=</op:operator> <call><name><name pos:line="273" pos:column="34">ts</name><op:operator pos:line="273" pos:column="36">.</op:operator><name pos:line="273" pos:column="37">getStartHour</name></name><argument_list pos:line="273" pos:column="49">()</argument_list></call><op:operator pos:line="273" pos:column="51">+</op:operator><lit:literal type="string" pos:line="273" pos:column="52">"00 TO "</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="274" pos:column="25">times</name> <op:operator pos:line="274" pos:column="31">+=</op:operator> <call><name><name pos:line="274" pos:column="34">ts</name><op:operator pos:line="274" pos:column="36">.</op:operator><name pos:line="274" pos:column="37">getEndHour</name></name><argument_list pos:line="274" pos:column="47">()</argument_list></call><op:operator pos:line="274" pos:column="49">+</op:operator><lit:literal type="string" pos:line="274" pos:column="50">"00"</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		
		<return pos:line="277" pos:column="17">return <expr><name pos:line="277" pos:column="24">times</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="281" pos:column="9">/*
	 * Getters and settes end********************************************************
	 */</comment>
	
	
	<comment type="block" pos:line="286" pos:column="9">/*
	 * Returns all the current offerings as a ArrayList of CourseOffered objects
	 */</comment>
	<function><type><specifier pos:line="289" pos:column="9">public</specifier> <specifier pos:line="289" pos:column="16">static</specifier> <name><name pos:line="289" pos:column="23">ArrayList</name><argument_list pos:line="289" pos:column="32">&lt;<argument><name pos:line="289" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="289" pos:column="48">getAllCurrentlyOfferedCourses</name><parameter_list pos:line="289" pos:column="77">()</parameter_list><block pos:line="289" pos:column="79">{
		<decl_stmt><decl><type><name><name pos:line="290" pos:column="17">ArrayList</name><argument_list pos:line="290" pos:column="26">&lt;<argument><name pos:line="290" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="290" pos:column="42">currentOffering</name> <init pos:line="290" pos:column="58">= <expr><op:operator pos:line="290" pos:column="60">new</op:operator> <call><name><name pos:line="290" pos:column="64">ArrayList</name><argument_list pos:line="290" pos:column="73">&lt;<argument><name pos:line="290" pos:column="74">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="290" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="291" pos:column="17">int</name></type> <name pos:line="291" pos:column="21">currentSemID</name> <init pos:line="291" pos:column="34">= <expr><call><name pos:line="291" pos:column="36">getCurrentSemesterID</name><argument_list pos:line="291" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="293" pos:column="17">try<block pos:line="293" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="294" pos:column="25">Connection</name></type> <name pos:line="294" pos:column="36">conn</name> <init pos:line="294" pos:column="41">= <expr><call><name><name pos:line="294" pos:column="43">Database</name><op:operator pos:line="294" pos:column="51">.</op:operator><name pos:line="294" pos:column="52">getConnection</name></name><argument_list pos:line="294" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="296" pos:column="25">try<block pos:line="296" pos:column="28">{
				<if pos:line="297" pos:column="33">if<condition pos:line="297" pos:column="35">(<expr><name pos:line="297" pos:column="36">conn</name> <op:operator pos:line="297" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="297" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="297" pos:column="49">{
					
					<comment type="line" pos:line="299" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="300" pos:column="41">String</name></type> <name pos:line="300" pos:column="48">SQLSelect</name> <init pos:line="300" pos:column="58">= <expr><lit:literal type="string" pos:line="300" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="301" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="301" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="302" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="302" pos:column="59">" WHERE SemesterID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="303" pos:column="41">PreparedStatement</name></type> <name pos:line="303" pos:column="59">statement</name> <init pos:line="303" pos:column="69">= <expr><call><name><name pos:line="303" pos:column="71">conn</name><op:operator pos:line="303" pos:column="75">.</op:operator><name pos:line="303" pos:column="76">prepareStatement</name></name><argument_list pos:line="303" pos:column="92">(<argument><expr><name pos:line="303" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="304" pos:column="41">statement</name><op:operator pos:line="304" pos:column="50">.</op:operator><name pos:line="304" pos:column="51">setInt</name></name><argument_list pos:line="304" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="304" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="304" pos:column="61">currentSemID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="305" pos:column="41">ResultSet</name></type> <name pos:line="305" pos:column="51">rs</name> <init pos:line="305" pos:column="54">= <expr><call><name><name pos:line="305" pos:column="56">statement</name><op:operator pos:line="305" pos:column="65">.</op:operator><name pos:line="305" pos:column="66">executeQuery</name></name><argument_list pos:line="305" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="307" pos:column="41">while<condition pos:line="307" pos:column="46">(<expr><call><name><name pos:line="307" pos:column="47">rs</name><op:operator pos:line="307" pos:column="49">.</op:operator><name pos:line="307" pos:column="50">next</name></name><argument_list pos:line="307" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="307" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="308" pos:column="49">DBAnnotation</name><op:operator pos:line="308" pos:column="61">.</op:operator><name pos:line="308" pos:column="62">annoate</name></name><argument_list pos:line="308" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="308" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="308" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="308" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="308" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="309" pos:column="49">int</name></type> <name pos:line="309" pos:column="53">offerID</name> <init pos:line="309" pos:column="61">= <expr><call><name><name pos:line="309" pos:column="63">rs</name><op:operator pos:line="309" pos:column="65">.</op:operator><name pos:line="309" pos:column="66">getInt</name></name><argument_list pos:line="309" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="309" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="310" pos:column="49">CourseOffered</name></type> <name pos:line="310" pos:column="63">c</name> <init pos:line="310" pos:column="65">= <expr><op:operator pos:line="310" pos:column="67">new</op:operator> <call><name pos:line="310" pos:column="71">CourseOffered</name><argument_list pos:line="310" pos:column="84">(<argument><expr><name pos:line="310" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="311" pos:column="49">currentOffering</name><op:operator pos:line="311" pos:column="64">.</op:operator><name pos:line="311" pos:column="65">add</name></name><argument_list pos:line="311" pos:column="68">(<argument><expr><name pos:line="311" pos:column="69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="317" pos:column="25">catch<parameter_list pos:line="317" pos:column="30">(<param><decl><type><name pos:line="317" pos:column="31">SQLException</name></type> <name pos:line="317" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="317" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="318" pos:column="33">System</name><op:operator pos:line="318" pos:column="39">.</op:operator><name pos:line="318" pos:column="40">out</name><op:operator pos:line="318" pos:column="43">.</op:operator><name pos:line="318" pos:column="44">println</name></name><argument_list pos:line="318" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="52">"Error retrieving course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="319" pos:column="33">System</name><op:operator pos:line="319" pos:column="39">.</op:operator><name pos:line="319" pos:column="40">out</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">println</name></name><argument_list pos:line="319" pos:column="51">(<argument><expr><call><name><name pos:line="319" pos:column="52">e</name><op:operator pos:line="319" pos:column="53">.</op:operator><name pos:line="319" pos:column="54">getMessage</name></name><argument_list pos:line="319" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="320" pos:column="33">e</name><op:operator pos:line="320" pos:column="34">.</op:operator><name pos:line="320" pos:column="35">printStackTrace</name></name><argument_list pos:line="320" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="321" pos:column="27">catch <parameter_list pos:line="321" pos:column="33">(<param><decl><type><name><name pos:line="321" pos:column="34">Course</name><op:operator pos:line="321" pos:column="40">.</op:operator><name pos:line="321" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="321" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="322" pos:column="33">e</name><op:operator pos:line="322" pos:column="34">.</op:operator><name pos:line="322" pos:column="35">printStackTrace</name></name><argument_list pos:line="322" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="323" pos:column="27">catch <parameter_list pos:line="323" pos:column="33">(<param><decl><type><name pos:line="323" pos:column="34">CourseOfferingDoesNotExistException</name></type> <name pos:line="323" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="323" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="324" pos:column="33">e</name><op:operator pos:line="324" pos:column="34">.</op:operator><name pos:line="324" pos:column="35">printStackTrace</name></name><argument_list pos:line="324" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="328" pos:column="17">finally<block pos:line="328" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="331" pos:column="17">return <expr><name pos:line="331" pos:column="24">currentOffering</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="334" pos:column="9">/*
	 * Returns a HashMap of OfferID and CourseOffered for all the currently offered courses
	 */</comment>
	<function><type><specifier pos:line="337" pos:column="9">public</specifier> <specifier pos:line="337" pos:column="16">static</specifier> <name><name pos:line="337" pos:column="23">HashMap</name><argument_list pos:line="337" pos:column="30">&lt;<argument><name pos:line="337" pos:column="31">Integer</name></argument>,<argument><name pos:line="337" pos:column="39">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="337" pos:column="54">getAllOfferedIDAndCourseOffered</name><parameter_list pos:line="337" pos:column="85">()</parameter_list><block pos:line="337" pos:column="87">{
		<decl_stmt><decl><type><name><name pos:line="338" pos:column="17">HashMap</name><argument_list pos:line="338" pos:column="24">&lt;<argument><name pos:line="338" pos:column="25">Integer</name></argument>, <argument><name pos:line="338" pos:column="34">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="338" pos:column="49">offerdCourses</name> <init pos:line="338" pos:column="63">= <expr><op:operator pos:line="338" pos:column="65">new</op:operator> <call><name><name pos:line="338" pos:column="69">HashMap</name><argument_list pos:line="338" pos:column="76">&lt;<argument><name pos:line="338" pos:column="77">Integer</name></argument>, <argument><name pos:line="338" pos:column="86">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="338" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="339" pos:column="17">int</name></type> <name pos:line="339" pos:column="21">currentSemID</name> <init pos:line="339" pos:column="34">= <expr><call><name pos:line="339" pos:column="36">getCurrentSemesterID</name><argument_list pos:line="339" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="341" pos:column="17">try<block pos:line="341" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="342" pos:column="25">Connection</name></type> <name pos:line="342" pos:column="36">conn</name> <init pos:line="342" pos:column="41">= <expr><call><name><name pos:line="342" pos:column="43">Database</name><op:operator pos:line="342" pos:column="51">.</op:operator><name pos:line="342" pos:column="52">getConnection</name></name><argument_list pos:line="342" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="344" pos:column="25">try<block pos:line="344" pos:column="28">{
				<if pos:line="345" pos:column="33">if<condition pos:line="345" pos:column="35">(<expr><name pos:line="345" pos:column="36">conn</name> <op:operator pos:line="345" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="345" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="345" pos:column="49">{
					
					<comment type="line" pos:line="347" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="348" pos:column="41">String</name></type> <name pos:line="348" pos:column="48">SemesterSelect</name> <init pos:line="348" pos:column="63">= <expr><lit:literal type="string" pos:line="348" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="349" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="349" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="350" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="350" pos:column="59">" WHERE SemesterID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="351" pos:column="41">PreparedStatement</name></type> <name pos:line="351" pos:column="59">statement</name> <init pos:line="351" pos:column="69">= <expr><call><name><name pos:line="351" pos:column="71">conn</name><op:operator pos:line="351" pos:column="75">.</op:operator><name pos:line="351" pos:column="76">prepareStatement</name></name><argument_list pos:line="351" pos:column="92">(<argument><expr><name pos:line="351" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="352" pos:column="41">statement</name><op:operator pos:line="352" pos:column="50">.</op:operator><name pos:line="352" pos:column="51">setInt</name></name><argument_list pos:line="352" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="352" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="352" pos:column="61">currentSemID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="353" pos:column="41">ResultSet</name></type> <name pos:line="353" pos:column="51">rs</name> <init pos:line="353" pos:column="54">= <expr><call><name><name pos:line="353" pos:column="56">statement</name><op:operator pos:line="353" pos:column="65">.</op:operator><name pos:line="353" pos:column="66">executeQuery</name></name><argument_list pos:line="353" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="355" pos:column="41">while<condition pos:line="355" pos:column="46">(<expr><call><name><name pos:line="355" pos:column="47">rs</name><op:operator pos:line="355" pos:column="49">.</op:operator><name pos:line="355" pos:column="50">next</name></name><argument_list pos:line="355" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="355" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="356" pos:column="49">DBAnnotation</name><op:operator pos:line="356" pos:column="61">.</op:operator><name pos:line="356" pos:column="62">annoate</name></name><argument_list pos:line="356" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="356" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="356" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="356" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="357" pos:column="49">int</name></type> <name pos:line="357" pos:column="53">offerID</name> <init pos:line="357" pos:column="61">= <expr><call><name><name pos:line="357" pos:column="63">rs</name><op:operator pos:line="357" pos:column="65">.</op:operator><name pos:line="357" pos:column="66">getInt</name></name><argument_list pos:line="357" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="357" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="358" pos:column="49">CourseOffered</name></type> <name pos:line="358" pos:column="63">c</name> <init pos:line="358" pos:column="65">= <expr><op:operator pos:line="358" pos:column="67">new</op:operator> <call><name pos:line="358" pos:column="71">CourseOffered</name><argument_list pos:line="358" pos:column="84">(<argument><expr><name pos:line="358" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="359" pos:column="49">offerdCourses</name><op:operator pos:line="359" pos:column="62">.</op:operator><name pos:line="359" pos:column="63">put</name></name><argument_list pos:line="359" pos:column="66">(<argument><expr><name pos:line="359" pos:column="67">offerID</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="365" pos:column="25">catch<parameter_list pos:line="365" pos:column="30">(<param><decl><type><name pos:line="365" pos:column="31">SQLException</name></type> <name pos:line="365" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="365" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="366" pos:column="33">System</name><op:operator pos:line="366" pos:column="39">.</op:operator><name pos:line="366" pos:column="40">out</name><op:operator pos:line="366" pos:column="43">.</op:operator><name pos:line="366" pos:column="44">println</name></name><argument_list pos:line="366" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="52">"Error  course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="367" pos:column="33">System</name><op:operator pos:line="367" pos:column="39">.</op:operator><name pos:line="367" pos:column="40">out</name><op:operator pos:line="367" pos:column="43">.</op:operator><name pos:line="367" pos:column="44">println</name></name><argument_list pos:line="367" pos:column="51">(<argument><expr><call><name><name pos:line="367" pos:column="52">e</name><op:operator pos:line="367" pos:column="53">.</op:operator><name pos:line="367" pos:column="54">getMessage</name></name><argument_list pos:line="367" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="368" pos:column="33">e</name><op:operator pos:line="368" pos:column="34">.</op:operator><name pos:line="368" pos:column="35">printStackTrace</name></name><argument_list pos:line="368" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="369" pos:column="27">catch <parameter_list pos:line="369" pos:column="33">(<param><decl><type><name><name pos:line="369" pos:column="34">Course</name><op:operator pos:line="369" pos:column="40">.</op:operator><name pos:line="369" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="369" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="369" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="370" pos:column="33">e</name><op:operator pos:line="370" pos:column="34">.</op:operator><name pos:line="370" pos:column="35">printStackTrace</name></name><argument_list pos:line="370" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="371" pos:column="27">catch <parameter_list pos:line="371" pos:column="33">(<param><decl><type><name pos:line="371" pos:column="34">CourseOfferingDoesNotExistException</name></type> <name pos:line="371" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="371" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="372" pos:column="33">e</name><op:operator pos:line="372" pos:column="34">.</op:operator><name pos:line="372" pos:column="35">printStackTrace</name></name><argument_list pos:line="372" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="376" pos:column="17">finally<block pos:line="376" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="379" pos:column="17">return <expr><name pos:line="379" pos:column="24">offerdCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="382" pos:column="9">/*
	 * Returns all the current and previous offerings as a ArrayList of CourseOffered objects
	 */</comment>
	<function><type><specifier pos:line="385" pos:column="9">public</specifier> <specifier pos:line="385" pos:column="16">static</specifier> <name><name pos:line="385" pos:column="23">ArrayList</name><argument_list pos:line="385" pos:column="32">&lt;<argument><name pos:line="385" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="385" pos:column="48">getAllOfferedCourses</name><parameter_list pos:line="385" pos:column="68">()</parameter_list><block pos:line="385" pos:column="70">{
		<decl_stmt><decl><type><name><name pos:line="386" pos:column="17">ArrayList</name><argument_list pos:line="386" pos:column="26">&lt;<argument><name pos:line="386" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="386" pos:column="42">currentOffering</name> <init pos:line="386" pos:column="58">= <expr><op:operator pos:line="386" pos:column="60">new</op:operator> <call><name><name pos:line="386" pos:column="64">ArrayList</name><argument_list pos:line="386" pos:column="73">&lt;<argument><name pos:line="386" pos:column="74">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="386" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>		
		<try pos:line="387" pos:column="17">try<block pos:line="387" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="388" pos:column="25">Connection</name></type> <name pos:line="388" pos:column="36">conn</name> <init pos:line="388" pos:column="41">= <expr><call><name><name pos:line="388" pos:column="43">Database</name><op:operator pos:line="388" pos:column="51">.</op:operator><name pos:line="388" pos:column="52">getConnection</name></name><argument_list pos:line="388" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="390" pos:column="25">try<block pos:line="390" pos:column="28">{
				<if pos:line="391" pos:column="33">if<condition pos:line="391" pos:column="35">(<expr><name pos:line="391" pos:column="36">conn</name> <op:operator pos:line="391" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="391" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="391" pos:column="49">{
					
					<comment type="line" pos:line="393" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="394" pos:column="41">String</name></type> <name pos:line="394" pos:column="48">SemesterSelect</name> <init pos:line="394" pos:column="63">= <expr><lit:literal type="string" pos:line="394" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="395" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="395" pos:column="59">" FROM coursesoffered"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="396" pos:column="41">PreparedStatement</name></type> <name pos:line="396" pos:column="59">statement</name> <init pos:line="396" pos:column="69">= <expr><call><name><name pos:line="396" pos:column="71">conn</name><op:operator pos:line="396" pos:column="75">.</op:operator><name pos:line="396" pos:column="76">prepareStatement</name></name><argument_list pos:line="396" pos:column="92">(<argument><expr><name pos:line="396" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="397" pos:column="41">ResultSet</name></type> <name pos:line="397" pos:column="51">rs</name> <init pos:line="397" pos:column="54">= <expr><call><name><name pos:line="397" pos:column="56">statement</name><op:operator pos:line="397" pos:column="65">.</op:operator><name pos:line="397" pos:column="66">executeQuery</name></name><argument_list pos:line="397" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="399" pos:column="41">while<condition pos:line="399" pos:column="46">(<expr><call><name><name pos:line="399" pos:column="47">rs</name><op:operator pos:line="399" pos:column="49">.</op:operator><name pos:line="399" pos:column="50">next</name></name><argument_list pos:line="399" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="399" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="400" pos:column="49">DBAnnotation</name><op:operator pos:line="400" pos:column="61">.</op:operator><name pos:line="400" pos:column="62">annoate</name></name><argument_list pos:line="400" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="400" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="400" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="400" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="400" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="401" pos:column="49">int</name></type> <name pos:line="401" pos:column="53">offerID</name> <init pos:line="401" pos:column="61">= <expr><call><name><name pos:line="401" pos:column="63">rs</name><op:operator pos:line="401" pos:column="65">.</op:operator><name pos:line="401" pos:column="66">getInt</name></name><argument_list pos:line="401" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="401" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="402" pos:column="49">CourseOffered</name></type> <name pos:line="402" pos:column="63">c</name> <init pos:line="402" pos:column="65">= <expr><op:operator pos:line="402" pos:column="67">new</op:operator> <call><name pos:line="402" pos:column="71">CourseOffered</name><argument_list pos:line="402" pos:column="84">(<argument><expr><name pos:line="402" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="403" pos:column="49">currentOffering</name><op:operator pos:line="403" pos:column="64">.</op:operator><name pos:line="403" pos:column="65">add</name></name><argument_list pos:line="403" pos:column="68">(<argument><expr><name pos:line="403" pos:column="69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="409" pos:column="25">catch<parameter_list pos:line="409" pos:column="30">(<param><decl><type><name pos:line="409" pos:column="31">SQLException</name></type> <name pos:line="409" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="409" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="410" pos:column="33">System</name><op:operator pos:line="410" pos:column="39">.</op:operator><name pos:line="410" pos:column="40">out</name><op:operator pos:line="410" pos:column="43">.</op:operator><name pos:line="410" pos:column="44">println</name></name><argument_list pos:line="410" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="410" pos:column="52">"Error  course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="411" pos:column="33">System</name><op:operator pos:line="411" pos:column="39">.</op:operator><name pos:line="411" pos:column="40">out</name><op:operator pos:line="411" pos:column="43">.</op:operator><name pos:line="411" pos:column="44">println</name></name><argument_list pos:line="411" pos:column="51">(<argument><expr><call><name><name pos:line="411" pos:column="52">e</name><op:operator pos:line="411" pos:column="53">.</op:operator><name pos:line="411" pos:column="54">getMessage</name></name><argument_list pos:line="411" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="412" pos:column="33">e</name><op:operator pos:line="412" pos:column="34">.</op:operator><name pos:line="412" pos:column="35">printStackTrace</name></name><argument_list pos:line="412" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="413" pos:column="27">catch <parameter_list pos:line="413" pos:column="33">(<param><decl><type><name><name pos:line="413" pos:column="34">Course</name><op:operator pos:line="413" pos:column="40">.</op:operator><name pos:line="413" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="413" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="413" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="414" pos:column="33">e</name><op:operator pos:line="414" pos:column="34">.</op:operator><name pos:line="414" pos:column="35">printStackTrace</name></name><argument_list pos:line="414" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="415" pos:column="27">catch <parameter_list pos:line="415" pos:column="33">(<param><decl><type><name pos:line="415" pos:column="34">CourseOfferingDoesNotExistException</name></type> <name pos:line="415" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="415" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="416" pos:column="33">e</name><op:operator pos:line="416" pos:column="34">.</op:operator><name pos:line="416" pos:column="35">printStackTrace</name></name><argument_list pos:line="416" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="420" pos:column="17">finally<block pos:line="420" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="423" pos:column="17">return <expr><name pos:line="423" pos:column="24">currentOffering</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="426" pos:column="9">/*
	 * Add the course offering as a current offering to the database for the specified course, professor and capacity combo
	 * The functions tries to see if the course can be scheduled in any classroom or not and schedules it if possible
	 * The function also creates a default information file for the course offering  and adds the file to the course folder
	 * Class the function in CourseExam to create a table to store all the course exam and test details
	 * Throws a CourseOffering already exists exception if the offering already exists in the database for the current semester
	 * Throws a COurseOffering not schedulable exception is the course offering cannot be scheduled in any classroom
	 */</comment>
	<function><type><specifier pos:line="434" pos:column="9">public</specifier> <specifier pos:line="434" pos:column="16">static</specifier> <name pos:line="434" pos:column="23">boolean</name></type> <name pos:line="434" pos:column="31">addCourseOfferingToDatabase</name><parameter_list pos:line="434" pos:column="58">(<param><decl><type><specifier pos:line="434" pos:column="59">final</specifier> <name pos:line="434" pos:column="65">Course</name></type> <name pos:line="434" pos:column="72">course</name></decl></param>,  <param><decl><type><specifier pos:line="434" pos:column="81">final</specifier> <name pos:line="434" pos:column="87">Professor</name></type> <name pos:line="434" pos:column="97">professor</name></decl></param>, <param><decl><type><specifier pos:line="434" pos:column="108">final</specifier> <name pos:line="434" pos:column="114">int</name></type> <name pos:line="434" pos:column="118">capacity</name></decl></param>)</parameter_list> <throws pos:line="434" pos:column="128">throws <argument><expr><name pos:line="434" pos:column="135">CourseOfferingAlreadyExistsException</name></expr></argument>, <argument><expr><name pos:line="434" pos:column="173">CourseOfferingNotSchedulable</name></expr></argument></throws><block pos:line="434" pos:column="201">{
		<if pos:line="435" pos:column="17">if<condition pos:line="435" pos:column="19">(<expr><name pos:line="435" pos:column="20">course</name> <op:operator pos:line="435" pos:column="27">==</op:operator> <lit:literal type="null" pos:line="435" pos:column="30">null</lit:literal> <op:operator pos:line="435" pos:column="35">||</op:operator> <name pos:line="435" pos:column="38">professor</name> <op:operator pos:line="435" pos:column="48">==</op:operator> <lit:literal type="null" pos:line="435" pos:column="51">null</lit:literal> <op:operator pos:line="435" pos:column="56">||</op:operator> <name pos:line="435" pos:column="59">capacity</name> <op:operator pos:line="435" pos:column="68">&lt;=</op:operator><lit:literal type="number" pos:line="435" pos:column="70">0</lit:literal></expr>)</condition><then pos:line="435" pos:column="72">
			<return pos:line="436" pos:column="25">return <expr><lit:literal type="boolean" pos:line="436" pos:column="32">false</lit:literal></expr>;</return></then></if>
		
		
		<decl_stmt><decl><type><name pos:line="439" pos:column="17">int</name></type> <name pos:line="439" pos:column="21">profID</name> <init pos:line="439" pos:column="28">= <expr><call><name><name pos:line="439" pos:column="30">professor</name><op:operator pos:line="439" pos:column="39">.</op:operator><name pos:line="439" pos:column="40">getUIN</name></name><argument_list pos:line="439" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="440" pos:column="17">int</name></type> <name pos:line="440" pos:column="21">courseID</name> <init pos:line="440" pos:column="30">= <expr><call><name><name pos:line="440" pos:column="32">course</name><op:operator pos:line="440" pos:column="38">.</op:operator><name pos:line="440" pos:column="39">getCourseID</name></name><argument_list pos:line="440" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="441" pos:column="17">int</name></type> <name pos:line="441" pos:column="21">totalCap</name> <init pos:line="441" pos:column="30">= <expr><name pos:line="441" pos:column="32">capacity</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="442" pos:column="17">int</name></type> <name pos:line="442" pos:column="21">minCap</name> <init pos:line="442" pos:column="28">= <expr><lit:literal type="number" pos:line="442" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="443" pos:column="17">boolean</name></type> <name pos:line="443" pos:column="25">addFlag</name> <init pos:line="443" pos:column="33">= <expr><lit:literal type="boolean" pos:line="443" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="445" pos:column="17">//Check if the same professor is teaching the same course in the current semester</comment>
		<comment type="line" pos:line="446" pos:column="17">//if yes then add the course offering in the table</comment>
		<comment type="line" pos:line="447" pos:column="17">//then retrieve the same course in a result set</comment>
		<try pos:line="448" pos:column="17">try<block pos:line="448" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="449" pos:column="25">Connection</name></type> <name pos:line="449" pos:column="36">conn</name> <init pos:line="449" pos:column="41">= <expr><call><name><name pos:line="449" pos:column="43">Database</name><op:operator pos:line="449" pos:column="51">.</op:operator><name pos:line="449" pos:column="52">getConnection</name></name><argument_list pos:line="449" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="451" pos:column="25">try<block pos:line="451" pos:column="28">{
				<if pos:line="452" pos:column="33">if<condition pos:line="452" pos:column="35">(<expr><name pos:line="452" pos:column="36">conn</name> <op:operator pos:line="452" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="452" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="452" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="454" pos:column="41">int</name></type> <name pos:line="454" pos:column="45">semesterID</name> <init pos:line="454" pos:column="56">= <expr><call><name pos:line="454" pos:column="58">getCurrentSemesterID</name><argument_list pos:line="454" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="455" pos:column="41">String</name></type> <name pos:line="455" pos:column="48">SQLSelect</name><init pos:line="455" pos:column="57">= <expr><lit:literal type="string" pos:line="455" pos:column="59">"Select OfferID"</lit:literal>
							<op:operator pos:line="456" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="456" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="457" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="457" pos:column="59">" WHERE courseID= ? and TaughtBy= ? and SemesterID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="458" pos:column="41">PreparedStatement</name></type> <name pos:line="458" pos:column="59">statement</name> <init pos:line="458" pos:column="69">= <expr><call><name><name pos:line="458" pos:column="71">conn</name><op:operator pos:line="458" pos:column="75">.</op:operator><name pos:line="458" pos:column="76">prepareStatement</name></name><argument_list pos:line="458" pos:column="92">(<argument><expr><name pos:line="458" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="459" pos:column="41">statement</name><op:operator pos:line="459" pos:column="50">.</op:operator><name pos:line="459" pos:column="51">setInt</name></name><argument_list pos:line="459" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="459" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="459" pos:column="61">courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="460" pos:column="41">statement</name><op:operator pos:line="460" pos:column="50">.</op:operator><name pos:line="460" pos:column="51">setInt</name></name><argument_list pos:line="460" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="460" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="460" pos:column="61">profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="461" pos:column="41">statement</name><op:operator pos:line="461" pos:column="50">.</op:operator><name pos:line="461" pos:column="51">setInt</name></name><argument_list pos:line="461" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="461" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name pos:line="461" pos:column="61">semesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="462" pos:column="41">ResultSet</name></type> <name pos:line="462" pos:column="51">rs</name> <init pos:line="462" pos:column="54">=  <expr><call><name><name pos:line="462" pos:column="57">statement</name><op:operator pos:line="462" pos:column="66">.</op:operator><name pos:line="462" pos:column="67">executeQuery</name></name><argument_list pos:line="462" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="464" pos:column="41">if<condition pos:line="464" pos:column="43">(<expr><call><name><name pos:line="464" pos:column="44">rs</name><op:operator pos:line="464" pos:column="46">.</op:operator><name pos:line="464" pos:column="47">first</name></name><argument_list pos:line="464" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="464" pos:column="55">{
						<comment type="block" pos:line="465" pos:column="49">/*
						 * course offerings with the same courses exist
						 */</comment>
						<throw pos:line="468" pos:column="49">throw <expr><op:operator pos:line="468" pos:column="55">new</op:operator> <call><name pos:line="468" pos:column="59">CourseOfferingAlreadyExistsException</name><argument_list pos:line="468" pos:column="95">()</argument_list></call></expr>;</throw>
					}</block></then>
					
					<else pos:line="471" pos:column="41">else<block pos:line="471" pos:column="45">{
						<comment type="block" pos:line="472" pos:column="49">/*
						 * Check if the course offering is schedulable
						 */</comment>
						<if pos:line="475" pos:column="49">if<condition pos:line="475" pos:column="51">(<expr><op:operator pos:line="475" pos:column="52">!</op:operator><call><name><name pos:line="475" pos:column="53">CourseSchedule</name><op:operator pos:line="475" pos:column="67">.</op:operator><name pos:line="475" pos:column="68">isAnotherCourseSchedulable</name></name><argument_list pos:line="475" pos:column="94">(<argument><expr><name pos:line="475" pos:column="95">capacity</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="475" pos:column="105">
							<throw pos:line="476" pos:column="57">throw <expr><op:operator pos:line="476" pos:column="63">new</op:operator> <call><name pos:line="476" pos:column="67">CourseOfferingNotSchedulable</name><argument_list pos:line="476" pos:column="95">()</argument_list></call></expr>;</throw></then></if>
						
						<comment type="block" pos:line="478" pos:column="49">/*
						 * Add the object data to the courseOffered table
						 */</comment>
						
						<comment type="block" pos:line="482" pos:column="49">/*
						 * Annotating the insert statement here
						 */</comment>
						
						<expr_stmt><expr><call><name><name pos:line="486" pos:column="49">DBAnnotation</name><op:operator pos:line="486" pos:column="61">.</op:operator><name pos:line="486" pos:column="62">annoate</name></name><argument_list pos:line="486" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="486" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="82">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="100">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="486" pos:column="112">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="487" pos:column="49">DBAnnotation</name><op:operator pos:line="487" pos:column="61">.</op:operator><name pos:line="487" pos:column="62">annoate</name></name><argument_list pos:line="487" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="487" pos:column="70">"semesterID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="487" pos:column="84">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="487" pos:column="102">"SemesterID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="487" pos:column="116">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="488" pos:column="49">DBAnnotation</name><op:operator pos:line="488" pos:column="61">.</op:operator><name pos:line="488" pos:column="62">annoate</name></name><argument_list pos:line="488" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="488" pos:column="70">"totalCap"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="488" pos:column="82">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="488" pos:column="100">"TotalCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="488" pos:column="117">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="489" pos:column="49">DBAnnotation</name><op:operator pos:line="489" pos:column="61">.</op:operator><name pos:line="489" pos:column="62">annoate</name></name><argument_list pos:line="489" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="489" pos:column="70">"minCap"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="80">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="98">"SeatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="489" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="490" pos:column="49">DBAnnotation</name><op:operator pos:line="490" pos:column="61">.</op:operator><name pos:line="490" pos:column="62">annoate</name></name><argument_list pos:line="490" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="490" pos:column="70">"profID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="490" pos:column="80">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="490" pos:column="98">"TaughtBy"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="490" pos:column="110">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name pos:line="492" pos:column="49">String</name></type> <name pos:line="492" pos:column="56">SQLInsert</name> <init pos:line="492" pos:column="66">= <expr><lit:literal type="string" pos:line="492" pos:column="68">"Insert into coursesoffered"</lit:literal>
								<op:operator pos:line="493" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="493" pos:column="67">"(CourseID,SemesterID,TotalCapacity,SeatsFilled,TaughtBy)"</lit:literal>
								<op:operator pos:line="494" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="494" pos:column="67">"Values(?,?,?,?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name pos:line="495" pos:column="49">statement</name> <op:operator pos:line="495" pos:column="59">=</op:operator> <call><name><name pos:line="495" pos:column="61">conn</name><op:operator pos:line="495" pos:column="65">.</op:operator><name pos:line="495" pos:column="66">prepareStatement</name></name><argument_list pos:line="495" pos:column="82">(<argument><expr><name pos:line="495" pos:column="83">SQLInsert</name></expr></argument>, <argument><expr><name><name pos:line="495" pos:column="94">Statement</name><op:operator pos:line="495" pos:column="103">.</op:operator><name pos:line="495" pos:column="104">RETURN_GENERATED_KEYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="496" pos:column="49">statement</name><op:operator pos:line="496" pos:column="58">.</op:operator><name pos:line="496" pos:column="59">setInt</name></name><argument_list pos:line="496" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="496" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="496" pos:column="69">courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="497" pos:column="49">statement</name><op:operator pos:line="497" pos:column="58">.</op:operator><name pos:line="497" pos:column="59">setInt</name></name><argument_list pos:line="497" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="497" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="497" pos:column="69">semesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="498" pos:column="49">statement</name><op:operator pos:line="498" pos:column="58">.</op:operator><name pos:line="498" pos:column="59">setInt</name></name><argument_list pos:line="498" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="498" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><name pos:line="498" pos:column="69">totalCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="499" pos:column="49">statement</name><op:operator pos:line="499" pos:column="58">.</op:operator><name pos:line="499" pos:column="59">setInt</name></name><argument_list pos:line="499" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="499" pos:column="66">4</lit:literal></expr></argument>, <argument><expr><name pos:line="499" pos:column="69">minCap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="500" pos:column="49">statement</name><op:operator pos:line="500" pos:column="58">.</op:operator><name pos:line="500" pos:column="59">setInt</name></name><argument_list pos:line="500" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="500" pos:column="66">5</lit:literal></expr></argument>, <argument><expr><name pos:line="500" pos:column="69">profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="501" pos:column="49">statement</name><op:operator pos:line="501" pos:column="58">.</op:operator><name pos:line="501" pos:column="59">executeUpdate</name></name><argument_list pos:line="501" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="502" pos:column="49">ResultSet</name></type> <name pos:line="502" pos:column="59">generatedSet</name> <init pos:line="502" pos:column="72">= <expr><call><name><name pos:line="502" pos:column="74">statement</name><op:operator pos:line="502" pos:column="83">.</op:operator><name pos:line="502" pos:column="84">getGeneratedKeys</name></name><argument_list pos:line="502" pos:column="100">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="504" pos:column="49">int</name></type> <name pos:line="504" pos:column="53">generatedID</name> <init pos:line="504" pos:column="65">= <expr><op:operator pos:line="504" pos:column="67">-</op:operator><lit:literal type="number" pos:line="504" pos:column="68">1</lit:literal></expr></init></decl>;</decl_stmt>
						
						<if pos:line="506" pos:column="49">if<condition pos:line="506" pos:column="51">(<expr><call><name><name pos:line="506" pos:column="52">generatedSet</name><op:operator pos:line="506" pos:column="64">.</op:operator><name pos:line="506" pos:column="65">first</name></name><argument_list pos:line="506" pos:column="70">()</argument_list></call></expr>)</condition><then pos:line="506" pos:column="73">
							<expr_stmt><expr><name pos:line="507" pos:column="57">generatedID</name> <op:operator pos:line="507" pos:column="69">=</op:operator> <call><name><name pos:line="507" pos:column="71">generatedSet</name><op:operator pos:line="507" pos:column="83">.</op:operator><name pos:line="507" pos:column="84">getInt</name></name><argument_list pos:line="507" pos:column="90">(<argument><expr><lit:literal type="number" pos:line="507" pos:column="91">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
						<else pos:line="508" pos:column="49">else
							<return pos:line="509" pos:column="57">return <expr><lit:literal type="boolean" pos:line="509" pos:column="64">false</lit:literal></expr>;</return></else></if>
						<comment type="block" pos:line="510" pos:column="49">/*
						 * flag to see if the table for exams was created
						 */</comment>
						<decl_stmt><decl><type><name pos:line="513" pos:column="49">boolean</name></type> <name pos:line="513" pos:column="57">tableFlag</name> <init pos:line="513" pos:column="67">= <expr><call><name><name pos:line="513" pos:column="69">CourseExams</name><op:operator pos:line="513" pos:column="80">.</op:operator><name pos:line="513" pos:column="81">createCourseExamMarksTable</name></name><argument_list pos:line="513" pos:column="107">(<argument><expr><call><name><name pos:line="513" pos:column="108">course</name><op:operator pos:line="513" pos:column="114">.</op:operator><name pos:line="513" pos:column="115">getCourseName</name></name><argument_list pos:line="513" pos:column="128">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="513" pos:column="132">generatedID</name></expr></argument>, <argument><expr><call><name pos:line="513" pos:column="145">getCurrentSemesterID</name><argument_list pos:line="513" pos:column="165">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block" pos:line="514" pos:column="49">/*
						 * flag to see if the course was successfully scheduled
						 */</comment>
						<decl_stmt><decl><type><name pos:line="517" pos:column="49">boolean</name></type> <name pos:line="517" pos:column="57">flag</name> <init pos:line="517" pos:column="62">= <expr><call><name><name pos:line="517" pos:column="64">CourseSchedule</name><op:operator pos:line="517" pos:column="78">.</op:operator><name pos:line="517" pos:column="79">scheduleCourseUsingID</name></name><argument_list pos:line="517" pos:column="100">(<argument><expr><name pos:line="517" pos:column="101">generatedID</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="114">totalCap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="block" pos:line="518" pos:column="49">/*
						 * flag to see if the default file with course details was created to be added to this course
						 */</comment>
						<decl_stmt><decl><type><name pos:line="521" pos:column="49">boolean</name></type> <name pos:line="521" pos:column="57">fileFlag</name> <init pos:line="521" pos:column="66">= <expr><call><name pos:line="521" pos:column="68">makeDefaultCourseFile</name><argument_list pos:line="521" pos:column="89">(<argument><expr><name pos:line="521" pos:column="90">generatedID</name></expr></argument>, <argument><expr><call><name><name pos:line="521" pos:column="103">course</name><op:operator pos:line="521" pos:column="109">.</op:operator><name pos:line="521" pos:column="110">getCourseName</name></name><argument_list pos:line="521" pos:column="123">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="521" pos:column="127">professor</name><op:operator pos:line="521" pos:column="136">.</op:operator><name pos:line="521" pos:column="137">getName</name></name><argument_list pos:line="521" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<comment type="block" pos:line="523" pos:column="49">/*
						 * Checks if the file was created and adds it to the database
						 */</comment>
						
												
						<if pos:line="528" pos:column="49">if<condition pos:line="528" pos:column="51">(<expr><name pos:line="528" pos:column="52">fileFlag</name></expr>)</condition><then><block pos:line="528" pos:column="61">{
							<comment type="line" pos:line="529" pos:column="57">//String currentPath = System.getProperty("user.dir");</comment>
							<comment type="line" pos:line="530" pos:column="57">//String fileDir = currentPath+"/Files/"+course.getCourseName()+"-"+generatedID;</comment>
							<decl_stmt><decl><type><name pos:line="531" pos:column="57">String</name></type> <name pos:line="531" pos:column="64">fileDir</name> <init pos:line="531" pos:column="72">= <expr><lit:literal type="string" pos:line="531" pos:column="74">"/Files/"</lit:literal><op:operator pos:line="531" pos:column="83">+</op:operator><call><name><name pos:line="531" pos:column="84">course</name><op:operator pos:line="531" pos:column="90">.</op:operator><name pos:line="531" pos:column="91">getCourseName</name></name><argument_list pos:line="531" pos:column="104">()</argument_list></call><op:operator pos:line="531" pos:column="106">+</op:operator><lit:literal type="string" pos:line="531" pos:column="107">"-"</lit:literal><op:operator pos:line="531" pos:column="110">+</op:operator><name pos:line="531" pos:column="111">generatedID</name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="532" pos:column="57">String</name></type> <name pos:line="532" pos:column="64">fileName</name> <init pos:line="532" pos:column="73">= <expr><call><name><name pos:line="532" pos:column="75">course</name><op:operator pos:line="532" pos:column="81">.</op:operator><name pos:line="532" pos:column="82">getCourseName</name></name><argument_list pos:line="532" pos:column="95">()</argument_list></call><op:operator pos:line="532" pos:column="97">+</op:operator><name pos:line="532" pos:column="98">generatedID</name><op:operator pos:line="532" pos:column="109">+</op:operator><lit:literal type="string" pos:line="532" pos:column="110">"-details.txt"</lit:literal></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name pos:line="533" pos:column="57">fileFlag</name> <op:operator pos:line="533" pos:column="66">=</op:operator> <call><name><name pos:line="533" pos:column="68">File</name><op:operator pos:line="533" pos:column="72">.</op:operator><name pos:line="533" pos:column="73">addFileToDB</name></name><argument_list pos:line="533" pos:column="84">(<argument><expr><name pos:line="533" pos:column="85">fileName</name></expr></argument>, <argument><expr><name pos:line="533" pos:column="95">fileDir</name></expr></argument>, <argument><expr><name pos:line="533" pos:column="104">generatedID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						
						
						
						<comment type="block" pos:line="538" pos:column="49">/*
						 * If the scheduling, file creation, exam table creation and the file addition to database is successful
						 * commit the whole transaction to the database
						 */</comment>
						<if pos:line="542" pos:column="49">if<condition pos:line="542" pos:column="51">(<expr><name pos:line="542" pos:column="52">flag</name> <op:operator pos:line="542" pos:column="57">&amp;&amp;</op:operator> <name pos:line="542" pos:column="60">tableFlag</name> <op:operator pos:line="542" pos:column="70">&amp;&amp;</op:operator> <name pos:line="542" pos:column="73">fileFlag</name></expr>)</condition><then><block pos:line="542" pos:column="82">{		
							<expr_stmt><expr><call><name><name pos:line="543" pos:column="57">Database</name><op:operator pos:line="543" pos:column="65">.</op:operator><name pos:line="543" pos:column="66">commitTransaction</name></name><argument_list pos:line="543" pos:column="83">(<argument><expr><name pos:line="543" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="544" pos:column="57">System</name><op:operator pos:line="544" pos:column="63">.</op:operator><name pos:line="544" pos:column="64">out</name><op:operator pos:line="544" pos:column="67">.</op:operator><name pos:line="544" pos:column="68">println</name></name><argument_list pos:line="544" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="544" pos:column="76">"Added file------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="545" pos:column="57">addFlag</name> <op:operator pos:line="545" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="545" pos:column="67">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>
																				
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="552" pos:column="25">catch<parameter_list pos:line="552" pos:column="30">(<param><decl><type><name pos:line="552" pos:column="31">SQLException</name></type> <name pos:line="552" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="552" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="553" pos:column="33">System</name><op:operator pos:line="553" pos:column="39">.</op:operator><name pos:line="553" pos:column="40">out</name><op:operator pos:line="553" pos:column="43">.</op:operator><name pos:line="553" pos:column="44">println</name></name><argument_list pos:line="553" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="553" pos:column="52">"Error addind course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="554" pos:column="33">System</name><op:operator pos:line="554" pos:column="39">.</op:operator><name pos:line="554" pos:column="40">out</name><op:operator pos:line="554" pos:column="43">.</op:operator><name pos:line="554" pos:column="44">println</name></name><argument_list pos:line="554" pos:column="51">(<argument><expr><call><name><name pos:line="554" pos:column="52">e</name><op:operator pos:line="554" pos:column="53">.</op:operator><name pos:line="554" pos:column="54">getMessage</name></name><argument_list pos:line="554" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="555" pos:column="33">e</name><op:operator pos:line="555" pos:column="34">.</op:operator><name pos:line="555" pos:column="35">printStackTrace</name></name><argument_list pos:line="555" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="560" pos:column="17">finally<block pos:line="560" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="563" pos:column="17">return <expr><name pos:line="563" pos:column="24">addFlag</name></expr>;</return>
		
	}</block></function>

	<comment type="block" pos:line="567" pos:column="9">/*
	 * Function to update the professor teaching the course currently
	 */</comment>
	<function><type><specifier pos:line="570" pos:column="9">public</specifier> <name pos:line="570" pos:column="16">boolean</name></type> <name pos:line="570" pos:column="24">updateCourseOffering</name><parameter_list pos:line="570" pos:column="44">(<param><decl><type><name pos:line="570" pos:column="45">Professor</name></type> <name pos:line="570" pos:column="55">professor</name></decl></param>)</parameter_list> <throws pos:line="570" pos:column="66">throws <argument><expr><name pos:line="570" pos:column="73">CourseOfferingDoesNotExistException</name></expr></argument></throws><block pos:line="570" pos:column="108">{		
		<if pos:line="571" pos:column="17">if<condition pos:line="571" pos:column="19">(<expr><op:operator pos:line="571" pos:column="20">!</op:operator><call><name pos:line="571" pos:column="21">checkIfCurrent</name><argument_list pos:line="571" pos:column="35">()</argument_list></call></expr>)</condition><then><block pos:line="571" pos:column="38">{
			<return pos:line="572" pos:column="25">return <expr><lit:literal type="boolean" pos:line="572" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="575" pos:column="17">boolean</name></type> <name pos:line="575" pos:column="25">isUpdated</name> <init pos:line="575" pos:column="35">= <expr><lit:literal type="boolean" pos:line="575" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>	
		<try pos:line="576" pos:column="17">try<block pos:line="576" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="577" pos:column="25">Connection</name></type> <name pos:line="577" pos:column="36">conn</name> <init pos:line="577" pos:column="41">= <expr><call><name><name pos:line="577" pos:column="43">Database</name><op:operator pos:line="577" pos:column="51">.</op:operator><name pos:line="577" pos:column="52">getConnection</name></name><argument_list pos:line="577" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="579" pos:column="25">try<block pos:line="579" pos:column="28">{
				<if pos:line="580" pos:column="33">if<condition pos:line="580" pos:column="35">(<expr><name pos:line="580" pos:column="36">conn</name> <op:operator pos:line="580" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="580" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="580" pos:column="49">{
					
					<expr_stmt><expr><call><name><name pos:line="582" pos:column="41">DBAnnotation</name><op:operator pos:line="582" pos:column="53">.</op:operator><name pos:line="582" pos:column="54">annoate</name></name><argument_list pos:line="582" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="582" pos:column="62">"profID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="582" pos:column="72">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="582" pos:column="90">"TaughtBy"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="582" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="583" pos:column="41">DBAnnotation</name><op:operator pos:line="583" pos:column="53">.</op:operator><name pos:line="583" pos:column="54">annoate</name></name><argument_list pos:line="583" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="583" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="583" pos:column="73">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="583" pos:column="91">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="583" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="584" pos:column="41">String</name></type> <name pos:line="584" pos:column="48">SQLUpdate</name> <init pos:line="584" pos:column="58">= <expr><lit:literal type="string" pos:line="584" pos:column="60">"UPDATE coursesoffered "</lit:literal>
							<op:operator pos:line="585" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="585" pos:column="59">"SET Taughtby= ? "</lit:literal>
							<op:operator pos:line="586" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="586" pos:column="59">"WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="587" pos:column="41">PreparedStatement</name></type> <name pos:line="587" pos:column="59">statement</name> <init pos:line="587" pos:column="69">= <expr><call><name><name pos:line="587" pos:column="71">conn</name><op:operator pos:line="587" pos:column="75">.</op:operator><name pos:line="587" pos:column="76">prepareStatement</name></name><argument_list pos:line="587" pos:column="92">(<argument><expr><name pos:line="587" pos:column="93">SQLUpdate</name></expr></argument>, <argument><expr><name><name pos:line="587" pos:column="104">ResultSet</name><op:operator pos:line="587" pos:column="113">.</op:operator><name pos:line="587" pos:column="114">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="588" pos:column="41">int</name></type> <name pos:line="588" pos:column="45">profID</name> <init pos:line="588" pos:column="52">= <expr><call><name><name pos:line="588" pos:column="54">professor</name><op:operator pos:line="588" pos:column="63">.</op:operator><name pos:line="588" pos:column="64">getUIN</name></name><argument_list pos:line="588" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="589" pos:column="41">int</name></type> <name pos:line="589" pos:column="45">offerID</name> <init pos:line="589" pos:column="53">= <expr><call><name><name pos:line="589" pos:column="55">this</name><op:operator pos:line="589" pos:column="59">.</op:operator><name pos:line="589" pos:column="60">getOfferID</name></name><argument_list pos:line="589" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="590" pos:column="41">statement</name><op:operator pos:line="590" pos:column="50">.</op:operator><name pos:line="590" pos:column="51">setInt</name></name><argument_list pos:line="590" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="590" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="590" pos:column="61">profID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="591" pos:column="41">statement</name><op:operator pos:line="591" pos:column="50">.</op:operator><name pos:line="591" pos:column="51">setInt</name></name><argument_list pos:line="591" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="591" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="591" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="592" pos:column="41">statement</name><op:operator pos:line="592" pos:column="50">.</op:operator><name pos:line="592" pos:column="51">executeUpdate</name></name><argument_list pos:line="592" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="593" pos:column="41">Database</name><op:operator pos:line="593" pos:column="49">.</op:operator><name pos:line="593" pos:column="50">commitTransaction</name></name><argument_list pos:line="593" pos:column="67">(<argument><expr><name pos:line="593" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="594" pos:column="41">isUpdated</name> <op:operator pos:line="594" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="594" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch pos:line="598" pos:column="25">catch<parameter_list pos:line="598" pos:column="30">(<param><decl><type><name pos:line="598" pos:column="31">SQLException</name></type> <name pos:line="598" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="598" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="599" pos:column="33">System</name><op:operator pos:line="599" pos:column="39">.</op:operator><name pos:line="599" pos:column="40">out</name><op:operator pos:line="599" pos:column="43">.</op:operator><name pos:line="599" pos:column="44">println</name></name><argument_list pos:line="599" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="599" pos:column="52">"Error updating course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="600" pos:column="33">e</name><op:operator pos:line="600" pos:column="34">.</op:operator><name pos:line="600" pos:column="35">printStackTrace</name></name><argument_list pos:line="600" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="605" pos:column="17">finally<block pos:line="605" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="608" pos:column="17">return <expr><name pos:line="608" pos:column="24">isUpdated</name></expr>;</return>
		
	}</block></function>

	<comment type="block" pos:line="612" pos:column="9">/*
	 * Makes a folder in the Files folder (present in the course folder) for storing all the course related files
	 */</comment>
	<function><type><specifier pos:line="615" pos:column="9">private</specifier> <specifier pos:line="615" pos:column="17">static</specifier> <name pos:line="615" pos:column="24">boolean</name></type> <name pos:line="615" pos:column="32">makeDefaultCourseFile</name><parameter_list pos:line="615" pos:column="53">(<param><decl><type><name pos:line="615" pos:column="54">int</name></type> <name pos:line="615" pos:column="58">offerID</name></decl></param>, <param><decl><type><name pos:line="615" pos:column="67">String</name></type> <name pos:line="615" pos:column="74">courseName</name></decl></param>, <param><decl><type><name pos:line="615" pos:column="86">String</name></type> <name pos:line="615" pos:column="93">Professor</name></decl></param>)</parameter_list><block pos:line="615" pos:column="103">{
		<try pos:line="616" pos:column="17">try<block pos:line="616" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="617" pos:column="25">String</name></type> <name pos:line="617" pos:column="32">currentPath</name> <init pos:line="617" pos:column="44">= <expr><call><name><name pos:line="617" pos:column="46">System</name><op:operator pos:line="617" pos:column="52">.</op:operator><name pos:line="617" pos:column="53">getProperty</name></name><argument_list pos:line="617" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="617" pos:column="65">"user.dir"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="618" pos:column="25">String</name></type> <name pos:line="618" pos:column="32">fileDir</name> <init pos:line="618" pos:column="40">= <expr><name pos:line="618" pos:column="42">currentPath</name><op:operator pos:line="618" pos:column="53">+</op:operator><lit:literal type="string" pos:line="618" pos:column="54">"/Files/"</lit:literal><op:operator pos:line="618" pos:column="63">+</op:operator><name pos:line="618" pos:column="64">courseName</name><op:operator pos:line="618" pos:column="74">+</op:operator><lit:literal type="string" pos:line="618" pos:column="75">"-"</lit:literal><op:operator pos:line="618" pos:column="78">+</op:operator><name pos:line="618" pos:column="79">offerID</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="619" pos:column="25">boolean</name></type> <name pos:line="619" pos:column="33">dir</name> <init pos:line="619" pos:column="37">= <expr><op:operator pos:line="619" pos:column="39">new</op:operator> <call><name><name pos:line="619" pos:column="43">java</name><op:operator pos:line="619" pos:column="47">.</op:operator><name pos:line="619" pos:column="48">io</name><op:operator pos:line="619" pos:column="50">.</op:operator><name pos:line="619" pos:column="51">File</name></name><argument_list pos:line="619" pos:column="55">(<argument><expr><name pos:line="619" pos:column="56">fileDir</name></expr></argument>)</argument_list></call><op:operator pos:line="619" pos:column="64">.</op:operator><call><name pos:line="619" pos:column="65">mkdirs</name><argument_list pos:line="619" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name pos:line="621" pos:column="25">java</name><op:operator pos:line="621" pos:column="29">.</op:operator><name pos:line="621" pos:column="30">io</name><op:operator pos:line="621" pos:column="32">.</op:operator><name pos:line="621" pos:column="33">File</name></name></type> <name pos:line="621" pos:column="38">newFile</name> <init pos:line="621" pos:column="46">= <expr><op:operator pos:line="621" pos:column="48">new</op:operator> <call><name><name pos:line="621" pos:column="52">java</name><op:operator pos:line="621" pos:column="56">.</op:operator><name pos:line="621" pos:column="57">io</name><op:operator pos:line="621" pos:column="59">.</op:operator><name pos:line="621" pos:column="60">File</name></name><argument_list pos:line="621" pos:column="64">(<argument><expr><name pos:line="621" pos:column="65">fileDir</name><op:operator pos:line="621" pos:column="72">+</op:operator><lit:literal type="string" pos:line="621" pos:column="73">"/"</lit:literal><op:operator pos:line="621" pos:column="76">+</op:operator><name pos:line="621" pos:column="77">courseName</name><op:operator pos:line="621" pos:column="87">+</op:operator><name pos:line="621" pos:column="88">offerID</name><op:operator pos:line="621" pos:column="95">+</op:operator><lit:literal type="string" pos:line="621" pos:column="96">"-details.txt"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="622" pos:column="25">FileWriter</name></type> <name pos:line="622" pos:column="36">writer</name> <init pos:line="622" pos:column="43">= <expr><op:operator pos:line="622" pos:column="45">new</op:operator> <call><name pos:line="622" pos:column="49">FileWriter</name><argument_list pos:line="622" pos:column="59">(<argument><expr><name pos:line="622" pos:column="60">newFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="623" pos:column="25">writer</name><op:operator pos:line="623" pos:column="31">.</op:operator><name pos:line="623" pos:column="32">write</name></name><argument_list pos:line="623" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="623" pos:column="38">"Course Details:\n Course name:"</lit:literal><op:operator pos:line="623" pos:column="70">+</op:operator><name pos:line="623" pos:column="71">courseName</name><op:operator pos:line="623" pos:column="81">+</op:operator><lit:literal type="string" pos:line="623" pos:column="82">"\nTaught by:"</lit:literal><op:operator pos:line="623" pos:column="96">+</op:operator><name pos:line="623" pos:column="97">Professor</name><op:operator pos:line="623" pos:column="106">+</op:operator><lit:literal type="string" pos:line="623" pos:column="107">"\nPlease check your"</lit:literal>
					<op:operator pos:line="624" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="624" pos:column="43">" courses tab for more details"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="625" pos:column="25">writer</name><op:operator pos:line="625" pos:column="31">.</op:operator><name pos:line="625" pos:column="32">close</name></name><argument_list pos:line="625" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="626" pos:column="25">return <expr><lit:literal type="boolean" pos:line="626" pos:column="32">true</lit:literal></expr>;</return>
		}</block>
		
		<catch pos:line="629" pos:column="17">catch<parameter_list pos:line="629" pos:column="22">(<param><decl><type><name pos:line="629" pos:column="23">IOException</name></type> <name pos:line="629" pos:column="35">e</name></decl></param>)</parameter_list><block pos:line="629" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="630" pos:column="25">System</name><op:operator pos:line="630" pos:column="31">.</op:operator><name pos:line="630" pos:column="32">out</name><op:operator pos:line="630" pos:column="35">.</op:operator><name pos:line="630" pos:column="36">println</name></name><argument_list pos:line="630" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="630" pos:column="44">"IO error Not formed"</lit:literal><op:operator pos:line="630" pos:column="65">+</op:operator> <call><name><name pos:line="630" pos:column="67">e</name><op:operator pos:line="630" pos:column="68">.</op:operator><name pos:line="630" pos:column="69">getMessage</name></name><argument_list pos:line="630" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="631" pos:column="25">e</name><op:operator pos:line="631" pos:column="26">.</op:operator><name pos:line="631" pos:column="27">printStackTrace</name></name><argument_list pos:line="631" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="632" pos:column="25">return <expr><lit:literal type="boolean" pos:line="632" pos:column="32">false</lit:literal></expr>;</return>
		}</block></catch>
		
		<catch pos:line="635" pos:column="17">catch<parameter_list pos:line="635" pos:column="22">(<param><decl><type><name pos:line="635" pos:column="23">Exception</name></type> <name pos:line="635" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="635" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="636" pos:column="25">System</name><op:operator pos:line="636" pos:column="31">.</op:operator><name pos:line="636" pos:column="32">out</name><op:operator pos:line="636" pos:column="35">.</op:operator><name pos:line="636" pos:column="36">println</name></name><argument_list pos:line="636" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="636" pos:column="44">"Not formed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="637" pos:column="25">return <expr><lit:literal type="boolean" pos:line="637" pos:column="32">false</lit:literal></expr>;</return>
		}</block></catch></try>
		
		
	}</block></function>
	
	
	<comment type="block" pos:line="644" pos:column="9">/*
	 * Returns an array list of all the current CourseOffered objects for the specified student 
	 */</comment>
	<function><type><specifier pos:line="647" pos:column="9">public</specifier> <specifier pos:line="647" pos:column="16">static</specifier> <name><name pos:line="647" pos:column="23">ArrayList</name><argument_list pos:line="647" pos:column="32">&lt;<argument><name pos:line="647" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="647" pos:column="48">getStudentCourses</name><parameter_list pos:line="647" pos:column="65">(<param><decl><type><name pos:line="647" pos:column="66">Student</name></type> <name pos:line="647" pos:column="74">student</name></decl></param>)</parameter_list> <throws pos:line="647" pos:column="83">throws <argument><expr><name><name pos:line="647" pos:column="90">Course</name><op:operator pos:line="647" pos:column="96">.</op:operator><name pos:line="647" pos:column="97">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name pos:line="647" pos:column="126">CourseOfferingDoesNotExistException</name></expr></argument></throws><block pos:line="647" pos:column="161">{
		<if pos:line="648" pos:column="17">if<condition pos:line="648" pos:column="19">(<expr><name pos:line="648" pos:column="20">student</name> <op:operator pos:line="648" pos:column="28">==</op:operator> <lit:literal type="null" pos:line="648" pos:column="31">null</lit:literal></expr>)</condition><then pos:line="648" pos:column="36"> <block pos:line="648" pos:column="37">{
			<throw pos:line="649" pos:column="25">throw <expr><op:operator pos:line="649" pos:column="31">new</op:operator> <call><name pos:line="649" pos:column="35">NullPointerException</name><argument_list pos:line="649" pos:column="55">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="652" pos:column="17">ArrayList</name><argument_list pos:line="652" pos:column="26">&lt;<argument><name pos:line="652" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="652" pos:column="42">studentCourses</name> <init pos:line="652" pos:column="57">= <expr><op:operator pos:line="652" pos:column="59">new</op:operator> <call><name><name pos:line="652" pos:column="63">ArrayList</name><argument_list pos:line="652" pos:column="72">&lt;<argument><name pos:line="652" pos:column="73">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="652" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="654" pos:column="17">try<block pos:line="654" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="655" pos:column="25">Connection</name></type> <name pos:line="655" pos:column="36">conn</name> <init pos:line="655" pos:column="41">= <expr><call><name><name pos:line="655" pos:column="43">Database</name><op:operator pos:line="655" pos:column="51">.</op:operator><name pos:line="655" pos:column="52">getConnection</name></name><argument_list pos:line="655" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="657" pos:column="25">try<block pos:line="657" pos:column="28">{
				<if pos:line="658" pos:column="33">if<condition pos:line="658" pos:column="35">(<expr><name pos:line="658" pos:column="36">conn</name> <op:operator pos:line="658" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="658" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="658" pos:column="49">{
					
					<comment type="line" pos:line="660" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="661" pos:column="41">String</name></type> <name pos:line="661" pos:column="48">SQLSelect</name> <init pos:line="661" pos:column="58">= <expr><lit:literal type="string" pos:line="661" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="662" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="662" pos:column="59">" FROM studentenrollment"</lit:literal>
							<op:operator pos:line="663" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="663" pos:column="59">" WHERE UIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="664" pos:column="41">PreparedStatement</name></type> <name pos:line="664" pos:column="59">statement</name> <init pos:line="664" pos:column="69">= <expr><call><name><name pos:line="664" pos:column="71">conn</name><op:operator pos:line="664" pos:column="75">.</op:operator><name pos:line="664" pos:column="76">prepareStatement</name></name><argument_list pos:line="664" pos:column="92">(<argument><expr><name pos:line="664" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="665" pos:column="41">statement</name><op:operator pos:line="665" pos:column="50">.</op:operator><name pos:line="665" pos:column="51">setInt</name></name><argument_list pos:line="665" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="665" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="665" pos:column="61">student</name><op:operator pos:line="665" pos:column="68">.</op:operator><name pos:line="665" pos:column="69">getUIN</name></name><argument_list pos:line="665" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="666" pos:column="41">ResultSet</name></type> <name pos:line="666" pos:column="51">rs</name> <init pos:line="666" pos:column="54">= <expr><call><name><name pos:line="666" pos:column="56">statement</name><op:operator pos:line="666" pos:column="65">.</op:operator><name pos:line="666" pos:column="66">executeQuery</name></name><argument_list pos:line="666" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="668" pos:column="41">while<condition pos:line="668" pos:column="46">(<expr><call><name><name pos:line="668" pos:column="47">rs</name><op:operator pos:line="668" pos:column="49">.</op:operator><name pos:line="668" pos:column="50">next</name></name><argument_list pos:line="668" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="668" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="669" pos:column="49">DBAnnotation</name><op:operator pos:line="669" pos:column="61">.</op:operator><name pos:line="669" pos:column="62">annoate</name></name><argument_list pos:line="669" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="669" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="669" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="669" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="669" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="670" pos:column="49">int</name></type> <name pos:line="670" pos:column="53">offerID</name> <init pos:line="670" pos:column="61">= <expr><call><name><name pos:line="670" pos:column="63">rs</name><op:operator pos:line="670" pos:column="65">.</op:operator><name pos:line="670" pos:column="66">getInt</name></name><argument_list pos:line="670" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="670" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="671" pos:column="49">CourseOffered</name></type> <name pos:line="671" pos:column="63">course</name> <init pos:line="671" pos:column="70">= <expr><op:operator pos:line="671" pos:column="72">new</op:operator> <call><name pos:line="671" pos:column="76">CourseOffered</name><argument_list pos:line="671" pos:column="89">(<argument><expr><name pos:line="671" pos:column="90">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="672" pos:column="49">studentCourses</name><op:operator pos:line="672" pos:column="63">.</op:operator><name pos:line="672" pos:column="64">add</name></name><argument_list pos:line="672" pos:column="67">(<argument><expr><name pos:line="672" pos:column="68">course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="679" pos:column="25">catch<parameter_list pos:line="679" pos:column="30">(<param><decl><type><name pos:line="679" pos:column="31">SQLException</name></type> <name pos:line="679" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="679" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="680" pos:column="33">System</name><op:operator pos:line="680" pos:column="39">.</op:operator><name pos:line="680" pos:column="40">out</name><op:operator pos:line="680" pos:column="43">.</op:operator><name pos:line="680" pos:column="44">println</name></name><argument_list pos:line="680" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="680" pos:column="52">"Error retrieving course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="681" pos:column="33">System</name><op:operator pos:line="681" pos:column="39">.</op:operator><name pos:line="681" pos:column="40">out</name><op:operator pos:line="681" pos:column="43">.</op:operator><name pos:line="681" pos:column="44">println</name></name><argument_list pos:line="681" pos:column="51">(<argument><expr><call><name><name pos:line="681" pos:column="52">e</name><op:operator pos:line="681" pos:column="53">.</op:operator><name pos:line="681" pos:column="54">getMessage</name></name><argument_list pos:line="681" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="682" pos:column="33">e</name><op:operator pos:line="682" pos:column="34">.</op:operator><name pos:line="682" pos:column="35">printStackTrace</name></name><argument_list pos:line="682" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch>
				
			<finally pos:line="686" pos:column="25">finally<block pos:line="686" pos:column="32">{
			}</block></finally></try>
			
		
			<return pos:line="690" pos:column="25">return <expr><name pos:line="690" pos:column="32">studentCourses</name></expr>;</return>
		}</block>
		
		<finally pos:line="693" pos:column="17">finally<block pos:line="693" pos:column="24">{
		}</block></finally></try>
		
	}</block></function>
	
	<comment type="block" pos:line="698" pos:column="9">/*
	 * returns all the students who have registered for the course offering 
	 */</comment>
	<function><type><specifier pos:line="701" pos:column="9">public</specifier> <specifier pos:line="701" pos:column="16">static</specifier> <name><name pos:line="701" pos:column="23">ArrayList</name><argument_list pos:line="701" pos:column="32">&lt;<argument><name pos:line="701" pos:column="33">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="701" pos:column="42">getAllStudentsInCourse</name><parameter_list pos:line="701" pos:column="64">(<param><decl><type><name pos:line="701" pos:column="65">CourseOffered</name></type> <name pos:line="701" pos:column="79">courseOffered</name></decl></param>)</parameter_list><block pos:line="701" pos:column="93">{
		<if pos:line="702" pos:column="17">if<condition pos:line="702" pos:column="19">(<expr><name pos:line="702" pos:column="20">courseOffered</name> <op:operator pos:line="702" pos:column="34">==</op:operator> <lit:literal type="null" pos:line="702" pos:column="37">null</lit:literal></expr>)</condition><then pos:line="702" pos:column="42"> <block pos:line="702" pos:column="43">{
			<throw pos:line="703" pos:column="25">throw <expr><op:operator pos:line="703" pos:column="31">new</op:operator> <call><name pos:line="703" pos:column="35">NullPointerException</name><argument_list pos:line="703" pos:column="55">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		<decl_stmt><decl><type><name><name pos:line="705" pos:column="17">ArrayList</name><argument_list pos:line="705" pos:column="26">&lt;<argument><name pos:line="705" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="705" pos:column="36">students</name> <init pos:line="705" pos:column="45">= <expr><op:operator pos:line="705" pos:column="47">new</op:operator> <call><name><name pos:line="705" pos:column="51">ArrayList</name><argument_list pos:line="705" pos:column="60">&lt;<argument><name pos:line="705" pos:column="61">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="705" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="707" pos:column="17">try<block pos:line="707" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="708" pos:column="25">Connection</name></type> <name pos:line="708" pos:column="36">conn</name> <init pos:line="708" pos:column="41">= <expr><call><name><name pos:line="708" pos:column="43">Database</name><op:operator pos:line="708" pos:column="51">.</op:operator><name pos:line="708" pos:column="52">getConnection</name></name><argument_list pos:line="708" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="710" pos:column="25">try<block pos:line="710" pos:column="28">{
				<if pos:line="711" pos:column="33">if<condition pos:line="711" pos:column="35">(<expr><name pos:line="711" pos:column="36">conn</name> <op:operator pos:line="711" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="711" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="711" pos:column="49">{
					
					<comment type="line" pos:line="713" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="714" pos:column="41">String</name></type> <name pos:line="714" pos:column="48">studentSelect</name> <init pos:line="714" pos:column="62">= <expr><lit:literal type="string" pos:line="714" pos:column="64">"Select *"</lit:literal>
							<op:operator pos:line="715" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="715" pos:column="59">" FROM studentenrollment"</lit:literal>
							<op:operator pos:line="716" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="716" pos:column="59">" WHERE OfferID=?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="717" pos:column="41">PreparedStatement</name></type> <name pos:line="717" pos:column="59">statement</name> <init pos:line="717" pos:column="69">= <expr><call><name><name pos:line="717" pos:column="71">conn</name><op:operator pos:line="717" pos:column="75">.</op:operator><name pos:line="717" pos:column="76">prepareStatement</name></name><argument_list pos:line="717" pos:column="92">(<argument><expr><name pos:line="717" pos:column="93">studentSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="718" pos:column="41">statement</name><op:operator pos:line="718" pos:column="50">.</op:operator><name pos:line="718" pos:column="51">setInt</name></name><argument_list pos:line="718" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="718" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="718" pos:column="61">courseOffered</name><op:operator pos:line="718" pos:column="74">.</op:operator><name pos:line="718" pos:column="75">getOfferID</name></name><argument_list pos:line="718" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="719" pos:column="41">ResultSet</name></type> <name pos:line="719" pos:column="51">rs</name> <init pos:line="719" pos:column="54">= <expr><call><name><name pos:line="719" pos:column="56">statement</name><op:operator pos:line="719" pos:column="65">.</op:operator><name pos:line="719" pos:column="66">executeQuery</name></name><argument_list pos:line="719" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="721" pos:column="41">while<condition pos:line="721" pos:column="46">(<expr><call><name><name pos:line="721" pos:column="47">rs</name><op:operator pos:line="721" pos:column="49">.</op:operator><name pos:line="721" pos:column="50">next</name></name><argument_list pos:line="721" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="721" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="722" pos:column="49">DBAnnotation</name><op:operator pos:line="722" pos:column="61">.</op:operator><name pos:line="722" pos:column="62">annoate</name></name><argument_list pos:line="722" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="722" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="722" pos:column="77">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="722" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="722" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="723" pos:column="49">int</name></type> <name pos:line="723" pos:column="53">UIN</name> <init pos:line="723" pos:column="57">= <expr><call><name><name pos:line="723" pos:column="59">rs</name><op:operator pos:line="723" pos:column="61">.</op:operator><name pos:line="723" pos:column="62">getInt</name></name><argument_list pos:line="723" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="723" pos:column="69">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="724" pos:column="49">Student</name></type> <name pos:line="724" pos:column="57">s</name> <init pos:line="724" pos:column="59">= <expr><op:operator pos:line="724" pos:column="61">new</op:operator> <call><name pos:line="724" pos:column="65">Student</name><argument_list pos:line="724" pos:column="72">(<argument><expr><name pos:line="724" pos:column="73">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="725" pos:column="49">if<condition pos:line="725" pos:column="51">(<expr><name pos:line="725" pos:column="52">s</name><op:operator pos:line="725" pos:column="53">!=</op:operator><lit:literal type="null" pos:line="725" pos:column="55">null</lit:literal></expr>)</condition><then pos:line="725" pos:column="60">
							<expr_stmt><expr><call><name><name pos:line="726" pos:column="57">students</name><op:operator pos:line="726" pos:column="65">.</op:operator><name pos:line="726" pos:column="66">add</name></name><argument_list pos:line="726" pos:column="69">(<argument><expr><name pos:line="726" pos:column="70">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></while>
					
				}</block></then>
					
					
				<else pos:line="732" pos:column="33">else<block pos:line="732" pos:column="37">{
					<throw pos:line="733" pos:column="41">throw <expr><op:operator pos:line="733" pos:column="47">new</op:operator> <call><name pos:line="733" pos:column="51">CourseOfferingDoesNotExistException</name><argument_list pos:line="733" pos:column="86">()</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch pos:line="740" pos:column="25">catch<parameter_list pos:line="740" pos:column="30">(<param><decl><type><name pos:line="740" pos:column="31">Exception</name></type> <name pos:line="740" pos:column="41">e</name></decl></param>)</parameter_list><block pos:line="740" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="741" pos:column="33">System</name><op:operator pos:line="741" pos:column="39">.</op:operator><name pos:line="741" pos:column="40">out</name><op:operator pos:line="741" pos:column="43">.</op:operator><name pos:line="741" pos:column="44">println</name></name><argument_list pos:line="741" pos:column="51">(<argument><expr><call><name><name pos:line="741" pos:column="52">e</name><op:operator pos:line="741" pos:column="53">.</op:operator><name pos:line="741" pos:column="54">getMessage</name></name><argument_list pos:line="741" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="742" pos:column="33">e</name><op:operator pos:line="742" pos:column="34">.</op:operator><name pos:line="742" pos:column="35">printStackTrace</name></name><argument_list pos:line="742" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>			
		}</block>
				
		<finally pos:line="747" pos:column="17">finally<block pos:line="747" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="750" pos:column="17">return <expr><name pos:line="750" pos:column="24">students</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="754" pos:column="9">/*
	 * Returns all the current courses that the specified professor is teaching
	 */</comment>
	<function><type><specifier pos:line="757" pos:column="9">public</specifier> <specifier pos:line="757" pos:column="16">static</specifier> <name><name pos:line="757" pos:column="23">ArrayList</name><argument_list pos:line="757" pos:column="32">&lt;<argument><name pos:line="757" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="757" pos:column="48">getCurrentProfessorCourses</name><parameter_list pos:line="757" pos:column="74">(<param><decl><type><name pos:line="757" pos:column="75">Professor</name></type> <name pos:line="757" pos:column="85">professor</name></decl></param>)</parameter_list><block pos:line="757" pos:column="95">{
		<if pos:line="758" pos:column="17">if<condition pos:line="758" pos:column="19">(<expr><name pos:line="758" pos:column="20">professor</name> <op:operator pos:line="758" pos:column="30">==</op:operator> <lit:literal type="null" pos:line="758" pos:column="33">null</lit:literal></expr>)</condition><then pos:line="758" pos:column="38">
			<return pos:line="759" pos:column="25">return <expr><lit:literal type="null" pos:line="759" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="761" pos:column="17">ArrayList</name><argument_list pos:line="761" pos:column="26">&lt;<argument><name pos:line="761" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="761" pos:column="42">profCourses</name> <init pos:line="761" pos:column="54">= <expr><op:operator pos:line="761" pos:column="56">new</op:operator> <call><name><name pos:line="761" pos:column="60">ArrayList</name><argument_list pos:line="761" pos:column="69">&lt;<argument><name pos:line="761" pos:column="70">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="761" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="762" pos:column="17">int</name></type> <name pos:line="762" pos:column="21">professorID</name> <init pos:line="762" pos:column="33">= <expr><call><name><name pos:line="762" pos:column="35">professor</name><op:operator pos:line="762" pos:column="44">.</op:operator><name pos:line="762" pos:column="45">getUIN</name></name><argument_list pos:line="762" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="763" pos:column="17">int</name></type> <name pos:line="763" pos:column="21">currentSemesterID</name> <init pos:line="763" pos:column="39">= <expr><call><name pos:line="763" pos:column="41">getCurrentSemesterID</name><argument_list pos:line="763" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="765" pos:column="17">try<block pos:line="765" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="766" pos:column="25">Connection</name></type> <name pos:line="766" pos:column="36">conn</name> <init pos:line="766" pos:column="41">= <expr><call><name><name pos:line="766" pos:column="43">Database</name><op:operator pos:line="766" pos:column="51">.</op:operator><name pos:line="766" pos:column="52">getConnection</name></name><argument_list pos:line="766" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="768" pos:column="25">try<block pos:line="768" pos:column="28">{
				<if pos:line="769" pos:column="33">if<condition pos:line="769" pos:column="35">(<expr><name pos:line="769" pos:column="36">conn</name> <op:operator pos:line="769" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="769" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="769" pos:column="49">{
					
					<comment type="line" pos:line="771" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="772" pos:column="41">String</name></type> <name pos:line="772" pos:column="48">SQLSelect</name> <init pos:line="772" pos:column="58">= <expr><lit:literal type="string" pos:line="772" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="773" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="773" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="774" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="774" pos:column="59">" WHERE TaughtBy=? and SemesterID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="775" pos:column="41">PreparedStatement</name></type> <name pos:line="775" pos:column="59">statement</name> <init pos:line="775" pos:column="69">= <expr><call><name><name pos:line="775" pos:column="71">conn</name><op:operator pos:line="775" pos:column="75">.</op:operator><name pos:line="775" pos:column="76">prepareStatement</name></name><argument_list pos:line="775" pos:column="92">(<argument><expr><name pos:line="775" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="776" pos:column="41">statement</name><op:operator pos:line="776" pos:column="50">.</op:operator><name pos:line="776" pos:column="51">setInt</name></name><argument_list pos:line="776" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="776" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="776" pos:column="61">professorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="777" pos:column="41">statement</name><op:operator pos:line="777" pos:column="50">.</op:operator><name pos:line="777" pos:column="51">setInt</name></name><argument_list pos:line="777" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="777" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="777" pos:column="61">currentSemesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="778" pos:column="41">ResultSet</name></type> <name pos:line="778" pos:column="51">rs</name> <init pos:line="778" pos:column="54">= <expr><call><name><name pos:line="778" pos:column="56">statement</name><op:operator pos:line="778" pos:column="65">.</op:operator><name pos:line="778" pos:column="66">executeQuery</name></name><argument_list pos:line="778" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="780" pos:column="41">while<condition pos:line="780" pos:column="46">(<expr><call><name><name pos:line="780" pos:column="47">rs</name><op:operator pos:line="780" pos:column="49">.</op:operator><name pos:line="780" pos:column="50">next</name></name><argument_list pos:line="780" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="780" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="781" pos:column="49">DBAnnotation</name><op:operator pos:line="781" pos:column="61">.</op:operator><name pos:line="781" pos:column="62">annoate</name></name><argument_list pos:line="781" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="781" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="781" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="781" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="781" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="782" pos:column="49">int</name></type> <name pos:line="782" pos:column="53">offerID</name> <init pos:line="782" pos:column="61">= <expr><call><name><name pos:line="782" pos:column="63">rs</name><op:operator pos:line="782" pos:column="65">.</op:operator><name pos:line="782" pos:column="66">getInt</name></name><argument_list pos:line="782" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="782" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="783" pos:column="49">CourseOffered</name></type> <name pos:line="783" pos:column="63">c</name> <init pos:line="783" pos:column="65">= <expr><op:operator pos:line="783" pos:column="67">new</op:operator> <call><name pos:line="783" pos:column="71">CourseOffered</name><argument_list pos:line="783" pos:column="84">(<argument><expr><name pos:line="783" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="784" pos:column="49">profCourses</name><op:operator pos:line="784" pos:column="60">.</op:operator><name pos:line="784" pos:column="61">add</name></name><argument_list pos:line="784" pos:column="64">(<argument><expr><name pos:line="784" pos:column="65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then>
					
					
				<else pos:line="790" pos:column="33">else<block pos:line="790" pos:column="37">{
					<throw pos:line="791" pos:column="41">throw <expr><op:operator pos:line="791" pos:column="47">new</op:operator> <call><name pos:line="791" pos:column="51">IllegalAccessException</name><argument_list pos:line="791" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="791" pos:column="74">"Professor deos not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch pos:line="798" pos:column="25">catch<parameter_list pos:line="798" pos:column="30">(<param><decl><type><name pos:line="798" pos:column="31">Exception</name></type> <name pos:line="798" pos:column="41">e</name></decl></param>)</parameter_list><block pos:line="798" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="799" pos:column="33">System</name><op:operator pos:line="799" pos:column="39">.</op:operator><name pos:line="799" pos:column="40">out</name><op:operator pos:line="799" pos:column="43">.</op:operator><name pos:line="799" pos:column="44">println</name></name><argument_list pos:line="799" pos:column="51">(<argument><expr><call><name><name pos:line="799" pos:column="52">e</name><op:operator pos:line="799" pos:column="53">.</op:operator><name pos:line="799" pos:column="54">getMessage</name></name><argument_list pos:line="799" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="800" pos:column="33">e</name><op:operator pos:line="800" pos:column="34">.</op:operator><name pos:line="800" pos:column="35">printStackTrace</name></name><argument_list pos:line="800" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally pos:line="805" pos:column="17">finally<block pos:line="805" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="808" pos:column="17">return <expr><name pos:line="808" pos:column="24">profCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="811" pos:column="9">/*
	 * Returns all the courses that are being currently TAed by the TA
	 */</comment>
	<function><type><specifier pos:line="814" pos:column="9">public</specifier> <specifier pos:line="814" pos:column="16">static</specifier> <name><name pos:line="814" pos:column="23">ArrayList</name><argument_list pos:line="814" pos:column="32">&lt;<argument><name pos:line="814" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="814" pos:column="48">getAllCurrentCoursesTAedBy</name><parameter_list pos:line="814" pos:column="74">(<param><decl><type><name pos:line="814" pos:column="75">TA</name></type> <name pos:line="814" pos:column="78">ta</name></decl></param>)</parameter_list><block pos:line="814" pos:column="81">{
		<if pos:line="815" pos:column="17">if<condition pos:line="815" pos:column="19">(<expr><name pos:line="815" pos:column="20">ta</name> <op:operator pos:line="815" pos:column="23">==</op:operator> <lit:literal type="null" pos:line="815" pos:column="26">null</lit:literal></expr>)</condition><then pos:line="815" pos:column="31">
			<return pos:line="816" pos:column="25">return <expr><lit:literal type="null" pos:line="816" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="818" pos:column="17">ArrayList</name><argument_list pos:line="818" pos:column="26">&lt;<argument><name pos:line="818" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="818" pos:column="42">taCourses</name> <init pos:line="818" pos:column="52">= <expr><op:operator pos:line="818" pos:column="54">new</op:operator> <call><name><name pos:line="818" pos:column="58">ArrayList</name><argument_list pos:line="818" pos:column="67">&lt;<argument><name pos:line="818" pos:column="68">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="818" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="819" pos:column="17">int</name></type> <name pos:line="819" pos:column="21">TAID</name> <init pos:line="819" pos:column="26">= <expr><call><name><name pos:line="819" pos:column="28">ta</name><op:operator pos:line="819" pos:column="30">.</op:operator><name pos:line="819" pos:column="31">getUIN</name></name><argument_list pos:line="819" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="820" pos:column="17">int</name></type> <name pos:line="820" pos:column="21">currentSemesterID</name> <init pos:line="820" pos:column="39">= <expr><call><name pos:line="820" pos:column="41">getCurrentSemesterID</name><argument_list pos:line="820" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="822" pos:column="17">try<block pos:line="822" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="823" pos:column="25">Connection</name></type> <name pos:line="823" pos:column="36">conn</name> <init pos:line="823" pos:column="41">= <expr><call><name><name pos:line="823" pos:column="43">Database</name><op:operator pos:line="823" pos:column="51">.</op:operator><name pos:line="823" pos:column="52">getConnection</name></name><argument_list pos:line="823" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="825" pos:column="25">try<block pos:line="825" pos:column="28">{
				<if pos:line="826" pos:column="33">if<condition pos:line="826" pos:column="35">(<expr><name pos:line="826" pos:column="36">conn</name> <op:operator pos:line="826" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="826" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="826" pos:column="49">{
					
					<comment type="line" pos:line="828" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="829" pos:column="41">String</name></type> <name pos:line="829" pos:column="48">SemesterSelect</name> <init pos:line="829" pos:column="63">= <expr><lit:literal type="string" pos:line="829" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="830" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="830" pos:column="59">" FROM coursesoffered as c join teachingassistant as t"</lit:literal>
							<op:operator pos:line="831" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="831" pos:column="59">" WHERE c.SemesterID= ? and t.OfferID = c.OfferID and TaUIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="832" pos:column="41">PreparedStatement</name></type> <name pos:line="832" pos:column="59">statement</name> <init pos:line="832" pos:column="69">= <expr><call><name><name pos:line="832" pos:column="71">conn</name><op:operator pos:line="832" pos:column="75">.</op:operator><name pos:line="832" pos:column="76">prepareStatement</name></name><argument_list pos:line="832" pos:column="92">(<argument><expr><name pos:line="832" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="833" pos:column="41">statement</name><op:operator pos:line="833" pos:column="50">.</op:operator><name pos:line="833" pos:column="51">setInt</name></name><argument_list pos:line="833" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="833" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="833" pos:column="61">currentSemesterID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="834" pos:column="41">statement</name><op:operator pos:line="834" pos:column="50">.</op:operator><name pos:line="834" pos:column="51">setInt</name></name><argument_list pos:line="834" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="834" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="834" pos:column="61">TAID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="835" pos:column="41">ResultSet</name></type> <name pos:line="835" pos:column="51">rs</name> <init pos:line="835" pos:column="54">= <expr><call><name><name pos:line="835" pos:column="56">statement</name><op:operator pos:line="835" pos:column="65">.</op:operator><name pos:line="835" pos:column="66">executeQuery</name></name><argument_list pos:line="835" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="837" pos:column="41">while<condition pos:line="837" pos:column="46">(<expr><call><name><name pos:line="837" pos:column="47">rs</name><op:operator pos:line="837" pos:column="49">.</op:operator><name pos:line="837" pos:column="50">next</name></name><argument_list pos:line="837" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="837" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="838" pos:column="49">DBAnnotation</name><op:operator pos:line="838" pos:column="61">.</op:operator><name pos:line="838" pos:column="62">annoate</name></name><argument_list pos:line="838" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="838" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="838" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="838" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="838" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="839" pos:column="49">int</name></type> <name pos:line="839" pos:column="53">offerID</name> <init pos:line="839" pos:column="61">= <expr><call><name><name pos:line="839" pos:column="63">rs</name><op:operator pos:line="839" pos:column="65">.</op:operator><name pos:line="839" pos:column="66">getInt</name></name><argument_list pos:line="839" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="839" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="840" pos:column="49">CourseOffered</name></type> <name pos:line="840" pos:column="63">c</name> <init pos:line="840" pos:column="65">= <expr><op:operator pos:line="840" pos:column="67">new</op:operator> <call><name pos:line="840" pos:column="71">CourseOffered</name><argument_list pos:line="840" pos:column="84">(<argument><expr><name pos:line="840" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="841" pos:column="49">taCourses</name><op:operator pos:line="841" pos:column="58">.</op:operator><name pos:line="841" pos:column="59">add</name></name><argument_list pos:line="841" pos:column="62">(<argument><expr><name pos:line="841" pos:column="63">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then>
					
					
				<else pos:line="847" pos:column="33">else<block pos:line="847" pos:column="37">{
					<throw pos:line="848" pos:column="41">throw <expr><op:operator pos:line="848" pos:column="47">new</op:operator> <call><name pos:line="848" pos:column="51">IllegalAccessException</name><argument_list pos:line="848" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="848" pos:column="74">"TA does not exits - CoursesOffered.java"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch pos:line="855" pos:column="25">catch<parameter_list pos:line="855" pos:column="30">(<param><decl><type><name pos:line="855" pos:column="31">Exception</name></type> <name pos:line="855" pos:column="41">e</name></decl></param>)</parameter_list><block pos:line="855" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="856" pos:column="33">System</name><op:operator pos:line="856" pos:column="39">.</op:operator><name pos:line="856" pos:column="40">out</name><op:operator pos:line="856" pos:column="43">.</op:operator><name pos:line="856" pos:column="44">println</name></name><argument_list pos:line="856" pos:column="51">(<argument><expr><call><name><name pos:line="856" pos:column="52">e</name><op:operator pos:line="856" pos:column="53">.</op:operator><name pos:line="856" pos:column="54">getMessage</name></name><argument_list pos:line="856" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="857" pos:column="33">e</name><op:operator pos:line="857" pos:column="34">.</op:operator><name pos:line="857" pos:column="35">printStackTrace</name></name><argument_list pos:line="857" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally pos:line="862" pos:column="17">finally<block pos:line="862" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="865" pos:column="17">return <expr><name pos:line="865" pos:column="24">taCourses</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="868" pos:column="9">/*
	 * Returns all the courses that the TA is currently enrolled in
	 */</comment>
	<function><type><specifier pos:line="871" pos:column="9">public</specifier> <specifier pos:line="871" pos:column="16">static</specifier> <name><name pos:line="871" pos:column="23">ArrayList</name><argument_list pos:line="871" pos:column="32">&lt;<argument><name pos:line="871" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="871" pos:column="48">getAllCurrentCoursesTakenBy</name><parameter_list pos:line="871" pos:column="75">(<param><decl><type><name pos:line="871" pos:column="76">TA</name></type> <name pos:line="871" pos:column="79">ta</name></decl></param>)</parameter_list><block pos:line="871" pos:column="82">{
		<if pos:line="872" pos:column="17">if<condition pos:line="872" pos:column="19">(<expr><name pos:line="872" pos:column="20">ta</name> <op:operator pos:line="872" pos:column="23">==</op:operator> <lit:literal type="null" pos:line="872" pos:column="26">null</lit:literal></expr>)</condition><then pos:line="872" pos:column="31"> <block pos:line="872" pos:column="32">{
			<throw pos:line="873" pos:column="25">throw <expr><op:operator pos:line="873" pos:column="31">new</op:operator> <call><name pos:line="873" pos:column="35">NullPointerException</name><argument_list pos:line="873" pos:column="55">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="876" pos:column="17">ArrayList</name><argument_list pos:line="876" pos:column="26">&lt;<argument><name pos:line="876" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="876" pos:column="42">studentCourses</name> <init pos:line="876" pos:column="57">= <expr><op:operator pos:line="876" pos:column="59">new</op:operator> <call><name><name pos:line="876" pos:column="63">ArrayList</name><argument_list pos:line="876" pos:column="72">&lt;<argument><name pos:line="876" pos:column="73">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="876" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="878" pos:column="17">try<block pos:line="878" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="879" pos:column="25">Connection</name></type> <name pos:line="879" pos:column="36">conn</name> <init pos:line="879" pos:column="41">= <expr><call><name><name pos:line="879" pos:column="43">Database</name><op:operator pos:line="879" pos:column="51">.</op:operator><name pos:line="879" pos:column="52">getConnection</name></name><argument_list pos:line="879" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="881" pos:column="25">try<block pos:line="881" pos:column="28">{
				<if pos:line="882" pos:column="33">if<condition pos:line="882" pos:column="35">(<expr><name pos:line="882" pos:column="36">conn</name> <op:operator pos:line="882" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="882" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="882" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="884" pos:column="41">String</name></type> <name pos:line="884" pos:column="48">SemesterSelect</name> <init pos:line="884" pos:column="63">= <expr><lit:literal type="string" pos:line="884" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="885" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="885" pos:column="59">" FROM studentenrollment"</lit:literal>
							<op:operator pos:line="886" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="886" pos:column="59">" WHERE UIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="887" pos:column="41">PreparedStatement</name></type> <name pos:line="887" pos:column="59">statement</name> <init pos:line="887" pos:column="69">= <expr><call><name><name pos:line="887" pos:column="71">conn</name><op:operator pos:line="887" pos:column="75">.</op:operator><name pos:line="887" pos:column="76">prepareStatement</name></name><argument_list pos:line="887" pos:column="92">(<argument><expr><name pos:line="887" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="888" pos:column="41">statement</name><op:operator pos:line="888" pos:column="50">.</op:operator><name pos:line="888" pos:column="51">setInt</name></name><argument_list pos:line="888" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="888" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="888" pos:column="61">ta</name><op:operator pos:line="888" pos:column="63">.</op:operator><name pos:line="888" pos:column="64">getUIN</name></name><argument_list pos:line="888" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="889" pos:column="41">ResultSet</name></type> <name pos:line="889" pos:column="51">rs</name> <init pos:line="889" pos:column="54">= <expr><call><name><name pos:line="889" pos:column="56">statement</name><op:operator pos:line="889" pos:column="65">.</op:operator><name pos:line="889" pos:column="66">executeQuery</name></name><argument_list pos:line="889" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="891" pos:column="41">while<condition pos:line="891" pos:column="46">(<expr><call><name><name pos:line="891" pos:column="47">rs</name><op:operator pos:line="891" pos:column="49">.</op:operator><name pos:line="891" pos:column="50">next</name></name><argument_list pos:line="891" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="891" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="892" pos:column="49">DBAnnotation</name><op:operator pos:line="892" pos:column="61">.</op:operator><name pos:line="892" pos:column="62">annoate</name></name><argument_list pos:line="892" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="892" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="892" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="892" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="892" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="893" pos:column="49">int</name></type> <name pos:line="893" pos:column="53">offerID</name> <init pos:line="893" pos:column="61">= <expr><call><name><name pos:line="893" pos:column="63">rs</name><op:operator pos:line="893" pos:column="65">.</op:operator><name pos:line="893" pos:column="66">getInt</name></name><argument_list pos:line="893" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="893" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="894" pos:column="49">CourseOffered</name></type> <name pos:line="894" pos:column="63">course</name> <init pos:line="894" pos:column="70">= <expr><op:operator pos:line="894" pos:column="72">new</op:operator> <call><name pos:line="894" pos:column="76">CourseOffered</name><argument_list pos:line="894" pos:column="89">(<argument><expr><name pos:line="894" pos:column="90">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="895" pos:column="49">studentCourses</name><op:operator pos:line="895" pos:column="63">.</op:operator><name pos:line="895" pos:column="64">add</name></name><argument_list pos:line="895" pos:column="67">(<argument><expr><name pos:line="895" pos:column="68">course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="902" pos:column="25">catch<parameter_list pos:line="902" pos:column="30">(<param><decl><type><name pos:line="902" pos:column="31">Exception</name></type> <name pos:line="902" pos:column="41">e</name></decl></param>)</parameter_list><block pos:line="902" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="903" pos:column="33">System</name><op:operator pos:line="903" pos:column="39">.</op:operator><name pos:line="903" pos:column="40">out</name><op:operator pos:line="903" pos:column="43">.</op:operator><name pos:line="903" pos:column="44">println</name></name><argument_list pos:line="903" pos:column="51">(<argument><expr><call><name><name pos:line="903" pos:column="52">e</name><op:operator pos:line="903" pos:column="53">.</op:operator><name pos:line="903" pos:column="54">getMessage</name></name><argument_list pos:line="903" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="904" pos:column="33">e</name><op:operator pos:line="904" pos:column="34">.</op:operator><name pos:line="904" pos:column="35">printStackTrace</name></name><argument_list pos:line="904" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
					
		}</block>
		
		<finally pos:line="910" pos:column="17">finally<block pos:line="910" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="913" pos:column="17">return <expr><name pos:line="913" pos:column="24">studentCourses</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" pos:line="917" pos:column="9">/*
	 * Returns if the course offering is full or not 
	 */</comment>
	<function><type><specifier pos:line="920" pos:column="9">public</specifier> <name pos:line="920" pos:column="16">boolean</name></type> <name pos:line="920" pos:column="24">isCourseFull</name><parameter_list pos:line="920" pos:column="36">()</parameter_list> <throws pos:line="920" pos:column="39">throws <argument><expr><name pos:line="920" pos:column="46">CourseOfferingDoesNotExistException</name></expr></argument></throws><block pos:line="920" pos:column="81">{
		<return pos:line="921" pos:column="17">return <expr><op:operator pos:line="921" pos:column="24">(</op:operator><op:operator pos:line="921" pos:column="25">(</op:operator><call><name><name pos:line="921" pos:column="26">this</name><op:operator pos:line="921" pos:column="30">.</op:operator><name pos:line="921" pos:column="31">getTotalCapacity</name></name><argument_list pos:line="921" pos:column="47">()</argument_list></call> <op:operator pos:line="921" pos:column="50">-</op:operator> <call><name><name pos:line="921" pos:column="52">this</name><op:operator pos:line="921" pos:column="56">.</op:operator><name pos:line="921" pos:column="57">getCurrentlyFilled</name></name><argument_list pos:line="921" pos:column="75">()</argument_list></call><op:operator pos:line="921" pos:column="77">)</op:operator> <op:operator pos:line="921" pos:column="79">&lt;=</op:operator> <lit:literal type="number" pos:line="921" pos:column="82">0</lit:literal><op:operator pos:line="921" pos:column="83">)</op:operator></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="924" pos:column="9">/*
	 * Adds one to the seats filled for the course offering
	 * Called after a student registers for a course
	 */</comment>
	<function><type><specifier pos:line="928" pos:column="9">public</specifier> <name pos:line="928" pos:column="16">boolean</name></type> <name pos:line="928" pos:column="24">addOneSeatFilledToCourseOffered</name><parameter_list pos:line="928" pos:column="55">()</parameter_list> <throws pos:line="928" pos:column="58">throws <argument><expr><name pos:line="928" pos:column="65">CourseOfferingNotCurrentException</name></expr></argument></throws><block pos:line="928" pos:column="98">{
		<decl_stmt><decl><type><name pos:line="929" pos:column="17">boolean</name></type> <name pos:line="929" pos:column="25">success</name> <init pos:line="929" pos:column="33">= <expr><lit:literal type="boolean" pos:line="929" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="930" pos:column="17">int</name></type> <name pos:line="930" pos:column="21">currentlyFilled</name> <init pos:line="930" pos:column="37">= <expr><lit:literal type="number" pos:line="930" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="931" pos:column="17">if<condition pos:line="931" pos:column="19">(<expr><op:operator pos:line="931" pos:column="20">!</op:operator><call><name pos:line="931" pos:column="21">checkIfCurrent</name><argument_list pos:line="931" pos:column="35">()</argument_list></call></expr>)</condition><then><block pos:line="931" pos:column="38">{
			<throw pos:line="932" pos:column="25">throw <expr><op:operator pos:line="932" pos:column="31">new</op:operator> <call><name pos:line="932" pos:column="35">CourseOfferingNotCurrentException</name><argument_list pos:line="932" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="932" pos:column="69">"This course offering is not current"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<try pos:line="935" pos:column="17">try<block pos:line="935" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="936" pos:column="25">Connection</name></type> <name pos:line="936" pos:column="36">conn</name> <init pos:line="936" pos:column="41">= <expr><call><name><name pos:line="936" pos:column="43">Database</name><op:operator pos:line="936" pos:column="51">.</op:operator><name pos:line="936" pos:column="52">getConnection</name></name><argument_list pos:line="936" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="938" pos:column="25">try<block pos:line="938" pos:column="28">{
				
				<if pos:line="940" pos:column="33">if<condition pos:line="940" pos:column="35">(<expr><call><name pos:line="940" pos:column="36">isCourseFull</name><argument_list pos:line="940" pos:column="48">()</argument_list></call></expr>)</condition><then><block pos:line="940" pos:column="51">{
					<return pos:line="941" pos:column="41">return <expr><lit:literal type="boolean" pos:line="941" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
				
				<if pos:line="944" pos:column="33">if<condition pos:line="944" pos:column="35">(<expr><name pos:line="944" pos:column="36">conn</name> <op:operator pos:line="944" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="944" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="944" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="945" pos:column="41">String</name></type> <name pos:line="945" pos:column="48">courseOfferSelect</name> <init pos:line="945" pos:column="66">= <expr><lit:literal type="string" pos:line="945" pos:column="68">"Select *"</lit:literal>
							<op:operator pos:line="946" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="946" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="947" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="947" pos:column="59">" WHERE OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="948" pos:column="41">PreparedStatement</name></type> <name pos:line="948" pos:column="59">statement</name> <init pos:line="948" pos:column="69">= <expr><call><name><name pos:line="948" pos:column="71">conn</name><op:operator pos:line="948" pos:column="75">.</op:operator><name pos:line="948" pos:column="76">prepareStatement</name></name><argument_list pos:line="948" pos:column="92">(<argument><expr><name pos:line="948" pos:column="93">courseOfferSelect</name></expr></argument>, <argument><expr><name><name pos:line="948" pos:column="112">ResultSet</name><op:operator pos:line="948" pos:column="121">.</op:operator><name pos:line="948" pos:column="122">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="949" pos:column="41">statement</name><op:operator pos:line="949" pos:column="50">.</op:operator><name pos:line="949" pos:column="51">setInt</name></name><argument_list pos:line="949" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="949" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="949" pos:column="61">this</name><op:operator pos:line="949" pos:column="65">.</op:operator><name pos:line="949" pos:column="66">getOfferID</name></name><argument_list pos:line="949" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="950" pos:column="41">ResultSet</name></type> <name pos:line="950" pos:column="51">rs</name> <init pos:line="950" pos:column="54">= <expr><call><name><name pos:line="950" pos:column="56">statement</name><op:operator pos:line="950" pos:column="65">.</op:operator><name pos:line="950" pos:column="66">executeQuery</name></name><argument_list pos:line="950" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="952" pos:column="41">if<condition pos:line="952" pos:column="43">(<expr><call><name><name pos:line="952" pos:column="44">rs</name><op:operator pos:line="952" pos:column="46">.</op:operator><name pos:line="952" pos:column="47">first</name></name><argument_list pos:line="952" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="952" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="953" pos:column="49">DBAnnotation</name><op:operator pos:line="953" pos:column="61">.</op:operator><name pos:line="953" pos:column="62">annoate</name></name><argument_list pos:line="953" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="953" pos:column="70">"seatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="953" pos:column="85">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="953" pos:column="103">"SeatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="953" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="954" pos:column="49">int</name></type> <name pos:line="954" pos:column="53">seatsFilled</name> <init pos:line="954" pos:column="65">= <expr><call><name><name pos:line="954" pos:column="67">rs</name><op:operator pos:line="954" pos:column="69">.</op:operator><name pos:line="954" pos:column="70">getInt</name></name><argument_list pos:line="954" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="954" pos:column="77">"SeatsFilled"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name pos:line="955" pos:column="49">currentlyFilled</name> <op:operator pos:line="955" pos:column="65">=</op:operator> <name pos:line="955" pos:column="67">seatsFilled</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="956" pos:column="49">currentlyFilled</name> <op:operator pos:line="956" pos:column="65">+=</op:operator> <lit:literal type="number" pos:line="956" pos:column="68">1</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="959" pos:column="41">else<block pos:line="959" pos:column="45">{
						<throw pos:line="960" pos:column="49">throw <expr><op:operator pos:line="960" pos:column="55">new</op:operator> <call><name pos:line="960" pos:column="59">CourseOfferingDoesNotExistException</name><argument_list pos:line="960" pos:column="94">()</argument_list></call></expr>;</throw>
					}</block></else></if>
					
					<expr_stmt><expr><call><name><name pos:line="963" pos:column="41">DBAnnotation</name><op:operator pos:line="963" pos:column="53">.</op:operator><name pos:line="963" pos:column="54">annoate</name></name><argument_list pos:line="963" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="963" pos:column="62">"currentlyFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="963" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="963" pos:column="99">"SeatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="963" pos:column="114">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="964" pos:column="41">DBAnnotation</name><op:operator pos:line="964" pos:column="53">.</op:operator><name pos:line="964" pos:column="54">annoate</name></name><argument_list pos:line="964" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="964" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="964" pos:column="73">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="964" pos:column="91">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="964" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="966" pos:column="41">String</name></type> <name pos:line="966" pos:column="48">updateStatement</name> <init pos:line="966" pos:column="64">= <expr><lit:literal type="string" pos:line="966" pos:column="66">"UPDATE coursesoffered "</lit:literal>
							<op:operator pos:line="967" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="967" pos:column="59">"SET SeatsFilled= ? "</lit:literal>
							<op:operator pos:line="968" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="968" pos:column="59">"WHERE OfferID= ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="969" pos:column="41">statement</name> <op:operator pos:line="969" pos:column="51">=</op:operator> <call><name><name pos:line="969" pos:column="53">conn</name><op:operator pos:line="969" pos:column="57">.</op:operator><name pos:line="969" pos:column="58">prepareStatement</name></name><argument_list pos:line="969" pos:column="74">(<argument><expr><name pos:line="969" pos:column="75">updateStatement</name></expr></argument>, <argument><expr><name><name pos:line="969" pos:column="92">ResultSet</name><op:operator pos:line="969" pos:column="101">.</op:operator><name pos:line="969" pos:column="102">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="970" pos:column="41">statement</name><op:operator pos:line="970" pos:column="50">.</op:operator><name pos:line="970" pos:column="51">setInt</name></name><argument_list pos:line="970" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="970" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="970" pos:column="61">currentlyFilled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="971" pos:column="41">int</name></type> <name pos:line="971" pos:column="45">offerID</name> <init pos:line="971" pos:column="53">= <expr><call><name><name pos:line="971" pos:column="55">this</name><op:operator pos:line="971" pos:column="59">.</op:operator><name pos:line="971" pos:column="60">getOfferID</name></name><argument_list pos:line="971" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="972" pos:column="41">statement</name><op:operator pos:line="972" pos:column="50">.</op:operator><name pos:line="972" pos:column="51">setInt</name></name><argument_list pos:line="972" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="972" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="972" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="973" pos:column="41">statement</name><op:operator pos:line="973" pos:column="50">.</op:operator><name pos:line="973" pos:column="51">executeUpdate</name></name><argument_list pos:line="973" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="974" pos:column="41">Database</name><op:operator pos:line="974" pos:column="49">.</op:operator><name pos:line="974" pos:column="50">commitTransaction</name></name><argument_list pos:line="974" pos:column="67">(<argument><expr><name pos:line="974" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="975" pos:column="41">success</name> <op:operator pos:line="975" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="975" pos:column="51">true</lit:literal></expr>;</expr_stmt>
										
				}</block></then></if>					
				
			}</block>
			
			<catch pos:line="981" pos:column="25">catch<parameter_list pos:line="981" pos:column="30">(<param><decl><type><name pos:line="981" pos:column="31">SQLException</name></type> <name pos:line="981" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="981" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="982" pos:column="33">System</name><op:operator pos:line="982" pos:column="39">.</op:operator><name pos:line="982" pos:column="40">out</name><op:operator pos:line="982" pos:column="43">.</op:operator><name pos:line="982" pos:column="44">println</name></name><argument_list pos:line="982" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="982" pos:column="52">"Error in adding one seat"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="983" pos:column="33">System</name><op:operator pos:line="983" pos:column="39">.</op:operator><name pos:line="983" pos:column="40">out</name><op:operator pos:line="983" pos:column="43">.</op:operator><name pos:line="983" pos:column="44">println</name></name><argument_list pos:line="983" pos:column="51">(<argument><expr><call><name><name pos:line="983" pos:column="52">e</name><op:operator pos:line="983" pos:column="53">.</op:operator><name pos:line="983" pos:column="54">getMessage</name></name><argument_list pos:line="983" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="984" pos:column="33">e</name><op:operator pos:line="984" pos:column="34">.</op:operator><name pos:line="984" pos:column="35">printStackTrace</name></name><argument_list pos:line="984" pos:column="50">()</argument_list></call></expr>;</expr_stmt>	
			}</block></catch> <catch pos:line="985" pos:column="27">catch <parameter_list pos:line="985" pos:column="33">(<param><decl><type><name pos:line="985" pos:column="34">CourseOfferingDoesNotExistException</name></type> <name pos:line="985" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="985" pos:column="73">{
				<comment type="line" pos:line="986" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="987" pos:column="33">e</name><op:operator pos:line="987" pos:column="34">.</op:operator><name pos:line="987" pos:column="35">printStackTrace</name></name><argument_list pos:line="987" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			
		}</block>
		
		
		<finally pos:line="994" pos:column="17">finally<block pos:line="994" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="997" pos:column="17">return <expr><name pos:line="997" pos:column="24">success</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="1000" pos:column="9">/*
	 * Subtracts one seat from the course offering after the student unregisters
	 */</comment>
	<function><type><specifier pos:line="1003" pos:column="9">public</specifier> <name pos:line="1003" pos:column="16">boolean</name></type> <name pos:line="1003" pos:column="24">removeOneSeatFromCourseOffered</name><parameter_list pos:line="1003" pos:column="54">()</parameter_list> <throws pos:line="1003" pos:column="57">throws <argument><expr><name><name pos:line="1003" pos:column="64">CourseOffered</name><op:operator pos:line="1003" pos:column="77">.</op:operator><name pos:line="1003" pos:column="78">CourseOfferingDoesNotExistException</name></name></expr></argument></throws><block pos:line="1003" pos:column="113">{
		<decl_stmt><decl><type><name pos:line="1004" pos:column="17">boolean</name></type> <name pos:line="1004" pos:column="25">seatRemoved</name> <init pos:line="1004" pos:column="37">= <expr><lit:literal type="boolean" pos:line="1004" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1005" pos:column="17">int</name></type> <name pos:line="1005" pos:column="21">offerID</name> <init pos:line="1005" pos:column="29">= <expr><call><name><name pos:line="1005" pos:column="31">this</name><op:operator pos:line="1005" pos:column="35">.</op:operator><name pos:line="1005" pos:column="36">getOfferID</name></name><argument_list pos:line="1005" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="1006" pos:column="17">try<block pos:line="1006" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="1007" pos:column="25">Connection</name></type> <name pos:line="1007" pos:column="36">conn</name> <init pos:line="1007" pos:column="41">= <expr><call><name><name pos:line="1007" pos:column="43">Database</name><op:operator pos:line="1007" pos:column="51">.</op:operator><name pos:line="1007" pos:column="52">getConnection</name></name><argument_list pos:line="1007" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="1008" pos:column="25">try<block pos:line="1008" pos:column="28">{
				<if pos:line="1009" pos:column="33">if<condition pos:line="1009" pos:column="35">(<expr><name pos:line="1009" pos:column="36">conn</name> <op:operator pos:line="1009" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="1009" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="1009" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="1010" pos:column="41">String</name></type> <name pos:line="1010" pos:column="48">SQLcoursesOfferedSelect</name> <init pos:line="1010" pos:column="72">= <expr><lit:literal type="string" pos:line="1010" pos:column="74">"Select * FROM coursesoffered WHERE OfferID= ?;"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1011" pos:column="41">PreparedStatement</name></type> <name pos:line="1011" pos:column="59">statement</name> <init pos:line="1011" pos:column="69">= <expr><call><name><name pos:line="1011" pos:column="71">conn</name><op:operator pos:line="1011" pos:column="75">.</op:operator><name pos:line="1011" pos:column="76">prepareStatement</name></name><argument_list pos:line="1011" pos:column="92">(<argument><expr><name pos:line="1011" pos:column="93">SQLcoursesOfferedSelect</name></expr></argument>,<argument><expr><name><name pos:line="1011" pos:column="117">ResultSet</name><op:operator pos:line="1011" pos:column="126">.</op:operator><name pos:line="1011" pos:column="127">TYPE_FORWARD_ONLY</name></name></expr></argument>, <argument><expr><name><name pos:line="1011" pos:column="146">ResultSet</name><op:operator pos:line="1011" pos:column="155">.</op:operator><name pos:line="1011" pos:column="156">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1012" pos:column="41">statement</name><op:operator pos:line="1012" pos:column="50">.</op:operator><name pos:line="1012" pos:column="51">setInt</name></name><argument_list pos:line="1012" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1012" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1012" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1013" pos:column="41">ResultSet</name></type> <name pos:line="1013" pos:column="51">rs</name> <init pos:line="1013" pos:column="54">= <expr><call><name><name pos:line="1013" pos:column="56">statement</name><op:operator pos:line="1013" pos:column="65">.</op:operator><name pos:line="1013" pos:column="66">executeQuery</name></name><argument_list pos:line="1013" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1014" pos:column="41">if<condition pos:line="1014" pos:column="43">(<expr><call><name><name pos:line="1014" pos:column="44">rs</name><op:operator pos:line="1014" pos:column="46">.</op:operator><name pos:line="1014" pos:column="47">first</name></name><argument_list pos:line="1014" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="1014" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1015" pos:column="49">DBAnnotation</name><op:operator pos:line="1015" pos:column="61">.</op:operator><name pos:line="1015" pos:column="62">annoate</name></name><argument_list pos:line="1015" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1015" pos:column="70">"currentlyFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1015" pos:column="89">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1015" pos:column="107">"SeatsFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1015" pos:column="122">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="1016" pos:column="49">int</name></type> <name pos:line="1016" pos:column="53">currentlyFilled</name> <init pos:line="1016" pos:column="69">= <expr><call><name><name pos:line="1016" pos:column="71">rs</name><op:operator pos:line="1016" pos:column="73">.</op:operator><name pos:line="1016" pos:column="74">getInt</name></name><argument_list pos:line="1016" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="1016" pos:column="81">"SeatsFilled"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="1017" pos:column="49">if<condition pos:line="1017" pos:column="51">(<expr><name pos:line="1017" pos:column="52">currentlyFilled</name><op:operator pos:line="1017" pos:column="67">&lt;=</op:operator><lit:literal type="number" pos:line="1017" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="1017" pos:column="71">
							<return pos:line="1018" pos:column="57">return <expr><lit:literal type="boolean" pos:line="1018" pos:column="64">false</lit:literal></expr>;</return></then></if>
						<expr_stmt><expr><name pos:line="1019" pos:column="49">currentlyFilled</name> <op:operator pos:line="1019" pos:column="65">-=</op:operator> <lit:literal type="number" pos:line="1019" pos:column="68">1</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1020" pos:column="49">rs</name><op:operator pos:line="1020" pos:column="51">.</op:operator><name pos:line="1020" pos:column="52">updateInt</name></name><argument_list pos:line="1020" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="1020" pos:column="62">5</lit:literal></expr></argument>, <argument><expr><name pos:line="1020" pos:column="65">currentlyFilled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1021" pos:column="49">Database</name><op:operator pos:line="1021" pos:column="57">.</op:operator><name pos:line="1021" pos:column="58">commitTransaction</name></name><argument_list pos:line="1021" pos:column="75">(<argument><expr><name pos:line="1021" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1022" pos:column="49">seatRemoved</name> <op:operator pos:line="1022" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="1022" pos:column="63">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="1024" pos:column="41">else<block pos:line="1024" pos:column="45">{
						<throw pos:line="1025" pos:column="49">throw <expr><op:operator pos:line="1025" pos:column="55">new</op:operator> <call><name><name pos:line="1025" pos:column="59">CourseOffered</name><op:operator pos:line="1025" pos:column="72">.</op:operator><name pos:line="1025" pos:column="73">CourseOfferingDoesNotExistException</name></name><argument_list pos:line="1025" pos:column="108">()</argument_list></call></expr>;</throw>
					}</block></else></if>
					
				}</block></then></if>						
					
			}</block> <catch pos:line="1030" pos:column="27">catch<parameter_list pos:line="1030" pos:column="32">(<param><decl><type><name pos:line="1030" pos:column="33">SQLException</name></type> <name pos:line="1030" pos:column="46">e</name></decl></param>)</parameter_list><block pos:line="1030" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1031" pos:column="33">System</name><op:operator pos:line="1031" pos:column="39">.</op:operator><name pos:line="1031" pos:column="40">out</name><op:operator pos:line="1031" pos:column="43">.</op:operator><name pos:line="1031" pos:column="44">println</name></name><argument_list pos:line="1031" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1031" pos:column="52">"Error addind course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1032" pos:column="33">System</name><op:operator pos:line="1032" pos:column="39">.</op:operator><name pos:line="1032" pos:column="40">out</name><op:operator pos:line="1032" pos:column="43">.</op:operator><name pos:line="1032" pos:column="44">println</name></name><argument_list pos:line="1032" pos:column="51">(<argument><expr><call><name><name pos:line="1032" pos:column="52">e</name><op:operator pos:line="1032" pos:column="53">.</op:operator><name pos:line="1032" pos:column="54">getMessage</name></name><argument_list pos:line="1032" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1033" pos:column="33">e</name><op:operator pos:line="1033" pos:column="34">.</op:operator><name pos:line="1033" pos:column="35">printStackTrace</name></name><argument_list pos:line="1033" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1034" pos:column="33">Database</name><op:operator pos:line="1034" pos:column="41">.</op:operator><name pos:line="1034" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="1034" pos:column="61">(<argument><expr><name pos:line="1034" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch pos:line="1036" pos:column="19">catch <parameter_list pos:line="1036" pos:column="25">(<param><decl><type><name pos:line="1036" pos:column="26">Exception</name></type> <name pos:line="1036" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="1036" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="1037" pos:column="25">System</name><op:operator pos:line="1037" pos:column="31">.</op:operator><name pos:line="1037" pos:column="32">out</name><op:operator pos:line="1037" pos:column="35">.</op:operator><name pos:line="1037" pos:column="36">println</name></name><argument_list pos:line="1037" pos:column="43">(<argument><expr><name pos:line="1037" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			
		<return pos:line="1040" pos:column="17">return <expr><name pos:line="1040" pos:column="24">seatRemoved</name></expr> ;</return>
	}</block></function>
	
	<comment type="block" pos:line="1043" pos:column="9">/*
	 * Checks if the current course offering is scheduled or not
	 * Basically it acts as a safety check for some of the functions
	 */</comment>
	<function><type><specifier pos:line="1047" pos:column="9">public</specifier> <name pos:line="1047" pos:column="16">boolean</name></type> <name pos:line="1047" pos:column="24">checkIfScheduled</name><parameter_list pos:line="1047" pos:column="40">()</parameter_list> <throws pos:line="1047" pos:column="43">throws <argument><expr><name pos:line="1047" pos:column="50">CourseOfferingNotCurrentException</name></expr></argument></throws><block pos:line="1047" pos:column="83">{
		<if pos:line="1048" pos:column="17">if<condition pos:line="1048" pos:column="19">(<expr><op:operator pos:line="1048" pos:column="20">!</op:operator><call><name pos:line="1048" pos:column="21">checkIfCurrent</name><argument_list pos:line="1048" pos:column="35">()</argument_list></call></expr>)</condition><then><block pos:line="1048" pos:column="38">{
			<return pos:line="1049" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1049" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="1052" pos:column="17">boolean</name></type> <name pos:line="1052" pos:column="25">doesExist</name> <init pos:line="1052" pos:column="35">= <expr><lit:literal type="boolean" pos:line="1052" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="1054" pos:column="17">try<block pos:line="1054" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="1055" pos:column="25">Connection</name></type> <name pos:line="1055" pos:column="36">conn</name> <init pos:line="1055" pos:column="41">= <expr><call><name><name pos:line="1055" pos:column="43">Database</name><op:operator pos:line="1055" pos:column="51">.</op:operator><name pos:line="1055" pos:column="52">getConnection</name></name><argument_list pos:line="1055" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="1057" pos:column="25">try<block pos:line="1057" pos:column="28">{
				<if pos:line="1058" pos:column="33">if<condition pos:line="1058" pos:column="35">(<expr><name pos:line="1058" pos:column="36">conn</name> <op:operator pos:line="1058" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="1058" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="1058" pos:column="49">{
					
					<comment type="line" pos:line="1060" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="1061" pos:column="41">String</name></type> <name pos:line="1061" pos:column="48">scheduleSelect</name> <init pos:line="1061" pos:column="63">= <expr><lit:literal type="string" pos:line="1061" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="1062" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1062" pos:column="59">" FROM courseschedule"</lit:literal>
							<op:operator pos:line="1063" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1063" pos:column="59">" WHERE OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1064" pos:column="41">PreparedStatement</name></type> <name pos:line="1064" pos:column="59">statement</name> <init pos:line="1064" pos:column="69">= <expr><call><name><name pos:line="1064" pos:column="71">conn</name><op:operator pos:line="1064" pos:column="75">.</op:operator><name pos:line="1064" pos:column="76">prepareStatement</name></name><argument_list pos:line="1064" pos:column="92">(<argument><expr><name pos:line="1064" pos:column="93">scheduleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1065" pos:column="41">statement</name><op:operator pos:line="1065" pos:column="50">.</op:operator><name pos:line="1065" pos:column="51">setInt</name></name><argument_list pos:line="1065" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1065" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1065" pos:column="61">this</name><op:operator pos:line="1065" pos:column="65">.</op:operator><name pos:line="1065" pos:column="66">getOfferID</name></name><argument_list pos:line="1065" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1066" pos:column="41">ResultSet</name></type> <name pos:line="1066" pos:column="51">rs</name> <init pos:line="1066" pos:column="54">= <expr><call><name><name pos:line="1066" pos:column="56">statement</name><op:operator pos:line="1066" pos:column="65">.</op:operator><name pos:line="1066" pos:column="66">executeQuery</name></name><argument_list pos:line="1066" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="1068" pos:column="41">if<condition pos:line="1068" pos:column="43">(<expr><call><name><name pos:line="1068" pos:column="44">rs</name><op:operator pos:line="1068" pos:column="46">.</op:operator><name pos:line="1068" pos:column="47">first</name></name><argument_list pos:line="1068" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="1068" pos:column="55">{
						<expr_stmt><expr><name pos:line="1069" pos:column="49">doesExist</name> <op:operator pos:line="1069" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="1069" pos:column="61">true</lit:literal></expr>;</expr_stmt>	
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="1075" pos:column="25">catch<parameter_list pos:line="1075" pos:column="30">(<param><decl><type><name pos:line="1075" pos:column="31">SQLException</name></type> <name pos:line="1075" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="1075" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="1076" pos:column="33">System</name><op:operator pos:line="1076" pos:column="39">.</op:operator><name pos:line="1076" pos:column="40">out</name><op:operator pos:line="1076" pos:column="43">.</op:operator><name pos:line="1076" pos:column="44">println</name></name><argument_list pos:line="1076" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1076" pos:column="52">"Error in SQL"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1077" pos:column="33">System</name><op:operator pos:line="1077" pos:column="39">.</op:operator><name pos:line="1077" pos:column="40">out</name><op:operator pos:line="1077" pos:column="43">.</op:operator><name pos:line="1077" pos:column="44">println</name></name><argument_list pos:line="1077" pos:column="51">(<argument><expr><call><name><name pos:line="1077" pos:column="52">e</name><op:operator pos:line="1077" pos:column="53">.</op:operator><name pos:line="1077" pos:column="54">getMessage</name></name><argument_list pos:line="1077" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1078" pos:column="33">e</name><op:operator pos:line="1078" pos:column="34">.</op:operator><name pos:line="1078" pos:column="35">printStackTrace</name></name><argument_list pos:line="1078" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="1083" pos:column="17">finally<block pos:line="1083" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="1086" pos:column="17">return <expr><name pos:line="1086" pos:column="24">doesExist</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="1089" pos:column="9">/*
	 * Checks of the offer id exists in the database 
	 */</comment>
	<function><type><specifier pos:line="1092" pos:column="9">public</specifier> <specifier pos:line="1092" pos:column="16">static</specifier> <name pos:line="1092" pos:column="23">boolean</name></type> <name pos:line="1092" pos:column="31">checkIfExists</name><parameter_list pos:line="1092" pos:column="44">(<param><decl><type><name pos:line="1092" pos:column="45">int</name></type> <name pos:line="1092" pos:column="49">offerID</name></decl></param>)</parameter_list><block pos:line="1092" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="1093" pos:column="17">boolean</name></type> <name pos:line="1093" pos:column="25">doesExist</name> <init pos:line="1093" pos:column="35">= <expr><lit:literal type="boolean" pos:line="1093" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="1095" pos:column="17">try<block pos:line="1095" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="1096" pos:column="25">Connection</name></type> <name pos:line="1096" pos:column="36">conn</name> <init pos:line="1096" pos:column="41">= <expr><call><name><name pos:line="1096" pos:column="43">Database</name><op:operator pos:line="1096" pos:column="51">.</op:operator><name pos:line="1096" pos:column="52">getConnection</name></name><argument_list pos:line="1096" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="1098" pos:column="25">try<block pos:line="1098" pos:column="28">{
				<if pos:line="1099" pos:column="33">if<condition pos:line="1099" pos:column="35">(<expr><name pos:line="1099" pos:column="36">conn</name> <op:operator pos:line="1099" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="1099" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="1099" pos:column="49">{
					
					<comment type="line" pos:line="1101" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="1102" pos:column="41">String</name></type> <name pos:line="1102" pos:column="48">scheduleSelect</name> <init pos:line="1102" pos:column="63">= <expr><lit:literal type="string" pos:line="1102" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="1103" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1103" pos:column="59">" FROM coursesoffered"</lit:literal>
							<op:operator pos:line="1104" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1104" pos:column="59">" WHERE OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1105" pos:column="41">PreparedStatement</name></type> <name pos:line="1105" pos:column="59">statement</name> <init pos:line="1105" pos:column="69">= <expr><call><name><name pos:line="1105" pos:column="71">conn</name><op:operator pos:line="1105" pos:column="75">.</op:operator><name pos:line="1105" pos:column="76">prepareStatement</name></name><argument_list pos:line="1105" pos:column="92">(<argument><expr><name pos:line="1105" pos:column="93">scheduleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1106" pos:column="41">statement</name><op:operator pos:line="1106" pos:column="50">.</op:operator><name pos:line="1106" pos:column="51">setInt</name></name><argument_list pos:line="1106" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1106" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1106" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1107" pos:column="41">ResultSet</name></type> <name pos:line="1107" pos:column="51">rs</name> <init pos:line="1107" pos:column="54">= <expr><call><name><name pos:line="1107" pos:column="56">statement</name><op:operator pos:line="1107" pos:column="65">.</op:operator><name pos:line="1107" pos:column="66">executeQuery</name></name><argument_list pos:line="1107" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="1109" pos:column="41">if<condition pos:line="1109" pos:column="43">(<expr><call><name><name pos:line="1109" pos:column="44">rs</name><op:operator pos:line="1109" pos:column="46">.</op:operator><name pos:line="1109" pos:column="47">first</name></name><argument_list pos:line="1109" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="1109" pos:column="55">{
						<expr_stmt><expr><name pos:line="1110" pos:column="49">doesExist</name> <op:operator pos:line="1110" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="1110" pos:column="61">true</lit:literal></expr>;</expr_stmt>	
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="1116" pos:column="25">catch<parameter_list pos:line="1116" pos:column="30">(<param><decl><type><name pos:line="1116" pos:column="31">SQLException</name></type> <name pos:line="1116" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="1116" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="1117" pos:column="33">System</name><op:operator pos:line="1117" pos:column="39">.</op:operator><name pos:line="1117" pos:column="40">out</name><op:operator pos:line="1117" pos:column="43">.</op:operator><name pos:line="1117" pos:column="44">println</name></name><argument_list pos:line="1117" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1117" pos:column="52">"Error in SQL"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1118" pos:column="33">System</name><op:operator pos:line="1118" pos:column="39">.</op:operator><name pos:line="1118" pos:column="40">out</name><op:operator pos:line="1118" pos:column="43">.</op:operator><name pos:line="1118" pos:column="44">println</name></name><argument_list pos:line="1118" pos:column="51">(<argument><expr><call><name><name pos:line="1118" pos:column="52">e</name><op:operator pos:line="1118" pos:column="53">.</op:operator><name pos:line="1118" pos:column="54">getMessage</name></name><argument_list pos:line="1118" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1119" pos:column="33">e</name><op:operator pos:line="1119" pos:column="34">.</op:operator><name pos:line="1119" pos:column="35">printStackTrace</name></name><argument_list pos:line="1119" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="1124" pos:column="17">finally<block pos:line="1124" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="1127" pos:column="17">return <expr><name pos:line="1127" pos:column="24">doesExist</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="1130" pos:column="9">/*
	 * Returns the semester id of teh current on going semester
	 */</comment>
	<function><type><specifier pos:line="1133" pos:column="9">public</specifier> <specifier pos:line="1133" pos:column="16">static</specifier> <name pos:line="1133" pos:column="23">int</name></type> <name pos:line="1133" pos:column="27">getCurrentSemesterID</name><parameter_list pos:line="1133" pos:column="47">()</parameter_list><block pos:line="1133" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="1134" pos:column="17">int</name></type> <name pos:line="1134" pos:column="21">current</name> <init pos:line="1134" pos:column="29">= <expr><op:operator pos:line="1134" pos:column="31">-</op:operator><lit:literal type="number" pos:line="1134" pos:column="32">1</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="1135" pos:column="17">try<block pos:line="1135" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="1136" pos:column="25">Connection</name></type> <name pos:line="1136" pos:column="36">conn</name> <init pos:line="1136" pos:column="41">= <expr><call><name><name pos:line="1136" pos:column="43">Database</name><op:operator pos:line="1136" pos:column="51">.</op:operator><name pos:line="1136" pos:column="52">getConnection</name></name><argument_list pos:line="1136" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="1138" pos:column="25">try<block pos:line="1138" pos:column="28">{
				<if pos:line="1139" pos:column="33">if<condition pos:line="1139" pos:column="35">(<expr><name pos:line="1139" pos:column="36">conn</name> <op:operator pos:line="1139" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="1139" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="1139" pos:column="49">{
					
					<comment type="line" pos:line="1141" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="1142" pos:column="41">String</name></type> <name pos:line="1142" pos:column="48">semSelect</name> <init pos:line="1142" pos:column="58">= <expr><lit:literal type="string" pos:line="1142" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="1143" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1143" pos:column="59">" FROM semester"</lit:literal>
							<op:operator pos:line="1144" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1144" pos:column="59">" WHERE isCurrent= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1145" pos:column="41">PreparedStatement</name></type> <name pos:line="1145" pos:column="59">statement</name> <init pos:line="1145" pos:column="69">= <expr><call><name><name pos:line="1145" pos:column="71">conn</name><op:operator pos:line="1145" pos:column="75">.</op:operator><name pos:line="1145" pos:column="76">prepareStatement</name></name><argument_list pos:line="1145" pos:column="92">(<argument><expr><name pos:line="1145" pos:column="93">semSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1146" pos:column="41">statement</name><op:operator pos:line="1146" pos:column="50">.</op:operator><name pos:line="1146" pos:column="51">setInt</name></name><argument_list pos:line="1146" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1146" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1146" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1147" pos:column="41">ResultSet</name></type> <name pos:line="1147" pos:column="51">rs</name> <init pos:line="1147" pos:column="54">= <expr><call><name><name pos:line="1147" pos:column="56">statement</name><op:operator pos:line="1147" pos:column="65">.</op:operator><name pos:line="1147" pos:column="66">executeQuery</name></name><argument_list pos:line="1147" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="1149" pos:column="41">if<condition pos:line="1149" pos:column="43">(<expr><call><name><name pos:line="1149" pos:column="44">rs</name><op:operator pos:line="1149" pos:column="46">.</op:operator><name pos:line="1149" pos:column="47">first</name></name><argument_list pos:line="1149" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="1149" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="1150" pos:column="49">DBAnnotation</name><op:operator pos:line="1150" pos:column="61">.</op:operator><name pos:line="1150" pos:column="62">annoate</name></name><argument_list pos:line="1150" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1150" pos:column="70">"current"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1150" pos:column="81">"semester"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1150" pos:column="93">"SemesterID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1150" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1151" pos:column="49">current</name> <op:operator pos:line="1151" pos:column="57">=</op:operator> <call><name><name pos:line="1151" pos:column="59">rs</name><op:operator pos:line="1151" pos:column="61">.</op:operator><name pos:line="1151" pos:column="62">getInt</name></name><argument_list pos:line="1151" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1151" pos:column="69">"SemesterID"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>							
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="1157" pos:column="25">catch<parameter_list pos:line="1157" pos:column="30">(<param><decl><type><name pos:line="1157" pos:column="31">SQLException</name></type> <name pos:line="1157" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="1157" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="1158" pos:column="33">System</name><op:operator pos:line="1158" pos:column="39">.</op:operator><name pos:line="1158" pos:column="40">out</name><op:operator pos:line="1158" pos:column="43">.</op:operator><name pos:line="1158" pos:column="44">println</name></name><argument_list pos:line="1158" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1158" pos:column="52">"Error in SQL"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1159" pos:column="33">System</name><op:operator pos:line="1159" pos:column="39">.</op:operator><name pos:line="1159" pos:column="40">out</name><op:operator pos:line="1159" pos:column="43">.</op:operator><name pos:line="1159" pos:column="44">println</name></name><argument_list pos:line="1159" pos:column="51">(<argument><expr><call><name><name pos:line="1159" pos:column="52">e</name><op:operator pos:line="1159" pos:column="53">.</op:operator><name pos:line="1159" pos:column="54">getMessage</name></name><argument_list pos:line="1159" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1160" pos:column="33">e</name><op:operator pos:line="1160" pos:column="34">.</op:operator><name pos:line="1160" pos:column="35">printStackTrace</name></name><argument_list pos:line="1160" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			<return pos:line="1163" pos:column="25">return <expr><name pos:line="1163" pos:column="32">current</name></expr>;</return>
						
		}</block>
		
		<finally pos:line="1167" pos:column="17">finally<block pos:line="1167" pos:column="24">{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="1171" pos:column="9">/*
	 * Checks of the course offering is current or if it was a previously offered course
	 */</comment>
	<function><type><specifier pos:line="1174" pos:column="9">public</specifier> <name pos:line="1174" pos:column="16">boolean</name></type> <name pos:line="1174" pos:column="24">checkIfCurrent</name><parameter_list pos:line="1174" pos:column="38">()</parameter_list><block pos:line="1174" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="1175" pos:column="17">int</name></type> <name pos:line="1175" pos:column="21">semID</name> <init pos:line="1175" pos:column="27">= <expr><call><name><name pos:line="1175" pos:column="29">this</name><op:operator pos:line="1175" pos:column="33">.</op:operator><name pos:line="1175" pos:column="34">getSemesterID</name></name><argument_list pos:line="1175" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="1176" pos:column="17">return <expr><op:operator pos:line="1176" pos:column="24">(</op:operator><name pos:line="1176" pos:column="25">semID</name> <op:operator pos:line="1176" pos:column="31">==</op:operator> <call><name pos:line="1176" pos:column="34">getCurrentSemesterID</name><argument_list pos:line="1176" pos:column="54">()</argument_list></call><op:operator pos:line="1176" pos:column="56">)</op:operator></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="1179" pos:column="9">/*
	 * Checks if the course is register-able by the student passed
	 */</comment>
	<function><type><specifier pos:line="1182" pos:column="9">public</specifier> <name pos:line="1182" pos:column="16">boolean</name></type> <name pos:line="1182" pos:column="24">isCourseRegistrableBy</name><parameter_list pos:line="1182" pos:column="45">(<param><decl><type><name pos:line="1182" pos:column="46">Student</name></type> <name pos:line="1182" pos:column="54">student</name></decl></param>)</parameter_list><block pos:line="1182" pos:column="62">{
		
		<if pos:line="1184" pos:column="17">if<condition pos:line="1184" pos:column="19">(<expr><call><name><name pos:line="1184" pos:column="20">WaitList</name><op:operator pos:line="1184" pos:column="28">.</op:operator><name pos:line="1184" pos:column="29">isStudentEmailed</name></name><argument_list pos:line="1184" pos:column="45">(<argument><expr><name pos:line="1184" pos:column="46">student</name></expr></argument>, <argument><expr><name pos:line="1184" pos:column="55">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="1184" pos:column="64">{
			<return pos:line="1185" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1185" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="1188" pos:column="17">int</name></type> <name pos:line="1188" pos:column="21">availableSeats</name> <init pos:line="1188" pos:column="36">= <expr><call><name><name pos:line="1188" pos:column="38">this</name><op:operator pos:line="1188" pos:column="42">.</op:operator><name pos:line="1188" pos:column="43">getTotalCapacity</name></name><argument_list pos:line="1188" pos:column="59">()</argument_list></call> <op:operator pos:line="1188" pos:column="62">-</op:operator> <call><name><name pos:line="1188" pos:column="64">this</name><op:operator pos:line="1188" pos:column="68">.</op:operator><name pos:line="1188" pos:column="69">getCurrentlyFilled</name></name><argument_list pos:line="1188" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1189" pos:column="17">if<condition pos:line="1189" pos:column="19">(<expr><op:operator pos:line="1189" pos:column="20">(</op:operator><name pos:line="1189" pos:column="21">availableSeats</name> <op:operator pos:line="1189" pos:column="36">-</op:operator> <call><name><name pos:line="1189" pos:column="38">WaitList</name><op:operator pos:line="1189" pos:column="46">.</op:operator><name pos:line="1189" pos:column="47">getStudentsOnEmailList</name></name><argument_list pos:line="1189" pos:column="69">(<argument><expr><name pos:line="1189" pos:column="70">offerID</name></expr></argument>)</argument_list></call><op:operator pos:line="1189" pos:column="78">.</op:operator><call><name pos:line="1189" pos:column="79">size</name><argument_list pos:line="1189" pos:column="83">()</argument_list></call><op:operator pos:line="1189" pos:column="85">)</op:operator> <op:operator pos:line="1189" pos:column="87">&lt;=</op:operator> <lit:literal type="number" pos:line="1189" pos:column="90">0</lit:literal></expr>)</condition><then><block pos:line="1189" pos:column="92">{
			<expr_stmt><expr><call><name><name pos:line="1190" pos:column="25">System</name><op:operator pos:line="1190" pos:column="31">.</op:operator><name pos:line="1190" pos:column="32">out</name><op:operator pos:line="1190" pos:column="35">.</op:operator><name pos:line="1190" pos:column="36">println</name></name><argument_list pos:line="1190" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="1190" pos:column="44">"----------------------------------Difference is:"</lit:literal><op:operator pos:line="1190" pos:column="94">+</op:operator><op:operator pos:line="1190" pos:column="95">(</op:operator><call><name><name pos:line="1190" pos:column="96">this</name><op:operator pos:line="1190" pos:column="100">.</op:operator><name pos:line="1190" pos:column="101">getCurrentlyFilled</name></name><argument_list pos:line="1190" pos:column="119">()</argument_list></call> <op:operator pos:line="1190" pos:column="122">-</op:operator> <call><name><name pos:line="1190" pos:column="124">WaitList</name><op:operator pos:line="1190" pos:column="132">.</op:operator><name pos:line="1190" pos:column="133">getStudentsOnEmailList</name></name><argument_list pos:line="1190" pos:column="155">(<argument><expr><name pos:line="1190" pos:column="156">offerID</name></expr></argument>)</argument_list></call><op:operator pos:line="1190" pos:column="164">.</op:operator><call><name pos:line="1190" pos:column="165">size</name><argument_list pos:line="1190" pos:column="169">()</argument_list></call><op:operator pos:line="1190" pos:column="171">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="1191" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1191" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<comment type="line" pos:line="1194" pos:column="17">//check if the student is already registered</comment>
		<if pos:line="1195" pos:column="17">if<condition pos:line="1195" pos:column="19">(<expr><call><name><name pos:line="1195" pos:column="20">WaitList</name><op:operator pos:line="1195" pos:column="28">.</op:operator><name pos:line="1195" pos:column="29">isStudentRegistered</name></name><argument_list pos:line="1195" pos:column="48">(<argument><expr><name pos:line="1195" pos:column="49">student</name></expr></argument>, <argument><expr><name pos:line="1195" pos:column="58">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="1195" pos:column="67">{
			<return pos:line="1196" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1196" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<comment type="line" pos:line="1199" pos:column="17">//check if the course is full</comment>
		<try pos:line="1200" pos:column="17">try <block pos:line="1200" pos:column="21">{
			<if pos:line="1201" pos:column="25">if<condition pos:line="1201" pos:column="27">(<expr><call><name pos:line="1201" pos:column="28">isCourseFull</name><argument_list pos:line="1201" pos:column="40">()</argument_list></call></expr>)</condition><then><block pos:line="1201" pos:column="43">{
				<return pos:line="1202" pos:column="33">return <expr><lit:literal type="boolean" pos:line="1202" pos:column="40">false</lit:literal></expr>;</return>
			}</block></then></if>
		}</block> <catch pos:line="1204" pos:column="19">catch <parameter_list pos:line="1204" pos:column="25">(<param><decl><type><name pos:line="1204" pos:column="26">CourseOfferingDoesNotExistException</name></type> <name pos:line="1204" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="1204" pos:column="65">{
			<comment type="line" pos:line="1205" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="1206" pos:column="25">e</name><op:operator pos:line="1206" pos:column="26">.</op:operator><name pos:line="1206" pos:column="27">printStackTrace</name></name><argument_list pos:line="1206" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
		<comment type="line" pos:line="1210" pos:column="17">//check if the student is on the waitList</comment>
		<if pos:line="1211" pos:column="17">if<condition pos:line="1211" pos:column="19">(<expr><call><name><name pos:line="1211" pos:column="20">WaitList</name><op:operator pos:line="1211" pos:column="28">.</op:operator><name pos:line="1211" pos:column="29">isStudentOnWaitList</name></name><argument_list pos:line="1211" pos:column="48">(<argument><expr><name pos:line="1211" pos:column="49">student</name></expr></argument>, <argument><expr><name pos:line="1211" pos:column="58">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="1211" pos:column="67">{
			<return pos:line="1212" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1212" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="1215" pos:column="17">if<condition pos:line="1215" pos:column="19">(<expr><op:operator pos:line="1215" pos:column="20">!</op:operator><call><name><name pos:line="1215" pos:column="21">WaitList</name><op:operator pos:line="1215" pos:column="29">.</op:operator><name pos:line="1215" pos:column="30">isWaitListEmpty</name></name><argument_list pos:line="1215" pos:column="45">(<argument><expr><name pos:line="1215" pos:column="46">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="1215" pos:column="55">{
			<return pos:line="1216" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1216" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
				
		<return pos:line="1219" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1219" pos:column="24">true</lit:literal></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="1223" pos:column="9">/*
	 * Sends all the course files to the student who is passed as a parameter
	 */</comment>
	<function><type><specifier pos:line="1226" pos:column="9">public</specifier> <name pos:line="1226" pos:column="16">boolean</name></type> <name pos:line="1226" pos:column="24">sendCourseFilesToStudent</name><parameter_list pos:line="1226" pos:column="48">(<param><decl><type><name pos:line="1226" pos:column="49">Student</name></type> <name pos:line="1226" pos:column="57">s</name></decl></param>)</parameter_list><block pos:line="1226" pos:column="59">{
		<decl_stmt><decl><type><name><name pos:line="1227" pos:column="17">ArrayList</name><argument_list pos:line="1227" pos:column="26">&lt;<argument><name pos:line="1227" pos:column="27">File</name></argument>&gt;</argument_list></name></type> <name pos:line="1227" pos:column="33">file</name> <init pos:line="1227" pos:column="38">= <expr><call><name><name pos:line="1227" pos:column="40">this</name><op:operator pos:line="1227" pos:column="44">.</op:operator><name pos:line="1227" pos:column="45">getFiles</name></name><argument_list pos:line="1227" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="1229" pos:column="17">String</name> <index pos:line="1229" pos:column="24">[]</index></type> <name pos:line="1229" pos:column="27">attachments</name> <init pos:line="1229" pos:column="39">= <expr><op:operator pos:line="1229" pos:column="41">new</op:operator> <name><name pos:line="1229" pos:column="45">String</name><index pos:line="1229" pos:column="51">[<expr><call><name><name pos:line="1229" pos:column="52">file</name><op:operator pos:line="1229" pos:column="56">.</op:operator><name pos:line="1229" pos:column="57">size</name></name><argument_list pos:line="1229" pos:column="61">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for pos:line="1230" pos:column="17">for(<init><decl><type><name pos:line="1230" pos:column="21">int</name></type> <name pos:line="1230" pos:column="25">i</name><init pos:line="1230" pos:column="26">=<expr><lit:literal type="number" pos:line="1230" pos:column="27">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="1230" pos:column="29">i</name><op:operator pos:line="1230" pos:column="30">&lt;</op:operator><call><name><name pos:line="1230" pos:column="31">file</name><op:operator pos:line="1230" pos:column="35">.</op:operator><name pos:line="1230" pos:column="36">size</name></name><argument_list pos:line="1230" pos:column="40">()</argument_list></call></expr>;</condition><incr><expr><name pos:line="1230" pos:column="43">i</name><op:operator pos:line="1230" pos:column="44">++</op:operator></expr></incr>)<block pos:line="1230" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="1231" pos:column="25">File</name></type> <name pos:line="1231" pos:column="30">f</name> <init pos:line="1231" pos:column="32">= <expr><call><name><name pos:line="1231" pos:column="34">file</name><op:operator pos:line="1231" pos:column="38">.</op:operator><name pos:line="1231" pos:column="39">get</name></name><argument_list pos:line="1231" pos:column="42">(<argument><expr><name pos:line="1231" pos:column="43">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1232" pos:column="25">String</name></type> <name pos:line="1232" pos:column="32">userDir</name> <init pos:line="1232" pos:column="40">= <expr><call><name><name pos:line="1232" pos:column="42">System</name><op:operator pos:line="1232" pos:column="48">.</op:operator><name pos:line="1232" pos:column="49">getProperty</name></name><argument_list pos:line="1232" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="1232" pos:column="61">"user.dir"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="1233" pos:column="25">attachments</name><index pos:line="1233" pos:column="36">[<expr><name pos:line="1233" pos:column="37">i</name></expr>]</index></name> <op:operator pos:line="1233" pos:column="40">=</op:operator> <name pos:line="1233" pos:column="42">userDir</name><op:operator pos:line="1233" pos:column="49">+</op:operator><call><name><name pos:line="1233" pos:column="50">f</name><op:operator pos:line="1233" pos:column="51">.</op:operator><name pos:line="1233" pos:column="52">getFileLocation</name></name><argument_list pos:line="1233" pos:column="67">()</argument_list></call><op:operator pos:line="1233" pos:column="69">+</op:operator><lit:literal type="string" pos:line="1233" pos:column="70">"\\"</lit:literal><op:operator pos:line="1233" pos:column="74">+</op:operator><call><name><name pos:line="1233" pos:column="75">f</name><op:operator pos:line="1233" pos:column="76">.</op:operator><name pos:line="1233" pos:column="77">getFileName</name></name><argument_list pos:line="1233" pos:column="88">()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<decl_stmt><decl><type><name pos:line="1236" pos:column="17">Email</name></type> <name pos:line="1236" pos:column="23">email</name> <init pos:line="1236" pos:column="29">= <expr><call><name><name pos:line="1236" pos:column="31">Email</name><op:operator pos:line="1236" pos:column="36">.</op:operator><name pos:line="1236" pos:column="37">getInstance</name></name><argument_list pos:line="1236" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="1236" pos:column="49">"umas.uic@gmail.com"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1236" pos:column="71">"cs597project"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1237" pos:column="17">boolean</name></type> <name pos:line="1237" pos:column="25">isSent</name> <init pos:line="1237" pos:column="32">= <expr><call><name><name pos:line="1237" pos:column="34">email</name><op:operator pos:line="1237" pos:column="39">.</op:operator><name pos:line="1237" pos:column="40">sendEmailWithAttachments</name></name><argument_list pos:line="1237" pos:column="64">(<argument><expr><call><name><name pos:line="1237" pos:column="65">s</name><op:operator pos:line="1237" pos:column="66">.</op:operator><name pos:line="1237" pos:column="67">getUserName</name></name><argument_list pos:line="1237" pos:column="78">()</argument_list></call><op:operator pos:line="1237" pos:column="80">+</op:operator><lit:literal type="string" pos:line="1237" pos:column="81">"@umasuic.edu"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1237" pos:column="97">"Course files for course "</lit:literal><op:operator pos:line="1237" pos:column="123">+</op:operator><call><name><name pos:line="1237" pos:column="124">this</name><op:operator pos:line="1237" pos:column="128">.</op:operator><name pos:line="1237" pos:column="129">getCourseName</name></name><argument_list pos:line="1237" pos:column="142">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1237" pos:column="146">""</lit:literal>
				<op:operator pos:line="1238" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="1238" pos:column="35">"Find attachments"</lit:literal></expr></argument>, <argument><expr><name pos:line="1238" pos:column="55">attachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return pos:line="1240" pos:column="17">return <expr><name pos:line="1240" pos:column="24">isSent</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="1243" pos:column="9">public</specifier> <specifier pos:line="1243" pos:column="16">static</specifier> <name><name pos:line="1243" pos:column="23">ArrayList</name><argument_list pos:line="1243" pos:column="32">&lt;<argument><name pos:line="1243" pos:column="33">TA</name></argument>&gt;</argument_list></name></type> <name pos:line="1243" pos:column="37">getTAsForCourse</name><parameter_list pos:line="1243" pos:column="52">(<param><decl><type><name pos:line="1243" pos:column="53">CourseOffered</name></type> <name pos:line="1243" pos:column="67">co</name></decl></param>)</parameter_list><block pos:line="1243" pos:column="70">{
		<decl_stmt><decl><type><name><name pos:line="1244" pos:column="17">ArrayList</name><argument_list pos:line="1244" pos:column="26">&lt;<argument><name pos:line="1244" pos:column="27">TA</name></argument>&gt;</argument_list></name></type> <name pos:line="1244" pos:column="31">tas</name> <init pos:line="1244" pos:column="35">= <expr><op:operator pos:line="1244" pos:column="37">new</op:operator> <call><name><name pos:line="1244" pos:column="41">ArrayList</name><argument_list pos:line="1244" pos:column="50">&lt;<argument><name pos:line="1244" pos:column="51">TA</name></argument>&gt;</argument_list></name><argument_list pos:line="1244" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1245" pos:column="17">if<condition pos:line="1245" pos:column="19">(<expr><name pos:line="1245" pos:column="20">co</name><op:operator pos:line="1245" pos:column="22">==</op:operator><lit:literal type="null" pos:line="1245" pos:column="24">null</lit:literal></expr>)</condition><then pos:line="1245" pos:column="29">
			<return pos:line="1246" pos:column="25">return <expr><name pos:line="1246" pos:column="32">tas</name></expr>;</return></then></if>
		
		<try pos:line="1248" pos:column="17">try<block pos:line="1248" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="1249" pos:column="25">Connection</name></type> <name pos:line="1249" pos:column="36">conn</name> <init pos:line="1249" pos:column="41">= <expr><call><name><name pos:line="1249" pos:column="43">Database</name><op:operator pos:line="1249" pos:column="51">.</op:operator><name pos:line="1249" pos:column="52">getConnection</name></name><argument_list pos:line="1249" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="1251" pos:column="25">try<block pos:line="1251" pos:column="28">{
				<if pos:line="1252" pos:column="33">if<condition pos:line="1252" pos:column="35">(<expr><name pos:line="1252" pos:column="36">conn</name> <op:operator pos:line="1252" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="1252" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="1252" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="1253" pos:column="41">String</name></type> <name pos:line="1253" pos:column="48">SQLSelect</name> <init pos:line="1253" pos:column="58">= <expr><lit:literal type="string" pos:line="1253" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="1254" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1254" pos:column="59">" FROM teachingassistant as t"</lit:literal>
							<op:operator pos:line="1255" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="1255" pos:column="59">" WHERE t.OfferID = ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1256" pos:column="41">PreparedStatement</name></type> <name pos:line="1256" pos:column="59">statement</name> <init pos:line="1256" pos:column="69">= <expr><call><name><name pos:line="1256" pos:column="71">conn</name><op:operator pos:line="1256" pos:column="75">.</op:operator><name pos:line="1256" pos:column="76">prepareStatement</name></name><argument_list pos:line="1256" pos:column="92">(<argument><expr><name pos:line="1256" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1257" pos:column="41">statement</name><op:operator pos:line="1257" pos:column="50">.</op:operator><name pos:line="1257" pos:column="51">setInt</name></name><argument_list pos:line="1257" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="1257" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1257" pos:column="61">co</name><op:operator pos:line="1257" pos:column="63">.</op:operator><name pos:line="1257" pos:column="64">getOfferID</name></name><argument_list pos:line="1257" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1258" pos:column="41">ResultSet</name></type> <name pos:line="1258" pos:column="51">rs</name> <init pos:line="1258" pos:column="54">= <expr><call><name><name pos:line="1258" pos:column="56">statement</name><op:operator pos:line="1258" pos:column="65">.</op:operator><name pos:line="1258" pos:column="66">executeQuery</name></name><argument_list pos:line="1258" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="1260" pos:column="41">while<condition pos:line="1260" pos:column="46">(<expr><call><name><name pos:line="1260" pos:column="47">rs</name><op:operator pos:line="1260" pos:column="49">.</op:operator><name pos:line="1260" pos:column="50">next</name></name><argument_list pos:line="1260" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="1260" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="1261" pos:column="49">DBAnnotation</name><op:operator pos:line="1261" pos:column="61">.</op:operator><name pos:line="1261" pos:column="62">annoate</name></name><argument_list pos:line="1261" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1261" pos:column="70">"taID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1261" pos:column="78">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1261" pos:column="99">"TaUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1261" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="1262" pos:column="49">int</name></type> <name pos:line="1262" pos:column="53">taID</name> <init pos:line="1262" pos:column="58">= <expr><call><name><name pos:line="1262" pos:column="60">rs</name><op:operator pos:line="1262" pos:column="62">.</op:operator><name pos:line="1262" pos:column="63">getInt</name></name><argument_list pos:line="1262" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1262" pos:column="70">"TaUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="1263" pos:column="49">TA</name></type> <name pos:line="1263" pos:column="52">ta</name> <init pos:line="1263" pos:column="55">= <expr><op:operator pos:line="1263" pos:column="57">new</op:operator> <call><name pos:line="1263" pos:column="61">TA</name><argument_list pos:line="1263" pos:column="63">(<argument><expr><name pos:line="1263" pos:column="64">taID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="1264" pos:column="49">tas</name><op:operator pos:line="1264" pos:column="52">.</op:operator><name pos:line="1264" pos:column="53">add</name></name><argument_list pos:line="1264" pos:column="56">(<argument><expr><name pos:line="1264" pos:column="57">ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>					
				}</block></then>
					
					
				<else pos:line="1269" pos:column="33">else<block pos:line="1269" pos:column="37">{
					<throw pos:line="1270" pos:column="41">throw <expr><op:operator pos:line="1270" pos:column="47">new</op:operator> <call><name pos:line="1270" pos:column="51">IllegalAccessException</name><argument_list pos:line="1270" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="1270" pos:column="74">"TA does not exits - CoursesOffered.java"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></else></if>
										
					
				
			}</block>
			
			<catch pos:line="1277" pos:column="25">catch<parameter_list pos:line="1277" pos:column="30">(<param><decl><type><name pos:line="1277" pos:column="31">Exception</name></type> <name pos:line="1277" pos:column="41">e</name></decl></param>)</parameter_list><block pos:line="1277" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="1278" pos:column="33">System</name><op:operator pos:line="1278" pos:column="39">.</op:operator><name pos:line="1278" pos:column="40">out</name><op:operator pos:line="1278" pos:column="43">.</op:operator><name pos:line="1278" pos:column="44">println</name></name><argument_list pos:line="1278" pos:column="51">(<argument><expr><call><name><name pos:line="1278" pos:column="52">e</name><op:operator pos:line="1278" pos:column="53">.</op:operator><name pos:line="1278" pos:column="54">getMessage</name></name><argument_list pos:line="1278" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1279" pos:column="33">e</name><op:operator pos:line="1279" pos:column="34">.</op:operator><name pos:line="1279" pos:column="35">printStackTrace</name></name><argument_list pos:line="1279" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				
			}</block></catch></try>
			
		}</block>
		<finally pos:line="1284" pos:column="17">finally<block pos:line="1284" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="1287" pos:column="17">return <expr><name pos:line="1287" pos:column="24">tas</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="1291" pos:column="9">/*
	 * CourseDoesnotExist Exception
	 */</comment>
	<class><specifier pos:line="1294" pos:column="9">public</specifier> <specifier pos:line="1294" pos:column="16">static</specifier> class <name pos:line="1294" pos:column="29">CourseOfferingDoesNotExistException</name> <super><extends pos:line="1294" pos:column="65">extends <name pos:line="1294" pos:column="73">Exception</name></extends></super><block pos:line="1294" pos:column="82">{
		<decl_stmt><decl><type><specifier pos:line="1295" pos:column="17">private</specifier> <specifier pos:line="1295" pos:column="25">static</specifier> <specifier pos:line="1295" pos:column="32">final</specifier> <name pos:line="1295" pos:column="38">long</name></type> <name pos:line="1295" pos:column="43">serialVersionUID</name> <init pos:line="1295" pos:column="60">= <expr><lit:literal type="number" pos:line="1295" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1296" pos:column="17">private</specifier> <name pos:line="1296" pos:column="25">String</name></type> <name pos:line="1296" pos:column="32">message</name> <init pos:line="1296" pos:column="40">= <expr><lit:literal type="null" pos:line="1296" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="1298" pos:column="13">public</specifier> <name pos:line="1298" pos:column="20">CourseOfferingDoesNotExistException</name><parameter_list pos:line="1298" pos:column="55">()</parameter_list> <block pos:line="1298" pos:column="58">{
	        <expr_stmt><expr><call><name pos:line="1299" pos:column="17">super</name><argument_list pos:line="1299" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1300" pos:column="17">this</name><op:operator pos:line="1300" pos:column="21">.</op:operator><name pos:line="1300" pos:column="22">message</name></name> <op:operator pos:line="1300" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="1300" pos:column="32">"Course does not exist"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="1303" pos:column="13">public</specifier> <name pos:line="1303" pos:column="20">CourseOfferingDoesNotExistException</name><parameter_list pos:line="1303" pos:column="55">(<param><decl><type><specifier pos:line="1303" pos:column="56">final</specifier> <name pos:line="1303" pos:column="62">String</name></type> <name pos:line="1303" pos:column="69">message</name></decl></param>)</parameter_list> <block pos:line="1303" pos:column="78">{
	        <expr_stmt><expr><call><name pos:line="1304" pos:column="17">super</name><argument_list pos:line="1304" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1305" pos:column="17">this</name><op:operator pos:line="1305" pos:column="21">.</op:operator><name pos:line="1305" pos:column="22">message</name></name> <op:operator pos:line="1305" pos:column="30">=</op:operator> <name pos:line="1305" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="1308" pos:column="13">@<name pos:line="1308" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1309" pos:column="13">public</specifier> <name pos:line="1309" pos:column="20">String</name></type> <name pos:line="1309" pos:column="27">toString</name><parameter_list pos:line="1309" pos:column="35">()</parameter_list> <block pos:line="1309" pos:column="38">{
	        <return pos:line="1310" pos:column="17">return <expr><name pos:line="1310" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="1313" pos:column="13">@<name pos:line="1313" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1314" pos:column="13">public</specifier> <name pos:line="1314" pos:column="20">String</name></type> <name pos:line="1314" pos:column="27">getMessage</name><parameter_list pos:line="1314" pos:column="37">()</parameter_list> <block pos:line="1314" pos:column="40">{
	        <return pos:line="1315" pos:column="17">return <expr><name pos:line="1315" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block" pos:line="1319" pos:column="9">/*
	 * CourseOfferingAlreadyExistsException
	 */</comment>
	<class><specifier pos:line="1322" pos:column="9">public</specifier> <specifier pos:line="1322" pos:column="16">static</specifier> class <name pos:line="1322" pos:column="29">CourseOfferingAlreadyExistsException</name> <super><extends pos:line="1322" pos:column="66">extends <name pos:line="1322" pos:column="74">Exception</name></extends></super><block pos:line="1322" pos:column="83">{
		<decl_stmt><decl><type><specifier pos:line="1323" pos:column="17">private</specifier> <specifier pos:line="1323" pos:column="25">static</specifier> <specifier pos:line="1323" pos:column="32">final</specifier> <name pos:line="1323" pos:column="38">long</name></type> <name pos:line="1323" pos:column="43">serialVersionUID</name> <init pos:line="1323" pos:column="60">= <expr><lit:literal type="number" pos:line="1323" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1324" pos:column="17">private</specifier> <name pos:line="1324" pos:column="25">String</name></type> <name pos:line="1324" pos:column="32">message</name> <init pos:line="1324" pos:column="40">= <expr><lit:literal type="null" pos:line="1324" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="1326" pos:column="13">public</specifier> <name pos:line="1326" pos:column="20">CourseOfferingAlreadyExistsException</name><parameter_list pos:line="1326" pos:column="56">()</parameter_list> <block pos:line="1326" pos:column="59">{
	        <expr_stmt><expr><call><name pos:line="1327" pos:column="17">super</name><argument_list pos:line="1327" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1328" pos:column="17">this</name><op:operator pos:line="1328" pos:column="21">.</op:operator><name pos:line="1328" pos:column="22">message</name></name> <op:operator pos:line="1328" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="1328" pos:column="32">"Course offering already exists with the same parameters"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="1331" pos:column="13">public</specifier> <name pos:line="1331" pos:column="20">CourseOfferingAlreadyExistsException</name><parameter_list pos:line="1331" pos:column="56">(<param><decl><type><specifier pos:line="1331" pos:column="57">final</specifier> <name pos:line="1331" pos:column="63">String</name></type> <name pos:line="1331" pos:column="70">message</name></decl></param>)</parameter_list> <block pos:line="1331" pos:column="79">{
	        <expr_stmt><expr><call><name pos:line="1332" pos:column="17">super</name><argument_list pos:line="1332" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1333" pos:column="17">this</name><op:operator pos:line="1333" pos:column="21">.</op:operator><name pos:line="1333" pos:column="22">message</name></name> <op:operator pos:line="1333" pos:column="30">=</op:operator> <name pos:line="1333" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="1336" pos:column="13">@<name pos:line="1336" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1337" pos:column="13">public</specifier> <name pos:line="1337" pos:column="20">String</name></type> <name pos:line="1337" pos:column="27">toString</name><parameter_list pos:line="1337" pos:column="35">()</parameter_list> <block pos:line="1337" pos:column="38">{
	        <return pos:line="1338" pos:column="17">return <expr><name pos:line="1338" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="1341" pos:column="13">@<name pos:line="1341" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1342" pos:column="13">public</specifier> <name pos:line="1342" pos:column="20">String</name></type> <name pos:line="1342" pos:column="27">getMessage</name><parameter_list pos:line="1342" pos:column="37">()</parameter_list> <block pos:line="1342" pos:column="40">{
	        <return pos:line="1343" pos:column="17">return <expr><name pos:line="1343" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block" pos:line="1347" pos:column="9">/*
	 * CourseOfferingNotCurrent Exception
	 */</comment>
	<class><specifier pos:line="1350" pos:column="9">public</specifier> <specifier pos:line="1350" pos:column="16">static</specifier> class <name pos:line="1350" pos:column="29">CourseOfferingNotCurrentException</name> <super><extends pos:line="1350" pos:column="63">extends <name pos:line="1350" pos:column="71">Exception</name></extends></super><block pos:line="1350" pos:column="80">{
		<decl_stmt><decl><type><specifier pos:line="1351" pos:column="17">private</specifier> <specifier pos:line="1351" pos:column="25">static</specifier> <specifier pos:line="1351" pos:column="32">final</specifier> <name pos:line="1351" pos:column="38">long</name></type> <name pos:line="1351" pos:column="43">serialVersionUID</name> <init pos:line="1351" pos:column="60">= <expr><lit:literal type="number" pos:line="1351" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1352" pos:column="17">private</specifier> <name pos:line="1352" pos:column="25">String</name></type> <name pos:line="1352" pos:column="32">message</name> <init pos:line="1352" pos:column="40">= <expr><lit:literal type="null" pos:line="1352" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="1354" pos:column="13">public</specifier> <name pos:line="1354" pos:column="20">CourseOfferingNotCurrentException</name><parameter_list pos:line="1354" pos:column="53">()</parameter_list> <block pos:line="1354" pos:column="56">{
	        <expr_stmt><expr><call><name pos:line="1355" pos:column="17">super</name><argument_list pos:line="1355" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1356" pos:column="17">this</name><op:operator pos:line="1356" pos:column="21">.</op:operator><name pos:line="1356" pos:column="22">message</name></name> <op:operator pos:line="1356" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="1356" pos:column="32">"Course not current"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="1359" pos:column="13">public</specifier> <name pos:line="1359" pos:column="20">CourseOfferingNotCurrentException</name><parameter_list pos:line="1359" pos:column="53">(<param><decl><type><specifier pos:line="1359" pos:column="54">final</specifier> <name pos:line="1359" pos:column="60">String</name></type> <name pos:line="1359" pos:column="67">message</name></decl></param>)</parameter_list> <block pos:line="1359" pos:column="76">{
	        <expr_stmt><expr><call><name pos:line="1360" pos:column="17">super</name><argument_list pos:line="1360" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="1361" pos:column="17">this</name><op:operator pos:line="1361" pos:column="21">.</op:operator><name pos:line="1361" pos:column="22">message</name></name> <op:operator pos:line="1361" pos:column="30">=</op:operator> <name pos:line="1361" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="1364" pos:column="13">@<name pos:line="1364" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1365" pos:column="13">public</specifier> <name pos:line="1365" pos:column="20">String</name></type> <name pos:line="1365" pos:column="27">toString</name><parameter_list pos:line="1365" pos:column="35">()</parameter_list> <block pos:line="1365" pos:column="38">{
	        <return pos:line="1366" pos:column="17">return <expr><name pos:line="1366" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="1369" pos:column="13">@<name pos:line="1369" pos:column="14">Override</name></annotation>
	    <specifier pos:line="1370" pos:column="13">public</specifier> <name pos:line="1370" pos:column="20">String</name></type> <name pos:line="1370" pos:column="27">getMessage</name><parameter_list pos:line="1370" pos:column="37">()</parameter_list> <block pos:line="1370" pos:column="40">{
	        <return pos:line="1371" pos:column="17">return <expr><name pos:line="1371" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block" pos:line="1375" pos:column="9">/*
	 * CourseOfferingNotSchedulable Exception
	 */</comment>
	<class><specifier pos:line="1378" pos:column="9">public</specifier> <specifier pos:line="1378" pos:column="16">static</specifier> class <name pos:line="1378" pos:column="29">CourseOfferingNotSchedulable</name> <super><extends pos:line="1378" pos:column="58">extends <name pos:line="1378" pos:column="66">Exception</name></extends></super><block pos:line="1378" pos:column="75">{
			<decl_stmt><decl><type><specifier pos:line="1379" pos:column="25">private</specifier> <specifier pos:line="1379" pos:column="33">static</specifier> <specifier pos:line="1379" pos:column="40">final</specifier> <name pos:line="1379" pos:column="46">long</name></type> <name pos:line="1379" pos:column="51">serialVersionUID</name> <init pos:line="1379" pos:column="68">= <expr><lit:literal type="number" pos:line="1379" pos:column="70">1L</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="1380" pos:column="25">private</specifier> <name pos:line="1380" pos:column="33">String</name></type> <name pos:line="1380" pos:column="40">message</name> <init pos:line="1380" pos:column="48">= <expr><lit:literal type="null" pos:line="1380" pos:column="50">null</lit:literal></expr></init></decl>;</decl_stmt>
			 
		    <constructor><specifier pos:line="1382" pos:column="21">public</specifier> <name pos:line="1382" pos:column="28">CourseOfferingNotSchedulable</name><parameter_list pos:line="1382" pos:column="56">()</parameter_list> <block pos:line="1382" pos:column="59">{
		        <expr_stmt><expr><call><name pos:line="1383" pos:column="25">super</name><argument_list pos:line="1383" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name pos:line="1384" pos:column="25">this</name><op:operator pos:line="1384" pos:column="29">.</op:operator><name pos:line="1384" pos:column="30">message</name></name> <op:operator pos:line="1384" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="1384" pos:column="40">"Course offering not added as it is not schedulable"</lit:literal></expr>;</expr_stmt>
		    }</block></constructor>
		    
		    <constructor><specifier pos:line="1387" pos:column="21">public</specifier> <name pos:line="1387" pos:column="28">CourseOfferingNotSchedulable</name><parameter_list pos:line="1387" pos:column="56">(<param><decl><type><specifier pos:line="1387" pos:column="57">final</specifier> <name pos:line="1387" pos:column="63">String</name></type> <name pos:line="1387" pos:column="70">message</name></decl></param>)</parameter_list> <block pos:line="1387" pos:column="79">{
		        <expr_stmt><expr><call><name pos:line="1388" pos:column="25">super</name><argument_list pos:line="1388" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name pos:line="1389" pos:column="25">this</name><op:operator pos:line="1389" pos:column="29">.</op:operator><name pos:line="1389" pos:column="30">message</name></name> <op:operator pos:line="1389" pos:column="38">=</op:operator> <name pos:line="1389" pos:column="40">message</name></expr>;</expr_stmt>
		    }</block></constructor>
		 
		    <function><type><annotation pos:line="1392" pos:column="21">@<name pos:line="1392" pos:column="22">Override</name></annotation>
		    <specifier pos:line="1393" pos:column="21">public</specifier> <name pos:line="1393" pos:column="28">String</name></type> <name pos:line="1393" pos:column="35">toString</name><parameter_list pos:line="1393" pos:column="43">()</parameter_list> <block pos:line="1393" pos:column="46">{
		        <return pos:line="1394" pos:column="25">return <expr><name pos:line="1394" pos:column="32">message</name></expr>;</return>
		    }</block></function>
		 
		    <function><type><annotation pos:line="1397" pos:column="21">@<name pos:line="1397" pos:column="22">Override</name></annotation>
		    <specifier pos:line="1398" pos:column="21">public</specifier> <name pos:line="1398" pos:column="28">String</name></type> <name pos:line="1398" pos:column="35">getMessage</name><parameter_list pos:line="1398" pos:column="45">()</parameter_list> <block pos:line="1398" pos:column="48">{
		        <return pos:line="1399" pos:column="25">return <expr><name pos:line="1399" pos:column="32">message</name></expr>;</return>
		    }</block></function>
		}</block></class>

	<comment type="block" pos:line="1403" pos:column="9">/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */</comment>
	<function><type><annotation pos:line="1406" pos:column="9">@<name pos:line="1406" pos:column="10">Override</name></annotation>
	<specifier pos:line="1407" pos:column="9">public</specifier> <name pos:line="1407" pos:column="16">boolean</name></type> <name pos:line="1407" pos:column="24">equals</name><parameter_list pos:line="1407" pos:column="30">(<param><decl><type><name pos:line="1407" pos:column="31">Object</name></type> <name pos:line="1407" pos:column="38">arg0</name></decl></param>)</parameter_list> <block pos:line="1407" pos:column="44">{
		<if pos:line="1408" pos:column="17">if<condition pos:line="1408" pos:column="19">(<expr><name pos:line="1408" pos:column="20">arg0</name> <op:operator pos:line="1408" pos:column="25">instanceof</op:operator> <name pos:line="1408" pos:column="36">CourseOffered</name></expr>)</condition><then><block pos:line="1408" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="1409" pos:column="25">CourseOffered</name></type> <name pos:line="1409" pos:column="39">temp</name> <init pos:line="1409" pos:column="44">= <expr><op:operator pos:line="1409" pos:column="46">(</op:operator><name pos:line="1409" pos:column="47">CourseOffered</name><op:operator pos:line="1409" pos:column="60">)</op:operator><name pos:line="1409" pos:column="61">arg0</name></expr></init></decl>;</decl_stmt>
			<return pos:line="1410" pos:column="25">return<expr><op:operator pos:line="1410" pos:column="31">(</op:operator><call><name><name pos:line="1410" pos:column="32">temp</name><op:operator pos:line="1410" pos:column="36">.</op:operator><name pos:line="1410" pos:column="37">getOfferID</name></name><argument_list pos:line="1410" pos:column="47">()</argument_list></call> <op:operator pos:line="1410" pos:column="50">==</op:operator> <call><name><name pos:line="1410" pos:column="53">this</name><op:operator pos:line="1410" pos:column="57">.</op:operator><name pos:line="1410" pos:column="58">getOfferID</name></name><argument_list pos:line="1410" pos:column="68">()</argument_list></call><op:operator pos:line="1410" pos:column="70">)</op:operator></expr>;</return>
		}</block></then>
		
		<else pos:line="1413" pos:column="17">else <return pos:line="1413" pos:column="22">return <expr><lit:literal type="boolean" pos:line="1413" pos:column="29">false</lit:literal></expr>;</return></else></if>
	}</block></function>


	<comment type="block" pos:line="1417" pos:column="9">/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */</comment>
	<function><type><annotation pos:line="1420" pos:column="9">@<name pos:line="1420" pos:column="10">Override</name></annotation>
	<specifier pos:line="1421" pos:column="9">public</specifier> <name pos:line="1421" pos:column="16">int</name></type> <name pos:line="1421" pos:column="20">hashCode</name><parameter_list pos:line="1421" pos:column="28">()</parameter_list> <block pos:line="1421" pos:column="31">{
		<return pos:line="1422" pos:column="17">return <expr><op:operator pos:line="1422" pos:column="24">(</op:operator><name><name pos:line="1422" pos:column="25">this</name><op:operator pos:line="1422" pos:column="29">.</op:operator><name pos:line="1422" pos:column="30">offerID</name></name><op:operator pos:line="1422" pos:column="37">*</op:operator><lit:literal type="number" pos:line="1422" pos:column="38">31</lit:literal><op:operator pos:line="1422" pos:column="40">)</op:operator></expr>;</return>
	}</block></function>

}</block></class>
</unit>
