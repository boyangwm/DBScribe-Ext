<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\client\object\dragNdrop\XincoDefaultTreeTransferHandler.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2007 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoDefaultTreeTransferHandler
 *
 * Description:     XincoDefaultTreeTransferHandler
 *
 * Original Author: Javier A. Ortiz
 * Date:            May 18, 2007, 2:24 PM
 *
 * Modifications:
 *
 * Who?             When?             What?
 *
 *************************************************************
 */</comment>
<package pos:line="35" pos:column="1">package <name><name pos:line="35" pos:column="9">com</name><op:operator pos:line="35" pos:column="12">.</op:operator><name pos:line="35" pos:column="13">bluecubs</name><op:operator pos:line="35" pos:column="21">.</op:operator><name pos:line="35" pos:column="22">xinco</name><op:operator pos:line="35" pos:column="27">.</op:operator><name pos:line="35" pos:column="28">client</name><op:operator pos:line="35" pos:column="34">.</op:operator><name pos:line="35" pos:column="35">object</name><op:operator pos:line="35" pos:column="41">.</op:operator><name pos:line="35" pos:column="42">dragNdrop</name></name>;</package>

<import pos:line="37" pos:column="1">import <name><name pos:line="37" pos:column="8">com</name><op:operator pos:line="37" pos:column="11">.</op:operator><name pos:line="37" pos:column="12">bluecubs</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">xinco</name><op:operator pos:line="37" pos:column="26">.</op:operator><name pos:line="37" pos:column="27">client</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">object</name><op:operator pos:line="37" pos:column="40">.</op:operator><name pos:line="37" pos:column="41">XincoJTree</name></name>;</import>
<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">com</name><op:operator pos:line="38" pos:column="11">.</op:operator><name pos:line="38" pos:column="12">bluecubs</name><op:operator pos:line="38" pos:column="20">.</op:operator><name pos:line="38" pos:column="21">xinco</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">core</name><op:operator pos:line="38" pos:column="31">.</op:operator><name pos:line="38" pos:column="32">XincoCoreData</name></name>;</import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">awt</name><op:operator pos:line="39" pos:column="16">.</op:operator><name pos:line="39" pos:column="17">Point</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">awt</name><op:operator pos:line="40" pos:column="16">.</op:operator><name pos:line="40" pos:column="17">dnd</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">DnDConstants</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">javax</name><op:operator pos:line="41" pos:column="13">.</op:operator><name pos:line="41" pos:column="14">swing</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">tree</name><op:operator pos:line="41" pos:column="24">.</op:operator><name pos:line="41" pos:column="25">DefaultMutableTreeNode</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">javax</name><op:operator pos:line="42" pos:column="13">.</op:operator><name pos:line="42" pos:column="14">swing</name><op:operator pos:line="42" pos:column="19">.</op:operator><name pos:line="42" pos:column="20">tree</name><op:operator pos:line="42" pos:column="24">.</op:operator><name pos:line="42" pos:column="25">DefaultTreeModel</name></name>;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">javax</name><op:operator pos:line="43" pos:column="13">.</op:operator><name pos:line="43" pos:column="14">swing</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">tree</name><op:operator pos:line="43" pos:column="24">.</op:operator><name pos:line="43" pos:column="25">TreePath</name></name>;</import>

<comment type="block" format="javadoc" pos:line="45" pos:column="1">/**
 *
 * @author Javier A. Ortiz
 */</comment>
<class><specifier pos:line="49" pos:column="1">public</specifier> class <name pos:line="49" pos:column="14">XincoDefaultTreeTransferHandler</name> <super><extends pos:line="49" pos:column="46">extends <name pos:line="49" pos:column="54">XincoAbstractTreeTransferHandler</name></extends></super> <block pos:line="49" pos:column="87">{

    <constructor><specifier pos:line="51" pos:column="5">public</specifier> <name pos:line="51" pos:column="12">XincoDefaultTreeTransferHandler</name><parameter_list pos:line="51" pos:column="43">(<param><decl><type><name pos:line="51" pos:column="44">XincoJTree</name></type> <name pos:line="51" pos:column="55">tree</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="61">int</name></type> <name pos:line="51" pos:column="65">action</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">super</name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">tree</name></expr></argument>, <argument><expr><name pos:line="52" pos:column="21">action</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="52" pos:column="29">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier pos:line="55" pos:column="5">public</specifier> <name pos:line="55" pos:column="12">boolean</name></type> <name pos:line="55" pos:column="20">canPerformAction</name><parameter_list pos:line="55" pos:column="36">(<param><decl><type><name pos:line="55" pos:column="37">XincoJTree</name></type> <name pos:line="55" pos:column="48">target</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="56">DefaultMutableTreeNode</name></type> <name pos:line="55" pos:column="79">draggedNode</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="92">int</name></type> <name pos:line="55" pos:column="96">action</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="104">Point</name></type> <name pos:line="55" pos:column="110">location</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="120">{
        <decl_stmt><decl><type><name pos:line="56" pos:column="9">TreePath</name></type> <name pos:line="56" pos:column="18">pathTarget</name> <init pos:line="56" pos:column="29">= <expr><call><name><name pos:line="56" pos:column="31">target</name><op:operator pos:line="56" pos:column="37">.</op:operator><name pos:line="56" pos:column="38">getPathForLocation</name></name><argument_list pos:line="56" pos:column="56">(<argument><expr><name><name pos:line="56" pos:column="57">location</name><op:operator pos:line="56" pos:column="65">.</op:operator><name pos:line="56" pos:column="66">x</name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="69">location</name><op:operator pos:line="56" pos:column="77">.</op:operator><name pos:line="56" pos:column="78">y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">pathTarget</name> <op:operator pos:line="57" pos:column="24">==</op:operator> <lit:literal type="null" pos:line="57" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="57" pos:column="32"> <block pos:line="57" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">target</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">setSelectionPath</name></name><argument_list pos:line="58" pos:column="36">(<argument><expr><lit:literal type="null" pos:line="58" pos:column="37">null</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="59" pos:column="13">return <expr><op:operator pos:line="59" pos:column="20">(</op:operator><lit:literal type="boolean" pos:line="59" pos:column="21">false</lit:literal><op:operator pos:line="59" pos:column="26">)</op:operator></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">target</name><op:operator pos:line="61" pos:column="15">.</op:operator><name pos:line="61" pos:column="16">setSelectionPath</name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><name pos:line="61" pos:column="33">pathTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">action</name> <op:operator pos:line="62" pos:column="20">==</op:operator> <name><name pos:line="62" pos:column="23">DnDConstants</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">ACTION_COPY</name></name></expr>)</condition><then pos:line="62" pos:column="48"> <block pos:line="62" pos:column="49">{
            <return pos:line="63" pos:column="13">return <expr><lit:literal type="boolean" pos:line="63" pos:column="20">true</lit:literal></expr>;</return>
        }</block></then> <else pos:line="64" pos:column="11">else <if pos:line="64" pos:column="16">if <condition pos:line="64" pos:column="19">(<expr><name pos:line="64" pos:column="20">action</name> <op:operator pos:line="64" pos:column="27">==</op:operator> <name><name pos:line="64" pos:column="30">DnDConstants</name><op:operator pos:line="64" pos:column="42">.</op:operator><name pos:line="64" pos:column="43">ACTION_MOVE</name></name></expr>)</condition><then pos:line="64" pos:column="55"> <block pos:line="64" pos:column="56">{
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">DefaultMutableTreeNode</name></type> <name pos:line="65" pos:column="36">parentNode</name> <init pos:line="65" pos:column="47">= <expr><op:operator pos:line="65" pos:column="49">(</op:operator><name pos:line="65" pos:column="50">DefaultMutableTreeNode</name><op:operator pos:line="65" pos:column="72">)</op:operator> <call><name><name pos:line="65" pos:column="74">pathTarget</name><op:operator pos:line="65" pos:column="84">.</op:operator><name pos:line="65" pos:column="85">getLastPathComponent</name></name><argument_list pos:line="65" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><call><name><name pos:line="66" pos:column="17">draggedNode</name><op:operator pos:line="66" pos:column="28">.</op:operator><name pos:line="66" pos:column="29">isRoot</name></name><argument_list pos:line="66" pos:column="35">()</argument_list></call> <op:operator pos:line="66" pos:column="38">||</op:operator> <name pos:line="66" pos:column="41">parentNode</name> <op:operator pos:line="66" pos:column="52">==</op:operator> <call><name><name pos:line="66" pos:column="55">draggedNode</name><op:operator pos:line="66" pos:column="66">.</op:operator><name pos:line="66" pos:column="67">getParent</name></name><argument_list pos:line="66" pos:column="76">()</argument_list></call> <op:operator pos:line="66" pos:column="79">||</op:operator>
                    <call><name><name pos:line="67" pos:column="21">draggedNode</name><op:operator pos:line="67" pos:column="32">.</op:operator><name pos:line="67" pos:column="33">isNodeDescendant</name></name><argument_list pos:line="67" pos:column="49">(<argument><expr><name pos:line="67" pos:column="50">parentNode</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="62">||</op:operator>
                    <call><name><name pos:line="68" pos:column="21">parentNode</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">getUserObject</name></name><argument_list pos:line="68" pos:column="45">()</argument_list></call><op:operator pos:line="68" pos:column="47">.</op:operator><call><name pos:line="68" pos:column="48">getClass</name><argument_list pos:line="68" pos:column="56">()</argument_list></call> <op:operator pos:line="68" pos:column="59">==</op:operator> <name><name pos:line="68" pos:column="62">XincoCoreData</name><op:operator pos:line="68" pos:column="75">.</op:operator><name pos:line="68" pos:column="76">class</name></name></expr>)</condition><then pos:line="68" pos:column="82"> <block pos:line="68" pos:column="83">{
                <return pos:line="69" pos:column="17">return <expr><lit:literal type="boolean" pos:line="69" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then> <else pos:line="70" pos:column="15">else <block pos:line="70" pos:column="20">{
                <return pos:line="71" pos:column="17">return <expr><lit:literal type="boolean" pos:line="71" pos:column="24">true</lit:literal></expr>;</return>
            }</block></else></if>
        }</block></then> <else pos:line="73" pos:column="11">else <block pos:line="73" pos:column="16">{
            <return pos:line="74" pos:column="13">return <expr><lit:literal type="boolean" pos:line="74" pos:column="20">false</lit:literal></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier pos:line="78" pos:column="5">public</specifier> <name pos:line="78" pos:column="12">boolean</name></type> <name pos:line="78" pos:column="20">executeDrop</name><parameter_list pos:line="78" pos:column="31">(<param><decl><type><name pos:line="78" pos:column="32">XincoJTree</name></type> <name pos:line="78" pos:column="43">target</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="51">DefaultMutableTreeNode</name></type> <name pos:line="78" pos:column="74">draggedNode</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="87">DefaultMutableTreeNode</name></type> <name pos:line="78" pos:column="110">newParentNode</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="125">int</name></type> <name pos:line="78" pos:column="129">action</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="137">{
        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">action</name> <op:operator pos:line="79" pos:column="20">==</op:operator> <name><name pos:line="79" pos:column="23">DnDConstants</name><op:operator pos:line="79" pos:column="35">.</op:operator><name pos:line="79" pos:column="36">ACTION_COPY</name></name></expr>)</condition><then pos:line="79" pos:column="48"> <block pos:line="79" pos:column="49">{
            <decl_stmt><decl><type><name pos:line="80" pos:column="13">DefaultMutableTreeNode</name></type> <name pos:line="80" pos:column="36">newNode</name> <init pos:line="80" pos:column="44">= <expr><call><name><name pos:line="80" pos:column="46">XincoJTree</name><op:operator pos:line="80" pos:column="56">.</op:operator><name pos:line="80" pos:column="57">makeDeepCopy</name></name><argument_list pos:line="80" pos:column="69">(<argument><expr><name pos:line="80" pos:column="70">draggedNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><op:operator pos:line="81" pos:column="13">(</op:operator><op:operator pos:line="81" pos:column="14">(</op:operator><name pos:line="81" pos:column="15">DefaultTreeModel</name><op:operator pos:line="81" pos:column="31">)</op:operator> <call><name><name pos:line="81" pos:column="33">target</name><op:operator pos:line="81" pos:column="39">.</op:operator><name pos:line="81" pos:column="40">getModel</name></name><argument_list pos:line="81" pos:column="48">()</argument_list></call><op:operator pos:line="81" pos:column="50">)</op:operator><op:operator pos:line="81" pos:column="51">.</op:operator><call><name pos:line="81" pos:column="52">insertNodeInto</name><argument_list pos:line="81" pos:column="66">(<argument><expr><name pos:line="81" pos:column="67">newNode</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="76">newParentNode</name></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="91">newParentNode</name><op:operator pos:line="81" pos:column="104">.</op:operator><name pos:line="81" pos:column="105">getChildCount</name></name><argument_list pos:line="81" pos:column="118">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">TreePath</name></type> <name pos:line="82" pos:column="22">treePath</name> <init pos:line="82" pos:column="31">= <expr><op:operator pos:line="82" pos:column="33">new</op:operator> <call><name pos:line="82" pos:column="37">TreePath</name><argument_list pos:line="82" pos:column="45">(<argument><expr><call><name><name pos:line="82" pos:column="46">newNode</name><op:operator pos:line="82" pos:column="53">.</op:operator><name pos:line="82" pos:column="54">getPath</name></name><argument_list pos:line="82" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="83" pos:column="13">target</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">scrollPathToVisible</name></name><argument_list pos:line="83" pos:column="39">(<argument><expr><name pos:line="83" pos:column="40">treePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">target</name><op:operator pos:line="84" pos:column="19">.</op:operator><name pos:line="84" pos:column="20">setSelectionPath</name></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">treePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="85" pos:column="13">return <expr><op:operator pos:line="85" pos:column="20">(</op:operator><lit:literal type="boolean" pos:line="85" pos:column="21">true</lit:literal><op:operator pos:line="85" pos:column="25">)</op:operator></expr>;</return>
        }</block></then></if>
        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">action</name> <op:operator pos:line="87" pos:column="20">==</op:operator> <name><name pos:line="87" pos:column="23">DnDConstants</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">ACTION_MOVE</name></name></expr>)</condition><then pos:line="87" pos:column="48"> <block pos:line="87" pos:column="49">{
            <expr_stmt><expr><call><name><name pos:line="88" pos:column="13">draggedNode</name><op:operator pos:line="88" pos:column="24">.</op:operator><name pos:line="88" pos:column="25">removeFromParent</name></name><argument_list pos:line="88" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><op:operator pos:line="89" pos:column="13">(</op:operator><op:operator pos:line="89" pos:column="14">(</op:operator><name pos:line="89" pos:column="15">DefaultTreeModel</name><op:operator pos:line="89" pos:column="31">)</op:operator> <call><name><name pos:line="89" pos:column="33">target</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">getModel</name></name><argument_list pos:line="89" pos:column="48">()</argument_list></call><op:operator pos:line="89" pos:column="50">)</op:operator><op:operator pos:line="89" pos:column="51">.</op:operator><call><name pos:line="89" pos:column="52">insertNodeInto</name><argument_list pos:line="89" pos:column="66">(<argument><expr><name pos:line="89" pos:column="67">draggedNode</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="80">newParentNode</name></expr></argument>, <argument><expr><call><name><name pos:line="89" pos:column="95">newParentNode</name><op:operator pos:line="89" pos:column="108">.</op:operator><name pos:line="89" pos:column="109">getChildCount</name></name><argument_list pos:line="89" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">TreePath</name></type> <name pos:line="90" pos:column="22">treePath</name> <init pos:line="90" pos:column="31">= <expr><op:operator pos:line="90" pos:column="33">new</op:operator> <call><name pos:line="90" pos:column="37">TreePath</name><argument_list pos:line="90" pos:column="45">(<argument><expr><call><name><name pos:line="90" pos:column="46">draggedNode</name><op:operator pos:line="90" pos:column="57">.</op:operator><name pos:line="90" pos:column="58">getPath</name></name><argument_list pos:line="90" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">target</name><op:operator pos:line="91" pos:column="19">.</op:operator><name pos:line="91" pos:column="20">scrollPathToVisible</name></name><argument_list pos:line="91" pos:column="39">(<argument><expr><name pos:line="91" pos:column="40">treePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">target</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">setSelectionPath</name></name><argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">treePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="93" pos:column="13">return <expr><op:operator pos:line="93" pos:column="20">(</op:operator><lit:literal type="boolean" pos:line="93" pos:column="21">true</lit:literal><op:operator pos:line="93" pos:column="25">)</op:operator></expr>;</return>
        }</block></then></if>
        <return pos:line="95" pos:column="9">return <expr><op:operator pos:line="95" pos:column="16">(</op:operator><lit:literal type="boolean" pos:line="95" pos:column="17">false</lit:literal><op:operator pos:line="95" pos:column="22">)</op:operator></expr>;</return>
    }</block></function>
}</block></class>

</unit>
