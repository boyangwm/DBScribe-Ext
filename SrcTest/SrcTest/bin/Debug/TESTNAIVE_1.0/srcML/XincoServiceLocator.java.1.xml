<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\service\XincoServiceLocator.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 * XincoServiceLocator.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.4 Apr 22, 2006 (06:55:48 PDT) WSDL2Java emitter.
 */</comment>

<package pos:line="8" pos:column="1">package <name><name pos:line="8" pos:column="9">com</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">bluecubs</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">xinco</name><op:operator pos:line="8" pos:column="27">.</op:operator><name pos:line="8" pos:column="28">service</name></name>;</package>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">XincoServiceLocator</name> <super><extends pos:line="10" pos:column="34">extends <name><name pos:line="10" pos:column="42">org</name><op:operator pos:line="10" pos:column="45">.</op:operator><name pos:line="10" pos:column="46">apache</name><op:operator pos:line="10" pos:column="52">.</op:operator><name pos:line="10" pos:column="53">axis</name><op:operator pos:line="10" pos:column="57">.</op:operator><name pos:line="10" pos:column="58">client</name><op:operator pos:line="10" pos:column="64">.</op:operator><name pos:line="10" pos:column="65">Service</name></name></extends> <implements pos:line="10" pos:column="73">implements <name><name pos:line="10" pos:column="84">com</name><op:operator pos:line="10" pos:column="87">.</op:operator><name pos:line="10" pos:column="88">bluecubs</name><op:operator pos:line="10" pos:column="96">.</op:operator><name pos:line="10" pos:column="97">xinco</name><op:operator pos:line="10" pos:column="102">.</op:operator><name pos:line="10" pos:column="103">service</name><op:operator pos:line="10" pos:column="110">.</op:operator><name pos:line="10" pos:column="111">XincoService</name></name></implements></super> <block pos:line="10" pos:column="124">{

    <constructor><specifier pos:line="12" pos:column="5">public</specifier> <name pos:line="12" pos:column="12">XincoServiceLocator</name><parameter_list pos:line="12" pos:column="31">()</parameter_list> <block pos:line="12" pos:column="34">{
    }</block></constructor>


    <constructor><specifier pos:line="16" pos:column="5">public</specifier> <name pos:line="16" pos:column="12">XincoServiceLocator</name><parameter_list pos:line="16" pos:column="31">(<param><decl><type><name><name pos:line="16" pos:column="32">org</name><op:operator pos:line="16" pos:column="35">.</op:operator><name pos:line="16" pos:column="36">apache</name><op:operator pos:line="16" pos:column="42">.</op:operator><name pos:line="16" pos:column="43">axis</name><op:operator pos:line="16" pos:column="47">.</op:operator><name pos:line="16" pos:column="48">EngineConfiguration</name></name></type> <name pos:line="16" pos:column="68">config</name></decl></param>)</parameter_list> <block pos:line="16" pos:column="76">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">super</name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier pos:line="20" pos:column="5">public</specifier> <name pos:line="20" pos:column="12">XincoServiceLocator</name><parameter_list pos:line="20" pos:column="31">(<param><decl><type><name><name pos:line="20" pos:column="32">java</name><op:operator pos:line="20" pos:column="36">.</op:operator><name pos:line="20" pos:column="37">lang</name><op:operator pos:line="20" pos:column="41">.</op:operator><name pos:line="20" pos:column="42">String</name></name></type> <name pos:line="20" pos:column="49">wsdlLoc</name></decl></param>, <param><decl><type><name><name pos:line="20" pos:column="58">javax</name><op:operator pos:line="20" pos:column="63">.</op:operator><name pos:line="20" pos:column="64">xml</name><op:operator pos:line="20" pos:column="67">.</op:operator><name pos:line="20" pos:column="68">namespace</name><op:operator pos:line="20" pos:column="77">.</op:operator><name pos:line="20" pos:column="78">QName</name></name></type> <name pos:line="20" pos:column="84">sName</name></decl></param>)</parameter_list> <throws pos:line="20" pos:column="91">throws <argument><expr><name><name pos:line="20" pos:column="98">javax</name><op:operator pos:line="20" pos:column="103">.</op:operator><name pos:line="20" pos:column="104">xml</name><op:operator pos:line="20" pos:column="107">.</op:operator><name pos:line="20" pos:column="108">rpc</name><op:operator pos:line="20" pos:column="111">.</op:operator><name pos:line="20" pos:column="112">ServiceException</name></name></expr></argument></throws> <block pos:line="20" pos:column="129">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">super</name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">wsdlLoc</name></expr></argument>, <argument><expr><name pos:line="21" pos:column="24">sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line" pos:line="24" pos:column="5">// Use to get a proxy class for Xinco</comment>
    <decl_stmt><decl><type><specifier pos:line="25" pos:column="5">private</specifier> <name><name pos:line="25" pos:column="13">java</name><op:operator pos:line="25" pos:column="17">.</op:operator><name pos:line="25" pos:column="18">lang</name><op:operator pos:line="25" pos:column="22">.</op:operator><name pos:line="25" pos:column="23">String</name></name></type> <name pos:line="25" pos:column="30">Xinco_address</name> <init pos:line="25" pos:column="44">= <expr><lit:literal type="string" pos:line="25" pos:column="46">"http://localhost:8084/xinco/services/Xinco"</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="27" pos:column="5">public</specifier> <name><name pos:line="27" pos:column="12">java</name><op:operator pos:line="27" pos:column="16">.</op:operator><name pos:line="27" pos:column="17">lang</name><op:operator pos:line="27" pos:column="21">.</op:operator><name pos:line="27" pos:column="22">String</name></name></type> <name pos:line="27" pos:column="29">getXincoAddress</name><parameter_list pos:line="27" pos:column="44">()</parameter_list> <block pos:line="27" pos:column="47">{
        <return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">Xinco_address</name></expr>;</return>
    }</block></function>

    <comment type="line" pos:line="31" pos:column="5">// The WSDD service name defaults to the port name.</comment>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">private</specifier> <name><name pos:line="32" pos:column="13">java</name><op:operator pos:line="32" pos:column="17">.</op:operator><name pos:line="32" pos:column="18">lang</name><op:operator pos:line="32" pos:column="22">.</op:operator><name pos:line="32" pos:column="23">String</name></name></type> <name pos:line="32" pos:column="30">XincoWSDDServiceName</name> <init pos:line="32" pos:column="51">= <expr><lit:literal type="string" pos:line="32" pos:column="53">"Xinco"</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="34" pos:column="5">public</specifier> <name><name pos:line="34" pos:column="12">java</name><op:operator pos:line="34" pos:column="16">.</op:operator><name pos:line="34" pos:column="17">lang</name><op:operator pos:line="34" pos:column="21">.</op:operator><name pos:line="34" pos:column="22">String</name></name></type> <name pos:line="34" pos:column="29">getXincoWSDDServiceName</name><parameter_list pos:line="34" pos:column="52">()</parameter_list> <block pos:line="34" pos:column="55">{
        <return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">XincoWSDDServiceName</name></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="38" pos:column="5">public</specifier> <name pos:line="38" pos:column="12">void</name></type> <name pos:line="38" pos:column="17">setXincoWSDDServiceName</name><parameter_list pos:line="38" pos:column="40">(<param><decl><type><name><name pos:line="38" pos:column="41">java</name><op:operator pos:line="38" pos:column="45">.</op:operator><name pos:line="38" pos:column="46">lang</name><op:operator pos:line="38" pos:column="50">.</op:operator><name pos:line="38" pos:column="51">String</name></name></type> <name pos:line="38" pos:column="58">name</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="64">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">XincoWSDDServiceName</name> <op:operator pos:line="39" pos:column="30">=</op:operator> <name pos:line="39" pos:column="32">name</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="42" pos:column="5">public</specifier> <name><name pos:line="42" pos:column="12">com</name><op:operator pos:line="42" pos:column="15">.</op:operator><name pos:line="42" pos:column="16">bluecubs</name><op:operator pos:line="42" pos:column="24">.</op:operator><name pos:line="42" pos:column="25">xinco</name><op:operator pos:line="42" pos:column="30">.</op:operator><name pos:line="42" pos:column="31">service</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">Xinco</name></name></type> <name pos:line="42" pos:column="45">getXinco</name><parameter_list pos:line="42" pos:column="53">()</parameter_list> <throws pos:line="42" pos:column="56">throws <argument><expr><name><name pos:line="42" pos:column="63">javax</name><op:operator pos:line="42" pos:column="68">.</op:operator><name pos:line="42" pos:column="69">xml</name><op:operator pos:line="42" pos:column="72">.</op:operator><name pos:line="42" pos:column="73">rpc</name><op:operator pos:line="42" pos:column="76">.</op:operator><name pos:line="42" pos:column="77">ServiceException</name></name></expr></argument></throws> <block pos:line="42" pos:column="94">{
       <decl_stmt><decl><type><name><name pos:line="43" pos:column="8">java</name><op:operator pos:line="43" pos:column="12">.</op:operator><name pos:line="43" pos:column="13">net</name><op:operator pos:line="43" pos:column="16">.</op:operator><name pos:line="43" pos:column="17">URL</name></name></type> <name pos:line="43" pos:column="21">endpoint</name></decl>;</decl_stmt>
        <try pos:line="44" pos:column="9">try <block pos:line="44" pos:column="13">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">endpoint</name> <op:operator pos:line="45" pos:column="22">=</op:operator> <op:operator pos:line="45" pos:column="24">new</op:operator> <call><name><name pos:line="45" pos:column="28">java</name><op:operator pos:line="45" pos:column="32">.</op:operator><name pos:line="45" pos:column="33">net</name><op:operator pos:line="45" pos:column="36">.</op:operator><name pos:line="45" pos:column="37">URL</name></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">Xinco_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch pos:line="47" pos:column="9">catch <parameter_list pos:line="47" pos:column="15">(<param><decl><type><name><name pos:line="47" pos:column="16">java</name><op:operator pos:line="47" pos:column="20">.</op:operator><name pos:line="47" pos:column="21">net</name><op:operator pos:line="47" pos:column="24">.</op:operator><name pos:line="47" pos:column="25">MalformedURLException</name></name></type> <name pos:line="47" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="50">{
            <throw pos:line="48" pos:column="13">throw <expr><op:operator pos:line="48" pos:column="19">new</op:operator> <call><name><name pos:line="48" pos:column="23">javax</name><op:operator pos:line="48" pos:column="28">.</op:operator><name pos:line="48" pos:column="29">xml</name><op:operator pos:line="48" pos:column="32">.</op:operator><name pos:line="48" pos:column="33">rpc</name><op:operator pos:line="48" pos:column="36">.</op:operator><name pos:line="48" pos:column="37">ServiceException</name></name><argument_list pos:line="48" pos:column="53">(<argument><expr><name pos:line="48" pos:column="54">e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return pos:line="50" pos:column="9">return <expr><call><name pos:line="50" pos:column="16">getXinco</name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="53" pos:column="5">public</specifier> <name><name pos:line="53" pos:column="12">com</name><op:operator pos:line="53" pos:column="15">.</op:operator><name pos:line="53" pos:column="16">bluecubs</name><op:operator pos:line="53" pos:column="24">.</op:operator><name pos:line="53" pos:column="25">xinco</name><op:operator pos:line="53" pos:column="30">.</op:operator><name pos:line="53" pos:column="31">service</name><op:operator pos:line="53" pos:column="38">.</op:operator><name pos:line="53" pos:column="39">Xinco</name></name></type> <name pos:line="53" pos:column="45">getXinco</name><parameter_list pos:line="53" pos:column="53">(<param><decl><type><name><name pos:line="53" pos:column="54">java</name><op:operator pos:line="53" pos:column="58">.</op:operator><name pos:line="53" pos:column="59">net</name><op:operator pos:line="53" pos:column="62">.</op:operator><name pos:line="53" pos:column="63">URL</name></name></type> <name pos:line="53" pos:column="67">portAddress</name></decl></param>)</parameter_list> <throws pos:line="53" pos:column="80">throws <argument><expr><name><name pos:line="53" pos:column="87">javax</name><op:operator pos:line="53" pos:column="92">.</op:operator><name pos:line="53" pos:column="93">xml</name><op:operator pos:line="53" pos:column="96">.</op:operator><name pos:line="53" pos:column="97">rpc</name><op:operator pos:line="53" pos:column="100">.</op:operator><name pos:line="53" pos:column="101">ServiceException</name></name></expr></argument></throws> <block pos:line="53" pos:column="118">{
        <try pos:line="54" pos:column="9">try <block pos:line="54" pos:column="13">{
            <decl_stmt><decl><type><name><name pos:line="55" pos:column="13">com</name><op:operator pos:line="55" pos:column="16">.</op:operator><name pos:line="55" pos:column="17">bluecubs</name><op:operator pos:line="55" pos:column="25">.</op:operator><name pos:line="55" pos:column="26">xinco</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">service</name><op:operator pos:line="55" pos:column="39">.</op:operator><name pos:line="55" pos:column="40">XincoSoapBindingStub</name></name></type> <name pos:line="55" pos:column="61">_stub</name> <init pos:line="55" pos:column="67">= <expr><op:operator pos:line="55" pos:column="69">new</op:operator> <call><name><name pos:line="55" pos:column="73">com</name><op:operator pos:line="55" pos:column="76">.</op:operator><name pos:line="55" pos:column="77">bluecubs</name><op:operator pos:line="55" pos:column="85">.</op:operator><name pos:line="55" pos:column="86">xinco</name><op:operator pos:line="55" pos:column="91">.</op:operator><name pos:line="55" pos:column="92">service</name><op:operator pos:line="55" pos:column="99">.</op:operator><name pos:line="55" pos:column="100">XincoSoapBindingStub</name></name><argument_list pos:line="55" pos:column="120">(<argument><expr><name pos:line="55" pos:column="121">portAddress</name></expr></argument>, <argument><expr><name pos:line="55" pos:column="134">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">_stub</name><op:operator pos:line="56" pos:column="18">.</op:operator><name pos:line="56" pos:column="19">setPortName</name></name><argument_list pos:line="56" pos:column="30">(<argument><expr><call><name pos:line="56" pos:column="31">getXincoWSDDServiceName</name><argument_list pos:line="56" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="57" pos:column="13">return <expr><name pos:line="57" pos:column="20">_stub</name></expr>;</return>
        }</block>
        <catch pos:line="59" pos:column="9">catch <parameter_list pos:line="59" pos:column="15">(<param><decl><type><name><name pos:line="59" pos:column="16">org</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">apache</name><op:operator pos:line="59" pos:column="26">.</op:operator><name pos:line="59" pos:column="27">axis</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">AxisFault</name></name></type> <name pos:line="59" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="45">{
            <return pos:line="60" pos:column="13">return <expr><lit:literal type="null" pos:line="60" pos:column="20">null</lit:literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier pos:line="64" pos:column="5">public</specifier> <name pos:line="64" pos:column="12">void</name></type> <name pos:line="64" pos:column="17">setXincoEndpointAddress</name><parameter_list pos:line="64" pos:column="40">(<param><decl><type><name><name pos:line="64" pos:column="41">java</name><op:operator pos:line="64" pos:column="45">.</op:operator><name pos:line="64" pos:column="46">lang</name><op:operator pos:line="64" pos:column="50">.</op:operator><name pos:line="64" pos:column="51">String</name></name></type> <name pos:line="64" pos:column="58">address</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="67">{
        <expr_stmt><expr><name pos:line="65" pos:column="9">Xinco_address</name> <op:operator pos:line="65" pos:column="23">=</op:operator> <name pos:line="65" pos:column="25">address</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="68" pos:column="5">/**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */</comment>
    <function><type><specifier pos:line="73" pos:column="5">public</specifier> <name><name pos:line="73" pos:column="12">java</name><op:operator pos:line="73" pos:column="16">.</op:operator><name pos:line="73" pos:column="17">rmi</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">Remote</name></name></type> <name pos:line="73" pos:column="28">getPort</name><parameter_list pos:line="73" pos:column="35">(<param><decl><type><name pos:line="73" pos:column="36">Class</name></type> <name pos:line="73" pos:column="42">serviceEndpointInterface</name></decl></param>)</parameter_list> <throws pos:line="73" pos:column="68">throws <argument><expr><name><name pos:line="73" pos:column="75">javax</name><op:operator pos:line="73" pos:column="80">.</op:operator><name pos:line="73" pos:column="81">xml</name><op:operator pos:line="73" pos:column="84">.</op:operator><name pos:line="73" pos:column="85">rpc</name><op:operator pos:line="73" pos:column="88">.</op:operator><name pos:line="73" pos:column="89">ServiceException</name></name></expr></argument></throws> <block pos:line="73" pos:column="106">{
        <try pos:line="74" pos:column="9">try <block pos:line="74" pos:column="13">{
            <if pos:line="75" pos:column="13">if <condition pos:line="75" pos:column="16">(<expr><call><name><name pos:line="75" pos:column="17">com</name><op:operator pos:line="75" pos:column="20">.</op:operator><name pos:line="75" pos:column="21">bluecubs</name><op:operator pos:line="75" pos:column="29">.</op:operator><name pos:line="75" pos:column="30">xinco</name><op:operator pos:line="75" pos:column="35">.</op:operator><name pos:line="75" pos:column="36">service</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">Xinco</name><op:operator pos:line="75" pos:column="49">.</op:operator><name><name pos:line="75" pos:column="50">class</name><op:operator pos:line="75" pos:column="55">.</op:operator><name pos:line="75" pos:column="56">isAssignableFrom</name></name></name><argument_list pos:line="75" pos:column="72">(<argument><expr><name pos:line="75" pos:column="73">serviceEndpointInterface</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="75" pos:column="99"> <block pos:line="75" pos:column="100">{
                <decl_stmt><decl><type><name><name pos:line="76" pos:column="17">com</name><op:operator pos:line="76" pos:column="20">.</op:operator><name pos:line="76" pos:column="21">bluecubs</name><op:operator pos:line="76" pos:column="29">.</op:operator><name pos:line="76" pos:column="30">xinco</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">service</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">XincoSoapBindingStub</name></name></type> <name pos:line="76" pos:column="65">_stub</name> <init pos:line="76" pos:column="71">= <expr><op:operator pos:line="76" pos:column="73">new</op:operator> <call><name><name pos:line="76" pos:column="77">com</name><op:operator pos:line="76" pos:column="80">.</op:operator><name pos:line="76" pos:column="81">bluecubs</name><op:operator pos:line="76" pos:column="89">.</op:operator><name pos:line="76" pos:column="90">xinco</name><op:operator pos:line="76" pos:column="95">.</op:operator><name pos:line="76" pos:column="96">service</name><op:operator pos:line="76" pos:column="103">.</op:operator><name pos:line="76" pos:column="104">XincoSoapBindingStub</name></name><argument_list pos:line="76" pos:column="124">(<argument><expr><op:operator pos:line="76" pos:column="125">new</op:operator> <call><name><name pos:line="76" pos:column="129">java</name><op:operator pos:line="76" pos:column="133">.</op:operator><name pos:line="76" pos:column="134">net</name><op:operator pos:line="76" pos:column="137">.</op:operator><name pos:line="76" pos:column="138">URL</name></name><argument_list pos:line="76" pos:column="141">(<argument><expr><name pos:line="76" pos:column="142">Xinco_address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="158">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="77" pos:column="17">_stub</name><op:operator pos:line="77" pos:column="22">.</op:operator><name pos:line="77" pos:column="23">setPortName</name></name><argument_list pos:line="77" pos:column="34">(<argument><expr><call><name pos:line="77" pos:column="35">getXincoWSDDServiceName</name><argument_list pos:line="77" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="78" pos:column="17">return <expr><name pos:line="78" pos:column="24">_stub</name></expr>;</return>
            }</block></then></if>
        }</block>
        <catch pos:line="81" pos:column="9">catch <parameter_list pos:line="81" pos:column="15">(<param><decl><type><name><name pos:line="81" pos:column="16">java</name><op:operator pos:line="81" pos:column="20">.</op:operator><name pos:line="81" pos:column="21">lang</name><op:operator pos:line="81" pos:column="25">.</op:operator><name pos:line="81" pos:column="26">Throwable</name></name></type> <name pos:line="81" pos:column="36">t</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="39">{
            <throw pos:line="82" pos:column="13">throw <expr><op:operator pos:line="82" pos:column="19">new</op:operator> <call><name><name pos:line="82" pos:column="23">javax</name><op:operator pos:line="82" pos:column="28">.</op:operator><name pos:line="82" pos:column="29">xml</name><op:operator pos:line="82" pos:column="32">.</op:operator><name pos:line="82" pos:column="33">rpc</name><op:operator pos:line="82" pos:column="36">.</op:operator><name pos:line="82" pos:column="37">ServiceException</name></name><argument_list pos:line="82" pos:column="53">(<argument><expr><name pos:line="82" pos:column="54">t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <throw pos:line="84" pos:column="9">throw <expr><op:operator pos:line="84" pos:column="15">new</op:operator> <call><name><name pos:line="84" pos:column="19">javax</name><op:operator pos:line="84" pos:column="24">.</op:operator><name pos:line="84" pos:column="25">xml</name><op:operator pos:line="84" pos:column="28">.</op:operator><name pos:line="84" pos:column="29">rpc</name><op:operator pos:line="84" pos:column="32">.</op:operator><name pos:line="84" pos:column="33">ServiceException</name></name><argument_list pos:line="84" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="50">"There is no stub implementation for the interface:  "</lit:literal> <op:operator pos:line="84" pos:column="105">+</op:operator> <op:operator pos:line="84" pos:column="107">(</op:operator><name pos:line="84" pos:column="108">serviceEndpointInterface</name> <op:operator pos:line="84" pos:column="133">==</op:operator> <lit:literal type="null" pos:line="84" pos:column="136">null</lit:literal> <op:operator pos:line="84" pos:column="141">?</op:operator> <lit:literal type="string" pos:line="84" pos:column="143">"null"</lit:literal> <op:operator pos:line="84" pos:column="150">:</op:operator> <call><name><name pos:line="84" pos:column="152">serviceEndpointInterface</name><op:operator pos:line="84" pos:column="176">.</op:operator><name pos:line="84" pos:column="177">getName</name></name><argument_list pos:line="84" pos:column="184">()</argument_list></call><op:operator pos:line="84" pos:column="186">)</op:operator></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="87" pos:column="5">/**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */</comment>
    <function><type><specifier pos:line="92" pos:column="5">public</specifier> <name><name pos:line="92" pos:column="12">java</name><op:operator pos:line="92" pos:column="16">.</op:operator><name pos:line="92" pos:column="17">rmi</name><op:operator pos:line="92" pos:column="20">.</op:operator><name pos:line="92" pos:column="21">Remote</name></name></type> <name pos:line="92" pos:column="28">getPort</name><parameter_list pos:line="92" pos:column="35">(<param><decl><type><name><name pos:line="92" pos:column="36">javax</name><op:operator pos:line="92" pos:column="41">.</op:operator><name pos:line="92" pos:column="42">xml</name><op:operator pos:line="92" pos:column="45">.</op:operator><name pos:line="92" pos:column="46">namespace</name><op:operator pos:line="92" pos:column="55">.</op:operator><name pos:line="92" pos:column="56">QName</name></name></type> <name pos:line="92" pos:column="62">portName</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="72">Class</name></type> <name pos:line="92" pos:column="78">serviceEndpointInterface</name></decl></param>)</parameter_list> <throws pos:line="92" pos:column="104">throws <argument><expr><name><name pos:line="92" pos:column="111">javax</name><op:operator pos:line="92" pos:column="116">.</op:operator><name pos:line="92" pos:column="117">xml</name><op:operator pos:line="92" pos:column="120">.</op:operator><name pos:line="92" pos:column="121">rpc</name><op:operator pos:line="92" pos:column="124">.</op:operator><name pos:line="92" pos:column="125">ServiceException</name></name></expr></argument></throws> <block pos:line="92" pos:column="142">{
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">portName</name> <op:operator pos:line="93" pos:column="22">==</op:operator> <lit:literal type="null" pos:line="93" pos:column="25">null</lit:literal></expr>)</condition><then pos:line="93" pos:column="30"> <block pos:line="93" pos:column="31">{
            <return pos:line="94" pos:column="13">return <expr><call><name pos:line="94" pos:column="20">getPort</name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">serviceEndpointInterface</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name pos:line="96" pos:column="9">java</name><op:operator pos:line="96" pos:column="13">.</op:operator><name pos:line="96" pos:column="14">lang</name><op:operator pos:line="96" pos:column="18">.</op:operator><name pos:line="96" pos:column="19">String</name></name></type> <name pos:line="96" pos:column="26">inputPortName</name> <init pos:line="96" pos:column="40">= <expr><call><name><name pos:line="96" pos:column="42">portName</name><op:operator pos:line="96" pos:column="50">.</op:operator><name pos:line="96" pos:column="51">getLocalPart</name></name><argument_list pos:line="96" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><lit:literal type="string" pos:line="97" pos:column="13">"Xinco"</lit:literal><op:operator pos:line="97" pos:column="20">.</op:operator><call><name pos:line="97" pos:column="21">equals</name><argument_list pos:line="97" pos:column="27">(<argument><expr><name pos:line="97" pos:column="28">inputPortName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="43"> <block pos:line="97" pos:column="44">{
            <return pos:line="98" pos:column="13">return <expr><call><name pos:line="98" pos:column="20">getXinco</name><argument_list pos:line="98" pos:column="28">()</argument_list></call></expr>;</return>
        }</block></then>
        <else pos:line="100" pos:column="9">else  <block pos:line="100" pos:column="15">{
            <decl_stmt><decl><type><name><name pos:line="101" pos:column="13">java</name><op:operator pos:line="101" pos:column="17">.</op:operator><name pos:line="101" pos:column="18">rmi</name><op:operator pos:line="101" pos:column="21">.</op:operator><name pos:line="101" pos:column="22">Remote</name></name></type> <name pos:line="101" pos:column="29">_stub</name> <init pos:line="101" pos:column="35">= <expr><call><name pos:line="101" pos:column="37">getPort</name><argument_list pos:line="101" pos:column="44">(<argument><expr><name pos:line="101" pos:column="45">serviceEndpointInterface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><op:operator pos:line="102" pos:column="13">(</op:operator><op:operator pos:line="102" pos:column="14">(</op:operator><name><name pos:line="102" pos:column="15">org</name><op:operator pos:line="102" pos:column="18">.</op:operator><name pos:line="102" pos:column="19">apache</name><op:operator pos:line="102" pos:column="25">.</op:operator><name pos:line="102" pos:column="26">axis</name><op:operator pos:line="102" pos:column="30">.</op:operator><name pos:line="102" pos:column="31">client</name><op:operator pos:line="102" pos:column="37">.</op:operator><name pos:line="102" pos:column="38">Stub</name></name><op:operator pos:line="102" pos:column="42">)</op:operator> <name pos:line="102" pos:column="44">_stub</name><op:operator pos:line="102" pos:column="49">)</op:operator><op:operator pos:line="102" pos:column="50">.</op:operator><call><name pos:line="102" pos:column="51">setPortName</name><argument_list pos:line="102" pos:column="62">(<argument><expr><name pos:line="102" pos:column="63">portName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="103" pos:column="13">return <expr><name pos:line="103" pos:column="20">_stub</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier pos:line="107" pos:column="5">public</specifier> <name><name pos:line="107" pos:column="12">javax</name><op:operator pos:line="107" pos:column="17">.</op:operator><name pos:line="107" pos:column="18">xml</name><op:operator pos:line="107" pos:column="21">.</op:operator><name pos:line="107" pos:column="22">namespace</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">QName</name></name></type> <name pos:line="107" pos:column="38">getServiceName</name><parameter_list pos:line="107" pos:column="52">()</parameter_list> <block pos:line="107" pos:column="55">{
        <return pos:line="108" pos:column="9">return <expr><op:operator pos:line="108" pos:column="16">new</op:operator> <call><name><name pos:line="108" pos:column="20">javax</name><op:operator pos:line="108" pos:column="25">.</op:operator><name pos:line="108" pos:column="26">xml</name><op:operator pos:line="108" pos:column="29">.</op:operator><name pos:line="108" pos:column="30">namespace</name><op:operator pos:line="108" pos:column="39">.</op:operator><name pos:line="108" pos:column="40">QName</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="46">"urn:Xinco"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="108" pos:column="59">"XincoService"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier pos:line="111" pos:column="5">private</specifier> <name><name pos:line="111" pos:column="13">java</name><op:operator pos:line="111" pos:column="17">.</op:operator><name pos:line="111" pos:column="18">util</name><op:operator pos:line="111" pos:column="22">.</op:operator><name pos:line="111" pos:column="23">HashSet</name></name></type> <name pos:line="111" pos:column="31">ports</name> <init pos:line="111" pos:column="37">= <expr><lit:literal type="null" pos:line="111" pos:column="39">null</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="113" pos:column="5">public</specifier> <name><name pos:line="113" pos:column="12">java</name><op:operator pos:line="113" pos:column="16">.</op:operator><name pos:line="113" pos:column="17">util</name><op:operator pos:line="113" pos:column="21">.</op:operator><name pos:line="113" pos:column="22">Iterator</name></name></type> <name pos:line="113" pos:column="31">getPorts</name><parameter_list pos:line="113" pos:column="39">()</parameter_list> <block pos:line="113" pos:column="42">{
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">ports</name> <op:operator pos:line="114" pos:column="19">==</op:operator> <lit:literal type="null" pos:line="114" pos:column="22">null</lit:literal></expr>)</condition><then pos:line="114" pos:column="27"> <block pos:line="114" pos:column="28">{
            <expr_stmt><expr><name pos:line="115" pos:column="13">ports</name> <op:operator pos:line="115" pos:column="19">=</op:operator> <op:operator pos:line="115" pos:column="21">new</op:operator> <call><name><name pos:line="115" pos:column="25">java</name><op:operator pos:line="115" pos:column="29">.</op:operator><name pos:line="115" pos:column="30">util</name><op:operator pos:line="115" pos:column="34">.</op:operator><name pos:line="115" pos:column="35">HashSet</name></name><argument_list pos:line="115" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="116" pos:column="13">ports</name><op:operator pos:line="116" pos:column="18">.</op:operator><name pos:line="116" pos:column="19">add</name></name><argument_list pos:line="116" pos:column="22">(<argument><expr><op:operator pos:line="116" pos:column="23">new</op:operator> <call><name><name pos:line="116" pos:column="27">javax</name><op:operator pos:line="116" pos:column="32">.</op:operator><name pos:line="116" pos:column="33">xml</name><op:operator pos:line="116" pos:column="36">.</op:operator><name pos:line="116" pos:column="37">namespace</name><op:operator pos:line="116" pos:column="46">.</op:operator><name pos:line="116" pos:column="47">QName</name></name><argument_list pos:line="116" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="53">"urn:Xinco"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="66">"Xinco"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return pos:line="118" pos:column="9">return <expr><call><name><name pos:line="118" pos:column="16">ports</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">iterator</name></name><argument_list pos:line="118" pos:column="30">()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="121" pos:column="5">/**
    * Set the endpoint address for the specified port name.
    */</comment>
    <function><type><specifier pos:line="124" pos:column="5">public</specifier> <name pos:line="124" pos:column="12">void</name></type> <name pos:line="124" pos:column="17">setEndpointAddress</name><parameter_list pos:line="124" pos:column="35">(<param><decl><type><name><name pos:line="124" pos:column="36">java</name><op:operator pos:line="124" pos:column="40">.</op:operator><name pos:line="124" pos:column="41">lang</name><op:operator pos:line="124" pos:column="45">.</op:operator><name pos:line="124" pos:column="46">String</name></name></type> <name pos:line="124" pos:column="53">portName</name></decl></param>, <param><decl><type><name><name pos:line="124" pos:column="63">java</name><op:operator pos:line="124" pos:column="67">.</op:operator><name pos:line="124" pos:column="68">lang</name><op:operator pos:line="124" pos:column="72">.</op:operator><name pos:line="124" pos:column="73">String</name></name></type> <name pos:line="124" pos:column="80">address</name></decl></param>)</parameter_list> <throws pos:line="124" pos:column="89">throws <argument><expr><name><name pos:line="124" pos:column="96">javax</name><op:operator pos:line="124" pos:column="101">.</op:operator><name pos:line="124" pos:column="102">xml</name><op:operator pos:line="124" pos:column="105">.</op:operator><name pos:line="124" pos:column="106">rpc</name><op:operator pos:line="124" pos:column="109">.</op:operator><name pos:line="124" pos:column="110">ServiceException</name></name></expr></argument></throws> <block pos:line="124" pos:column="127">{
        
<if pos:line="126" pos:column="1">if <condition pos:line="126" pos:column="4">(<expr><lit:literal type="string" pos:line="126" pos:column="5">"Xinco"</lit:literal><op:operator pos:line="126" pos:column="12">.</op:operator><call><name pos:line="126" pos:column="13">equals</name><argument_list pos:line="126" pos:column="19">(<argument><expr><name pos:line="126" pos:column="20">portName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="30"> <block pos:line="126" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">setXincoEndpointAddress</name><argument_list pos:line="127" pos:column="36">(<argument><expr><name pos:line="127" pos:column="37">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="129" pos:column="9">else 
<block pos:line="130" pos:column="1">{ <comment type="line" pos:line="130" pos:column="3">// Unknown Port Name</comment>
            <throw pos:line="131" pos:column="13">throw <expr><op:operator pos:line="131" pos:column="19">new</op:operator> <call><name><name pos:line="131" pos:column="23">javax</name><op:operator pos:line="131" pos:column="28">.</op:operator><name pos:line="131" pos:column="29">xml</name><op:operator pos:line="131" pos:column="32">.</op:operator><name pos:line="131" pos:column="33">rpc</name><op:operator pos:line="131" pos:column="36">.</op:operator><name pos:line="131" pos:column="37">ServiceException</name></name><argument_list pos:line="131" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="54">" Cannot set Endpoint Address for Unknown Port"</lit:literal> <op:operator pos:line="131" pos:column="102">+</op:operator> <name pos:line="131" pos:column="104">portName</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="135" pos:column="5">/**
    * Set the endpoint address for the specified port name.
    */</comment>
    <function><type><specifier pos:line="138" pos:column="5">public</specifier> <name pos:line="138" pos:column="12">void</name></type> <name pos:line="138" pos:column="17">setEndpointAddress</name><parameter_list pos:line="138" pos:column="35">(<param><decl><type><name><name pos:line="138" pos:column="36">javax</name><op:operator pos:line="138" pos:column="41">.</op:operator><name pos:line="138" pos:column="42">xml</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">namespace</name><op:operator pos:line="138" pos:column="55">.</op:operator><name pos:line="138" pos:column="56">QName</name></name></type> <name pos:line="138" pos:column="62">portName</name></decl></param>, <param><decl><type><name><name pos:line="138" pos:column="72">java</name><op:operator pos:line="138" pos:column="76">.</op:operator><name pos:line="138" pos:column="77">lang</name><op:operator pos:line="138" pos:column="81">.</op:operator><name pos:line="138" pos:column="82">String</name></name></type> <name pos:line="138" pos:column="89">address</name></decl></param>)</parameter_list> <throws pos:line="138" pos:column="98">throws <argument><expr><name><name pos:line="138" pos:column="105">javax</name><op:operator pos:line="138" pos:column="110">.</op:operator><name pos:line="138" pos:column="111">xml</name><op:operator pos:line="138" pos:column="114">.</op:operator><name pos:line="138" pos:column="115">rpc</name><op:operator pos:line="138" pos:column="118">.</op:operator><name pos:line="138" pos:column="119">ServiceException</name></name></expr></argument></throws> <block pos:line="138" pos:column="136">{
        <expr_stmt><expr><call><name pos:line="139" pos:column="9">setEndpointAddress</name><argument_list pos:line="139" pos:column="27">(<argument><expr><call><name><name pos:line="139" pos:column="28">portName</name><op:operator pos:line="139" pos:column="36">.</op:operator><name pos:line="139" pos:column="37">getLocalPart</name></name><argument_list pos:line="139" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="139" pos:column="53">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
