<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\ui\EstimateIncomeUI.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">ui</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">text</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">DecimalFormat</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Scanner</name></name>;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">riskIt</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">interfaces</name><op:operator pos:line="6" pos:column="29">.</op:operator><name pos:line="6" pos:column="30">EstimateIncomeDTOInterface</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">interfaces</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">EstimateIncomeInterface</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">interfaces</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">StartInterface</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">riskIt</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">util</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Factory</name></name>;</import>



<comment type="block" format="javadoc" pos:line="13" pos:column="1">/**
 * EstimateIncomeGUI.java
 * Purpose: GUI Component for EstiamteIncome Class / Requirement.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="21" pos:column="1">public</specifier> class <name pos:line="21" pos:column="14">EstimateIncomeUI</name> <super><implements pos:line="21" pos:column="31">implements <name pos:line="21" pos:column="42">StartInterface</name></implements></super> <block pos:line="21" pos:column="57">{

	<decl_stmt><decl><type><name pos:line="23" pos:column="9">Scanner</name></type> <name pos:line="23" pos:column="17">in</name> <init pos:line="23" pos:column="20">= <expr><op:operator pos:line="23" pos:column="22">new</op:operator> <call><name pos:line="23" pos:column="26">Scanner</name><argument_list pos:line="23" pos:column="33">(<argument><expr><name><name pos:line="23" pos:column="34">System</name><op:operator pos:line="23" pos:column="40">.</op:operator><name pos:line="23" pos:column="41">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">EstimateIncomeInterface</name></type> <name pos:line="24" pos:column="33">calc</name> <init pos:line="24" pos:column="38">= <expr><call><name><name pos:line="24" pos:column="40">Factory</name><op:operator pos:line="24" pos:column="47">.</op:operator><name pos:line="24" pos:column="48">getEstimateIncome</name></name><argument_list pos:line="24" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">DecimalFormat</name></type> <name pos:line="25" pos:column="23">myFormatter</name> <init pos:line="25" pos:column="35">= <expr><op:operator pos:line="25" pos:column="37">new</op:operator> <call><name pos:line="25" pos:column="41">DecimalFormat</name><argument_list pos:line="25" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="25" pos:column="55">"$###,###,###.00"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">double</name></type> <name pos:line="27" pos:column="16">valueToCalculate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">double</name></type> <name pos:line="28" pos:column="16">resultAll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">double</name></type> <name pos:line="29" pos:column="16">slopeAll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">double</name></type> <name pos:line="30" pos:column="16">interceptAll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">double</name></type> <name pos:line="31" pos:column="16">resultMiddleTwoThirds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">double</name></type> <name pos:line="32" pos:column="16">slopeMiddleTwoThirds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">double</name></type> <name pos:line="33" pos:column="16">interceptMiddleTwoThirds</name></decl>;</decl_stmt>
	
	<function><type><specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">start</name><parameter_list pos:line="35" pos:column="26">()</parameter_list> <block pos:line="35" pos:column="29">{
		<do pos:line="36" pos:column="17">do <block pos:line="36" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">int</name></type> <name pos:line="38" pos:column="29">intChoice</name> <init pos:line="38" pos:column="39">= <expr><lit:literal type="number" pos:line="38" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name pos:line="40" pos:column="25">displayMainMenu</name><argument_list pos:line="40" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
			<do pos:line="41" pos:column="25">do <block pos:line="41" pos:column="28">{
				<if pos:line="42" pos:column="33">if<condition pos:line="42" pos:column="35">(<expr><call><name><name pos:line="42" pos:column="36">in</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">hasNextInt</name></name><argument_list pos:line="42" pos:column="49">()</argument_list></call></expr>)</condition><then><block pos:line="42" pos:column="52">{
					<expr_stmt><expr><name pos:line="43" pos:column="41">intChoice</name> <op:operator pos:line="43" pos:column="51">=</op:operator> <call><name><name pos:line="43" pos:column="53">in</name><op:operator pos:line="43" pos:column="55">.</op:operator><name pos:line="43" pos:column="56">nextInt</name></name><argument_list pos:line="43" pos:column="63">()</argument_list></call></expr>;</expr_stmt>	
	        		<if pos:line="44" pos:column="33">if<condition pos:line="44" pos:column="35">(<expr><name><name pos:line="44" pos:column="36">intChoice</name> <argument_list pos:line="44" pos:column="46">&lt; <argument><lit:literal type="number" pos:line="44" pos:column="48">1</lit:literal> <op:operator pos:line="44" pos:column="50">||</op:operator> <name pos:line="44" pos:column="53">intChoice</name></argument> &gt;</argument_list></name>  <lit:literal type="number" pos:line="44" pos:column="66">5</lit:literal></expr>)</condition><then><block pos:line="44" pos:column="68">{
	        			<expr_stmt><expr><call><name pos:line="45" pos:column="41">displayMainMenu</name><argument_list pos:line="45" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="46" pos:column="33">System</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">out</name><op:operator pos:line="46" pos:column="43">.</op:operator><name pos:line="46" pos:column="44">println</name></name><argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">intChoice</name> <op:operator pos:line="46" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="46" pos:column="64">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="47" pos:column="33">System</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">out</name><op:operator pos:line="47" pos:column="43">.</op:operator><name pos:line="47" pos:column="44">println</name></name><argument_list pos:line="47" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="52">"Please enter a selection 1 ~ 5."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		}</block></then></if>
				}</block></then> <else pos:line="49" pos:column="35">else <block pos:line="49" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="50" pos:column="41">displayMainMenu</name><argument_list pos:line="50" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="51" pos:column="41">String</name></type> <name pos:line="51" pos:column="48">wrong</name> <init pos:line="51" pos:column="54">= <expr><call><name><name pos:line="51" pos:column="56">in</name><op:operator pos:line="51" pos:column="58">.</op:operator><name pos:line="51" pos:column="59">next</name></name><argument_list pos:line="51" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        		<expr_stmt><expr><call><name><name pos:line="52" pos:column="33">System</name><op:operator pos:line="52" pos:column="39">.</op:operator><name pos:line="52" pos:column="40">out</name><op:operator pos:line="52" pos:column="43">.</op:operator><name pos:line="52" pos:column="44">println</name></name><argument_list pos:line="52" pos:column="51">(<argument><expr><name pos:line="52" pos:column="52">wrong</name> <op:operator pos:line="52" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="60">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                <expr_stmt><expr><call><name><name pos:line="53" pos:column="25">System</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">out</name><op:operator pos:line="53" pos:column="35">.</op:operator><name pos:line="53" pos:column="36">println</name></name><argument_list pos:line="53" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="44">"Please enter a selection 1 ~ 5."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                <expr_stmt><expr><name pos:line="54" pos:column="25">intChoice</name> <op:operator pos:line="54" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="54" pos:column="37">0</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block> while <condition pos:line="56" pos:column="33">(<expr><name><name pos:line="56" pos:column="34">intChoice</name> <argument_list pos:line="56" pos:column="44">&lt; <argument><lit:literal type="number" pos:line="56" pos:column="46">1</lit:literal> <op:operator pos:line="56" pos:column="48">||</op:operator> <name pos:line="56" pos:column="51">intChoice</name></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="56" pos:column="63">5</lit:literal></expr>)</condition>;</do>
			
			<if pos:line="58" pos:column="25">if<condition pos:line="58" pos:column="27">(<expr><name pos:line="58" pos:column="28">intChoice</name> <op:operator pos:line="58" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="58" pos:column="41">5</lit:literal></expr>)</condition><then><block pos:line="58" pos:column="43">{
				<return pos:line="59" pos:column="33">return;</return>
			}</block></then></if>
			
			<if pos:line="62" pos:column="25">if<condition pos:line="62" pos:column="27">(<expr><name pos:line="62" pos:column="28">intChoice</name> <op:operator pos:line="62" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="62" pos:column="41">1</lit:literal></expr>)</condition><then><block pos:line="62" pos:column="43">{
				<expr_stmt><expr><name pos:line="63" pos:column="33">intChoice</name> <op:operator pos:line="63" pos:column="43">=</op:operator> <call><name pos:line="63" pos:column="45">estimateBasedOnWorkWeeks</name><argument_list pos:line="63" pos:column="69">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="64" pos:column="27">else <if pos:line="64" pos:column="32">if<condition pos:line="64" pos:column="34">(<expr><name pos:line="64" pos:column="35">intChoice</name> <op:operator pos:line="64" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="64" pos:column="48">2</lit:literal></expr>)</condition><then><block pos:line="64" pos:column="50">{
				<expr_stmt><expr><name pos:line="65" pos:column="33">intChoice</name> <op:operator pos:line="65" pos:column="43">=</op:operator> <call><name pos:line="65" pos:column="45">estimateBasedOnWeeklyWage</name><argument_list pos:line="65" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="66" pos:column="27">else <if pos:line="66" pos:column="32">if<condition pos:line="66" pos:column="34">(<expr><name pos:line="66" pos:column="35">intChoice</name> <op:operator pos:line="66" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="66" pos:column="48">3</lit:literal></expr>)</condition><then><block pos:line="66" pos:column="50">{
				<expr_stmt><expr><name pos:line="67" pos:column="33">intChoice</name> <op:operator pos:line="67" pos:column="43">=</op:operator> <call><name pos:line="67" pos:column="45">estimateBasedOnInvestmentIncome</name><argument_list pos:line="67" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="68" pos:column="27">else <if pos:line="68" pos:column="32">if<condition pos:line="68" pos:column="34">(<expr><name pos:line="68" pos:column="35">intChoice</name> <op:operator pos:line="68" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="68" pos:column="48">4</lit:literal></expr>)</condition><then><block pos:line="68" pos:column="50">{
				<expr_stmt><expr><name pos:line="69" pos:column="33">intChoice</name> <op:operator pos:line="69" pos:column="43">=</op:operator> <call><name pos:line="69" pos:column="45">estimateBasedOnSSN</name><argument_list pos:line="69" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
			
			<if pos:line="72" pos:column="25">if<condition pos:line="72" pos:column="27">(<expr><name pos:line="72" pos:column="28">intChoice</name> <op:operator pos:line="72" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="72" pos:column="41">5</lit:literal></expr>)</condition><then><block pos:line="72" pos:column="43">{
				<return pos:line="73" pos:column="33">return;</return>
			}</block></then></if>
			
		}</block> while <condition pos:line="76" pos:column="25">(<expr><lit:literal type="boolean" pos:line="76" pos:column="26">true</lit:literal></expr>)</condition>;</do>

	}</block></function>
	
	<function><type><specifier pos:line="80" pos:column="9">public</specifier> <name pos:line="80" pos:column="16">int</name></type> <name pos:line="80" pos:column="20">estimateBasedOnInvestmentIncome</name><parameter_list pos:line="80" pos:column="51">()</parameter_list><block pos:line="80" pos:column="53">{
		<do pos:line="81" pos:column="17">do <block pos:line="81" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="82" pos:column="25">double</name></type> <name pos:line="82" pos:column="32">InvestmentIncome</name> <init pos:line="82" pos:column="49">= <expr><op:operator pos:line="82" pos:column="51">-</op:operator><lit:literal type="number" pos:line="82" pos:column="52">1.0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">System</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">out</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">println</name></name><argument_list pos:line="83" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="44">"Please enter an investment income value to estimate income based on that value."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">System</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">out</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">println</name></name><argument_list pos:line="84" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="44">"Enter 'return' to return to the previous menu, or 'exit' to exit."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="85" pos:column="33">if<condition pos:line="85" pos:column="35">(<expr><call><name><name pos:line="85" pos:column="36">in</name><op:operator pos:line="85" pos:column="38">.</op:operator><name pos:line="85" pos:column="39">hasNextInt</name></name><argument_list pos:line="85" pos:column="49">()</argument_list></call></expr>)</condition><then><block pos:line="85" pos:column="52">{
					<expr_stmt><expr><name pos:line="86" pos:column="41">InvestmentIncome</name> <op:operator pos:line="86" pos:column="58">=</op:operator> <call><name><name pos:line="86" pos:column="60">in</name><op:operator pos:line="86" pos:column="62">.</op:operator><name pos:line="86" pos:column="63">nextDouble</name></name><argument_list pos:line="86" pos:column="73">()</argument_list></call></expr>;</expr_stmt>	
	        		<if pos:line="87" pos:column="33">if<condition pos:line="87" pos:column="35">(<expr><name pos:line="87" pos:column="36">InvestmentIncome</name> <op:operator pos:line="87" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="55">0</lit:literal></expr>)</condition><then><block pos:line="87" pos:column="57">{
	        	        <expr_stmt><expr><call><name><name pos:line="88" pos:column="33">System</name><op:operator pos:line="88" pos:column="39">.</op:operator><name pos:line="88" pos:column="40">out</name><op:operator pos:line="88" pos:column="43">.</op:operator><name pos:line="88" pos:column="44">println</name></name><argument_list pos:line="88" pos:column="51">(<argument><expr><name pos:line="88" pos:column="52">InvestmentIncome</name> <op:operator pos:line="88" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="88" pos:column="71">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="89" pos:column="33">System</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">out</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">println</name></name><argument_list pos:line="89" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="52">"Please enter an investment income value of 0 or more."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		}</block></then></if>
				}</block></then> <else pos:line="91" pos:column="35">else <block pos:line="91" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="92" pos:column="41">String</name></type> <name pos:line="92" pos:column="48">stringAnswer</name> <init pos:line="92" pos:column="61">= <expr><call><name><name pos:line="92" pos:column="63">in</name><op:operator pos:line="92" pos:column="65">.</op:operator><name pos:line="92" pos:column="66">next</name></name><argument_list pos:line="92" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="93" pos:column="41">stringAnswer</name> <op:operator pos:line="93" pos:column="54">=</op:operator> <call><name><name pos:line="93" pos:column="56">stringAnswer</name><op:operator pos:line="93" pos:column="68">.</op:operator><name pos:line="93" pos:column="69">trim</name></name><argument_list pos:line="93" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="94" pos:column="41">if<condition pos:line="94" pos:column="43">(<expr><call><name><name pos:line="94" pos:column="44">stringAnswer</name><op:operator pos:line="94" pos:column="56">.</op:operator><name pos:line="94" pos:column="57">equalsIgnoreCase</name></name><argument_list pos:line="94" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="74">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="94" pos:column="84">{
						<return pos:line="95" pos:column="49">return <expr><lit:literal type="number" pos:line="95" pos:column="56">0</lit:literal></expr>;</return>
					}</block></then> <else pos:line="96" pos:column="43">else <if pos:line="96" pos:column="48">if<condition pos:line="96" pos:column="50">(<expr><call><name><name pos:line="96" pos:column="51">stringAnswer</name><op:operator pos:line="96" pos:column="63">.</op:operator><name pos:line="96" pos:column="64">equalsIgnoreCase</name></name><argument_list pos:line="96" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="81">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="96" pos:column="89">{
						<return pos:line="97" pos:column="49">return <expr><lit:literal type="number" pos:line="97" pos:column="56">5</lit:literal></expr>;</return>
					}</block></then> <else pos:line="98" pos:column="43">else <block pos:line="98" pos:column="48">{
		        		<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">System</name><op:operator pos:line="99" pos:column="47">.</op:operator><name pos:line="99" pos:column="48">out</name><op:operator pos:line="99" pos:column="51">.</op:operator><name pos:line="99" pos:column="52">println</name></name><argument_list pos:line="99" pos:column="59">(<argument><expr><name pos:line="99" pos:column="60">stringAnswer</name> <op:operator pos:line="99" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="99" pos:column="75">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><call><name><name pos:line="100" pos:column="33">System</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">out</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">println</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="52">"Please enter a numeric investment income value."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><name pos:line="101" pos:column="33">InvestmentIncome</name> <op:operator pos:line="101" pos:column="50">=</op:operator> <op:operator pos:line="101" pos:column="52">-</op:operator><lit:literal type="number" pos:line="101" pos:column="53">1.0</lit:literal></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block></else></if>
				
				<if pos:line="105" pos:column="33">if<condition pos:line="105" pos:column="35">(<expr><name pos:line="105" pos:column="36">InvestmentIncome</name> <op:operator pos:line="105" pos:column="53">&gt;=</op:operator> <lit:literal type="number" pos:line="105" pos:column="56">0</lit:literal></expr>)</condition><then><block pos:line="105" pos:column="58">{
					<expr_stmt><expr><name pos:line="106" pos:column="41">resultAll</name> <op:operator pos:line="106" pos:column="51">=</op:operator> <call><name><name pos:line="106" pos:column="53">calc</name><op:operator pos:line="106" pos:column="57">.</op:operator><name pos:line="106" pos:column="58">givenInvestmentIncomeEstimateIncomeAll</name></name><argument_list pos:line="106" pos:column="96">(<argument><expr><name pos:line="106" pos:column="97">InvestmentIncome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="107" pos:column="41">slopeAll</name> <op:operator pos:line="107" pos:column="50">=</op:operator> <call><name><name pos:line="107" pos:column="52">calc</name><op:operator pos:line="107" pos:column="56">.</op:operator><name pos:line="107" pos:column="57">givenInvestmentIncomeEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="107" pos:column="103">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="108" pos:column="41">interceptAll</name> <op:operator pos:line="108" pos:column="54">=</op:operator> <call><name><name pos:line="108" pos:column="56">calc</name><op:operator pos:line="108" pos:column="60">.</op:operator><name pos:line="108" pos:column="61">givenInvestmentIncomeEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="108" pos:column="111">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><name pos:line="110" pos:column="41">resultMiddleTwoThirds</name> <op:operator pos:line="110" pos:column="63">=</op:operator> <call><name><name pos:line="110" pos:column="65">calc</name><op:operator pos:line="110" pos:column="69">.</op:operator><name pos:line="110" pos:column="70">givenInvestmentIncomeEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="110" pos:column="120">(<argument><expr><name pos:line="110" pos:column="121">InvestmentIncome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="111" pos:column="41">slopeMiddleTwoThirds</name> <op:operator pos:line="111" pos:column="62">=</op:operator> <call><name><name pos:line="111" pos:column="64">calc</name><op:operator pos:line="111" pos:column="68">.</op:operator><name pos:line="111" pos:column="69">givenInvestmentIncomeEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="111" pos:column="127">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="112" pos:column="41">interceptMiddleTwoThirds</name> <op:operator pos:line="112" pos:column="66">=</op:operator> <call><name><name pos:line="112" pos:column="68">calc</name><op:operator pos:line="112" pos:column="72">.</op:operator><name pos:line="112" pos:column="73">givenInvestmentIncomeEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="112" pos:column="135">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name pos:line="114" pos:column="41">printAnswerAll</name><argument_list pos:line="114" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="56">"investment income"</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="77">InvestmentIncome</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="95">resultAll</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="106">slopeAll</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="116">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="115" pos:column="41">printAnswerMiddleTwoThirds</name><argument_list pos:line="115" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="68">"investment income"</lit:literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="89">InvestmentIncome</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="107">resultMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="130">slopeMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="152">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

		}</block> while <condition pos:line="118" pos:column="25">(<expr><lit:literal type="boolean" pos:line="118" pos:column="26">true</lit:literal></expr>)</condition>;</do>
		
	}</block></function>
	
	<function><type><specifier pos:line="122" pos:column="9">public</specifier> <name pos:line="122" pos:column="16">int</name></type> <name pos:line="122" pos:column="20">estimateBasedOnWeeklyWage</name><parameter_list pos:line="122" pos:column="45">()</parameter_list><block pos:line="122" pos:column="47">{
		<do pos:line="123" pos:column="17">do <block pos:line="123" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="125" pos:column="25">double</name></type> <name pos:line="125" pos:column="32">weeklyWageChoice</name> <init pos:line="125" pos:column="49">= <expr><lit:literal type="number" pos:line="125" pos:column="51">0.0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="126" pos:column="25">System</name><op:operator pos:line="126" pos:column="31">.</op:operator><name pos:line="126" pos:column="32">out</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">println</name></name><argument_list pos:line="126" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="44">"Please enter a weekly wage value to estimate income based on that weekly wage."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="127" pos:column="25">System</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">out</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">println</name></name><argument_list pos:line="127" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="44">"Enter 'return' to return to the previous menu, or 'exit' to exit."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="128" pos:column="33">if<condition pos:line="128" pos:column="35">(<expr><call><name><name pos:line="128" pos:column="36">in</name><op:operator pos:line="128" pos:column="38">.</op:operator><name pos:line="128" pos:column="39">hasNextInt</name></name><argument_list pos:line="128" pos:column="49">()</argument_list></call></expr>)</condition><then><block pos:line="128" pos:column="52">{
					<expr_stmt><expr><name pos:line="129" pos:column="41">weeklyWageChoice</name> <op:operator pos:line="129" pos:column="58">=</op:operator> <call><name><name pos:line="129" pos:column="60">in</name><op:operator pos:line="129" pos:column="62">.</op:operator><name pos:line="129" pos:column="63">nextDouble</name></name><argument_list pos:line="129" pos:column="73">()</argument_list></call></expr>;</expr_stmt>	
	        		<if pos:line="130" pos:column="33">if<condition pos:line="130" pos:column="35">(<expr><name pos:line="130" pos:column="36">weeklyWageChoice</name> <op:operator pos:line="130" pos:column="53">&lt;=</op:operator> <lit:literal type="number" pos:line="130" pos:column="56">0</lit:literal></expr>)</condition><then><block pos:line="130" pos:column="58">{
	        	        <expr_stmt><expr><call><name><name pos:line="131" pos:column="33">System</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">out</name><op:operator pos:line="131" pos:column="43">.</op:operator><name pos:line="131" pos:column="44">println</name></name><argument_list pos:line="131" pos:column="51">(<argument><expr><name pos:line="131" pos:column="52">weeklyWageChoice</name> <op:operator pos:line="131" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="131" pos:column="71">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="132" pos:column="33">System</name><op:operator pos:line="132" pos:column="39">.</op:operator><name pos:line="132" pos:column="40">out</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">println</name></name><argument_list pos:line="132" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="52">"Please enter a weekly wage value greater than 0."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		}</block></then></if>
				}</block></then> <else pos:line="134" pos:column="35">else <block pos:line="134" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="135" pos:column="41">String</name></type> <name pos:line="135" pos:column="48">stringAnswer</name> <init pos:line="135" pos:column="61">= <expr><call><name><name pos:line="135" pos:column="63">in</name><op:operator pos:line="135" pos:column="65">.</op:operator><name pos:line="135" pos:column="66">next</name></name><argument_list pos:line="135" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="136" pos:column="41">stringAnswer</name> <op:operator pos:line="136" pos:column="54">=</op:operator> <call><name><name pos:line="136" pos:column="56">stringAnswer</name><op:operator pos:line="136" pos:column="68">.</op:operator><name pos:line="136" pos:column="69">trim</name></name><argument_list pos:line="136" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="137" pos:column="41">if<condition pos:line="137" pos:column="43">(<expr><call><name><name pos:line="137" pos:column="44">stringAnswer</name><op:operator pos:line="137" pos:column="56">.</op:operator><name pos:line="137" pos:column="57">equalsIgnoreCase</name></name><argument_list pos:line="137" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="74">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="137" pos:column="84">{
						<return pos:line="138" pos:column="49">return <expr><lit:literal type="number" pos:line="138" pos:column="56">0</lit:literal></expr>;</return>
					}</block></then> <else pos:line="139" pos:column="43">else <if pos:line="139" pos:column="48">if<condition pos:line="139" pos:column="50">(<expr><call><name><name pos:line="139" pos:column="51">stringAnswer</name><op:operator pos:line="139" pos:column="63">.</op:operator><name pos:line="139" pos:column="64">equalsIgnoreCase</name></name><argument_list pos:line="139" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="81">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="139" pos:column="89">{
						<return pos:line="140" pos:column="49">return <expr><lit:literal type="number" pos:line="140" pos:column="56">5</lit:literal></expr>;</return>
					}</block></then> <else pos:line="141" pos:column="43">else <block pos:line="141" pos:column="48">{
		        		<expr_stmt><expr><call><name><name pos:line="142" pos:column="41">System</name><op:operator pos:line="142" pos:column="47">.</op:operator><name pos:line="142" pos:column="48">out</name><op:operator pos:line="142" pos:column="51">.</op:operator><name pos:line="142" pos:column="52">println</name></name><argument_list pos:line="142" pos:column="59">(<argument><expr><name pos:line="142" pos:column="60">stringAnswer</name> <op:operator pos:line="142" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="142" pos:column="75">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><call><name><name pos:line="143" pos:column="33">System</name><op:operator pos:line="143" pos:column="39">.</op:operator><name pos:line="143" pos:column="40">out</name><op:operator pos:line="143" pos:column="43">.</op:operator><name pos:line="143" pos:column="44">println</name></name><argument_list pos:line="143" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="52">"Please enter a numeric weekly wage value greater than 0."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><name pos:line="144" pos:column="33">weeklyWageChoice</name> <op:operator pos:line="144" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="144" pos:column="52">0.0</lit:literal></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block></else></if>
				
				<if pos:line="148" pos:column="33">if<condition pos:line="148" pos:column="35">(<expr><name pos:line="148" pos:column="36">weeklyWageChoice</name><op:operator pos:line="148" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="148" pos:column="54">0</lit:literal></expr>)</condition><then><block pos:line="148" pos:column="56">{
					<expr_stmt><expr><name pos:line="149" pos:column="41">resultAll</name> <op:operator pos:line="149" pos:column="51">=</op:operator> <call><name><name pos:line="149" pos:column="53">calc</name><op:operator pos:line="149" pos:column="57">.</op:operator><name pos:line="149" pos:column="58">givenWeeklyWageEstimateIncomeAll</name></name><argument_list pos:line="149" pos:column="90">(<argument><expr><name pos:line="149" pos:column="91">weeklyWageChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="150" pos:column="41">slopeAll</name> <op:operator pos:line="150" pos:column="50">=</op:operator> <call><name><name pos:line="150" pos:column="52">calc</name><op:operator pos:line="150" pos:column="56">.</op:operator><name pos:line="150" pos:column="57">givenWeeklyWageEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="150" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="151" pos:column="41">interceptAll</name> <op:operator pos:line="151" pos:column="54">=</op:operator> <call><name><name pos:line="151" pos:column="56">calc</name><op:operator pos:line="151" pos:column="60">.</op:operator><name pos:line="151" pos:column="61">givenWeeklyWageEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="151" pos:column="105">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><name pos:line="153" pos:column="41">resultMiddleTwoThirds</name> <op:operator pos:line="153" pos:column="63">=</op:operator> <call><name><name pos:line="153" pos:column="65">calc</name><op:operator pos:line="153" pos:column="69">.</op:operator><name pos:line="153" pos:column="70">givenWeeklyWageEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="153" pos:column="114">(<argument><expr><name pos:line="153" pos:column="115">weeklyWageChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="154" pos:column="41">slopeMiddleTwoThirds</name> <op:operator pos:line="154" pos:column="62">=</op:operator> <call><name><name pos:line="154" pos:column="64">calc</name><op:operator pos:line="154" pos:column="68">.</op:operator><name pos:line="154" pos:column="69">givenWeeklyWageEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="154" pos:column="121">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="155" pos:column="41">interceptMiddleTwoThirds</name> <op:operator pos:line="155" pos:column="66">=</op:operator> <call><name><name pos:line="155" pos:column="68">calc</name><op:operator pos:line="155" pos:column="72">.</op:operator><name pos:line="155" pos:column="73">givenWeeklyWageEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="155" pos:column="129">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name pos:line="157" pos:column="41">printAnswerAll</name><argument_list pos:line="157" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="56">"weekly wage"</lit:literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="71">weeklyWageChoice</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="89">resultAll</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="100">slopeAll</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="110">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="158" pos:column="41">printAnswerMiddleTwoThirds</name><argument_list pos:line="158" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="68">"weekly wage"</lit:literal></expr></argument>, <argument><expr><name pos:line="158" pos:column="83">weeklyWageChoice</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="101">resultMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="124">slopeMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="146">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

		}</block> while <condition pos:line="161" pos:column="25">(<expr><lit:literal type="boolean" pos:line="161" pos:column="26">true</lit:literal></expr>)</condition>;</do>
		
	}</block></function>
	
	<function><type><specifier pos:line="165" pos:column="9">public</specifier> <name pos:line="165" pos:column="16">int</name></type> <name pos:line="165" pos:column="20">estimateBasedOnWorkWeeks</name><parameter_list pos:line="165" pos:column="44">()</parameter_list><block pos:line="165" pos:column="46">{
		<do pos:line="166" pos:column="17">do <block pos:line="166" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="168" pos:column="25">int</name></type> <name pos:line="168" pos:column="29">workWeekChoice</name> <init pos:line="168" pos:column="44">= <expr><lit:literal type="number" pos:line="168" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="169" pos:column="25">System</name><op:operator pos:line="169" pos:column="31">.</op:operator><name pos:line="169" pos:column="32">out</name><op:operator pos:line="169" pos:column="35">.</op:operator><name pos:line="169" pos:column="36">println</name></name><argument_list pos:line="169" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="44">"Please enter the number of work weeks (1 ~ 52) to estimate income based on that number of work weeks."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="170" pos:column="25">System</name><op:operator pos:line="170" pos:column="31">.</op:operator><name pos:line="170" pos:column="32">out</name><op:operator pos:line="170" pos:column="35">.</op:operator><name pos:line="170" pos:column="36">println</name></name><argument_list pos:line="170" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="44">"Enter 'return' to return to the previous menu, or 'exit' to exit."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="171" pos:column="33">if<condition pos:line="171" pos:column="35">(<expr><call><name><name pos:line="171" pos:column="36">in</name><op:operator pos:line="171" pos:column="38">.</op:operator><name pos:line="171" pos:column="39">hasNextInt</name></name><argument_list pos:line="171" pos:column="49">()</argument_list></call></expr>)</condition><then><block pos:line="171" pos:column="52">{
					<expr_stmt><expr><name pos:line="172" pos:column="41">workWeekChoice</name> <op:operator pos:line="172" pos:column="56">=</op:operator> <call><name><name pos:line="172" pos:column="58">in</name><op:operator pos:line="172" pos:column="60">.</op:operator><name pos:line="172" pos:column="61">nextInt</name></name><argument_list pos:line="172" pos:column="68">()</argument_list></call></expr>;</expr_stmt>	
	        		<if pos:line="173" pos:column="33">if<condition pos:line="173" pos:column="35">(<expr><name><name pos:line="173" pos:column="36">workWeekChoice</name> <argument_list pos:line="173" pos:column="51">&lt; <argument><lit:literal type="number" pos:line="173" pos:column="53">1</lit:literal> <op:operator pos:line="173" pos:column="55">||</op:operator> <name pos:line="173" pos:column="58">workWeekChoice</name></argument> &gt;</argument_list></name>  <lit:literal type="number" pos:line="173" pos:column="76">52</lit:literal></expr>)</condition><then><block pos:line="173" pos:column="79">{
	        	        <expr_stmt><expr><call><name><name pos:line="174" pos:column="33">System</name><op:operator pos:line="174" pos:column="39">.</op:operator><name pos:line="174" pos:column="40">out</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">println</name></name><argument_list pos:line="174" pos:column="51">(<argument><expr><name pos:line="174" pos:column="52">workWeekChoice</name> <op:operator pos:line="174" pos:column="67">+</op:operator> <lit:literal type="string" pos:line="174" pos:column="69">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="175" pos:column="33">System</name><op:operator pos:line="175" pos:column="39">.</op:operator><name pos:line="175" pos:column="40">out</name><op:operator pos:line="175" pos:column="43">.</op:operator><name pos:line="175" pos:column="44">println</name></name><argument_list pos:line="175" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="175" pos:column="52">"Please enter a selection 1 ~ 52 weeks."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		}</block></then></if>
				}</block></then> <else pos:line="177" pos:column="35">else <block pos:line="177" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="178" pos:column="41">String</name></type> <name pos:line="178" pos:column="48">stringAnswer</name> <init pos:line="178" pos:column="61">= <expr><call><name><name pos:line="178" pos:column="63">in</name><op:operator pos:line="178" pos:column="65">.</op:operator><name pos:line="178" pos:column="66">next</name></name><argument_list pos:line="178" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="179" pos:column="41">stringAnswer</name> <op:operator pos:line="179" pos:column="54">=</op:operator> <call><name><name pos:line="179" pos:column="56">stringAnswer</name><op:operator pos:line="179" pos:column="68">.</op:operator><name pos:line="179" pos:column="69">trim</name></name><argument_list pos:line="179" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="180" pos:column="41">if<condition pos:line="180" pos:column="43">(<expr><call><name><name pos:line="180" pos:column="44">stringAnswer</name><op:operator pos:line="180" pos:column="56">.</op:operator><name pos:line="180" pos:column="57">equalsIgnoreCase</name></name><argument_list pos:line="180" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="74">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="180" pos:column="84">{
						<return pos:line="181" pos:column="49">return <expr><lit:literal type="number" pos:line="181" pos:column="56">0</lit:literal></expr>;</return>
					}</block></then> <else pos:line="182" pos:column="43">else <if pos:line="182" pos:column="48">if<condition pos:line="182" pos:column="50">(<expr><call><name><name pos:line="182" pos:column="51">stringAnswer</name><op:operator pos:line="182" pos:column="63">.</op:operator><name pos:line="182" pos:column="64">equalsIgnoreCase</name></name><argument_list pos:line="182" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="81">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="182" pos:column="89">{
						<return pos:line="183" pos:column="49">return <expr><lit:literal type="number" pos:line="183" pos:column="56">5</lit:literal></expr>;</return>
					}</block></then> <else pos:line="184" pos:column="43">else <block pos:line="184" pos:column="48">{
		        		<expr_stmt><expr><call><name><name pos:line="185" pos:column="41">System</name><op:operator pos:line="185" pos:column="47">.</op:operator><name pos:line="185" pos:column="48">out</name><op:operator pos:line="185" pos:column="51">.</op:operator><name pos:line="185" pos:column="52">println</name></name><argument_list pos:line="185" pos:column="59">(<argument><expr><name pos:line="185" pos:column="60">stringAnswer</name>  <op:operator pos:line="185" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="185" pos:column="76">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><call><name><name pos:line="186" pos:column="33">System</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">out</name><op:operator pos:line="186" pos:column="43">.</op:operator><name pos:line="186" pos:column="44">println</name></name><argument_list pos:line="186" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="52">"Please enter a numeric selection 1 ~ 52 weeks."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><name pos:line="187" pos:column="33">workWeekChoice</name> <op:operator pos:line="187" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="187" pos:column="50">0</lit:literal></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block></else></if>
				
				<if pos:line="191" pos:column="33">if<condition pos:line="191" pos:column="35">(<expr><name pos:line="191" pos:column="36">workWeekChoice</name> <op:operator pos:line="191" pos:column="51">&gt;</op:operator> <lit:literal type="number" pos:line="191" pos:column="53">0</lit:literal> <op:operator pos:line="191" pos:column="55">&amp;&amp;</op:operator> <name pos:line="191" pos:column="58">workWeekChoice</name> <op:operator pos:line="191" pos:column="73">&lt;=</op:operator> <lit:literal type="number" pos:line="191" pos:column="76">52</lit:literal></expr>)</condition><then><block pos:line="191" pos:column="79">{
					<expr_stmt><expr><name pos:line="192" pos:column="41">resultAll</name> <op:operator pos:line="192" pos:column="51">=</op:operator> <call><name><name pos:line="192" pos:column="53">calc</name><op:operator pos:line="192" pos:column="57">.</op:operator><name pos:line="192" pos:column="58">givenWorkWeeksEstimateIncomeAll</name></name><argument_list pos:line="192" pos:column="89">(<argument><expr><name pos:line="192" pos:column="90">workWeekChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="193" pos:column="41">slopeAll</name> <op:operator pos:line="193" pos:column="50">=</op:operator> <call><name><name pos:line="193" pos:column="52">calc</name><op:operator pos:line="193" pos:column="56">.</op:operator><name pos:line="193" pos:column="57">givenWorkWeeksEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="193" pos:column="96">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="194" pos:column="41">interceptAll</name> <op:operator pos:line="194" pos:column="54">=</op:operator> <call><name><name pos:line="194" pos:column="56">calc</name><op:operator pos:line="194" pos:column="60">.</op:operator><name pos:line="194" pos:column="61">givenWorkWeeksEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="194" pos:column="104">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><name pos:line="196" pos:column="41">resultMiddleTwoThirds</name> <op:operator pos:line="196" pos:column="63">=</op:operator> <call><name><name pos:line="196" pos:column="65">calc</name><op:operator pos:line="196" pos:column="69">.</op:operator><name pos:line="196" pos:column="70">givenWorkWeeksEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="196" pos:column="113">(<argument><expr><name pos:line="196" pos:column="114">workWeekChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="197" pos:column="41">slopeMiddleTwoThirds</name> <op:operator pos:line="197" pos:column="62">=</op:operator> <call><name><name pos:line="197" pos:column="64">calc</name><op:operator pos:line="197" pos:column="68">.</op:operator><name pos:line="197" pos:column="69">givenWorkWeeksEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="197" pos:column="120">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="198" pos:column="41">interceptMiddleTwoThirds</name> <op:operator pos:line="198" pos:column="66">=</op:operator> <call><name><name pos:line="198" pos:column="68">calc</name><op:operator pos:line="198" pos:column="72">.</op:operator><name pos:line="198" pos:column="73">givenWorkWeeksEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="198" pos:column="128">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name pos:line="200" pos:column="41">printAnswerAll</name><argument_list pos:line="200" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="56">"work week"</lit:literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="69">workWeekChoice</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="85">resultAll</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="96">slopeAll</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="106">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="201" pos:column="41">printAnswerMiddleTwoThirds</name><argument_list pos:line="201" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="68">"work week"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="81">workWeekChoice</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="97">resultMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="120">slopeMiddleTwoThirds</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="142">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

		}</block> while <condition pos:line="204" pos:column="25">(<expr><lit:literal type="boolean" pos:line="204" pos:column="26">true</lit:literal></expr>)</condition>;</do>
		
	}</block></function>
	
	<function><type><specifier pos:line="208" pos:column="9">public</specifier> <name pos:line="208" pos:column="16">int</name></type> <name pos:line="208" pos:column="20">estimateBasedOnSSN</name><parameter_list pos:line="208" pos:column="38">()</parameter_list><block pos:line="208" pos:column="40">{
		<do pos:line="209" pos:column="17">do <block pos:line="209" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="211" pos:column="25">int</name></type> <name pos:line="211" pos:column="29">SSNChoice</name> <init pos:line="211" pos:column="39">= <expr><lit:literal type="number" pos:line="211" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="212" pos:column="25">System</name><op:operator pos:line="212" pos:column="31">.</op:operator><name pos:line="212" pos:column="32">out</name><op:operator pos:line="212" pos:column="35">.</op:operator><name pos:line="212" pos:column="36">println</name></name><argument_list pos:line="212" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="44">"Please enter a SSN to estimate income based on values from the database."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="213" pos:column="25">System</name><op:operator pos:line="213" pos:column="31">.</op:operator><name pos:line="213" pos:column="32">out</name><op:operator pos:line="213" pos:column="35">.</op:operator><name pos:line="213" pos:column="36">println</name></name><argument_list pos:line="213" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="213" pos:column="44">" Suggested good values = 101894625 or 101894739 etc.."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="214" pos:column="25">System</name><op:operator pos:line="214" pos:column="31">.</op:operator><name pos:line="214" pos:column="32">out</name><op:operator pos:line="214" pos:column="35">.</op:operator><name pos:line="214" pos:column="36">println</name></name><argument_list pos:line="214" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="44">"Enter 'return' to return to the previous menu, or 'exit' to exit."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="215" pos:column="33">if<condition pos:line="215" pos:column="35">(<expr><call><name><name pos:line="215" pos:column="36">in</name><op:operator pos:line="215" pos:column="38">.</op:operator><name pos:line="215" pos:column="39">hasNextInt</name></name><argument_list pos:line="215" pos:column="49">()</argument_list></call></expr>)</condition><then><block pos:line="215" pos:column="52">{
					<expr_stmt><expr><name pos:line="216" pos:column="41">SSNChoice</name> <op:operator pos:line="216" pos:column="51">=</op:operator> <call><name><name pos:line="216" pos:column="53">in</name><op:operator pos:line="216" pos:column="55">.</op:operator><name pos:line="216" pos:column="56">nextInt</name></name><argument_list pos:line="216" pos:column="63">()</argument_list></call></expr>;</expr_stmt>	
	        		<if pos:line="217" pos:column="33">if<condition pos:line="217" pos:column="35">(<expr><name><name pos:line="217" pos:column="36">SSNChoice</name> <argument_list pos:line="217" pos:column="46">&lt; <argument><lit:literal type="number" pos:line="217" pos:column="48">100000000</lit:literal> <op:operator pos:line="217" pos:column="58">||</op:operator> <name pos:line="217" pos:column="61">SSNChoice</name></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="217" pos:column="73">999999999</lit:literal></expr>)</condition><then><block pos:line="217" pos:column="83">{
	        	        <expr_stmt><expr><call><name><name pos:line="218" pos:column="33">System</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">out</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">println</name></name><argument_list pos:line="218" pos:column="51">(<argument><expr><name pos:line="218" pos:column="52">SSNChoice</name> <op:operator pos:line="218" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="218" pos:column="64">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	        <expr_stmt><expr><call><name><name pos:line="219" pos:column="33">System</name><op:operator pos:line="219" pos:column="39">.</op:operator><name pos:line="219" pos:column="40">out</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">println</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="52">"Please enter a valid SSN."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		}</block></then></if>
				}</block></then> <else pos:line="221" pos:column="35">else <block pos:line="221" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="222" pos:column="41">String</name></type> <name pos:line="222" pos:column="48">stringAnswer</name> <init pos:line="222" pos:column="61">= <expr><call><name><name pos:line="222" pos:column="63">in</name><op:operator pos:line="222" pos:column="65">.</op:operator><name pos:line="222" pos:column="66">next</name></name><argument_list pos:line="222" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="223" pos:column="41">stringAnswer</name> <op:operator pos:line="223" pos:column="54">=</op:operator> <call><name><name pos:line="223" pos:column="56">stringAnswer</name><op:operator pos:line="223" pos:column="68">.</op:operator><name pos:line="223" pos:column="69">trim</name></name><argument_list pos:line="223" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="224" pos:column="41">if<condition pos:line="224" pos:column="43">(<expr><call><name><name pos:line="224" pos:column="44">stringAnswer</name><op:operator pos:line="224" pos:column="56">.</op:operator><name pos:line="224" pos:column="57">equalsIgnoreCase</name></name><argument_list pos:line="224" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="74">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="224" pos:column="84">{
						<return pos:line="225" pos:column="49">return <expr><lit:literal type="number" pos:line="225" pos:column="56">0</lit:literal></expr>;</return>
					}</block></then> <else pos:line="226" pos:column="43">else <if pos:line="226" pos:column="48">if<condition pos:line="226" pos:column="50">(<expr><call><name><name pos:line="226" pos:column="51">stringAnswer</name><op:operator pos:line="226" pos:column="63">.</op:operator><name pos:line="226" pos:column="64">equalsIgnoreCase</name></name><argument_list pos:line="226" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="81">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="226" pos:column="89">{
						<return pos:line="227" pos:column="49">return <expr><lit:literal type="number" pos:line="227" pos:column="56">5</lit:literal></expr>;</return>
					}</block></then> <else pos:line="228" pos:column="43">else <block pos:line="228" pos:column="48">{
		        		<expr_stmt><expr><call><name><name pos:line="229" pos:column="41">System</name><op:operator pos:line="229" pos:column="47">.</op:operator><name pos:line="229" pos:column="48">out</name><op:operator pos:line="229" pos:column="51">.</op:operator><name pos:line="229" pos:column="52">println</name></name><argument_list pos:line="229" pos:column="59">(<argument><expr><name pos:line="229" pos:column="60">stringAnswer</name> <op:operator pos:line="229" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="229" pos:column="75">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><call><name><name pos:line="230" pos:column="33">System</name><op:operator pos:line="230" pos:column="39">.</op:operator><name pos:line="230" pos:column="40">out</name><op:operator pos:line="230" pos:column="43">.</op:operator><name pos:line="230" pos:column="44">println</name></name><argument_list pos:line="230" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="52">"Please enter a valid SSN."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><call><name><name pos:line="231" pos:column="33">System</name><op:operator pos:line="231" pos:column="39">.</op:operator><name pos:line="231" pos:column="40">out</name><op:operator pos:line="231" pos:column="43">.</op:operator><name pos:line="231" pos:column="44">println</name></name><argument_list pos:line="231" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
		                <expr_stmt><expr><name pos:line="232" pos:column="33">SSNChoice</name> <op:operator pos:line="232" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="232" pos:column="45">0</lit:literal></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block></else></if>
				
				<if pos:line="236" pos:column="33">if<condition pos:line="236" pos:column="35">(<expr><name pos:line="236" pos:column="36">SSNChoice</name> <op:operator pos:line="236" pos:column="46">&gt;=</op:operator> <lit:literal type="number" pos:line="236" pos:column="49">100000000</lit:literal> <op:operator pos:line="236" pos:column="59">&amp;&amp;</op:operator> <name pos:line="236" pos:column="62">SSNChoice</name> <op:operator pos:line="236" pos:column="72">&lt;=</op:operator> <lit:literal type="number" pos:line="236" pos:column="75">999999999</lit:literal></expr>)</condition><then><block pos:line="236" pos:column="85">{
					<comment type="line" pos:line="237" pos:column="41">// Handle if no record is returned</comment>
					<decl_stmt><decl><type><name pos:line="238" pos:column="41">EstimateIncomeDTOInterface</name></type> <name pos:line="238" pos:column="68">data</name> <init pos:line="238" pos:column="73">= <expr><call><name><name pos:line="238" pos:column="75">calc</name><op:operator pos:line="238" pos:column="79">.</op:operator><name pos:line="238" pos:column="80">getValues</name></name><argument_list pos:line="238" pos:column="89">(<argument><expr><name pos:line="238" pos:column="90">SSNChoice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="240" pos:column="41">if<condition pos:line="240" pos:column="43">(<expr><call><name><name pos:line="240" pos:column="44">data</name><op:operator pos:line="240" pos:column="48">.</op:operator><name pos:line="240" pos:column="49">getName</name></name><argument_list pos:line="240" pos:column="56">()</argument_list></call> <op:operator pos:line="240" pos:column="59">==</op:operator> <lit:literal type="null" pos:line="240" pos:column="62">null</lit:literal> <op:operator pos:line="240" pos:column="67">||</op:operator> <call><name><name pos:line="240" pos:column="70">data</name><op:operator pos:line="240" pos:column="74">.</op:operator><name pos:line="240" pos:column="75">getName</name></name><argument_list pos:line="240" pos:column="82">()</argument_list></call><op:operator pos:line="240" pos:column="84">.</op:operator><call><name pos:line="240" pos:column="85">trim</name><argument_list pos:line="240" pos:column="89">()</argument_list></call><op:operator pos:line="240" pos:column="91">.</op:operator><call><name pos:line="240" pos:column="92">equalsIgnoreCase</name><argument_list pos:line="240" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="109">"None Entered"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="240" pos:column="125">{
						<expr_stmt><expr><call><name><name pos:line="241" pos:column="49">System</name><op:operator pos:line="241" pos:column="55">.</op:operator><name pos:line="241" pos:column="56">out</name><op:operator pos:line="241" pos:column="59">.</op:operator><name pos:line="241" pos:column="60">println</name></name><argument_list pos:line="241" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="68">"No data found in the database for SSN of "</lit:literal> <op:operator pos:line="241" pos:column="112">+</op:operator> <name pos:line="241" pos:column="114">SSNChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="242" pos:column="43">else<block pos:line="242" pos:column="47">{
						
						<expr_stmt><expr><call><name><name pos:line="244" pos:column="49">System</name><op:operator pos:line="244" pos:column="55">.</op:operator><name pos:line="244" pos:column="56">out</name><op:operator pos:line="244" pos:column="59">.</op:operator><name pos:line="244" pos:column="60">println</name></name><argument_list pos:line="244" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="245" pos:column="49">System</name><op:operator pos:line="245" pos:column="55">.</op:operator><name pos:line="245" pos:column="56">out</name><op:operator pos:line="245" pos:column="59">.</op:operator><name pos:line="245" pos:column="60">println</name></name><argument_list pos:line="245" pos:column="67">(<argument><expr><call><name><name pos:line="245" pos:column="68">data</name><op:operator pos:line="245" pos:column="72">.</op:operator><name pos:line="245" pos:column="73">toString</name></name><argument_list pos:line="245" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="246" pos:column="49">System</name><op:operator pos:line="246" pos:column="55">.</op:operator><name pos:line="246" pos:column="56">out</name><op:operator pos:line="246" pos:column="59">.</op:operator><name pos:line="246" pos:column="60">println</name></name><argument_list pos:line="246" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						
						<if pos:line="248" pos:column="49">if<condition pos:line="248" pos:column="51">(<expr><call><name><name pos:line="248" pos:column="52">data</name><op:operator pos:line="248" pos:column="56">.</op:operator><name pos:line="248" pos:column="57">getWorkWeeks</name></name><argument_list pos:line="248" pos:column="69">()</argument_list></call> <op:operator pos:line="248" pos:column="72">&gt;</op:operator> <lit:literal type="number" pos:line="248" pos:column="74">0</lit:literal></expr>)</condition><then><block pos:line="248" pos:column="76">{
							<expr_stmt><expr><name pos:line="249" pos:column="57">resultAll</name> <op:operator pos:line="249" pos:column="67">=</op:operator> <call><name><name pos:line="249" pos:column="69">calc</name><op:operator pos:line="249" pos:column="73">.</op:operator><name pos:line="249" pos:column="74">givenWorkWeeksEstimateIncomeAll</name></name><argument_list pos:line="249" pos:column="105">(<argument><expr><call><name><name pos:line="249" pos:column="106">data</name><op:operator pos:line="249" pos:column="110">.</op:operator><name pos:line="249" pos:column="111">getWorkWeeks</name></name><argument_list pos:line="249" pos:column="123">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="250" pos:column="57">slopeAll</name> <op:operator pos:line="250" pos:column="66">=</op:operator> <call><name><name pos:line="250" pos:column="68">calc</name><op:operator pos:line="250" pos:column="72">.</op:operator><name pos:line="250" pos:column="73">givenWorkWeeksEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="250" pos:column="112">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="251" pos:column="57">interceptAll</name> <op:operator pos:line="251" pos:column="70">=</op:operator> <call><name><name pos:line="251" pos:column="72">calc</name><op:operator pos:line="251" pos:column="76">.</op:operator><name pos:line="251" pos:column="77">givenWorkWeeksEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="251" pos:column="120">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="252" pos:column="57">System</name><op:operator pos:line="252" pos:column="63">.</op:operator><name pos:line="252" pos:column="64">out</name><op:operator pos:line="252" pos:column="67">.</op:operator><name pos:line="252" pos:column="68">println</name></name><argument_list pos:line="252" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="76">"Based on "</lit:literal> <op:operator pos:line="252" pos:column="88">+</op:operator> <call><name><name pos:line="252" pos:column="90">data</name><op:operator pos:line="252" pos:column="94">.</op:operator><name pos:line="252" pos:column="95">getWorkWeeks</name></name><argument_list pos:line="252" pos:column="107">()</argument_list></call> <op:operator pos:line="252" pos:column="110">+</op:operator> <lit:literal type="string" pos:line="252" pos:column="112">" work weeks the estimated income is:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="253" pos:column="57">System</name><op:operator pos:line="253" pos:column="63">.</op:operator><name pos:line="253" pos:column="64">out</name><op:operator pos:line="253" pos:column="67">.</op:operator><name pos:line="253" pos:column="68">println</name></name><argument_list pos:line="253" pos:column="75">(<argument><expr><call><name><name pos:line="253" pos:column="76">myFormatter</name><op:operator pos:line="253" pos:column="87">.</op:operator><name pos:line="253" pos:column="88">format</name></name><argument_list pos:line="253" pos:column="94">(<argument><expr><name pos:line="253" pos:column="95">resultAll</name></expr></argument>)</argument_list></call> <op:operator pos:line="253" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="253" pos:column="108">" based on all the data in the database."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="254" pos:column="57">System</name><op:operator pos:line="254" pos:column="63">.</op:operator><name pos:line="254" pos:column="64">out</name><op:operator pos:line="254" pos:column="67">.</op:operator><name pos:line="254" pos:column="68">println</name></name><argument_list pos:line="254" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="76">"Using a regression formula of Income = work weeks * "</lit:literal> <op:operator pos:line="254" pos:column="131">+</op:operator> <name pos:line="254" pos:column="133">slopeAll</name> <op:operator pos:line="254" pos:column="142">+</op:operator> <lit:literal type="string" pos:line="254" pos:column="144">" + "</lit:literal> <op:operator pos:line="254" pos:column="150">+</op:operator> <name pos:line="254" pos:column="152">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><call><name><name pos:line="256" pos:column="57">System</name><op:operator pos:line="256" pos:column="63">.</op:operator><name pos:line="256" pos:column="64">out</name><op:operator pos:line="256" pos:column="67">.</op:operator><name pos:line="256" pos:column="68">println</name></name><argument_list pos:line="256" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><name pos:line="258" pos:column="57">resultMiddleTwoThirds</name> <op:operator pos:line="258" pos:column="79">=</op:operator> <call><name><name pos:line="258" pos:column="81">calc</name><op:operator pos:line="258" pos:column="85">.</op:operator><name pos:line="258" pos:column="86">givenWorkWeeksEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="258" pos:column="129">(<argument><expr><call><name><name pos:line="258" pos:column="130">data</name><op:operator pos:line="258" pos:column="134">.</op:operator><name pos:line="258" pos:column="135">getWorkWeeks</name></name><argument_list pos:line="258" pos:column="147">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="259" pos:column="57">slopeMiddleTwoThirds</name> <op:operator pos:line="259" pos:column="78">=</op:operator> <call><name><name pos:line="259" pos:column="80">calc</name><op:operator pos:line="259" pos:column="84">.</op:operator><name pos:line="259" pos:column="85">givenWorkWeeksEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="259" pos:column="136">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="260" pos:column="57">interceptMiddleTwoThirds</name> <op:operator pos:line="260" pos:column="82">=</op:operator> <call><name><name pos:line="260" pos:column="84">calc</name><op:operator pos:line="260" pos:column="88">.</op:operator><name pos:line="260" pos:column="89">givenWorkWeeksEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="260" pos:column="144">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="261" pos:column="57">System</name><op:operator pos:line="261" pos:column="63">.</op:operator><name pos:line="261" pos:column="64">out</name><op:operator pos:line="261" pos:column="67">.</op:operator><name pos:line="261" pos:column="68">println</name></name><argument_list pos:line="261" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="76">"Based on the middle two thirds of data in the database the estiamte income is "</lit:literal> <op:operator pos:line="261" pos:column="157">+</op:operator> <call><name><name pos:line="261" pos:column="159">myFormatter</name><op:operator pos:line="261" pos:column="170">.</op:operator><name pos:line="261" pos:column="171">format</name></name><argument_list pos:line="261" pos:column="177">(<argument><expr><name pos:line="261" pos:column="178">resultMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="262" pos:column="57">System</name><op:operator pos:line="262" pos:column="63">.</op:operator><name pos:line="262" pos:column="64">out</name><op:operator pos:line="262" pos:column="67">.</op:operator><name pos:line="262" pos:column="68">println</name></name><argument_list pos:line="262" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="76">"Using a regression formula of Income = work weeks * "</lit:literal> <op:operator pos:line="262" pos:column="131">+</op:operator> <name pos:line="262" pos:column="133">slopeMiddleTwoThirds</name> <op:operator pos:line="262" pos:column="154">+</op:operator> <lit:literal type="string" pos:line="262" pos:column="156">" + "</lit:literal> <op:operator pos:line="262" pos:column="162">+</op:operator> <name pos:line="262" pos:column="164">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="263" pos:column="57">System</name><op:operator pos:line="263" pos:column="63">.</op:operator><name pos:line="263" pos:column="64">out</name><op:operator pos:line="263" pos:column="67">.</op:operator><name pos:line="263" pos:column="68">println</name></name><argument_list pos:line="263" pos:column="75">()</argument_list></call></expr>;</expr_stmt>

						}</block></then> <else pos:line="265" pos:column="51">else <block pos:line="265" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="266" pos:column="57">System</name><op:operator pos:line="266" pos:column="63">.</op:operator><name pos:line="266" pos:column="64">out</name><op:operator pos:line="266" pos:column="67">.</op:operator><name pos:line="266" pos:column="68">println</name></name><argument_list pos:line="266" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="76">"No work week data available for this record.\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						
						<if pos:line="269" pos:column="49">if<condition pos:line="269" pos:column="51">(<expr><call><name><name pos:line="269" pos:column="52">data</name><op:operator pos:line="269" pos:column="56">.</op:operator><name pos:line="269" pos:column="57">getWeeklyWage</name></name><argument_list pos:line="269" pos:column="70">()</argument_list></call> <op:operator pos:line="269" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="269" pos:column="75">0</lit:literal></expr>)</condition><then><block pos:line="269" pos:column="77">{
							<expr_stmt><expr><name pos:line="270" pos:column="57">resultAll</name> <op:operator pos:line="270" pos:column="67">=</op:operator> <call><name><name pos:line="270" pos:column="69">calc</name><op:operator pos:line="270" pos:column="73">.</op:operator><name pos:line="270" pos:column="74">givenWeeklyWageEstimateIncomeAll</name></name><argument_list pos:line="270" pos:column="106">(<argument><expr><call><name><name pos:line="270" pos:column="107">data</name><op:operator pos:line="270" pos:column="111">.</op:operator><name pos:line="270" pos:column="112">getWeeklyWage</name></name><argument_list pos:line="270" pos:column="125">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="271" pos:column="57">slopeAll</name> <op:operator pos:line="271" pos:column="66">=</op:operator> <call><name><name pos:line="271" pos:column="68">calc</name><op:operator pos:line="271" pos:column="72">.</op:operator><name pos:line="271" pos:column="73">givenWeeklyWageEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="271" pos:column="113">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="272" pos:column="57">interceptAll</name> <op:operator pos:line="272" pos:column="70">=</op:operator> <call><name><name pos:line="272" pos:column="72">calc</name><op:operator pos:line="272" pos:column="76">.</op:operator><name pos:line="272" pos:column="77">givenWeeklyWageEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="272" pos:column="121">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="273" pos:column="57">System</name><op:operator pos:line="273" pos:column="63">.</op:operator><name pos:line="273" pos:column="64">out</name><op:operator pos:line="273" pos:column="67">.</op:operator><name pos:line="273" pos:column="68">println</name></name><argument_list pos:line="273" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="76">"Based on weekly wage of "</lit:literal> <op:operator pos:line="273" pos:column="103">+</op:operator> <call><name><name pos:line="273" pos:column="105">myFormatter</name><op:operator pos:line="273" pos:column="116">.</op:operator><name pos:line="273" pos:column="117">format</name></name><argument_list pos:line="273" pos:column="123">(<argument><expr><call><name><name pos:line="273" pos:column="124">data</name><op:operator pos:line="273" pos:column="128">.</op:operator><name pos:line="273" pos:column="129">getWeeklyWage</name></name><argument_list pos:line="273" pos:column="142">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="273" pos:column="146">+</op:operator> <lit:literal type="string" pos:line="273" pos:column="148">" the estimated income is:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="274" pos:column="57">System</name><op:operator pos:line="274" pos:column="63">.</op:operator><name pos:line="274" pos:column="64">out</name><op:operator pos:line="274" pos:column="67">.</op:operator><name pos:line="274" pos:column="68">println</name></name><argument_list pos:line="274" pos:column="75">(<argument><expr><call><name><name pos:line="274" pos:column="76">myFormatter</name><op:operator pos:line="274" pos:column="87">.</op:operator><name pos:line="274" pos:column="88">format</name></name><argument_list pos:line="274" pos:column="94">(<argument><expr><name pos:line="274" pos:column="95">resultAll</name></expr></argument>)</argument_list></call> <op:operator pos:line="274" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="274" pos:column="108">" based on all the data in the database."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="275" pos:column="57">System</name><op:operator pos:line="275" pos:column="63">.</op:operator><name pos:line="275" pos:column="64">out</name><op:operator pos:line="275" pos:column="67">.</op:operator><name pos:line="275" pos:column="68">println</name></name><argument_list pos:line="275" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="76">"Using a regression formula of Income = weekly wage * "</lit:literal> <op:operator pos:line="275" pos:column="132">+</op:operator> <name pos:line="275" pos:column="134">slopeAll</name> <op:operator pos:line="275" pos:column="143">+</op:operator> <lit:literal type="string" pos:line="275" pos:column="145">" + "</lit:literal> <op:operator pos:line="275" pos:column="151">+</op:operator> <name pos:line="275" pos:column="153">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><call><name><name pos:line="277" pos:column="57">System</name><op:operator pos:line="277" pos:column="63">.</op:operator><name pos:line="277" pos:column="64">out</name><op:operator pos:line="277" pos:column="67">.</op:operator><name pos:line="277" pos:column="68">println</name></name><argument_list pos:line="277" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><name pos:line="279" pos:column="57">resultMiddleTwoThirds</name> <op:operator pos:line="279" pos:column="79">=</op:operator> <call><name><name pos:line="279" pos:column="81">calc</name><op:operator pos:line="279" pos:column="85">.</op:operator><name pos:line="279" pos:column="86">givenWeeklyWageEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="279" pos:column="130">(<argument><expr><call><name><name pos:line="279" pos:column="131">data</name><op:operator pos:line="279" pos:column="135">.</op:operator><name pos:line="279" pos:column="136">getWeeklyWage</name></name><argument_list pos:line="279" pos:column="149">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="280" pos:column="57">slopeMiddleTwoThirds</name> <op:operator pos:line="280" pos:column="78">=</op:operator> <call><name><name pos:line="280" pos:column="80">calc</name><op:operator pos:line="280" pos:column="84">.</op:operator><name pos:line="280" pos:column="85">givenWeeklyWageEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="280" pos:column="137">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="281" pos:column="57">interceptMiddleTwoThirds</name> <op:operator pos:line="281" pos:column="82">=</op:operator> <call><name><name pos:line="281" pos:column="84">calc</name><op:operator pos:line="281" pos:column="88">.</op:operator><name pos:line="281" pos:column="89">givenWeeklyWageEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="281" pos:column="145">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="282" pos:column="57">System</name><op:operator pos:line="282" pos:column="63">.</op:operator><name pos:line="282" pos:column="64">out</name><op:operator pos:line="282" pos:column="67">.</op:operator><name pos:line="282" pos:column="68">println</name></name><argument_list pos:line="282" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="76">"Based on the middle two thirds of data in the database the estimated income is "</lit:literal> <op:operator pos:line="282" pos:column="158">+</op:operator> <call><name><name pos:line="282" pos:column="160">myFormatter</name><op:operator pos:line="282" pos:column="171">.</op:operator><name pos:line="282" pos:column="172">format</name></name><argument_list pos:line="282" pos:column="178">(<argument><expr><name pos:line="282" pos:column="179">resultMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="283" pos:column="57">System</name><op:operator pos:line="283" pos:column="63">.</op:operator><name pos:line="283" pos:column="64">out</name><op:operator pos:line="283" pos:column="67">.</op:operator><name pos:line="283" pos:column="68">println</name></name><argument_list pos:line="283" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="76">"Using a regression formula of Income = weekly wage * "</lit:literal> <op:operator pos:line="283" pos:column="132">+</op:operator> <name pos:line="283" pos:column="134">slopeMiddleTwoThirds</name> <op:operator pos:line="283" pos:column="155">+</op:operator> <lit:literal type="string" pos:line="283" pos:column="157">" + "</lit:literal> <op:operator pos:line="283" pos:column="163">+</op:operator> <name pos:line="283" pos:column="165">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="284" pos:column="57">System</name><op:operator pos:line="284" pos:column="63">.</op:operator><name pos:line="284" pos:column="64">out</name><op:operator pos:line="284" pos:column="67">.</op:operator><name pos:line="284" pos:column="68">println</name></name><argument_list pos:line="284" pos:column="75">()</argument_list></call></expr>;</expr_stmt>

						}</block></then> <else pos:line="286" pos:column="51">else <block pos:line="286" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="287" pos:column="57">System</name><op:operator pos:line="287" pos:column="63">.</op:operator><name pos:line="287" pos:column="64">out</name><op:operator pos:line="287" pos:column="67">.</op:operator><name pos:line="287" pos:column="68">println</name></name><argument_list pos:line="287" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="76">"No weekly wage data available for this record.\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						
						<if pos:line="290" pos:column="49">if<condition pos:line="290" pos:column="51">(<expr><call><name><name pos:line="290" pos:column="52">data</name><op:operator pos:line="290" pos:column="56">.</op:operator><name pos:line="290" pos:column="57">getInvestmentIncome</name></name><argument_list pos:line="290" pos:column="76">()</argument_list></call> <op:operator pos:line="290" pos:column="79">&gt;</op:operator> <lit:literal type="number" pos:line="290" pos:column="81">0</lit:literal></expr>)</condition><then><block pos:line="290" pos:column="83">{
							<expr_stmt><expr><name pos:line="291" pos:column="57">resultAll</name> <op:operator pos:line="291" pos:column="67">=</op:operator> <call><name><name pos:line="291" pos:column="69">calc</name><op:operator pos:line="291" pos:column="73">.</op:operator><name pos:line="291" pos:column="74">givenInvestmentIncomeEstimateIncomeAll</name></name><argument_list pos:line="291" pos:column="112">(<argument><expr><call><name><name pos:line="291" pos:column="113">data</name><op:operator pos:line="291" pos:column="117">.</op:operator><name pos:line="291" pos:column="118">getInvestmentIncome</name></name><argument_list pos:line="291" pos:column="137">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="292" pos:column="57">slopeAll</name> <op:operator pos:line="292" pos:column="66">=</op:operator> <call><name><name pos:line="292" pos:column="68">calc</name><op:operator pos:line="292" pos:column="72">.</op:operator><name pos:line="292" pos:column="73">givenInvestmentIncomeEstimateIncomeGetSlopeAll</name></name><argument_list pos:line="292" pos:column="119">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="293" pos:column="57">interceptAll</name> <op:operator pos:line="293" pos:column="70">=</op:operator> <call><name><name pos:line="293" pos:column="72">calc</name><op:operator pos:line="293" pos:column="76">.</op:operator><name pos:line="293" pos:column="77">givenInvestmentIncomeEstimateIncomeGetInterceptAll</name></name><argument_list pos:line="293" pos:column="127">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="294" pos:column="57">System</name><op:operator pos:line="294" pos:column="63">.</op:operator><name pos:line="294" pos:column="64">out</name><op:operator pos:line="294" pos:column="67">.</op:operator><name pos:line="294" pos:column="68">println</name></name><argument_list pos:line="294" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="294" pos:column="76">"Based on investment income of "</lit:literal> <op:operator pos:line="294" pos:column="109">+</op:operator> <call><name><name pos:line="294" pos:column="111">myFormatter</name><op:operator pos:line="294" pos:column="122">.</op:operator><name pos:line="294" pos:column="123">format</name></name><argument_list pos:line="294" pos:column="129">(<argument><expr><call><name><name pos:line="294" pos:column="130">data</name><op:operator pos:line="294" pos:column="134">.</op:operator><name pos:line="294" pos:column="135">getInvestmentIncome</name></name><argument_list pos:line="294" pos:column="154">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="158">+</op:operator> <lit:literal type="string" pos:line="294" pos:column="160">" the estimated income is:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="295" pos:column="57">System</name><op:operator pos:line="295" pos:column="63">.</op:operator><name pos:line="295" pos:column="64">out</name><op:operator pos:line="295" pos:column="67">.</op:operator><name pos:line="295" pos:column="68">println</name></name><argument_list pos:line="295" pos:column="75">(<argument><expr><call><name><name pos:line="295" pos:column="76">myFormatter</name><op:operator pos:line="295" pos:column="87">.</op:operator><name pos:line="295" pos:column="88">format</name></name><argument_list pos:line="295" pos:column="94">(<argument><expr><name pos:line="295" pos:column="95">resultAll</name></expr></argument>)</argument_list></call> <op:operator pos:line="295" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="295" pos:column="108">" based on all the data in the database."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="296" pos:column="57">System</name><op:operator pos:line="296" pos:column="63">.</op:operator><name pos:line="296" pos:column="64">out</name><op:operator pos:line="296" pos:column="67">.</op:operator><name pos:line="296" pos:column="68">println</name></name><argument_list pos:line="296" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="76">"Using a regression formula of Income = investment income * "</lit:literal> <op:operator pos:line="296" pos:column="138">+</op:operator> <name pos:line="296" pos:column="140">slopeAll</name> <op:operator pos:line="296" pos:column="149">+</op:operator> <lit:literal type="string" pos:line="296" pos:column="151">" + "</lit:literal> <op:operator pos:line="296" pos:column="157">+</op:operator> <name pos:line="296" pos:column="159">interceptAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><call><name><name pos:line="298" pos:column="57">System</name><op:operator pos:line="298" pos:column="63">.</op:operator><name pos:line="298" pos:column="64">out</name><op:operator pos:line="298" pos:column="67">.</op:operator><name pos:line="298" pos:column="68">println</name></name><argument_list pos:line="298" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><name pos:line="300" pos:column="57">resultMiddleTwoThirds</name> <op:operator pos:line="300" pos:column="79">=</op:operator> <call><name><name pos:line="300" pos:column="81">calc</name><op:operator pos:line="300" pos:column="85">.</op:operator><name pos:line="300" pos:column="86">givenInvestmentIncomeEstimateIncomeMiddleTwoThirds</name></name><argument_list pos:line="300" pos:column="136">(<argument><expr><call><name><name pos:line="300" pos:column="137">data</name><op:operator pos:line="300" pos:column="141">.</op:operator><name pos:line="300" pos:column="142">getInvestmentIncome</name></name><argument_list pos:line="300" pos:column="161">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="301" pos:column="57">slopeMiddleTwoThirds</name> <op:operator pos:line="301" pos:column="78">=</op:operator> <call><name><name pos:line="301" pos:column="80">calc</name><op:operator pos:line="301" pos:column="84">.</op:operator><name pos:line="301" pos:column="85">givenInvestmentIncomeEstimateIncomeGetSlopeMiddleTwoThirds</name></name><argument_list pos:line="301" pos:column="143">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="302" pos:column="57">interceptMiddleTwoThirds</name> <op:operator pos:line="302" pos:column="82">=</op:operator> <call><name><name pos:line="302" pos:column="84">calc</name><op:operator pos:line="302" pos:column="88">.</op:operator><name pos:line="302" pos:column="89">givenInvestmentIncomeEstimateIncomeGetInterceptMiddleTwoThirds</name></name><argument_list pos:line="302" pos:column="151">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="303" pos:column="57">System</name><op:operator pos:line="303" pos:column="63">.</op:operator><name pos:line="303" pos:column="64">out</name><op:operator pos:line="303" pos:column="67">.</op:operator><name pos:line="303" pos:column="68">println</name></name><argument_list pos:line="303" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="303" pos:column="76">"Based on the middle two thirds of data in the database the estimated income is "</lit:literal> <op:operator pos:line="303" pos:column="158">+</op:operator> <call><name><name pos:line="303" pos:column="160">myFormatter</name><op:operator pos:line="303" pos:column="171">.</op:operator><name pos:line="303" pos:column="172">format</name></name><argument_list pos:line="303" pos:column="178">(<argument><expr><name pos:line="303" pos:column="179">resultMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="304" pos:column="57">System</name><op:operator pos:line="304" pos:column="63">.</op:operator><name pos:line="304" pos:column="64">out</name><op:operator pos:line="304" pos:column="67">.</op:operator><name pos:line="304" pos:column="68">println</name></name><argument_list pos:line="304" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="76">"Using a regression formula of Income = investment income * "</lit:literal> <op:operator pos:line="304" pos:column="138">+</op:operator> <name pos:line="304" pos:column="140">slopeMiddleTwoThirds</name> <op:operator pos:line="304" pos:column="161">+</op:operator> <lit:literal type="string" pos:line="304" pos:column="163">" + "</lit:literal> <op:operator pos:line="304" pos:column="169">+</op:operator> <name pos:line="304" pos:column="171">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="305" pos:column="57">System</name><op:operator pos:line="305" pos:column="63">.</op:operator><name pos:line="305" pos:column="64">out</name><op:operator pos:line="305" pos:column="67">.</op:operator><name pos:line="305" pos:column="68">println</name></name><argument_list pos:line="305" pos:column="75">()</argument_list></call></expr>;</expr_stmt>

						}</block></then> <else pos:line="307" pos:column="51">else <block pos:line="307" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="308" pos:column="57">System</name><op:operator pos:line="308" pos:column="63">.</op:operator><name pos:line="308" pos:column="64">out</name><op:operator pos:line="308" pos:column="67">.</op:operator><name pos:line="308" pos:column="68">println</name></name><argument_list pos:line="308" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="308" pos:column="76">"No investment income data available for this record.\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						
						<if pos:line="311" pos:column="49">if<condition pos:line="311" pos:column="51">(<expr><call><name><name pos:line="311" pos:column="52">data</name><op:operator pos:line="311" pos:column="56">.</op:operator><name pos:line="311" pos:column="57">getWeeklyWage</name></name><argument_list pos:line="311" pos:column="70">()</argument_list></call> <op:operator pos:line="311" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="311" pos:column="75">0</lit:literal> <op:operator pos:line="311" pos:column="77">&amp;&amp;</op:operator> <call><name><name pos:line="311" pos:column="80">data</name><op:operator pos:line="311" pos:column="84">.</op:operator><name pos:line="311" pos:column="85">getWorkWeeks</name></name><argument_list pos:line="311" pos:column="97">()</argument_list></call> <op:operator pos:line="311" pos:column="100">&gt;</op:operator> <lit:literal type="number" pos:line="311" pos:column="102">0</lit:literal></expr>)</condition><then><block pos:line="311" pos:column="104">{
							<expr_stmt><expr><call><name><name pos:line="312" pos:column="57">System</name><op:operator pos:line="312" pos:column="63">.</op:operator><name pos:line="312" pos:column="64">out</name><op:operator pos:line="312" pos:column="67">.</op:operator><name pos:line="312" pos:column="68">println</name></name><argument_list pos:line="312" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="312" pos:column="76">"Actual income = "</lit:literal> <op:operator pos:line="312" pos:column="95">+</op:operator> <call><name><name pos:line="312" pos:column="97">myFormatter</name><op:operator pos:line="312" pos:column="108">.</op:operator><name pos:line="312" pos:column="109">format</name></name><argument_list pos:line="312" pos:column="115">(<argument><expr><call><name><name pos:line="312" pos:column="116">data</name><op:operator pos:line="312" pos:column="120">.</op:operator><name pos:line="312" pos:column="121">getWeeklyWage</name></name><argument_list pos:line="312" pos:column="134">()</argument_list></call> <op:operator pos:line="312" pos:column="137">*</op:operator> <call><name><name pos:line="312" pos:column="139">data</name><op:operator pos:line="312" pos:column="143">.</op:operator><name pos:line="312" pos:column="144">getWorkWeeks</name></name><argument_list pos:line="312" pos:column="156">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="313" pos:column="51">else <block pos:line="313" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="314" pos:column="57">System</name><op:operator pos:line="314" pos:column="63">.</op:operator><name pos:line="314" pos:column="64">out</name><op:operator pos:line="314" pos:column="67">.</op:operator><name pos:line="314" pos:column="68">println</name></name><argument_list pos:line="314" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="76">"Database does not contain enough information to calculate actual income value."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						<expr_stmt><expr><call><name><name pos:line="316" pos:column="49">System</name><op:operator pos:line="316" pos:column="55">.</op:operator><name pos:line="316" pos:column="56">out</name><op:operator pos:line="316" pos:column="59">.</op:operator><name pos:line="316" pos:column="60">println</name></name><argument_list pos:line="316" pos:column="67">()</argument_list></call></expr>;</expr_stmt>	
					}</block></else></if>
				}</block></then></if>

		}</block> while <condition pos:line="320" pos:column="25">(<expr><lit:literal type="boolean" pos:line="320" pos:column="26">true</lit:literal></expr>)</condition>;</do>
		
	}</block></function>
	
	<function><type><specifier pos:line="324" pos:column="9">public</specifier> <name pos:line="324" pos:column="16">void</name></type> <name pos:line="324" pos:column="21">printAnswerAll</name><parameter_list pos:line="324" pos:column="35">(<param><decl><type><name pos:line="324" pos:column="36">String</name></type> <name pos:line="324" pos:column="43">type</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="49">double</name></type> <name pos:line="324" pos:column="56">value</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="63">double</name></type> <name pos:line="324" pos:column="70">resultAll</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="81">double</name></type> <name pos:line="324" pos:column="88">slopeAll</name></decl></param>, <param><decl><type><name pos:line="324" pos:column="98">double</name></type> <name pos:line="324" pos:column="105">intercpetAll</name></decl></param>)</parameter_list><block pos:line="324" pos:column="118">{
		<expr_stmt><expr><call><name><name pos:line="325" pos:column="17">System</name><op:operator pos:line="325" pos:column="23">.</op:operator><name pos:line="325" pos:column="24">out</name><op:operator pos:line="325" pos:column="27">.</op:operator><name pos:line="325" pos:column="28">println</name></name><argument_list pos:line="325" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="326" pos:column="17">System</name><op:operator pos:line="326" pos:column="23">.</op:operator><name pos:line="326" pos:column="24">out</name><op:operator pos:line="326" pos:column="27">.</op:operator><name pos:line="326" pos:column="28">println</name></name><argument_list pos:line="326" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="36">"Simple Linear Regression based on all data in the database:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="327" pos:column="17">System</name><op:operator pos:line="327" pos:column="23">.</op:operator><name pos:line="327" pos:column="24">out</name><op:operator pos:line="327" pos:column="27">.</op:operator><name pos:line="327" pos:column="28">println</name></name><argument_list pos:line="327" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="327" pos:column="36">"Based on "</lit:literal> <op:operator pos:line="327" pos:column="48">+</op:operator> <name pos:line="327" pos:column="50">type</name> <op:operator pos:line="327" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="327" pos:column="57">" value of "</lit:literal> <op:operator pos:line="327" pos:column="70">+</op:operator> <call><name><name pos:line="327" pos:column="72">myFormatter</name><op:operator pos:line="327" pos:column="83">.</op:operator><name pos:line="327" pos:column="84">format</name></name><argument_list pos:line="327" pos:column="90">(<argument><expr><name pos:line="327" pos:column="91">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="327" pos:column="100">" the estimated income is "</lit:literal> <op:operator pos:line="327" pos:column="128">+</op:operator> <call><name><name pos:line="327" pos:column="130">myFormatter</name><op:operator pos:line="327" pos:column="141">.</op:operator><name pos:line="327" pos:column="142">format</name></name><argument_list pos:line="327" pos:column="148">(<argument><expr><name pos:line="327" pos:column="149">resultAll</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="328" pos:column="17">System</name><op:operator pos:line="328" pos:column="23">.</op:operator><name pos:line="328" pos:column="24">out</name><op:operator pos:line="328" pos:column="27">.</op:operator><name pos:line="328" pos:column="28">println</name></name><argument_list pos:line="328" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="328" pos:column="36">"This estimate is based on simple linear regression based on all the "</lit:literal> <op:operator pos:line="328" pos:column="107">+</op:operator> <name pos:line="328" pos:column="109">type</name> <op:operator pos:line="328" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="328" pos:column="116">" and income data"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="329" pos:column="17">System</name><op:operator pos:line="329" pos:column="23">.</op:operator><name pos:line="329" pos:column="24">out</name><op:operator pos:line="329" pos:column="27">.</op:operator><name pos:line="329" pos:column="28">println</name></name><argument_list pos:line="329" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="329" pos:column="36">"contained in the database using a regression formula of:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="330" pos:column="17">System</name><op:operator pos:line="330" pos:column="23">.</op:operator><name pos:line="330" pos:column="24">out</name><op:operator pos:line="330" pos:column="27">.</op:operator><name pos:line="330" pos:column="28">println</name></name><argument_list pos:line="330" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="330" pos:column="36">"Income = "</lit:literal> <op:operator pos:line="330" pos:column="48">+</op:operator> <name pos:line="330" pos:column="50">type</name> <op:operator pos:line="330" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="330" pos:column="57">" * "</lit:literal> <op:operator pos:line="330" pos:column="63">+</op:operator> <name pos:line="330" pos:column="65">slopeAll</name> <op:operator pos:line="330" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="330" pos:column="76">" + "</lit:literal> <op:operator pos:line="330" pos:column="82">+</op:operator> <name pos:line="330" pos:column="84">intercpetAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="331" pos:column="17">System</name><op:operator pos:line="331" pos:column="23">.</op:operator><name pos:line="331" pos:column="24">out</name><op:operator pos:line="331" pos:column="27">.</op:operator><name pos:line="331" pos:column="28">println</name></name><argument_list pos:line="331" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="334" pos:column="9">public</specifier> <name pos:line="334" pos:column="16">void</name></type> <name pos:line="334" pos:column="21">printAnswerAll</name><parameter_list pos:line="334" pos:column="35">(<param><decl><type><name pos:line="334" pos:column="36">String</name></type> <name pos:line="334" pos:column="43">type</name></decl></param>, <param><decl><type><name pos:line="334" pos:column="49">int</name></type> <name pos:line="334" pos:column="53">value</name></decl></param>, <param><decl><type><name pos:line="334" pos:column="60">double</name></type> <name pos:line="334" pos:column="67">resultAll</name></decl></param>, <param><decl><type><name pos:line="334" pos:column="78">double</name></type> <name pos:line="334" pos:column="85">slopeAll</name></decl></param>, <param><decl><type><name pos:line="334" pos:column="95">double</name></type> <name pos:line="334" pos:column="102">intercpetAll</name></decl></param>)</parameter_list><block pos:line="334" pos:column="115">{
		<expr_stmt><expr><call><name><name pos:line="335" pos:column="17">System</name><op:operator pos:line="335" pos:column="23">.</op:operator><name pos:line="335" pos:column="24">out</name><op:operator pos:line="335" pos:column="27">.</op:operator><name pos:line="335" pos:column="28">println</name></name><argument_list pos:line="335" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="336" pos:column="17">System</name><op:operator pos:line="336" pos:column="23">.</op:operator><name pos:line="336" pos:column="24">out</name><op:operator pos:line="336" pos:column="27">.</op:operator><name pos:line="336" pos:column="28">println</name></name><argument_list pos:line="336" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="336" pos:column="36">"Simple Linear Regression based on all data in the database:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="337" pos:column="17">System</name><op:operator pos:line="337" pos:column="23">.</op:operator><name pos:line="337" pos:column="24">out</name><op:operator pos:line="337" pos:column="27">.</op:operator><name pos:line="337" pos:column="28">println</name></name><argument_list pos:line="337" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="337" pos:column="36">"Based on "</lit:literal> <op:operator pos:line="337" pos:column="48">+</op:operator> <name pos:line="337" pos:column="50">type</name> <op:operator pos:line="337" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="337" pos:column="57">" value of "</lit:literal> <op:operator pos:line="337" pos:column="70">+</op:operator> <name pos:line="337" pos:column="72">value</name> <op:operator pos:line="337" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="337" pos:column="80">" the estimated income is "</lit:literal> <op:operator pos:line="337" pos:column="108">+</op:operator> <call><name><name pos:line="337" pos:column="110">myFormatter</name><op:operator pos:line="337" pos:column="121">.</op:operator><name pos:line="337" pos:column="122">format</name></name><argument_list pos:line="337" pos:column="128">(<argument><expr><name pos:line="337" pos:column="129">resultAll</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="338" pos:column="17">System</name><op:operator pos:line="338" pos:column="23">.</op:operator><name pos:line="338" pos:column="24">out</name><op:operator pos:line="338" pos:column="27">.</op:operator><name pos:line="338" pos:column="28">println</name></name><argument_list pos:line="338" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="338" pos:column="36">"This estimate is based on simple linear regression based on all the "</lit:literal> <op:operator pos:line="338" pos:column="107">+</op:operator> <name pos:line="338" pos:column="109">type</name> <op:operator pos:line="338" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="338" pos:column="116">" and income data"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="339" pos:column="17">System</name><op:operator pos:line="339" pos:column="23">.</op:operator><name pos:line="339" pos:column="24">out</name><op:operator pos:line="339" pos:column="27">.</op:operator><name pos:line="339" pos:column="28">println</name></name><argument_list pos:line="339" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="339" pos:column="36">"contained in the database using a regression formula of:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="340" pos:column="17">System</name><op:operator pos:line="340" pos:column="23">.</op:operator><name pos:line="340" pos:column="24">out</name><op:operator pos:line="340" pos:column="27">.</op:operator><name pos:line="340" pos:column="28">println</name></name><argument_list pos:line="340" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="36">"Income = "</lit:literal> <op:operator pos:line="340" pos:column="48">+</op:operator> <name pos:line="340" pos:column="50">type</name> <op:operator pos:line="340" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="340" pos:column="57">" * "</lit:literal> <op:operator pos:line="340" pos:column="63">+</op:operator> <name pos:line="340" pos:column="65">slopeAll</name> <op:operator pos:line="340" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="340" pos:column="76">" + "</lit:literal> <op:operator pos:line="340" pos:column="82">+</op:operator> <name pos:line="340" pos:column="84">intercpetAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="341" pos:column="17">System</name><op:operator pos:line="341" pos:column="23">.</op:operator><name pos:line="341" pos:column="24">out</name><op:operator pos:line="341" pos:column="27">.</op:operator><name pos:line="341" pos:column="28">println</name></name><argument_list pos:line="341" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="344" pos:column="9">public</specifier> <name pos:line="344" pos:column="16">void</name></type> <name pos:line="344" pos:column="21">printAnswerMiddleTwoThirds</name><parameter_list pos:line="344" pos:column="47">(<param><decl><type><name pos:line="344" pos:column="48">String</name></type> <name pos:line="344" pos:column="55">type</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="61">int</name></type> <name pos:line="344" pos:column="65">value</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="72">double</name></type> <name pos:line="344" pos:column="79">resultMiddleTwoThirds</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="102">double</name></type> <name pos:line="344" pos:column="109">slopeMiddleTwoThirds</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="131">double</name></type> <name pos:line="344" pos:column="138">intercpetMiddleTwoThirds</name></decl></param>)</parameter_list><block pos:line="344" pos:column="163">{
		<expr_stmt><expr><call><name><name pos:line="345" pos:column="17">System</name><op:operator pos:line="345" pos:column="23">.</op:operator><name pos:line="345" pos:column="24">out</name><op:operator pos:line="345" pos:column="27">.</op:operator><name pos:line="345" pos:column="28">println</name></name><argument_list pos:line="345" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="346" pos:column="17">System</name><op:operator pos:line="346" pos:column="23">.</op:operator><name pos:line="346" pos:column="24">out</name><op:operator pos:line="346" pos:column="27">.</op:operator><name pos:line="346" pos:column="28">println</name></name><argument_list pos:line="346" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="346" pos:column="36">"Simple Linear Regression based on the middle two thrids of data in the database sorted based on "</lit:literal> <op:operator pos:line="346" pos:column="135">+</op:operator> <name pos:line="346" pos:column="137">type</name> <op:operator pos:line="346" pos:column="142">+</op:operator> <lit:literal type="string" pos:line="346" pos:column="144">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="347" pos:column="17">System</name><op:operator pos:line="347" pos:column="23">.</op:operator><name pos:line="347" pos:column="24">out</name><op:operator pos:line="347" pos:column="27">.</op:operator><name pos:line="347" pos:column="28">println</name></name><argument_list pos:line="347" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="347" pos:column="36">"Based on "</lit:literal> <op:operator pos:line="347" pos:column="48">+</op:operator> <name pos:line="347" pos:column="50">type</name> <op:operator pos:line="347" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="347" pos:column="57">" value of "</lit:literal> <op:operator pos:line="347" pos:column="70">+</op:operator> <name pos:line="347" pos:column="72">value</name> <op:operator pos:line="347" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="347" pos:column="80">" the estimated income is "</lit:literal> <op:operator pos:line="347" pos:column="108">+</op:operator> <call><name><name pos:line="347" pos:column="110">myFormatter</name><op:operator pos:line="347" pos:column="121">.</op:operator><name pos:line="347" pos:column="122">format</name></name><argument_list pos:line="347" pos:column="128">(<argument><expr><name pos:line="347" pos:column="129">resultMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="348" pos:column="17">System</name><op:operator pos:line="348" pos:column="23">.</op:operator><name pos:line="348" pos:column="24">out</name><op:operator pos:line="348" pos:column="27">.</op:operator><name pos:line="348" pos:column="28">println</name></name><argument_list pos:line="348" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="36">"This estimate is based on simple linear regression based on the middle two thirds of the "</lit:literal> <op:operator pos:line="348" pos:column="128">+</op:operator> <name pos:line="348" pos:column="130">type</name> <op:operator pos:line="348" pos:column="135">+</op:operator> <lit:literal type="string" pos:line="348" pos:column="137">" and"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="349" pos:column="17">System</name><op:operator pos:line="349" pos:column="23">.</op:operator><name pos:line="349" pos:column="24">out</name><op:operator pos:line="349" pos:column="27">.</op:operator><name pos:line="349" pos:column="28">println</name></name><argument_list pos:line="349" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="36">"income data contained in the database (sorted based on "</lit:literal> <op:operator pos:line="349" pos:column="94">+</op:operator> <name pos:line="349" pos:column="96">type</name> <op:operator pos:line="349" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="349" pos:column="103">" ) using a regression formula of:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="350" pos:column="17">System</name><op:operator pos:line="350" pos:column="23">.</op:operator><name pos:line="350" pos:column="24">out</name><op:operator pos:line="350" pos:column="27">.</op:operator><name pos:line="350" pos:column="28">println</name></name><argument_list pos:line="350" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="36">"Income = "</lit:literal> <op:operator pos:line="350" pos:column="48">+</op:operator> <name pos:line="350" pos:column="50">type</name> <op:operator pos:line="350" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="350" pos:column="57">" * "</lit:literal> <op:operator pos:line="350" pos:column="63">+</op:operator> <name pos:line="350" pos:column="65">slopeMiddleTwoThirds</name> <op:operator pos:line="350" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="350" pos:column="88">" + "</lit:literal> <op:operator pos:line="350" pos:column="94">+</op:operator> <name pos:line="350" pos:column="96">intercpetMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="351" pos:column="17">System</name><op:operator pos:line="351" pos:column="23">.</op:operator><name pos:line="351" pos:column="24">out</name><op:operator pos:line="351" pos:column="27">.</op:operator><name pos:line="351" pos:column="28">println</name></name><argument_list pos:line="351" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="354" pos:column="9">public</specifier> <name pos:line="354" pos:column="16">void</name></type> <name pos:line="354" pos:column="21">printAnswerMiddleTwoThirds</name><parameter_list pos:line="354" pos:column="47">(<param><decl><type><name pos:line="354" pos:column="48">String</name></type> <name pos:line="354" pos:column="55">type</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="61">double</name></type> <name pos:line="354" pos:column="68">value</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="75">double</name></type> <name pos:line="354" pos:column="82">resultMiddleTwoThirds</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="105">double</name></type> <name pos:line="354" pos:column="112">slopeMiddleTwoThirds</name></decl></param>, <param><decl><type><name pos:line="354" pos:column="134">double</name></type> <name pos:line="354" pos:column="141">intercpetMiddleTwoThirds</name></decl></param>)</parameter_list><block pos:line="354" pos:column="166">{
		<expr_stmt><expr><call><name><name pos:line="355" pos:column="17">System</name><op:operator pos:line="355" pos:column="23">.</op:operator><name pos:line="355" pos:column="24">out</name><op:operator pos:line="355" pos:column="27">.</op:operator><name pos:line="355" pos:column="28">println</name></name><argument_list pos:line="355" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="356" pos:column="17">System</name><op:operator pos:line="356" pos:column="23">.</op:operator><name pos:line="356" pos:column="24">out</name><op:operator pos:line="356" pos:column="27">.</op:operator><name pos:line="356" pos:column="28">println</name></name><argument_list pos:line="356" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="36">"Simple Linear Regression based on the middle two thrids of data in the database sorted based on "</lit:literal> <op:operator pos:line="356" pos:column="135">+</op:operator> <name pos:line="356" pos:column="137">type</name> <op:operator pos:line="356" pos:column="142">+</op:operator> <lit:literal type="string" pos:line="356" pos:column="144">":"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="357" pos:column="17">System</name><op:operator pos:line="357" pos:column="23">.</op:operator><name pos:line="357" pos:column="24">out</name><op:operator pos:line="357" pos:column="27">.</op:operator><name pos:line="357" pos:column="28">println</name></name><argument_list pos:line="357" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="357" pos:column="36">"Based on "</lit:literal> <op:operator pos:line="357" pos:column="48">+</op:operator> <name pos:line="357" pos:column="50">type</name> <op:operator pos:line="357" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="357" pos:column="57">" value of "</lit:literal> <op:operator pos:line="357" pos:column="70">+</op:operator> <call><name><name pos:line="357" pos:column="72">myFormatter</name><op:operator pos:line="357" pos:column="83">.</op:operator><name pos:line="357" pos:column="84">format</name></name><argument_list pos:line="357" pos:column="90">(<argument><expr><name pos:line="357" pos:column="91">value</name></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="357" pos:column="100">" the estimated income is "</lit:literal> <op:operator pos:line="357" pos:column="128">+</op:operator> <call><name><name pos:line="357" pos:column="130">myFormatter</name><op:operator pos:line="357" pos:column="141">.</op:operator><name pos:line="357" pos:column="142">format</name></name><argument_list pos:line="357" pos:column="148">(<argument><expr><name pos:line="357" pos:column="149">resultMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="358" pos:column="17">System</name><op:operator pos:line="358" pos:column="23">.</op:operator><name pos:line="358" pos:column="24">out</name><op:operator pos:line="358" pos:column="27">.</op:operator><name pos:line="358" pos:column="28">println</name></name><argument_list pos:line="358" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="358" pos:column="36">"This estimate is based on simple linear regression based on the middle two thirds of the "</lit:literal> <op:operator pos:line="358" pos:column="128">+</op:operator> <name pos:line="358" pos:column="130">type</name> <op:operator pos:line="358" pos:column="135">+</op:operator> <lit:literal type="string" pos:line="358" pos:column="137">" and"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="359" pos:column="17">System</name><op:operator pos:line="359" pos:column="23">.</op:operator><name pos:line="359" pos:column="24">out</name><op:operator pos:line="359" pos:column="27">.</op:operator><name pos:line="359" pos:column="28">println</name></name><argument_list pos:line="359" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="359" pos:column="36">"income data contained in the database (sorted based on "</lit:literal> <op:operator pos:line="359" pos:column="94">+</op:operator> <name pos:line="359" pos:column="96">type</name> <op:operator pos:line="359" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="359" pos:column="103">" ) using a regression formula of:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="360" pos:column="17">System</name><op:operator pos:line="360" pos:column="23">.</op:operator><name pos:line="360" pos:column="24">out</name><op:operator pos:line="360" pos:column="27">.</op:operator><name pos:line="360" pos:column="28">println</name></name><argument_list pos:line="360" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="360" pos:column="36">"Income = "</lit:literal> <op:operator pos:line="360" pos:column="48">+</op:operator> <name pos:line="360" pos:column="50">type</name> <op:operator pos:line="360" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="360" pos:column="57">" * "</lit:literal> <op:operator pos:line="360" pos:column="63">+</op:operator> <name pos:line="360" pos:column="65">slopeMiddleTwoThirds</name> <op:operator pos:line="360" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="360" pos:column="88">" + "</lit:literal> <op:operator pos:line="360" pos:column="94">+</op:operator> <name pos:line="360" pos:column="96">intercpetMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="361" pos:column="17">System</name><op:operator pos:line="361" pos:column="23">.</op:operator><name pos:line="361" pos:column="24">out</name><op:operator pos:line="361" pos:column="27">.</op:operator><name pos:line="361" pos:column="28">println</name></name><argument_list pos:line="361" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="364" pos:column="9">public</specifier> <name pos:line="364" pos:column="16">void</name></type> <name pos:line="364" pos:column="21">displayMainMenu</name><parameter_list pos:line="364" pos:column="36">()</parameter_list><block pos:line="364" pos:column="38">{
		<expr_stmt><expr><call><name><name pos:line="365" pos:column="17">System</name><op:operator pos:line="365" pos:column="23">.</op:operator><name pos:line="365" pos:column="24">out</name><op:operator pos:line="365" pos:column="27">.</op:operator><name pos:line="365" pos:column="28">println</name></name><argument_list pos:line="365" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="365" pos:column="36">"Please select a catigory to estimate a persons Income based on:"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="366" pos:column="17">System</name><op:operator pos:line="366" pos:column="23">.</op:operator><name pos:line="366" pos:column="24">out</name><op:operator pos:line="366" pos:column="27">.</op:operator><name pos:line="366" pos:column="28">println</name></name><argument_list pos:line="366" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="36">"[1] Work Weeks"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="367" pos:column="17">System</name><op:operator pos:line="367" pos:column="23">.</op:operator><name pos:line="367" pos:column="24">out</name><op:operator pos:line="367" pos:column="27">.</op:operator><name pos:line="367" pos:column="28">println</name></name><argument_list pos:line="367" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="36">"[2] Weekly Wage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="368" pos:column="17">System</name><op:operator pos:line="368" pos:column="23">.</op:operator><name pos:line="368" pos:column="24">out</name><op:operator pos:line="368" pos:column="27">.</op:operator><name pos:line="368" pos:column="28">println</name></name><argument_list pos:line="368" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="36">"[3] Investment Income"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="369" pos:column="17">System</name><op:operator pos:line="369" pos:column="23">.</op:operator><name pos:line="369" pos:column="24">out</name><op:operator pos:line="369" pos:column="27">.</op:operator><name pos:line="369" pos:column="28">println</name></name><argument_list pos:line="369" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="36">"[4] Enter a SSN to calculate based on a record in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="370" pos:column="17">System</name><op:operator pos:line="370" pos:column="23">.</op:operator><name pos:line="370" pos:column="24">out</name><op:operator pos:line="370" pos:column="27">.</op:operator><name pos:line="370" pos:column="28">println</name></name><argument_list pos:line="370" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="370" pos:column="36">"[5] Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
	
	

</unit>
