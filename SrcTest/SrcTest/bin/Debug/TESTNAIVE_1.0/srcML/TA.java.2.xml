<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\TA.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">lang</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">annotation</name><op:operator pos:line="4" pos:column="28">.</op:operator><name pos:line="4" pos:column="29">ElementType</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">lang</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">annotation</name><op:operator pos:line="5" pos:column="28">.</op:operator><name pos:line="5" pos:column="29">Retention</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">lang</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">annotation</name><op:operator pos:line="6" pos:column="28">.</op:operator><name pos:line="6" pos:column="29">RetentionPolicy</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">lang</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">annotation</name><op:operator pos:line="7" pos:column="28">.</op:operator><name pos:line="7" pos:column="29">Target</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">ArrayList</name></name>;</import>



<comment type="block" format="javadoc" pos:line="16" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="21" pos:column="1">/*************** TA.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="23" pos:column="1">public</specifier> class <name pos:line="23" pos:column="14">TA</name> <super><extends pos:line="23" pos:column="17">extends <name pos:line="23" pos:column="25">Student</name></extends></super> <block pos:line="23" pos:column="33">{
	

	<comment type="line" pos:line="26" pos:column="9">//TA class constructor takes in the UIN and then sets the values to the UIn specific </comment>
	<constructor><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">TA</name><parameter_list pos:line="27" pos:column="18">(<param><decl><type><name pos:line="27" pos:column="19">int</name></type> <name pos:line="27" pos:column="23">UIN</name></decl></param>)</parameter_list> <throws pos:line="27" pos:column="28">throws <argument><expr><name pos:line="27" pos:column="35">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="27" pos:column="63">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">super</name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="28" pos:column="28">//calls the super class</comment>
		
		<try pos:line="30" pos:column="17">try<block pos:line="30" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">Connection</name></type> <name pos:line="31" pos:column="36">conn</name> <init pos:line="31" pos:column="41">= <expr><call><name><name pos:line="31" pos:column="43">Database</name><op:operator pos:line="31" pos:column="51">.</op:operator><name pos:line="31" pos:column="52">getConnection</name></name><argument_list pos:line="31" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="31" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">String</name></type> <name pos:line="32" pos:column="32">SQLStudentTASelect</name><init pos:line="32" pos:column="50">=<expr><lit:literal type="string" pos:line="32" pos:column="51">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="33" pos:column="25">try<block pos:line="33" pos:column="28">{
			
				<if pos:line="35" pos:column="33">if<condition pos:line="35" pos:column="35">(<expr><name pos:line="35" pos:column="36">conn</name> <op:operator pos:line="35" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="35" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="35" pos:column="49">{
					
					<expr_stmt><expr><name pos:line="37" pos:column="41">SQLStudentTASelect</name> <op:operator pos:line="37" pos:column="60">=</op:operator> <lit:literal type="string" pos:line="37" pos:column="62">"Select * From teachingassistant where TaUIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="37" pos:column="111">//write the query</comment>
				}</block></then></if>
				
				<decl_stmt><decl><type><name pos:line="40" pos:column="33">PreparedStatement</name></type> <name pos:line="40" pos:column="51">stmtForSelect</name> <init pos:line="40" pos:column="65">= <expr><call><name><name pos:line="40" pos:column="67">conn</name><op:operator pos:line="40" pos:column="71">.</op:operator><name pos:line="40" pos:column="72">prepareStatement</name></name><argument_list pos:line="40" pos:column="88">(<argument><expr><name pos:line="40" pos:column="89">SQLStudentTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="41" pos:column="33">stmtForSelect</name><op:operator pos:line="41" pos:column="46">.</op:operator><name pos:line="41" pos:column="47">setInt</name></name><argument_list pos:line="41" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="41" pos:column="62">//set the UIN</comment>
				
				<decl_stmt><decl><type><name pos:line="43" pos:column="33">ResultSet</name></type> <name pos:line="43" pos:column="43">rs</name> <init pos:line="43" pos:column="46">=  <expr><call><name><name pos:line="43" pos:column="49">stmtForSelect</name><op:operator pos:line="43" pos:column="62">.</op:operator><name pos:line="43" pos:column="63">executeQuery</name></name><argument_list pos:line="43" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="43" pos:column="78">//execute the query</comment>
					
					<if pos:line="45" pos:column="41">if<condition pos:line="45" pos:column="43">(<expr><call><name><name pos:line="45" pos:column="44">rs</name><op:operator pos:line="45" pos:column="46">.</op:operator><name pos:line="45" pos:column="47">first</name></name><argument_list pos:line="45" pos:column="52">()</argument_list></call></expr>)</condition><then pos:line="45" pos:column="55">
					<block pos:line="46" pos:column="41">{
						<comment type="line" pos:line="47" pos:column="49">//if the resultset exists then get the values</comment>
						
						<expr_stmt><expr><call><name><name pos:line="49" pos:column="49">DBAnnotation</name><op:operator pos:line="49" pos:column="61">.</op:operator><name pos:line="49" pos:column="62">annoate</name></name><argument_list pos:line="49" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="70">"retrievedTAOfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="92">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="113">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="49" pos:column="124">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="50" pos:column="41">int</name></type> <name pos:line="50" pos:column="45">retrievedTAOfferID</name> <init pos:line="50" pos:column="64">= <expr><call><name><name pos:line="50" pos:column="66">rs</name><op:operator pos:line="50" pos:column="68">.</op:operator><name pos:line="50" pos:column="69">getInt</name></name><argument_list pos:line="50" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="76">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        
				        <expr_stmt><expr><call><name><name pos:line="52" pos:column="41">DBAnnotation</name><op:operator pos:line="52" pos:column="53">.</op:operator><name pos:line="52" pos:column="54">annoate</name></name><argument_list pos:line="52" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="62">"retrievedTAOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="88">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="109">"TaOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="52" pos:column="126">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="53" pos:column="41">String</name></type> <name pos:line="53" pos:column="48">retrievedTAOfficeHours</name> <init pos:line="53" pos:column="71">= <expr><call><name><name pos:line="53" pos:column="73">rs</name><op:operator pos:line="53" pos:column="75">.</op:operator><name pos:line="53" pos:column="76">getString</name></name><argument_list pos:line="53" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="86">"TaOfficeHours"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        
				        <expr_stmt><expr><call><name><name pos:line="55" pos:column="41">DBAnnotation</name><op:operator pos:line="55" pos:column="53">.</op:operator><name pos:line="55" pos:column="54">annoate</name></name><argument_list pos:line="55" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="62">"retrievedTAOfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="90">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="111">"TaOfficeLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="55" pos:column="131">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="56" pos:column="41">String</name></type> <name pos:line="56" pos:column="48">retrievedTAOfficeAddress</name> <init pos:line="56" pos:column="73">= <expr><call><name><name pos:line="56" pos:column="75">rs</name><op:operator pos:line="56" pos:column="77">.</op:operator><name pos:line="56" pos:column="78">getString</name></name><argument_list pos:line="56" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="88">"TaOfficeLocation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



					}</block></then>
					
					<else pos:line="62" pos:column="41">else
					<block pos:line="63" pos:column="41">{
						<comment type="line" pos:line="64" pos:column="49">//else the UIN does not exist</comment>
						<expr_stmt><expr><call><name><name pos:line="65" pos:column="49">System</name><op:operator pos:line="65" pos:column="55">.</op:operator><name pos:line="65" pos:column="56">out</name><op:operator pos:line="65" pos:column="59">.</op:operator><name pos:line="65" pos:column="60">println</name></name><argument_list pos:line="65" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="68">"UIN does not exist in the TA table"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<throw pos:line="66" pos:column="49">throw <expr><op:operator pos:line="66" pos:column="55">new</op:operator> <call><name pos:line="66" pos:column="59">PersonDoesNotExistException</name><argument_list pos:line="66" pos:column="86">()</argument_list></call></expr>;</throw>

					}</block></else></if>
					
				
			
		
	}</block>
			<comment type="line" pos:line="74" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="75" pos:column="25">catch<parameter_list pos:line="75" pos:column="30">(<param><decl><type><name pos:line="75" pos:column="31">SQLException</name></type> <name pos:line="75" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="75" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="76" pos:column="33">System</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">out</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">print</name></name><argument_list pos:line="76" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="50">"SQL exception in student const"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">System</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">out</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">println</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><name pos:line="77" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">e</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">printStackTrace</name></name><argument_list pos:line="78" pos:column="50">()</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
		}</block>
			
		<comment type="line" pos:line="82" pos:column="17">//catch the person deos not exist exception</comment>
		<catch pos:line="83" pos:column="17">catch<parameter_list pos:line="83" pos:column="22">(<param><decl><type><name pos:line="83" pos:column="23">PersonDoesNotExistException</name></type> <name pos:line="83" pos:column="51">e</name></decl></param>)</parameter_list><block pos:line="83" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">System</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">out</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">println</name></name><argument_list pos:line="84" pos:column="43">(<argument><expr><name pos:line="84" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">e</name><op:operator pos:line="85" pos:column="26">.</op:operator><name pos:line="85" pos:column="27">printStackTrace</name></name><argument_list pos:line="85" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<throw pos:line="86" pos:column="25">throw <expr><op:operator pos:line="86" pos:column="31">new</op:operator> <call><name pos:line="86" pos:column="35">PersonDoesNotExistException</name><argument_list pos:line="86" pos:column="62">()</argument_list></call></expr>;</throw>
			
		}</block></catch>
		
		<comment type="line" pos:line="90" pos:column="17">//finally block</comment>
		<finally pos:line="91" pos:column="17">finally<block pos:line="91" pos:column="24">{
			
			<comment type="line" pos:line="93" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		<comment type="line" pos:line="95" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block" pos:line="98" pos:column="9">/*
	 * updateTA office sddress function takes in the inputs of the UIN of the TA and the
	 * offer ID of the course and the new office address
	 * 
	 * Calls the addtoEmployee function which returns a boolean value 
	 * 
	 * it updated it returns true
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier pos:line="109" pos:column="9">public</specifier> <specifier pos:line="109" pos:column="16">static</specifier> <name pos:line="109" pos:column="23">boolean</name></type> <name pos:line="109" pos:column="31">updateTaOfficeAddress</name><parameter_list pos:line="109" pos:column="52">(<param><decl><type><name pos:line="109" pos:column="53">int</name></type> <name pos:line="109" pos:column="57">UIN</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="62">int</name></type> <name pos:line="109" pos:column="66">offerID</name></decl></param>, <param><decl><type><name pos:line="109" pos:column="75">String</name></type> <name pos:line="109" pos:column="82">newOfficeAddress</name></decl></param>)</parameter_list><block pos:line="109" pos:column="99">{
		
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">boolean</name></type> <name pos:line="111" pos:column="25">isUpdated</name><init pos:line="111" pos:column="34">=<expr><lit:literal type="boolean" pos:line="111" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt> 
		
		<comment type="line" pos:line="113" pos:column="17">//check for null</comment>
		<if pos:line="114" pos:column="17">if<condition pos:line="114" pos:column="19">(<expr><name pos:line="114" pos:column="20">newOfficeAddress</name><op:operator pos:line="114" pos:column="36">==</op:operator><lit:literal type="null" pos:line="114" pos:column="38">null</lit:literal></expr>)</condition><then><block pos:line="114" pos:column="43">{
			<return pos:line="115" pos:column="25">return <expr><lit:literal type="boolean" pos:line="115" pos:column="32">false</lit:literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line" pos:line="118" pos:column="17">//check the length</comment>
		<if pos:line="119" pos:column="17">if<condition pos:line="119" pos:column="19">(<expr><call><name><name pos:line="119" pos:column="20">newOfficeAddress</name><op:operator pos:line="119" pos:column="36">.</op:operator><name pos:line="119" pos:column="37">length</name></name><argument_list pos:line="119" pos:column="43">()</argument_list></call><op:operator pos:line="119" pos:column="45">==</op:operator><lit:literal type="number" pos:line="119" pos:column="47">0</lit:literal></expr>)</condition><then><block pos:line="119" pos:column="49">{
			<return pos:line="120" pos:column="25">return <expr><lit:literal type="boolean" pos:line="120" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">boolean</name></type> <name pos:line="124" pos:column="25">check</name><init pos:line="124" pos:column="30">=<expr><call><name pos:line="124" pos:column="31">addTAtoTAtableCheck</name><argument_list pos:line="124" pos:column="50">(<argument><expr><name pos:line="124" pos:column="51">UIN</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="56">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="124" pos:column="65">//check if TA exists</comment>
		<if pos:line="125" pos:column="17">if<condition pos:line="125" pos:column="19">(<expr><op:operator pos:line="125" pos:column="20">!</op:operator><name pos:line="125" pos:column="21">check</name></expr>)</condition><then><block pos:line="125" pos:column="27">{
			<return pos:line="126" pos:column="25">return <expr><lit:literal type="boolean" pos:line="126" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<try pos:line="129" pos:column="17">try<block pos:line="129" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="130" pos:column="25">Connection</name></type> <name pos:line="130" pos:column="36">conn</name> <init pos:line="130" pos:column="41">= <expr><call><name><name pos:line="130" pos:column="43">Database</name><op:operator pos:line="130" pos:column="51">.</op:operator><name pos:line="130" pos:column="52">getConnection</name></name><argument_list pos:line="130" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="130" pos:column="68">//get the connection</comment>
			
			<try pos:line="132" pos:column="25">try<block pos:line="132" pos:column="28">{
				
				<decl_stmt><decl><type><name pos:line="134" pos:column="33">CourseOffered</name></type> <name pos:line="134" pos:column="47">c</name><init pos:line="134" pos:column="48">=<expr><op:operator pos:line="134" pos:column="49">new</op:operator> <call><name pos:line="134" pos:column="53">CourseOffered</name><argument_list pos:line="134" pos:column="66">(<argument><expr><name pos:line="134" pos:column="67">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="136" pos:column="49">System</name><op:operator pos:line="136" pos:column="55">.</op:operator><name pos:line="136" pos:column="56">out</name><op:operator pos:line="136" pos:column="59">.</op:operator><name pos:line="136" pos:column="60">println</name></name><argument_list pos:line="136" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="68">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="137" pos:column="49">String</name></type> <name pos:line="137" pos:column="56">SQLPeopleInsert</name><init pos:line="137" pos:column="71">= <expr><lit:literal type="string" pos:line="137" pos:column="73">"UPDATE teachingassistant SET TaOfficeLocation= ? where TaUIN=? and OfferID=? ;"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="138" pos:column="49">PreparedStatement</name></type> <name pos:line="138" pos:column="67">stmt</name> <init pos:line="138" pos:column="72">= <expr><call><name><name pos:line="138" pos:column="74">conn</name><op:operator pos:line="138" pos:column="78">.</op:operator><name pos:line="138" pos:column="79">prepareStatement</name></name><argument_list pos:line="138" pos:column="95">(<argument><expr><name pos:line="138" pos:column="96">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="139" pos:column="49">stmt</name><op:operator pos:line="139" pos:column="53">.</op:operator><name pos:line="139" pos:column="54">setString</name></name><argument_list pos:line="139" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="139" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="67">newOfficeAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="139" pos:column="85">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="140" pos:column="49">stmt</name><op:operator pos:line="140" pos:column="53">.</op:operator><name pos:line="140" pos:column="54">setInt</name></name><argument_list pos:line="140" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="140" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="140" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="140" pos:column="69">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="141" pos:column="49">stmt</name><op:operator pos:line="141" pos:column="53">.</op:operator><name pos:line="141" pos:column="54">setInt</name></name><argument_list pos:line="141" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="61">3</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="64">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="141" pos:column="73">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="142" pos:column="49">System</name><op:operator pos:line="142" pos:column="55">.</op:operator><name pos:line="142" pos:column="56">out</name><op:operator pos:line="142" pos:column="59">.</op:operator><name pos:line="142" pos:column="60">println</name></name><argument_list pos:line="142" pos:column="67">(<argument><expr><name pos:line="142" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="143" pos:column="49">int</name></type> <name pos:line="143" pos:column="53">i</name> <init pos:line="143" pos:column="55">= <expr><call><name><name pos:line="143" pos:column="57">stmt</name><op:operator pos:line="143" pos:column="61">.</op:operator><name pos:line="143" pos:column="62">executeUpdate</name></name><argument_list pos:line="143" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="143" pos:column="78">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="145" pos:column="49">DBAnnotation</name><op:operator pos:line="145" pos:column="61">.</op:operator><name pos:line="145" pos:column="62">annoate</name></name><argument_list pos:line="145" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="70">"newOfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="90">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="111">"TaOfficeLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="145" pos:column="131">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="146" pos:column="49">DBAnnotation</name><op:operator pos:line="146" pos:column="61">.</op:operator><name pos:line="146" pos:column="62">annoate</name></name><argument_list pos:line="146" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="77">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="98">"TaUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="146" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="147" pos:column="49">DBAnnotation</name><op:operator pos:line="147" pos:column="61">.</op:operator><name pos:line="147" pos:column="62">annoate</name></name><argument_list pos:line="147" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="81">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="147" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="147" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="149" pos:column="49">System</name><op:operator pos:line="149" pos:column="55">.</op:operator><name pos:line="149" pos:column="56">out</name><op:operator pos:line="149" pos:column="59">.</op:operator><name pos:line="149" pos:column="60">println</name></name><argument_list pos:line="149" pos:column="67">(<argument><expr><name pos:line="149" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="150" pos:column="49">System</name><op:operator pos:line="150" pos:column="55">.</op:operator><name pos:line="150" pos:column="56">out</name><op:operator pos:line="150" pos:column="59">.</op:operator><name pos:line="150" pos:column="60">println</name></name><argument_list pos:line="150" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="68">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="151" pos:column="49">isUpdated</name><op:operator pos:line="151" pos:column="58">=</op:operator><lit:literal type="boolean" pos:line="151" pos:column="59">true</lit:literal></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="153" pos:column="49">Database</name><op:operator pos:line="153" pos:column="57">.</op:operator><name pos:line="153" pos:column="58">commitTransaction</name></name><argument_list pos:line="153" pos:column="75">(<argument><expr><name pos:line="153" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line" pos:line="158" pos:column="25">//catch block for SQL exception</comment>
			<catch pos:line="159" pos:column="25">catch<parameter_list pos:line="159" pos:column="30">(<param><decl><type><name pos:line="159" pos:column="31">SQLException</name></type> <name pos:line="159" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="159" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="160" pos:column="33">System</name><op:operator pos:line="160" pos:column="39">.</op:operator><name pos:line="160" pos:column="40">out</name><op:operator pos:line="160" pos:column="43">.</op:operator><name pos:line="160" pos:column="44">println</name></name><argument_list pos:line="160" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="161" pos:column="33">System</name><op:operator pos:line="161" pos:column="39">.</op:operator><name pos:line="161" pos:column="40">out</name><op:operator pos:line="161" pos:column="43">.</op:operator><name pos:line="161" pos:column="44">println</name></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="165" pos:column="17">//outer catch block for other exceptions</comment>
		<catch pos:line="166" pos:column="17">catch <parameter_list pos:line="166" pos:column="23">(<param><decl><type><name><name pos:line="166" pos:column="24">Course</name><op:operator pos:line="166" pos:column="30">.</op:operator><name pos:line="166" pos:column="31">CourseDoesNotExistException</name></name></type> <name pos:line="166" pos:column="59">e1</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="63">{
			<comment type="line" pos:line="167" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="168" pos:column="25">e1</name><op:operator pos:line="168" pos:column="27">.</op:operator><name pos:line="168" pos:column="28">printStackTrace</name></name><argument_list pos:line="168" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		
		<catch pos:line="171" pos:column="17">catch <parameter_list pos:line="171" pos:column="23">(<param><decl><type><name><name pos:line="171" pos:column="24">CourseOffered</name><op:operator pos:line="171" pos:column="37">.</op:operator><name pos:line="171" pos:column="38">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="171" pos:column="74">e1</name></decl></param>)</parameter_list> <block pos:line="171" pos:column="78">{
			<comment type="line" pos:line="172" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="173" pos:column="25">e1</name><op:operator pos:line="173" pos:column="27">.</op:operator><name pos:line="173" pos:column="28">printStackTrace</name></name><argument_list pos:line="173" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		<catch pos:line="175" pos:column="17">catch<parameter_list pos:line="175" pos:column="22">(<param><decl><type><name pos:line="175" pos:column="23">Exception</name></type> <name pos:line="175" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="175" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="176" pos:column="25">System</name><op:operator pos:line="176" pos:column="31">.</op:operator><name pos:line="176" pos:column="32">out</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">println</name></name><argument_list pos:line="176" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="177" pos:column="25">System</name><op:operator pos:line="177" pos:column="31">.</op:operator><name pos:line="177" pos:column="32">out</name><op:operator pos:line="177" pos:column="35">.</op:operator><name pos:line="177" pos:column="36">println</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><name pos:line="177" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
	
		
		<finally pos:line="182" pos:column="17">finally<block pos:line="182" pos:column="24">{
			
			<comment type="line" pos:line="184" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="187" pos:column="9">return <expr><name pos:line="187" pos:column="16">isUpdated</name></expr>;</return>
		
	}</block></function>
	
	
	<comment type="block" pos:line="192" pos:column="9">/*
	 * updateTA office hours function takes in the inputs of the UIN of the TA and the
	 * offer ID of the course and the new office hours
	 * 
	 * Calls the addtoEmployee function which returns a boolean value 
	 * 
	 * it updated it returns true
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="202" pos:column="9">public</specifier> <specifier pos:line="202" pos:column="16">static</specifier> <name pos:line="202" pos:column="23">boolean</name></type> <name pos:line="202" pos:column="31">updateTaOfficeHours</name><parameter_list pos:line="202" pos:column="50">(<param><decl><type><name pos:line="202" pos:column="51">int</name></type> <name pos:line="202" pos:column="55">UIN</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="60">int</name></type> <name pos:line="202" pos:column="64">offerID</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="73">String</name></type> <name pos:line="202" pos:column="80">newOfficeHours</name></decl></param>)</parameter_list><block pos:line="202" pos:column="95">{
		
		<decl_stmt><decl><type><name pos:line="204" pos:column="17">boolean</name></type> <name pos:line="204" pos:column="25">isUpdated</name><init pos:line="204" pos:column="34">=<expr><lit:literal type="boolean" pos:line="204" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="204" pos:column="42">//set to false</comment>
		
		<comment type="line" pos:line="206" pos:column="17">//check for null</comment>
		<if pos:line="207" pos:column="17">if<condition pos:line="207" pos:column="19">(<expr><name pos:line="207" pos:column="20">newOfficeHours</name><op:operator pos:line="207" pos:column="34">==</op:operator><lit:literal type="null" pos:line="207" pos:column="36">null</lit:literal></expr>)</condition><then><block pos:line="207" pos:column="41">{
			<return pos:line="208" pos:column="25">return <expr><lit:literal type="boolean" pos:line="208" pos:column="32">false</lit:literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line" pos:line="211" pos:column="17">//check the length</comment>
		<if pos:line="212" pos:column="17">if<condition pos:line="212" pos:column="19">(<expr><call><name><name pos:line="212" pos:column="20">newOfficeHours</name><op:operator pos:line="212" pos:column="34">.</op:operator><name pos:line="212" pos:column="35">length</name></name><argument_list pos:line="212" pos:column="41">()</argument_list></call><op:operator pos:line="212" pos:column="43">==</op:operator><lit:literal type="number" pos:line="212" pos:column="45">0</lit:literal></expr>)</condition><then><block pos:line="212" pos:column="47">{
			<return pos:line="213" pos:column="25">return <expr><lit:literal type="boolean" pos:line="213" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name pos:line="217" pos:column="17">boolean</name></type> <name pos:line="217" pos:column="25">check</name><init pos:line="217" pos:column="30">=<expr><call><name pos:line="217" pos:column="31">addTAtoTAtableCheck</name><argument_list pos:line="217" pos:column="50">(<argument><expr><name pos:line="217" pos:column="51">UIN</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="56">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="217" pos:column="65">//check if the Uin exists</comment>
		<if pos:line="218" pos:column="17">if<condition pos:line="218" pos:column="19">(<expr><op:operator pos:line="218" pos:column="20">!</op:operator><name pos:line="218" pos:column="21">check</name></expr>)</condition><then><block pos:line="218" pos:column="27">{
			<return pos:line="219" pos:column="25">return <expr><lit:literal type="boolean" pos:line="219" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		
		<try pos:line="223" pos:column="17">try<block pos:line="223" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="224" pos:column="25">Connection</name></type> <name pos:line="224" pos:column="36">conn</name> <init pos:line="224" pos:column="41">= <expr><call><name><name pos:line="224" pos:column="43">Database</name><op:operator pos:line="224" pos:column="51">.</op:operator><name pos:line="224" pos:column="52">getConnection</name></name><argument_list pos:line="224" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="224" pos:column="68">//get the connection</comment>
			
			<try pos:line="226" pos:column="25">try<block pos:line="226" pos:column="28">{
				
				    <decl_stmt><decl><type><name pos:line="228" pos:column="37">CourseOffered</name></type> <name pos:line="228" pos:column="51">c</name><init pos:line="228" pos:column="52">=<expr><op:operator pos:line="228" pos:column="53">new</op:operator> <call><name pos:line="228" pos:column="57">CourseOffered</name><argument_list pos:line="228" pos:column="70">(<argument><expr><name pos:line="228" pos:column="71">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="230" pos:column="49">System</name><op:operator pos:line="230" pos:column="55">.</op:operator><name pos:line="230" pos:column="56">out</name><op:operator pos:line="230" pos:column="59">.</op:operator><name pos:line="230" pos:column="60">println</name></name><argument_list pos:line="230" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="68">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="231" pos:column="49">String</name></type> <name pos:line="231" pos:column="56">SQLPeopleInsert</name><init pos:line="231" pos:column="71">= <expr><lit:literal type="string" pos:line="231" pos:column="73">"UPDATE teachingassistant SET TaOfficeHours= ? where TaUIN=? and OfferID=? ;"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="232" pos:column="49">PreparedStatement</name></type> <name pos:line="232" pos:column="67">stmt</name> <init pos:line="232" pos:column="72">= <expr><call><name><name pos:line="232" pos:column="74">conn</name><op:operator pos:line="232" pos:column="78">.</op:operator><name pos:line="232" pos:column="79">prepareStatement</name></name><argument_list pos:line="232" pos:column="95">(<argument><expr><name pos:line="232" pos:column="96">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="233" pos:column="49">stmt</name><op:operator pos:line="233" pos:column="53">.</op:operator><name pos:line="233" pos:column="54">setString</name></name><argument_list pos:line="233" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="233" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="67">newOfficeHours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="233" pos:column="83">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="234" pos:column="49">stmt</name><op:operator pos:line="234" pos:column="53">.</op:operator><name pos:line="234" pos:column="54">setInt</name></name><argument_list pos:line="234" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="234" pos:column="69">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="235" pos:column="49">stmt</name><op:operator pos:line="235" pos:column="53">.</op:operator><name pos:line="235" pos:column="54">setInt</name></name><argument_list pos:line="235" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="235" pos:column="61">3</lit:literal></expr></argument>, <argument><expr><name pos:line="235" pos:column="64">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="235" pos:column="73">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="236" pos:column="49">System</name><op:operator pos:line="236" pos:column="55">.</op:operator><name pos:line="236" pos:column="56">out</name><op:operator pos:line="236" pos:column="59">.</op:operator><name pos:line="236" pos:column="60">println</name></name><argument_list pos:line="236" pos:column="67">(<argument><expr><name pos:line="236" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="237" pos:column="49">int</name></type> <name pos:line="237" pos:column="53">i</name> <init pos:line="237" pos:column="55">= <expr><call><name><name pos:line="237" pos:column="57">stmt</name><op:operator pos:line="237" pos:column="61">.</op:operator><name pos:line="237" pos:column="62">executeUpdate</name></name><argument_list pos:line="237" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="237" pos:column="78">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="239" pos:column="49">DBAnnotation</name><op:operator pos:line="239" pos:column="61">.</op:operator><name pos:line="239" pos:column="62">annoate</name></name><argument_list pos:line="239" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="70">"newOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="239" pos:column="88">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="239" pos:column="109">"TaOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="239" pos:column="126">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="240" pos:column="49">DBAnnotation</name><op:operator pos:line="240" pos:column="61">.</op:operator><name pos:line="240" pos:column="62">annoate</name></name><argument_list pos:line="240" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="77">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="98">"TaUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="240" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="241" pos:column="49">DBAnnotation</name><op:operator pos:line="241" pos:column="61">.</op:operator><name pos:line="241" pos:column="62">annoate</name></name><argument_list pos:line="241" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="81">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="241" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="241" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="243" pos:column="49">System</name><op:operator pos:line="243" pos:column="55">.</op:operator><name pos:line="243" pos:column="56">out</name><op:operator pos:line="243" pos:column="59">.</op:operator><name pos:line="243" pos:column="60">println</name></name><argument_list pos:line="243" pos:column="67">(<argument><expr><name pos:line="243" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="244" pos:column="49">System</name><op:operator pos:line="244" pos:column="55">.</op:operator><name pos:line="244" pos:column="56">out</name><op:operator pos:line="244" pos:column="59">.</op:operator><name pos:line="244" pos:column="60">println</name></name><argument_list pos:line="244" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="68">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="245" pos:column="49">isUpdated</name><op:operator pos:line="245" pos:column="58">=</op:operator><lit:literal type="boolean" pos:line="245" pos:column="59">true</lit:literal></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="247" pos:column="49">Database</name><op:operator pos:line="247" pos:column="57">.</op:operator><name pos:line="247" pos:column="58">commitTransaction</name></name><argument_list pos:line="247" pos:column="75">(<argument><expr><name pos:line="247" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line" pos:line="252" pos:column="25">//catch block for SQL query</comment>
			<catch pos:line="253" pos:column="25">catch<parameter_list pos:line="253" pos:column="30">(<param><decl><type><name pos:line="253" pos:column="31">SQLException</name></type> <name pos:line="253" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="253" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="254" pos:column="33">System</name><op:operator pos:line="254" pos:column="39">.</op:operator><name pos:line="254" pos:column="40">out</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">println</name></name><argument_list pos:line="254" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="255" pos:column="33">System</name><op:operator pos:line="255" pos:column="39">.</op:operator><name pos:line="255" pos:column="40">out</name><op:operator pos:line="255" pos:column="43">.</op:operator><name pos:line="255" pos:column="44">println</name></name><argument_list pos:line="255" pos:column="51">(<argument><expr><name pos:line="255" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="259" pos:column="17">//catch block </comment>
		<catch pos:line="260" pos:column="17">catch<parameter_list pos:line="260" pos:column="22">(<param><decl><type><name pos:line="260" pos:column="23">Exception</name></type> <name pos:line="260" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="260" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="261" pos:column="25">System</name><op:operator pos:line="261" pos:column="31">.</op:operator><name pos:line="261" pos:column="32">out</name><op:operator pos:line="261" pos:column="35">.</op:operator><name pos:line="261" pos:column="36">println</name></name><argument_list pos:line="261" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="262" pos:column="25">System</name><op:operator pos:line="262" pos:column="31">.</op:operator><name pos:line="262" pos:column="32">out</name><op:operator pos:line="262" pos:column="35">.</op:operator><name pos:line="262" pos:column="36">println</name></name><argument_list pos:line="262" pos:column="43">(<argument><expr><name pos:line="262" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line" pos:line="265" pos:column="17">//finally block</comment>
		<finally pos:line="266" pos:column="17">finally<block pos:line="266" pos:column="24">{
			
			<comment type="line" pos:line="268" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="271" pos:column="9">return <expr><name pos:line="271" pos:column="16">isUpdated</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="275" pos:column="9">/*this function is to retrieve the office address of the Ta
	 * 
	 * passed is the offer ID and the UIN
	 * 
	 * it returns a string */</comment>
	<function><type><specifier pos:line="280" pos:column="9">public</specifier> <specifier pos:line="280" pos:column="16">static</specifier> <name pos:line="280" pos:column="23">String</name></type> <name pos:line="280" pos:column="30">getTAOfficeAddress</name><parameter_list pos:line="280" pos:column="48">(<param><decl><type><name pos:line="280" pos:column="49">int</name></type> <name pos:line="280" pos:column="53">UIN</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="58">int</name></type> <name pos:line="280" pos:column="62">offerID</name></decl></param>)</parameter_list><block pos:line="280" pos:column="70">{
		
		
		<try pos:line="283" pos:column="17">try<block pos:line="283" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="284" pos:column="25">Connection</name></type> <name pos:line="284" pos:column="36">conn</name> <init pos:line="284" pos:column="41">= <expr><call><name><name pos:line="284" pos:column="43">Database</name><op:operator pos:line="284" pos:column="51">.</op:operator><name pos:line="284" pos:column="52">getConnection</name></name><argument_list pos:line="284" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="284" pos:column="68">//get the connection</comment>
			
			<try pos:line="286" pos:column="25">try<block pos:line="286" pos:column="28">{
				
				    <decl_stmt><decl><type><name pos:line="288" pos:column="37">CourseOffered</name></type> <name pos:line="288" pos:column="51">c</name><init pos:line="288" pos:column="52">=<expr><op:operator pos:line="288" pos:column="53">new</op:operator> <call><name pos:line="288" pos:column="57">CourseOffered</name><argument_list pos:line="288" pos:column="70">(<argument><expr><name pos:line="288" pos:column="71">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="290" pos:column="49">System</name><op:operator pos:line="290" pos:column="55">.</op:operator><name pos:line="290" pos:column="56">out</name><op:operator pos:line="290" pos:column="59">.</op:operator><name pos:line="290" pos:column="60">println</name></name><argument_list pos:line="290" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="68">"selecting TA s office location"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="291" pos:column="49">String</name></type> <name pos:line="291" pos:column="56">SQLTASelect</name><init pos:line="291" pos:column="67">= <expr><lit:literal type="string" pos:line="291" pos:column="69">"select * from teachingassistant where TaUIN=? and OfferID=? ;"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="291" pos:column="133">//write the query</comment>
						<decl_stmt><decl><type><name pos:line="292" pos:column="49">PreparedStatement</name></type> <name pos:line="292" pos:column="67">stmt</name> <init pos:line="292" pos:column="72">= <expr><call><name><name pos:line="292" pos:column="74">conn</name><op:operator pos:line="292" pos:column="78">.</op:operator><name pos:line="292" pos:column="79">prepareStatement</name></name><argument_list pos:line="292" pos:column="95">(<argument><expr><name pos:line="292" pos:column="96">SQLTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="293" pos:column="49">stmt</name><op:operator pos:line="293" pos:column="53">.</op:operator><name pos:line="293" pos:column="54">setInt</name></name><argument_list pos:line="293" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="293" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="293" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="293" pos:column="69">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="294" pos:column="49">stmt</name><op:operator pos:line="294" pos:column="53">.</op:operator><name pos:line="294" pos:column="54">setInt</name></name><argument_list pos:line="294" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="294" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="294" pos:column="64">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="294" pos:column="73">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="295" pos:column="49">System</name><op:operator pos:line="295" pos:column="55">.</op:operator><name pos:line="295" pos:column="56">out</name><op:operator pos:line="295" pos:column="59">.</op:operator><name pos:line="295" pos:column="60">println</name></name><argument_list pos:line="295" pos:column="67">(<argument><expr><name pos:line="295" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="295" pos:column="74">//set the values</comment>
						<decl_stmt><decl><type><name pos:line="296" pos:column="49">ResultSet</name></type> <name pos:line="296" pos:column="59">rs</name><init pos:line="296" pos:column="61">=<expr><call><name><name pos:line="296" pos:column="62">stmt</name><op:operator pos:line="296" pos:column="66">.</op:operator><name pos:line="296" pos:column="67">executeQuery</name></name><argument_list pos:line="296" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="296" pos:column="82">//execute the queries</comment>
						<expr_stmt><expr><call><name><name pos:line="297" pos:column="49">System</name><op:operator pos:line="297" pos:column="55">.</op:operator><name pos:line="297" pos:column="56">out</name><op:operator pos:line="297" pos:column="59">.</op:operator><name pos:line="297" pos:column="60">println</name></name><argument_list pos:line="297" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="297" pos:column="68">"Retreived"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<if pos:line="299" pos:column="49">if<condition pos:line="299" pos:column="51">(<expr><call><name><name pos:line="299" pos:column="52">rs</name><op:operator pos:line="299" pos:column="54">.</op:operator><name pos:line="299" pos:column="55">first</name></name><argument_list pos:line="299" pos:column="60">()</argument_list></call></expr>)</condition><then><block pos:line="299" pos:column="63">{
							
							<expr_stmt><expr><call><name><name pos:line="301" pos:column="57">DBAnnotation</name><op:operator pos:line="301" pos:column="69">.</op:operator><name pos:line="301" pos:column="70">annoate</name></name><argument_list pos:line="301" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="78">"getTAOfficeLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="101">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="122">"TaOfficeLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="301" pos:column="142">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="302" pos:column="57">String</name></type> <name pos:line="302" pos:column="64">getTAOfficeLocation</name><init pos:line="302" pos:column="83">=<expr><call><name><name pos:line="302" pos:column="84">rs</name><op:operator pos:line="302" pos:column="86">.</op:operator><name pos:line="302" pos:column="87">getString</name></name><argument_list pos:line="302" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="97">"TaOfficeLocation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="302" pos:column="117">//get the values</comment>
							<return pos:line="303" pos:column="57">return <expr><name pos:line="303" pos:column="64">getTAOfficeLocation</name></expr>;</return>
						}</block></then></if>
					
			}</block>
			<comment type="line" pos:line="307" pos:column="25">//catch block</comment>
			<catch pos:line="308" pos:column="25">catch<parameter_list pos:line="308" pos:column="30">(<param><decl><type><name pos:line="308" pos:column="31">SQLException</name></type> <name pos:line="308" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="308" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="309" pos:column="33">System</name><op:operator pos:line="309" pos:column="39">.</op:operator><name pos:line="309" pos:column="40">out</name><op:operator pos:line="309" pos:column="43">.</op:operator><name pos:line="309" pos:column="44">println</name></name><argument_list pos:line="309" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="309" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="310" pos:column="33">System</name><op:operator pos:line="310" pos:column="39">.</op:operator><name pos:line="310" pos:column="40">out</name><op:operator pos:line="310" pos:column="43">.</op:operator><name pos:line="310" pos:column="44">println</name></name><argument_list pos:line="310" pos:column="51">(<argument><expr><name pos:line="310" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="314" pos:column="17">//catch block </comment>
		<catch pos:line="315" pos:column="17">catch<parameter_list pos:line="315" pos:column="22">(<param><decl><type><name pos:line="315" pos:column="23">Exception</name></type> <name pos:line="315" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="315" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="316" pos:column="25">System</name><op:operator pos:line="316" pos:column="31">.</op:operator><name pos:line="316" pos:column="32">out</name><op:operator pos:line="316" pos:column="35">.</op:operator><name pos:line="316" pos:column="36">println</name></name><argument_list pos:line="316" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="317" pos:column="25">System</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">out</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">println</name></name><argument_list pos:line="317" pos:column="43">(<argument><expr><name pos:line="317" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line" pos:line="320" pos:column="17">//finally block </comment>
		<finally pos:line="321" pos:column="17">finally<block pos:line="321" pos:column="24">{
			
			<comment type="line" pos:line="323" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="326" pos:column="9">return <expr><lit:literal type="null" pos:line="326" pos:column="16">null</lit:literal></expr>;</return>
		
	}</block></function>
	
	
	<comment type="block" pos:line="331" pos:column="9">/*this function is to retrieve the office hours of the Ta
	 * 
	 * passed is the offer ID and the UIN
	 * 
	 * it returns a string */</comment>
	<function><type><specifier pos:line="336" pos:column="9">public</specifier> <specifier pos:line="336" pos:column="16">static</specifier> <name pos:line="336" pos:column="23">String</name></type> <name pos:line="336" pos:column="30">getTAOfficeHours</name><parameter_list pos:line="336" pos:column="46">(<param><decl><type><name pos:line="336" pos:column="47">int</name></type> <name pos:line="336" pos:column="51">UIN</name></decl></param>, <param><decl><type><name pos:line="336" pos:column="56">int</name></type> <name pos:line="336" pos:column="60">offerID</name></decl></param>)</parameter_list><block pos:line="336" pos:column="68">{
		
		
		<try pos:line="339" pos:column="17">try<block pos:line="339" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="340" pos:column="25">Connection</name></type> <name pos:line="340" pos:column="36">conn</name> <init pos:line="340" pos:column="41">= <expr><call><name><name pos:line="340" pos:column="43">Database</name><op:operator pos:line="340" pos:column="51">.</op:operator><name pos:line="340" pos:column="52">getConnection</name></name><argument_list pos:line="340" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="340" pos:column="68">//get the connection</comment>
			
			<try pos:line="342" pos:column="25">try<block pos:line="342" pos:column="28">{
				
				<decl_stmt><decl><type><name pos:line="344" pos:column="33">CourseOffered</name></type> <name pos:line="344" pos:column="47">c</name><init pos:line="344" pos:column="48">=<expr><op:operator pos:line="344" pos:column="49">new</op:operator> <call><name pos:line="344" pos:column="53">CourseOffered</name><argument_list pos:line="344" pos:column="66">(<argument><expr><name pos:line="344" pos:column="67">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="346" pos:column="49">System</name><op:operator pos:line="346" pos:column="55">.</op:operator><name pos:line="346" pos:column="56">out</name><op:operator pos:line="346" pos:column="59">.</op:operator><name pos:line="346" pos:column="60">println</name></name><argument_list pos:line="346" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="346" pos:column="68">"selecting TA s office hours"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="347" pos:column="49">String</name></type> <name pos:line="347" pos:column="56">SQLTASelect</name><init pos:line="347" pos:column="67">= <expr><lit:literal type="string" pos:line="347" pos:column="69">"select * from teachingassistant where TaUIN=? and OfferID=? ;"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="347" pos:column="133">//write the query</comment>
						<decl_stmt><decl><type><name pos:line="348" pos:column="49">PreparedStatement</name></type> <name pos:line="348" pos:column="67">stmt</name> <init pos:line="348" pos:column="72">= <expr><call><name><name pos:line="348" pos:column="74">conn</name><op:operator pos:line="348" pos:column="78">.</op:operator><name pos:line="348" pos:column="79">prepareStatement</name></name><argument_list pos:line="348" pos:column="95">(<argument><expr><name pos:line="348" pos:column="96">SQLTASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="349" pos:column="49">stmt</name><op:operator pos:line="349" pos:column="53">.</op:operator><name pos:line="349" pos:column="54">setInt</name></name><argument_list pos:line="349" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="349" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="349" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="349" pos:column="69">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="350" pos:column="49">stmt</name><op:operator pos:line="350" pos:column="53">.</op:operator><name pos:line="350" pos:column="54">setInt</name></name><argument_list pos:line="350" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="350" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="350" pos:column="64">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="350" pos:column="73">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="351" pos:column="49">System</name><op:operator pos:line="351" pos:column="55">.</op:operator><name pos:line="351" pos:column="56">out</name><op:operator pos:line="351" pos:column="59">.</op:operator><name pos:line="351" pos:column="60">println</name></name><argument_list pos:line="351" pos:column="67">(<argument><expr><name pos:line="351" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="352" pos:column="49">ResultSet</name></type> <name pos:line="352" pos:column="59">rs</name><init pos:line="352" pos:column="61">=<expr><call><name><name pos:line="352" pos:column="62">stmt</name><op:operator pos:line="352" pos:column="66">.</op:operator><name pos:line="352" pos:column="67">executeQuery</name></name><argument_list pos:line="352" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="353" pos:column="49">System</name><op:operator pos:line="353" pos:column="55">.</op:operator><name pos:line="353" pos:column="56">out</name><op:operator pos:line="353" pos:column="59">.</op:operator><name pos:line="353" pos:column="60">println</name></name><argument_list pos:line="353" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="353" pos:column="68">"Retreived"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<if pos:line="355" pos:column="49">if<condition pos:line="355" pos:column="51">(<expr><call><name><name pos:line="355" pos:column="52">rs</name><op:operator pos:line="355" pos:column="54">.</op:operator><name pos:line="355" pos:column="55">first</name></name><argument_list pos:line="355" pos:column="60">()</argument_list></call></expr>)</condition><then><block pos:line="355" pos:column="63">{
							<comment type="line" pos:line="356" pos:column="57">//if the resultset exists</comment>
							<expr_stmt><expr><call><name><name pos:line="357" pos:column="57">DBAnnotation</name><op:operator pos:line="357" pos:column="69">.</op:operator><name pos:line="357" pos:column="70">annoate</name></name><argument_list pos:line="357" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="357" pos:column="78">"getTAOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="357" pos:column="98">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="357" pos:column="119">"TaOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="357" pos:column="136">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="358" pos:column="57">String</name></type> <name pos:line="358" pos:column="64">getTAOfficeHours</name><init pos:line="358" pos:column="80">=<expr><call><name><name pos:line="358" pos:column="81">rs</name><op:operator pos:line="358" pos:column="83">.</op:operator><name pos:line="358" pos:column="84">getString</name></name><argument_list pos:line="358" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="358" pos:column="94">"TaOfficeHours"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<return pos:line="359" pos:column="57">return <expr><name pos:line="359" pos:column="64">getTAOfficeHours</name></expr>;</return>
						}</block></then></if>
					
			}</block>
			<comment type="line" pos:line="363" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="364" pos:column="25">catch<parameter_list pos:line="364" pos:column="30">(<param><decl><type><name pos:line="364" pos:column="31">SQLException</name></type> <name pos:line="364" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="364" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="365" pos:column="33">System</name><op:operator pos:line="365" pos:column="39">.</op:operator><name pos:line="365" pos:column="40">out</name><op:operator pos:line="365" pos:column="43">.</op:operator><name pos:line="365" pos:column="44">println</name></name><argument_list pos:line="365" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="365" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="366" pos:column="33">System</name><op:operator pos:line="366" pos:column="39">.</op:operator><name pos:line="366" pos:column="40">out</name><op:operator pos:line="366" pos:column="43">.</op:operator><name pos:line="366" pos:column="44">println</name></name><argument_list pos:line="366" pos:column="51">(<argument><expr><name pos:line="366" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="370" pos:column="17">//catch block </comment>
		<catch pos:line="371" pos:column="17">catch<parameter_list pos:line="371" pos:column="22">(<param><decl><type><name pos:line="371" pos:column="23">Exception</name></type> <name pos:line="371" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="371" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="372" pos:column="25">System</name><op:operator pos:line="372" pos:column="31">.</op:operator><name pos:line="372" pos:column="32">out</name><op:operator pos:line="372" pos:column="35">.</op:operator><name pos:line="372" pos:column="36">println</name></name><argument_list pos:line="372" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="373" pos:column="25">System</name><op:operator pos:line="373" pos:column="31">.</op:operator><name pos:line="373" pos:column="32">out</name><op:operator pos:line="373" pos:column="35">.</op:operator><name pos:line="373" pos:column="36">println</name></name><argument_list pos:line="373" pos:column="43">(<argument><expr><name pos:line="373" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line" pos:line="376" pos:column="17">//finally block</comment>
		<finally pos:line="377" pos:column="17">finally<block pos:line="377" pos:column="24">{
			
			<comment type="line" pos:line="379" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="382" pos:column="9">return <expr><lit:literal type="null" pos:line="382" pos:column="16">null</lit:literal></expr>;</return>
		
	}</block></function>
	
	
	
	<comment type="block" pos:line="388" pos:column="9">/*This functions checks if the passed offer ID is a valid and current
	 * 
	 * if true it then checks if there exists an employee with the same UIN
	 * 
	 * if an employee exists it returns true
	 * 
	 * if the addToTATableCheck function does not return true
	 * 
	 * then it adds it to the Ta table with the TaUIN and Offer ID
	 * 
	 * */</comment>	
	<function><type><specifier pos:line="399" pos:column="9">public</specifier> <specifier pos:line="399" pos:column="16">static</specifier> <name pos:line="399" pos:column="23">boolean</name></type> <name pos:line="399" pos:column="31">addTAtoTAtable</name><parameter_list pos:line="399" pos:column="45">(<param><decl><type><name pos:line="399" pos:column="46">int</name></type> <name pos:line="399" pos:column="50">UIN</name></decl></param>, <param><decl><type><name pos:line="399" pos:column="55">int</name></type> <name pos:line="399" pos:column="59">offerID</name></decl></param>)</parameter_list> <throws pos:line="399" pos:column="68">throws <argument><expr><name pos:line="399" pos:column="75">AlreadyExistsInTAException</name></expr></argument></throws><block pos:line="399" pos:column="101">{

				
		<decl_stmt><decl><type><name pos:line="402" pos:column="17">boolean</name></type> <name pos:line="402" pos:column="25">isAdded</name> <init pos:line="402" pos:column="33">= <expr><lit:literal type="boolean" pos:line="402" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="402" pos:column="41">//set it to false</comment>

		<try pos:line="404" pos:column="17">try <block pos:line="404" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="405" pos:column="25">Connection</name></type> <name pos:line="405" pos:column="36">conn</name> <init pos:line="405" pos:column="41">= <expr><call><name><name pos:line="405" pos:column="43">Database</name><op:operator pos:line="405" pos:column="51">.</op:operator><name pos:line="405" pos:column="52">getConnection</name></name><argument_list pos:line="405" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="405" pos:column="68">//get the connection</comment>

				<try pos:line="407" pos:column="33">try<block pos:line="407" pos:column="36">{
					<decl_stmt><decl><type><name pos:line="408" pos:column="41">Student</name></type> <name pos:line="408" pos:column="49">stud</name><init pos:line="408" pos:column="53">=<expr><op:operator pos:line="408" pos:column="54">new</op:operator> <call><name pos:line="408" pos:column="58">Student</name><argument_list pos:line="408" pos:column="65">(<argument><expr><name pos:line="408" pos:column="66">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="409" pos:column="41">CourseOffered</name></type> <name pos:line="409" pos:column="55">c</name><init pos:line="409" pos:column="56">=<expr><op:operator pos:line="409" pos:column="57">new</op:operator> <call><name pos:line="409" pos:column="61">CourseOffered</name><argument_list pos:line="409" pos:column="74">(<argument><expr><name pos:line="409" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				}</block>
				<catch pos:line="411" pos:column="33">catch <parameter_list pos:line="411" pos:column="39">(<param><decl><type><name><name pos:line="411" pos:column="40">Student</name><op:operator pos:line="411" pos:column="47">.</op:operator><name pos:line="411" pos:column="48">PersonDoesNotExistException</name></name></type> <name pos:line="411" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="411" pos:column="79">{
					<expr_stmt><expr><call><name><name pos:line="412" pos:column="41">System</name><op:operator pos:line="412" pos:column="47">.</op:operator><name pos:line="412" pos:column="48">out</name><op:operator pos:line="412" pos:column="51">.</op:operator><name pos:line="412" pos:column="52">println</name></name><argument_list pos:line="412" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="412" pos:column="60">"Not a student"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="413" pos:column="41">e</name><op:operator pos:line="413" pos:column="42">.</op:operator><name pos:line="413" pos:column="43">printStackTrace</name></name><argument_list pos:line="413" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="414" pos:column="41">System</name><op:operator pos:line="414" pos:column="47">.</op:operator><name pos:line="414" pos:column="48">out</name><op:operator pos:line="414" pos:column="51">.</op:operator><name pos:line="414" pos:column="52">println</name></name><argument_list pos:line="414" pos:column="59">(<argument><expr><name pos:line="414" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="415" pos:column="41">return <expr><lit:literal type="boolean" pos:line="415" pos:column="48">false</lit:literal></expr>;</return>

				}</block></catch> <catch pos:line="417" pos:column="35">catch <parameter_list pos:line="417" pos:column="41">(<param><decl><type><name><name pos:line="417" pos:column="42">Course</name><op:operator pos:line="417" pos:column="48">.</op:operator><name pos:line="417" pos:column="49">CourseDoesNotExistException</name></name></type> <name pos:line="417" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="417" pos:column="80">{
					<comment type="line" pos:line="418" pos:column="41">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name pos:line="419" pos:column="41">e</name><op:operator pos:line="419" pos:column="42">.</op:operator><name pos:line="419" pos:column="43">printStackTrace</name></name><argument_list pos:line="419" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch pos:line="420" pos:column="35">catch <parameter_list pos:line="420" pos:column="41">(<param><decl><type><name><name pos:line="420" pos:column="42">CourseOffered</name><op:operator pos:line="420" pos:column="55">.</op:operator><name pos:line="420" pos:column="56">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="420" pos:column="92">e</name></decl></param>)</parameter_list> <block pos:line="420" pos:column="95">{
					<comment type="line" pos:line="421" pos:column="41">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name pos:line="422" pos:column="41">e</name><op:operator pos:line="422" pos:column="42">.</op:operator><name pos:line="422" pos:column="43">printStackTrace</name></name><argument_list pos:line="422" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

				<decl_stmt><decl><type><name pos:line="425" pos:column="33">boolean</name></type> <name pos:line="425" pos:column="41">ifExists</name> <init pos:line="425" pos:column="50">= <expr><call><name pos:line="425" pos:column="52">addTAtoTAtableCheck</name><argument_list pos:line="425" pos:column="71">(<argument><expr><name pos:line="425" pos:column="72">UIN</name></expr></argument>, <argument><expr><name pos:line="425" pos:column="77">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="425" pos:column="86">//check if it exists</comment>

				<if pos:line="427" pos:column="33">if <condition pos:line="427" pos:column="36">(<expr><name pos:line="427" pos:column="37">ifExists</name></expr>)</condition><then pos:line="427" pos:column="46"> <block pos:line="427" pos:column="47">{
					<throw pos:line="428" pos:column="41">throw <expr><op:operator pos:line="428" pos:column="47">new</op:operator> <call><name pos:line="428" pos:column="51">AlreadyExistsInTAException</name><argument_list pos:line="428" pos:column="77">()</argument_list></call></expr>;</throw>
				}</block></then>

				<else pos:line="431" pos:column="33">else <block pos:line="431" pos:column="38">{

					<expr_stmt><expr><call><name><name pos:line="433" pos:column="41">System</name><op:operator pos:line="433" pos:column="47">.</op:operator><name pos:line="433" pos:column="48">out</name><op:operator pos:line="433" pos:column="51">.</op:operator><name pos:line="433" pos:column="52">println</name></name><argument_list pos:line="433" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="433" pos:column="60">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					
					<decl_stmt><decl><type><name pos:line="436" pos:column="41">String</name></type> <name pos:line="436" pos:column="48">SQLPeopleInsert</name> <init pos:line="436" pos:column="64">= <expr><lit:literal type="string" pos:line="436" pos:column="66">"Insert into teachingassistant (TaUIN, OfferID) Values (?,?);"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="436" pos:column="129">//write the query</comment>
					<decl_stmt><decl><type><name pos:line="437" pos:column="41">PreparedStatement</name></type> <name pos:line="437" pos:column="59">stmt</name> <init pos:line="437" pos:column="64">= <expr><call><name><name pos:line="437" pos:column="66">conn</name><op:operator pos:line="437" pos:column="70">.</op:operator><name pos:line="437" pos:column="71">prepareStatement</name></name><argument_list pos:line="437" pos:column="87">(<argument><expr><name pos:line="437" pos:column="88">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="438" pos:column="41">stmt</name><op:operator pos:line="438" pos:column="45">.</op:operator><name pos:line="438" pos:column="46">setInt</name></name><argument_list pos:line="438" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="438" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="438" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="438" pos:column="61">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="439" pos:column="41">stmt</name><op:operator pos:line="439" pos:column="45">.</op:operator><name pos:line="439" pos:column="46">setInt</name></name><argument_list pos:line="439" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="439" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="439" pos:column="56">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="439" pos:column="65">//set the values</comment>
					<decl_stmt><decl><type><name pos:line="440" pos:column="41">int</name></type> <name pos:line="440" pos:column="45">i</name> <init pos:line="440" pos:column="47">= <expr><call><name><name pos:line="440" pos:column="49">stmt</name><op:operator pos:line="440" pos:column="53">.</op:operator><name pos:line="440" pos:column="54">executeUpdate</name></name><argument_list pos:line="440" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="440" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="442" pos:column="41">DBAnnotation</name><op:operator pos:line="442" pos:column="53">.</op:operator><name pos:line="442" pos:column="54">annoate</name></name><argument_list pos:line="442" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="442" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="442" pos:column="69">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="442" pos:column="90">"TaUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="442" pos:column="99">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="443" pos:column="41">DBAnnotation</name><op:operator pos:line="443" pos:column="53">.</op:operator><name pos:line="443" pos:column="54">annoate</name></name><argument_list pos:line="443" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="443" pos:column="73">"teachingassistant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="443" pos:column="94">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="443" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="445" pos:column="41">System</name><op:operator pos:line="445" pos:column="47">.</op:operator><name pos:line="445" pos:column="48">out</name><op:operator pos:line="445" pos:column="51">.</op:operator><name pos:line="445" pos:column="52">println</name></name><argument_list pos:line="445" pos:column="59">(<argument><expr><name pos:line="445" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="446" pos:column="41">System</name><op:operator pos:line="446" pos:column="47">.</op:operator><name pos:line="446" pos:column="48">out</name><op:operator pos:line="446" pos:column="51">.</op:operator><name pos:line="446" pos:column="52">println</name></name><argument_list pos:line="446" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="446" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="447" pos:column="41">isAdded</name> <op:operator pos:line="447" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="447" pos:column="51">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="448" pos:column="41">updateStudentToTA</name><argument_list pos:line="448" pos:column="58">(<argument><expr><name pos:line="448" pos:column="59">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="448" pos:column="64">//call the update function</comment>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="453" pos:column="25">//catch block </comment>
			<catch pos:line="454" pos:column="25">catch <parameter_list pos:line="454" pos:column="31">(<param><decl><type><name pos:line="454" pos:column="32">SQLException</name></type> <name pos:line="454" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="454" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="455" pos:column="33">System</name><op:operator pos:line="455" pos:column="39">.</op:operator><name pos:line="455" pos:column="40">out</name><op:operator pos:line="455" pos:column="43">.</op:operator><name pos:line="455" pos:column="44">println</name></name><argument_list pos:line="455" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="455" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="456" pos:column="33">e</name><op:operator pos:line="456" pos:column="34">.</op:operator><name pos:line="456" pos:column="35">printStackTrace</name></name><argument_list pos:line="456" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="457" pos:column="33">System</name><op:operator pos:line="457" pos:column="39">.</op:operator><name pos:line="457" pos:column="40">out</name><op:operator pos:line="457" pos:column="43">.</op:operator><name pos:line="457" pos:column="44">println</name></name><argument_list pos:line="457" pos:column="51">(<argument><expr><name pos:line="457" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

		
		<comment type="line" pos:line="461" pos:column="17">//catch the already exists exception</comment>
		<catch pos:line="462" pos:column="17">catch <parameter_list pos:line="462" pos:column="23">(<param><decl><type><name pos:line="462" pos:column="24">AlreadyExistsInTAException</name></type> <name pos:line="462" pos:column="51">e</name></decl></param>)</parameter_list> <block pos:line="462" pos:column="54">{
			<expr_stmt><expr><call><name><name pos:line="463" pos:column="25">System</name><op:operator pos:line="463" pos:column="31">.</op:operator><name pos:line="463" pos:column="32">out</name><op:operator pos:line="463" pos:column="35">.</op:operator><name pos:line="463" pos:column="36">println</name></name><argument_list pos:line="463" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="44">"Error"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="464" pos:column="25">e</name><op:operator pos:line="464" pos:column="26">.</op:operator><name pos:line="464" pos:column="27">printStackTrace</name></name><argument_list pos:line="464" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="465" pos:column="25">System</name><op:operator pos:line="465" pos:column="31">.</op:operator><name pos:line="465" pos:column="32">out</name><op:operator pos:line="465" pos:column="35">.</op:operator><name pos:line="465" pos:column="36">println</name></name><argument_list pos:line="465" pos:column="43">(<argument><expr><name pos:line="465" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<throw pos:line="466" pos:column="25">throw <expr><op:operator pos:line="466" pos:column="31">new</op:operator> <call><name pos:line="466" pos:column="35">AlreadyExistsInTAException</name><argument_list pos:line="466" pos:column="61">()</argument_list></call></expr>;</throw>

		}</block></catch>

		<finally pos:line="470" pos:column="17">finally <block pos:line="470" pos:column="25">{

			<comment type="line" pos:line="472" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="475" pos:column="17">return <expr><name pos:line="475" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>

	
	<comment type="block" pos:line="480" pos:column="9">/*This functions checks if the passed offer ID is a valid and current
	 * 
	 * if true it then checks if there exists an TA with the same UIN
	 * 
	 * if an TA exists it returns true
	 * 
	 * else it returns false
	 * 
	 * */</comment>	
	<function><type><specifier pos:line="489" pos:column="9">public</specifier> <specifier pos:line="489" pos:column="16">static</specifier> <name pos:line="489" pos:column="23">boolean</name></type> <name pos:line="489" pos:column="31">addTAtoTAtableCheck</name><parameter_list pos:line="489" pos:column="50">(<param><decl><type><name pos:line="489" pos:column="51">int</name></type> <name pos:line="489" pos:column="55">UIN</name></decl></param>, <param><decl><type><name pos:line="489" pos:column="60">int</name></type> <name pos:line="489" pos:column="64">offerID</name></decl></param>)</parameter_list> <block pos:line="489" pos:column="73">{

		<decl_stmt><decl><type><name pos:line="491" pos:column="17">boolean</name></type> <name pos:line="491" pos:column="25">isExisting</name> <init pos:line="491" pos:column="36">= <expr><lit:literal type="boolean" pos:line="491" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="491" pos:column="44">//set it to false</comment>

		<try pos:line="493" pos:column="17">try <block pos:line="493" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="494" pos:column="25">Connection</name></type> <name pos:line="494" pos:column="36">conn</name> <init pos:line="494" pos:column="41">= <expr><call><name><name pos:line="494" pos:column="43">Database</name><op:operator pos:line="494" pos:column="51">.</op:operator><name pos:line="494" pos:column="52">getConnection</name></name><argument_list pos:line="494" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="494" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="495" pos:column="25">String</name></type> <name pos:line="495" pos:column="32">SQLPeopleSelect</name> <init pos:line="495" pos:column="48">= <expr><lit:literal type="string" pos:line="495" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="497" pos:column="25">try <block pos:line="497" pos:column="29">{

				<expr_stmt><expr><name pos:line="499" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="499" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="499" pos:column="51">"Select TaUIN From teachingassistant where OfferID=? and TaUIN= ?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="499" pos:column="119">//write the query</comment>
				<decl_stmt><decl><type><name pos:line="500" pos:column="33">PreparedStatement</name></type> <name pos:line="500" pos:column="51">stmt</name> <init pos:line="500" pos:column="56">= <expr><call><name><name pos:line="500" pos:column="58">conn</name><op:operator pos:line="500" pos:column="62">.</op:operator><name pos:line="500" pos:column="63">prepareStatement</name></name><argument_list pos:line="500" pos:column="79">(<argument><expr><name pos:line="500" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="501" pos:column="33">stmt</name><op:operator pos:line="501" pos:column="37">.</op:operator><name pos:line="501" pos:column="38">setInt</name></name><argument_list pos:line="501" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="501" pos:column="48">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="501" pos:column="57">//set the values</comment>
				<expr_stmt><expr><call><name><name pos:line="502" pos:column="33">stmt</name><op:operator pos:line="502" pos:column="37">.</op:operator><name pos:line="502" pos:column="38">setInt</name></name><argument_list pos:line="502" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="502" pos:column="45">2</lit:literal></expr></argument>, <argument><expr><name pos:line="502" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="502" pos:column="53">//set the values</comment>
				<decl_stmt><decl><type><name pos:line="503" pos:column="33">ResultSet</name></type> <name pos:line="503" pos:column="43">rs</name> <init pos:line="503" pos:column="46">= <expr><call><name><name pos:line="503" pos:column="48">stmt</name><op:operator pos:line="503" pos:column="52">.</op:operator><name pos:line="503" pos:column="53">executeQuery</name></name><argument_list pos:line="503" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="503" pos:column="68">//execute the query</comment>

				<if pos:line="505" pos:column="33">if <condition pos:line="505" pos:column="36">(<expr><call><name><name pos:line="505" pos:column="37">rs</name><op:operator pos:line="505" pos:column="39">.</op:operator><name pos:line="505" pos:column="40">first</name></name><argument_list pos:line="505" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="505" pos:column="48"> <block pos:line="505" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="506" pos:column="41">System</name><op:operator pos:line="506" pos:column="47">.</op:operator><name pos:line="506" pos:column="48">out</name><op:operator pos:line="506" pos:column="51">.</op:operator><name pos:line="506" pos:column="52">println</name></name><argument_list pos:line="506" pos:column="59">(<argument><expr><name pos:line="506" pos:column="60">UIN</name><op:operator pos:line="506" pos:column="63">+</op:operator> <lit:literal type="string" pos:line="506" pos:column="65">"already exists as a TA"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="507" pos:column="41">return <expr><lit:literal type="boolean" pos:line="507" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="511" pos:column="25">//catch the exception</comment>
			<catch pos:line="512" pos:column="25">catch <parameter_list pos:line="512" pos:column="31">(<param><decl><type><name pos:line="512" pos:column="32">SQLException</name></type> <name pos:line="512" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="512" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="513" pos:column="33">System</name><op:operator pos:line="513" pos:column="39">.</op:operator><name pos:line="513" pos:column="40">out</name><op:operator pos:line="513" pos:column="43">.</op:operator><name pos:line="513" pos:column="44">println</name></name><argument_list pos:line="513" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="513" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="514" pos:column="33">e</name><op:operator pos:line="514" pos:column="34">.</op:operator><name pos:line="514" pos:column="35">printStackTrace</name></name><argument_list pos:line="514" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="515" pos:column="33">System</name><op:operator pos:line="515" pos:column="39">.</op:operator><name pos:line="515" pos:column="40">out</name><op:operator pos:line="515" pos:column="43">.</op:operator><name pos:line="515" pos:column="44">println</name></name><argument_list pos:line="515" pos:column="51">(<argument><expr><name pos:line="515" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="519" pos:column="17">//catch block</comment>
		<catch pos:line="520" pos:column="17">catch <parameter_list pos:line="520" pos:column="23">(<param><decl><type><name pos:line="520" pos:column="24">Exception</name></type> <name pos:line="520" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="520" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="521" pos:column="25">System</name><op:operator pos:line="521" pos:column="31">.</op:operator><name pos:line="521" pos:column="32">out</name><op:operator pos:line="521" pos:column="35">.</op:operator><name pos:line="521" pos:column="36">println</name></name><argument_list pos:line="521" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="521" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="522" pos:column="25">e</name><op:operator pos:line="522" pos:column="26">.</op:operator><name pos:line="522" pos:column="27">printStackTrace</name></name><argument_list pos:line="522" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="523" pos:column="25">System</name><op:operator pos:line="523" pos:column="31">.</op:operator><name pos:line="523" pos:column="32">out</name><op:operator pos:line="523" pos:column="35">.</op:operator><name pos:line="523" pos:column="36">println</name></name><argument_list pos:line="523" pos:column="43">(<argument><expr><name pos:line="523" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line" pos:line="526" pos:column="17">//finally</comment>
		<finally pos:line="527" pos:column="17">finally <block pos:line="527" pos:column="25">{

			<comment type="line" pos:line="529" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="532" pos:column="17">return <expr><name pos:line="532" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="536" pos:column="9">/*
	 * getAllAdmin function returns an arraylist of the admins from the
	 * database.
	 * 
	 * It retrieves the data from the people table.
	 */</comment>
	<function><type><specifier pos:line="542" pos:column="9">public</specifier> <specifier pos:line="542" pos:column="16">static</specifier> <name><name pos:line="542" pos:column="23">ArrayList</name><argument_list pos:line="542" pos:column="32">&lt;<argument><name pos:line="542" pos:column="33">TA</name></argument>&gt;</argument_list></name></type> <name pos:line="542" pos:column="37">getAllTAs</name><parameter_list pos:line="542" pos:column="46">()</parameter_list> <block pos:line="542" pos:column="49">{


		<decl_stmt><decl><type><name><name pos:line="545" pos:column="17">ArrayList</name><argument_list pos:line="545" pos:column="26">&lt;<argument><name pos:line="545" pos:column="27">TA</name></argument>&gt;</argument_list></name></type> <name pos:line="545" pos:column="31">getAllTAs</name> <init pos:line="545" pos:column="41">= <expr><op:operator pos:line="545" pos:column="43">new</op:operator> <call><name><name pos:line="545" pos:column="47">ArrayList</name><argument_list pos:line="545" pos:column="56">&lt;<argument><name pos:line="545" pos:column="57">TA</name></argument>&gt;</argument_list></name><argument_list pos:line="545" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="545" pos:column="63">//initialize an arraylist</comment>

		<try pos:line="547" pos:column="17">try <block pos:line="547" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="548" pos:column="25">Connection</name></type> <name pos:line="548" pos:column="36">conn</name> <init pos:line="548" pos:column="41">= <expr><call><name><name pos:line="548" pos:column="43">Database</name><op:operator pos:line="548" pos:column="51">.</op:operator><name pos:line="548" pos:column="52">getConnection</name></name><argument_list pos:line="548" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="548" pos:column="68">//get the connection</comment>

			<try pos:line="550" pos:column="25">try <block pos:line="550" pos:column="29">{
				<if pos:line="551" pos:column="33">if <condition pos:line="551" pos:column="36">(<expr><name pos:line="551" pos:column="37">conn</name> <op:operator pos:line="551" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="551" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="551" pos:column="50"> <block pos:line="551" pos:column="51">{

					<comment type="line" pos:line="553" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="554" pos:column="41">String</name></type> <name pos:line="554" pos:column="48">ProfessorSelect</name> <init pos:line="554" pos:column="64">= <expr><lit:literal type="string" pos:line="554" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="555" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="555" pos:column="59">" FROM people"</lit:literal> <op:operator pos:line="555" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="555" pos:column="76">" WHERE PositionID=4"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="556" pos:column="41">PreparedStatement</name></type> <name pos:line="556" pos:column="59">statement</name> <init pos:line="556" pos:column="69">= <expr><call><name><name pos:line="556" pos:column="71">conn</name><op:operator pos:line="556" pos:column="75">.</op:operator><name pos:line="556" pos:column="76">prepareStatement</name></name><argument_list pos:line="556" pos:column="92">(<argument><expr><name pos:line="556" pos:column="93">ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="557" pos:column="41">ResultSet</name></type> <name pos:line="557" pos:column="51">rs</name> <init pos:line="557" pos:column="54">= <expr><call><name><name pos:line="557" pos:column="56">statement</name><op:operator pos:line="557" pos:column="65">.</op:operator><name pos:line="557" pos:column="66">executeQuery</name></name><argument_list pos:line="557" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="557" pos:column="81">//execute the query</comment>

					<while pos:line="559" pos:column="41">while <condition pos:line="559" pos:column="47">(<expr><call><name><name pos:line="559" pos:column="48">rs</name><op:operator pos:line="559" pos:column="50">.</op:operator><name pos:line="559" pos:column="51">next</name></name><argument_list pos:line="559" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="559" pos:column="59">{

						<expr_stmt><expr><call><name><name pos:line="561" pos:column="49">DBAnnotation</name><op:operator pos:line="561" pos:column="61">.</op:operator><name pos:line="561" pos:column="62">annoate</name></name><argument_list pos:line="561" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="561" pos:column="70">"retreivedTAUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="561" pos:column="88">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="561" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="561" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="562" pos:column="49">int</name></type> <name pos:line="562" pos:column="53">retreivedTAUIN</name> <init pos:line="562" pos:column="68">= <expr><call><name><name pos:line="562" pos:column="70">rs</name><op:operator pos:line="562" pos:column="72">.</op:operator><name pos:line="562" pos:column="73">getInt</name></name><argument_list pos:line="562" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="562" pos:column="80">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="line" pos:line="563" pos:column="49">// System.out.println(retreivedProfUserNames);</comment>
						<decl_stmt><decl><type><name pos:line="564" pos:column="49">TA</name></type> <name pos:line="564" pos:column="52">teachingAssistant</name></decl>;</decl_stmt>
						<try pos:line="565" pos:column="49">try <block pos:line="565" pos:column="53">{
							<expr_stmt><expr><name pos:line="566" pos:column="57">teachingAssistant</name> <op:operator pos:line="566" pos:column="75">=</op:operator> <op:operator pos:line="566" pos:column="77">new</op:operator> <call><name pos:line="566" pos:column="81">TA</name><argument_list pos:line="566" pos:column="83">(<argument><expr><name pos:line="566" pos:column="84">retreivedTAUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="567" pos:column="57">getAllTAs</name><op:operator pos:line="567" pos:column="66">.</op:operator><name pos:line="567" pos:column="67">add</name></name><argument_list pos:line="567" pos:column="70">(<argument><expr><name pos:line="567" pos:column="71">teachingAssistant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="567" pos:column="90">//add the retreived TA objects to the arraylist</comment>
							
							<expr_stmt><expr><call><name><name pos:line="569" pos:column="57">DBAnnotation</name><op:operator pos:line="569" pos:column="69">.</op:operator><name pos:line="569" pos:column="70">annoate</name></name><argument_list pos:line="569" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="569" pos:column="78">"getTaUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="569" pos:column="95">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="569" pos:column="105">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="569" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="570" pos:column="57">String</name></type> <name pos:line="570" pos:column="64">getTaUserName</name><init pos:line="570" pos:column="77">=<expr><call><name><name pos:line="570" pos:column="78">teachingAssistant</name><op:operator pos:line="570" pos:column="95">.</op:operator><name pos:line="570" pos:column="96">getUserName</name></name><argument_list pos:line="570" pos:column="107">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="571" pos:column="57">System</name><op:operator pos:line="571" pos:column="63">.</op:operator><name pos:line="571" pos:column="64">out</name><op:operator pos:line="571" pos:column="67">.</op:operator><name pos:line="571" pos:column="68">println</name></name><argument_list pos:line="571" pos:column="75">(<argument><expr><name pos:line="571" pos:column="76">getTaUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block> <catch pos:line="573" pos:column="51">catch <parameter_list pos:line="573" pos:column="57">(<param><decl><type><name pos:line="573" pos:column="58">PersonDoesNotExistException</name></type> <name pos:line="573" pos:column="86">e</name></decl></param>)</parameter_list> <block pos:line="573" pos:column="89">{
							<comment type="line" pos:line="574" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="575" pos:column="57">e</name><op:operator pos:line="575" pos:column="58">.</op:operator><name pos:line="575" pos:column="59">printStackTrace</name></name><argument_list pos:line="575" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
						
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="583" pos:column="25">//catch the SQl exception</comment>
			<catch pos:line="584" pos:column="25">catch <parameter_list pos:line="584" pos:column="31">(<param><decl><type><name pos:line="584" pos:column="32">SQLException</name></type> <name pos:line="584" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="584" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="585" pos:column="33">System</name><op:operator pos:line="585" pos:column="39">.</op:operator><name pos:line="585" pos:column="40">out</name><op:operator pos:line="585" pos:column="43">.</op:operator><name pos:line="585" pos:column="44">println</name></name><argument_list pos:line="585" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="585" pos:column="52">"Error fetching all the professors"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="586" pos:column="33">System</name><op:operator pos:line="586" pos:column="39">.</op:operator><name pos:line="586" pos:column="40">out</name><op:operator pos:line="586" pos:column="43">.</op:operator><name pos:line="586" pos:column="44">println</name></name><argument_list pos:line="586" pos:column="51">(<argument><expr><call><name><name pos:line="586" pos:column="52">e</name><op:operator pos:line="586" pos:column="53">.</op:operator><name pos:line="586" pos:column="54">getMessage</name></name><argument_list pos:line="586" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="587" pos:column="33">e</name><op:operator pos:line="587" pos:column="34">.</op:operator><name pos:line="587" pos:column="35">printStackTrace</name></name><argument_list pos:line="587" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="line" pos:line="590" pos:column="25">//finally block</comment>
			<finally pos:line="591" pos:column="25">finally <block pos:line="591" pos:column="33">{
				<comment type="line" pos:line="592" pos:column="33">// Database.commitTransaction(conn);</comment>
			}</block></finally></try>

		}</block>
		<comment type="line" pos:line="596" pos:column="17">//finally block </comment>
		<finally pos:line="597" pos:column="17">finally <block pos:line="597" pos:column="25">{
		}</block></finally></try>

		<return pos:line="600" pos:column="17">return <expr><name pos:line="600" pos:column="24">getAllTAs</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="604" pos:column="9">/*
	 * updateTAUserName function takes in the inputs of the new user name of
	 * the TA
	 * calls the boolean function update username from the people class with the new passed new username and the initialized objects
	 * username.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="615" pos:column="9">public</specifier> <name pos:line="615" pos:column="16">boolean</name></type> <name pos:line="615" pos:column="24">updateTAUserName</name><parameter_list pos:line="615" pos:column="40">(<param><decl><type><name pos:line="615" pos:column="41">String</name></type> <name pos:line="615" pos:column="48">userName</name></decl></param>)</parameter_list> <block pos:line="615" pos:column="58">{

		<comment type="line" pos:line="617" pos:column="17">//check for null</comment>
		<if pos:line="618" pos:column="17">if<condition pos:line="618" pos:column="19">(<expr><name pos:line="618" pos:column="20">userName</name><op:operator pos:line="618" pos:column="28">==</op:operator><lit:literal type="null" pos:line="618" pos:column="30">null</lit:literal></expr>)</condition><then><block pos:line="618" pos:column="35">{
			<return pos:line="619" pos:column="25">return <expr><lit:literal type="boolean" pos:line="619" pos:column="32">false</lit:literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line" pos:line="622" pos:column="17">//check for empty string</comment>
		<if pos:line="623" pos:column="17">if<condition pos:line="623" pos:column="19">(<expr><call><name><name pos:line="623" pos:column="20">userName</name><op:operator pos:line="623" pos:column="28">.</op:operator><name pos:line="623" pos:column="29">length</name></name><argument_list pos:line="623" pos:column="35">()</argument_list></call><op:operator pos:line="623" pos:column="37">==</op:operator><lit:literal type="number" pos:line="623" pos:column="39">0</lit:literal></expr>)</condition><then><block pos:line="623" pos:column="41">{
			<return pos:line="624" pos:column="25">return <expr><lit:literal type="boolean" pos:line="624" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		
		<decl_stmt><decl><type><name pos:line="628" pos:column="17">boolean</name></type> <name pos:line="628" pos:column="25">isUpdated</name> <init pos:line="628" pos:column="35">= <expr><lit:literal type="boolean" pos:line="628" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="628" pos:column="43">//set to false to be returned if it does not exist in login table</comment>

		<try pos:line="630" pos:column="17">try <block pos:line="630" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="631" pos:column="25">Connection</name></type> <name pos:line="631" pos:column="36">conn</name> <init pos:line="631" pos:column="41">= <expr><call><name><name pos:line="631" pos:column="43">Database</name><op:operator pos:line="631" pos:column="51">.</op:operator><name pos:line="631" pos:column="52">getConnection</name></name><argument_list pos:line="631" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="631" pos:column="68">//get the connection</comment>

			<try pos:line="633" pos:column="25">try <block pos:line="633" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="635" pos:column="33">boolean</name></type> <name pos:line="635" pos:column="41">ifUpdatedInLogin</name> <init pos:line="635" pos:column="58">= <expr><call><name><name pos:line="635" pos:column="60">People</name><op:operator pos:line="635" pos:column="66">.</op:operator><name pos:line="635" pos:column="67">updateUserNameIntoLoginTable</name></name><argument_list pos:line="635" pos:column="95">(<argument><expr><name pos:line="635" pos:column="96">userName</name></expr></argument>, <argument><expr><call><name><name pos:line="635" pos:column="106">this</name><op:operator pos:line="635" pos:column="110">.</op:operator><name pos:line="635" pos:column="111">getUserName</name></name><argument_list pos:line="635" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="635" pos:column="126">//check if it is updated in the login table</comment>
				<if pos:line="636" pos:column="33">if <condition pos:line="636" pos:column="36">(<expr><name pos:line="636" pos:column="37">ifUpdatedInLogin</name></expr>)</condition><then pos:line="636" pos:column="54">
					<expr_stmt><expr><name pos:line="637" pos:column="41">isUpdated</name> <op:operator pos:line="637" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="637" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="640" pos:column="25">//catch block</comment>
			<catch pos:line="641" pos:column="25">catch <parameter_list pos:line="641" pos:column="31">(<param><decl><type><name pos:line="641" pos:column="32">Exception</name></type> <name pos:line="641" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="641" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="642" pos:column="33">System</name><op:operator pos:line="642" pos:column="39">.</op:operator><name pos:line="642" pos:column="40">out</name><op:operator pos:line="642" pos:column="43">.</op:operator><name pos:line="642" pos:column="44">println</name></name><argument_list pos:line="642" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="642" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="643" pos:column="33">e</name><op:operator pos:line="643" pos:column="34">.</op:operator><name pos:line="643" pos:column="35">printStackTrace</name></name><argument_list pos:line="643" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="644" pos:column="33">System</name><op:operator pos:line="644" pos:column="39">.</op:operator><name pos:line="644" pos:column="40">out</name><op:operator pos:line="644" pos:column="43">.</op:operator><name pos:line="644" pos:column="44">println</name></name><argument_list pos:line="644" pos:column="51">(<argument><expr><name pos:line="644" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="648" pos:column="17">//catch the exception</comment>
		<catch pos:line="649" pos:column="17">catch <parameter_list pos:line="649" pos:column="23">(<param><decl><type><name pos:line="649" pos:column="24">Exception</name></type> <name pos:line="649" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="649" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="650" pos:column="25">System</name><op:operator pos:line="650" pos:column="31">.</op:operator><name pos:line="650" pos:column="32">out</name><op:operator pos:line="650" pos:column="35">.</op:operator><name pos:line="650" pos:column="36">println</name></name><argument_list pos:line="650" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="650" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="651" pos:column="25">e</name><op:operator pos:line="651" pos:column="26">.</op:operator><name pos:line="651" pos:column="27">printStackTrace</name></name><argument_list pos:line="651" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="652" pos:column="25">System</name><op:operator pos:line="652" pos:column="31">.</op:operator><name pos:line="652" pos:column="32">out</name><op:operator pos:line="652" pos:column="35">.</op:operator><name pos:line="652" pos:column="36">println</name></name><argument_list pos:line="652" pos:column="43">(<argument><expr><name pos:line="652" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line" pos:line="655" pos:column="17">//finally block</comment>
		<finally pos:line="656" pos:column="17">finally <block pos:line="656" pos:column="25">{

			<comment type="line" pos:line="658" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="661" pos:column="17">return <expr><name pos:line="661" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="665" pos:column="9">/*
	 * updateTAName function takes in the inputs of the new name of the TA
	 * 
	 * calls the boolean function update name from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier pos:line="677" pos:column="9">public</specifier> <name pos:line="677" pos:column="16">boolean</name></type> <name pos:line="677" pos:column="24">updateTAName</name><parameter_list pos:line="677" pos:column="36">(<param><decl><type><name pos:line="677" pos:column="37">String</name></type> <name pos:line="677" pos:column="44">name</name></decl></param>)</parameter_list> <block pos:line="677" pos:column="50">{

		<decl_stmt><decl><type><name pos:line="679" pos:column="17">boolean</name></type> <name pos:line="679" pos:column="25">isUpdated</name> <init pos:line="679" pos:column="35">= <expr><lit:literal type="boolean" pos:line="679" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="681" pos:column="17">//check for null</comment>
		<if pos:line="682" pos:column="17">if<condition pos:line="682" pos:column="19">(<expr><name pos:line="682" pos:column="20">name</name><op:operator pos:line="682" pos:column="24">==</op:operator><lit:literal type="null" pos:line="682" pos:column="26">null</lit:literal></expr>)</condition><then><block pos:line="682" pos:column="31">{
			<return pos:line="683" pos:column="25">return <expr><lit:literal type="boolean" pos:line="683" pos:column="32">false</lit:literal></expr>;</return>
			
		}</block></then></if>
		<comment type="line" pos:line="686" pos:column="17">//check if the length of the string is 0</comment>
		<if pos:line="687" pos:column="17">if<condition pos:line="687" pos:column="19">(<expr><call><name><name pos:line="687" pos:column="20">name</name><op:operator pos:line="687" pos:column="24">.</op:operator><name pos:line="687" pos:column="25">length</name></name><argument_list pos:line="687" pos:column="31">()</argument_list></call><op:operator pos:line="687" pos:column="33">==</op:operator><lit:literal type="number" pos:line="687" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="687" pos:column="37">{
			<return pos:line="688" pos:column="25">return <expr><lit:literal type="boolean" pos:line="688" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		

		<try pos:line="692" pos:column="17">try <block pos:line="692" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="693" pos:column="25">Connection</name></type> <name pos:line="693" pos:column="36">conn</name> <init pos:line="693" pos:column="41">= <expr><call><name><name pos:line="693" pos:column="43">Database</name><op:operator pos:line="693" pos:column="51">.</op:operator><name pos:line="693" pos:column="52">getConnection</name></name><argument_list pos:line="693" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="693" pos:column="68">//get the connection</comment>

			<try pos:line="695" pos:column="25">try <block pos:line="695" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="697" pos:column="33">boolean</name></type> <name pos:line="697" pos:column="41">ifUpdatedInPeople</name> <init pos:line="697" pos:column="59">= <expr><call><name><name pos:line="697" pos:column="61">People</name><op:operator pos:line="697" pos:column="67">.</op:operator><name pos:line="697" pos:column="68">updateNameIntoPeopleTable</name></name><argument_list pos:line="697" pos:column="93">(<argument><expr><name pos:line="697" pos:column="94">name</name></expr></argument>, <argument><expr><call><name><name pos:line="697" pos:column="100">this</name><op:operator pos:line="697" pos:column="104">.</op:operator><name pos:line="697" pos:column="105">getUIN</name></name><argument_list pos:line="697" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="697" pos:column="115">//update in the people table</comment>
				<if pos:line="698" pos:column="33">if <condition pos:line="698" pos:column="36">(<expr><name pos:line="698" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="698" pos:column="55">
					<expr_stmt><expr><name pos:line="699" pos:column="41">isUpdated</name> <op:operator pos:line="699" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="699" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="702" pos:column="25">//catch block</comment>
			<catch pos:line="703" pos:column="25">catch <parameter_list pos:line="703" pos:column="31">(<param><decl><type><name pos:line="703" pos:column="32">Exception</name></type> <name pos:line="703" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="703" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="704" pos:column="33">System</name><op:operator pos:line="704" pos:column="39">.</op:operator><name pos:line="704" pos:column="40">out</name><op:operator pos:line="704" pos:column="43">.</op:operator><name pos:line="704" pos:column="44">println</name></name><argument_list pos:line="704" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="704" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="705" pos:column="33">e</name><op:operator pos:line="705" pos:column="34">.</op:operator><name pos:line="705" pos:column="35">printStackTrace</name></name><argument_list pos:line="705" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="706" pos:column="33">System</name><op:operator pos:line="706" pos:column="39">.</op:operator><name pos:line="706" pos:column="40">out</name><op:operator pos:line="706" pos:column="43">.</op:operator><name pos:line="706" pos:column="44">println</name></name><argument_list pos:line="706" pos:column="51">(<argument><expr><name pos:line="706" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="710" pos:column="17">//catch block</comment>
		<catch pos:line="711" pos:column="17">catch <parameter_list pos:line="711" pos:column="23">(<param><decl><type><name pos:line="711" pos:column="24">Exception</name></type> <name pos:line="711" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="711" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="712" pos:column="25">System</name><op:operator pos:line="712" pos:column="31">.</op:operator><name pos:line="712" pos:column="32">out</name><op:operator pos:line="712" pos:column="35">.</op:operator><name pos:line="712" pos:column="36">println</name></name><argument_list pos:line="712" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="712" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="713" pos:column="25">e</name><op:operator pos:line="713" pos:column="26">.</op:operator><name pos:line="713" pos:column="27">printStackTrace</name></name><argument_list pos:line="713" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="714" pos:column="25">System</name><op:operator pos:line="714" pos:column="31">.</op:operator><name pos:line="714" pos:column="32">out</name><op:operator pos:line="714" pos:column="35">.</op:operator><name pos:line="714" pos:column="36">println</name></name><argument_list pos:line="714" pos:column="43">(<argument><expr><name pos:line="714" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line" pos:line="717" pos:column="17">//finally block</comment>
		<finally pos:line="718" pos:column="17">finally <block pos:line="718" pos:column="25">{

			<comment type="line" pos:line="720" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="723" pos:column="17">return <expr><name pos:line="723" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="727" pos:column="9">/*
	 * updateTADept function takes in the inputs of the newdept of the TA
	 * * calls the boolean function update dept from the people class with the
	 * passed new name and the initialized objects UIN.
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>

	<function><type><specifier pos:line="738" pos:column="9">public</specifier> <name pos:line="738" pos:column="16">boolean</name></type> <name pos:line="738" pos:column="24">updateTADept</name><parameter_list pos:line="738" pos:column="36">(<param><decl><type><name pos:line="738" pos:column="37">int</name></type> <name pos:line="738" pos:column="41">deptID</name></decl></param>)</parameter_list> <block pos:line="738" pos:column="49">{
		
		<try pos:line="740" pos:column="17">try <block pos:line="740" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="741" pos:column="25">Department</name></type> <name pos:line="741" pos:column="36">d</name><init pos:line="741" pos:column="37">=<expr><op:operator pos:line="741" pos:column="38">new</op:operator> <call><name pos:line="741" pos:column="42">Department</name><argument_list pos:line="741" pos:column="52">(<argument><expr><name pos:line="741" pos:column="53">deptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		}</block> <catch pos:line="742" pos:column="19">catch <parameter_list pos:line="742" pos:column="25">(<param><decl><type><name><name pos:line="742" pos:column="26">Department</name><op:operator pos:line="742" pos:column="36">.</op:operator><name pos:line="742" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="742" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="742" pos:column="73">{
			<comment type="line" pos:line="743" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="744" pos:column="25">e1</name><op:operator pos:line="744" pos:column="27">.</op:operator><name pos:line="744" pos:column="28">printStackTrace</name></name><argument_list pos:line="744" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<decl_stmt><decl><type><name pos:line="747" pos:column="17">boolean</name></type> <name pos:line="747" pos:column="25">isUpdated</name> <init pos:line="747" pos:column="35">= <expr><lit:literal type="boolean" pos:line="747" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="747" pos:column="43">//set the value to be returned as false</comment>

		<try pos:line="749" pos:column="17">try <block pos:line="749" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="750" pos:column="25">Connection</name></type> <name pos:line="750" pos:column="36">conn</name> <init pos:line="750" pos:column="41">= <expr><call><name><name pos:line="750" pos:column="43">Database</name><op:operator pos:line="750" pos:column="51">.</op:operator><name pos:line="750" pos:column="52">getConnection</name></name><argument_list pos:line="750" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="750" pos:column="68">//get the connection</comment>

			<try pos:line="752" pos:column="25">try <block pos:line="752" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="754" pos:column="33">boolean</name></type> <name pos:line="754" pos:column="41">ifUpdatedInPeople</name> <init pos:line="754" pos:column="59">= <expr><call><name><name pos:line="754" pos:column="61">People</name><op:operator pos:line="754" pos:column="67">.</op:operator><name pos:line="754" pos:column="68">updateDeptIntoPeopleTable</name></name><argument_list pos:line="754" pos:column="93">(<argument><expr><name pos:line="754" pos:column="94">deptID</name></expr></argument>, <argument><expr><call><name><name pos:line="754" pos:column="102">this</name><op:operator pos:line="754" pos:column="106">.</op:operator><name pos:line="754" pos:column="107">getUIN</name></name><argument_list pos:line="754" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="754" pos:column="117">//update in people</comment>
				<if pos:line="755" pos:column="33">if <condition pos:line="755" pos:column="36">(<expr><name pos:line="755" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="755" pos:column="55">
					<expr_stmt><expr><name pos:line="756" pos:column="41">isUpdated</name> <op:operator pos:line="756" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="756" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="759" pos:column="25">//catch block</comment>
			<catch pos:line="760" pos:column="25">catch <parameter_list pos:line="760" pos:column="31">(<param><decl><type><name pos:line="760" pos:column="32">Exception</name></type> <name pos:line="760" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="760" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="761" pos:column="33">System</name><op:operator pos:line="761" pos:column="39">.</op:operator><name pos:line="761" pos:column="40">out</name><op:operator pos:line="761" pos:column="43">.</op:operator><name pos:line="761" pos:column="44">println</name></name><argument_list pos:line="761" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="761" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="762" pos:column="33">e</name><op:operator pos:line="762" pos:column="34">.</op:operator><name pos:line="762" pos:column="35">printStackTrace</name></name><argument_list pos:line="762" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="763" pos:column="33">System</name><op:operator pos:line="763" pos:column="39">.</op:operator><name pos:line="763" pos:column="40">out</name><op:operator pos:line="763" pos:column="43">.</op:operator><name pos:line="763" pos:column="44">println</name></name><argument_list pos:line="763" pos:column="51">(<argument><expr><name pos:line="763" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="767" pos:column="17">//catch block</comment>
		<catch pos:line="768" pos:column="17">catch <parameter_list pos:line="768" pos:column="23">(<param><decl><type><name pos:line="768" pos:column="24">Exception</name></type> <name pos:line="768" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="768" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="769" pos:column="25">System</name><op:operator pos:line="769" pos:column="31">.</op:operator><name pos:line="769" pos:column="32">out</name><op:operator pos:line="769" pos:column="35">.</op:operator><name pos:line="769" pos:column="36">println</name></name><argument_list pos:line="769" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="769" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="770" pos:column="25">e</name><op:operator pos:line="770" pos:column="26">.</op:operator><name pos:line="770" pos:column="27">printStackTrace</name></name><argument_list pos:line="770" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="771" pos:column="25">System</name><op:operator pos:line="771" pos:column="31">.</op:operator><name pos:line="771" pos:column="32">out</name><op:operator pos:line="771" pos:column="35">.</op:operator><name pos:line="771" pos:column="36">println</name></name><argument_list pos:line="771" pos:column="43">(<argument><expr><name pos:line="771" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line" pos:line="774" pos:column="17">//finally block</comment>
		<finally pos:line="775" pos:column="17">finally <block pos:line="775" pos:column="25">{

			<comment type="line" pos:line="777" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="780" pos:column="17">return <expr><name pos:line="780" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="784" pos:column="9">/*if a student is added as a TA the nhis position ID is changed to TA
	 * 
	 * the parameter passed is UIN
	 * 
	 * the return type is boolean*/</comment>
	<function><type><specifier pos:line="789" pos:column="9">public</specifier> <specifier pos:line="789" pos:column="16">static</specifier> <name pos:line="789" pos:column="23">boolean</name></type> <name pos:line="789" pos:column="31">updateStudentToTA</name><parameter_list pos:line="789" pos:column="48">(<param><decl><type><name pos:line="789" pos:column="49">int</name></type> <name pos:line="789" pos:column="53">UIN</name></decl></param>)</parameter_list><block pos:line="789" pos:column="57">{
		
		<decl_stmt><decl><type><name pos:line="791" pos:column="17">boolean</name></type> <name pos:line="791" pos:column="25">isUpdated</name><init pos:line="791" pos:column="34">=<expr><lit:literal type="boolean" pos:line="791" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="791" pos:column="41">//set the return value to false</comment>
		<decl_stmt><decl><type><name pos:line="792" pos:column="17">int</name></type> <name pos:line="792" pos:column="21">setPosition</name><init pos:line="792" pos:column="32">=<expr><lit:literal type="number" pos:line="792" pos:column="33">4</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="794" pos:column="17">try<block pos:line="794" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="795" pos:column="25">Connection</name></type> <name pos:line="795" pos:column="36">conn</name> <init pos:line="795" pos:column="41">= <expr><call><name><name pos:line="795" pos:column="43">Database</name><op:operator pos:line="795" pos:column="51">.</op:operator><name pos:line="795" pos:column="52">getConnection</name></name><argument_list pos:line="795" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="795" pos:column="68">//get the connection</comment>
			
			<try pos:line="797" pos:column="25">try<block pos:line="797" pos:column="28">{
				
				    
						
						<expr_stmt><expr><call><name><name pos:line="801" pos:column="49">System</name><op:operator pos:line="801" pos:column="55">.</op:operator><name pos:line="801" pos:column="56">out</name><op:operator pos:line="801" pos:column="59">.</op:operator><name pos:line="801" pos:column="60">println</name></name><argument_list pos:line="801" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="801" pos:column="68">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="802" pos:column="49">String</name></type> <name pos:line="802" pos:column="56">SQLDeptUpdate</name><init pos:line="802" pos:column="69">= <expr><lit:literal type="string" pos:line="802" pos:column="71">"UPDATE people SET PositionID= ? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="803" pos:column="49">PreparedStatement</name></type> <name pos:line="803" pos:column="67">stmt</name> <init pos:line="803" pos:column="72">= <expr><call><name><name pos:line="803" pos:column="74">conn</name><op:operator pos:line="803" pos:column="78">.</op:operator><name pos:line="803" pos:column="79">prepareStatement</name></name><argument_list pos:line="803" pos:column="95">(<argument><expr><name pos:line="803" pos:column="96">SQLDeptUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="804" pos:column="49">stmt</name><op:operator pos:line="804" pos:column="53">.</op:operator><name pos:line="804" pos:column="54">setInt</name></name><argument_list pos:line="804" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="804" pos:column="61">1</lit:literal></expr></argument>,<argument><expr><name pos:line="804" pos:column="63">setPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="804" pos:column="76">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="805" pos:column="49">stmt</name><op:operator pos:line="805" pos:column="53">.</op:operator><name pos:line="805" pos:column="54">setInt</name></name><argument_list pos:line="805" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="805" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="805" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="805" pos:column="69">//set the values</comment>
						<expr_stmt><expr><call><name><name pos:line="806" pos:column="49">System</name><op:operator pos:line="806" pos:column="55">.</op:operator><name pos:line="806" pos:column="56">out</name><op:operator pos:line="806" pos:column="59">.</op:operator><name pos:line="806" pos:column="60">println</name></name><argument_list pos:line="806" pos:column="67">(<argument><expr><name pos:line="806" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="807" pos:column="49">int</name></type> <name pos:line="807" pos:column="53">i</name> <init pos:line="807" pos:column="55">= <expr><call><name><name pos:line="807" pos:column="57">stmt</name><op:operator pos:line="807" pos:column="61">.</op:operator><name pos:line="807" pos:column="62">executeUpdate</name></name><argument_list pos:line="807" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="807" pos:column="78">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="809" pos:column="49">DBAnnotation</name><op:operator pos:line="809" pos:column="61">.</op:operator><name pos:line="809" pos:column="62">annoate</name></name><argument_list pos:line="809" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="809" pos:column="70">"setPosition"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="809" pos:column="85">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="809" pos:column="95">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="809" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="810" pos:column="49">DBAnnotation</name><op:operator pos:line="810" pos:column="61">.</op:operator><name pos:line="810" pos:column="62">annoate</name></name><argument_list pos:line="810" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="810" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="810" pos:column="77">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="810" pos:column="87">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="810" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="812" pos:column="49">System</name><op:operator pos:line="812" pos:column="55">.</op:operator><name pos:line="812" pos:column="56">out</name><op:operator pos:line="812" pos:column="59">.</op:operator><name pos:line="812" pos:column="60">println</name></name><argument_list pos:line="812" pos:column="67">(<argument><expr><name pos:line="812" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="813" pos:column="49">System</name><op:operator pos:line="813" pos:column="55">.</op:operator><name pos:line="813" pos:column="56">out</name><op:operator pos:line="813" pos:column="59">.</op:operator><name pos:line="813" pos:column="60">println</name></name><argument_list pos:line="813" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="813" pos:column="68">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="814" pos:column="49">isUpdated</name><op:operator pos:line="814" pos:column="58">=</op:operator><lit:literal type="boolean" pos:line="814" pos:column="59">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="815" pos:column="49">Database</name><op:operator pos:line="815" pos:column="57">.</op:operator><name pos:line="815" pos:column="58">commitTransaction</name></name><argument_list pos:line="815" pos:column="75">(<argument><expr><name pos:line="815" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					
					
			}</block>
			<comment type="line" pos:line="820" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="821" pos:column="25">catch<parameter_list pos:line="821" pos:column="30">(<param><decl><type><name pos:line="821" pos:column="31">SQLException</name></type> <name pos:line="821" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="821" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="822" pos:column="33">System</name><op:operator pos:line="822" pos:column="39">.</op:operator><name pos:line="822" pos:column="40">out</name><op:operator pos:line="822" pos:column="43">.</op:operator><name pos:line="822" pos:column="44">println</name></name><argument_list pos:line="822" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="822" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="823" pos:column="33">System</name><op:operator pos:line="823" pos:column="39">.</op:operator><name pos:line="823" pos:column="40">out</name><op:operator pos:line="823" pos:column="43">.</op:operator><name pos:line="823" pos:column="44">println</name></name><argument_list pos:line="823" pos:column="51">(<argument><expr><name pos:line="823" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name pos:line="824" pos:column="33">e</name><op:operator pos:line="824" pos:column="34">.</op:operator><name pos:line="824" pos:column="35">printStackTrace</name></name><argument_list pos:line="824" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		<comment type="line" pos:line="827" pos:column="17">//outer catch block </comment>
		<catch pos:line="828" pos:column="17">catch<parameter_list pos:line="828" pos:column="22">(<param><decl><type><name pos:line="828" pos:column="23">Exception</name></type> <name pos:line="828" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="828" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="829" pos:column="25">System</name><op:operator pos:line="829" pos:column="31">.</op:operator><name pos:line="829" pos:column="32">out</name><op:operator pos:line="829" pos:column="35">.</op:operator><name pos:line="829" pos:column="36">println</name></name><argument_list pos:line="829" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="829" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="830" pos:column="25">System</name><op:operator pos:line="830" pos:column="31">.</op:operator><name pos:line="830" pos:column="32">out</name><op:operator pos:line="830" pos:column="35">.</op:operator><name pos:line="830" pos:column="36">println</name></name><argument_list pos:line="830" pos:column="43">(<argument><expr><name pos:line="830" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="831" pos:column="25">e</name><op:operator pos:line="831" pos:column="26">.</op:operator><name pos:line="831" pos:column="27">printStackTrace</name></name><argument_list pos:line="831" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line" pos:line="834" pos:column="17">//finally block</comment>
		<finally pos:line="835" pos:column="17">finally<block pos:line="835" pos:column="24">{
			
			<comment type="line" pos:line="837" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="840" pos:column="9">return <expr><name pos:line="840" pos:column="16">isUpdated</name></expr>;</return>
	}</block></function>
		
	<comment type="block" pos:line="843" pos:column="9">/*if a TA is relieved of his Ta ship then his position ID is changed 3 as all students
	 * 
	 * the parameter passed is UIN
	 * 
	 * the return type is boolean*/</comment>
	<function><type><specifier pos:line="848" pos:column="9">public</specifier> <specifier pos:line="848" pos:column="16">static</specifier> <name pos:line="848" pos:column="23">boolean</name></type> <name pos:line="848" pos:column="31">updateTAtoStudent</name><parameter_list pos:line="848" pos:column="48">(<param><decl><type><name pos:line="848" pos:column="49">int</name></type> <name pos:line="848" pos:column="53">UIN</name></decl></param>)</parameter_list><block pos:line="848" pos:column="57">{
		
		<decl_stmt><decl><type><name pos:line="850" pos:column="17">boolean</name></type> <name pos:line="850" pos:column="25">isUpdated</name><init pos:line="850" pos:column="34">=<expr><lit:literal type="boolean" pos:line="850" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="850" pos:column="41">//set the return value to be false</comment>
		<decl_stmt><decl><type><name pos:line="851" pos:column="17">int</name></type> <name pos:line="851" pos:column="21">setPosition</name><init pos:line="851" pos:column="32">=<expr><lit:literal type="number" pos:line="851" pos:column="33">3</lit:literal></expr></init></decl>;</decl_stmt>
		
		
		<try pos:line="854" pos:column="17">try<block pos:line="854" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="855" pos:column="25">Connection</name></type> <name pos:line="855" pos:column="36">conn</name> <init pos:line="855" pos:column="41">= <expr><call><name><name pos:line="855" pos:column="43">Database</name><op:operator pos:line="855" pos:column="51">.</op:operator><name pos:line="855" pos:column="52">getConnection</name></name><argument_list pos:line="855" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="855" pos:column="68">//get the connection</comment>
			
			<try pos:line="857" pos:column="25">try<block pos:line="857" pos:column="28">{
				<expr_stmt><expr><call><name><name pos:line="858" pos:column="33">System</name><op:operator pos:line="858" pos:column="39">.</op:operator><name pos:line="858" pos:column="40">out</name><op:operator pos:line="858" pos:column="43">.</op:operator><name pos:line="858" pos:column="44">println</name></name><argument_list pos:line="858" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="858" pos:column="52">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="859" pos:column="33">String</name></type> <name pos:line="859" pos:column="40">SQLDeptUpdate</name><init pos:line="859" pos:column="53">= <expr><lit:literal type="string" pos:line="859" pos:column="55">"UPDATE people SET PositionID= ? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="859" pos:column="102">//write the query</comment>
				<decl_stmt><decl><type><name pos:line="860" pos:column="33">PreparedStatement</name></type> <name pos:line="860" pos:column="51">stmt</name> <init pos:line="860" pos:column="56">= <expr><call><name><name pos:line="860" pos:column="58">conn</name><op:operator pos:line="860" pos:column="62">.</op:operator><name pos:line="860" pos:column="63">prepareStatement</name></name><argument_list pos:line="860" pos:column="79">(<argument><expr><name pos:line="860" pos:column="80">SQLDeptUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="861" pos:column="33">stmt</name><op:operator pos:line="861" pos:column="37">.</op:operator><name pos:line="861" pos:column="38">setInt</name></name><argument_list pos:line="861" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="861" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="861" pos:column="48">setPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="861" pos:column="61">//set the values</comment>
				<expr_stmt><expr><call><name><name pos:line="862" pos:column="33">stmt</name><op:operator pos:line="862" pos:column="37">.</op:operator><name pos:line="862" pos:column="38">setInt</name></name><argument_list pos:line="862" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="862" pos:column="45">2</lit:literal></expr></argument>, <argument><expr><name pos:line="862" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="862" pos:column="53">//set the values</comment>
				<expr_stmt><expr><call><name><name pos:line="863" pos:column="33">System</name><op:operator pos:line="863" pos:column="39">.</op:operator><name pos:line="863" pos:column="40">out</name><op:operator pos:line="863" pos:column="43">.</op:operator><name pos:line="863" pos:column="44">println</name></name><argument_list pos:line="863" pos:column="51">(<argument><expr><name pos:line="863" pos:column="52">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="864" pos:column="33">int</name></type> <name pos:line="864" pos:column="37">i</name> <init pos:line="864" pos:column="39">= <expr><call><name><name pos:line="864" pos:column="41">stmt</name><op:operator pos:line="864" pos:column="45">.</op:operator><name pos:line="864" pos:column="46">executeUpdate</name></name><argument_list pos:line="864" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="864" pos:column="62">//execute the query</comment>
				
				<expr_stmt><expr><call><name><name pos:line="866" pos:column="33">DBAnnotation</name><op:operator pos:line="866" pos:column="45">.</op:operator><name pos:line="866" pos:column="46">annoate</name></name><argument_list pos:line="866" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="866" pos:column="54">"setPosition"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="866" pos:column="69">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="866" pos:column="79">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="866" pos:column="93">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="867" pos:column="33">DBAnnotation</name><op:operator pos:line="867" pos:column="45">.</op:operator><name pos:line="867" pos:column="46">annoate</name></name><argument_list pos:line="867" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="867" pos:column="54">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="867" pos:column="61">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="867" pos:column="71">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="867" pos:column="78">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="869" pos:column="33">System</name><op:operator pos:line="869" pos:column="39">.</op:operator><name pos:line="869" pos:column="40">out</name><op:operator pos:line="869" pos:column="43">.</op:operator><name pos:line="869" pos:column="44">println</name></name><argument_list pos:line="869" pos:column="51">(<argument><expr><name pos:line="869" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="870" pos:column="33">System</name><op:operator pos:line="870" pos:column="39">.</op:operator><name pos:line="870" pos:column="40">out</name><op:operator pos:line="870" pos:column="43">.</op:operator><name pos:line="870" pos:column="44">println</name></name><argument_list pos:line="870" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="870" pos:column="52">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="871" pos:column="33">isUpdated</name><op:operator pos:line="871" pos:column="42">=</op:operator><lit:literal type="boolean" pos:line="871" pos:column="43">true</lit:literal></expr>;</expr_stmt>
				<if pos:line="872" pos:column="33">if<condition pos:line="872" pos:column="35">(<expr><name pos:line="872" pos:column="36">isUpdated</name></expr>)</condition><then pos:line="872" pos:column="46">
					<expr_stmt><expr><call><name><name pos:line="873" pos:column="41">Database</name><op:operator pos:line="873" pos:column="49">.</op:operator><name pos:line="873" pos:column="50">commitTransaction</name></name><argument_list pos:line="873" pos:column="67">(<argument><expr><name pos:line="873" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				
				<else pos:line="875" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="876" pos:column="41">Database</name><op:operator pos:line="876" pos:column="49">.</op:operator><name pos:line="876" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="876" pos:column="69">(<argument><expr><name pos:line="876" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				
					
					
			}</block>
			<comment type="line" pos:line="881" pos:column="25">//catch block for SQL exception</comment>
			<catch pos:line="882" pos:column="25">catch<parameter_list pos:line="882" pos:column="30">(<param><decl><type><name pos:line="882" pos:column="31">SQLException</name></type> <name pos:line="882" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="882" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="883" pos:column="33">System</name><op:operator pos:line="883" pos:column="39">.</op:operator><name pos:line="883" pos:column="40">out</name><op:operator pos:line="883" pos:column="43">.</op:operator><name pos:line="883" pos:column="44">println</name></name><argument_list pos:line="883" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="883" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="884" pos:column="33">System</name><op:operator pos:line="884" pos:column="39">.</op:operator><name pos:line="884" pos:column="40">out</name><op:operator pos:line="884" pos:column="43">.</op:operator><name pos:line="884" pos:column="44">println</name></name><argument_list pos:line="884" pos:column="51">(<argument><expr><name pos:line="884" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name pos:line="885" pos:column="33">e</name><op:operator pos:line="885" pos:column="34">.</op:operator><name pos:line="885" pos:column="35">printStackTrace</name></name><argument_list pos:line="885" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		<comment type="line" pos:line="889" pos:column="17">//catch block</comment>
		<catch pos:line="890" pos:column="17">catch<parameter_list pos:line="890" pos:column="22">(<param><decl><type><name pos:line="890" pos:column="23">Exception</name></type> <name pos:line="890" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="890" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="891" pos:column="25">System</name><op:operator pos:line="891" pos:column="31">.</op:operator><name pos:line="891" pos:column="32">out</name><op:operator pos:line="891" pos:column="35">.</op:operator><name pos:line="891" pos:column="36">println</name></name><argument_list pos:line="891" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="891" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="892" pos:column="25">System</name><op:operator pos:line="892" pos:column="31">.</op:operator><name pos:line="892" pos:column="32">out</name><op:operator pos:line="892" pos:column="35">.</op:operator><name pos:line="892" pos:column="36">println</name></name><argument_list pos:line="892" pos:column="43">(<argument><expr><name pos:line="892" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="893" pos:column="25">e</name><op:operator pos:line="893" pos:column="26">.</op:operator><name pos:line="893" pos:column="27">printStackTrace</name></name><argument_list pos:line="893" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch>
		<comment type="line" pos:line="896" pos:column="17">//finally block</comment>
		<finally pos:line="897" pos:column="17">finally<block pos:line="897" pos:column="24">{
			
			<comment type="line" pos:line="899" pos:column="25">//System.out.println("retrieved");</comment>
		}</block></finally></try>
		
	<return pos:line="902" pos:column="9">return <expr><name pos:line="902" pos:column="16">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="905" pos:column="9">//new added exceptions that can be thrown</comment>
	<class><specifier pos:line="906" pos:column="9">public</specifier> <specifier pos:line="906" pos:column="16">static</specifier> class <name pos:line="906" pos:column="29">AlreadyExistsInTAException</name> <super><extends pos:line="906" pos:column="56">extends <name pos:line="906" pos:column="64">Exception</name></extends></super> <block pos:line="906" pos:column="74">{
		<decl_stmt><decl><type><specifier pos:line="907" pos:column="17">private</specifier> <specifier pos:line="907" pos:column="25">static</specifier> <specifier pos:line="907" pos:column="32">final</specifier> <name pos:line="907" pos:column="38">long</name></type> <name pos:line="907" pos:column="43">serialVersionUID</name> <init pos:line="907" pos:column="60">= <expr><lit:literal type="number" pos:line="907" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="908" pos:column="17">private</specifier> <name pos:line="908" pos:column="25">String</name></type> <name pos:line="908" pos:column="32">message</name> <init pos:line="908" pos:column="40">= <expr><lit:literal type="null" pos:line="908" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="910" pos:column="17">public</specifier> <name pos:line="910" pos:column="24">AlreadyExistsInTAException</name><parameter_list pos:line="910" pos:column="50">()</parameter_list> <block pos:line="910" pos:column="53">{
			<expr_stmt><expr><call><name pos:line="911" pos:column="25">super</name><argument_list pos:line="911" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="912" pos:column="25">this</name><op:operator pos:line="912" pos:column="29">.</op:operator><name pos:line="912" pos:column="30">message</name></name> <op:operator pos:line="912" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="912" pos:column="40">"TA is already existing for this course offering"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="915" pos:column="17">public</specifier> <name pos:line="915" pos:column="24">AlreadyExistsInTAException</name><parameter_list pos:line="915" pos:column="50">(<param><decl><type><name pos:line="915" pos:column="51">String</name></type> <name pos:line="915" pos:column="58">message</name></decl></param>)</parameter_list> <block pos:line="915" pos:column="67">{
			<expr_stmt><expr><call><name pos:line="916" pos:column="25">super</name><argument_list pos:line="916" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="917" pos:column="25">this</name><op:operator pos:line="917" pos:column="29">.</op:operator><name pos:line="917" pos:column="30">message</name></name> <op:operator pos:line="917" pos:column="38">=</op:operator> <name pos:line="917" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="920" pos:column="17">@<name pos:line="920" pos:column="18">Override</name></annotation>
		<specifier pos:line="921" pos:column="17">public</specifier> <name pos:line="921" pos:column="24">String</name></type> <name pos:line="921" pos:column="31">toString</name><parameter_list pos:line="921" pos:column="39">()</parameter_list> <block pos:line="921" pos:column="42">{
			<return pos:line="922" pos:column="25">return <expr><name pos:line="922" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="925" pos:column="17">@<name pos:line="925" pos:column="18">Override</name></annotation>
		<specifier pos:line="926" pos:column="17">public</specifier> <name pos:line="926" pos:column="24">String</name></type> <name pos:line="926" pos:column="31">getMessage</name><parameter_list pos:line="926" pos:column="41">()</parameter_list> <block pos:line="926" pos:column="44">{
			<return pos:line="927" pos:column="25">return <expr><name pos:line="927" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block" pos:line="931" pos:column="9">/*
	 * All TA functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier pos:line="936" pos:column="9">public</specifier> <specifier pos:line="936" pos:column="16">static</specifier> <name pos:line="936" pos:column="23">void</name></type> <name pos:line="936" pos:column="28">main</name><parameter_list pos:line="936" pos:column="32">(<param><decl><type><name><name pos:line="936" pos:column="33">String</name><index pos:line="936" pos:column="39">[]</index></name></type> <name pos:line="936" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="936" pos:column="48">{

		

	}</block></function>

}</block></class>
</unit>
