<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\controller\EstimateIncome.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SQLException</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">HashMap</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Iterator</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">tada</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">data</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">CalculateRegressionDataStructure</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">EstimateIncomeDTOInterface</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">interfaces</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">EstimateIncomeInterface</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">util</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Factory</name></name>;</import>



<comment type="block" format="javadoc" pos:line="19" pos:column="1">/**
 * EstimateIncome.java
 * Purpose: Calculation class to estimate income based on weekly wage, work 
 * 	weeks or investment income for requirement 5.
 * 
 * 	Uses CalculateRegression class to calculate the linear regression values.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="30" pos:column="1">/**
 * Object to perform all data gathering functions necessary to obtain
 * 	the data to be passed to the CalculateRegression object that will
 * 	compute the linear regression formula in the form of y = m(x) + b
 *  based on the data.
 * 
 * Linear regression is performed once when the class is first instantiated,
 * 	then the computed slope and intercept values for the entire data set, along
 * 	with the middle 2/3 of the data set is held in CalculateRegressionDataStructure
 * 	data transfer objects for quick calculations.
 */</comment>
<class><specifier pos:line="41" pos:column="1">public</specifier> class <name pos:line="41" pos:column="14">EstimateIncome</name> <super><implements pos:line="41" pos:column="29">implements <name pos:line="41" pos:column="40">EstimateIncomeInterface</name></implements></super><block pos:line="41" pos:column="63">{

	<decl_stmt><decl><type><specifier pos:line="43" pos:column="9">private</specifier> <name pos:line="43" pos:column="17">Statement</name></type> <name pos:line="43" pos:column="27">statement</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="44" pos:column="9">private</specifier> <name pos:line="44" pos:column="17">ResultSet</name></type> <name pos:line="44" pos:column="27">results</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="46" pos:column="9">private</specifier> <name pos:line="46" pos:column="17">CalculateRegressionDataStructure</name></type> <name pos:line="46" pos:column="50">workWeeksFindIncome</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="47" pos:column="9">private</specifier> <name pos:line="47" pos:column="17">CalculateRegressionDataStructure</name></type> <name pos:line="47" pos:column="50">weeklyWageFindIncome</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="48" pos:column="9">private</specifier> <name pos:line="48" pos:column="17">CalculateRegressionDataStructure</name></type> <name pos:line="48" pos:column="50">investmentIncomeFindIncome</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc" pos:line="50" pos:column="9">/**
	 * Public constructor that starts the regression analysis that will be
	 * 	performed only once per instantiation.
	 */</comment>
	<constructor><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">EstimateIncome</name><parameter_list pos:line="54" pos:column="30">()</parameter_list><block pos:line="54" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">calculateSlopesAndIntercepts</name><argument_list pos:line="55" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="58" pos:column="9">// Gathers datat from the database and passes the formatted data to the</comment>
	<comment type="line" pos:line="59" pos:column="9">//	CalculateRegression object that will compute the regression formulas.</comment>
	<function><type><annotation pos:line="60" pos:column="9">@<name pos:line="60" pos:column="10">TaDaMethod</name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">variablesToTrack</name> <op:operator pos:line="60" pos:column="38">=</op:operator> <block pos:line="60" pos:column="40">{<expr><lit:literal type="string" pos:line="60" pos:column="41">"ssn"</lit:literal></expr><op:operator pos:line="60" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="60" pos:column="48">"weekWage"</lit:literal></expr></argument><op:operator pos:line="60" pos:column="58">,</op:operator> <argument><expr><lit:literal type="string" pos:line="60" pos:column="60">"workWeeks"</lit:literal></expr></argument><op:operator pos:line="60" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="60" pos:column="73">"ssn2"</lit:literal></expr></argument><op:operator pos:line="60" pos:column="79">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="61" pos:column="25">"capitalGains"</lit:literal></expr></argument><op:operator pos:line="61" pos:column="39">,</op:operator> <argument><expr><lit:literal type="string" pos:line="61" pos:column="41">"capitalLosses"</lit:literal></expr></argument><op:operator pos:line="61" pos:column="56">,</op:operator> <argument><expr><lit:literal type="string" pos:line="61" pos:column="58">"stockDividends"</lit:literal></expr></argument>}</block></expr></argument>, 
			<argument><expr><name pos:line="62" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="62" pos:column="56">=</op:operator> <block pos:line="62" pos:column="58">{<expr><lit:literal type="string" pos:line="62" pos:column="59">"job.ssn"</lit:literal></expr><op:operator pos:line="62" pos:column="68">,</op:operator> <argument><expr><lit:literal type="string" pos:line="62" pos:column="70">"job.WEEKWAGE"</lit:literal></expr></argument><op:operator pos:line="62" pos:column="84">,</op:operator> <argument><expr><lit:literal type="string" pos:line="62" pos:column="86">"job.WORKWEEKS"</lit:literal></expr></argument><op:operator pos:line="62" pos:column="101">,</op:operator> <argument><expr><lit:literal type="string" pos:line="62" pos:column="103">"investment.ssn"</lit:literal></expr></argument><op:operator pos:line="62" pos:column="119">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="63" pos:column="25">"investment.CAPITALGAINS"</lit:literal></expr></argument><op:operator pos:line="63" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="63" pos:column="52">"investment.CAPITALLOSSES"</lit:literal></expr></argument><op:operator pos:line="63" pos:column="78">,</op:operator> <argument><expr><lit:literal type="string" pos:line="63" pos:column="80">"investment.STOCKDIVIDENDS"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="64" pos:column="9">private</specifier> <name pos:line="64" pos:column="17">void</name></type> <name pos:line="64" pos:column="22">calculateSlopesAndIntercepts</name><parameter_list pos:line="64" pos:column="50">()</parameter_list><block pos:line="64" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="65" pos:column="17">HashMap</name><argument_list pos:line="65" pos:column="24">&lt;<argument><name pos:line="65" pos:column="25">Integer</name></argument>, <argument><name pos:line="65" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="43">ssnWeekWage</name> <init pos:line="65" pos:column="55">= <expr><op:operator pos:line="65" pos:column="57">new</op:operator> <call><name><name pos:line="65" pos:column="61">HashMap</name><argument_list pos:line="65" pos:column="68">&lt;<argument><name pos:line="65" pos:column="69">Integer</name></argument>, <argument><name pos:line="65" pos:column="78">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="66" pos:column="17">HashMap</name><argument_list pos:line="66" pos:column="24">&lt;<argument><name pos:line="66" pos:column="25">Integer</name></argument>, <argument><name pos:line="66" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="43">ssnWorkWeeks</name> <init pos:line="66" pos:column="56">= <expr><op:operator pos:line="66" pos:column="58">new</op:operator> <call><name><name pos:line="66" pos:column="62">HashMap</name><argument_list pos:line="66" pos:column="69">&lt;<argument><name pos:line="66" pos:column="70">Integer</name></argument>, <argument><name pos:line="66" pos:column="79">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="66" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="67" pos:column="17">HashMap</name><argument_list pos:line="67" pos:column="24">&lt;<argument><name pos:line="67" pos:column="25">Integer</name></argument>, <argument><name pos:line="67" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="67" pos:column="43">ssnInvestmentIncome</name> <init pos:line="67" pos:column="63">= <expr><op:operator pos:line="67" pos:column="65">new</op:operator> <call><name><name pos:line="67" pos:column="69">HashMap</name><argument_list pos:line="67" pos:column="76">&lt;<argument><name pos:line="67" pos:column="77">Integer</name></argument>, <argument><name pos:line="67" pos:column="86">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="69" pos:column="17">try <block pos:line="69" pos:column="21">{
			<expr_stmt><expr><name pos:line="70" pos:column="25">statement</name> <op:operator pos:line="70" pos:column="35">=</op:operator> <call><name><name pos:line="70" pos:column="37">Factory</name><op:operator pos:line="70" pos:column="44">.</op:operator><name pos:line="70" pos:column="45">getConnection</name></name><argument_list pos:line="70" pos:column="58">()</argument_list></call><op:operator pos:line="70" pos:column="60">.</op:operator><call><name pos:line="70" pos:column="61">createStatement</name><argument_list pos:line="70" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="71" pos:column="17">results</name> <op:operator pos:line="71" pos:column="25">=</op:operator> <call><name><name pos:line="71" pos:column="27">statement</name><op:operator pos:line="71" pos:column="36">.</op:operator><name pos:line="71" pos:column="37">executeQuery</name></name><argument_list pos:line="71" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="50">"SELECT SSN, WEEKWAGE, WORKWEEKS from job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	        <while pos:line="72" pos:column="17">while<condition pos:line="72" pos:column="22">(<expr><call><name><name pos:line="72" pos:column="23">results</name><op:operator pos:line="72" pos:column="30">.</op:operator><name pos:line="72" pos:column="31">next</name></name><argument_list pos:line="72" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="72" pos:column="38">{
	        	<if pos:line="73" pos:column="25">if<condition pos:line="73" pos:column="27">(<expr><call><name><name pos:line="73" pos:column="28">results</name><op:operator pos:line="73" pos:column="35">.</op:operator><name pos:line="73" pos:column="36">getString</name></name><argument_list pos:line="73" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="46">"SSN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="53">==</op:operator> <lit:literal type="null" pos:line="73" pos:column="56">null</lit:literal> <op:operator pos:line="73" pos:column="61">||</op:operator> <call><name><name pos:line="73" pos:column="64">results</name><op:operator pos:line="73" pos:column="71">.</op:operator><name pos:line="73" pos:column="72">getString</name></name><argument_list pos:line="73" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="82">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="94">==</op:operator> <lit:literal type="null" pos:line="73" pos:column="97">null</lit:literal> <op:operator pos:line="73" pos:column="102">||</op:operator> <call><name><name pos:line="73" pos:column="105">results</name><op:operator pos:line="73" pos:column="112">.</op:operator><name pos:line="73" pos:column="113">getString</name></name><argument_list pos:line="73" pos:column="122">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="123">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="136">==</op:operator> <lit:literal type="null" pos:line="73" pos:column="139">null</lit:literal></expr>)</condition><then><block pos:line="73" pos:column="144">{
	        		<continue pos:line="74" pos:column="33">continue;</continue>
	        	}</block></then></if>
	        	<decl_stmt><decl><type><name pos:line="76" pos:column="25">int</name></type> <name pos:line="76" pos:column="29">ssn</name> <init pos:line="76" pos:column="33">= <expr><call><name><name pos:line="76" pos:column="35">results</name><op:operator pos:line="76" pos:column="42">.</op:operator><name pos:line="76" pos:column="43">getInt</name></name><argument_list pos:line="76" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="50">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="77" pos:column="25">int</name></type> <name pos:line="77" pos:column="29">weekWage</name> <init pos:line="77" pos:column="38">= <expr><call><name><name pos:line="77" pos:column="40">results</name><op:operator pos:line="77" pos:column="47">.</op:operator><name pos:line="77" pos:column="48">getInt</name></name><argument_list pos:line="77" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="55">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="78" pos:column="25">int</name></type> <name pos:line="78" pos:column="29">workWeeks</name> <init pos:line="78" pos:column="39">= <expr><call><name><name pos:line="78" pos:column="41">results</name><op:operator pos:line="78" pos:column="48">.</op:operator><name pos:line="78" pos:column="49">getInt</name></name><argument_list pos:line="78" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="56">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	
	        	<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">ssnWeekWage</name><op:operator pos:line="80" pos:column="36">.</op:operator><name pos:line="80" pos:column="37">put</name></name><argument_list pos:line="80" pos:column="40">(<argument><expr><name pos:line="80" pos:column="41">ssn</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="46">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">ssnWorkWeeks</name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">put</name></name><argument_list pos:line="81" pos:column="41">(<argument><expr><name pos:line="81" pos:column="42">ssn</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="47">workWeeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
	        
	        <expr_stmt><expr><name pos:line="84" pos:column="17">results</name> <op:operator pos:line="84" pos:column="25">=</op:operator> <call><name><name pos:line="84" pos:column="27">statement</name><op:operator pos:line="84" pos:column="36">.</op:operator><name pos:line="84" pos:column="37">executeQuery</name></name><argument_list pos:line="84" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="50">"SELECT SSN, CAPITALGAINS, CAPITALLOSSES, STOCKDIVIDENDS from investment"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="85" pos:column="17">while<condition pos:line="85" pos:column="22">(<expr><call><name><name pos:line="85" pos:column="23">results</name><op:operator pos:line="85" pos:column="30">.</op:operator><name pos:line="85" pos:column="31">next</name></name><argument_list pos:line="85" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="85" pos:column="38">{
	        	<if pos:line="86" pos:column="25">if<condition pos:line="86" pos:column="27">(<expr><call><name><name pos:line="86" pos:column="28">results</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">getString</name></name><argument_list pos:line="86" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="46">"SSN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="53">==</op:operator> <lit:literal type="null" pos:line="86" pos:column="56">null</lit:literal> <op:operator pos:line="86" pos:column="61">||</op:operator> <call><name><name pos:line="86" pos:column="64">results</name><op:operator pos:line="86" pos:column="71">.</op:operator><name pos:line="86" pos:column="72">getString</name></name><argument_list pos:line="86" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="82">"CAPITALGAINS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="98">==</op:operator> <lit:literal type="null" pos:line="86" pos:column="101">null</lit:literal> <op:operator pos:line="86" pos:column="106">||</op:operator> <call><name><name pos:line="86" pos:column="109">results</name><op:operator pos:line="86" pos:column="116">.</op:operator><name pos:line="86" pos:column="117">getString</name></name><argument_list pos:line="86" pos:column="126">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="127">"CAPITALLOSSES"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="144">==</op:operator> <lit:literal type="null" pos:line="86" pos:column="147">null</lit:literal> <op:operator pos:line="86" pos:column="152">||</op:operator> <call><name><name pos:line="86" pos:column="155">results</name><op:operator pos:line="86" pos:column="162">.</op:operator><name pos:line="86" pos:column="163">getString</name></name><argument_list pos:line="86" pos:column="172">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="173">"STOCKDIVIDENDS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="191">==</op:operator> <lit:literal type="null" pos:line="86" pos:column="194">null</lit:literal></expr>)</condition><then><block pos:line="86" pos:column="199">{
	        		<continue pos:line="87" pos:column="33">continue;</continue>
	        	}</block></then></if>
	        	<decl_stmt><decl><type><name pos:line="89" pos:column="25">int</name></type> <name pos:line="89" pos:column="29">ssn2</name> <init pos:line="89" pos:column="34">= <expr><call><name><name pos:line="89" pos:column="36">results</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">getInt</name></name><argument_list pos:line="89" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="51">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="90" pos:column="25">int</name></type> <name pos:line="90" pos:column="29">capitalGains</name> <init pos:line="90" pos:column="42">= <expr><call><name><name pos:line="90" pos:column="44">results</name><op:operator pos:line="90" pos:column="51">.</op:operator><name pos:line="90" pos:column="52">getInt</name></name><argument_list pos:line="90" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="59">"CAPITALGAINS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="91" pos:column="25">int</name></type> <name pos:line="91" pos:column="29">capitalLosses</name> <init pos:line="91" pos:column="43">= <expr><call><name><name pos:line="91" pos:column="45">results</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">getInt</name></name><argument_list pos:line="91" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="60">"CAPITALLOSSES"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="92" pos:column="25">int</name></type> <name pos:line="92" pos:column="29">stockDividends</name> <init pos:line="92" pos:column="44">= <expr><call><name><name pos:line="92" pos:column="46">results</name><op:operator pos:line="92" pos:column="53">.</op:operator><name pos:line="92" pos:column="54">getInt</name></name><argument_list pos:line="92" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="61">"STOCKDIVIDENDS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="93" pos:column="25">int</name></type> <name pos:line="93" pos:column="29">investmentIncome</name> <init pos:line="93" pos:column="46">= <expr><name pos:line="93" pos:column="48">capitalGains</name> <op:operator pos:line="93" pos:column="61">+</op:operator> <name pos:line="93" pos:column="63">stockDividends</name> <op:operator pos:line="93" pos:column="78">+</op:operator> <name pos:line="93" pos:column="80">capitalLosses</name></expr></init></decl>;</decl_stmt>
	        	
	        	<expr_stmt><expr><call><name><name pos:line="95" pos:column="25">ssnInvestmentIncome</name><op:operator pos:line="95" pos:column="44">.</op:operator><name pos:line="95" pos:column="45">put</name></name><argument_list pos:line="95" pos:column="48">(<argument><expr><name pos:line="95" pos:column="49">ssn2</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="55">investmentIncome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
	        
	        <comment type="line" pos:line="98" pos:column="17">// Calculate Cofficients</comment>
	        <comment type="line" pos:line="99" pos:column="17">// Build an array list of Work Weeks and an array list of Income;</comment>
	        <decl_stmt><decl><type><name><name pos:line="100" pos:column="17">ArrayList</name><argument_list pos:line="100" pos:column="26">&lt;<argument><name pos:line="100" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="100" pos:column="36">workWeeksList</name> <init pos:line="100" pos:column="50">= <expr><op:operator pos:line="100" pos:column="52">new</op:operator> <call><name><name pos:line="100" pos:column="56">ArrayList</name><argument_list pos:line="100" pos:column="65">&lt;<argument><name pos:line="100" pos:column="66">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="101" pos:column="17">ArrayList</name><argument_list pos:line="101" pos:column="26">&lt;<argument><name pos:line="101" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="36">incomeList</name> <init pos:line="101" pos:column="47">= <expr><op:operator pos:line="101" pos:column="49">new</op:operator> <call><name><name pos:line="101" pos:column="53">ArrayList</name><argument_list pos:line="101" pos:column="62">&lt;<argument><name pos:line="101" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="102" pos:column="17">ArrayList</name><argument_list pos:line="102" pos:column="26">&lt;<argument><name pos:line="102" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="36">weeklyWageList</name> <init pos:line="102" pos:column="51">= <expr><op:operator pos:line="102" pos:column="53">new</op:operator> <call><name><name pos:line="102" pos:column="57">ArrayList</name><argument_list pos:line="102" pos:column="66">&lt;<argument><name pos:line="102" pos:column="67">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="103" pos:column="17">ArrayList</name><argument_list pos:line="103" pos:column="26">&lt;<argument><name pos:line="103" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="36">investmentList</name> <init pos:line="103" pos:column="51">= <expr><op:operator pos:line="103" pos:column="53">new</op:operator> <call><name><name pos:line="103" pos:column="57">ArrayList</name><argument_list pos:line="103" pos:column="66">&lt;<argument><name pos:line="103" pos:column="67">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="103" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        <decl_stmt><decl><type><name><name pos:line="104" pos:column="17">ArrayList</name><argument_list pos:line="104" pos:column="26">&lt;<argument><name pos:line="104" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="104" pos:column="36">incomeListForInvestment</name> <init pos:line="104" pos:column="60">= <expr><op:operator pos:line="104" pos:column="62">new</op:operator> <call><name><name pos:line="104" pos:column="66">ArrayList</name><argument_list pos:line="104" pos:column="75">&lt;<argument><name pos:line="104" pos:column="76">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="104" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        
	        <for pos:line="106" pos:column="17">for (<init><decl><type><name><name pos:line="106" pos:column="22">Iterator</name><argument_list pos:line="106" pos:column="30">&lt;<argument><name pos:line="106" pos:column="31">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="106" pos:column="40">i</name> <init pos:line="106" pos:column="42">= <expr><call><name><name pos:line="106" pos:column="44">ssnWorkWeeks</name><op:operator pos:line="106" pos:column="56">.</op:operator><name pos:line="106" pos:column="57">keySet</name></name><argument_list pos:line="106" pos:column="63">()</argument_list></call><op:operator pos:line="106" pos:column="65">.</op:operator><call><name pos:line="106" pos:column="66">iterator</name><argument_list pos:line="106" pos:column="74">()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name pos:line="106" pos:column="78">i</name><op:operator pos:line="106" pos:column="79">.</op:operator><name pos:line="106" pos:column="80">hasNext</name></name><argument_list pos:line="106" pos:column="87">()</argument_list></call></expr>;</condition><incr/>)<block pos:line="106" pos:column="91">{
	        	<decl_stmt><decl><type><name pos:line="107" pos:column="25">int</name></type> <name pos:line="107" pos:column="29">SSNkey</name> <init pos:line="107" pos:column="36">= <expr><op:operator pos:line="107" pos:column="38">(</op:operator><name pos:line="107" pos:column="39">Integer</name><op:operator pos:line="107" pos:column="46">)</op:operator> <call><name><name pos:line="107" pos:column="48">i</name><op:operator pos:line="107" pos:column="49">.</op:operator><name pos:line="107" pos:column="50">next</name></name><argument_list pos:line="107" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<if pos:line="108" pos:column="25">if<condition pos:line="108" pos:column="27">(<expr><call><name><name pos:line="108" pos:column="28">ssnWorkWeeks</name><op:operator pos:line="108" pos:column="40">.</op:operator><name pos:line="108" pos:column="41">get</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">SSNkey</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="53">!=</op:operator> <lit:literal type="null" pos:line="108" pos:column="56">null</lit:literal> <op:operator pos:line="108" pos:column="61">&amp;&amp;</op:operator> <call><name><name pos:line="108" pos:column="64">ssnWeekWage</name><op:operator pos:line="108" pos:column="75">.</op:operator><name pos:line="108" pos:column="76">get</name></name><argument_list pos:line="108" pos:column="79">(<argument><expr><name pos:line="108" pos:column="80">SSNkey</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="88">!=</op:operator> <lit:literal type="null" pos:line="108" pos:column="91">null</lit:literal></expr>)</condition><then><block pos:line="108" pos:column="96">{
		        	<decl_stmt><decl><type><name pos:line="109" pos:column="33">int</name></type> <name pos:line="109" pos:column="37">workWeeks</name> <init pos:line="109" pos:column="47">= <expr><op:operator pos:line="109" pos:column="49">(</op:operator><name pos:line="109" pos:column="50">Integer</name><op:operator pos:line="109" pos:column="57">)</op:operator> <call><name><name pos:line="109" pos:column="59">ssnWorkWeeks</name><op:operator pos:line="109" pos:column="71">.</op:operator><name pos:line="109" pos:column="72">get</name></name><argument_list pos:line="109" pos:column="75">(<argument><expr><name pos:line="109" pos:column="76">SSNkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        	<decl_stmt><decl><type><name pos:line="110" pos:column="33">int</name></type> <name pos:line="110" pos:column="37">weekWage</name> <init pos:line="110" pos:column="46">= <expr><op:operator pos:line="110" pos:column="48">(</op:operator><name pos:line="110" pos:column="49">Integer</name><op:operator pos:line="110" pos:column="56">)</op:operator> <call><name><name pos:line="110" pos:column="58">ssnWeekWage</name><op:operator pos:line="110" pos:column="69">.</op:operator><name pos:line="110" pos:column="70">get</name></name><argument_list pos:line="110" pos:column="73">(<argument><expr><name pos:line="110" pos:column="74">SSNkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		        	<if pos:line="111" pos:column="33">if<condition pos:line="111" pos:column="35">(<expr><name pos:line="111" pos:column="36">workWeeks</name> <op:operator pos:line="111" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="111" pos:column="48">0</lit:literal> <op:operator pos:line="111" pos:column="50">&amp;&amp;</op:operator> <name pos:line="111" pos:column="53">weekWage</name> <op:operator pos:line="111" pos:column="62">&gt;</op:operator> <lit:literal type="number" pos:line="111" pos:column="64">0</lit:literal></expr>)</condition><then><block pos:line="111" pos:column="66">{
		        		<expr_stmt><expr><call><name><name pos:line="112" pos:column="41">workWeeksList</name><op:operator pos:line="112" pos:column="54">.</op:operator><name pos:line="112" pos:column="55">add</name></name><argument_list pos:line="112" pos:column="58">(<argument><expr><name pos:line="112" pos:column="59">workWeeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        	<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">incomeList</name><op:operator pos:line="113" pos:column="51">.</op:operator><name pos:line="113" pos:column="52">add</name></name><argument_list pos:line="113" pos:column="55">(<argument><expr><name pos:line="113" pos:column="56">workWeeks</name> <op:operator pos:line="113" pos:column="66">*</op:operator> <name pos:line="113" pos:column="68">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        	<expr_stmt><expr><call><name><name pos:line="114" pos:column="41">weeklyWageList</name><op:operator pos:line="114" pos:column="55">.</op:operator><name pos:line="114" pos:column="56">add</name></name><argument_list pos:line="114" pos:column="59">(<argument><expr><name pos:line="114" pos:column="60">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        	<if pos:line="115" pos:column="41">if<condition pos:line="115" pos:column="43">(<expr><call><name><name pos:line="115" pos:column="44">ssnInvestmentIncome</name><op:operator pos:line="115" pos:column="63">.</op:operator><name pos:line="115" pos:column="64">get</name></name><argument_list pos:line="115" pos:column="67">(<argument><expr><name pos:line="115" pos:column="68">SSNkey</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="76">!=</op:operator> <lit:literal type="null" pos:line="115" pos:column="79">null</lit:literal> <op:operator pos:line="115" pos:column="84">&amp;&amp;</op:operator> <call><name><name pos:line="115" pos:column="87">ssnInvestmentIncome</name><op:operator pos:line="115" pos:column="106">.</op:operator><name pos:line="115" pos:column="107">get</name></name><argument_list pos:line="115" pos:column="110">(<argument><expr><name pos:line="115" pos:column="111">SSNkey</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="119">!=</op:operator> <lit:literal type="null" pos:line="115" pos:column="122">null</lit:literal></expr>)</condition><then><block pos:line="115" pos:column="127">{
			        		<decl_stmt><decl><type><name pos:line="116" pos:column="49">int</name></type> <name pos:line="116" pos:column="53">investmentIncome</name> <init pos:line="116" pos:column="70">= <expr><op:operator pos:line="116" pos:column="72">(</op:operator><name pos:line="116" pos:column="73">Integer</name><op:operator pos:line="116" pos:column="80">)</op:operator> <call><name><name pos:line="116" pos:column="82">ssnInvestmentIncome</name><op:operator pos:line="116" pos:column="101">.</op:operator><name pos:line="116" pos:column="102">get</name></name><argument_list pos:line="116" pos:column="105">(<argument><expr><name pos:line="116" pos:column="106">SSNkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			        		<expr_stmt><expr><call><name><name pos:line="117" pos:column="49">investmentList</name><op:operator pos:line="117" pos:column="63">.</op:operator><name pos:line="117" pos:column="64">add</name></name><argument_list pos:line="117" pos:column="67">(<argument><expr><name pos:line="117" pos:column="68">investmentIncome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        		<expr_stmt><expr><call><name><name pos:line="118" pos:column="49">incomeListForInvestment</name><op:operator pos:line="118" pos:column="72">.</op:operator><name pos:line="118" pos:column="73">add</name></name><argument_list pos:line="118" pos:column="76">(<argument><expr><name pos:line="118" pos:column="77">workWeeks</name> <op:operator pos:line="118" pos:column="87">*</op:operator> <name pos:line="118" pos:column="89">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			        	}</block></then></if>
		        	}</block></then></if>
	        	}</block></then></if>
	        }</block></for>
	        
	        <comment type="line" pos:line="124" pos:column="17">// Set the member variable for the cofficients for given Work Weeks find Income</comment>
	        <expr_stmt><expr><name pos:line="125" pos:column="17">workWeeksFindIncome</name> <op:operator pos:line="125" pos:column="37">=</op:operator> <op:operator pos:line="125" pos:column="39">new</op:operator> <call><name pos:line="125" pos:column="43">CalculateRegression</name><argument_list pos:line="125" pos:column="62">()</argument_list></call><op:operator pos:line="125" pos:column="64">.</op:operator><call><name pos:line="125" pos:column="65">calculateRegressionNumbers</name><argument_list pos:line="125" pos:column="91">(<argument><expr><name pos:line="125" pos:column="92">workWeeksList</name></expr></argument>,<argument><expr><name pos:line="125" pos:column="106">incomeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        
	     <comment type="line" pos:line="127" pos:column="14">// Set the member variable for the cofficients for given Weekly Wage find Income</comment>
	        <expr_stmt><expr><name pos:line="128" pos:column="17">weeklyWageFindIncome</name> <op:operator pos:line="128" pos:column="38">=</op:operator> <op:operator pos:line="128" pos:column="40">new</op:operator> <call><name pos:line="128" pos:column="44">CalculateRegression</name><argument_list pos:line="128" pos:column="63">()</argument_list></call><op:operator pos:line="128" pos:column="65">.</op:operator><call><name pos:line="128" pos:column="66">calculateRegressionNumbers</name><argument_list pos:line="128" pos:column="92">(<argument><expr><name pos:line="128" pos:column="93">weeklyWageList</name></expr></argument>,<argument><expr><name pos:line="128" pos:column="108">incomeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        
	     <comment type="line" pos:line="130" pos:column="14">// Set the member variable for the cofficients for given InvestmentIncome find Income  </comment>
	        <expr_stmt><expr><name pos:line="131" pos:column="17">investmentIncomeFindIncome</name> <op:operator pos:line="131" pos:column="44">=</op:operator> <op:operator pos:line="131" pos:column="46">new</op:operator> <call><name pos:line="131" pos:column="50">CalculateRegression</name><argument_list pos:line="131" pos:column="69">()</argument_list></call><op:operator pos:line="131" pos:column="71">.</op:operator><call><name pos:line="131" pos:column="72">calculateRegressionNumbers</name><argument_list pos:line="131" pos:column="98">(<argument><expr><name pos:line="131" pos:column="99">investmentList</name></expr></argument>,<argument><expr><name pos:line="131" pos:column="114">incomeListForInvestment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        
		}</block> <catch pos:line="133" pos:column="19">catch <parameter_list pos:line="133" pos:column="25">(<param><decl><type><name pos:line="133" pos:column="26">SQLException</name></type> <name pos:line="133" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="133" pos:column="42">{
	        <while pos:line="134" pos:column="17">while <condition pos:line="134" pos:column="23">(<expr><name pos:line="134" pos:column="24">e</name> <op:operator pos:line="134" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="134" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="135" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="136" pos:column="21">System</name><op:operator pos:line="136" pos:column="27">.</op:operator><name pos:line="136" pos:column="28">err</name><op:operator pos:line="136" pos:column="31">.</op:operator><name pos:line="136" pos:column="32">println</name></name><argument_list pos:line="136" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="137" pos:column="21">System</name><op:operator pos:line="137" pos:column="27">.</op:operator><name pos:line="137" pos:column="28">err</name><op:operator pos:line="137" pos:column="31">.</op:operator><name pos:line="137" pos:column="32">println</name></name><argument_list pos:line="137" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="137" pos:column="57">+</op:operator> <call><name><name pos:line="137" pos:column="59">e</name><op:operator pos:line="137" pos:column="60">.</op:operator><name pos:line="137" pos:column="61">getSQLState</name></name><argument_list pos:line="137" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="138" pos:column="21">System</name><op:operator pos:line="138" pos:column="27">.</op:operator><name pos:line="138" pos:column="28">err</name><op:operator pos:line="138" pos:column="31">.</op:operator><name pos:line="138" pos:column="32">println</name></name><argument_list pos:line="138" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="138" pos:column="57">+</op:operator> <call><name><name pos:line="138" pos:column="59">e</name><op:operator pos:line="138" pos:column="60">.</op:operator><name pos:line="138" pos:column="61">getErrorCode</name></name><argument_list pos:line="138" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="139" pos:column="21">System</name><op:operator pos:line="139" pos:column="27">.</op:operator><name pos:line="139" pos:column="28">err</name><op:operator pos:line="139" pos:column="31">.</op:operator><name pos:line="139" pos:column="32">println</name></name><argument_list pos:line="139" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="139" pos:column="57">+</op:operator> <call><name><name pos:line="139" pos:column="59">e</name><op:operator pos:line="139" pos:column="60">.</op:operator><name pos:line="139" pos:column="61">getMessage</name></name><argument_list pos:line="139" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="140" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="141" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="142" pos:column="21">e</name> <op:operator pos:line="142" pos:column="23">=</op:operator> <call><name><name pos:line="142" pos:column="25">e</name><op:operator pos:line="142" pos:column="26">.</op:operator><name pos:line="142" pos:column="27">getNextException</name></name><argument_list pos:line="142" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>	
		
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="148" pos:column="9">/**
	 * Gathers information from the database based on a SSN and places that data in a data transfer
	 * 	object EstimateIncomeDTO to bu used by the estimate income requirement / function.
	 * &lt;p&gt;
	 * @param 				A int SSN number
	 * @return				A EstimateIncomeDTO that contains values to be used in the estimate 
	 * 						 income requirement.
	 */</comment>	
	<function><type><annotation pos:line="156" pos:column="9">@<name pos:line="156" pos:column="10">TaDaMethod</name><argument_list pos:line="156" pos:column="20">(<argument><expr><name pos:line="156" pos:column="21">variablesToTrack</name> <op:operator pos:line="156" pos:column="38">=</op:operator> <block pos:line="156" pos:column="40">{<expr><lit:literal type="string" pos:line="156" pos:column="41">"name"</lit:literal></expr><op:operator pos:line="156" pos:column="47">,</op:operator> <argument><expr><lit:literal type="string" pos:line="156" pos:column="49">"race"</lit:literal></expr></argument><op:operator pos:line="156" pos:column="55">,</op:operator> <argument><expr><lit:literal type="string" pos:line="156" pos:column="57">"ssn2"</lit:literal></expr></argument><op:operator pos:line="156" pos:column="63">,</op:operator> <argument><expr><lit:literal type="string" pos:line="156" pos:column="65">"ssn3"</lit:literal></expr></argument><op:operator pos:line="156" pos:column="71">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="157" pos:column="25">"investmentIncome"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="43">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="45">"investmentIncome"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="63">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="65">"investmentIncome"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="83">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="158" pos:column="25">"education"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="36">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="38">"ssn4"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="44">,</op:operator>  <argument><expr><lit:literal type="string" pos:line="158" pos:column="47">"occupationCode"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="63">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="159" pos:column="25">"industryCode"</lit:literal></expr></argument><op:operator pos:line="159" pos:column="39">,</op:operator> <argument><expr><lit:literal type="string" pos:line="159" pos:column="41">"weeklyWage"</lit:literal></expr></argument><op:operator pos:line="159" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="159" pos:column="55">"workWeeks"</lit:literal></expr></argument>}</block></expr></argument>, 
			<argument><expr><name pos:line="160" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="160" pos:column="56">=</op:operator> <block pos:line="160" pos:column="58">{<expr><lit:literal type="string" pos:line="160" pos:column="59">"userrecord.name"</lit:literal></expr><op:operator pos:line="160" pos:column="76">,</op:operator> <argument><expr><lit:literal type="string" pos:line="160" pos:column="78">"userrecord.race"</lit:literal></expr></argument><op:operator pos:line="160" pos:column="95">,</op:operator> <argument><expr><lit:literal type="string" pos:line="160" pos:column="97">"education.ssn"</lit:literal></expr></argument><op:operator pos:line="160" pos:column="112">,</op:operator> <argument><expr><lit:literal type="string" pos:line="160" pos:column="114">"investment.ssn"</lit:literal></expr></argument><op:operator pos:line="160" pos:column="130">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="161" pos:column="25">"investment.CAPITALGAINS"</lit:literal></expr></argument><op:operator pos:line="161" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="161" pos:column="52">"investment.CAPITALLOSSES"</lit:literal></expr></argument><op:operator pos:line="161" pos:column="78">,</op:operator> <argument><expr><lit:literal type="string" pos:line="161" pos:column="80">"investment.STOCKDIVIDENDS"</lit:literal></expr></argument><op:operator pos:line="161" pos:column="107">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="162" pos:column="25">"education.education"</lit:literal></expr></argument><op:operator pos:line="162" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="162" pos:column="48">"job.ssn"</lit:literal></expr></argument><op:operator pos:line="162" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="162" pos:column="59">"job.INDUSTRYCODE"</lit:literal></expr></argument><op:operator pos:line="162" pos:column="77">,</op:operator> 
			<argument><expr><lit:literal type="string" pos:line="163" pos:column="25">"job.OCCUPATIONCODE"</lit:literal></expr></argument><op:operator pos:line="163" pos:column="45">,</op:operator> <argument><expr><lit:literal type="string" pos:line="163" pos:column="47">"job.WEEKWAGE"</lit:literal></expr></argument><op:operator pos:line="163" pos:column="61">,</op:operator> <argument><expr><lit:literal type="string" pos:line="163" pos:column="63">"job.workweeks"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="164" pos:column="9">public</specifier> <name pos:line="164" pos:column="16">EstimateIncomeDTOInterface</name></type> <name pos:line="164" pos:column="43">getValues</name><parameter_list pos:line="164" pos:column="52">(<param><decl><type><name pos:line="164" pos:column="53">int</name></type> <name pos:line="164" pos:column="57">ssn</name></decl></param>)</parameter_list><block pos:line="164" pos:column="61">{
		
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">ResultSet</name></type> <name pos:line="166" pos:column="27">results</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">Statement</name></type> <name pos:line="167" pos:column="27">statement</name></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">String</name></type> <name pos:line="169" pos:column="24">ssnString</name> <init pos:line="169" pos:column="34">= <expr><call><name><name pos:line="169" pos:column="36">Integer</name><op:operator pos:line="169" pos:column="43">.</op:operator><name pos:line="169" pos:column="44">toString</name></name><argument_list pos:line="169" pos:column="52">(<argument><expr><name pos:line="169" pos:column="53">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="171" pos:column="17">String</name></type> <name pos:line="171" pos:column="24">name</name> <init pos:line="171" pos:column="29">= <expr><lit:literal type="null" pos:line="171" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">String</name></type> <name pos:line="172" pos:column="24">race</name> <init pos:line="172" pos:column="29">= <expr><lit:literal type="null" pos:line="172" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">String</name></type> <name pos:line="173" pos:column="24">education</name> <init pos:line="173" pos:column="34">= <expr><lit:literal type="null" pos:line="173" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="174" pos:column="17">int</name></type> <name pos:line="174" pos:column="21">occupationCode</name> <init pos:line="174" pos:column="36">= <expr><lit:literal type="number" pos:line="174" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="175" pos:column="17">int</name></type> <name pos:line="175" pos:column="21">industryCode</name> <init pos:line="175" pos:column="34">= <expr><lit:literal type="number" pos:line="175" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="176" pos:column="17">int</name></type> <name pos:line="176" pos:column="21">weeklyWage</name> <init pos:line="176" pos:column="32">= <expr><lit:literal type="number" pos:line="176" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">int</name></type> <name pos:line="177" pos:column="21">workWeeks</name> <init pos:line="177" pos:column="31">= <expr><lit:literal type="number" pos:line="177" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="178" pos:column="17">int</name></type> <name pos:line="178" pos:column="21">investmentIncome</name> <init pos:line="178" pos:column="38">= <expr><lit:literal type="number" pos:line="178" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="180" pos:column="17">try<block pos:line="180" pos:column="20">{
			<expr_stmt><expr><name pos:line="181" pos:column="25">statement</name> <op:operator pos:line="181" pos:column="35">=</op:operator> <call><name><name pos:line="181" pos:column="37">Factory</name><op:operator pos:line="181" pos:column="44">.</op:operator><name pos:line="181" pos:column="45">getConnection</name></name><argument_list pos:line="181" pos:column="58">()</argument_list></call><op:operator pos:line="181" pos:column="60">.</op:operator><call><name pos:line="181" pos:column="61">createStatement</name><argument_list pos:line="181" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><name pos:line="182" pos:column="17">results</name> <op:operator pos:line="182" pos:column="25">=</op:operator> <call><name><name pos:line="182" pos:column="27">statement</name><op:operator pos:line="182" pos:column="36">.</op:operator><name pos:line="182" pos:column="37">executeQuery</name></name><argument_list pos:line="182" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="50">"SELECT SSN, NAME, RACE from userrecord WHERE SSN = "</lit:literal> <op:operator pos:line="182" pos:column="104">+</op:operator> <name pos:line="182" pos:column="106">ssnString</name> <op:operator pos:line="182" pos:column="116">+</op:operator><lit:literal type="string" pos:line="182" pos:column="117">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="183" pos:column="17">while<condition pos:line="183" pos:column="22">(<expr><call><name><name pos:line="183" pos:column="23">results</name><op:operator pos:line="183" pos:column="30">.</op:operator><name pos:line="183" pos:column="31">next</name></name><argument_list pos:line="183" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="183" pos:column="38">{
	    		<if pos:line="184" pos:column="25">if<condition pos:line="184" pos:column="27">(<expr><call><name><name pos:line="184" pos:column="28">results</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">getInt</name></name><argument_list pos:line="184" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="43">"SSN"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="184" pos:column="53">0</lit:literal></expr>)</condition><then><block pos:line="184" pos:column="55">{
	    			<continue pos:line="185" pos:column="33">continue;</continue>
	    		}</block></then> <else pos:line="186" pos:column="27">else <block pos:line="186" pos:column="32">{
	    			<expr_stmt><expr><name pos:line="187" pos:column="33">name</name> <op:operator pos:line="187" pos:column="38">=</op:operator> <call><name><name pos:line="187" pos:column="40">results</name><op:operator pos:line="187" pos:column="47">.</op:operator><name pos:line="187" pos:column="48">getString</name></name><argument_list pos:line="187" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="58">"NAME"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    			<expr_stmt><expr><name pos:line="188" pos:column="33">race</name> <op:operator pos:line="188" pos:column="38">=</op:operator> <call><name><name pos:line="188" pos:column="40">results</name><op:operator pos:line="188" pos:column="47">.</op:operator><name pos:line="188" pos:column="48">getString</name></name><argument_list pos:line="188" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="188" pos:column="58">"RACE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	    	}</block></while>
	    	
	    	<expr_stmt><expr><name pos:line="192" pos:column="17">results</name> <op:operator pos:line="192" pos:column="25">=</op:operator> <call><name><name pos:line="192" pos:column="27">statement</name><op:operator pos:line="192" pos:column="36">.</op:operator><name pos:line="192" pos:column="37">executeQuery</name></name><argument_list pos:line="192" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="50">"SELECT SSN, EDUCATION from education WHERE SSN = "</lit:literal> <op:operator pos:line="192" pos:column="102">+</op:operator> <name pos:line="192" pos:column="104">ssnString</name> <op:operator pos:line="192" pos:column="114">+</op:operator><lit:literal type="string" pos:line="192" pos:column="115">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="193" pos:column="17">while<condition pos:line="193" pos:column="22">(<expr><call><name><name pos:line="193" pos:column="23">results</name><op:operator pos:line="193" pos:column="30">.</op:operator><name pos:line="193" pos:column="31">next</name></name><argument_list pos:line="193" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="193" pos:column="38">{
	    		<decl_stmt><decl><type><name pos:line="194" pos:column="25">int</name></type> <name pos:line="194" pos:column="29">ssn2</name> <init pos:line="194" pos:column="34">= <expr><call><name><name pos:line="194" pos:column="36">results</name><op:operator pos:line="194" pos:column="43">.</op:operator><name pos:line="194" pos:column="44">getInt</name></name><argument_list pos:line="194" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="51">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    		<if pos:line="195" pos:column="25">if<condition pos:line="195" pos:column="27">(<expr><name pos:line="195" pos:column="28">ssn2</name> <op:operator pos:line="195" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="195" pos:column="36">0</lit:literal></expr>)</condition><then><block pos:line="195" pos:column="38">{
	    			<continue pos:line="196" pos:column="33">continue;</continue>
	    		}</block></then> <else pos:line="197" pos:column="27">else <block pos:line="197" pos:column="32">{
	    			<expr_stmt><expr><name pos:line="198" pos:column="33">education</name> <op:operator pos:line="198" pos:column="43">=</op:operator> <call><name><name pos:line="198" pos:column="45">results</name><op:operator pos:line="198" pos:column="52">.</op:operator><name pos:line="198" pos:column="53">getString</name></name><argument_list pos:line="198" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="63">"EDUCATION"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	    	}</block></while>
	    	
	    	<expr_stmt><expr><name pos:line="202" pos:column="17">results</name> <op:operator pos:line="202" pos:column="25">=</op:operator> <call><name><name pos:line="202" pos:column="27">statement</name><op:operator pos:line="202" pos:column="36">.</op:operator><name pos:line="202" pos:column="37">executeQuery</name></name><argument_list pos:line="202" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="50">"SELECT SSN, CAPITALGAINS, CAPITALLOSSES, STOCKDIVIDENDS from investment WHERE SSN = "</lit:literal> <op:operator pos:line="202" pos:column="137">+</op:operator> <name pos:line="202" pos:column="139">ssnString</name> <op:operator pos:line="202" pos:column="149">+</op:operator><lit:literal type="string" pos:line="202" pos:column="150">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="203" pos:column="17">while<condition pos:line="203" pos:column="22">(<expr><call><name><name pos:line="203" pos:column="23">results</name><op:operator pos:line="203" pos:column="30">.</op:operator><name pos:line="203" pos:column="31">next</name></name><argument_list pos:line="203" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="203" pos:column="38">{
	    		<decl_stmt><decl><type><name pos:line="204" pos:column="25">int</name></type> <name pos:line="204" pos:column="29">ssn3</name> <init pos:line="204" pos:column="34">= <expr><call><name><name pos:line="204" pos:column="36">results</name><op:operator pos:line="204" pos:column="43">.</op:operator><name pos:line="204" pos:column="44">getInt</name></name><argument_list pos:line="204" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="51">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    		<if pos:line="205" pos:column="25">if<condition pos:line="205" pos:column="27">(<expr><name pos:line="205" pos:column="28">ssn3</name> <op:operator pos:line="205" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="205" pos:column="36">0</lit:literal></expr>)</condition><then><block pos:line="205" pos:column="38">{
	    			<continue pos:line="206" pos:column="33">continue;</continue>
	    		}</block></then> <else pos:line="207" pos:column="27">else <block pos:line="207" pos:column="32">{
	    			<expr_stmt><expr><name pos:line="208" pos:column="33">investmentIncome</name> <op:operator pos:line="208" pos:column="50">=</op:operator> <call><name><name pos:line="208" pos:column="52">results</name><op:operator pos:line="208" pos:column="59">.</op:operator><name pos:line="208" pos:column="60">getInt</name></name><argument_list pos:line="208" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="67">"CAPITALGAINS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="83">-</op:operator> <call><name><name pos:line="208" pos:column="85">results</name><op:operator pos:line="208" pos:column="92">.</op:operator><name pos:line="208" pos:column="93">getInt</name></name><argument_list pos:line="208" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="100">"CAPITALLOSSES"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="117">+</op:operator> <call><name><name pos:line="208" pos:column="119">results</name><op:operator pos:line="208" pos:column="126">.</op:operator><name pos:line="208" pos:column="127">getInt</name></name><argument_list pos:line="208" pos:column="133">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="134">"STOCKDIVIDENDS"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	    	}</block></while>
	    	
	    	<expr_stmt><expr><name pos:line="212" pos:column="17">results</name> <op:operator pos:line="212" pos:column="25">=</op:operator> <call><name><name pos:line="212" pos:column="27">statement</name><op:operator pos:line="212" pos:column="36">.</op:operator><name pos:line="212" pos:column="37">executeQuery</name></name><argument_list pos:line="212" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="50">"SELECT SSN, INDUSTRYCODE, OCCUPATIONCODE, WEEKWAGE, WORKWEEKS from job WHERE SSN = "</lit:literal> <op:operator pos:line="212" pos:column="136">+</op:operator> <name pos:line="212" pos:column="138">ssnString</name> <op:operator pos:line="212" pos:column="148">+</op:operator><lit:literal type="string" pos:line="212" pos:column="149">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<while pos:line="213" pos:column="17">while<condition pos:line="213" pos:column="22">(<expr><call><name><name pos:line="213" pos:column="23">results</name><op:operator pos:line="213" pos:column="30">.</op:operator><name pos:line="213" pos:column="31">next</name></name><argument_list pos:line="213" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="213" pos:column="38">{
	    		<decl_stmt><decl><type><name pos:line="214" pos:column="25">int</name></type> <name pos:line="214" pos:column="29">ssn4</name> <init pos:line="214" pos:column="34">= <expr><call><name><name pos:line="214" pos:column="36">results</name><op:operator pos:line="214" pos:column="43">.</op:operator><name pos:line="214" pos:column="44">getInt</name></name><argument_list pos:line="214" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="51">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    		<if pos:line="215" pos:column="25">if<condition pos:line="215" pos:column="27">(<expr><name pos:line="215" pos:column="28">ssn4</name> <op:operator pos:line="215" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="215" pos:column="36">0</lit:literal></expr>)</condition><then><block pos:line="215" pos:column="38">{
	    			<continue pos:line="216" pos:column="33">continue;</continue>
	    		}</block></then> <else pos:line="217" pos:column="27">else <block pos:line="217" pos:column="32">{
	    		<expr_stmt><expr><name pos:line="218" pos:column="25">occupationCode</name> <op:operator pos:line="218" pos:column="40">=</op:operator> <call><name><name pos:line="218" pos:column="42">results</name><op:operator pos:line="218" pos:column="49">.</op:operator><name pos:line="218" pos:column="50">getInt</name></name><argument_list pos:line="218" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="57">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="219" pos:column="25">industryCode</name> <op:operator pos:line="219" pos:column="38">=</op:operator> <call><name><name pos:line="219" pos:column="40">results</name><op:operator pos:line="219" pos:column="47">.</op:operator><name pos:line="219" pos:column="48">getInt</name></name><argument_list pos:line="219" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="55">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="220" pos:column="25">weeklyWage</name> <op:operator pos:line="220" pos:column="36">=</op:operator> <call><name><name pos:line="220" pos:column="38">results</name><op:operator pos:line="220" pos:column="45">.</op:operator><name pos:line="220" pos:column="46">getInt</name></name><argument_list pos:line="220" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="53">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		<expr_stmt><expr><name pos:line="221" pos:column="25">workWeeks</name> <op:operator pos:line="221" pos:column="35">=</op:operator> <call><name><name pos:line="221" pos:column="37">results</name><op:operator pos:line="221" pos:column="44">.</op:operator><name pos:line="221" pos:column="45">getInt</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="52">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    		}</block></else></if>
	    	}</block></while>

		}</block> <catch pos:line="225" pos:column="19">catch<parameter_list pos:line="225" pos:column="24">(<param><decl><type><name pos:line="225" pos:column="25">SQLException</name></type> <name pos:line="225" pos:column="38">e</name></decl></param>)</parameter_list> <block pos:line="225" pos:column="41">{
			<while pos:line="226" pos:column="25">while <condition pos:line="226" pos:column="31">(<expr><name pos:line="226" pos:column="32">e</name> <op:operator pos:line="226" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="226" pos:column="37">null</lit:literal></expr>)</condition> <block pos:line="226" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="227" pos:column="33">System</name><op:operator pos:line="227" pos:column="39">.</op:operator><name pos:line="227" pos:column="40">err</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">println</name></name><argument_list pos:line="227" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="52">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="228" pos:column="33">System</name><op:operator pos:line="228" pos:column="39">.</op:operator><name pos:line="228" pos:column="40">err</name><op:operator pos:line="228" pos:column="43">.</op:operator><name pos:line="228" pos:column="44">println</name></name><argument_list pos:line="228" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="52">"  SQL State:  "</lit:literal> <op:operator pos:line="228" pos:column="69">+</op:operator> <call><name><name pos:line="228" pos:column="71">e</name><op:operator pos:line="228" pos:column="72">.</op:operator><name pos:line="228" pos:column="73">getSQLState</name></name><argument_list pos:line="228" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">System</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">err</name><op:operator pos:line="229" pos:column="43">.</op:operator><name pos:line="229" pos:column="44">println</name></name><argument_list pos:line="229" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="52">"  Error Code: "</lit:literal> <op:operator pos:line="229" pos:column="69">+</op:operator> <call><name><name pos:line="229" pos:column="71">e</name><op:operator pos:line="229" pos:column="72">.</op:operator><name pos:line="229" pos:column="73">getErrorCode</name></name><argument_list pos:line="229" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="230" pos:column="33">System</name><op:operator pos:line="230" pos:column="39">.</op:operator><name pos:line="230" pos:column="40">err</name><op:operator pos:line="230" pos:column="43">.</op:operator><name pos:line="230" pos:column="44">println</name></name><argument_list pos:line="230" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="52">"  Message:    "</lit:literal> <op:operator pos:line="230" pos:column="69">+</op:operator> <call><name><name pos:line="230" pos:column="71">e</name><op:operator pos:line="230" pos:column="72">.</op:operator><name pos:line="230" pos:column="73">getMessage</name></name><argument_list pos:line="230" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="231" pos:column="33">// for stack traces, refer to derby.log or uncomment this:</comment>
				<comment type="line" pos:line="232" pos:column="33">// e.printStackTrace(System.err);</comment>
				<expr_stmt><expr><name pos:line="233" pos:column="33">e</name> <op:operator pos:line="233" pos:column="35">=</op:operator> <call><name><name pos:line="233" pos:column="37">e</name><op:operator pos:line="233" pos:column="38">.</op:operator><name pos:line="233" pos:column="39">getNextException</name></name><argument_list pos:line="233" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></catch></try>
			
    	<return pos:line="237" pos:column="9">return <expr><call><name><name pos:line="237" pos:column="16">Factory</name><op:operator pos:line="237" pos:column="23">.</op:operator><name pos:line="237" pos:column="24">getEstimateIncomeDTO</name></name><argument_list pos:line="237" pos:column="44">(<argument><expr><name pos:line="237" pos:column="45">name</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="51">ssn</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="56">race</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="62">education</name></expr></argument>,
    			<argument><expr><name pos:line="238" pos:column="25">occupationCode</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="41">industryCode</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="55">weeklyWage</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="67">workWeeks</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="78">investmentIncome</name></expr></argument>)</argument_list></call></expr>;</return>
    	
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="242" pos:column="9">/**
	 * Estimates annual income based on a given work week value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				An integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">double</name></type> <name pos:line="251" pos:column="23">givenWorkWeeksEstimateIncomeAll</name><parameter_list pos:line="251" pos:column="54">(<param><decl><type><name pos:line="251" pos:column="55">int</name></type> <name pos:line="251" pos:column="59">workWeeks</name></decl></param>)</parameter_list><block pos:line="251" pos:column="69">{
	    <return pos:line="252" pos:column="13">return <expr><call><name pos:line="252" pos:column="20">formatReturnValue</name><argument_list pos:line="252" pos:column="37">(<argument><expr><op:operator pos:line="252" pos:column="38">(</op:operator><name pos:line="252" pos:column="39">workWeeks</name> <op:operator pos:line="252" pos:column="49">*</op:operator> <call><name pos:line="252" pos:column="51">givenWorkWeeksEstimateIncomeGetSlopeAll</name><argument_list pos:line="252" pos:column="90">()</argument_list></call><op:operator pos:line="252" pos:column="92">)</op:operator> <op:operator pos:line="252" pos:column="94">+</op:operator> <call><name pos:line="252" pos:column="96">givenWorkWeeksEstimateIncomeGetInterceptAll</name><argument_list pos:line="252" pos:column="139">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="255" pos:column="9">/**
	 * Estimates annual income based on a given work week value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="264" pos:column="9">public</specifier> <name pos:line="264" pos:column="16">double</name></type> <name pos:line="264" pos:column="23">givenWorkWeeksEstimateIncomeAll</name><parameter_list pos:line="264" pos:column="54">(<param><decl><type><name pos:line="264" pos:column="55">double</name></type> <name pos:line="264" pos:column="62">workWeeks</name></decl></param>)</parameter_list><block pos:line="264" pos:column="72">{
	    <return pos:line="265" pos:column="13">return <expr><call><name pos:line="265" pos:column="20">formatReturnValue</name><argument_list pos:line="265" pos:column="37">(<argument><expr><op:operator pos:line="265" pos:column="38">(</op:operator><name pos:line="265" pos:column="39">workWeeks</name> <op:operator pos:line="265" pos:column="49">*</op:operator> <call><name pos:line="265" pos:column="51">givenWorkWeeksEstimateIncomeGetSlopeAll</name><argument_list pos:line="265" pos:column="90">()</argument_list></call><op:operator pos:line="265" pos:column="92">)</op:operator> <op:operator pos:line="265" pos:column="94">+</op:operator> <call><name pos:line="265" pos:column="96">givenWorkWeeksEstimateIncomeGetInterceptAll</name><argument_list pos:line="265" pos:column="139">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="268" pos:column="9">/**
	 * Estimates annual income based on a given work week value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="277" pos:column="9">public</specifier> <name pos:line="277" pos:column="16">double</name></type> <name pos:line="277" pos:column="23">givenWorkWeeksEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="277" pos:column="66">(<param><decl><type><name pos:line="277" pos:column="67">int</name></type> <name pos:line="277" pos:column="71">workWeeks</name></decl></param>)</parameter_list><block pos:line="277" pos:column="81">{
	    <return pos:line="278" pos:column="13">return <expr><call><name pos:line="278" pos:column="20">formatReturnValue</name><argument_list pos:line="278" pos:column="37">(<argument><expr><op:operator pos:line="278" pos:column="38">(</op:operator><name pos:line="278" pos:column="39">workWeeks</name> <op:operator pos:line="278" pos:column="49">*</op:operator> <call><name pos:line="278" pos:column="51">givenWorkWeeksEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="278" pos:column="102">()</argument_list></call><op:operator pos:line="278" pos:column="104">)</op:operator> <op:operator pos:line="278" pos:column="106">+</op:operator> <call><name pos:line="278" pos:column="108">givenWorkWeeksEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="278" pos:column="163">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="281" pos:column="9">/**
	 * Estimates annual income based on a given work week value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="290" pos:column="9">public</specifier> <name pos:line="290" pos:column="16">double</name></type> <name pos:line="290" pos:column="23">givenWorkWeeksEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="290" pos:column="66">(<param><decl><type><name pos:line="290" pos:column="67">double</name></type> <name pos:line="290" pos:column="74">workWeeks</name></decl></param>)</parameter_list><block pos:line="290" pos:column="84">{
		<return pos:line="291" pos:column="17">return <expr><call><name pos:line="291" pos:column="24">formatReturnValue</name><argument_list pos:line="291" pos:column="41">(<argument><expr><op:operator pos:line="291" pos:column="42">(</op:operator><name pos:line="291" pos:column="43">workWeeks</name> <op:operator pos:line="291" pos:column="53">*</op:operator> <call><name pos:line="291" pos:column="55">givenWorkWeeksEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="291" pos:column="106">()</argument_list></call><op:operator pos:line="291" pos:column="108">)</op:operator> <op:operator pos:line="291" pos:column="110">+</op:operator> <call><name pos:line="291" pos:column="112">givenWorkWeeksEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="291" pos:column="167">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="294" pos:column="9">/**
	 * For work week entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="300" pos:column="9">public</specifier> <name pos:line="300" pos:column="16">double</name></type> <name pos:line="300" pos:column="23">givenWorkWeeksEstimateIncomeGetSlopeAll</name><parameter_list pos:line="300" pos:column="62">()</parameter_list><block pos:line="300" pos:column="64">{
	    <return pos:line="301" pos:column="13">return <expr><call><name pos:line="301" pos:column="20">formatReturnValue</name><argument_list pos:line="301" pos:column="37">(<argument><expr><call><name><name pos:line="301" pos:column="38">workWeeksFindIncome</name><op:operator pos:line="301" pos:column="57">.</op:operator><name pos:line="301" pos:column="58">getSlopeAll</name></name><argument_list pos:line="301" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="304" pos:column="9">/**
	 * For work week entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="310" pos:column="9">public</specifier> <name pos:line="310" pos:column="16">double</name></type> <name pos:line="310" pos:column="23">givenWorkWeeksEstimateIncomeGetInterceptAll</name><parameter_list pos:line="310" pos:column="66">()</parameter_list><block pos:line="310" pos:column="68">{
	    <return pos:line="311" pos:column="13">return <expr><call><name pos:line="311" pos:column="20">formatReturnValue</name><argument_list pos:line="311" pos:column="37">(<argument><expr><call><name><name pos:line="311" pos:column="38">workWeeksFindIncome</name><op:operator pos:line="311" pos:column="57">.</op:operator><name pos:line="311" pos:column="58">getInterceptAll</name></name><argument_list pos:line="311" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="314" pos:column="9">/**
	 * For work week entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="320" pos:column="9">public</specifier> <name pos:line="320" pos:column="16">double</name></type> <name pos:line="320" pos:column="23">givenWorkWeeksEstimateIncomeGetSlopeMiddleTwoThirds</name><parameter_list pos:line="320" pos:column="74">()</parameter_list><block pos:line="320" pos:column="76">{
	    <return pos:line="321" pos:column="13">return <expr><call><name pos:line="321" pos:column="20">formatReturnValue</name><argument_list pos:line="321" pos:column="37">(<argument><expr><call><name><name pos:line="321" pos:column="38">workWeeksFindIncome</name><op:operator pos:line="321" pos:column="57">.</op:operator><name pos:line="321" pos:column="58">getSlopeMiddleTwoThirds</name></name><argument_list pos:line="321" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="324" pos:column="9">/**
	 * For work week entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="330" pos:column="9">public</specifier> <name pos:line="330" pos:column="16">double</name></type> <name pos:line="330" pos:column="23">givenWorkWeeksEstimateIncomeGetInterceptMiddleTwoThirds</name><parameter_list pos:line="330" pos:column="78">()</parameter_list><block pos:line="330" pos:column="80">{
	    <return pos:line="331" pos:column="13">return <expr><call><name pos:line="331" pos:column="20">formatReturnValue</name><argument_list pos:line="331" pos:column="37">(<argument><expr><call><name><name pos:line="331" pos:column="38">workWeeksFindIncome</name><op:operator pos:line="331" pos:column="57">.</op:operator><name pos:line="331" pos:column="58">getInterceptMiddleTwoThirds</name></name><argument_list pos:line="331" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="334" pos:column="9">/**
	 * Estimates annual income based on a given weekly wage value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				An integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="343" pos:column="9">public</specifier> <name pos:line="343" pos:column="16">double</name></type> <name pos:line="343" pos:column="23">givenWeeklyWageEstimateIncomeAll</name><parameter_list pos:line="343" pos:column="55">(<param><decl><type><name pos:line="343" pos:column="56">int</name></type> <name pos:line="343" pos:column="60">weeklyWage</name></decl></param>)</parameter_list><block pos:line="343" pos:column="71">{
	    <return pos:line="344" pos:column="13">return <expr><call><name pos:line="344" pos:column="20">formatReturnValue</name><argument_list pos:line="344" pos:column="37">(<argument><expr><op:operator pos:line="344" pos:column="38">(</op:operator><name pos:line="344" pos:column="39">weeklyWage</name> <op:operator pos:line="344" pos:column="50">*</op:operator> <call><name pos:line="344" pos:column="52">givenWeeklyWageEstimateIncomeGetSlopeAll</name><argument_list pos:line="344" pos:column="92">()</argument_list></call><op:operator pos:line="344" pos:column="94">)</op:operator> <op:operator pos:line="344" pos:column="96">+</op:operator> <call><name pos:line="344" pos:column="98">givenWeeklyWageEstimateIncomeGetInterceptAll</name><argument_list pos:line="344" pos:column="142">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="347" pos:column="9">/**
	 * Estimates annual income based on a given weekly wage value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="356" pos:column="9">public</specifier> <name pos:line="356" pos:column="16">double</name></type> <name pos:line="356" pos:column="23">givenWeeklyWageEstimateIncomeAll</name><parameter_list pos:line="356" pos:column="55">(<param><decl><type><name pos:line="356" pos:column="56">double</name></type> <name pos:line="356" pos:column="63">weeklyWage</name></decl></param>)</parameter_list><block pos:line="356" pos:column="74">{
	    <return pos:line="357" pos:column="13">return <expr><call><name pos:line="357" pos:column="20">formatReturnValue</name><argument_list pos:line="357" pos:column="37">(<argument><expr><op:operator pos:line="357" pos:column="38">(</op:operator><name pos:line="357" pos:column="39">weeklyWage</name> <op:operator pos:line="357" pos:column="50">*</op:operator> <call><name pos:line="357" pos:column="52">givenWeeklyWageEstimateIncomeGetSlopeAll</name><argument_list pos:line="357" pos:column="92">()</argument_list></call><op:operator pos:line="357" pos:column="94">)</op:operator> <op:operator pos:line="357" pos:column="96">+</op:operator> <call><name pos:line="357" pos:column="98">givenWeeklyWageEstimateIncomeGetInterceptAll</name><argument_list pos:line="357" pos:column="142">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="360" pos:column="9">/**
	 * Estimates annual income based on a given weekly wage value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="369" pos:column="9">public</specifier> <name pos:line="369" pos:column="16">double</name></type> <name pos:line="369" pos:column="23">givenWeeklyWageEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="369" pos:column="67">(<param><decl><type><name pos:line="369" pos:column="68">int</name></type> <name pos:line="369" pos:column="72">weeklyWage</name></decl></param>)</parameter_list><block pos:line="369" pos:column="83">{
	    <return pos:line="370" pos:column="13">return <expr><call><name pos:line="370" pos:column="20">formatReturnValue</name><argument_list pos:line="370" pos:column="37">(<argument><expr><op:operator pos:line="370" pos:column="38">(</op:operator><name pos:line="370" pos:column="39">weeklyWage</name> <op:operator pos:line="370" pos:column="50">*</op:operator> <call><name pos:line="370" pos:column="52">givenWeeklyWageEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="370" pos:column="104">()</argument_list></call><op:operator pos:line="370" pos:column="106">)</op:operator> <op:operator pos:line="370" pos:column="108">+</op:operator> <call><name pos:line="370" pos:column="110">givenWeeklyWageEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="370" pos:column="166">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="373" pos:column="9">/**
	 * Estimates annual income based on a given weekly wage value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="382" pos:column="9">public</specifier> <name pos:line="382" pos:column="16">double</name></type> <name pos:line="382" pos:column="23">givenWeeklyWageEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="382" pos:column="67">(<param><decl><type><name pos:line="382" pos:column="68">double</name></type> <name pos:line="382" pos:column="75">weeklyWage</name></decl></param>)</parameter_list><block pos:line="382" pos:column="86">{
		<return pos:line="383" pos:column="17">return <expr><call><name pos:line="383" pos:column="24">formatReturnValue</name><argument_list pos:line="383" pos:column="41">(<argument><expr><op:operator pos:line="383" pos:column="42">(</op:operator><name pos:line="383" pos:column="43">weeklyWage</name> <op:operator pos:line="383" pos:column="54">*</op:operator> <call><name pos:line="383" pos:column="56">givenWeeklyWageEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="383" pos:column="108">()</argument_list></call><op:operator pos:line="383" pos:column="110">)</op:operator> <op:operator pos:line="383" pos:column="112">+</op:operator> <call><name pos:line="383" pos:column="114">givenWeeklyWageEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="383" pos:column="170">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="386" pos:column="9">/**
	 * For weekly wage entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="392" pos:column="9">public</specifier> <name pos:line="392" pos:column="16">double</name></type> <name pos:line="392" pos:column="23">givenWeeklyWageEstimateIncomeGetSlopeAll</name><parameter_list pos:line="392" pos:column="63">()</parameter_list><block pos:line="392" pos:column="65">{
	    <return pos:line="393" pos:column="13">return <expr><call><name pos:line="393" pos:column="20">formatReturnValue</name><argument_list pos:line="393" pos:column="37">(<argument><expr><call><name><name pos:line="393" pos:column="38">weeklyWageFindIncome</name><op:operator pos:line="393" pos:column="58">.</op:operator><name pos:line="393" pos:column="59">getSlopeAll</name></name><argument_list pos:line="393" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="396" pos:column="9">/**
	 * For weekly wage entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="402" pos:column="9">public</specifier> <name pos:line="402" pos:column="16">double</name></type> <name pos:line="402" pos:column="23">givenWeeklyWageEstimateIncomeGetInterceptAll</name><parameter_list pos:line="402" pos:column="67">()</parameter_list><block pos:line="402" pos:column="69">{
	    <return pos:line="403" pos:column="13">return <expr><call><name pos:line="403" pos:column="20">formatReturnValue</name><argument_list pos:line="403" pos:column="37">(<argument><expr><call><name><name pos:line="403" pos:column="38">weeklyWageFindIncome</name><op:operator pos:line="403" pos:column="58">.</op:operator><name pos:line="403" pos:column="59">getInterceptAll</name></name><argument_list pos:line="403" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="406" pos:column="9">/**
	 * For weekly wage entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="412" pos:column="9">public</specifier> <name pos:line="412" pos:column="16">double</name></type> <name pos:line="412" pos:column="23">givenWeeklyWageEstimateIncomeGetSlopeMiddleTwoThirds</name><parameter_list pos:line="412" pos:column="75">()</parameter_list><block pos:line="412" pos:column="77">{
		<return pos:line="413" pos:column="17">return <expr><call><name pos:line="413" pos:column="24">formatReturnValue</name><argument_list pos:line="413" pos:column="41">(<argument><expr><call><name><name pos:line="413" pos:column="42">weeklyWageFindIncome</name><op:operator pos:line="413" pos:column="62">.</op:operator><name pos:line="413" pos:column="63">getSlopeMiddleTwoThirds</name></name><argument_list pos:line="413" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="416" pos:column="9">/**
	 * For weekly wage entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="422" pos:column="9">public</specifier> <name pos:line="422" pos:column="16">double</name></type> <name pos:line="422" pos:column="23">givenWeeklyWageEstimateIncomeGetInterceptMiddleTwoThirds</name><parameter_list pos:line="422" pos:column="79">()</parameter_list><block pos:line="422" pos:column="81">{
	    <return pos:line="423" pos:column="13">return <expr><call><name pos:line="423" pos:column="20">formatReturnValue</name><argument_list pos:line="423" pos:column="37">(<argument><expr><call><name><name pos:line="423" pos:column="38">weeklyWageFindIncome</name><op:operator pos:line="423" pos:column="58">.</op:operator><name pos:line="423" pos:column="59">getInterceptMiddleTwoThirds</name></name><argument_list pos:line="423" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="426" pos:column="9">/**
	 * Estimates annual income based on a given investment income value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				An integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="435" pos:column="9">public</specifier> <name pos:line="435" pos:column="16">double</name></type> <name pos:line="435" pos:column="23">givenInvestmentIncomeEstimateIncomeAll</name><parameter_list pos:line="435" pos:column="61">(<param><decl><type><name pos:line="435" pos:column="62">int</name></type> <name pos:line="435" pos:column="66">investmentIncome</name></decl></param>)</parameter_list><block pos:line="435" pos:column="83">{
		<return pos:line="436" pos:column="17">return <expr><call><name pos:line="436" pos:column="24">formatReturnValue</name><argument_list pos:line="436" pos:column="41">(<argument><expr><op:operator pos:line="436" pos:column="42">(</op:operator><name pos:line="436" pos:column="43">investmentIncome</name> <op:operator pos:line="436" pos:column="60">*</op:operator> <call><name pos:line="436" pos:column="62">givenInvestmentIncomeEstimateIncomeGetSlopeAll</name><argument_list pos:line="436" pos:column="108">()</argument_list></call><op:operator pos:line="436" pos:column="110">)</op:operator> <op:operator pos:line="436" pos:column="112">+</op:operator> <call><name pos:line="436" pos:column="114">givenInvestmentIncomeEstimateIncomeGetInterceptAll</name><argument_list pos:line="436" pos:column="164">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="439" pos:column="9">/**
	 * Estimates annual income based on a given investment income value using all the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="448" pos:column="9">public</specifier> <name pos:line="448" pos:column="16">double</name></type> <name pos:line="448" pos:column="23">givenInvestmentIncomeEstimateIncomeAll</name><parameter_list pos:line="448" pos:column="61">(<param><decl><type><name pos:line="448" pos:column="62">double</name></type> <name pos:line="448" pos:column="69">investmentIncome</name></decl></param>)</parameter_list><block pos:line="448" pos:column="86">{
		<return pos:line="449" pos:column="17">return <expr><call><name pos:line="449" pos:column="24">formatReturnValue</name><argument_list pos:line="449" pos:column="41">(<argument><expr><op:operator pos:line="449" pos:column="42">(</op:operator><name pos:line="449" pos:column="43">investmentIncome</name> <op:operator pos:line="449" pos:column="60">*</op:operator> <call><name pos:line="449" pos:column="62">givenInvestmentIncomeEstimateIncomeGetSlopeAll</name><argument_list pos:line="449" pos:column="108">()</argument_list></call><op:operator pos:line="449" pos:column="110">)</op:operator> <op:operator pos:line="449" pos:column="112">+</op:operator> <call><name pos:line="449" pos:column="114">givenInvestmentIncomeEstimateIncomeGetInterceptAll</name><argument_list pos:line="449" pos:column="164">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="452" pos:column="9">/**
	 * Estimates annual income based on a given investment income value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A integer for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="461" pos:column="9">public</specifier> <name pos:line="461" pos:column="16">double</name></type> <name pos:line="461" pos:column="23">givenInvestmentIncomeEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="461" pos:column="73">(<param><decl><type><name pos:line="461" pos:column="74">int</name></type> <name pos:line="461" pos:column="78">investmentIncome</name></decl></param>)</parameter_list><block pos:line="461" pos:column="95">{
	    <return pos:line="462" pos:column="13">return <expr><call><name pos:line="462" pos:column="20">formatReturnValue</name><argument_list pos:line="462" pos:column="37">(<argument><expr><op:operator pos:line="462" pos:column="38">(</op:operator><name pos:line="462" pos:column="39">investmentIncome</name> <op:operator pos:line="462" pos:column="56">*</op:operator> <call><name pos:line="462" pos:column="58">givenInvestmentIncomeEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="462" pos:column="116">()</argument_list></call><op:operator pos:line="462" pos:column="118">)</op:operator> <op:operator pos:line="462" pos:column="120">+</op:operator> <call><name pos:line="462" pos:column="122">givenInvestmentIncomeEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="462" pos:column="184">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="465" pos:column="9">/**
	 * Estimates annual income based on a given investment income value using the middle 2/3 the
	 * 	data contained in the database.
	 * &lt;p&gt;
	 * @param 				A double for number of work weeks.
	 * 							Note, input is not checked for reasonableness
	 * 							Any input value can be calculated
	 * @return				Double - Estimated annual income.
	 */</comment>
	<function><type><specifier pos:line="474" pos:column="9">public</specifier> <name pos:line="474" pos:column="16">double</name></type> <name pos:line="474" pos:column="23">givenInvestmentIncomeEstimateIncomeMiddleTwoThirds</name><parameter_list pos:line="474" pos:column="73">(<param><decl><type><name pos:line="474" pos:column="74">double</name></type> <name pos:line="474" pos:column="81">investmentIncome</name></decl></param>)</parameter_list><block pos:line="474" pos:column="98">{
	    <return pos:line="475" pos:column="13">return <expr><call><name pos:line="475" pos:column="20">formatReturnValue</name><argument_list pos:line="475" pos:column="37">(<argument><expr><op:operator pos:line="475" pos:column="38">(</op:operator><name pos:line="475" pos:column="39">investmentIncome</name> <op:operator pos:line="475" pos:column="56">*</op:operator> <call><name pos:line="475" pos:column="58">givenInvestmentIncomeEstimateIncomeGetSlopeMiddleTwoThirds</name><argument_list pos:line="475" pos:column="116">()</argument_list></call><op:operator pos:line="475" pos:column="118">)</op:operator> <op:operator pos:line="475" pos:column="120">+</op:operator> <call><name pos:line="475" pos:column="122">givenInvestmentIncomeEstimateIncomeGetInterceptMiddleTwoThirds</name><argument_list pos:line="475" pos:column="184">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="478" pos:column="9">/**
	 * For investment income entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="484" pos:column="9">public</specifier> <name pos:line="484" pos:column="16">double</name></type> <name pos:line="484" pos:column="23">givenInvestmentIncomeEstimateIncomeGetSlopeAll</name><parameter_list pos:line="484" pos:column="69">()</parameter_list><block pos:line="484" pos:column="71">{
	    <return pos:line="485" pos:column="13">return <expr><call><name pos:line="485" pos:column="20">formatReturnValue</name><argument_list pos:line="485" pos:column="37">(<argument><expr><call><name><name pos:line="485" pos:column="38">investmentIncomeFindIncome</name><op:operator pos:line="485" pos:column="64">.</op:operator><name pos:line="485" pos:column="65">getSlopeAll</name></name><argument_list pos:line="485" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="488" pos:column="9">/**
	 * For investment income entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using all the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="494" pos:column="9">public</specifier> <name pos:line="494" pos:column="16">double</name></type> <name pos:line="494" pos:column="23">givenInvestmentIncomeEstimateIncomeGetInterceptAll</name><parameter_list pos:line="494" pos:column="73">()</parameter_list><block pos:line="494" pos:column="75">{
		<return pos:line="495" pos:column="17">return <expr><call><name pos:line="495" pos:column="24">formatReturnValue</name><argument_list pos:line="495" pos:column="41">(<argument><expr><call><name><name pos:line="495" pos:column="42">investmentIncomeFindIncome</name><op:operator pos:line="495" pos:column="68">.</op:operator><name pos:line="495" pos:column="69">getInterceptAll</name></name><argument_list pos:line="495" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="498" pos:column="9">/**
	 * For investment income entry [x] returns the slope [m] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Slope [m] of linear equation
	 */</comment>
	<function><type><specifier pos:line="504" pos:column="9">public</specifier> <name pos:line="504" pos:column="16">double</name></type> <name pos:line="504" pos:column="23">givenInvestmentIncomeEstimateIncomeGetSlopeMiddleTwoThirds</name><parameter_list pos:line="504" pos:column="81">()</parameter_list><block pos:line="504" pos:column="83">{
		<return pos:line="505" pos:column="17">return <expr><call><name pos:line="505" pos:column="24">formatReturnValue</name><argument_list pos:line="505" pos:column="41">(<argument><expr><call><name><name pos:line="505" pos:column="42">investmentIncomeFindIncome</name><op:operator pos:line="505" pos:column="68">.</op:operator><name pos:line="505" pos:column="69">getSlopeMiddleTwoThirds</name></name><argument_list pos:line="505" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="508" pos:column="9">/**
	 * For investment income entry [x] returns the intercept [b] for linear equation y= m(x) + b
	 *  using the middle 2/3 of the data contained in the database.
	 * &lt;p&gt;
	 * @return				Double - Intercept [b] of linear equation
	 */</comment>
	<function><type><specifier pos:line="514" pos:column="9">public</specifier> <name pos:line="514" pos:column="16">double</name></type> <name pos:line="514" pos:column="23">givenInvestmentIncomeEstimateIncomeGetInterceptMiddleTwoThirds</name><parameter_list pos:line="514" pos:column="85">()</parameter_list><block pos:line="514" pos:column="87">{
		<return pos:line="515" pos:column="17">return <expr><call><name pos:line="515" pos:column="24">formatReturnValue</name><argument_list pos:line="515" pos:column="41">(<argument><expr><call><name><name pos:line="515" pos:column="42">investmentIncomeFindIncome</name><op:operator pos:line="515" pos:column="68">.</op:operator><name pos:line="515" pos:column="69">getInterceptMiddleTwoThirds</name></name><argument_list pos:line="515" pos:column="96">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="518" pos:column="9">private</specifier> <name pos:line="518" pos:column="17">double</name></type> <name pos:line="518" pos:column="24">formatReturnValue</name><parameter_list pos:line="518" pos:column="41">(<param><decl><type><name pos:line="518" pos:column="42">double</name></type> <name pos:line="518" pos:column="49">returnValue</name></decl></param>)</parameter_list><block pos:line="518" pos:column="61">{
		<return pos:line="519" pos:column="17">return <expr><call><name><name pos:line="519" pos:column="24">Factory</name><op:operator pos:line="519" pos:column="31">.</op:operator><name pos:line="519" pos:column="32">getRoundMethod</name></name><argument_list pos:line="519" pos:column="46">(<argument><expr><name pos:line="519" pos:column="47">returnValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>
