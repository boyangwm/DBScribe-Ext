<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\LoginTestCase.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>
<import pos:line="3" pos:column="1">import static <name><name pos:line="3" pos:column="15">org</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">junit</name><op:operator pos:line="3" pos:column="24">.</op:operator><name pos:line="3" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">org</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">junit</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Test</name></name>;</import>

<class><specifier pos:line="7" pos:column="1">public</specifier> class <name pos:line="7" pos:column="14">LoginTestCase</name> <block pos:line="7" pos:column="28">{

	<function><type><annotation pos:line="9" pos:column="9">@<name pos:line="9" pos:column="10">Test</name></annotation>
	<specifier pos:line="10" pos:column="9">public</specifier> <name pos:line="10" pos:column="16">void</name></type> <name pos:line="10" pos:column="21">testauthenticate</name><parameter_list pos:line="10" pos:column="37">()</parameter_list> <block pos:line="10" pos:column="40">{
		<comment type="line" pos:line="11" pos:column="17">// char[] password = ;</comment>
		
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">Login</name></type> <name pos:line="13" pos:column="23">user</name> <init pos:line="13" pos:column="28">= <expr><op:operator pos:line="13" pos:column="30">new</op:operator> <call><name pos:line="13" pos:column="34">Login</name><argument_list pos:line="13" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="13" pos:column="40">"autum"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="13" pos:column="48">"IOoSlwBV"</lit:literal><op:operator pos:line="13" pos:column="58">.</op:operator><call><name pos:line="13" pos:column="59">toCharArray</name><argument_list pos:line="13" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">boolean</name></type> <name pos:line="14" pos:column="25">isPresent</name> <init pos:line="14" pos:column="35">= <expr><call><name><name pos:line="14" pos:column="37">user</name><op:operator pos:line="14" pos:column="41">.</op:operator><name pos:line="14" pos:column="42">authenticate</name></name><argument_list pos:line="14" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">assertEquals</name><argument_list pos:line="15" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="15" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="15" pos:column="35">isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="18" pos:column="9">@<name pos:line="18" pos:column="10">Test</name></annotation>
	<specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">testauthenticateFail</name><parameter_list pos:line="19" pos:column="41">()</parameter_list> <block pos:line="19" pos:column="44">{
		<comment type="line" pos:line="20" pos:column="17">// char[] password = ;</comment>
		
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">Login</name></type> <name pos:line="22" pos:column="23">user</name> <init pos:line="22" pos:column="28">= <expr><op:operator pos:line="22" pos:column="30">new</op:operator> <call><name pos:line="22" pos:column="34">Login</name><argument_list pos:line="22" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="40">"autum2"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="22" pos:column="49">"IOoSlwBV"</lit:literal><op:operator pos:line="22" pos:column="59">.</op:operator><call><name pos:line="22" pos:column="60">toCharArray</name><argument_list pos:line="22" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">boolean</name></type> <name pos:line="23" pos:column="25">isPresent</name> <init pos:line="23" pos:column="35">= <expr><call><name><name pos:line="23" pos:column="37">user</name><op:operator pos:line="23" pos:column="41">.</op:operator><name pos:line="23" pos:column="42">authenticate</name></name><argument_list pos:line="23" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">assertEquals</name><argument_list pos:line="24" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="24" pos:column="30">false</lit:literal></expr></argument>,<argument><expr><name pos:line="24" pos:column="36">isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="27" pos:column="9">// To test this function add new username</comment>
	
	<function><type><annotation pos:line="29" pos:column="9">@<name pos:line="29" pos:column="10">Test</name></annotation>
	<specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">addLoginInfoToDB</name><parameter_list pos:line="30" pos:column="37">()</parameter_list> <block pos:line="30" pos:column="40">{
		<comment type="line" pos:line="31" pos:column="17">// char[] password = ;</comment>
		
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">Login</name></type> <name pos:line="33" pos:column="23">user</name> <init pos:line="33" pos:column="28">= <expr><op:operator pos:line="33" pos:column="30">new</op:operator> <call><name pos:line="33" pos:column="34">Login</name><argument_list pos:line="33" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="40">"USERNAME"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="33" pos:column="51">"Password"</lit:literal><op:operator pos:line="33" pos:column="61">.</op:operator><call><name pos:line="33" pos:column="62">toCharArray</name><argument_list pos:line="33" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">boolean</name></type> <name pos:line="34" pos:column="25">isPresent</name> <init pos:line="34" pos:column="35">= <expr><call><name><name pos:line="34" pos:column="37">user</name><op:operator pos:line="34" pos:column="41">.</op:operator><name pos:line="34" pos:column="42">addLoginInfoToDB</name></name><argument_list pos:line="34" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="59">"USERNAME"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="71">"Password"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">assertEquals</name><argument_list pos:line="35" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="35" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="35" pos:column="35">isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="38" pos:column="9">@<name pos:line="38" pos:column="10">Test</name></annotation>
	<specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">changePassword</name><parameter_list pos:line="39" pos:column="35">()</parameter_list> <block pos:line="39" pos:column="38">{
		<comment type="line" pos:line="40" pos:column="17">// char[] password = ;</comment>
		
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">boolean</name></type> <name pos:line="42" pos:column="25">isChanged</name> <init pos:line="42" pos:column="35">= <expr><call><name><name pos:line="42" pos:column="37">Login</name><op:operator pos:line="42" pos:column="42">.</op:operator><name pos:line="42" pos:column="43">changePassword</name></name><argument_list pos:line="42" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="58">"Prasad"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="42" pos:column="67">"Nair"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">assertEquals</name><argument_list pos:line="43" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="43" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="43" pos:column="35">isChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="46" pos:column="9">// To test this function recover the password for a </comment>
	<comment type="line" pos:line="47" pos:column="9">// valid username. It sends the recovered password as </comment>
	<comment type="line" pos:line="48" pos:column="9">// an email. The username is the email id.</comment>
	<function><type><annotation pos:line="49" pos:column="9">@<name pos:line="49" pos:column="10">Test</name></annotation>
	<specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">void</name></type> <name pos:line="50" pos:column="21">recoverPassword</name><parameter_list pos:line="50" pos:column="36">()</parameter_list> <block pos:line="50" pos:column="39">{
		<comment type="line" pos:line="51" pos:column="17">// char[] password = ;</comment>
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">boolean</name></type> <name pos:line="52" pos:column="25">isRecovered</name> <init pos:line="52" pos:column="37">= <expr><call><name><name pos:line="52" pos:column="39">Login</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">recoverPassword</name></name><argument_list pos:line="52" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="61">"USERNAME"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">assertEquals</name><argument_list pos:line="53" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="53" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="53" pos:column="35">isRecovered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
}</block></class>
</unit>
