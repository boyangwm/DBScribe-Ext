<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\StudentTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">LinkedHashMap</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Test</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">umas</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">code</name></name>.*;</import>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">StudentTest</name> <block pos:line="10" pos:column="26">{

	<function><type><annotation pos:line="12" pos:column="9">@<name pos:line="12" pos:column="10">Test</name></annotation>
	<specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">testStudentInt</name><parameter_list pos:line="13" pos:column="35">()</parameter_list> <throws pos:line="13" pos:column="38">throws <argument><expr><name><name pos:line="13" pos:column="45">People</name><op:operator pos:line="13" pos:column="51">.</op:operator><name pos:line="13" pos:column="52">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="13" pos:column="80">{
		
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">Student</name></type> <name pos:line="15" pos:column="25">s</name><init pos:line="15" pos:column="26">=<expr><op:operator pos:line="15" pos:column="27">new</op:operator> <call><name pos:line="15" pos:column="31">Student</name><argument_list pos:line="15" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="15" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">assertEquals</name><argument_list pos:line="16" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="30">"kamal"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="39">s</name><op:operator pos:line="16" pos:column="40">.</op:operator><name pos:line="16" pos:column="41">getName</name></name><argument_list pos:line="16" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="19" pos:column="9">@<name pos:line="19" pos:column="10">Test</name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">expected</name><op:operator pos:line="19" pos:column="23">=</op:operator><name><name pos:line="19" pos:column="24">People</name><op:operator pos:line="19" pos:column="30">.</op:operator><name pos:line="19" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="19" pos:column="58">.</op:operator><name pos:line="19" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">void</name></type> <name pos:line="20" pos:column="21">testStudentInt2</name><parameter_list pos:line="20" pos:column="36">()</parameter_list> <throws pos:line="20" pos:column="39">throws <argument><expr><name><name pos:line="20" pos:column="46">People</name><op:operator pos:line="20" pos:column="52">.</op:operator><name pos:line="20" pos:column="53">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="20" pos:column="81">{
		
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">Student</name></type> <name pos:line="22" pos:column="25">s</name><init pos:line="22" pos:column="26">=<expr><op:operator pos:line="22" pos:column="27">new</op:operator> <call><name pos:line="22" pos:column="31">Student</name><argument_list pos:line="22" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="22" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">assertEquals</name><argument_list pos:line="23" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="30">"kamal"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="39">s</name><op:operator pos:line="23" pos:column="40">.</op:operator><name pos:line="23" pos:column="41">getName</name></name><argument_list pos:line="23" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="26" pos:column="9">@<name pos:line="26" pos:column="10">Test</name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">expected</name><op:operator pos:line="26" pos:column="23">=</op:operator><name><name pos:line="26" pos:column="24">People</name><op:operator pos:line="26" pos:column="30">.</op:operator><name pos:line="26" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="26" pos:column="58">.</op:operator><name pos:line="26" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">testStudentInt3</name><parameter_list pos:line="27" pos:column="36">()</parameter_list> <throws pos:line="27" pos:column="39">throws <argument><expr><name><name pos:line="27" pos:column="46">People</name><op:operator pos:line="27" pos:column="52">.</op:operator><name pos:line="27" pos:column="53">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="27" pos:column="81">{
		
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">Student</name></type> <name pos:line="29" pos:column="25">s</name><init pos:line="29" pos:column="26">=<expr><op:operator pos:line="29" pos:column="27">new</op:operator> <call><name pos:line="29" pos:column="31">Student</name><argument_list pos:line="29" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="39">10000</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">assertEquals</name><argument_list pos:line="30" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="30">"kamal"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="30" pos:column="39">s</name><op:operator pos:line="30" pos:column="40">.</op:operator><name pos:line="30" pos:column="41">getName</name></name><argument_list pos:line="30" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="33" pos:column="9">@<name pos:line="33" pos:column="10">Test</name></annotation>
	<specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">testAddStudentToDb</name><parameter_list pos:line="34" pos:column="39">()</parameter_list> <block pos:line="34" pos:column="42">{
	<comment type="line" pos:line="35" pos:column="9">//	this function cannot be tested here as it would cause inconsistency in the database/ It can be tested through the UI</comment>
	}</block></function>

	<function><type><annotation pos:line="38" pos:column="9">@<name pos:line="38" pos:column="10">Test</name></annotation>
	<specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">testDeleteStudentInt</name><parameter_list pos:line="39" pos:column="41">()</parameter_list> <block pos:line="39" pos:column="44">{
<comment type="line" pos:line="40" pos:column="1">//		this function cannot be tested here as it would cause inconsistency in the database/ It can be tested through the UI</comment>
	}</block></function>

	<function><type><annotation pos:line="43" pos:column="9">@<name pos:line="43" pos:column="10">Test</name></annotation>
	<specifier pos:line="44" pos:column="9">public</specifier> <name pos:line="44" pos:column="16">void</name></type> <name pos:line="44" pos:column="21">testDeleteStudentString</name><parameter_list pos:line="44" pos:column="44">()</parameter_list> <block pos:line="44" pos:column="47">{
<comment type="line" pos:line="45" pos:column="1">//		this function cannot be tested here as it would cause inconsistency in the database/ It can be tested through the UI</comment>
	}</block></function>

	<function><type><annotation pos:line="48" pos:column="9">@<name pos:line="48" pos:column="10">Test</name></annotation>
	<specifier pos:line="49" pos:column="9">public</specifier> <name pos:line="49" pos:column="16">void</name></type> <name pos:line="49" pos:column="21">testCheckIfStudent</name><parameter_list pos:line="49" pos:column="39">()</parameter_list> <block pos:line="49" pos:column="42">{

		<decl_stmt><decl><type><name pos:line="51" pos:column="17">boolean</name></type> <name pos:line="51" pos:column="25">check</name><init pos:line="51" pos:column="30">=<expr><call><name><name pos:line="51" pos:column="31">Student</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">checkIfStudent</name></name><argument_list pos:line="51" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="51" pos:column="54">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">assertTrue</name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="55" pos:column="9">@<name pos:line="55" pos:column="10">Test</name></annotation>
	<specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">void</name></type> <name pos:line="56" pos:column="21">testCheckIfStudent2</name><parameter_list pos:line="56" pos:column="40">()</parameter_list> <block pos:line="56" pos:column="43">{

		<decl_stmt><decl><type><name pos:line="58" pos:column="17">boolean</name></type> <name pos:line="58" pos:column="25">check</name><init pos:line="58" pos:column="30">=<expr><call><name><name pos:line="58" pos:column="31">Student</name><op:operator pos:line="58" pos:column="38">.</op:operator><name pos:line="58" pos:column="39">checkIfStudent</name></name><argument_list pos:line="58" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="58" pos:column="54">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">assertFalse</name><argument_list pos:line="59" pos:column="28">(<argument><expr><name pos:line="59" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="62" pos:column="9">@<name pos:line="62" pos:column="10">Test</name></annotation>
	<specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">testUpdateGPA</name><parameter_list pos:line="63" pos:column="34">()</parameter_list> <block pos:line="63" pos:column="37">{
		
		<comment type="line" pos:line="65" pos:column="17">//update GPA cannot be tested here as it would cause inconsistency in the database.</comment>
	}</block></function>

	<function><type><annotation pos:line="68" pos:column="9">@<name pos:line="68" pos:column="10">Test</name></annotation>
	<specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">testUpdateGPACheck</name><parameter_list pos:line="69" pos:column="39">()</parameter_list> <block pos:line="69" pos:column="42">{
		
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">boolean</name></type> <name pos:line="71" pos:column="25">check</name><init pos:line="71" pos:column="30">=<expr><call><name><name pos:line="71" pos:column="31">Student</name><op:operator pos:line="71" pos:column="38">.</op:operator><name pos:line="71" pos:column="39">updateGPACheck</name></name><argument_list pos:line="71" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="54">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">assertTrue</name><argument_list pos:line="72" pos:column="27">(<argument><expr><name pos:line="72" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="75" pos:column="9">@<name pos:line="75" pos:column="10">Test</name></annotation>
	<specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">testUpdateGPACheck2</name><parameter_list pos:line="76" pos:column="40">()</parameter_list> <block pos:line="76" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">boolean</name></type> <name pos:line="78" pos:column="25">check</name><init pos:line="78" pos:column="30">=<expr><call><name><name pos:line="78" pos:column="31">Student</name><op:operator pos:line="78" pos:column="38">.</op:operator><name pos:line="78" pos:column="39">updateGPACheck</name></name><argument_list pos:line="78" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="78" pos:column="54">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">assertFalse</name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="82" pos:column="9">@<name pos:line="82" pos:column="10">Test</name></annotation>
	<specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">testGetAllStudents</name><parameter_list pos:line="83" pos:column="39">()</parameter_list> <block pos:line="83" pos:column="42">{
		
		<decl_stmt><decl><type><name><name pos:line="85" pos:column="17">ArrayList</name><argument_list pos:line="85" pos:column="26">&lt;<argument><name pos:line="85" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="85" pos:column="36">check</name><init pos:line="85" pos:column="41">=<expr><call><name><name pos:line="85" pos:column="42">Student</name><op:operator pos:line="85" pos:column="49">.</op:operator><name pos:line="85" pos:column="50">getAllStudents</name></name><argument_list pos:line="85" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">assertNotNull</name><argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="89" pos:column="9">@<name pos:line="89" pos:column="10">Test</name></annotation>
	<specifier pos:line="90" pos:column="9">public</specifier> <name pos:line="90" pos:column="16">void</name></type> <name pos:line="90" pos:column="21">testGetStudentCourses</name><parameter_list pos:line="90" pos:column="42">()</parameter_list> <throws pos:line="90" pos:column="45">throws <argument><expr><name><name pos:line="90" pos:column="52">People</name><op:operator pos:line="90" pos:column="58">.</op:operator><name pos:line="90" pos:column="59">PersonDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="88">Course</name><op:operator pos:line="90" pos:column="94">.</op:operator><name pos:line="90" pos:column="95">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="124">CourseOffered</name><op:operator pos:line="90" pos:column="137">.</op:operator><name pos:line="90" pos:column="138">CourseOfferingDoesNotExistException</name></name></expr></argument></throws>  <block pos:line="90" pos:column="175">{
		
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">Student</name></type> <name pos:line="92" pos:column="25">s</name><init pos:line="92" pos:column="26">=<expr><op:operator pos:line="92" pos:column="27">new</op:operator> <call><name pos:line="92" pos:column="31">Student</name><argument_list pos:line="92" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="93" pos:column="17">LinkedHashMap</name><argument_list pos:line="93" pos:column="30">&lt;<argument><name pos:line="93" pos:column="31">Integer</name></argument>,<argument><name pos:line="93" pos:column="39">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="54">check</name><init pos:line="93" pos:column="59">=<expr><call><name><name pos:line="93" pos:column="60">s</name><op:operator pos:line="93" pos:column="61">.</op:operator><name pos:line="93" pos:column="62">getStudentCourses</name></name><argument_list pos:line="93" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">assertNotNull</name><argument_list pos:line="94" pos:column="30">(<argument><expr><name pos:line="94" pos:column="31">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="97" pos:column="9">@<name pos:line="97" pos:column="10">Test</name><argument_list pos:line="97" pos:column="14">(<argument><expr><name pos:line="97" pos:column="15">expected</name><op:operator pos:line="97" pos:column="23">=</op:operator><name><name pos:line="97" pos:column="24">People</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="97" pos:column="58">.</op:operator><name pos:line="97" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">testGetStudentCourses2</name><parameter_list pos:line="98" pos:column="43">()</parameter_list> <throws pos:line="98" pos:column="46">throws <argument><expr><name><name pos:line="98" pos:column="53">People</name><op:operator pos:line="98" pos:column="59">.</op:operator><name pos:line="98" pos:column="60">PersonDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="89">Course</name><op:operator pos:line="98" pos:column="95">.</op:operator><name pos:line="98" pos:column="96">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="125">CourseOffered</name><op:operator pos:line="98" pos:column="138">.</op:operator><name pos:line="98" pos:column="139">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="98" pos:column="175">{
		
		<decl_stmt><decl><type><name pos:line="100" pos:column="17">Student</name></type> <name pos:line="100" pos:column="25">s</name><init pos:line="100" pos:column="26">=<expr><op:operator pos:line="100" pos:column="27">new</op:operator> <call><name pos:line="100" pos:column="31">Student</name><argument_list pos:line="100" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="101" pos:column="17">LinkedHashMap</name><argument_list pos:line="101" pos:column="30">&lt;<argument><name pos:line="101" pos:column="31">Integer</name></argument>,<argument><name pos:line="101" pos:column="39">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="54">check</name><init pos:line="101" pos:column="59">=<expr><call><name><name pos:line="101" pos:column="60">s</name><op:operator pos:line="101" pos:column="61">.</op:operator><name pos:line="101" pos:column="62">getStudentCourses</name></name><argument_list pos:line="101" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">assertNull</name><argument_list pos:line="102" pos:column="27">(<argument><expr><name pos:line="102" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>



	<function><type><annotation pos:line="107" pos:column="9">@<name pos:line="107" pos:column="10">Test</name></annotation>
	<specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">testCalculateGPA</name><parameter_list pos:line="108" pos:column="37">()</parameter_list> <block pos:line="108" pos:column="40">{
		
		<comment type="line" pos:line="110" pos:column="17">//testing calculate grades would cause inconsistency in the database. This would update automatically.</comment>

	}</block></function>

	
	<function><type><annotation pos:line="115" pos:column="9">@<name pos:line="115" pos:column="10">Test</name></annotation>
	<specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">testUpdateStudentUserName1</name><parameter_list pos:line="116" pos:column="47">()</parameter_list> <block pos:line="116" pos:column="50">{
		
		
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">Student</name></type> <name pos:line="119" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="120" pos:column="17">try <block pos:line="120" pos:column="21">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">p</name> <op:operator pos:line="121" pos:column="27">=</op:operator> <op:operator pos:line="121" pos:column="29">new</op:operator> <call><name pos:line="121" pos:column="33">Student</name><argument_list pos:line="121" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="121" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="122" pos:column="25">boolean</name></type> <name pos:line="122" pos:column="33">check</name><init pos:line="122" pos:column="38">=<expr><call><name><name pos:line="122" pos:column="39">p</name><op:operator pos:line="122" pos:column="40">.</op:operator><name pos:line="122" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="122" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="63">"kamal"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="123" pos:column="25">assertTrue</name><argument_list pos:line="123" pos:column="35">(<argument><expr><name pos:line="123" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="124" pos:column="19">catch <parameter_list pos:line="124" pos:column="25">(<param><decl><type><name><name pos:line="124" pos:column="26">People</name><op:operator pos:line="124" pos:column="32">.</op:operator><name pos:line="124" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="124" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="64">{
			<comment type="line" pos:line="125" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="126" pos:column="25">e</name><op:operator pos:line="126" pos:column="26">.</op:operator><name pos:line="126" pos:column="27">printStackTrace</name></name><argument_list pos:line="126" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="131" pos:column="9">@<name pos:line="131" pos:column="10">Test</name></annotation>
	<specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">void</name></type> <name pos:line="132" pos:column="21">testUpdateStudentUserName2</name><parameter_list pos:line="132" pos:column="47">()</parameter_list> <block pos:line="132" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">Student</name></type> <name pos:line="134" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="135" pos:column="17">try <block pos:line="135" pos:column="21">{
			<expr_stmt><expr><name pos:line="136" pos:column="25">p</name> <op:operator pos:line="136" pos:column="27">=</op:operator> <op:operator pos:line="136" pos:column="29">new</op:operator> <call><name pos:line="136" pos:column="33">Student</name><argument_list pos:line="136" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="136" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="137" pos:column="25">boolean</name></type> <name pos:line="137" pos:column="33">check</name><init pos:line="137" pos:column="38">=<expr><call><name><name pos:line="137" pos:column="39">p</name><op:operator pos:line="137" pos:column="40">.</op:operator><name pos:line="137" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="137" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="63">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="138" pos:column="25">assertFalse</name><argument_list pos:line="138" pos:column="36">(<argument><expr><name pos:line="138" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="139" pos:column="19">catch <parameter_list pos:line="139" pos:column="25">(<param><decl><type><name><name pos:line="139" pos:column="26">People</name><op:operator pos:line="139" pos:column="32">.</op:operator><name pos:line="139" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="139" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="64">{
			<comment type="line" pos:line="140" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="141" pos:column="25">e</name><op:operator pos:line="141" pos:column="26">.</op:operator><name pos:line="141" pos:column="27">printStackTrace</name></name><argument_list pos:line="141" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="145" pos:column="9">@<name pos:line="145" pos:column="10">Test</name></annotation>
	<specifier pos:line="146" pos:column="9">public</specifier> <name pos:line="146" pos:column="16">void</name></type> <name pos:line="146" pos:column="21">testUpdateStudentUserName3</name><parameter_list pos:line="146" pos:column="47">()</parameter_list> <block pos:line="146" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="148" pos:column="17">Student</name></type> <name pos:line="148" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="149" pos:column="17">try <block pos:line="149" pos:column="21">{
			<expr_stmt><expr><name pos:line="150" pos:column="25">p</name> <op:operator pos:line="150" pos:column="27">=</op:operator> <op:operator pos:line="150" pos:column="29">new</op:operator> <call><name pos:line="150" pos:column="33">Student</name><argument_list pos:line="150" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="151" pos:column="25">boolean</name></type> <name pos:line="151" pos:column="33">check</name><init pos:line="151" pos:column="38">=<expr><call><name><name pos:line="151" pos:column="39">p</name><op:operator pos:line="151" pos:column="40">.</op:operator><name pos:line="151" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="151" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="63">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">assertFalse</name><argument_list pos:line="152" pos:column="36">(<argument><expr><name pos:line="152" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="153" pos:column="19">catch <parameter_list pos:line="153" pos:column="25">(<param><decl><type><name><name pos:line="153" pos:column="26">People</name><op:operator pos:line="153" pos:column="32">.</op:operator><name pos:line="153" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="153" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="64">{
			<comment type="line" pos:line="154" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">e</name><op:operator pos:line="155" pos:column="26">.</op:operator><name pos:line="155" pos:column="27">printStackTrace</name></name><argument_list pos:line="155" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="159" pos:column="9">@<name pos:line="159" pos:column="10">Test</name><argument_list pos:line="159" pos:column="14">(<argument><expr><name pos:line="159" pos:column="15">expected</name><op:operator pos:line="159" pos:column="23">=</op:operator><name><name pos:line="159" pos:column="24">NullPointerException</name><op:operator pos:line="159" pos:column="44">.</op:operator><name pos:line="159" pos:column="45">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">void</name></type> <name pos:line="160" pos:column="21">testUpdateStudentUserName4</name><parameter_list pos:line="160" pos:column="47">()</parameter_list> <block pos:line="160" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="162" pos:column="17">Student</name></type> <name pos:line="162" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="163" pos:column="17">try <block pos:line="163" pos:column="21">{
			<expr_stmt><expr><name pos:line="164" pos:column="25">p</name> <op:operator pos:line="164" pos:column="27">=</op:operator> <op:operator pos:line="164" pos:column="29">new</op:operator> <call><name pos:line="164" pos:column="33">Student</name><argument_list pos:line="164" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="164" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="165" pos:column="25">boolean</name></type> <name pos:line="165" pos:column="33">check</name><init pos:line="165" pos:column="38">=<expr><call><name><name pos:line="165" pos:column="39">p</name><op:operator pos:line="165" pos:column="40">.</op:operator><name pos:line="165" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="165" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="63">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="166" pos:column="25">assertFalse</name><argument_list pos:line="166" pos:column="36">(<argument><expr><name pos:line="166" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="167" pos:column="19">catch <parameter_list pos:line="167" pos:column="25">(<param><decl><type><name><name pos:line="167" pos:column="26">People</name><op:operator pos:line="167" pos:column="32">.</op:operator><name pos:line="167" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="167" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="167" pos:column="64">{
			<comment type="line" pos:line="168" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="169" pos:column="25">e</name><op:operator pos:line="169" pos:column="26">.</op:operator><name pos:line="169" pos:column="27">printStackTrace</name></name><argument_list pos:line="169" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="174" pos:column="9">@<name pos:line="174" pos:column="10">Test</name></annotation>
	<specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">void</name></type> <name pos:line="175" pos:column="21">testUpdateStudentUserName5</name><parameter_list pos:line="175" pos:column="47">()</parameter_list> <block pos:line="175" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">Student</name></type> <name pos:line="177" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="178" pos:column="17">try <block pos:line="178" pos:column="21">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">p</name> <op:operator pos:line="179" pos:column="27">=</op:operator> <op:operator pos:line="179" pos:column="29">new</op:operator> <call><name pos:line="179" pos:column="33">Student</name><argument_list pos:line="179" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="179" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="180" pos:column="25">boolean</name></type> <name pos:line="180" pos:column="33">check</name><init pos:line="180" pos:column="38">=<expr><call><name><name pos:line="180" pos:column="39">p</name><op:operator pos:line="180" pos:column="40">.</op:operator><name pos:line="180" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="180" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="63">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="181" pos:column="25">assertFalse</name><argument_list pos:line="181" pos:column="36">(<argument><expr><name pos:line="181" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="182" pos:column="19">catch <parameter_list pos:line="182" pos:column="25">(<param><decl><type><name><name pos:line="182" pos:column="26">People</name><op:operator pos:line="182" pos:column="32">.</op:operator><name pos:line="182" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="182" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="182" pos:column="64">{
			<comment type="line" pos:line="183" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="184" pos:column="25">e</name><op:operator pos:line="184" pos:column="26">.</op:operator><name pos:line="184" pos:column="27">printStackTrace</name></name><argument_list pos:line="184" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="188" pos:column="9">@<name pos:line="188" pos:column="10">Test</name><argument_list pos:line="188" pos:column="14">(<argument><expr><name pos:line="188" pos:column="15">expected</name><op:operator pos:line="188" pos:column="23">=</op:operator><name><name pos:line="188" pos:column="24">NullPointerException</name><op:operator pos:line="188" pos:column="44">.</op:operator><name pos:line="188" pos:column="45">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="189" pos:column="9">public</specifier> <name pos:line="189" pos:column="16">void</name></type> <name pos:line="189" pos:column="21">testUpdateStudentUserName6</name><parameter_list pos:line="189" pos:column="47">()</parameter_list> <block pos:line="189" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="191" pos:column="17">Student</name></type> <name pos:line="191" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="192" pos:column="17">try <block pos:line="192" pos:column="21">{
			<expr_stmt><expr><name pos:line="193" pos:column="25">p</name> <op:operator pos:line="193" pos:column="27">=</op:operator> <op:operator pos:line="193" pos:column="29">new</op:operator> <call><name pos:line="193" pos:column="33">Student</name><argument_list pos:line="193" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="194" pos:column="25">boolean</name></type> <name pos:line="194" pos:column="33">check</name><init pos:line="194" pos:column="38">=<expr><call><name><name pos:line="194" pos:column="39">p</name><op:operator pos:line="194" pos:column="40">.</op:operator><name pos:line="194" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="194" pos:column="62">(<argument><expr><lit:literal type="null" pos:line="194" pos:column="63">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="195" pos:column="25">assertFalse</name><argument_list pos:line="195" pos:column="36">(<argument><expr><name pos:line="195" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="196" pos:column="19">catch <parameter_list pos:line="196" pos:column="25">(<param><decl><type><name><name pos:line="196" pos:column="26">People</name><op:operator pos:line="196" pos:column="32">.</op:operator><name pos:line="196" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="196" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="196" pos:column="64">{
			<comment type="line" pos:line="197" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="198" pos:column="25">e</name><op:operator pos:line="198" pos:column="26">.</op:operator><name pos:line="198" pos:column="27">printStackTrace</name></name><argument_list pos:line="198" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="202" pos:column="9">@<name pos:line="202" pos:column="10">Test</name></annotation>
	<specifier pos:line="203" pos:column="9">public</specifier> <name pos:line="203" pos:column="16">void</name></type> <name pos:line="203" pos:column="21">testUpdateStudentUserName7</name><parameter_list pos:line="203" pos:column="47">()</parameter_list> <block pos:line="203" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="205" pos:column="17">Student</name></type> <name pos:line="205" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="206" pos:column="17">try <block pos:line="206" pos:column="21">{
			<expr_stmt><expr><name pos:line="207" pos:column="25">p</name> <op:operator pos:line="207" pos:column="27">=</op:operator> <op:operator pos:line="207" pos:column="29">new</op:operator> <call><name pos:line="207" pos:column="33">Student</name><argument_list pos:line="207" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="207" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="208" pos:column="25">boolean</name></type> <name pos:line="208" pos:column="33">check</name><init pos:line="208" pos:column="38">=<expr><call><name><name pos:line="208" pos:column="39">p</name><op:operator pos:line="208" pos:column="40">.</op:operator><name pos:line="208" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="208" pos:column="62">(<argument><expr><lit:literal type="null" pos:line="208" pos:column="63">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="209" pos:column="25">assertFalse</name><argument_list pos:line="209" pos:column="36">(<argument><expr><name pos:line="209" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="210" pos:column="19">catch <parameter_list pos:line="210" pos:column="25">(<param><decl><type><name><name pos:line="210" pos:column="26">People</name><op:operator pos:line="210" pos:column="32">.</op:operator><name pos:line="210" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="210" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="64">{
			<comment type="line" pos:line="211" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="212" pos:column="25">e</name><op:operator pos:line="212" pos:column="26">.</op:operator><name pos:line="212" pos:column="27">printStackTrace</name></name><argument_list pos:line="212" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="216" pos:column="9">@<name pos:line="216" pos:column="10">Test</name></annotation>
	<specifier pos:line="217" pos:column="9">public</specifier> <name pos:line="217" pos:column="16">void</name></type> <name pos:line="217" pos:column="21">testUpdateStudentUserName8</name><parameter_list pos:line="217" pos:column="47">()</parameter_list> <block pos:line="217" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="219" pos:column="17">Student</name></type> <name pos:line="219" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="220" pos:column="17">try <block pos:line="220" pos:column="21">{
			<expr_stmt><expr><name pos:line="221" pos:column="25">p</name> <op:operator pos:line="221" pos:column="27">=</op:operator> <op:operator pos:line="221" pos:column="29">new</op:operator> <call><name pos:line="221" pos:column="33">Student</name><argument_list pos:line="221" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="41">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="222" pos:column="25">boolean</name></type> <name pos:line="222" pos:column="33">check</name><init pos:line="222" pos:column="38">=<expr><call><name><name pos:line="222" pos:column="39">p</name><op:operator pos:line="222" pos:column="40">.</op:operator><name pos:line="222" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="222" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="63">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="223" pos:column="25">assertFalse</name><argument_list pos:line="223" pos:column="36">(<argument><expr><name pos:line="223" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="224" pos:column="19">catch <parameter_list pos:line="224" pos:column="25">(<param><decl><type><name><name pos:line="224" pos:column="26">People</name><op:operator pos:line="224" pos:column="32">.</op:operator><name pos:line="224" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="224" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="64">{
			<comment type="line" pos:line="225" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="226" pos:column="25">e</name><op:operator pos:line="226" pos:column="26">.</op:operator><name pos:line="226" pos:column="27">printStackTrace</name></name><argument_list pos:line="226" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="230" pos:column="9">@<name pos:line="230" pos:column="10">Test</name></annotation>
	<specifier pos:line="231" pos:column="9">public</specifier> <name pos:line="231" pos:column="16">void</name></type> <name pos:line="231" pos:column="21">testUpdateStudentUserName9</name><parameter_list pos:line="231" pos:column="47">()</parameter_list> <block pos:line="231" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="233" pos:column="17">Student</name></type> <name pos:line="233" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="234" pos:column="17">try <block pos:line="234" pos:column="21">{
			<expr_stmt><expr><name pos:line="235" pos:column="25">p</name> <op:operator pos:line="235" pos:column="27">=</op:operator> <op:operator pos:line="235" pos:column="29">new</op:operator> <call><name pos:line="235" pos:column="33">Student</name><argument_list pos:line="235" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="235" pos:column="41">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="236" pos:column="25">boolean</name></type> <name pos:line="236" pos:column="33">check</name><init pos:line="236" pos:column="38">=<expr><call><name><name pos:line="236" pos:column="39">p</name><op:operator pos:line="236" pos:column="40">.</op:operator><name pos:line="236" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="236" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="63">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="237" pos:column="25">assertFalse</name><argument_list pos:line="237" pos:column="36">(<argument><expr><name pos:line="237" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="238" pos:column="19">catch <parameter_list pos:line="238" pos:column="25">(<param><decl><type><name><name pos:line="238" pos:column="26">People</name><op:operator pos:line="238" pos:column="32">.</op:operator><name pos:line="238" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="238" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="238" pos:column="64">{
			<comment type="line" pos:line="239" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="240" pos:column="25">e</name><op:operator pos:line="240" pos:column="26">.</op:operator><name pos:line="240" pos:column="27">printStackTrace</name></name><argument_list pos:line="240" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="244" pos:column="9">@<name pos:line="244" pos:column="10">Test</name></annotation>
	<specifier pos:line="245" pos:column="9">public</specifier> <name pos:line="245" pos:column="16">void</name></type> <name pos:line="245" pos:column="21">testUpdateStudentUserName10</name><parameter_list pos:line="245" pos:column="48">()</parameter_list> <block pos:line="245" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="247" pos:column="17">Student</name></type> <name pos:line="247" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="248" pos:column="17">try <block pos:line="248" pos:column="21">{
			<expr_stmt><expr><name pos:line="249" pos:column="25">p</name> <op:operator pos:line="249" pos:column="27">=</op:operator> <op:operator pos:line="249" pos:column="29">new</op:operator> <call><name pos:line="249" pos:column="33">Student</name><argument_list pos:line="249" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="41">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="250" pos:column="25">boolean</name></type> <name pos:line="250" pos:column="33">check</name><init pos:line="250" pos:column="38">=<expr><call><name><name pos:line="250" pos:column="39">p</name><op:operator pos:line="250" pos:column="40">.</op:operator><name pos:line="250" pos:column="41">updateStudentUserName</name></name><argument_list pos:line="250" pos:column="62">(<argument><expr><lit:literal type="null" pos:line="250" pos:column="63">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="251" pos:column="25">assertFalse</name><argument_list pos:line="251" pos:column="36">(<argument><expr><name pos:line="251" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="252" pos:column="19">catch <parameter_list pos:line="252" pos:column="25">(<param><decl><type><name><name pos:line="252" pos:column="26">People</name><op:operator pos:line="252" pos:column="32">.</op:operator><name pos:line="252" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="252" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="64">{
			<comment type="line" pos:line="253" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="254" pos:column="25">e</name><op:operator pos:line="254" pos:column="26">.</op:operator><name pos:line="254" pos:column="27">printStackTrace</name></name><argument_list pos:line="254" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	
	<function><type><annotation pos:line="259" pos:column="9">@<name pos:line="259" pos:column="10">Test</name></annotation>
	<specifier pos:line="260" pos:column="9">public</specifier> <name pos:line="260" pos:column="16">void</name></type> <name pos:line="260" pos:column="21">testUpdateStudentName1</name><parameter_list pos:line="260" pos:column="43">()</parameter_list> <block pos:line="260" pos:column="46">{
		
		
		<decl_stmt><decl><type><name pos:line="263" pos:column="17">Student</name></type> <name pos:line="263" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="264" pos:column="17">try <block pos:line="264" pos:column="21">{
			<expr_stmt><expr><name pos:line="265" pos:column="25">p</name> <op:operator pos:line="265" pos:column="27">=</op:operator> <op:operator pos:line="265" pos:column="29">new</op:operator> <call><name pos:line="265" pos:column="33">Student</name><argument_list pos:line="265" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="265" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="266" pos:column="25">boolean</name></type> <name pos:line="266" pos:column="33">check</name><init pos:line="266" pos:column="38">=<expr><call><name><name pos:line="266" pos:column="39">p</name><op:operator pos:line="266" pos:column="40">.</op:operator><name pos:line="266" pos:column="41">updateStudentName</name></name><argument_list pos:line="266" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="59">"kamal"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="267" pos:column="25">assertTrue</name><argument_list pos:line="267" pos:column="35">(<argument><expr><name pos:line="267" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="268" pos:column="19">catch <parameter_list pos:line="268" pos:column="25">(<param><decl><type><name><name pos:line="268" pos:column="26">People</name><op:operator pos:line="268" pos:column="32">.</op:operator><name pos:line="268" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="268" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="268" pos:column="64">{
			<comment type="line" pos:line="269" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="270" pos:column="25">e</name><op:operator pos:line="270" pos:column="26">.</op:operator><name pos:line="270" pos:column="27">printStackTrace</name></name><argument_list pos:line="270" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="275" pos:column="9">@<name pos:line="275" pos:column="10">Test</name></annotation>
	<specifier pos:line="276" pos:column="9">public</specifier> <name pos:line="276" pos:column="16">void</name></type> <name pos:line="276" pos:column="21">testUpdateStudentName2</name><parameter_list pos:line="276" pos:column="43">()</parameter_list> <block pos:line="276" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="278" pos:column="17">Student</name></type> <name pos:line="278" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="279" pos:column="17">try <block pos:line="279" pos:column="21">{
			<expr_stmt><expr><name pos:line="280" pos:column="25">p</name> <op:operator pos:line="280" pos:column="27">=</op:operator> <op:operator pos:line="280" pos:column="29">new</op:operator> <call><name pos:line="280" pos:column="33">Student</name><argument_list pos:line="280" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="280" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="281" pos:column="25">boolean</name></type> <name pos:line="281" pos:column="33">check</name><init pos:line="281" pos:column="38">=<expr><call><name><name pos:line="281" pos:column="39">p</name><op:operator pos:line="281" pos:column="40">.</op:operator><name pos:line="281" pos:column="41">updateStudentName</name></name><argument_list pos:line="281" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="281" pos:column="59">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="282" pos:column="25">assertFalse</name><argument_list pos:line="282" pos:column="36">(<argument><expr><name pos:line="282" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="283" pos:column="19">catch <parameter_list pos:line="283" pos:column="25">(<param><decl><type><name><name pos:line="283" pos:column="26">People</name><op:operator pos:line="283" pos:column="32">.</op:operator><name pos:line="283" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="283" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="283" pos:column="64">{
			<comment type="line" pos:line="284" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="285" pos:column="25">e</name><op:operator pos:line="285" pos:column="26">.</op:operator><name pos:line="285" pos:column="27">printStackTrace</name></name><argument_list pos:line="285" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="289" pos:column="9">@<name pos:line="289" pos:column="10">Test</name></annotation>
	<specifier pos:line="290" pos:column="9">public</specifier> <name pos:line="290" pos:column="16">void</name></type> <name pos:line="290" pos:column="21">testUpdateStudentName3</name><parameter_list pos:line="290" pos:column="43">()</parameter_list> <block pos:line="290" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="292" pos:column="17">Student</name></type> <name pos:line="292" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="293" pos:column="17">try <block pos:line="293" pos:column="21">{
			<expr_stmt><expr><name pos:line="294" pos:column="25">p</name> <op:operator pos:line="294" pos:column="27">=</op:operator> <op:operator pos:line="294" pos:column="29">new</op:operator> <call><name pos:line="294" pos:column="33">Student</name><argument_list pos:line="294" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="294" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="295" pos:column="25">boolean</name></type> <name pos:line="295" pos:column="33">check</name><init pos:line="295" pos:column="38">=<expr><call><name><name pos:line="295" pos:column="39">p</name><op:operator pos:line="295" pos:column="40">.</op:operator><name pos:line="295" pos:column="41">updateStudentName</name></name><argument_list pos:line="295" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="295" pos:column="59">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="296" pos:column="25">assertFalse</name><argument_list pos:line="296" pos:column="36">(<argument><expr><name pos:line="296" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="297" pos:column="19">catch <parameter_list pos:line="297" pos:column="25">(<param><decl><type><name><name pos:line="297" pos:column="26">People</name><op:operator pos:line="297" pos:column="32">.</op:operator><name pos:line="297" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="297" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="64">{
			<comment type="line" pos:line="298" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="299" pos:column="25">e</name><op:operator pos:line="299" pos:column="26">.</op:operator><name pos:line="299" pos:column="27">printStackTrace</name></name><argument_list pos:line="299" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="303" pos:column="9">@<name pos:line="303" pos:column="10">Test</name><argument_list pos:line="303" pos:column="14">(<argument><expr><name pos:line="303" pos:column="15">expected</name><op:operator pos:line="303" pos:column="23">=</op:operator><name><name pos:line="303" pos:column="24">NullPointerException</name><op:operator pos:line="303" pos:column="44">.</op:operator><name pos:line="303" pos:column="45">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="304" pos:column="9">public</specifier> <name pos:line="304" pos:column="16">void</name></type> <name pos:line="304" pos:column="21">testUpdateStudentName4</name><parameter_list pos:line="304" pos:column="43">()</parameter_list> <block pos:line="304" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="306" pos:column="17">Student</name></type> <name pos:line="306" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="307" pos:column="17">try <block pos:line="307" pos:column="21">{
			<expr_stmt><expr><name pos:line="308" pos:column="25">p</name> <op:operator pos:line="308" pos:column="27">=</op:operator> <op:operator pos:line="308" pos:column="29">new</op:operator> <call><name pos:line="308" pos:column="33">Student</name><argument_list pos:line="308" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="308" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="309" pos:column="25">boolean</name></type> <name pos:line="309" pos:column="33">check</name><init pos:line="309" pos:column="38">=<expr><call><name><name pos:line="309" pos:column="39">p</name><op:operator pos:line="309" pos:column="40">.</op:operator><name pos:line="309" pos:column="41">updateStudentName</name></name><argument_list pos:line="309" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="309" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="310" pos:column="25">assertFalse</name><argument_list pos:line="310" pos:column="36">(<argument><expr><name pos:line="310" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="311" pos:column="19">catch <parameter_list pos:line="311" pos:column="25">(<param><decl><type><name><name pos:line="311" pos:column="26">People</name><op:operator pos:line="311" pos:column="32">.</op:operator><name pos:line="311" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="311" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="64">{
			<comment type="line" pos:line="312" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="313" pos:column="25">e</name><op:operator pos:line="313" pos:column="26">.</op:operator><name pos:line="313" pos:column="27">printStackTrace</name></name><argument_list pos:line="313" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="318" pos:column="9">@<name pos:line="318" pos:column="10">Test</name></annotation>
	<specifier pos:line="319" pos:column="9">public</specifier> <name pos:line="319" pos:column="16">void</name></type> <name pos:line="319" pos:column="21">testUpdateStudentName5</name><parameter_list pos:line="319" pos:column="43">()</parameter_list> <block pos:line="319" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="321" pos:column="17">Student</name></type> <name pos:line="321" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="322" pos:column="17">try <block pos:line="322" pos:column="21">{
			<expr_stmt><expr><name pos:line="323" pos:column="25">p</name> <op:operator pos:line="323" pos:column="27">=</op:operator> <op:operator pos:line="323" pos:column="29">new</op:operator> <call><name pos:line="323" pos:column="33">Student</name><argument_list pos:line="323" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="323" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="324" pos:column="25">boolean</name></type> <name pos:line="324" pos:column="33">check</name><init pos:line="324" pos:column="38">=<expr><call><name><name pos:line="324" pos:column="39">p</name><op:operator pos:line="324" pos:column="40">.</op:operator><name pos:line="324" pos:column="41">updateStudentName</name></name><argument_list pos:line="324" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="325" pos:column="25">assertFalse</name><argument_list pos:line="325" pos:column="36">(<argument><expr><name pos:line="325" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="326" pos:column="19">catch <parameter_list pos:line="326" pos:column="25">(<param><decl><type><name><name pos:line="326" pos:column="26">People</name><op:operator pos:line="326" pos:column="32">.</op:operator><name pos:line="326" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="326" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="326" pos:column="64">{
			<comment type="line" pos:line="327" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="328" pos:column="25">e</name><op:operator pos:line="328" pos:column="26">.</op:operator><name pos:line="328" pos:column="27">printStackTrace</name></name><argument_list pos:line="328" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="332" pos:column="9">@<name pos:line="332" pos:column="10">Test</name><argument_list pos:line="332" pos:column="14">(<argument><expr><name pos:line="332" pos:column="15">expected</name><op:operator pos:line="332" pos:column="23">=</op:operator><name><name pos:line="332" pos:column="24">NullPointerException</name><op:operator pos:line="332" pos:column="44">.</op:operator><name pos:line="332" pos:column="45">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="333" pos:column="9">public</specifier> <name pos:line="333" pos:column="16">void</name></type> <name pos:line="333" pos:column="21">testUpdateStudentName6</name><parameter_list pos:line="333" pos:column="43">()</parameter_list> <block pos:line="333" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="335" pos:column="17">Student</name></type> <name pos:line="335" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="336" pos:column="17">try <block pos:line="336" pos:column="21">{
			<expr_stmt><expr><name pos:line="337" pos:column="25">p</name> <op:operator pos:line="337" pos:column="27">=</op:operator> <op:operator pos:line="337" pos:column="29">new</op:operator> <call><name pos:line="337" pos:column="33">Student</name><argument_list pos:line="337" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="337" pos:column="41">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="338" pos:column="25">boolean</name></type> <name pos:line="338" pos:column="33">check</name><init pos:line="338" pos:column="38">=<expr><call><name><name pos:line="338" pos:column="39">p</name><op:operator pos:line="338" pos:column="40">.</op:operator><name pos:line="338" pos:column="41">updateStudentName</name></name><argument_list pos:line="338" pos:column="58">(<argument><expr><lit:literal type="null" pos:line="338" pos:column="59">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="339" pos:column="25">assertFalse</name><argument_list pos:line="339" pos:column="36">(<argument><expr><name pos:line="339" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="340" pos:column="19">catch <parameter_list pos:line="340" pos:column="25">(<param><decl><type><name><name pos:line="340" pos:column="26">People</name><op:operator pos:line="340" pos:column="32">.</op:operator><name pos:line="340" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="340" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="340" pos:column="64">{
			<comment type="line" pos:line="341" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="342" pos:column="25">e</name><op:operator pos:line="342" pos:column="26">.</op:operator><name pos:line="342" pos:column="27">printStackTrace</name></name><argument_list pos:line="342" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="346" pos:column="9">@<name pos:line="346" pos:column="10">Test</name></annotation>
	<specifier pos:line="347" pos:column="9">public</specifier> <name pos:line="347" pos:column="16">void</name></type> <name pos:line="347" pos:column="21">testUpdateStudentName7</name><parameter_list pos:line="347" pos:column="43">()</parameter_list> <block pos:line="347" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="349" pos:column="17">Student</name></type> <name pos:line="349" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="350" pos:column="17">try <block pos:line="350" pos:column="21">{
			<expr_stmt><expr><name pos:line="351" pos:column="25">p</name> <op:operator pos:line="351" pos:column="27">=</op:operator> <op:operator pos:line="351" pos:column="29">new</op:operator> <call><name pos:line="351" pos:column="33">Student</name><argument_list pos:line="351" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="351" pos:column="41">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="352" pos:column="25">boolean</name></type> <name pos:line="352" pos:column="33">check</name><init pos:line="352" pos:column="38">=<expr><call><name><name pos:line="352" pos:column="39">p</name><op:operator pos:line="352" pos:column="40">.</op:operator><name pos:line="352" pos:column="41">updateStudentName</name></name><argument_list pos:line="352" pos:column="58">(<argument><expr><lit:literal type="null" pos:line="352" pos:column="59">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="353" pos:column="25">assertFalse</name><argument_list pos:line="353" pos:column="36">(<argument><expr><name pos:line="353" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="354" pos:column="19">catch <parameter_list pos:line="354" pos:column="25">(<param><decl><type><name><name pos:line="354" pos:column="26">People</name><op:operator pos:line="354" pos:column="32">.</op:operator><name pos:line="354" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="354" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="354" pos:column="64">{
			<comment type="line" pos:line="355" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="356" pos:column="25">e</name><op:operator pos:line="356" pos:column="26">.</op:operator><name pos:line="356" pos:column="27">printStackTrace</name></name><argument_list pos:line="356" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="360" pos:column="9">@<name pos:line="360" pos:column="10">Test</name></annotation>
	<specifier pos:line="361" pos:column="9">public</specifier> <name pos:line="361" pos:column="16">void</name></type> <name pos:line="361" pos:column="21">testUpdateStudentName8</name><parameter_list pos:line="361" pos:column="43">()</parameter_list> <block pos:line="361" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="363" pos:column="17">Student</name></type> <name pos:line="363" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="364" pos:column="17">try <block pos:line="364" pos:column="21">{
			<expr_stmt><expr><name pos:line="365" pos:column="25">p</name> <op:operator pos:line="365" pos:column="27">=</op:operator> <op:operator pos:line="365" pos:column="29">new</op:operator> <call><name pos:line="365" pos:column="33">Student</name><argument_list pos:line="365" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="365" pos:column="41">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="366" pos:column="25">boolean</name></type> <name pos:line="366" pos:column="33">check</name><init pos:line="366" pos:column="38">=<expr><call><name><name pos:line="366" pos:column="39">p</name><op:operator pos:line="366" pos:column="40">.</op:operator><name pos:line="366" pos:column="41">updateStudentName</name></name><argument_list pos:line="366" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="59">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="367" pos:column="25">assertFalse</name><argument_list pos:line="367" pos:column="36">(<argument><expr><name pos:line="367" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="368" pos:column="19">catch <parameter_list pos:line="368" pos:column="25">(<param><decl><type><name><name pos:line="368" pos:column="26">People</name><op:operator pos:line="368" pos:column="32">.</op:operator><name pos:line="368" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="368" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="368" pos:column="64">{
			<comment type="line" pos:line="369" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="370" pos:column="25">e</name><op:operator pos:line="370" pos:column="26">.</op:operator><name pos:line="370" pos:column="27">printStackTrace</name></name><argument_list pos:line="370" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="374" pos:column="9">@<name pos:line="374" pos:column="10">Test</name></annotation>
	<specifier pos:line="375" pos:column="9">public</specifier> <name pos:line="375" pos:column="16">void</name></type> <name pos:line="375" pos:column="21">testUpdateStudentName9</name><parameter_list pos:line="375" pos:column="43">()</parameter_list> <block pos:line="375" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="377" pos:column="17">Student</name></type> <name pos:line="377" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="378" pos:column="17">try <block pos:line="378" pos:column="21">{
			<expr_stmt><expr><name pos:line="379" pos:column="25">p</name> <op:operator pos:line="379" pos:column="27">=</op:operator> <op:operator pos:line="379" pos:column="29">new</op:operator> <call><name pos:line="379" pos:column="33">Student</name><argument_list pos:line="379" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="379" pos:column="41">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="380" pos:column="25">boolean</name></type> <name pos:line="380" pos:column="33">check</name><init pos:line="380" pos:column="38">=<expr><call><name><name pos:line="380" pos:column="39">p</name><op:operator pos:line="380" pos:column="40">.</op:operator><name pos:line="380" pos:column="41">updateStudentName</name></name><argument_list pos:line="380" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="380" pos:column="59">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="381" pos:column="25">assertFalse</name><argument_list pos:line="381" pos:column="36">(<argument><expr><name pos:line="381" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="382" pos:column="19">catch <parameter_list pos:line="382" pos:column="25">(<param><decl><type><name><name pos:line="382" pos:column="26">People</name><op:operator pos:line="382" pos:column="32">.</op:operator><name pos:line="382" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="382" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="382" pos:column="64">{
			<comment type="line" pos:line="383" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="384" pos:column="25">e</name><op:operator pos:line="384" pos:column="26">.</op:operator><name pos:line="384" pos:column="27">printStackTrace</name></name><argument_list pos:line="384" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="388" pos:column="9">@<name pos:line="388" pos:column="10">Test</name></annotation>
	<specifier pos:line="389" pos:column="9">public</specifier> <name pos:line="389" pos:column="16">void</name></type> <name pos:line="389" pos:column="21">testUpdateStudentName10</name><parameter_list pos:line="389" pos:column="44">()</parameter_list> <block pos:line="389" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="391" pos:column="17">Student</name></type> <name pos:line="391" pos:column="25">p</name></decl>;</decl_stmt>
		<try pos:line="392" pos:column="17">try <block pos:line="392" pos:column="21">{
			<expr_stmt><expr><name pos:line="393" pos:column="25">p</name> <op:operator pos:line="393" pos:column="27">=</op:operator> <op:operator pos:line="393" pos:column="29">new</op:operator> <call><name pos:line="393" pos:column="33">Student</name><argument_list pos:line="393" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="393" pos:column="41">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="394" pos:column="25">boolean</name></type> <name pos:line="394" pos:column="33">check</name><init pos:line="394" pos:column="38">=<expr><call><name><name pos:line="394" pos:column="39">p</name><op:operator pos:line="394" pos:column="40">.</op:operator><name pos:line="394" pos:column="41">updateStudentName</name></name><argument_list pos:line="394" pos:column="58">(<argument><expr><lit:literal type="null" pos:line="394" pos:column="59">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="395" pos:column="25">assertFalse</name><argument_list pos:line="395" pos:column="36">(<argument><expr><name pos:line="395" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="396" pos:column="19">catch <parameter_list pos:line="396" pos:column="25">(<param><decl><type><name><name pos:line="396" pos:column="26">People</name><op:operator pos:line="396" pos:column="32">.</op:operator><name pos:line="396" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="396" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="396" pos:column="64">{
			<comment type="line" pos:line="397" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="398" pos:column="25">e</name><op:operator pos:line="398" pos:column="26">.</op:operator><name pos:line="398" pos:column="27">printStackTrace</name></name><argument_list pos:line="398" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>


	<function><type><annotation pos:line="403" pos:column="9">@<name pos:line="403" pos:column="10">Test</name></annotation>
	<specifier pos:line="404" pos:column="9">public</specifier> <name pos:line="404" pos:column="16">void</name></type> <name pos:line="404" pos:column="21">testUpdateStudentDept</name><parameter_list pos:line="404" pos:column="42">()</parameter_list> <throws pos:line="404" pos:column="45">throws <argument><expr><name><name pos:line="404" pos:column="52">Department</name><op:operator pos:line="404" pos:column="62">.</op:operator><name pos:line="404" pos:column="63">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="404" pos:column="96">Student</name><op:operator pos:line="404" pos:column="103">.</op:operator><name pos:line="404" pos:column="104">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="404" pos:column="127">People</name><op:operator pos:line="404" pos:column="133">.</op:operator><name pos:line="404" pos:column="134">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="404" pos:column="162">{
		
		<decl_stmt><decl><type><name pos:line="406" pos:column="17">Department</name></type> <name pos:line="406" pos:column="28">d</name><init pos:line="406" pos:column="29">=<expr><op:operator pos:line="406" pos:column="30">new</op:operator> <call><name pos:line="406" pos:column="34">Department</name><argument_list pos:line="406" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="406" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="407" pos:column="17">Student</name></type> <name pos:line="407" pos:column="25">p</name><init pos:line="407" pos:column="26">=<expr><op:operator pos:line="407" pos:column="27">new</op:operator> <call><name pos:line="407" pos:column="31">Student</name><argument_list pos:line="407" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="407" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="408" pos:column="17">boolean</name></type> <name pos:line="408" pos:column="25">check</name><init pos:line="408" pos:column="30">=<expr><call><name><name pos:line="408" pos:column="31">p</name><op:operator pos:line="408" pos:column="32">.</op:operator><name pos:line="408" pos:column="33">updateStudentDept</name></name><argument_list pos:line="408" pos:column="50">(<argument><expr><call><name><name pos:line="408" pos:column="51">d</name><op:operator pos:line="408" pos:column="52">.</op:operator><name pos:line="408" pos:column="53">getDepartmentID</name></name><argument_list pos:line="408" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="409" pos:column="17">assertTrue</name><argument_list pos:line="409" pos:column="27">(<argument><expr><name pos:line="409" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="412" pos:column="9">@<name pos:line="412" pos:column="10">Test</name><argument_list pos:line="412" pos:column="14">(<argument><expr><name pos:line="412" pos:column="15">expected</name><op:operator pos:line="412" pos:column="23">=</op:operator><name><name pos:line="412" pos:column="24">Department</name><op:operator pos:line="412" pos:column="34">.</op:operator><name pos:line="412" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="412" pos:column="66">.</op:operator><name pos:line="412" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="413" pos:column="9">public</specifier> <name pos:line="413" pos:column="16">void</name></type> <name pos:line="413" pos:column="21">testUpdateStudentDept2</name><parameter_list pos:line="413" pos:column="43">()</parameter_list> <throws pos:line="413" pos:column="46">throws <argument><expr><name><name pos:line="413" pos:column="53">Department</name><op:operator pos:line="413" pos:column="63">.</op:operator><name pos:line="413" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="413" pos:column="97">Student</name><op:operator pos:line="413" pos:column="104">.</op:operator><name pos:line="413" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="413" pos:column="128">People</name><op:operator pos:line="413" pos:column="134">.</op:operator><name pos:line="413" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="413" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="415" pos:column="17">Department</name></type> <name pos:line="415" pos:column="28">d</name><init pos:line="415" pos:column="29">=<expr><op:operator pos:line="415" pos:column="30">new</op:operator> <call><name pos:line="415" pos:column="34">Department</name><argument_list pos:line="415" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="415" pos:column="45">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="416" pos:column="17">Student</name></type> <name pos:line="416" pos:column="25">p</name><init pos:line="416" pos:column="26">=<expr><op:operator pos:line="416" pos:column="27">new</op:operator> <call><name pos:line="416" pos:column="31">Student</name><argument_list pos:line="416" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="416" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="417" pos:column="17">boolean</name></type> <name pos:line="417" pos:column="25">check</name><init pos:line="417" pos:column="30">=<expr><call><name><name pos:line="417" pos:column="31">p</name><op:operator pos:line="417" pos:column="32">.</op:operator><name pos:line="417" pos:column="33">updateStudentDept</name></name><argument_list pos:line="417" pos:column="50">(<argument><expr><call><name><name pos:line="417" pos:column="51">d</name><op:operator pos:line="417" pos:column="52">.</op:operator><name pos:line="417" pos:column="53">getDepartmentID</name></name><argument_list pos:line="417" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="420" pos:column="9">@<name pos:line="420" pos:column="10">Test</name><argument_list pos:line="420" pos:column="14">(<argument><expr><name pos:line="420" pos:column="15">expected</name><op:operator pos:line="420" pos:column="23">=</op:operator><name><name pos:line="420" pos:column="24">People</name><op:operator pos:line="420" pos:column="30">.</op:operator><name pos:line="420" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="420" pos:column="58">.</op:operator><name pos:line="420" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="421" pos:column="9">public</specifier> <name pos:line="421" pos:column="16">void</name></type> <name pos:line="421" pos:column="21">testUpdateStudentDept3</name><parameter_list pos:line="421" pos:column="43">()</parameter_list> <throws pos:line="421" pos:column="46">throws <argument><expr><name><name pos:line="421" pos:column="53">Department</name><op:operator pos:line="421" pos:column="63">.</op:operator><name pos:line="421" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="421" pos:column="97">Student</name><op:operator pos:line="421" pos:column="104">.</op:operator><name pos:line="421" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="421" pos:column="128">People</name><op:operator pos:line="421" pos:column="134">.</op:operator><name pos:line="421" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="421" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="423" pos:column="17">Department</name></type> <name pos:line="423" pos:column="28">d</name><init pos:line="423" pos:column="29">=<expr><op:operator pos:line="423" pos:column="30">new</op:operator> <call><name pos:line="423" pos:column="34">Department</name><argument_list pos:line="423" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="423" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="424" pos:column="17">Student</name></type> <name pos:line="424" pos:column="25">p</name><init pos:line="424" pos:column="26">=<expr><op:operator pos:line="424" pos:column="27">new</op:operator> <call><name pos:line="424" pos:column="31">Student</name><argument_list pos:line="424" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="424" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="425" pos:column="17">boolean</name></type> <name pos:line="425" pos:column="25">check</name><init pos:line="425" pos:column="30">=<expr><call><name><name pos:line="425" pos:column="31">p</name><op:operator pos:line="425" pos:column="32">.</op:operator><name pos:line="425" pos:column="33">updateStudentDept</name></name><argument_list pos:line="425" pos:column="50">(<argument><expr><call><name><name pos:line="425" pos:column="51">d</name><op:operator pos:line="425" pos:column="52">.</op:operator><name pos:line="425" pos:column="53">getDepartmentID</name></name><argument_list pos:line="425" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="428" pos:column="9">@<name pos:line="428" pos:column="10">Test</name><argument_list pos:line="428" pos:column="14">(<argument><expr><name pos:line="428" pos:column="15">expected</name><op:operator pos:line="428" pos:column="23">=</op:operator><name><name pos:line="428" pos:column="24">People</name><op:operator pos:line="428" pos:column="30">.</op:operator><name pos:line="428" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="428" pos:column="58">.</op:operator><name pos:line="428" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="429" pos:column="9">public</specifier> <name pos:line="429" pos:column="16">void</name></type> <name pos:line="429" pos:column="21">testUpdateStudentDept4</name><parameter_list pos:line="429" pos:column="43">()</parameter_list> <throws pos:line="429" pos:column="46">throws <argument><expr><name><name pos:line="429" pos:column="53">Department</name><op:operator pos:line="429" pos:column="63">.</op:operator><name pos:line="429" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="429" pos:column="97">Student</name><op:operator pos:line="429" pos:column="104">.</op:operator><name pos:line="429" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="429" pos:column="128">People</name><op:operator pos:line="429" pos:column="134">.</op:operator><name pos:line="429" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="429" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="431" pos:column="17">Department</name></type> <name pos:line="431" pos:column="28">d</name><init pos:line="431" pos:column="29">=<expr><op:operator pos:line="431" pos:column="30">new</op:operator> <call><name pos:line="431" pos:column="34">Department</name><argument_list pos:line="431" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="431" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="432" pos:column="17">Student</name></type> <name pos:line="432" pos:column="25">p</name><init pos:line="432" pos:column="26">=<expr><op:operator pos:line="432" pos:column="27">new</op:operator> <call><name pos:line="432" pos:column="31">Student</name><argument_list pos:line="432" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="432" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="433" pos:column="17">boolean</name></type> <name pos:line="433" pos:column="25">check</name><init pos:line="433" pos:column="30">=<expr><call><name><name pos:line="433" pos:column="31">p</name><op:operator pos:line="433" pos:column="32">.</op:operator><name pos:line="433" pos:column="33">updateStudentDept</name></name><argument_list pos:line="433" pos:column="50">(<argument><expr><call><name><name pos:line="433" pos:column="51">d</name><op:operator pos:line="433" pos:column="52">.</op:operator><name pos:line="433" pos:column="53">getDepartmentID</name></name><argument_list pos:line="433" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="436" pos:column="9">@<name pos:line="436" pos:column="10">Test</name><argument_list pos:line="436" pos:column="14">(<argument><expr><name pos:line="436" pos:column="15">expected</name><op:operator pos:line="436" pos:column="23">=</op:operator><name><name pos:line="436" pos:column="24">Department</name><op:operator pos:line="436" pos:column="34">.</op:operator><name pos:line="436" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="436" pos:column="66">.</op:operator><name pos:line="436" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="437" pos:column="9">public</specifier> <name pos:line="437" pos:column="16">void</name></type> <name pos:line="437" pos:column="21">testUpdateStudentDept5</name><parameter_list pos:line="437" pos:column="43">()</parameter_list> <throws pos:line="437" pos:column="46">throws <argument><expr><name><name pos:line="437" pos:column="53">Department</name><op:operator pos:line="437" pos:column="63">.</op:operator><name pos:line="437" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="437" pos:column="97">Student</name><op:operator pos:line="437" pos:column="104">.</op:operator><name pos:line="437" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="437" pos:column="128">People</name><op:operator pos:line="437" pos:column="134">.</op:operator><name pos:line="437" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="437" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="439" pos:column="17">Department</name></type> <name pos:line="439" pos:column="28">d</name><init pos:line="439" pos:column="29">=<expr><op:operator pos:line="439" pos:column="30">new</op:operator> <call><name pos:line="439" pos:column="34">Department</name><argument_list pos:line="439" pos:column="44">(<argument><expr><lit:literal type="null" pos:line="439" pos:column="45">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="440" pos:column="17">Student</name></type> <name pos:line="440" pos:column="25">p</name><init pos:line="440" pos:column="26">=<expr><op:operator pos:line="440" pos:column="27">new</op:operator> <call><name pos:line="440" pos:column="31">Student</name><argument_list pos:line="440" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="440" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="441" pos:column="17">boolean</name></type> <name pos:line="441" pos:column="25">check</name><init pos:line="441" pos:column="30">=<expr><call><name><name pos:line="441" pos:column="31">p</name><op:operator pos:line="441" pos:column="32">.</op:operator><name pos:line="441" pos:column="33">updateStudentDept</name></name><argument_list pos:line="441" pos:column="50">(<argument><expr><call><name><name pos:line="441" pos:column="51">d</name><op:operator pos:line="441" pos:column="52">.</op:operator><name pos:line="441" pos:column="53">getDepartmentID</name></name><argument_list pos:line="441" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="444" pos:column="9">@<name pos:line="444" pos:column="10">Test</name><argument_list pos:line="444" pos:column="14">(<argument><expr><name pos:line="444" pos:column="15">expected</name><op:operator pos:line="444" pos:column="23">=</op:operator><name><name pos:line="444" pos:column="24">Department</name><op:operator pos:line="444" pos:column="34">.</op:operator><name pos:line="444" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="444" pos:column="66">.</op:operator><name pos:line="444" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="445" pos:column="9">public</specifier> <name pos:line="445" pos:column="16">void</name></type> <name pos:line="445" pos:column="21">testUpdateStudentDept6</name><parameter_list pos:line="445" pos:column="43">()</parameter_list> <throws pos:line="445" pos:column="46">throws <argument><expr><name><name pos:line="445" pos:column="53">Department</name><op:operator pos:line="445" pos:column="63">.</op:operator><name pos:line="445" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="445" pos:column="97">Student</name><op:operator pos:line="445" pos:column="104">.</op:operator><name pos:line="445" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="445" pos:column="128">People</name><op:operator pos:line="445" pos:column="134">.</op:operator><name pos:line="445" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="445" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="447" pos:column="17">Department</name></type> <name pos:line="447" pos:column="28">d</name><init pos:line="447" pos:column="29">=<expr><op:operator pos:line="447" pos:column="30">new</op:operator> <call><name pos:line="447" pos:column="34">Department</name><argument_list pos:line="447" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="447" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="448" pos:column="17">Student</name></type> <name pos:line="448" pos:column="25">p</name><init pos:line="448" pos:column="26">=<expr><op:operator pos:line="448" pos:column="27">new</op:operator> <call><name pos:line="448" pos:column="31">Student</name><argument_list pos:line="448" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="448" pos:column="39">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="449" pos:column="17">boolean</name></type> <name pos:line="449" pos:column="25">check</name><init pos:line="449" pos:column="30">=<expr><call><name><name pos:line="449" pos:column="31">p</name><op:operator pos:line="449" pos:column="32">.</op:operator><name pos:line="449" pos:column="33">updateStudentDept</name></name><argument_list pos:line="449" pos:column="50">(<argument><expr><call><name><name pos:line="449" pos:column="51">d</name><op:operator pos:line="449" pos:column="52">.</op:operator><name pos:line="449" pos:column="53">getDepartmentID</name></name><argument_list pos:line="449" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="452" pos:column="9">@<name pos:line="452" pos:column="10">Test</name></annotation>
	<specifier pos:line="453" pos:column="9">public</specifier> <name pos:line="453" pos:column="16">void</name></type> <name pos:line="453" pos:column="21">testUpdateStudentDept7</name><parameter_list pos:line="453" pos:column="43">()</parameter_list> <throws pos:line="453" pos:column="46">throws <argument><expr><name><name pos:line="453" pos:column="53">Department</name><op:operator pos:line="453" pos:column="63">.</op:operator><name pos:line="453" pos:column="64">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="97">Student</name><op:operator pos:line="453" pos:column="104">.</op:operator><name pos:line="453" pos:column="105">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="128">People</name><op:operator pos:line="453" pos:column="134">.</op:operator><name pos:line="453" pos:column="135">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="453" pos:column="163">{
		
		<decl_stmt><decl><type><name pos:line="455" pos:column="17">Department</name></type> <name pos:line="455" pos:column="28">d</name><init pos:line="455" pos:column="29">=<expr><op:operator pos:line="455" pos:column="30">new</op:operator> <call><name pos:line="455" pos:column="34">Department</name><argument_list pos:line="455" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="455" pos:column="45">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="456" pos:column="17">Student</name></type> <name pos:line="456" pos:column="25">p</name><init pos:line="456" pos:column="26">=<expr><op:operator pos:line="456" pos:column="27">new</op:operator> <call><name pos:line="456" pos:column="31">Student</name><argument_list pos:line="456" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="456" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="457" pos:column="17">boolean</name></type> <name pos:line="457" pos:column="25">check</name><init pos:line="457" pos:column="30">=<expr><call><name><name pos:line="457" pos:column="31">p</name><op:operator pos:line="457" pos:column="32">.</op:operator><name pos:line="457" pos:column="33">updateStudentDept</name></name><argument_list pos:line="457" pos:column="50">(<argument><expr><call><name><name pos:line="457" pos:column="51">d</name><op:operator pos:line="457" pos:column="52">.</op:operator><name pos:line="457" pos:column="53">getDepartmentID</name></name><argument_list pos:line="457" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="458" pos:column="17">assertTrue</name><argument_list pos:line="458" pos:column="27">(<argument><expr><name pos:line="458" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
}</block></class>
</unit>
