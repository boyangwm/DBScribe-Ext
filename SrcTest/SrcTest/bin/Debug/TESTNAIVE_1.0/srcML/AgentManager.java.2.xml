<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\controller\AgentManager.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">tada</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">com</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">riskIt</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">data</name></name>.*;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">com</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">riskIt</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">db</name><op:operator pos:line="11" pos:column="21">.</op:operator><name pos:line="11" pos:column="22">DatabaseConnection</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">util</name><op:operator pos:line="12" pos:column="23">.</op:operator><name pos:line="12" pos:column="24">AccessorMethods</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">util</name><op:operator pos:line="13" pos:column="23">.</op:operator><name pos:line="13" pos:column="24">RiskItConstants</name></name>;</import>


<comment type="block" format="javadoc" pos:line="16" pos:column="1">/**
 * This class has methods that is related to the agent queries
 * and help methods that helps create a new user, calculate the 
 * score and other helper methods
 * @author Poornima
 *
 */</comment>

<class><specifier pos:line="24" pos:column="1">public</specifier> class <name pos:line="24" pos:column="14">AgentManager</name> 
<block pos:line="25" pos:column="1">{
	
	<decl_stmt><decl><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">AccessorMethods</name></type> <name pos:line="27" pos:column="33">acc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="28" pos:column="9">private</specifier> <name pos:line="28" pos:column="17">ZipcodeManager</name></type> <name pos:line="28" pos:column="32">zipcodeManager</name></decl>;</decl_stmt> 
	
	<constructor><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">AgentManager</name><parameter_list pos:line="30" pos:column="28">()</parameter_list>
	<block pos:line="31" pos:column="9">{
		<expr_stmt><expr><name pos:line="32" pos:column="17">acc</name> <op:operator pos:line="32" pos:column="21">=</op:operator> <op:operator pos:line="32" pos:column="23">new</op:operator> <call><name pos:line="32" pos:column="27">AccessorMethods</name><argument_list pos:line="32" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">zipcodeManager</name> <op:operator pos:line="33" pos:column="32">=</op:operator> <op:operator pos:line="33" pos:column="34">new</op:operator> <call><name pos:line="33" pos:column="38">ZipcodeManager</name><argument_list pos:line="33" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">setZipcodeManager</name><parameter_list pos:line="36" pos:column="38">(<param><decl><type><name pos:line="36" pos:column="39">ZipcodeManager</name></type> <name pos:line="36" pos:column="54">zm</name></decl></param>)</parameter_list>
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">zipcodeManager</name> <op:operator pos:line="38" pos:column="32">=</op:operator> <name pos:line="38" pos:column="34">zm</name></expr>;</expr_stmt>
	}</block></function>	
	<comment type="block" format="javadoc" pos:line="40" pos:column="9">/**
	 * This method accepts all information regarding a customer and 
	 * then writes it to the appropriate table in database.
	 * @param all parameters holds user data to be inserted into table
	 * @return success - return 1 if insert is success else 0, if data is already 
	 * 					 present in database
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">int</name></type> <name pos:line="48" pos:column="20">createNewUser</name><parameter_list pos:line="48" pos:column="33">(<param><decl><type><name pos:line="48" pos:column="34">String</name></type> <name pos:line="48" pos:column="41">name</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="47">String</name></type> <name pos:line="48" pos:column="54">zipcode</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="63">long</name></type> <name pos:line="48" pos:column="68">ssn</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="73">int</name></type> <name pos:line="48" pos:column="77">age</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="82">String</name></type> <name pos:line="48" pos:column="89">sex</name></decl></param>,
							 <param><decl><type><name pos:line="49" pos:column="58">String</name></type> <name pos:line="49" pos:column="65">marital</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="74">String</name></type> <name pos:line="49" pos:column="81">race</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="87">String</name></type> <name pos:line="49" pos:column="94">taxStatus</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="105">String</name></type> <name pos:line="49" pos:column="112">taxDetails</name></decl></param>,
							 <param><decl><type><name pos:line="50" pos:column="58">String</name></type> <name pos:line="50" pos:column="65">houseHoldDetails</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="83">String</name></type> <name pos:line="50" pos:column="90">fatherOrigin</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="104">String</name></type> <name pos:line="50" pos:column="111">motherOrigin</name></decl></param>,
							 <param><decl><type><name pos:line="51" pos:column="58">String</name></type> <name pos:line="51" pos:column="65">birthCountry</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="79">String</name></type> <name pos:line="51" pos:column="86">citizenship</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="99">int</name></type> <name pos:line="51" pos:column="103">capitalGains</name></decl></param>, 
							 <param><decl><type><name pos:line="52" pos:column="58">int</name></type> <name pos:line="52" pos:column="62">capitalLosses</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="77">int</name></type> <name pos:line="52" pos:column="81">stockDividend</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="96">String</name></type> <name pos:line="52" pos:column="103">parents</name></decl></param>, 
							 <param><decl><type><name pos:line="53" pos:column="58">String</name></type> <name pos:line="53" pos:column="65">unEmploymentReason</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="85">String</name></type> <name pos:line="53" pos:column="92">employmentStatus</name></decl></param>,
							 <param><decl><type><name pos:line="54" pos:column="58">String</name></type> <name pos:line="54" pos:column="65">education</name></decl></param>,<param><decl><type><name pos:line="54" pos:column="75">String</name></type> <name pos:line="54" pos:column="82">eduEnroll</name></decl></param>,<param><decl><type><name pos:line="54" pos:column="92">String</name></type> <name pos:line="54" pos:column="99">workClass</name></decl></param>,
							 <param><decl><type><name pos:line="55" pos:column="58">String</name></type> <name pos:line="55" pos:column="65">unionMember</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="78">int</name></type> <name pos:line="55" pos:column="82">industryCode</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="96">int</name></type> <name pos:line="55" pos:column="100">occupationCode</name></decl></param>,
							 <param><decl><type><name pos:line="56" pos:column="58">int</name></type> <name pos:line="56" pos:column="62">employerSize</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="76">int</name></type> <name pos:line="56" pos:column="80">weekWage</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="90">int</name></type> <name pos:line="56" pos:column="94">selfEmployed</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="108">int</name></type> <name pos:line="56" pos:column="112">workWeeks</name></decl></param>)</parameter_list>
	<block pos:line="57" pos:column="9">{	
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">int</name></type> <name pos:line="58" pos:column="21">success</name> <init pos:line="58" pos:column="29">= <expr><lit:literal type="number" pos:line="58" pos:column="31">0</lit:literal></expr></init><op:operator pos:line="58" pos:column="32">,</op:operator> <name pos:line="58" pos:column="34">count</name> <init pos:line="58" pos:column="40">=<expr><lit:literal type="number" pos:line="58" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">Statement</name></type> <name pos:line="59" pos:column="27">stat</name> <init pos:line="59" pos:column="32">= <expr><lit:literal type="null" pos:line="59" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">ResultSet</name></type> <name pos:line="60" pos:column="27">result</name> <init pos:line="60" pos:column="34">= <expr><lit:literal type="null" pos:line="60" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
			<try pos:line="62" pos:column="25">try
			<block pos:line="63" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="64" pos:column="33">Connection</name></type> <name pos:line="64" pos:column="44">conn</name> <init pos:line="64" pos:column="49">= <expr><call><name><name pos:line="64" pos:column="51">DatabaseConnection</name><op:operator pos:line="64" pos:column="69">.</op:operator><name pos:line="64" pos:column="70">getConnection</name></name><argument_list pos:line="64" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="65" pos:column="33">stat</name> <op:operator pos:line="65" pos:column="38">=</op:operator> <call><name><name pos:line="65" pos:column="40">conn</name><op:operator pos:line="65" pos:column="44">.</op:operator><name pos:line="65" pos:column="45">createStatement</name></name><argument_list pos:line="65" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
					
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">System</name><op:operator pos:line="67" pos:column="39">.</op:operator><name pos:line="67" pos:column="40">out</name><op:operator pos:line="67" pos:column="43">.</op:operator><name pos:line="67" pos:column="44">println</name></name><argument_list pos:line="67" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="52">"Customer details you entered are ....."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="68" pos:column="33">System</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">out</name><op:operator pos:line="68" pos:column="43">.</op:operator><name pos:line="68" pos:column="44">println</name></name><argument_list pos:line="68" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="52">" Name                       : "</lit:literal> <op:operator pos:line="68" pos:column="85">+</op:operator> <name pos:line="68" pos:column="87">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="69" pos:column="33">System</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">out</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">println</name></name><argument_list pos:line="69" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="52">" SSN                        : "</lit:literal> <op:operator pos:line="69" pos:column="85">+</op:operator> <name pos:line="69" pos:column="87">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="70" pos:column="33">System</name><op:operator pos:line="70" pos:column="39">.</op:operator><name pos:line="70" pos:column="40">out</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">println</name></name><argument_list pos:line="70" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="52">" Age                        : "</lit:literal> <op:operator pos:line="70" pos:column="85">+</op:operator> <name pos:line="70" pos:column="87">age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="71" pos:column="33">System</name><op:operator pos:line="71" pos:column="39">.</op:operator><name pos:line="71" pos:column="40">out</name><op:operator pos:line="71" pos:column="43">.</op:operator><name pos:line="71" pos:column="44">println</name></name><argument_list pos:line="71" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="52">" Sex                        : "</lit:literal> <op:operator pos:line="71" pos:column="85">+</op:operator> <name pos:line="71" pos:column="87">sex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="72" pos:column="33">System</name><op:operator pos:line="72" pos:column="39">.</op:operator><name pos:line="72" pos:column="40">out</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">println</name></name><argument_list pos:line="72" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="52">" Marital Status             : "</lit:literal> <op:operator pos:line="72" pos:column="85">+</op:operator> <name pos:line="72" pos:column="87">marital</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="73" pos:column="33">System</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">out</name><op:operator pos:line="73" pos:column="43">.</op:operator><name pos:line="73" pos:column="44">println</name></name><argument_list pos:line="73" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="52">" Race                       : "</lit:literal> <op:operator pos:line="73" pos:column="85">+</op:operator> <name pos:line="73" pos:column="87">race</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="74" pos:column="33">System</name><op:operator pos:line="74" pos:column="39">.</op:operator><name pos:line="74" pos:column="40">out</name><op:operator pos:line="74" pos:column="43">.</op:operator><name pos:line="74" pos:column="44">println</name></name><argument_list pos:line="74" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="52">" Tax Status                 : "</lit:literal> <op:operator pos:line="74" pos:column="85">+</op:operator> <name pos:line="74" pos:column="87">taxStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="75" pos:column="33">System</name><op:operator pos:line="75" pos:column="39">.</op:operator><name pos:line="75" pos:column="40">out</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">println</name></name><argument_list pos:line="75" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="52">" Tax Details                : "</lit:literal> <op:operator pos:line="75" pos:column="85">+</op:operator> <name pos:line="75" pos:column="87">taxDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="76" pos:column="33">System</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">out</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">println</name></name><argument_list pos:line="76" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="52">" House hold information     : "</lit:literal> <op:operator pos:line="76" pos:column="85">+</op:operator> <name pos:line="76" pos:column="87">houseHoldDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">System</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">out</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">println</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="52">" Father's origin            : "</lit:literal> <op:operator pos:line="77" pos:column="85">+</op:operator> <name pos:line="77" pos:column="87">fatherOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">System</name><op:operator pos:line="78" pos:column="39">.</op:operator><name pos:line="78" pos:column="40">out</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">println</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="52">" Mother's origin            : "</lit:literal> <op:operator pos:line="78" pos:column="85">+</op:operator> <name pos:line="78" pos:column="87">motherOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="79" pos:column="33">System</name><op:operator pos:line="79" pos:column="39">.</op:operator><name pos:line="79" pos:column="40">out</name><op:operator pos:line="79" pos:column="43">.</op:operator><name pos:line="79" pos:column="44">println</name></name><argument_list pos:line="79" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="52">" Birth Country              : "</lit:literal> <op:operator pos:line="79" pos:column="85">+</op:operator> <name pos:line="79" pos:column="87">birthCountry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="80" pos:column="33">System</name><op:operator pos:line="80" pos:column="39">.</op:operator><name pos:line="80" pos:column="40">out</name><op:operator pos:line="80" pos:column="43">.</op:operator><name pos:line="80" pos:column="44">println</name></name><argument_list pos:line="80" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="52">" CitizenShip                : "</lit:literal> <op:operator pos:line="80" pos:column="85">+</op:operator> <name pos:line="80" pos:column="87">citizenship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="81" pos:column="33">System</name><op:operator pos:line="81" pos:column="39">.</op:operator><name pos:line="81" pos:column="40">out</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">println</name></name><argument_list pos:line="81" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="52">" Capital Gains              : "</lit:literal> <op:operator pos:line="81" pos:column="85">+</op:operator> <name pos:line="81" pos:column="87">capitalGains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">System</name><op:operator pos:line="82" pos:column="39">.</op:operator><name pos:line="82" pos:column="40">out</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">println</name></name><argument_list pos:line="82" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="52">" Capital losses             : "</lit:literal> <op:operator pos:line="82" pos:column="85">+</op:operator> <name pos:line="82" pos:column="87">capitalLosses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="83" pos:column="33">System</name><op:operator pos:line="83" pos:column="39">.</op:operator><name pos:line="83" pos:column="40">out</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">println</name></name><argument_list pos:line="83" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="52">" Stock dividends            : "</lit:literal> <op:operator pos:line="83" pos:column="85">+</op:operator> <name pos:line="83" pos:column="87">stockDividend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="84" pos:column="33">System</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">out</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">println</name></name><argument_list pos:line="84" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="52">" Parents'Informarion        : "</lit:literal> <op:operator pos:line="84" pos:column="85">+</op:operator> <name pos:line="84" pos:column="87">parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="85" pos:column="33">System</name><op:operator pos:line="85" pos:column="39">.</op:operator><name pos:line="85" pos:column="40">out</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">println</name></name><argument_list pos:line="85" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="52">" Employment Status          : "</lit:literal> <op:operator pos:line="85" pos:column="85">+</op:operator> <name pos:line="85" pos:column="87">employmentStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="86" pos:column="33">System</name><op:operator pos:line="86" pos:column="39">.</op:operator><name pos:line="86" pos:column="40">out</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">println</name></name><argument_list pos:line="86" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="52">" Un-employment reason       : "</lit:literal> <op:operator pos:line="86" pos:column="85">+</op:operator> <name pos:line="86" pos:column="87">unEmploymentReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="87" pos:column="33">System</name><op:operator pos:line="87" pos:column="39">.</op:operator><name pos:line="87" pos:column="40">out</name><op:operator pos:line="87" pos:column="43">.</op:operator><name pos:line="87" pos:column="44">println</name></name><argument_list pos:line="87" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="52">" Education                  : "</lit:literal> <op:operator pos:line="87" pos:column="85">+</op:operator> <name pos:line="87" pos:column="87">education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="88" pos:column="33">System</name><op:operator pos:line="88" pos:column="39">.</op:operator><name pos:line="88" pos:column="40">out</name><op:operator pos:line="88" pos:column="43">.</op:operator><name pos:line="88" pos:column="44">println</name></name><argument_list pos:line="88" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="52">" Further education enrolled : "</lit:literal> <op:operator pos:line="88" pos:column="85">+</op:operator> <name pos:line="88" pos:column="87">eduEnroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="89" pos:column="33">System</name><op:operator pos:line="89" pos:column="39">.</op:operator><name pos:line="89" pos:column="40">out</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">println</name></name><argument_list pos:line="89" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="52">" Work Class                 : "</lit:literal> <op:operator pos:line="89" pos:column="85">+</op:operator> <name pos:line="89" pos:column="87">workClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="90" pos:column="33">System</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">out</name><op:operator pos:line="90" pos:column="43">.</op:operator><name pos:line="90" pos:column="44">println</name></name><argument_list pos:line="90" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="52">" Union member               : "</lit:literal> <op:operator pos:line="90" pos:column="85">+</op:operator> <name pos:line="90" pos:column="87">unionMember</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">System</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">out</name><op:operator pos:line="91" pos:column="43">.</op:operator><name pos:line="91" pos:column="44">println</name></name><argument_list pos:line="91" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="52">" Industry code              : "</lit:literal> <op:operator pos:line="91" pos:column="85">+</op:operator> <name pos:line="91" pos:column="87">industryCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">System</name><op:operator pos:line="92" pos:column="39">.</op:operator><name pos:line="92" pos:column="40">out</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">println</name></name><argument_list pos:line="92" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="52">" Occupation code            : "</lit:literal> <op:operator pos:line="92" pos:column="85">+</op:operator> <name pos:line="92" pos:column="87">occupationCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="93" pos:column="33">System</name><op:operator pos:line="93" pos:column="39">.</op:operator><name pos:line="93" pos:column="40">out</name><op:operator pos:line="93" pos:column="43">.</op:operator><name pos:line="93" pos:column="44">println</name></name><argument_list pos:line="93" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="52">" Employer Size              : "</lit:literal> <op:operator pos:line="93" pos:column="85">+</op:operator> <name pos:line="93" pos:column="87">employerSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="94" pos:column="33">System</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">out</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">println</name></name><argument_list pos:line="94" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="52">" Self-Employed              : "</lit:literal> <op:operator pos:line="94" pos:column="85">+</op:operator> <name pos:line="94" pos:column="87">selfEmployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">System</name><op:operator pos:line="95" pos:column="39">.</op:operator><name pos:line="95" pos:column="40">out</name><op:operator pos:line="95" pos:column="43">.</op:operator><name pos:line="95" pos:column="44">println</name></name><argument_list pos:line="95" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="52">" Week wage                  : "</lit:literal> <op:operator pos:line="95" pos:column="85">+</op:operator> <name pos:line="95" pos:column="87">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="96" pos:column="33">System</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">out</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">println</name></name><argument_list pos:line="96" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="52">" No. of weeks of work       : "</lit:literal> <op:operator pos:line="96" pos:column="85">+</op:operator> <name pos:line="96" pos:column="87">workWeeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				
				<comment type="line" pos:line="99" pos:column="33">//Search if the data is already there in table</comment>
				<decl_stmt><decl><type><name pos:line="100" pos:column="33">String</name></type> <name pos:line="100" pos:column="40">cmd_dataCheck</name> <init pos:line="100" pos:column="54">= <expr><lit:literal type="string" pos:line="100" pos:column="56">"Select * from userrecord where ssn = "</lit:literal>
										<op:operator pos:line="101" pos:column="81">+</op:operator> <name pos:line="101" pos:column="83">ssn</name></expr></init></decl>;</decl_stmt>
				
				<comment type="line" pos:line="103" pos:column="33">//get connection to the table and insert all the data	</comment>
				<decl_stmt><decl><type><name pos:line="104" pos:column="33">String</name></type> <name pos:line="104" pos:column="40">cmd_userRecord</name> <init pos:line="104" pos:column="55">= <expr><lit:literal type="string" pos:line="104" pos:column="57">"INSERT INTO userrecord VALUES ('"</lit:literal> <op:operator pos:line="104" pos:column="92">+</op:operator> <name pos:line="104" pos:column="94">name</name> <op:operator pos:line="104" pos:column="99">+</op:operator> <lit:literal type="string" pos:line="104" pos:column="101">"', '"</lit:literal> 
										<op:operator pos:line="105" pos:column="81">+</op:operator> <name pos:line="105" pos:column="83">zipcode</name> <op:operator pos:line="105" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="105" pos:column="93">"', "</lit:literal> <op:operator pos:line="105" pos:column="99">+</op:operator> <name pos:line="105" pos:column="101">ssn</name> <op:operator pos:line="105" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="105" pos:column="107">", "</lit:literal><op:operator pos:line="105" pos:column="111">+</op:operator> <name pos:line="105" pos:column="113">age</name> <op:operator pos:line="105" pos:column="117">+</op:operator><lit:literal type="string" pos:line="105" pos:column="118">", '"</lit:literal><op:operator pos:line="105" pos:column="123">+</op:operator> <name pos:line="105" pos:column="125">sex</name> <op:operator pos:line="105" pos:column="129">+</op:operator><lit:literal type="string" pos:line="105" pos:column="130">"', '"</lit:literal> 
										<op:operator pos:line="106" pos:column="81">+</op:operator><name pos:line="106" pos:column="82">marital</name> <op:operator pos:line="106" pos:column="90">+</op:operator><lit:literal type="string" pos:line="106" pos:column="91">"', '"</lit:literal> <op:operator pos:line="106" pos:column="98">+</op:operator> <name pos:line="106" pos:column="100">race</name> <op:operator pos:line="106" pos:column="105">+</op:operator><lit:literal type="string" pos:line="106" pos:column="106">"', '"</lit:literal> <op:operator pos:line="106" pos:column="113">+</op:operator> <name pos:line="106" pos:column="115">taxStatus</name> <op:operator pos:line="106" pos:column="125">+</op:operator> <lit:literal type="string" pos:line="106" pos:column="127">"', '"</lit:literal> 
										<op:operator pos:line="107" pos:column="81">+</op:operator> <name pos:line="107" pos:column="83">taxDetails</name> <op:operator pos:line="107" pos:column="94">+</op:operator><lit:literal type="string" pos:line="107" pos:column="95">"', '"</lit:literal> <op:operator pos:line="107" pos:column="102">+</op:operator> <name pos:line="107" pos:column="104">houseHoldDetails</name> <op:operator pos:line="107" pos:column="121">+</op:operator><lit:literal type="string" pos:line="107" pos:column="122">"', '"</lit:literal> <op:operator pos:line="107" pos:column="129">+</op:operator> <name pos:line="107" pos:column="131">fatherOrigin</name>
										<op:operator pos:line="108" pos:column="81">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="83">"', '"</lit:literal> <op:operator pos:line="108" pos:column="90">+</op:operator> <name pos:line="108" pos:column="92">motherOrigin</name> <op:operator pos:line="108" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="107">"', '"</lit:literal> <op:operator pos:line="108" pos:column="114">+</op:operator> <name pos:line="108" pos:column="116">birthCountry</name> <op:operator pos:line="108" pos:column="129">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="131">"', '"</lit:literal> 
										<op:operator pos:line="109" pos:column="81">+</op:operator> <name pos:line="109" pos:column="83">citizenship</name> <op:operator pos:line="109" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="109" pos:column="97">"')"</lit:literal></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name pos:line="111" pos:column="33">String</name></type> <name pos:line="111" pos:column="40">cmd_investment</name> <init pos:line="111" pos:column="55">= <expr><lit:literal type="string" pos:line="111" pos:column="57">"INSERT INTO investment VALUES ("</lit:literal> <op:operator pos:line="111" pos:column="91">+</op:operator> <name pos:line="111" pos:column="93">ssn</name> <op:operator pos:line="111" pos:column="97">+</op:operator><lit:literal type="string" pos:line="111" pos:column="98">", "</lit:literal> 
										<op:operator pos:line="112" pos:column="81">+</op:operator> <name pos:line="112" pos:column="83">capitalGains</name> <op:operator pos:line="112" pos:column="96">+</op:operator><lit:literal type="string" pos:line="112" pos:column="97">", "</lit:literal> <op:operator pos:line="112" pos:column="102">+</op:operator> <name pos:line="112" pos:column="104">capitalLosses</name> <op:operator pos:line="112" pos:column="118">+</op:operator><lit:literal type="string" pos:line="112" pos:column="119">", "</lit:literal> 
										<op:operator pos:line="113" pos:column="81">+</op:operator> <name pos:line="113" pos:column="83">stockDividend</name>	<op:operator pos:line="113" pos:column="97">+</op:operator> <lit:literal type="string" pos:line="113" pos:column="99">")"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="114" pos:column="33">String</name></type> <name pos:line="114" pos:column="40">cmd_youth</name> <init pos:line="114" pos:column="50">= <expr><lit:literal type="string" pos:line="114" pos:column="52">"INSERT INTO youth VALUES ("</lit:literal> <op:operator pos:line="114" pos:column="81">+</op:operator> <name pos:line="114" pos:column="83">ssn</name> <op:operator pos:line="114" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="114" pos:column="89">", '"</lit:literal> 
									<op:operator pos:line="115" pos:column="73">+</op:operator> <name pos:line="115" pos:column="75">parents</name> <op:operator pos:line="115" pos:column="83">+</op:operator><lit:literal type="string" pos:line="115" pos:column="84">"')"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="116" pos:column="33">String</name></type> <name pos:line="116" pos:column="40">cmd_employment</name> <init pos:line="116" pos:column="55">= <expr><lit:literal type="string" pos:line="116" pos:column="57">"INSERT INTO employmentstat VALUES ("</lit:literal> <op:operator pos:line="116" pos:column="95">+</op:operator> <name pos:line="116" pos:column="97">ssn</name> <op:operator pos:line="116" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="116" pos:column="103">", '"</lit:literal>
										<op:operator pos:line="117" pos:column="81">+</op:operator> <name pos:line="117" pos:column="83">unEmploymentReason</name> <op:operator pos:line="117" pos:column="102">+</op:operator> <lit:literal type="string" pos:line="117" pos:column="104">"', '"</lit:literal> <op:operator pos:line="117" pos:column="111">+</op:operator> <name pos:line="117" pos:column="113">employmentStatus</name> <op:operator pos:line="117" pos:column="130">+</op:operator> <lit:literal type="string" pos:line="117" pos:column="132">"')"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="118" pos:column="33">String</name></type> <name pos:line="118" pos:column="40">cmd_education</name> <init pos:line="118" pos:column="54">= <expr><lit:literal type="string" pos:line="118" pos:column="56">"INSERT INTO education VALUES ("</lit:literal> <op:operator pos:line="118" pos:column="89">+</op:operator> <name pos:line="118" pos:column="91">ssn</name> <op:operator pos:line="118" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="118" pos:column="97">", '"</lit:literal> 
										<op:operator pos:line="119" pos:column="81">+</op:operator> <name pos:line="119" pos:column="83">education</name> <op:operator pos:line="119" pos:column="93">+</op:operator> <lit:literal type="string" pos:line="119" pos:column="95">"', '"</lit:literal> <op:operator pos:line="119" pos:column="102">+</op:operator> <name pos:line="119" pos:column="104">eduEnroll</name> <op:operator pos:line="119" pos:column="114">+</op:operator> <lit:literal type="string" pos:line="119" pos:column="116">"')"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="120" pos:column="33">String</name></type> <name pos:line="120" pos:column="40">cmd_job</name> <init pos:line="120" pos:column="48">= <expr><lit:literal type="string" pos:line="120" pos:column="50">"INSERT INTO job VALUES ("</lit:literal> <op:operator pos:line="120" pos:column="77">+</op:operator> <name pos:line="120" pos:column="79">ssn</name> <op:operator pos:line="120" pos:column="83">+</op:operator><lit:literal type="string" pos:line="120" pos:column="84">", '"</lit:literal> <op:operator pos:line="120" pos:column="90">+</op:operator> <name pos:line="120" pos:column="92">workClass</name> <op:operator pos:line="120" pos:column="102">+</op:operator> <lit:literal type="string" pos:line="120" pos:column="104">"', "</lit:literal>
								<op:operator pos:line="121" pos:column="65">+</op:operator> <name pos:line="121" pos:column="67">industryCode</name> <op:operator pos:line="121" pos:column="80">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="82">", "</lit:literal> <op:operator pos:line="121" pos:column="87">+</op:operator> <name pos:line="121" pos:column="89">occupationCode</name> <op:operator pos:line="121" pos:column="104">+</op:operator> <lit:literal type="string" pos:line="121" pos:column="106">", '"</lit:literal> <op:operator pos:line="121" pos:column="112">+</op:operator> <name pos:line="121" pos:column="114">unionMember</name> 
								<op:operator pos:line="122" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="122" pos:column="67">"', "</lit:literal> <op:operator pos:line="122" pos:column="73">+</op:operator> <name pos:line="122" pos:column="75">employerSize</name> <op:operator pos:line="122" pos:column="88">+</op:operator> <lit:literal type="string" pos:line="122" pos:column="90">", "</lit:literal> <op:operator pos:line="122" pos:column="95">+</op:operator> <name pos:line="122" pos:column="97">weekWage</name> <op:operator pos:line="122" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="122" pos:column="108">", "</lit:literal> <op:operator pos:line="122" pos:column="113">+</op:operator> <name pos:line="122" pos:column="115">selfEmployed</name> 
								<op:operator pos:line="123" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="123" pos:column="67">", "</lit:literal> <op:operator pos:line="123" pos:column="72">+</op:operator> <name pos:line="123" pos:column="74">workWeeks</name> <op:operator pos:line="123" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="123" pos:column="86">")"</lit:literal></expr></init></decl>;</decl_stmt>
				
				<comment type="line" pos:line="125" pos:column="33">//first check before inserting the data into table				</comment>
				<expr_stmt><expr><name pos:line="126" pos:column="33">result</name> <op:operator pos:line="126" pos:column="40">=</op:operator> <call><name><name pos:line="126" pos:column="42">stat</name><op:operator pos:line="126" pos:column="46">.</op:operator><name pos:line="126" pos:column="47">executeQuery</name></name><argument_list pos:line="126" pos:column="59">(<argument><expr><name pos:line="126" pos:column="60">cmd_dataCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<while pos:line="128" pos:column="33">while<condition pos:line="128" pos:column="38">(<expr><call><name><name pos:line="128" pos:column="39">result</name><op:operator pos:line="128" pos:column="45">.</op:operator><name pos:line="128" pos:column="46">next</name></name><argument_list pos:line="128" pos:column="50">()</argument_list></call></expr>)</condition>
				<block pos:line="129" pos:column="33">{
					<expr_stmt><expr><op:operator pos:line="130" pos:column="41">++</op:operator><name pos:line="130" pos:column="43">count</name></expr>;</expr_stmt>
				}</block></while>
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">System</name><op:operator pos:line="132" pos:column="39">.</op:operator><name pos:line="132" pos:column="40">out</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">println</name></name><argument_list pos:line="132" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="52">"---------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="133" pos:column="33">//if no record is present, then isert the data</comment>
				<if pos:line="134" pos:column="33">if<condition pos:line="134" pos:column="35">(<expr><name pos:line="134" pos:column="36">count</name> <op:operator pos:line="134" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="134" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="134" pos:column="47">
				<block pos:line="135" pos:column="33">{		
					<expr_stmt><expr><call><name><name pos:line="136" pos:column="41">stat</name><op:operator pos:line="136" pos:column="45">.</op:operator><name pos:line="136" pos:column="46">execute</name></name><argument_list pos:line="136" pos:column="53">(<argument><expr><name pos:line="136" pos:column="54">cmd_userRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="137" pos:column="41">stat</name><op:operator pos:line="137" pos:column="45">.</op:operator><name pos:line="137" pos:column="46">execute</name></name><argument_list pos:line="137" pos:column="53">(<argument><expr><name pos:line="137" pos:column="54">cmd_investment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="138" pos:column="41">stat</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">execute</name></name><argument_list pos:line="138" pos:column="53">(<argument><expr><name pos:line="138" pos:column="54">cmd_youth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="139" pos:column="41">stat</name><op:operator pos:line="139" pos:column="45">.</op:operator><name pos:line="139" pos:column="46">execute</name></name><argument_list pos:line="139" pos:column="53">(<argument><expr><name pos:line="139" pos:column="54">cmd_employment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="140" pos:column="41">stat</name><op:operator pos:line="140" pos:column="45">.</op:operator><name pos:line="140" pos:column="46">execute</name></name><argument_list pos:line="140" pos:column="53">(<argument><expr><name pos:line="140" pos:column="54">cmd_education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">stat</name><op:operator pos:line="141" pos:column="45">.</op:operator><name pos:line="141" pos:column="46">execute</name></name><argument_list pos:line="141" pos:column="53">(<argument><expr><name pos:line="141" pos:column="54">cmd_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="142" pos:column="41">success</name> <op:operator pos:line="142" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="142" pos:column="51">1</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="143" pos:column="41">System</name><op:operator pos:line="143" pos:column="47">.</op:operator><name pos:line="143" pos:column="48">out</name><op:operator pos:line="143" pos:column="51">.</op:operator><name pos:line="143" pos:column="52">println</name></name><argument_list pos:line="143" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="60">"This customer is successfully added to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="145" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="146" pos:column="41">System</name><op:operator pos:line="146" pos:column="47">.</op:operator><name pos:line="146" pos:column="48">out</name><op:operator pos:line="146" pos:column="51">.</op:operator><name pos:line="146" pos:column="52">println</name></name><argument_list pos:line="146" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="60">"This customer is already present in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			
				<expr_stmt><expr><call><name><name pos:line="148" pos:column="33">result</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">close</name></name><argument_list pos:line="148" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">stat</name><op:operator pos:line="149" pos:column="37">.</op:operator><name pos:line="149" pos:column="38">close</name></name><argument_list pos:line="149" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="151" pos:column="33">System</name><op:operator pos:line="151" pos:column="39">.</op:operator><name pos:line="151" pos:column="40">out</name><op:operator pos:line="151" pos:column="43">.</op:operator><name pos:line="151" pos:column="44">println</name></name><argument_list pos:line="151" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="52">"---------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="153" pos:column="17">catch<parameter_list pos:line="153" pos:column="22">(<param><decl><type><name pos:line="153" pos:column="23">Exception</name></type> <name pos:line="153" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="154" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">System</name><op:operator pos:line="155" pos:column="31">.</op:operator><name pos:line="155" pos:column="32">out</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">println</name></name><argument_list pos:line="155" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="44">"Catch in createUser"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="156" pos:column="25">e</name><op:operator pos:line="156" pos:column="26">.</op:operator><name pos:line="156" pos:column="27">printStackTrace</name></name><argument_list pos:line="156" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="158" pos:column="17">return <expr><name pos:line="158" pos:column="24">success</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="161" pos:column="9">/**
	 * This method accepts customer's Social security number and 
	 * calculates the score
	 * @param userSSN - ssn of the customer
	 * @return score = score of the customer
	 * @author Poornima Tantry
	 */</comment>
	<function><type><annotation pos:line="168" pos:column="9">@<name pos:line="168" pos:column="10">TaDaMethod</name><argument_list pos:line="168" pos:column="20">(<argument><expr><name pos:line="168" pos:column="21">variablesToTrack</name> <op:operator pos:line="168" pos:column="38">=</op:operator><block pos:line="168" pos:column="39">{<expr><lit:literal type="string" pos:line="168" pos:column="40">"occupationValue"</lit:literal></expr><op:operator pos:line="168" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="168" pos:column="59">"workweeks"</lit:literal></expr></argument><op:operator pos:line="168" pos:column="70">,</op:operator> <argument><expr><lit:literal type="string" pos:line="168" pos:column="72">"gains"</lit:literal></expr></argument><op:operator pos:line="168" pos:column="79">,</op:operator> <argument><expr><lit:literal type="string" pos:line="168" pos:column="81">"loss"</lit:literal></expr></argument><op:operator pos:line="168" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="168" pos:column="89">"stocks"</lit:literal></expr></argument>
			<op:operator pos:line="169" pos:column="25">,</op:operator><argument><expr><lit:literal type="string" pos:line="169" pos:column="26">"zipcode"</lit:literal></expr></argument><op:operator pos:line="169" pos:column="35">,</op:operator> <argument><expr><lit:literal type="string" pos:line="169" pos:column="37">"gender"</lit:literal></expr></argument><op:operator pos:line="169" pos:column="45">,</op:operator> <argument><expr><lit:literal type="string" pos:line="169" pos:column="47">"unionMember"</lit:literal></expr></argument>
			<op:operator pos:line="170" pos:column="25">,</op:operator><argument><expr><lit:literal type="string" pos:line="170" pos:column="26">"edu"</lit:literal></expr></argument><op:operator pos:line="170" pos:column="31">,</op:operator> <argument><expr><lit:literal type="string" pos:line="170" pos:column="33">"noOfEmp"</lit:literal></expr></argument><op:operator pos:line="170" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="170" pos:column="44">"selfEmp"</lit:literal></expr></argument><op:operator pos:line="170" pos:column="53">,</op:operator> <argument><expr><lit:literal type="string" pos:line="170" pos:column="55">"marital_status"</lit:literal></expr></argument><op:operator pos:line="170" pos:column="71">,</op:operator> <argument><expr><lit:literal type="string" pos:line="170" pos:column="73">"age"</lit:literal></expr></argument>}</block></expr></argument>, 
			<argument><expr><name pos:line="171" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="171" pos:column="56">=</op:operator> <block pos:line="171" pos:column="58">{<expr><lit:literal type="string" pos:line="171" pos:column="59">"occupation.occupation"</lit:literal></expr><op:operator pos:line="171" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="171" pos:column="84">"job.workweeks"</lit:literal></expr></argument><op:operator pos:line="171" pos:column="99">,</op:operator> 
			<argument><expr><lit:literal type="string" pos:line="172" pos:column="25">"investment.capitalgains"</lit:literal></expr></argument><op:operator pos:line="172" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="172" pos:column="52">"investment.capitallosses"</lit:literal></expr></argument><op:operator pos:line="172" pos:column="78">,</op:operator> <argument><expr><lit:literal type="string" pos:line="172" pos:column="80">"investment.stockdividends"</lit:literal></expr></argument><op:operator pos:line="172" pos:column="107">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="173" pos:column="25">"userrecord.zip"</lit:literal></expr></argument><op:operator pos:line="173" pos:column="41">,</op:operator> <argument><expr><lit:literal type="string" pos:line="173" pos:column="43">"userrecord.sex"</lit:literal></expr></argument><op:operator pos:line="173" pos:column="59">,</op:operator> <argument><expr><lit:literal type="string" pos:line="173" pos:column="61">"job.unionmember"</lit:literal></expr></argument><op:operator pos:line="173" pos:column="78">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="174" pos:column="25">"education.education"</lit:literal></expr></argument><op:operator pos:line="174" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="174" pos:column="48">"job.employersize"</lit:literal></expr></argument><op:operator pos:line="174" pos:column="66">,</op:operator> <argument><expr><lit:literal type="string" pos:line="174" pos:column="68">"job.selfemployed"</lit:literal></expr></argument><op:operator pos:line="174" pos:column="86">,</op:operator> <argument><expr><lit:literal type="string" pos:line="174" pos:column="88">"userrecord.marital"</lit:literal></expr></argument><op:operator pos:line="174" pos:column="108">,</op:operator> <argument><expr><lit:literal type="string" pos:line="174" pos:column="110">"userrecord.age"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">double</name></type> <name pos:line="175" pos:column="23">calculateScore</name><parameter_list pos:line="175" pos:column="37">(<param><decl><type><name pos:line="175" pos:column="38">long</name></type> <name pos:line="175" pos:column="43">userSSN</name></decl></param>)</parameter_list>
	<block pos:line="176" pos:column="9">{	
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">int</name></type> <name pos:line="177" pos:column="21">indus_stab</name> <init pos:line="177" pos:column="32">= <expr><lit:literal type="number" pos:line="177" pos:column="34">0</lit:literal></expr></init><op:operator pos:line="177" pos:column="35">,</op:operator> <name pos:line="177" pos:column="37">occu_stab</name> <init pos:line="177" pos:column="47">=<expr><lit:literal type="number" pos:line="177" pos:column="48">0</lit:literal></expr></init><op:operator pos:line="177" pos:column="49">,</op:operator> <name pos:line="177" pos:column="51">gains</name> <init pos:line="177" pos:column="57">= <expr><lit:literal type="number" pos:line="177" pos:column="59">0</lit:literal></expr></init><op:operator pos:line="177" pos:column="60">,</op:operator> <name pos:line="177" pos:column="62">workweeks</name> <init pos:line="177" pos:column="72">= <expr><lit:literal type="number" pos:line="177" pos:column="74">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="178" pos:column="17">int</name></type> <name pos:line="178" pos:column="21">noOfEmp</name> <init pos:line="178" pos:column="29">= <expr><lit:literal type="number" pos:line="178" pos:column="31">0</lit:literal></expr></init><op:operator pos:line="178" pos:column="32">,</op:operator> <name pos:line="178" pos:column="34">selfEmp</name> <init pos:line="178" pos:column="42">= <expr><lit:literal type="number" pos:line="178" pos:column="44">0</lit:literal></expr></init><op:operator pos:line="178" pos:column="45">,</op:operator> <name pos:line="178" pos:column="47">age</name> <init pos:line="178" pos:column="51">= <expr><lit:literal type="number" pos:line="178" pos:column="53">0</lit:literal></expr></init><op:operator pos:line="178" pos:column="54">,</op:operator> <name pos:line="178" pos:column="56">weekwage</name> <init pos:line="178" pos:column="65">= <expr><lit:literal type="number" pos:line="178" pos:column="67">0</lit:literal></expr></init><op:operator pos:line="178" pos:column="68">,</op:operator> <name pos:line="178" pos:column="70">loss</name> <init pos:line="178" pos:column="75">= <expr><lit:literal type="number" pos:line="178" pos:column="77">0</lit:literal></expr></init><op:operator pos:line="178" pos:column="78">,</op:operator> <name pos:line="178" pos:column="80">stocks</name> <init pos:line="178" pos:column="87">= <expr><lit:literal type="number" pos:line="178" pos:column="89">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="179" pos:column="17">double</name></type> <name pos:line="179" pos:column="24">income</name> <init pos:line="179" pos:column="31">= <expr><lit:literal type="number" pos:line="179" pos:column="33">0</lit:literal></expr></init><op:operator pos:line="179" pos:column="34">,</op:operator> <name pos:line="179" pos:column="36">score</name> <init pos:line="179" pos:column="42">= <expr><lit:literal type="number" pos:line="179" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="180" pos:column="17">String</name></type> <name pos:line="180" pos:column="24">zipcode</name> <init pos:line="180" pos:column="32">= <expr><lit:literal type="string" pos:line="180" pos:column="34">""</lit:literal></expr></init><op:operator pos:line="180" pos:column="36">,</op:operator> <name pos:line="180" pos:column="38">gender</name> <init pos:line="180" pos:column="45">= <expr><lit:literal type="string" pos:line="180" pos:column="47">""</lit:literal></expr></init><op:operator pos:line="180" pos:column="49">,</op:operator> <name pos:line="180" pos:column="51">unionMember</name> <init pos:line="180" pos:column="63">= <expr><lit:literal type="string" pos:line="180" pos:column="65">""</lit:literal></expr></init><op:operator pos:line="180" pos:column="67">,</op:operator> <name pos:line="180" pos:column="69">edu</name> <init pos:line="180" pos:column="73">= <expr><lit:literal type="string" pos:line="180" pos:column="75">""</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">String</name></type> <name pos:line="181" pos:column="24">occupationValue</name> <init pos:line="181" pos:column="40">= <expr><lit:literal type="string" pos:line="181" pos:column="42">""</lit:literal></expr></init><op:operator pos:line="181" pos:column="44">,</op:operator> <name pos:line="181" pos:column="46">marital_status</name> <init pos:line="181" pos:column="61">= <expr><lit:literal type="string" pos:line="181" pos:column="63">""</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="182" pos:column="17">ArrayList</name><argument_list pos:line="182" pos:column="26">&lt;<argument><name pos:line="182" pos:column="27">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="182" pos:column="38">sData</name> <init pos:line="182" pos:column="44">= <expr><op:operator pos:line="182" pos:column="46">new</op:operator> <call><name><name pos:line="182" pos:column="50">ArrayList</name><argument_list pos:line="182" pos:column="59">&lt;<argument><name pos:line="182" pos:column="60">ScoreData</name></argument>&gt;</argument_list></name><argument_list pos:line="182" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="183" pos:column="17">Statement</name></type> <name pos:line="183" pos:column="27">stat</name> <init pos:line="183" pos:column="32">= <expr><lit:literal type="null" pos:line="183" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="184" pos:column="17">ResultSet</name></type> <name pos:line="184" pos:column="27">result</name> <init pos:line="184" pos:column="34">= <expr><lit:literal type="null" pos:line="184" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="186" pos:column="17">String</name></type> <name pos:line="186" pos:column="24">cmd_selectSSN</name> <init pos:line="186" pos:column="38">= <expr><lit:literal type="string" pos:line="186" pos:column="40">"SELECT userrecord.zip, userrecord.sex, userrecord.ssn, "</lit:literal> 
								<op:operator pos:line="187" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="67">" userrecord.age, userrecord.marital, investment.capitalgains, "</lit:literal>
								<op:operator pos:line="188" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="188" pos:column="67">" investment.capitallosses, investment.stockdividends, "</lit:literal> 
								<op:operator pos:line="189" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="189" pos:column="67">" job.workweeks, job.weekwage, job.unionmember, job.employersize, "</lit:literal>
								<op:operator pos:line="190" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="190" pos:column="67">" job.selfemployed, industry.stability, industry.industrycode, "</lit:literal>
								<op:operator pos:line="191" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="191" pos:column="67">" occupation.stability, occupation.occupationcode, occupation.occupation, "</lit:literal>
								<op:operator pos:line="192" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="192" pos:column="67">" education.education  "</lit:literal>			
								<op:operator pos:line="193" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="193" pos:column="67">" FROM  industry, occupation, investment, education,"</lit:literal>
								<op:operator pos:line="194" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="194" pos:column="67">" userrecord, job WHERE industry.industrycode = job.industrycode "</lit:literal>
								<op:operator pos:line="195" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="195" pos:column="67">" and occupation.occupationcode = job.occupationcode "</lit:literal>
								<op:operator pos:line="196" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="196" pos:column="67">" and education.ssn = userrecord.ssn and "</lit:literal>
								<op:operator pos:line="197" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="197" pos:column="67">" investment.ssn = userrecord.ssn and "</lit:literal>
								<op:operator pos:line="198" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="198" pos:column="67">" job.ssn = userrecord.ssn and "</lit:literal>
								<op:operator pos:line="199" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="199" pos:column="67">" userrecord.ssn = "</lit:literal> <op:operator pos:line="199" pos:column="88">+</op:operator> <name pos:line="199" pos:column="90">userSSN</name></expr></init></decl> ;</decl_stmt>		
		
		<try pos:line="201" pos:column="17">try
		<block pos:line="202" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="203" pos:column="25">System</name><op:operator pos:line="203" pos:column="31">.</op:operator><name pos:line="203" pos:column="32">out</name><op:operator pos:line="203" pos:column="35">.</op:operator><name pos:line="203" pos:column="36">println</name></name><argument_list pos:line="203" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="44">"flow:1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="204" pos:column="25">Connection</name></type> <name pos:line="204" pos:column="36">conn</name> <init pos:line="204" pos:column="41">= <expr><call><name><name pos:line="204" pos:column="43">DatabaseConnection</name><op:operator pos:line="204" pos:column="61">.</op:operator><name pos:line="204" pos:column="62">getConnection</name></name><argument_list pos:line="204" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="205" pos:column="25">stat</name> <op:operator pos:line="205" pos:column="30">=</op:operator> <call><name><name pos:line="205" pos:column="32">conn</name><op:operator pos:line="205" pos:column="36">.</op:operator><name pos:line="205" pos:column="37">createStatement</name></name><argument_list pos:line="205" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name pos:line="207" pos:column="25">result</name> <op:operator pos:line="207" pos:column="32">=</op:operator> <call><name><name pos:line="207" pos:column="34">stat</name><op:operator pos:line="207" pos:column="38">.</op:operator><name pos:line="207" pos:column="39">executeQuery</name></name><argument_list pos:line="207" pos:column="51">(<argument><expr><name pos:line="207" pos:column="52">cmd_selectSSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="209" pos:column="25">//calculate the income for given person	</comment>
			<decl_stmt><decl><type><name pos:line="210" pos:column="25">boolean</name></type> <name pos:line="210" pos:column="33">flag</name> <init pos:line="210" pos:column="38">= <expr><call><name><name pos:line="210" pos:column="40">result</name><op:operator pos:line="210" pos:column="46">.</op:operator><name pos:line="210" pos:column="47">next</name></name><argument_list pos:line="210" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if pos:line="212" pos:column="25">if<condition pos:line="212" pos:column="27">(<expr><name pos:line="212" pos:column="28">flag</name></expr>)</condition><then pos:line="212" pos:column="33">
			<block pos:line="213" pos:column="25">{ 
				<expr_stmt><expr><call><name><name pos:line="214" pos:column="33">System</name><op:operator pos:line="214" pos:column="39">.</op:operator><name pos:line="214" pos:column="40">out</name><op:operator pos:line="214" pos:column="43">.</op:operator><name pos:line="214" pos:column="44">println</name></name><argument_list pos:line="214" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="52">"flow:2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="215" pos:column="33">occupationValue</name> <op:operator pos:line="215" pos:column="49">=</op:operator> <call><name><name pos:line="215" pos:column="51">result</name><op:operator pos:line="215" pos:column="57">.</op:operator><name pos:line="215" pos:column="58">getString</name></name><argument_list pos:line="215" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="68">"occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<if pos:line="217" pos:column="33">if<condition pos:line="217" pos:column="35">(<expr><call><name><name pos:line="217" pos:column="36">occupationValue</name><op:operator pos:line="217" pos:column="51">.</op:operator><name pos:line="217" pos:column="52">equalsIgnoreCase</name></name><argument_list pos:line="217" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="69">"Federal government"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="217" pos:column="91">{
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">System</name><op:operator pos:line="218" pos:column="47">.</op:operator><name pos:line="218" pos:column="48">out</name><op:operator pos:line="218" pos:column="51">.</op:operator><name pos:line="218" pos:column="52">println</name></name><argument_list pos:line="218" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="60">"flow:3"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="219" pos:column="41">score</name> <op:operator pos:line="219" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="219" pos:column="49">100</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="221" pos:column="33">else
				<block pos:line="222" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="223" pos:column="41">System</name><op:operator pos:line="223" pos:column="47">.</op:operator><name pos:line="223" pos:column="48">out</name><op:operator pos:line="223" pos:column="51">.</op:operator><name pos:line="223" pos:column="52">println</name></name><argument_list pos:line="223" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="60">"flow:4"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="224" pos:column="41">workweeks</name> <op:operator pos:line="224" pos:column="51">=</op:operator> <call><name><name pos:line="224" pos:column="53">result</name><op:operator pos:line="224" pos:column="59">.</op:operator><name pos:line="224" pos:column="60">getInt</name></name><argument_list pos:line="224" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="67">"workweeks"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="225" pos:column="41">weekwage</name> <op:operator pos:line="225" pos:column="50">=</op:operator> <call><name><name pos:line="225" pos:column="52">result</name><op:operator pos:line="225" pos:column="58">.</op:operator><name pos:line="225" pos:column="59">getInt</name></name><argument_list pos:line="225" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="66">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="226" pos:column="41">gains</name> <op:operator pos:line="226" pos:column="47">=</op:operator> <call><name><name pos:line="226" pos:column="49">result</name><op:operator pos:line="226" pos:column="55">.</op:operator><name pos:line="226" pos:column="56">getInt</name></name><argument_list pos:line="226" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="63">"capitalGains"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="227" pos:column="41">loss</name> <op:operator pos:line="227" pos:column="46">=</op:operator> <call><name><name pos:line="227" pos:column="48">result</name><op:operator pos:line="227" pos:column="54">.</op:operator><name pos:line="227" pos:column="55">getInt</name></name><argument_list pos:line="227" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="62">"capitallosses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="228" pos:column="41">stocks</name> <op:operator pos:line="228" pos:column="48">=</op:operator> <call><name><name pos:line="228" pos:column="50">result</name><op:operator pos:line="228" pos:column="56">.</op:operator><name pos:line="228" pos:column="57">getInt</name></name><argument_list pos:line="228" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="64">"stockdividends"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line" pos:line="230" pos:column="41">//calculate income</comment>
					<expr_stmt><expr><name pos:line="231" pos:column="41">income</name> <op:operator pos:line="231" pos:column="48">=</op:operator> <call><name><name pos:line="231" pos:column="50">acc</name><op:operator pos:line="231" pos:column="53">.</op:operator><name pos:line="231" pos:column="54">calculateIncome</name></name><argument_list pos:line="231" pos:column="69">(<argument><expr><name pos:line="231" pos:column="70">workweeks</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="81">weekwage</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="91">gains</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="98">loss</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="104">stocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
												
					<comment type="line" pos:line="233" pos:column="41">//get all data to local variables</comment>
					<expr_stmt><expr><name pos:line="234" pos:column="41">zipcode</name> <op:operator pos:line="234" pos:column="49">=</op:operator> <call><name><name pos:line="234" pos:column="51">result</name><op:operator pos:line="234" pos:column="57">.</op:operator><name pos:line="234" pos:column="58">getString</name></name><argument_list pos:line="234" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="68">"zip"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="235" pos:column="41">gender</name> <op:operator pos:line="235" pos:column="48">=</op:operator> <call><name><name pos:line="235" pos:column="50">result</name><op:operator pos:line="235" pos:column="56">.</op:operator><name pos:line="235" pos:column="57">getString</name></name><argument_list pos:line="235" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="67">"sex"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="236" pos:column="41">unionMember</name> <op:operator pos:line="236" pos:column="53">=</op:operator> <call><name><name pos:line="236" pos:column="55">result</name><op:operator pos:line="236" pos:column="61">.</op:operator><name pos:line="236" pos:column="62">getString</name></name><argument_list pos:line="236" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="72">"unionmember"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="237" pos:column="41">indus_stab</name> <op:operator pos:line="237" pos:column="52">=</op:operator> <call><name><name pos:line="237" pos:column="54">result</name><op:operator pos:line="237" pos:column="60">.</op:operator><name pos:line="237" pos:column="61">getInt</name></name><argument_list pos:line="237" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="237" pos:column="68">14</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="238" pos:column="41">occu_stab</name> <op:operator pos:line="238" pos:column="51">=</op:operator> <call><name><name pos:line="238" pos:column="53">result</name><op:operator pos:line="238" pos:column="59">.</op:operator><name pos:line="238" pos:column="60">getInt</name></name><argument_list pos:line="238" pos:column="66">(<argument><expr><lit:literal type="number" pos:line="238" pos:column="67">16</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="239" pos:column="41">edu</name> <op:operator pos:line="239" pos:column="45">=</op:operator> <call><name><name pos:line="239" pos:column="47">result</name><op:operator pos:line="239" pos:column="53">.</op:operator><name pos:line="239" pos:column="54">getString</name></name><argument_list pos:line="239" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="64">"education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="240" pos:column="41">gains</name> <op:operator pos:line="240" pos:column="47">=</op:operator> <call><name><name pos:line="240" pos:column="49">result</name><op:operator pos:line="240" pos:column="55">.</op:operator><name pos:line="240" pos:column="56">getInt</name></name><argument_list pos:line="240" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="63">"capitalGains"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><name pos:line="241" pos:column="41">noOfEmp</name> <op:operator pos:line="241" pos:column="49">=</op:operator> <call><name><name pos:line="241" pos:column="51">result</name><op:operator pos:line="241" pos:column="57">.</op:operator><name pos:line="241" pos:column="58">getInt</name></name><argument_list pos:line="241" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="65">"employersize"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="242" pos:column="41">selfEmp</name> <op:operator pos:line="242" pos:column="49">=</op:operator> <call><name><name pos:line="242" pos:column="51">result</name><op:operator pos:line="242" pos:column="57">.</op:operator><name pos:line="242" pos:column="58">getInt</name></name><argument_list pos:line="242" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="242" pos:column="65">"selfemployed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="243" pos:column="41">marital_status</name> <op:operator pos:line="243" pos:column="56">=</op:operator> <call><name><name pos:line="243" pos:column="58">result</name><op:operator pos:line="243" pos:column="64">.</op:operator><name pos:line="243" pos:column="65">getString</name></name><argument_list pos:line="243" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="75">"marital"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="244" pos:column="41">age</name> <op:operator pos:line="244" pos:column="45">=</op:operator> <call><name><name pos:line="244" pos:column="47">result</name><op:operator pos:line="244" pos:column="53">.</op:operator><name pos:line="244" pos:column="54">getInt</name></name><argument_list pos:line="244" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="61">"age"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line" pos:line="246" pos:column="41">//get all zipcode and calculate range</comment>
					<expr_stmt><expr><name pos:line="247" pos:column="41">sData</name> <op:operator pos:line="247" pos:column="47">=</op:operator> <call><name><name pos:line="247" pos:column="49">zipcodeManager</name><op:operator pos:line="247" pos:column="63">.</op:operator><name pos:line="247" pos:column="64">getAllZipcodes</name></name><argument_list pos:line="247" pos:column="78">(<argument><expr><name pos:line="247" pos:column="79">zipcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line" pos:line="249" pos:column="41">//calculate the percentile</comment>
					<decl_stmt><decl><type><name pos:line="250" pos:column="41">int</name></type> <name pos:line="250" pos:column="45">percentile</name> <init pos:line="250" pos:column="56">= <expr><call><name><name pos:line="250" pos:column="58">acc</name><op:operator pos:line="250" pos:column="61">.</op:operator><name pos:line="250" pos:column="62">calculatePercentile</name></name><argument_list pos:line="250" pos:column="81">(<argument><expr><name pos:line="250" pos:column="82">income</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="90">sData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>											
					<expr_stmt><expr><name pos:line="251" pos:column="41">score</name> <op:operator pos:line="251" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="251" pos:column="49">100</lit:literal> <op:operator pos:line="251" pos:column="53">*</op:operator> <name pos:line="251" pos:column="55">percentile</name></expr>;</expr_stmt>
										
					<comment type="line" pos:line="253" pos:column="41">//check if person is female</comment>
					<if pos:line="254" pos:column="41">if<condition pos:line="254" pos:column="43">(<expr><call><name><name pos:line="254" pos:column="44">gender</name><op:operator pos:line="254" pos:column="50">.</op:operator><name pos:line="254" pos:column="51">trim</name></name><argument_list pos:line="254" pos:column="55">()</argument_list></call><op:operator pos:line="254" pos:column="57">.</op:operator><call><name pos:line="254" pos:column="58">equals</name><argument_list pos:line="254" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="65">"Female"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="254" pos:column="75">
					<block pos:line="255" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="256" pos:column="49">System</name><op:operator pos:line="256" pos:column="55">.</op:operator><name pos:line="256" pos:column="56">out</name><op:operator pos:line="256" pos:column="59">.</op:operator><name pos:line="256" pos:column="60">println</name></name><argument_list pos:line="256" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="68">"flow:5"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="257" pos:column="49">score</name> <op:operator pos:line="257" pos:column="55">=</op:operator> <name pos:line="257" pos:column="57">score</name> <op:operator pos:line="257" pos:column="63">+</op:operator> <op:operator pos:line="257" pos:column="65">(</op:operator><name pos:line="257" pos:column="66">score</name><op:operator pos:line="257" pos:column="71">/</op:operator><lit:literal type="number" pos:line="257" pos:column="72">100</lit:literal> <op:operator pos:line="257" pos:column="76">*</op:operator> <lit:literal type="number" pos:line="257" pos:column="78">5</lit:literal><op:operator pos:line="257" pos:column="79">)</op:operator></expr>;</expr_stmt>
					}</block></then></if>
					
					<comment type="line" pos:line="260" pos:column="41">//calculate score based on marital status</comment>
					<expr_stmt><expr><name pos:line="261" pos:column="41">score</name> <op:operator pos:line="261" pos:column="47">=</op:operator> <call><name><name pos:line="261" pos:column="49">acc</name><op:operator pos:line="261" pos:column="52">.</op:operator><name pos:line="261" pos:column="53">checkScoreRange</name></name><argument_list pos:line="261" pos:column="68">(<argument><expr><name pos:line="261" pos:column="69">unionMember</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="82">indus_stab</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="94">occu_stab</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="105">edu</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="110">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line" pos:line="263" pos:column="41">//if major income from capital gains reduce score by 20%</comment>
					<decl_stmt><decl><type><name pos:line="264" pos:column="41">double</name></type> <name pos:line="264" pos:column="48">majorIncome</name> <init pos:line="264" pos:column="60">= <expr><name pos:line="264" pos:column="62">income</name> <op:operator pos:line="264" pos:column="69">*</op:operator> <lit:literal type="number" pos:line="264" pos:column="71">50</lit:literal><op:operator pos:line="264" pos:column="73">/</op:operator><lit:literal type="number" pos:line="264" pos:column="74">100</lit:literal></expr></init></decl>;</decl_stmt>					
					<if pos:line="265" pos:column="41">if<condition pos:line="265" pos:column="43">(<expr><name pos:line="265" pos:column="44">majorIncome</name> <op:operator pos:line="265" pos:column="56">&gt;=</op:operator> <name pos:line="265" pos:column="59">gains</name></expr>)</condition><then><block pos:line="265" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="266" pos:column="49">System</name><op:operator pos:line="266" pos:column="55">.</op:operator><name pos:line="266" pos:column="56">out</name><op:operator pos:line="266" pos:column="59">.</op:operator><name pos:line="266" pos:column="60">println</name></name><argument_list pos:line="266" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="68">"flow:6"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="267" pos:column="49">score</name> <op:operator pos:line="267" pos:column="55">=</op:operator> <name pos:line="267" pos:column="57">score</name> <op:operator pos:line="267" pos:column="63">-</op:operator> <op:operator pos:line="267" pos:column="65">(</op:operator><name pos:line="267" pos:column="66">score</name> <op:operator pos:line="267" pos:column="72">*</op:operator> <name><name pos:line="267" pos:column="74">RiskItConstants</name><op:operator pos:line="267" pos:column="89">.</op:operator><name pos:line="267" pos:column="90">INCOME_GAIN_PERCENTAGE_REDUCTION</name></name><op:operator pos:line="267" pos:column="122">/</op:operator><lit:literal type="number" pos:line="267" pos:column="123">100</lit:literal><op:operator pos:line="267" pos:column="126">)</op:operator></expr>;</expr_stmt>			
					}</block></then></if>
					<comment type="line" pos:line="269" pos:column="41">//calculate score based on age, employee status</comment>
					<expr_stmt><expr><name pos:line="270" pos:column="41">score</name> <op:operator pos:line="270" pos:column="47">=</op:operator> <call><name><name pos:line="270" pos:column="49">acc</name><op:operator pos:line="270" pos:column="52">.</op:operator><name pos:line="270" pos:column="53">checkScoreForStatus</name></name><argument_list pos:line="270" pos:column="72">(<argument><expr><name pos:line="270" pos:column="73">marital_status</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="89">age</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="94">selfEmp</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="103">noOfEmp</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="112">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="271" pos:column="41">if<condition pos:line="271" pos:column="43">(<expr><name pos:line="271" pos:column="44">score</name> <op:operator pos:line="271" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="271" pos:column="52">100.0</lit:literal></expr>)</condition><then><block pos:line="271" pos:column="58">{
						<expr_stmt><expr><call><name><name pos:line="272" pos:column="49">System</name><op:operator pos:line="272" pos:column="55">.</op:operator><name pos:line="272" pos:column="56">out</name><op:operator pos:line="272" pos:column="59">.</op:operator><name pos:line="272" pos:column="60">println</name></name><argument_list pos:line="272" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="68">"flow:7"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="273" pos:column="49">score</name> <op:operator pos:line="273" pos:column="55">=</op:operator> <lit:literal type="number" pos:line="273" pos:column="57">100</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>	
			}</block></then> 
			<else pos:line="277" pos:column="25">else<block pos:line="277" pos:column="29">{
				<expr_stmt><expr><call><name><name pos:line="278" pos:column="33">System</name><op:operator pos:line="278" pos:column="39">.</op:operator><name pos:line="278" pos:column="40">out</name><op:operator pos:line="278" pos:column="43">.</op:operator><name pos:line="278" pos:column="44">println</name></name><argument_list pos:line="278" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="52">"flow:8"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="279" pos:column="33">System</name><op:operator pos:line="279" pos:column="39">.</op:operator><name pos:line="279" pos:column="40">out</name><op:operator pos:line="279" pos:column="43">.</op:operator><name pos:line="279" pos:column="44">println</name></name><argument_list pos:line="279" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="52">"There is no record for this customer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="281" pos:column="25">result</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">close</name></name><argument_list pos:line="281" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="283" pos:column="17">catch<parameter_list pos:line="283" pos:column="22">(<param><decl><type><name pos:line="283" pos:column="23">Exception</name></type> <name pos:line="283" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="284" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="285" pos:column="25">System</name><op:operator pos:line="285" pos:column="31">.</op:operator><name pos:line="285" pos:column="32">out</name><op:operator pos:line="285" pos:column="35">.</op:operator><name pos:line="285" pos:column="36">println</name></name><argument_list pos:line="285" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="44">"flow:9"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="286" pos:column="25">System</name><op:operator pos:line="286" pos:column="31">.</op:operator><name pos:line="286" pos:column="32">out</name><op:operator pos:line="286" pos:column="35">.</op:operator><name pos:line="286" pos:column="36">println</name></name><argument_list pos:line="286" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="286" pos:column="44">"Exception in calculateScore"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="287" pos:column="25">e</name><op:operator pos:line="287" pos:column="26">.</op:operator><name pos:line="287" pos:column="27">printStackTrace</name></name><argument_list pos:line="287" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="290" pos:column="17">return <expr><name pos:line="290" pos:column="24">score</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="293" pos:column="9">/**
	 * Method to delete the test record, and then re-insert into table
	 * @param ssn - SSN of person
	 * @return - 1 for success or 0 for fail 
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="299" pos:column="9">public</specifier> <name pos:line="299" pos:column="16">int</name></type> <name pos:line="299" pos:column="20">deleteUser</name><parameter_list pos:line="299" pos:column="30">(<param><decl><type><name pos:line="299" pos:column="31">String</name></type> <name pos:line="299" pos:column="38">ssn</name></decl></param>)</parameter_list>
	<block pos:line="300" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="301" pos:column="17">int</name></type> <name pos:line="301" pos:column="21">count</name> <init pos:line="301" pos:column="27">= <expr><lit:literal type="number" pos:line="301" pos:column="29">0</lit:literal></expr></init><op:operator pos:line="301" pos:column="30">,</op:operator> <name pos:line="301" pos:column="32">success</name> <init pos:line="301" pos:column="40">= <expr><lit:literal type="number" pos:line="301" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="302" pos:column="17">Statement</name></type> <name pos:line="302" pos:column="27">stat</name> <init pos:line="302" pos:column="32">= <expr><lit:literal type="null" pos:line="302" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="303" pos:column="17">ResultSet</name></type> <name pos:line="303" pos:column="27">result</name> <init pos:line="303" pos:column="34">= <expr><lit:literal type="null" pos:line="303" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="305" pos:column="17">try
		<block pos:line="306" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="307" pos:column="25">String</name></type> <name pos:line="307" pos:column="32">del_user</name> <init pos:line="307" pos:column="41">= <expr><lit:literal type="string" pos:line="307" pos:column="43">"Delete from userrecord where ssn = "</lit:literal> <op:operator pos:line="307" pos:column="81">+</op:operator> <call><name><name pos:line="307" pos:column="83">Long</name><op:operator pos:line="307" pos:column="87">.</op:operator><name pos:line="307" pos:column="88">parseLong</name></name><argument_list pos:line="307" pos:column="97">(<argument><expr><name pos:line="307" pos:column="98">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="308" pos:column="25">String</name></type> <name pos:line="308" pos:column="32">del_job</name> <init pos:line="308" pos:column="40">= <expr><lit:literal type="string" pos:line="308" pos:column="42">"Delete from job where ssn = "</lit:literal> <op:operator pos:line="308" pos:column="73">+</op:operator> <call><name><name pos:line="308" pos:column="75">Long</name><op:operator pos:line="308" pos:column="79">.</op:operator><name pos:line="308" pos:column="80">parseLong</name></name><argument_list pos:line="308" pos:column="89">(<argument><expr><name pos:line="308" pos:column="90">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="309" pos:column="25">String</name></type> <name pos:line="309" pos:column="32">del_edu</name> <init pos:line="309" pos:column="40">= <expr><lit:literal type="string" pos:line="309" pos:column="42">"Delete from education where ssn = "</lit:literal> <op:operator pos:line="309" pos:column="79">+</op:operator> <call><name><name pos:line="309" pos:column="81">Long</name><op:operator pos:line="309" pos:column="85">.</op:operator><name pos:line="309" pos:column="86">parseLong</name></name><argument_list pos:line="309" pos:column="95">(<argument><expr><name pos:line="309" pos:column="96">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="310" pos:column="25">String</name></type> <name pos:line="310" pos:column="32">del_emp</name> <init pos:line="310" pos:column="40">= <expr><lit:literal type="string" pos:line="310" pos:column="42">"Delete from employmentstat where ssn = "</lit:literal> <op:operator pos:line="310" pos:column="84">+</op:operator> <call><name><name pos:line="310" pos:column="86">Long</name><op:operator pos:line="310" pos:column="90">.</op:operator><name pos:line="310" pos:column="91">parseLong</name></name><argument_list pos:line="310" pos:column="100">(<argument><expr><name pos:line="310" pos:column="101">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="311" pos:column="25">String</name></type> <name pos:line="311" pos:column="32">del_inv</name> <init pos:line="311" pos:column="40">= <expr><lit:literal type="string" pos:line="311" pos:column="42">"Delete from investment where ssn = "</lit:literal> <op:operator pos:line="311" pos:column="80">+</op:operator> <call><name><name pos:line="311" pos:column="82">Long</name><op:operator pos:line="311" pos:column="86">.</op:operator><name pos:line="311" pos:column="87">parseLong</name></name><argument_list pos:line="311" pos:column="96">(<argument><expr><name pos:line="311" pos:column="97">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="312" pos:column="25">String</name></type> <name pos:line="312" pos:column="32">del_mig</name> <init pos:line="312" pos:column="40">= <expr><lit:literal type="string" pos:line="312" pos:column="42">"Delete from migration where ssn = "</lit:literal> <op:operator pos:line="312" pos:column="79">+</op:operator> <call><name><name pos:line="312" pos:column="81">Long</name><op:operator pos:line="312" pos:column="85">.</op:operator><name pos:line="312" pos:column="86">parseLong</name></name><argument_list pos:line="312" pos:column="95">(<argument><expr><name pos:line="312" pos:column="96">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="313" pos:column="25">String</name></type> <name pos:line="313" pos:column="32">del_youth</name> <init pos:line="313" pos:column="42">= <expr><lit:literal type="string" pos:line="313" pos:column="44">"Delete from youth where ssn = "</lit:literal> <op:operator pos:line="313" pos:column="77">+</op:operator> <call><name><name pos:line="313" pos:column="79">Long</name><op:operator pos:line="313" pos:column="83">.</op:operator><name pos:line="313" pos:column="84">parseLong</name></name><argument_list pos:line="313" pos:column="93">(<argument><expr><name pos:line="313" pos:column="94">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="315" pos:column="25">String</name></type> <name pos:line="315" pos:column="32">cmd_checkData</name> <init pos:line="315" pos:column="46">= <expr><lit:literal type="string" pos:line="315" pos:column="48">"Select * from userrecord where ssn = "</lit:literal> <op:operator pos:line="315" pos:column="88">+</op:operator> <call><name><name pos:line="315" pos:column="90">Long</name><op:operator pos:line="315" pos:column="94">.</op:operator><name pos:line="315" pos:column="95">parseLong</name></name><argument_list pos:line="315" pos:column="104">(<argument><expr><name pos:line="315" pos:column="105">ssn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="317" pos:column="25">Connection</name></type> <name pos:line="317" pos:column="36">conn</name> <init pos:line="317" pos:column="41">= <expr><call><name><name pos:line="317" pos:column="43">DatabaseConnection</name><op:operator pos:line="317" pos:column="61">.</op:operator><name pos:line="317" pos:column="62">getConnection</name></name><argument_list pos:line="317" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="318" pos:column="25">stat</name> <op:operator pos:line="318" pos:column="30">=</op:operator> <call><name><name pos:line="318" pos:column="32">conn</name><op:operator pos:line="318" pos:column="36">.</op:operator><name pos:line="318" pos:column="37">createStatement</name></name><argument_list pos:line="318" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name pos:line="320" pos:column="25">result</name> <op:operator pos:line="320" pos:column="32">=</op:operator> <call><name><name pos:line="320" pos:column="34">stat</name><op:operator pos:line="320" pos:column="38">.</op:operator><name pos:line="320" pos:column="39">executeQuery</name></name><argument_list pos:line="320" pos:column="51">(<argument><expr><name pos:line="320" pos:column="52">cmd_checkData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="321" pos:column="25">while<condition pos:line="321" pos:column="30">(<expr><call><name><name pos:line="321" pos:column="31">result</name><op:operator pos:line="321" pos:column="37">.</op:operator><name pos:line="321" pos:column="38">next</name></name><argument_list pos:line="321" pos:column="42">()</argument_list></call></expr>)</condition>
				<expr_stmt><expr><op:operator pos:line="322" pos:column="33">++</op:operator><name pos:line="322" pos:column="35">count</name></expr>;</expr_stmt></while>
			<comment type="line" pos:line="323" pos:column="25">//check if records are there and then delete it</comment>
			<if pos:line="324" pos:column="25">if<condition pos:line="324" pos:column="27">(<expr><name pos:line="324" pos:column="28">count</name> <op:operator pos:line="324" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="324" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="324" pos:column="38">
			<block pos:line="325" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="326" pos:column="33">stat</name><op:operator pos:line="326" pos:column="37">.</op:operator><name pos:line="326" pos:column="38">execute</name></name><argument_list pos:line="326" pos:column="45">(<argument><expr><name pos:line="326" pos:column="46">del_youth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="327" pos:column="33">stat</name><op:operator pos:line="327" pos:column="37">.</op:operator><name pos:line="327" pos:column="38">execute</name></name><argument_list pos:line="327" pos:column="45">(<argument><expr><name pos:line="327" pos:column="46">del_mig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="328" pos:column="33">stat</name><op:operator pos:line="328" pos:column="37">.</op:operator><name pos:line="328" pos:column="38">execute</name></name><argument_list pos:line="328" pos:column="45">(<argument><expr><name pos:line="328" pos:column="46">del_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="329" pos:column="33">stat</name><op:operator pos:line="329" pos:column="37">.</op:operator><name pos:line="329" pos:column="38">execute</name></name><argument_list pos:line="329" pos:column="45">(<argument><expr><name pos:line="329" pos:column="46">del_edu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="330" pos:column="33">stat</name><op:operator pos:line="330" pos:column="37">.</op:operator><name pos:line="330" pos:column="38">execute</name></name><argument_list pos:line="330" pos:column="45">(<argument><expr><name pos:line="330" pos:column="46">del_emp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="331" pos:column="33">stat</name><op:operator pos:line="331" pos:column="37">.</op:operator><name pos:line="331" pos:column="38">execute</name></name><argument_list pos:line="331" pos:column="45">(<argument><expr><name pos:line="331" pos:column="46">del_inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name pos:line="332" pos:column="33">stat</name><op:operator pos:line="332" pos:column="37">.</op:operator><name pos:line="332" pos:column="38">execute</name></name><argument_list pos:line="332" pos:column="45">(<argument><expr><name pos:line="332" pos:column="46">del_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="333" pos:column="33">success</name> <op:operator pos:line="333" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="333" pos:column="43">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			
			<comment type="line" pos:line="336" pos:column="25">//re do the checking to see if the data is deleted </comment>
			<expr_stmt><expr><name pos:line="337" pos:column="25">result</name> <op:operator pos:line="337" pos:column="32">=</op:operator> <call><name><name pos:line="337" pos:column="34">stat</name><op:operator pos:line="337" pos:column="38">.</op:operator><name pos:line="337" pos:column="39">executeQuery</name></name><argument_list pos:line="337" pos:column="51">(<argument><expr><name pos:line="337" pos:column="52">cmd_checkData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="338" pos:column="25">while<condition pos:line="338" pos:column="30">(<expr><call><name><name pos:line="338" pos:column="31">result</name><op:operator pos:line="338" pos:column="37">.</op:operator><name pos:line="338" pos:column="38">next</name></name><argument_list pos:line="338" pos:column="42">()</argument_list></call></expr>)</condition>
				<expr_stmt><expr><op:operator pos:line="339" pos:column="33">++</op:operator><name pos:line="339" pos:column="35">count</name></expr>;</expr_stmt></while>
			<if pos:line="340" pos:column="25">if<condition pos:line="340" pos:column="27">(<expr><name pos:line="340" pos:column="28">count</name> <op:operator pos:line="340" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="340" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="340" pos:column="38">
			<block pos:line="341" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">stat</name><op:operator pos:line="342" pos:column="37">.</op:operator><name pos:line="342" pos:column="38">execute</name></name><argument_list pos:line="342" pos:column="45">(<argument><expr><name pos:line="342" pos:column="46">del_youth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="343" pos:column="33">stat</name><op:operator pos:line="343" pos:column="37">.</op:operator><name pos:line="343" pos:column="38">execute</name></name><argument_list pos:line="343" pos:column="45">(<argument><expr><name pos:line="343" pos:column="46">del_mig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="344" pos:column="33">stat</name><op:operator pos:line="344" pos:column="37">.</op:operator><name pos:line="344" pos:column="38">execute</name></name><argument_list pos:line="344" pos:column="45">(<argument><expr><name pos:line="344" pos:column="46">del_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="345" pos:column="33">stat</name><op:operator pos:line="345" pos:column="37">.</op:operator><name pos:line="345" pos:column="38">execute</name></name><argument_list pos:line="345" pos:column="45">(<argument><expr><name pos:line="345" pos:column="46">del_edu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">stat</name><op:operator pos:line="346" pos:column="37">.</op:operator><name pos:line="346" pos:column="38">execute</name></name><argument_list pos:line="346" pos:column="45">(<argument><expr><name pos:line="346" pos:column="46">del_emp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="347" pos:column="33">stat</name><op:operator pos:line="347" pos:column="37">.</op:operator><name pos:line="347" pos:column="38">execute</name></name><argument_list pos:line="347" pos:column="45">(<argument><expr><name pos:line="347" pos:column="46">del_inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				<expr_stmt><expr><call><name><name pos:line="348" pos:column="33">stat</name><op:operator pos:line="348" pos:column="37">.</op:operator><name pos:line="348" pos:column="38">execute</name></name><argument_list pos:line="348" pos:column="45">(<argument><expr><name pos:line="348" pos:column="46">del_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="349" pos:column="33">success</name> <op:operator pos:line="349" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="349" pos:column="43">1</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="351" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="352" pos:column="33">System</name><op:operator pos:line="352" pos:column="39">.</op:operator><name pos:line="352" pos:column="40">out</name><op:operator pos:line="352" pos:column="43">.</op:operator><name pos:line="352" pos:column="44">println</name></name><argument_list pos:line="352" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="352" pos:column="52">"The data is already deleted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			
			<expr_stmt><expr><call><name><name pos:line="354" pos:column="25">result</name><op:operator pos:line="354" pos:column="31">.</op:operator><name pos:line="354" pos:column="32">close</name></name><argument_list pos:line="354" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			
		}</block>
		<catch pos:line="357" pos:column="17">catch<parameter_list pos:line="357" pos:column="22">(<param><decl><type><name pos:line="357" pos:column="23">Exception</name></type> <name pos:line="357" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="358" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="359" pos:column="25">System</name><op:operator pos:line="359" pos:column="31">.</op:operator><name pos:line="359" pos:column="32">out</name><op:operator pos:line="359" pos:column="35">.</op:operator><name pos:line="359" pos:column="36">println</name></name><argument_list pos:line="359" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="359" pos:column="44">"Exception in delete"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="360" pos:column="25">e</name><op:operator pos:line="360" pos:column="26">.</op:operator><name pos:line="360" pos:column="27">printStackTrace</name></name><argument_list pos:line="360" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="362" pos:column="17">return <expr><name pos:line="362" pos:column="24">success</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="365" pos:column="9">/**
	 * This method creates a agent table with their names and ids.
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="369" pos:column="9">public</specifier> <name pos:line="369" pos:column="16">void</name></type> <name pos:line="369" pos:column="21">createAgentTable</name><parameter_list pos:line="369" pos:column="37">()</parameter_list>
	<block pos:line="370" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="371" pos:column="17">Statement</name></type> <name pos:line="371" pos:column="27">stat</name></decl>;</decl_stmt>
		
		<try pos:line="373" pos:column="17">try
		<block pos:line="374" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="375" pos:column="25">String</name></type> <name pos:line="375" pos:column="32">create_agent</name> <init pos:line="375" pos:column="45">= <expr><lit:literal type="string" pos:line="375" pos:column="47">"Create table AgentTable ( Name char(20), id char(5))"</lit:literal></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="376" pos:column="25">String</name></type> <name pos:line="376" pos:column="32">insert_agent1</name> <init pos:line="376" pos:column="46">= <expr><lit:literal type="string" pos:line="376" pos:column="48">"Insert into AgentTable values ( 'Jim Cohen', '12345')"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="377" pos:column="25">String</name></type> <name pos:line="377" pos:column="32">insert_agent2</name> <init pos:line="377" pos:column="46">= <expr><lit:literal type="string" pos:line="377" pos:column="48">"Insert into AgentTable values ( 'Lisa Coburn', '23456')"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="378" pos:column="25">String</name></type> <name pos:line="378" pos:column="32">insert_agent3</name> <init pos:line="378" pos:column="46">= <expr><lit:literal type="string" pos:line="378" pos:column="48">"Insert into AgentTable values ( 'Big John', '34567')"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="379" pos:column="25">String</name></type> <name pos:line="379" pos:column="32">insert_agent4</name> <init pos:line="379" pos:column="46">= <expr><lit:literal type="string" pos:line="379" pos:column="48">"Insert into AgentTable values ( 'Chris Flake', '98765')"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="380" pos:column="25">String</name></type> <name pos:line="380" pos:column="32">insert_agent5</name> <init pos:line="380" pos:column="46">= <expr><lit:literal type="string" pos:line="380" pos:column="48">"Insert into AgentTable values ( 'Mike Jackman', '85642')"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="381" pos:column="25">String</name></type> <name pos:line="381" pos:column="32">del_Table</name> <init pos:line="381" pos:column="42">= <expr><lit:literal type="string" pos:line="381" pos:column="44">" Drop table AgentTable"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="383" pos:column="25">Connection</name></type> <name pos:line="383" pos:column="36">conn</name> <init pos:line="383" pos:column="41">= <expr><call><name><name pos:line="383" pos:column="43">DatabaseConnection</name><op:operator pos:line="383" pos:column="61">.</op:operator><name pos:line="383" pos:column="62">getConnection</name></name><argument_list pos:line="383" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="384" pos:column="25">stat</name> <op:operator pos:line="384" pos:column="30">=</op:operator> <call><name><name pos:line="384" pos:column="32">conn</name><op:operator pos:line="384" pos:column="36">.</op:operator><name pos:line="384" pos:column="37">createStatement</name></name><argument_list pos:line="384" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			
			<try pos:line="386" pos:column="25">try
			<block pos:line="387" pos:column="25">{
				<comment type="line" pos:line="388" pos:column="33">//if the database already contains the table</comment>
				<comment type="line" pos:line="389" pos:column="33">//first delete it and then create it again</comment>
				<expr_stmt><expr><call><name><name pos:line="390" pos:column="33">stat</name><op:operator pos:line="390" pos:column="37">.</op:operator><name pos:line="390" pos:column="38">execute</name></name><argument_list pos:line="390" pos:column="45">(<argument><expr><name pos:line="390" pos:column="46">del_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
			<catch pos:line="392" pos:column="25">catch<parameter_list pos:line="392" pos:column="30">(<param><decl><type><name pos:line="392" pos:column="31">Exception</name></type> <name pos:line="392" pos:column="41">e</name></decl></param>)</parameter_list>
			<block pos:line="393" pos:column="25">{
				<comment type="line" pos:line="394" pos:column="33">//e.printStackTrace();</comment>
			}</block></catch></try>
			<comment type="line" pos:line="396" pos:column="25">//create agenttable</comment>
			<expr_stmt><expr><call><name><name pos:line="397" pos:column="25">stat</name><op:operator pos:line="397" pos:column="29">.</op:operator><name pos:line="397" pos:column="30">execute</name></name><argument_list pos:line="397" pos:column="37">(<argument><expr><name pos:line="397" pos:column="38">create_agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="398" pos:column="25">stat</name><op:operator pos:line="398" pos:column="29">.</op:operator><name pos:line="398" pos:column="30">execute</name></name><argument_list pos:line="398" pos:column="37">(<argument><expr><name pos:line="398" pos:column="38">insert_agent1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="399" pos:column="25">stat</name><op:operator pos:line="399" pos:column="29">.</op:operator><name pos:line="399" pos:column="30">execute</name></name><argument_list pos:line="399" pos:column="37">(<argument><expr><name pos:line="399" pos:column="38">insert_agent2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="400" pos:column="25">stat</name><op:operator pos:line="400" pos:column="29">.</op:operator><name pos:line="400" pos:column="30">execute</name></name><argument_list pos:line="400" pos:column="37">(<argument><expr><name pos:line="400" pos:column="38">insert_agent3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="401" pos:column="25">stat</name><op:operator pos:line="401" pos:column="29">.</op:operator><name pos:line="401" pos:column="30">execute</name></name><argument_list pos:line="401" pos:column="37">(<argument><expr><name pos:line="401" pos:column="38">insert_agent4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="402" pos:column="25">stat</name><op:operator pos:line="402" pos:column="29">.</op:operator><name pos:line="402" pos:column="30">execute</name></name><argument_list pos:line="402" pos:column="37">(<argument><expr><name pos:line="402" pos:column="38">insert_agent5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block>
		<catch pos:line="405" pos:column="17">catch<parameter_list pos:line="405" pos:column="22">(<param><decl><type><name pos:line="405" pos:column="23">Exception</name></type> <name pos:line="405" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="406" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="407" pos:column="25">System</name><op:operator pos:line="407" pos:column="31">.</op:operator><name pos:line="407" pos:column="32">out</name><op:operator pos:line="407" pos:column="35">.</op:operator><name pos:line="407" pos:column="36">println</name></name><argument_list pos:line="407" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="407" pos:column="44">"Exception in createAgentTable"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="408" pos:column="25">e</name><op:operator pos:line="408" pos:column="26">.</op:operator><name pos:line="408" pos:column="27">printStackTrace</name></name><argument_list pos:line="408" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			
		}</block></catch></try>
	}</block></function>
	
	
	<comment type="block" format="javadoc" pos:line="414" pos:column="9">/**
	 * This method calculates the pure premium value using the total property 
	 * value and the exposure unit that insurance covers for one full year
	 * @param inv - it is a object holding all data of customer needed to 
	 * calculate the premium
	 * @return premium - the pure premium value calculated for the given criteria
	 * @author Poornima Tantry 
	 */</comment>
	<function><type><specifier pos:line="422" pos:column="9">public</specifier> <name pos:line="422" pos:column="16">double</name></type> <name pos:line="422" pos:column="23">calculatePurePremium</name><parameter_list pos:line="422" pos:column="43">(<param><decl><type><name pos:line="422" pos:column="44">Invitation</name></type> <name pos:line="422" pos:column="55">inv</name></decl></param>)</parameter_list>
	<block pos:line="423" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="424" pos:column="17">double</name></type> <name pos:line="424" pos:column="24">premium</name> <init pos:line="424" pos:column="32">= <expr><lit:literal type="number" pos:line="424" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="426" pos:column="17">//calculate pure premium using the loss coverage for given property</comment>
		<if pos:line="427" pos:column="17">if<condition pos:line="427" pos:column="19">(<expr><call><name><name pos:line="427" pos:column="20">inv</name><op:operator pos:line="427" pos:column="23">.</op:operator><name pos:line="427" pos:column="24">getlossCoverage</name></name><argument_list pos:line="427" pos:column="39">()</argument_list></call> <op:operator pos:line="427" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="427" pos:column="44">0</lit:literal> <op:operator pos:line="427" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="427" pos:column="49">inv</name><op:operator pos:line="427" pos:column="52">.</op:operator><name pos:line="427" pos:column="53">getExpoUnit</name></name><argument_list pos:line="427" pos:column="64">()</argument_list></call> <op:operator pos:line="427" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="427" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="427" pos:column="71">
			<expr_stmt><expr><name pos:line="428" pos:column="25">premium</name> <op:operator pos:line="428" pos:column="33">=</op:operator> <call><name><name pos:line="428" pos:column="35">inv</name><op:operator pos:line="428" pos:column="38">.</op:operator><name pos:line="428" pos:column="39">getlossCoverage</name></name><argument_list pos:line="428" pos:column="54">()</argument_list></call><op:operator pos:line="428" pos:column="56">/</op:operator><call><name><name pos:line="428" pos:column="57">inv</name><op:operator pos:line="428" pos:column="60">.</op:operator><name pos:line="428" pos:column="61">getExpoUnit</name></name><argument_list pos:line="428" pos:column="72">()</argument_list></call></expr>;</expr_stmt></then></if>
		
		<return pos:line="430" pos:column="17">return <expr><name pos:line="430" pos:column="24">premium</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="433" pos:column="9">/** 
	 * THis method calculates the expense for every exposure unit. This value 
	 * is given by the company for the amount of possible loss coverage 
	 * @param inv - object holding the information of customer
	 * @return expo - expense for every unit of exposure of property
	 * @author Poornima Tantry
	 */</comment>
	
	<function><type><specifier pos:line="441" pos:column="9">public</specifier> <name pos:line="441" pos:column="16">double</name></type> <name pos:line="441" pos:column="23">calculateExpenseForExpo</name><parameter_list pos:line="441" pos:column="46">(<param><decl><type><name pos:line="441" pos:column="47">Invitation</name></type> <name pos:line="441" pos:column="58">inv</name></decl></param>)</parameter_list>
	<block pos:line="442" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="443" pos:column="17">double</name></type> <name pos:line="443" pos:column="24">expo</name> <init pos:line="443" pos:column="29">= <expr><lit:literal type="number" pos:line="443" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="445" pos:column="17">//calculate expense per every exposure unit using property value</comment>
		<if pos:line="446" pos:column="17">if<condition pos:line="446" pos:column="19">(<expr><call><name><name pos:line="446" pos:column="20">inv</name><op:operator pos:line="446" pos:column="23">.</op:operator><name pos:line="446" pos:column="24">getPropertyValue</name></name><argument_list pos:line="446" pos:column="40">()</argument_list></call> <op:operator pos:line="446" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="446" pos:column="45">0</lit:literal> <op:operator pos:line="446" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="446" pos:column="50">inv</name><op:operator pos:line="446" pos:column="53">.</op:operator><name pos:line="446" pos:column="54">getExpoUnit</name></name><argument_list pos:line="446" pos:column="65">()</argument_list></call> <op:operator pos:line="446" pos:column="68">&gt;</op:operator> <lit:literal type="number" pos:line="446" pos:column="70">0</lit:literal></expr>)</condition><then pos:line="446" pos:column="72">
			<expr_stmt><expr><name pos:line="447" pos:column="25">expo</name> <op:operator pos:line="447" pos:column="30">=</op:operator> <call><name><name pos:line="447" pos:column="32">inv</name><op:operator pos:line="447" pos:column="35">.</op:operator><name pos:line="447" pos:column="36">getPropertyValue</name></name><argument_list pos:line="447" pos:column="52">()</argument_list></call><op:operator pos:line="447" pos:column="54">/</op:operator><call><name><name pos:line="447" pos:column="55">inv</name><op:operator pos:line="447" pos:column="58">.</op:operator><name pos:line="447" pos:column="59">getExpoUnit</name></name><argument_list pos:line="447" pos:column="70">()</argument_list></call></expr>;</expr_stmt></then></if>
		
		<return pos:line="449" pos:column="17">return <expr><name pos:line="449" pos:column="24">expo</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="452" pos:column="9">/**
	 * This methods calculates actual premium considering 
	 * the profit and contingency factor, the expense of exposure unit
	 * and pure premium values
	 * @param inv - Object holding all of customer's information
	 * @return tempPremium - the actual premium value given to customer
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="460" pos:column="9">public</specifier> <name pos:line="460" pos:column="16">double</name></type> <name pos:line="460" pos:column="23">calculateActualPremium</name><parameter_list pos:line="460" pos:column="45">(<param><decl><type><name pos:line="460" pos:column="46">Invitation</name></type> <name pos:line="460" pos:column="57">inv</name></decl></param>, <param><decl><type><name pos:line="460" pos:column="62">double</name></type> <name pos:line="460" pos:column="69">premium</name></decl></param>, <param><decl><type><name pos:line="460" pos:column="78">double</name></type> <name pos:line="460" pos:column="85">expo</name></decl></param>)</parameter_list>
	<block pos:line="461" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="462" pos:column="17">double</name></type> <name pos:line="462" pos:column="24">tempPremium</name> <init pos:line="462" pos:column="36">= <expr><lit:literal type="number" pos:line="462" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="464" pos:column="17">//calculate the actual premium</comment>
		<expr_stmt><expr><name pos:line="465" pos:column="17">tempPremium</name> <op:operator pos:line="465" pos:column="29">=</op:operator> <op:operator pos:line="465" pos:column="31">(</op:operator><name pos:line="465" pos:column="32">premium</name> <op:operator pos:line="465" pos:column="40">+</op:operator> <name pos:line="465" pos:column="42">expo</name><op:operator pos:line="465" pos:column="46">)</op:operator><op:operator pos:line="465" pos:column="47">/</op:operator><op:operator pos:line="465" pos:column="48">(</op:operator><lit:literal type="number" pos:line="465" pos:column="49">1</lit:literal> <op:operator pos:line="465" pos:column="51">-</op:operator> <name><name pos:line="465" pos:column="53">RiskItConstants</name><op:operator pos:line="465" pos:column="68">.</op:operator><name pos:line="465" pos:column="69">PROFIT_CONTINGENCY_FACTOR</name></name><op:operator pos:line="465" pos:column="94">/</op:operator><lit:literal type="number" pos:line="465" pos:column="95">100</lit:literal><op:operator pos:line="465" pos:column="98">)</op:operator></expr>;</expr_stmt>
		
		<comment type="line" pos:line="467" pos:column="17">//get the state name</comment>
		<expr_stmt><expr><name pos:line="468" pos:column="17">inv</name> <op:operator pos:line="468" pos:column="21">=</op:operator> <call><name><name pos:line="468" pos:column="23">zipcodeManager</name><op:operator pos:line="468" pos:column="37">.</op:operator><name pos:line="468" pos:column="38">getOneZipcode</name></name><argument_list pos:line="468" pos:column="51">(<argument><expr><name pos:line="468" pos:column="52">inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line" pos:line="470" pos:column="17">//balance the premium considering the age and deductible factor</comment>
		<expr_stmt><expr><name pos:line="471" pos:column="17">tempPremium</name> <op:operator pos:line="471" pos:column="29">=</op:operator> <call><name pos:line="471" pos:column="31">compareCustomerZones</name><argument_list pos:line="471" pos:column="51">(<argument><expr><name pos:line="471" pos:column="52">inv</name></expr></argument>, <argument><expr><name pos:line="471" pos:column="57">tempPremium</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return pos:line="473" pos:column="17">return <expr><name pos:line="473" pos:column="24">tempPremium</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc" pos:line="477" pos:column="9">/**
	 * This method accepts the customer object and premium value 
	 * calculated till half point and then compares the customer's zipcode
	 * to see where he stays, his age and his score and then calculates
	 * the final premium
	 * @param inv - customer object
	 * @param premium - the temporary premium value
	 * @return premium value for each month
	 * @author Poornima Tantry
	 */</comment>
	<function><type><specifier pos:line="487" pos:column="9">public</specifier> <name pos:line="487" pos:column="16">double</name></type> <name pos:line="487" pos:column="23">compareCustomerZones</name><parameter_list pos:line="487" pos:column="43">(<param><decl><type><name pos:line="487" pos:column="44">Invitation</name></type> <name pos:line="487" pos:column="55">inv</name></decl></param>, <param><decl><type><name pos:line="487" pos:column="60">double</name></type> <name pos:line="487" pos:column="67">premium</name></decl></param>)</parameter_list>
	<block pos:line="488" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="489" pos:column="17">double</name></type> <name pos:line="489" pos:column="24">tempPremium</name> <init pos:line="489" pos:column="36">= <expr><name pos:line="489" pos:column="38">premium</name></expr></init></decl> ;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="491" pos:column="17">String</name></type> <name pos:line="491" pos:column="24">state</name> <init pos:line="491" pos:column="30">= <expr><call><name><name pos:line="491" pos:column="32">inv</name><op:operator pos:line="491" pos:column="35">.</op:operator><name pos:line="491" pos:column="36">getStateName</name></name><argument_list pos:line="491" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="493" pos:column="17">//check if customer is in the risk zone</comment>
		<if pos:line="494" pos:column="17">if<condition pos:line="494" pos:column="19">(<expr><call><name><name pos:line="494" pos:column="20">state</name><op:operator pos:line="494" pos:column="25">.</op:operator><name pos:line="494" pos:column="26">equals</name></name><argument_list pos:line="494" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="494" pos:column="33">"CA"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="494" pos:column="39">||</op:operator> <call><name><name pos:line="494" pos:column="42">state</name><op:operator pos:line="494" pos:column="47">.</op:operator><name pos:line="494" pos:column="48">equals</name></name><argument_list pos:line="494" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="494" pos:column="55">"AZ"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="494" pos:column="61">||</op:operator> <call><name><name pos:line="494" pos:column="64">state</name><op:operator pos:line="494" pos:column="69">.</op:operator><name pos:line="494" pos:column="70">equals</name></name><argument_list pos:line="494" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="494" pos:column="77">"NM"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="494" pos:column="83">||</op:operator>
		   <call><name><name pos:line="495" pos:column="20">state</name><op:operator pos:line="495" pos:column="25">.</op:operator><name pos:line="495" pos:column="26">equals</name></name><argument_list pos:line="495" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="33">"TX"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="495" pos:column="39">||</op:operator> <call><name><name pos:line="495" pos:column="42">state</name><op:operator pos:line="495" pos:column="47">.</op:operator><name pos:line="495" pos:column="48">equals</name></name><argument_list pos:line="495" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="55">"LA"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="495" pos:column="61">||</op:operator> <call><name><name pos:line="495" pos:column="64">state</name><op:operator pos:line="495" pos:column="69">.</op:operator><name pos:line="495" pos:column="70">equals</name></name><argument_list pos:line="495" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="77">"OK"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="495" pos:column="83">||</op:operator>
		   <call><name><name pos:line="496" pos:column="20">state</name><op:operator pos:line="496" pos:column="25">.</op:operator><name pos:line="496" pos:column="26">equals</name></name><argument_list pos:line="496" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="496" pos:column="33">"MS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="496" pos:column="39">||</op:operator> <call><name><name pos:line="496" pos:column="42">state</name><op:operator pos:line="496" pos:column="47">.</op:operator><name pos:line="496" pos:column="48">equals</name></name><argument_list pos:line="496" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="496" pos:column="55">"AL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="496" pos:column="61">||</op:operator> <call><name><name pos:line="496" pos:column="64">state</name><op:operator pos:line="496" pos:column="69">.</op:operator><name pos:line="496" pos:column="70">equals</name></name><argument_list pos:line="496" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="496" pos:column="77">"FL"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="496" pos:column="83">||</op:operator>
		   <call><name><name pos:line="497" pos:column="20">state</name><op:operator pos:line="497" pos:column="25">.</op:operator><name pos:line="497" pos:column="26">equals</name></name><argument_list pos:line="497" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="33">"GA"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="497" pos:column="39">||</op:operator> <call><name><name pos:line="497" pos:column="42">state</name><op:operator pos:line="497" pos:column="47">.</op:operator><name pos:line="497" pos:column="48">equals</name></name><argument_list pos:line="497" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="55">"SC"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="497" pos:column="61">||</op:operator> <call><name><name pos:line="497" pos:column="64">state</name><op:operator pos:line="497" pos:column="69">.</op:operator><name pos:line="497" pos:column="70">equals</name></name><argument_list pos:line="497" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="77">"NC"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="497" pos:column="83">||</op:operator>
		   <call><name><name pos:line="498" pos:column="20">state</name><op:operator pos:line="498" pos:column="25">.</op:operator><name pos:line="498" pos:column="26">equals</name></name><argument_list pos:line="498" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="498" pos:column="33">"VA"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="498" pos:column="39">||</op:operator> <call><name><name pos:line="498" pos:column="42">state</name><op:operator pos:line="498" pos:column="47">.</op:operator><name pos:line="498" pos:column="48">equals</name></name><argument_list pos:line="498" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="498" pos:column="55">"NJ"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="498" pos:column="61">||</op:operator> <call><name><name pos:line="498" pos:column="64">state</name><op:operator pos:line="498" pos:column="69">.</op:operator><name pos:line="498" pos:column="70">equals</name></name><argument_list pos:line="498" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="498" pos:column="77">"DE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="498" pos:column="83">||</op:operator>
		   <call><name><name pos:line="499" pos:column="20">state</name><op:operator pos:line="499" pos:column="25">.</op:operator><name pos:line="499" pos:column="26">equals</name></name><argument_list pos:line="499" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="499" pos:column="33">"RI"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="499" pos:column="39">||</op:operator> <call><name><name pos:line="499" pos:column="42">state</name><op:operator pos:line="499" pos:column="47">.</op:operator><name pos:line="499" pos:column="48">equals</name></name><argument_list pos:line="499" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="499" pos:column="55">"CT"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="499" pos:column="61">||</op:operator> <call><name><name pos:line="499" pos:column="64">state</name><op:operator pos:line="499" pos:column="69">.</op:operator><name pos:line="499" pos:column="70">equals</name></name><argument_list pos:line="499" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="499" pos:column="77">"MA"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="499" pos:column="84">
		<block pos:line="500" pos:column="17">{
			<comment type="line" pos:line="501" pos:column="25">//if customer is in the risk zone and is about 60 years</comment>
			<comment type="line" pos:line="502" pos:column="25">// then premium goes up by 30% else it goes up by 20%</comment>
			<if pos:line="503" pos:column="25">if<condition pos:line="503" pos:column="27">(<expr><call><name><name pos:line="503" pos:column="28">inv</name><op:operator pos:line="503" pos:column="31">.</op:operator><name pos:line="503" pos:column="32">getAge</name></name><argument_list pos:line="503" pos:column="38">()</argument_list></call> <op:operator pos:line="503" pos:column="41">&gt;=</op:operator> <name><name pos:line="503" pos:column="44">RiskItConstants</name><op:operator pos:line="503" pos:column="59">.</op:operator><name pos:line="503" pos:column="60">SIXTY_AGE</name></name></expr>)</condition><then pos:line="503" pos:column="70">
				<expr_stmt><expr><name pos:line="504" pos:column="33">tempPremium</name> <op:operator pos:line="504" pos:column="45">=</op:operator> <name pos:line="504" pos:column="47">tempPremium</name> <op:operator pos:line="504" pos:column="59">+</op:operator> <name pos:line="504" pos:column="61">tempPremium</name> <op:operator pos:line="504" pos:column="73">*</op:operator> <name><name pos:line="504" pos:column="75">RiskItConstants</name><op:operator pos:line="504" pos:column="90">.</op:operator><name pos:line="504" pos:column="91">THIRTY_PERCENT</name></name><op:operator pos:line="504" pos:column="105">/</op:operator><lit:literal type="number" pos:line="504" pos:column="106">100</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="505" pos:column="25">else
				<expr_stmt><expr><name pos:line="506" pos:column="33">tempPremium</name> <op:operator pos:line="506" pos:column="45">=</op:operator> <name pos:line="506" pos:column="47">tempPremium</name> <op:operator pos:line="506" pos:column="59">+</op:operator> <name pos:line="506" pos:column="61">tempPremium</name> <op:operator pos:line="506" pos:column="73">*</op:operator> <name><name pos:line="506" pos:column="75">RiskItConstants</name><op:operator pos:line="506" pos:column="90">.</op:operator><name pos:line="506" pos:column="91">TWENTY_PERCENT</name></name><op:operator pos:line="506" pos:column="105">/</op:operator><lit:literal type="number" pos:line="506" pos:column="106">100</lit:literal></expr>;</expr_stmt></else></if>
		}</block></then></if>
		
		<comment type="line" pos:line="509" pos:column="17">//calculate  total premium per year</comment>
		<decl_stmt><decl><type><name pos:line="510" pos:column="17">double</name></type> <name pos:line="510" pos:column="24">totalPremium</name> <init pos:line="510" pos:column="37">= <expr><name pos:line="510" pos:column="39">tempPremium</name> <op:operator pos:line="510" pos:column="51">*</op:operator> <lit:literal type="number" pos:line="510" pos:column="53">12</lit:literal></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="512" pos:column="17">//compare the deductible based on  property values</comment>
		<if pos:line="513" pos:column="17">if<condition pos:line="513" pos:column="19">(<expr><call><name><name pos:line="513" pos:column="20">inv</name><op:operator pos:line="513" pos:column="23">.</op:operator><name pos:line="513" pos:column="24">getDeductible</name></name><argument_list pos:line="513" pos:column="37">()</argument_list></call> <op:operator pos:line="513" pos:column="40">&lt;</op:operator> <call><name><name pos:line="513" pos:column="42">inv</name><op:operator pos:line="513" pos:column="45">.</op:operator><name pos:line="513" pos:column="46">getPropertyValue</name></name><argument_list pos:line="513" pos:column="62">()</argument_list></call> <op:operator pos:line="513" pos:column="65">*</op:operator> <name><name pos:line="513" pos:column="67">RiskItConstants</name><op:operator pos:line="513" pos:column="82">.</op:operator><name pos:line="513" pos:column="83">TEN_PERCENT</name></name><op:operator pos:line="513" pos:column="94">/</op:operator><lit:literal type="number" pos:line="513" pos:column="95">100</lit:literal></expr>)</condition><then pos:line="513" pos:column="99">
			<expr_stmt><expr><name pos:line="514" pos:column="25">totalPremium</name> <op:operator pos:line="514" pos:column="38">=</op:operator> <name pos:line="514" pos:column="40">totalPremium</name> <op:operator pos:line="514" pos:column="53">+</op:operator> <name pos:line="514" pos:column="55">totalPremium</name> <op:operator pos:line="514" pos:column="68">*</op:operator> <name><name pos:line="514" pos:column="70">RiskItConstants</name><op:operator pos:line="514" pos:column="85">.</op:operator><name pos:line="514" pos:column="86">TEN_PERCENT</name></name><op:operator pos:line="514" pos:column="97">/</op:operator><lit:literal type="number" pos:line="514" pos:column="98">100</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="515" pos:column="17">else <if pos:line="515" pos:column="22">if<condition pos:line="515" pos:column="24">(<expr><call><name><name pos:line="515" pos:column="25">inv</name><op:operator pos:line="515" pos:column="28">.</op:operator><name pos:line="515" pos:column="29">getDeductible</name></name><argument_list pos:line="515" pos:column="42">()</argument_list></call> <op:operator pos:line="515" pos:column="45">&lt;</op:operator> <call><name><name pos:line="515" pos:column="47">inv</name><op:operator pos:line="515" pos:column="50">.</op:operator><name pos:line="515" pos:column="51">getPropertyValue</name></name><argument_list pos:line="515" pos:column="67">()</argument_list></call> <op:operator pos:line="515" pos:column="70">*</op:operator> <name><name pos:line="515" pos:column="72">RiskItConstants</name><op:operator pos:line="515" pos:column="87">.</op:operator><name pos:line="515" pos:column="88">TWENTY_PERCENT</name></name><op:operator pos:line="515" pos:column="102">/</op:operator><lit:literal type="number" pos:line="515" pos:column="103">100</lit:literal></expr>)</condition><then pos:line="515" pos:column="107">
			<expr_stmt><expr><name pos:line="516" pos:column="25">totalPremium</name> <op:operator pos:line="516" pos:column="38">=</op:operator> <name pos:line="516" pos:column="40">totalPremium</name> <op:operator pos:line="516" pos:column="53">+</op:operator> <name pos:line="516" pos:column="55">totalPremium</name> <op:operator pos:line="516" pos:column="68">*</op:operator> <name><name pos:line="516" pos:column="70">RiskItConstants</name><op:operator pos:line="516" pos:column="85">.</op:operator><name pos:line="516" pos:column="86">TWENTY_PERCENT</name></name><op:operator pos:line="516" pos:column="100">/</op:operator><lit:literal type="number" pos:line="516" pos:column="101">100</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="517" pos:column="17">else <if pos:line="517" pos:column="22">if<condition pos:line="517" pos:column="24">(<expr><call><name><name pos:line="517" pos:column="25">inv</name><op:operator pos:line="517" pos:column="28">.</op:operator><name pos:line="517" pos:column="29">getDeductible</name></name><argument_list pos:line="517" pos:column="42">()</argument_list></call> <op:operator pos:line="517" pos:column="45">&lt;</op:operator> <call><name><name pos:line="517" pos:column="47">inv</name><op:operator pos:line="517" pos:column="50">.</op:operator><name pos:line="517" pos:column="51">getPropertyValue</name></name><argument_list pos:line="517" pos:column="67">()</argument_list></call> <op:operator pos:line="517" pos:column="70">*</op:operator> <name><name pos:line="517" pos:column="72">RiskItConstants</name><op:operator pos:line="517" pos:column="87">.</op:operator><name pos:line="517" pos:column="88">THIRTY_PERCENT</name></name><op:operator pos:line="517" pos:column="102">/</op:operator><lit:literal type="number" pos:line="517" pos:column="103">100</lit:literal></expr>)</condition><then pos:line="517" pos:column="107">
			<expr_stmt><expr><name pos:line="518" pos:column="25">totalPremium</name> <op:operator pos:line="518" pos:column="38">=</op:operator> <name pos:line="518" pos:column="40">totalPremium</name> <op:operator pos:line="518" pos:column="53">+</op:operator> <name pos:line="518" pos:column="55">totalPremium</name> <op:operator pos:line="518" pos:column="68">*</op:operator> <name><name pos:line="518" pos:column="70">RiskItConstants</name><op:operator pos:line="518" pos:column="85">.</op:operator><name pos:line="518" pos:column="86">THIRTY_PERCENT</name></name><op:operator pos:line="518" pos:column="100">/</op:operator><lit:literal type="number" pos:line="518" pos:column="101">100</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>
		
		<comment type="line" pos:line="520" pos:column="17">//compare based on score too</comment>
		<if pos:line="521" pos:column="17">if<condition pos:line="521" pos:column="19">(<expr><call><name><name pos:line="521" pos:column="20">inv</name><op:operator pos:line="521" pos:column="23">.</op:operator><name pos:line="521" pos:column="24">getScore</name></name><argument_list pos:line="521" pos:column="32">()</argument_list></call> <op:operator pos:line="521" pos:column="35">&lt;=</op:operator> <lit:literal type="number" pos:line="521" pos:column="38">80.0</lit:literal></expr>)</condition><then pos:line="521" pos:column="43">
			<expr_stmt><expr><name pos:line="522" pos:column="25">totalPremium</name> <op:operator pos:line="522" pos:column="38">=</op:operator> <name pos:line="522" pos:column="40">totalPremium</name> <op:operator pos:line="522" pos:column="53">+</op:operator> <name pos:line="522" pos:column="55">totalPremium</name> <op:operator pos:line="522" pos:column="68">*</op:operator> <name><name pos:line="522" pos:column="70">RiskItConstants</name><op:operator pos:line="522" pos:column="85">.</op:operator><name pos:line="522" pos:column="86">TEN_PERCENT</name></name><op:operator pos:line="522" pos:column="97">/</op:operator><lit:literal type="number" pos:line="522" pos:column="98">100</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="523" pos:column="17">else <if pos:line="523" pos:column="22">if<condition pos:line="523" pos:column="24">(<expr><call><name><name pos:line="523" pos:column="25">inv</name><op:operator pos:line="523" pos:column="28">.</op:operator><name pos:line="523" pos:column="29">getScore</name></name><argument_list pos:line="523" pos:column="37">()</argument_list></call> <op:operator pos:line="523" pos:column="40">&lt;=</op:operator> <lit:literal type="number" pos:line="523" pos:column="43">50.0</lit:literal></expr>)</condition><then pos:line="523" pos:column="48">
			<expr_stmt><expr><name pos:line="524" pos:column="25">totalPremium</name> <op:operator pos:line="524" pos:column="38">=</op:operator> <name pos:line="524" pos:column="40">totalPremium</name> <op:operator pos:line="524" pos:column="53">+</op:operator> <name pos:line="524" pos:column="55">totalPremium</name> <op:operator pos:line="524" pos:column="68">*</op:operator> <name><name pos:line="524" pos:column="70">RiskItConstants</name><op:operator pos:line="524" pos:column="85">.</op:operator><name pos:line="524" pos:column="86">TWENTY_PERCENT</name></name><op:operator pos:line="524" pos:column="100">/</op:operator><lit:literal type="number" pos:line="524" pos:column="101">100</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="525" pos:column="17">else <if pos:line="525" pos:column="22">if<condition pos:line="525" pos:column="24">(<expr><call><name><name pos:line="525" pos:column="25">inv</name><op:operator pos:line="525" pos:column="28">.</op:operator><name pos:line="525" pos:column="29">getScore</name></name><argument_list pos:line="525" pos:column="37">()</argument_list></call> <op:operator pos:line="525" pos:column="40">&lt;=</op:operator> <lit:literal type="number" pos:line="525" pos:column="43">10.0</lit:literal></expr>)</condition><then pos:line="525" pos:column="48">
			<expr_stmt><expr><name pos:line="526" pos:column="25">totalPremium</name> <op:operator pos:line="526" pos:column="38">=</op:operator> <name pos:line="526" pos:column="40">totalPremium</name> <op:operator pos:line="526" pos:column="53">+</op:operator> <name pos:line="526" pos:column="55">totalPremium</name> <op:operator pos:line="526" pos:column="68">*</op:operator> <name><name pos:line="526" pos:column="70">RiskItConstants</name><op:operator pos:line="526" pos:column="85">.</op:operator><name pos:line="526" pos:column="86">THIRTY_PERCENT</name></name><op:operator pos:line="526" pos:column="100">/</op:operator><lit:literal type="number" pos:line="526" pos:column="101">100</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>
		
		<return pos:line="528" pos:column="17">return <expr><name pos:line="528" pos:column="24">totalPremium</name><op:operator pos:line="528" pos:column="36">/</op:operator><lit:literal type="number" pos:line="528" pos:column="37">12</lit:literal></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc" pos:line="532" pos:column="9">/**
	 * This method puts all methods to calculate the premium together as 
	 * one call
	 * @param inv - customer data object
	 * @return - the monthly premium
	 */</comment>
	<function><type><specifier pos:line="538" pos:column="9">public</specifier> <name pos:line="538" pos:column="16">double</name></type> <name pos:line="538" pos:column="23">calculateTotalValue</name><parameter_list pos:line="538" pos:column="42">(<param><decl><type><name pos:line="538" pos:column="43">Invitation</name></type> <name pos:line="538" pos:column="54">inv</name></decl></param>)</parameter_list>
	<block pos:line="539" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="540" pos:column="17">System</name><op:operator pos:line="540" pos:column="23">.</op:operator><name pos:line="540" pos:column="24">out</name><op:operator pos:line="540" pos:column="27">.</op:operator><name pos:line="540" pos:column="28">println</name></name><argument_list pos:line="540" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="540" pos:column="36">"flow:14"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="541" pos:column="17">//get first pure premium</comment>
		<decl_stmt><decl><type><name pos:line="542" pos:column="17">double</name></type> <name pos:line="542" pos:column="24">purePremium</name> <init pos:line="542" pos:column="36">= <expr><call><name pos:line="542" pos:column="38">calculatePurePremium</name><argument_list pos:line="542" pos:column="58">(<argument><expr><name pos:line="542" pos:column="59">inv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="544" pos:column="17">//calculate expense per every exposure unit</comment>
		<decl_stmt><decl><type><name pos:line="545" pos:column="17">double</name></type> <name pos:line="545" pos:column="24">expense_expo</name> <init pos:line="545" pos:column="37">= <expr><call><name pos:line="545" pos:column="39">calculateExpenseForExpo</name><argument_list pos:line="545" pos:column="62">(<argument><expr><name pos:line="545" pos:column="63">inv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="546" pos:column="17">inv</name><op:operator pos:line="546" pos:column="20">.</op:operator><name pos:line="546" pos:column="21">setExpenseExpo</name></name><argument_list pos:line="546" pos:column="35">(<argument><expr><name pos:line="546" pos:column="36">expense_expo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line" pos:line="548" pos:column="17">//now calculate actual premium</comment>
		<decl_stmt><decl><type><name pos:line="549" pos:column="17">double</name></type> <name pos:line="549" pos:column="24">premium</name> <init pos:line="549" pos:column="32">= <expr><call><name pos:line="549" pos:column="34">calculateActualPremium</name><argument_list pos:line="549" pos:column="56">(<argument><expr><name pos:line="549" pos:column="57">inv</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="62">purePremium</name></expr></argument>, <argument><expr><name pos:line="549" pos:column="75">expense_expo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="550" pos:column="17">inv</name><op:operator pos:line="550" pos:column="20">.</op:operator><name pos:line="550" pos:column="21">setPremium</name></name><argument_list pos:line="550" pos:column="31">(<argument><expr><name pos:line="550" pos:column="32">premium</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return pos:line="552" pos:column="17">return <expr><name pos:line="552" pos:column="24">premium</name></expr>;</return>
	}</block></function>
	

}</block></class>
</unit>
