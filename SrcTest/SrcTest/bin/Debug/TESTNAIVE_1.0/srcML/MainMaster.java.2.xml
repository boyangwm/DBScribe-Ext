<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\MainMaster.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">Connection</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">SQLException</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">util</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Scanner</name></name>;</import>


<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">MainMaster</name> <block pos:line="12" pos:column="25">{
	
	<function><type><specifier pos:line="14" pos:column="9">public</specifier> <specifier pos:line="14" pos:column="16">static</specifier> <name pos:line="14" pos:column="23">void</name></type> <name pos:line="14" pos:column="28">main</name><parameter_list pos:line="14" pos:column="32">(<param><decl><type><name><name pos:line="14" pos:column="33">String</name><index pos:line="14" pos:column="39">[]</index></name></type> <name pos:line="14" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="14" pos:column="48">{
		
		<expr_stmt><expr><call><name><name pos:line="16" pos:column="17">System</name><op:operator pos:line="16" pos:column="23">.</op:operator><name pos:line="16" pos:column="24">out</name><op:operator pos:line="16" pos:column="27">.</op:operator><name pos:line="16" pos:column="28">println</name></name><argument_list pos:line="16" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="16" pos:column="36">"WELCOME TO UMAS"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="17" pos:column="17">System</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">out</name><op:operator pos:line="17" pos:column="27">.</op:operator><name pos:line="17" pos:column="28">println</name></name><argument_list pos:line="17" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">Login</name></type> <name pos:line="19" pos:column="23">user</name> <init pos:line="19" pos:column="28">= <expr><call><name pos:line="19" pos:column="30">authenticate</name><argument_list pos:line="19" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">user</name><op:operator pos:line="20" pos:column="25">!=</op:operator><lit:literal type="null" pos:line="20" pos:column="27">null</lit:literal></expr>)</condition><then><block pos:line="20" pos:column="32">{
			<expr_stmt><expr><call><name><name pos:line="21" pos:column="25">System</name><op:operator pos:line="21" pos:column="31">.</op:operator><name pos:line="21" pos:column="32">out</name><op:operator pos:line="21" pos:column="35">.</op:operator><name pos:line="21" pos:column="36">println</name></name><argument_list pos:line="21" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="21" pos:column="44">"Welcome "</lit:literal> <op:operator pos:line="21" pos:column="55">+</op:operator> <call><name><name pos:line="21" pos:column="57">user</name><op:operator pos:line="21" pos:column="61">.</op:operator><name pos:line="21" pos:column="62">getUsername</name></name><argument_list pos:line="21" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">String</name></type> <name pos:line="23" pos:column="32">username</name> <init pos:line="23" pos:column="41">= <expr><call><name><name pos:line="23" pos:column="43">user</name><op:operator pos:line="23" pos:column="47">.</op:operator><name pos:line="23" pos:column="48">getUsername</name></name><argument_list pos:line="23" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">People</name></type> <name pos:line="24" pos:column="32">person</name> <init pos:line="24" pos:column="39">= <expr><op:operator pos:line="24" pos:column="41">new</op:operator> <call><name pos:line="24" pos:column="45">People</name><argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">username</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="25" pos:column="25">int</name></type> <name pos:line="25" pos:column="29">positionID</name> <init pos:line="25" pos:column="40">= <expr><call><name><name pos:line="25" pos:column="42">person</name><op:operator pos:line="25" pos:column="48">.</op:operator><name pos:line="25" pos:column="49">getPositionID</name></name><argument_list pos:line="25" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="26" pos:column="25">if<condition pos:line="26" pos:column="27">(<expr><name pos:line="26" pos:column="28">positionID</name> <op:operator pos:line="26" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="26" pos:column="42">1</lit:literal></expr>)</condition><then><block pos:line="26" pos:column="44">{ <comment type="line" pos:line="26" pos:column="46">//Admin</comment>
				<expr_stmt><expr><call><name pos:line="27" pos:column="33">adminFunctions</name><argument_list pos:line="27" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="28" pos:column="27">else <if pos:line="28" pos:column="32">if<condition pos:line="28" pos:column="34">(<expr><name pos:line="28" pos:column="35">positionID</name> <op:operator pos:line="28" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="28" pos:column="49">2</lit:literal></expr>)</condition><then><block pos:line="28" pos:column="51">{ <comment type="line" pos:line="28" pos:column="53">//Professor</comment>
				<expr_stmt><expr><call><name pos:line="29" pos:column="33">professorFunctions</name><argument_list pos:line="29" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="30" pos:column="27">else <if pos:line="30" pos:column="32">if<condition pos:line="30" pos:column="34">(<expr><name pos:line="30" pos:column="35">positionID</name> <op:operator pos:line="30" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="30" pos:column="49">3</lit:literal></expr>)</condition><then><block pos:line="30" pos:column="51">{ <comment type="line" pos:line="30" pos:column="53">//Student</comment>
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">studentFunctions</name><argument_list pos:line="31" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="32" pos:column="27">else <if pos:line="32" pos:column="32">if<condition pos:line="32" pos:column="34">(<expr><name pos:line="32" pos:column="35">positionID</name> <op:operator pos:line="32" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="32" pos:column="49">4</lit:literal></expr>)</condition><then><block pos:line="32" pos:column="51">{ <comment type="line" pos:line="32" pos:column="53">//TA</comment>
				<expr_stmt><expr><call><name pos:line="33" pos:column="33">taFunctions</name><argument_list pos:line="33" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="34" pos:column="27">else <if pos:line="34" pos:column="32">if<condition pos:line="34" pos:column="34">(<expr><name pos:line="34" pos:column="35">positionID</name> <op:operator pos:line="34" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="34" pos:column="49">5</lit:literal></expr>)</condition><then><block pos:line="34" pos:column="51">{ <comment type="line" pos:line="34" pos:column="53">//Super Admin</comment>
				<expr_stmt><expr><call><name pos:line="35" pos:column="33">superAdminFunctions</name><argument_list pos:line="35" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="36" pos:column="27">else <block pos:line="36" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="37" pos:column="33">System</name><op:operator pos:line="37" pos:column="39">.</op:operator><name pos:line="37" pos:column="40">out</name><op:operator pos:line="37" pos:column="43">.</op:operator><name pos:line="37" pos:column="44">println</name></name><argument_list pos:line="37" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="52">"Data Corrupt. No such positionID"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if></else></if>
			
		}</block></then></if>
	}</block></function>

	<function><type><specifier pos:line="43" pos:column="9">private</specifier> <specifier pos:line="43" pos:column="17">static</specifier> <name pos:line="43" pos:column="24">Login</name></type> <name pos:line="43" pos:column="30">authenticate</name><parameter_list pos:line="43" pos:column="42">()</parameter_list> <block pos:line="43" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">Scanner</name></type> <name pos:line="44" pos:column="25">in</name> <init pos:line="44" pos:column="28">= <expr><op:operator pos:line="44" pos:column="30">new</op:operator> <call><name pos:line="44" pos:column="34">Scanner</name><argument_list pos:line="44" pos:column="41">(<argument><expr><name><name pos:line="44" pos:column="42">System</name><op:operator pos:line="44" pos:column="48">.</op:operator><name pos:line="44" pos:column="49">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">boolean</name></type> <name pos:line="45" pos:column="25">isValidUser</name> <init pos:line="45" pos:column="37">= <expr><lit:literal type="boolean" pos:line="45" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">boolean</name></type> <name pos:line="46" pos:column="25">continueInput</name> <init pos:line="46" pos:column="39">= <expr><lit:literal type="boolean" pos:line="46" pos:column="41">true</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">Login</name></type> <name pos:line="47" pos:column="23">user</name> <init pos:line="47" pos:column="28">= <expr><lit:literal type="null" pos:line="47" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>
		<do pos:line="48" pos:column="17">do<block pos:line="48" pos:column="19">{
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">System</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">out</name><op:operator pos:line="49" pos:column="35">.</op:operator><name pos:line="49" pos:column="36">println</name></name><argument_list pos:line="49" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="44">"Please Login"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">System</name><op:operator pos:line="50" pos:column="31">.</op:operator><name pos:line="50" pos:column="32">out</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">println</name></name><argument_list pos:line="50" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="44">"Enter Username: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">String</name></type> <name pos:line="51" pos:column="32">username</name> <init pos:line="51" pos:column="41">= <expr><call><name><name pos:line="51" pos:column="43">in</name><op:operator pos:line="51" pos:column="45">.</op:operator><name pos:line="51" pos:column="46">nextLine</name></name><argument_list pos:line="51" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">System</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">out</name><op:operator pos:line="52" pos:column="35">.</op:operator><name pos:line="52" pos:column="36">println</name></name><argument_list pos:line="52" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="44">"Enter Password: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">String</name></type> <name pos:line="53" pos:column="32">password</name> <init pos:line="53" pos:column="41">= <expr><call><name><name pos:line="53" pos:column="43">in</name><op:operator pos:line="53" pos:column="45">.</op:operator><name pos:line="53" pos:column="46">nextLine</name></name><argument_list pos:line="53" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">user</name> <op:operator pos:line="54" pos:column="30">=</op:operator> <op:operator pos:line="54" pos:column="32">new</op:operator> <call><name pos:line="54" pos:column="36">Login</name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">username</name></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="52">password</name><op:operator pos:line="54" pos:column="60">.</op:operator><name pos:line="54" pos:column="61">toCharArray</name></name><argument_list pos:line="54" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">isValidUser</name> <op:operator pos:line="55" pos:column="37">=</op:operator> <call><name><name pos:line="55" pos:column="39">user</name><op:operator pos:line="55" pos:column="43">.</op:operator><name pos:line="55" pos:column="44">authenticate</name></name><argument_list pos:line="55" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="56" pos:column="25">if<condition pos:line="56" pos:column="27">(<expr><name pos:line="56" pos:column="28">isValidUser</name> <op:operator pos:line="56" pos:column="40">==</op:operator> <lit:literal type="boolean" pos:line="56" pos:column="43">false</lit:literal></expr> )</condition><then><block pos:line="56" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="57" pos:column="33">System</name><op:operator pos:line="57" pos:column="39">.</op:operator><name pos:line="57" pos:column="40">out</name><op:operator pos:line="57" pos:column="43">.</op:operator><name pos:line="57" pos:column="44">println</name></name><argument_list pos:line="57" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="52">"Invalid Username or Password. Try Again ? Y/N: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="58" pos:column="33">String</name></type> <name pos:line="58" pos:column="40">tryAgain</name> <init pos:line="58" pos:column="49">= <expr><call><name><name pos:line="58" pos:column="51">in</name><op:operator pos:line="58" pos:column="53">.</op:operator><name pos:line="58" pos:column="54">next</name></name><argument_list pos:line="58" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="59" pos:column="33">if<condition pos:line="59" pos:column="35">(<expr><name pos:line="59" pos:column="36">tryAgain</name> <op:operator pos:line="59" pos:column="45">==</op:operator> <lit:literal type="string" pos:line="59" pos:column="48">"n"</lit:literal> <op:operator pos:line="59" pos:column="52">||</op:operator> <name pos:line="59" pos:column="55">tryAgain</name> <op:operator pos:line="59" pos:column="64">==</op:operator> <lit:literal type="string" pos:line="59" pos:column="67">"N"</lit:literal></expr>)</condition><then><block pos:line="59" pos:column="71">{
					<expr_stmt><expr><name pos:line="60" pos:column="41">continueInput</name> <op:operator pos:line="60" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="60" pos:column="57">false</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="61" pos:column="41">user</name> <op:operator pos:line="61" pos:column="46">=</op:operator> <lit:literal type="null" pos:line="61" pos:column="48">null</lit:literal></expr>;</expr_stmt>
					<break pos:line="62" pos:column="41">break;</break>
				}</block></then></if>
			}</block></then> <else pos:line="64" pos:column="27">else <block pos:line="64" pos:column="32">{
				<comment type="line" pos:line="65" pos:column="33">// Get user object</comment>
			}</block></else></if>
		}</block> while <condition pos:line="67" pos:column="25">(<expr><name pos:line="67" pos:column="26">isValidUser</name> <op:operator pos:line="67" pos:column="38">==</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="41">false</lit:literal> <op:operator pos:line="67" pos:column="47">||</op:operator> <name pos:line="67" pos:column="50">continueInput</name> <op:operator pos:line="67" pos:column="64">==</op:operator> <lit:literal type="boolean" pos:line="67" pos:column="67">true</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">user</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="72" pos:column="9">private</specifier> <specifier pos:line="72" pos:column="17">static</specifier> <name pos:line="72" pos:column="24">int</name></type> <name pos:line="72" pos:column="28">adminFunctions</name><parameter_list pos:line="72" pos:column="42">()</parameter_list><block pos:line="72" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">int</name></type> <name pos:line="73" pos:column="21">option</name> <init pos:line="73" pos:column="28">= <expr><lit:literal type="number" pos:line="73" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	
		<do pos:line="75" pos:column="17">do<block pos:line="75" pos:column="19">{
			<expr_stmt><expr><name pos:line="76" pos:column="25">option</name> <op:operator pos:line="76" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="76" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">Scanner</name></type> <name pos:line="77" pos:column="33">in</name> <init pos:line="77" pos:column="36">= <expr><op:operator pos:line="77" pos:column="38">new</op:operator> <call><name pos:line="77" pos:column="42">Scanner</name><argument_list pos:line="77" pos:column="49">(<argument><expr><name><name pos:line="77" pos:column="50">System</name><op:operator pos:line="77" pos:column="56">.</op:operator><name pos:line="77" pos:column="57">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch pos:line="78" pos:column="25">switch <condition pos:line="78" pos:column="32">(<expr><name pos:line="78" pos:column="33">option</name></expr>)</condition> <block pos:line="78" pos:column="41">{
	        <case pos:line="79" pos:column="17">case <expr><lit:literal type="number" pos:line="79" pos:column="22">1</lit:literal></expr>:  <expr_stmt><expr><call><name><name pos:line="79" pos:column="26">System</name><op:operator pos:line="79" pos:column="32">.</op:operator><name pos:line="79" pos:column="33">out</name><op:operator pos:line="79" pos:column="36">.</op:operator><name pos:line="79" pos:column="37">println</name></name><argument_list pos:line="79" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		 
	        		 
	                 <break pos:line="82" pos:column="26">break;</break>
	        
	        
	        </case><case pos:line="85" pos:column="17">case <expr><lit:literal type="number" pos:line="85" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="85" pos:column="25">System</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">out</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">println</name></name><argument_list pos:line="85" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="44">"5. Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </case><default pos:line="86" pos:column="17">default: <expr_stmt><expr><call><name><name pos:line="86" pos:column="26">System</name><op:operator pos:line="86" pos:column="32">.</op:operator><name pos:line="86" pos:column="33">out</name><op:operator pos:line="86" pos:column="36">.</op:operator><name pos:line="86" pos:column="37">println</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="45">"Invalid input. Enter again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                 <break pos:line="87" pos:column="26">break;</break>
	    </default>}</block></switch>

		}</block> while <condition pos:line="90" pos:column="25">(<expr><name pos:line="90" pos:column="26">option</name> <op:operator pos:line="90" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="90" pos:column="36">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="92" pos:column="17">return <expr><name pos:line="92" pos:column="24">option</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="95" pos:column="9">private</specifier> <specifier pos:line="95" pos:column="17">static</specifier> <name pos:line="95" pos:column="24">int</name></type> <name pos:line="95" pos:column="28">professorFunctions</name><parameter_list pos:line="95" pos:column="46">()</parameter_list><block pos:line="95" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="96" pos:column="17">int</name></type> <name pos:line="96" pos:column="21">option</name> <init pos:line="96" pos:column="28">= <expr><lit:literal type="number" pos:line="96" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

		<do pos:line="98" pos:column="17">do<block pos:line="98" pos:column="19">{
			<expr_stmt><expr><name pos:line="99" pos:column="25">option</name> <op:operator pos:line="99" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="100" pos:column="25">Scanner</name></type> <name pos:line="100" pos:column="33">in</name> <init pos:line="100" pos:column="36">= <expr><op:operator pos:line="100" pos:column="38">new</op:operator> <call><name pos:line="100" pos:column="42">Scanner</name><argument_list pos:line="100" pos:column="49">(<argument><expr><name><name pos:line="100" pos:column="50">System</name><op:operator pos:line="100" pos:column="56">.</op:operator><name pos:line="100" pos:column="57">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch pos:line="101" pos:column="25">switch <condition pos:line="101" pos:column="32">(<expr><name pos:line="101" pos:column="33">option</name></expr>)</condition> <block pos:line="101" pos:column="41">{
	        <case pos:line="102" pos:column="17">case <expr><lit:literal type="number" pos:line="102" pos:column="22">1</lit:literal></expr>:  <expr_stmt><expr><call><name><name pos:line="102" pos:column="26">System</name><op:operator pos:line="102" pos:column="32">.</op:operator><name pos:line="102" pos:column="33">out</name><op:operator pos:line="102" pos:column="36">.</op:operator><name pos:line="102" pos:column="37">println</name></name><argument_list pos:line="102" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		 
	        		 
	                 <break pos:line="105" pos:column="26">break;</break>
	        
	        
	        </case><case pos:line="108" pos:column="17">case <expr><lit:literal type="number" pos:line="108" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="108" pos:column="25">System</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">out</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">println</name></name><argument_list pos:line="108" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="44">"5. Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </case><default pos:line="109" pos:column="17">default: <expr_stmt><expr><call><name><name pos:line="109" pos:column="26">System</name><op:operator pos:line="109" pos:column="32">.</op:operator><name pos:line="109" pos:column="33">out</name><op:operator pos:line="109" pos:column="36">.</op:operator><name pos:line="109" pos:column="37">println</name></name><argument_list pos:line="109" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="45">"Invalid input. Enter again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                 <break pos:line="110" pos:column="26">break;</break>
	    </default>}</block></switch>

		}</block> while <condition pos:line="113" pos:column="25">(<expr><name pos:line="113" pos:column="26">option</name> <op:operator pos:line="113" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="113" pos:column="36">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="115" pos:column="17">return <expr><name pos:line="115" pos:column="24">option</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="118" pos:column="9">private</specifier> <specifier pos:line="118" pos:column="17">static</specifier> <name pos:line="118" pos:column="24">int</name></type> <name pos:line="118" pos:column="28">studentFunctions</name><parameter_list pos:line="118" pos:column="44">()</parameter_list><block pos:line="118" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">int</name></type> <name pos:line="119" pos:column="21">option</name> <init pos:line="119" pos:column="28">= <expr><lit:literal type="number" pos:line="119" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	
		<do pos:line="121" pos:column="17">do<block pos:line="121" pos:column="19">{
			<expr_stmt><expr><name pos:line="122" pos:column="25">option</name> <op:operator pos:line="122" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="122" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="123" pos:column="25">Scanner</name></type> <name pos:line="123" pos:column="33">in</name> <init pos:line="123" pos:column="36">= <expr><op:operator pos:line="123" pos:column="38">new</op:operator> <call><name pos:line="123" pos:column="42">Scanner</name><argument_list pos:line="123" pos:column="49">(<argument><expr><name><name pos:line="123" pos:column="50">System</name><op:operator pos:line="123" pos:column="56">.</op:operator><name pos:line="123" pos:column="57">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch pos:line="124" pos:column="25">switch <condition pos:line="124" pos:column="32">(<expr><name pos:line="124" pos:column="33">option</name></expr>)</condition> <block pos:line="124" pos:column="41">{
	        <case pos:line="125" pos:column="17">case <expr><lit:literal type="number" pos:line="125" pos:column="22">1</lit:literal></expr>:  <expr_stmt><expr><call><name><name pos:line="125" pos:column="26">System</name><op:operator pos:line="125" pos:column="32">.</op:operator><name pos:line="125" pos:column="33">out</name><op:operator pos:line="125" pos:column="36">.</op:operator><name pos:line="125" pos:column="37">println</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		 
	        		 
	                 <break pos:line="128" pos:column="26">break;</break>
	        
	        
	        </case><case pos:line="131" pos:column="17">case <expr><lit:literal type="number" pos:line="131" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="131" pos:column="25">System</name><op:operator pos:line="131" pos:column="31">.</op:operator><name pos:line="131" pos:column="32">out</name><op:operator pos:line="131" pos:column="35">.</op:operator><name pos:line="131" pos:column="36">println</name></name><argument_list pos:line="131" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="44">"5. Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </case><default pos:line="132" pos:column="17">default: <expr_stmt><expr><call><name><name pos:line="132" pos:column="26">System</name><op:operator pos:line="132" pos:column="32">.</op:operator><name pos:line="132" pos:column="33">out</name><op:operator pos:line="132" pos:column="36">.</op:operator><name pos:line="132" pos:column="37">println</name></name><argument_list pos:line="132" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="45">"Invalid input. Enter again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                 <break pos:line="133" pos:column="26">break;</break>
	    </default>}</block></switch>

		}</block> while <condition pos:line="136" pos:column="25">(<expr><name pos:line="136" pos:column="26">option</name> <op:operator pos:line="136" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="136" pos:column="36">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="138" pos:column="17">return <expr><name pos:line="138" pos:column="24">option</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="141" pos:column="9">private</specifier> <specifier pos:line="141" pos:column="17">static</specifier> <name pos:line="141" pos:column="24">int</name></type> <name pos:line="141" pos:column="28">taFunctions</name><parameter_list pos:line="141" pos:column="39">()</parameter_list><block pos:line="141" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="142" pos:column="17">int</name></type> <name pos:line="142" pos:column="21">option</name> <init pos:line="142" pos:column="28">= <expr><lit:literal type="number" pos:line="142" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<do pos:line="144" pos:column="17">do<block pos:line="144" pos:column="19">{
			<expr_stmt><expr><name pos:line="145" pos:column="25">option</name> <op:operator pos:line="145" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="145" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="146" pos:column="25">Scanner</name></type> <name pos:line="146" pos:column="33">in</name> <init pos:line="146" pos:column="36">= <expr><op:operator pos:line="146" pos:column="38">new</op:operator> <call><name pos:line="146" pos:column="42">Scanner</name><argument_list pos:line="146" pos:column="49">(<argument><expr><name><name pos:line="146" pos:column="50">System</name><op:operator pos:line="146" pos:column="56">.</op:operator><name pos:line="146" pos:column="57">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch pos:line="147" pos:column="25">switch <condition pos:line="147" pos:column="32">(<expr><name pos:line="147" pos:column="33">option</name></expr>)</condition> <block pos:line="147" pos:column="41">{
	        <case pos:line="148" pos:column="17">case <expr><lit:literal type="number" pos:line="148" pos:column="22">1</lit:literal></expr>:  <expr_stmt><expr><call><name><name pos:line="148" pos:column="26">System</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">out</name><op:operator pos:line="148" pos:column="36">.</op:operator><name pos:line="148" pos:column="37">println</name></name><argument_list pos:line="148" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		 
	        		 
	                 <break pos:line="151" pos:column="26">break;</break>
	        
	        
	        </case><case pos:line="154" pos:column="17">case <expr><lit:literal type="number" pos:line="154" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="154" pos:column="25">System</name><op:operator pos:line="154" pos:column="31">.</op:operator><name pos:line="154" pos:column="32">out</name><op:operator pos:line="154" pos:column="35">.</op:operator><name pos:line="154" pos:column="36">println</name></name><argument_list pos:line="154" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="44">"5. Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </case><default pos:line="155" pos:column="17">default: <expr_stmt><expr><call><name><name pos:line="155" pos:column="26">System</name><op:operator pos:line="155" pos:column="32">.</op:operator><name pos:line="155" pos:column="33">out</name><op:operator pos:line="155" pos:column="36">.</op:operator><name pos:line="155" pos:column="37">println</name></name><argument_list pos:line="155" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="45">"Invalid input. Enter again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                 <break pos:line="156" pos:column="26">break;</break>
	    </default>}</block></switch>

		}</block> while <condition pos:line="159" pos:column="25">(<expr><name pos:line="159" pos:column="26">option</name> <op:operator pos:line="159" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="159" pos:column="36">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="161" pos:column="17">return <expr><name pos:line="161" pos:column="24">option</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="164" pos:column="9">private</specifier> <specifier pos:line="164" pos:column="17">static</specifier> <name pos:line="164" pos:column="24">int</name></type> <name pos:line="164" pos:column="28">superAdminFunctions</name><parameter_list pos:line="164" pos:column="47">()</parameter_list><block pos:line="164" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">int</name></type> <name pos:line="165" pos:column="21">option</name> <init pos:line="165" pos:column="28">= <expr><lit:literal type="number" pos:line="165" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<do pos:line="167" pos:column="17">do<block pos:line="167" pos:column="19">{
			<expr_stmt><expr><name pos:line="168" pos:column="25">option</name> <op:operator pos:line="168" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="168" pos:column="34">0</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="169" pos:column="25">Scanner</name></type> <name pos:line="169" pos:column="33">in</name> <init pos:line="169" pos:column="36">= <expr><op:operator pos:line="169" pos:column="38">new</op:operator> <call><name pos:line="169" pos:column="42">Scanner</name><argument_list pos:line="169" pos:column="49">(<argument><expr><name><name pos:line="169" pos:column="50">System</name><op:operator pos:line="169" pos:column="56">.</op:operator><name pos:line="169" pos:column="57">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<switch pos:line="170" pos:column="25">switch <condition pos:line="170" pos:column="32">(<expr><name pos:line="170" pos:column="33">option</name></expr>)</condition> <block pos:line="170" pos:column="41">{
	        <case pos:line="171" pos:column="17">case <expr><lit:literal type="number" pos:line="171" pos:column="22">1</lit:literal></expr>:  <expr_stmt><expr><call><name><name pos:line="171" pos:column="26">System</name><op:operator pos:line="171" pos:column="32">.</op:operator><name pos:line="171" pos:column="33">out</name><op:operator pos:line="171" pos:column="36">.</op:operator><name pos:line="171" pos:column="37">println</name></name><argument_list pos:line="171" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        		 
	        		 
	                 <break pos:line="174" pos:column="26">break;</break>
	        
	        
	        </case><case pos:line="177" pos:column="17">case <expr><lit:literal type="number" pos:line="177" pos:column="22">5</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="177" pos:column="25">System</name><op:operator pos:line="177" pos:column="31">.</op:operator><name pos:line="177" pos:column="32">out</name><op:operator pos:line="177" pos:column="35">.</op:operator><name pos:line="177" pos:column="36">println</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="44">"5. Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </case><default pos:line="178" pos:column="17">default: <expr_stmt><expr><call><name><name pos:line="178" pos:column="26">System</name><op:operator pos:line="178" pos:column="32">.</op:operator><name pos:line="178" pos:column="33">out</name><op:operator pos:line="178" pos:column="36">.</op:operator><name pos:line="178" pos:column="37">println</name></name><argument_list pos:line="178" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="45">"Invalid input. Enter again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	                 <break pos:line="179" pos:column="26">break;</break>
	    </default>}</block></switch>

		}</block> while <condition pos:line="182" pos:column="25">(<expr><name pos:line="182" pos:column="26">option</name> <op:operator pos:line="182" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="182" pos:column="36">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="184" pos:column="17">return <expr><name pos:line="184" pos:column="24">option</name></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>
