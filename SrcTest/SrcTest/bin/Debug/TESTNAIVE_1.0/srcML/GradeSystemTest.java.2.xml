<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\GradeSystemTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">org</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">junit</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Test</name></name>;</import>

<class><specifier pos:line="8" pos:column="1">public</specifier> class <name pos:line="8" pos:column="14">GradeSystemTest</name> <block pos:line="8" pos:column="30">{

	<comment type="line" pos:line="10" pos:column="9">// To insert New Grades when it is Not present</comment>
	
	<function><type><annotation pos:line="12" pos:column="9">@<name pos:line="12" pos:column="10">Test</name></annotation>
	<specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">insertNewGrade</name><parameter_list pos:line="13" pos:column="35">()</parameter_list> <block pos:line="13" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">String</name></type> <name pos:line="14" pos:column="24">grade</name> <init pos:line="14" pos:column="30">= <expr><lit:literal type="string" pos:line="14" pos:column="32">"E"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int</name></type> <name pos:line="15" pos:column="21">gradeLevel</name> <init pos:line="15" pos:column="32">= <expr><lit:literal type="number" pos:line="15" pos:column="34">8</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">GradeSystem</name></type> <name pos:line="16" pos:column="29">studentGrade</name> <init pos:line="16" pos:column="42">= <expr><op:operator pos:line="16" pos:column="44">new</op:operator> <call><name pos:line="16" pos:column="48">GradeSystem</name><argument_list pos:line="16" pos:column="59">(<argument><expr><name pos:line="16" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="16" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="17" pos:column="17">studentGrade</name><op:operator pos:line="17" pos:column="29">.</op:operator><name pos:line="17" pos:column="30">deleteGrade</name></name><argument_list pos:line="17" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">boolean</name></type> <name pos:line="18" pos:column="25">gradeAdded</name> <init pos:line="18" pos:column="36">= <expr><call><name><name pos:line="18" pos:column="38">studentGrade</name><op:operator pos:line="18" pos:column="50">.</op:operator><name pos:line="18" pos:column="51">insertNewGrade</name></name><argument_list pos:line="18" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">assertEquals</name><argument_list pos:line="19" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="19" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="19" pos:column="35">gradeAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="22" pos:column="9">// To insert New Grades when it is already present</comment>
	<function><type><annotation pos:line="23" pos:column="9">@<name pos:line="23" pos:column="10">Test</name></annotation>
	<specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">void</name></type> <name pos:line="24" pos:column="21">insertPresentGrade</name><parameter_list pos:line="24" pos:column="39">()</parameter_list> <block pos:line="24" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">String</name></type> <name pos:line="25" pos:column="24">grade</name> <init pos:line="25" pos:column="30">= <expr><lit:literal type="string" pos:line="25" pos:column="32">"A"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">int</name></type> <name pos:line="26" pos:column="21">gradeLevel</name> <init pos:line="26" pos:column="32">= <expr><lit:literal type="number" pos:line="26" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">GradeSystem</name></type> <name pos:line="27" pos:column="29">studentGrade</name> <init pos:line="27" pos:column="42">= <expr><op:operator pos:line="27" pos:column="44">new</op:operator> <call><name pos:line="27" pos:column="48">GradeSystem</name><argument_list pos:line="27" pos:column="59">(<argument><expr><name pos:line="27" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="27" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">boolean</name></type> <name pos:line="28" pos:column="25">gradeAdded</name> <init pos:line="28" pos:column="36">= <expr><call><name><name pos:line="28" pos:column="38">studentGrade</name><op:operator pos:line="28" pos:column="50">.</op:operator><name pos:line="28" pos:column="51">insertNewGrade</name></name><argument_list pos:line="28" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">assertEquals</name><argument_list pos:line="29" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="29" pos:column="30">false</lit:literal></expr></argument>,<argument><expr><name pos:line="29" pos:column="36">gradeAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<comment type="line" pos:line="33" pos:column="9">// To delete Grades when it is present</comment>
	<function><type><annotation pos:line="34" pos:column="9">@<name pos:line="34" pos:column="10">Test</name></annotation>
	<specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">deleteGrade</name><parameter_list pos:line="35" pos:column="32">()</parameter_list> <block pos:line="35" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">String</name></type> <name pos:line="36" pos:column="24">grade</name> <init pos:line="36" pos:column="30">= <expr><lit:literal type="string" pos:line="36" pos:column="32">"F"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int</name></type> <name pos:line="37" pos:column="21">gradeLevel</name> <init pos:line="37" pos:column="32">= <expr><lit:literal type="number" pos:line="37" pos:column="34">9</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">GradeSystem</name></type> <name pos:line="38" pos:column="29">studentGrade</name> <init pos:line="38" pos:column="42">= <expr><op:operator pos:line="38" pos:column="44">new</op:operator> <call><name pos:line="38" pos:column="48">GradeSystem</name><argument_list pos:line="38" pos:column="59">(<argument><expr><name pos:line="38" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="38" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="39" pos:column="17">studentGrade</name><op:operator pos:line="39" pos:column="29">.</op:operator><name pos:line="39" pos:column="30">insertNewGrade</name></name><argument_list pos:line="39" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">boolean</name></type> <name pos:line="40" pos:column="25">gradeDeleted</name> <init pos:line="40" pos:column="38">= <expr><call><name><name pos:line="40" pos:column="40">studentGrade</name><op:operator pos:line="40" pos:column="52">.</op:operator><name pos:line="40" pos:column="53">deleteGrade</name></name><argument_list pos:line="40" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">assertEquals</name><argument_list pos:line="41" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="41" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="41" pos:column="35">gradeDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<comment type="line" pos:line="45" pos:column="9">// To delete Grades when it is Not present</comment>
	<function><type><annotation pos:line="46" pos:column="9">@<name pos:line="46" pos:column="10">Test</name></annotation>
	<specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">deleteAbsentGrade</name><parameter_list pos:line="47" pos:column="38">()</parameter_list> <block pos:line="47" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">String</name></type> <name pos:line="48" pos:column="24">grade</name> <init pos:line="48" pos:column="30">= <expr><lit:literal type="string" pos:line="48" pos:column="32">"F"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">int</name></type> <name pos:line="49" pos:column="21">gradeLevel</name> <init pos:line="49" pos:column="32">= <expr><lit:literal type="number" pos:line="49" pos:column="34">9</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">GradeSystem</name></type> <name pos:line="50" pos:column="29">studentGrade</name> <init pos:line="50" pos:column="42">= <expr><op:operator pos:line="50" pos:column="44">new</op:operator> <call><name pos:line="50" pos:column="48">GradeSystem</name><argument_list pos:line="50" pos:column="59">(<argument><expr><name pos:line="50" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="50" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">boolean</name></type> <name pos:line="51" pos:column="25">gradeDeleted</name> <init pos:line="51" pos:column="38">= <expr><call><name><name pos:line="51" pos:column="40">studentGrade</name><op:operator pos:line="51" pos:column="52">.</op:operator><name pos:line="51" pos:column="53">deleteGrade</name></name><argument_list pos:line="51" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">assertEquals</name><argument_list pos:line="52" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="52" pos:column="30">false</lit:literal></expr></argument>,<argument><expr><name pos:line="52" pos:column="36">gradeDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<comment type="line" pos:line="56" pos:column="9">// To modify the grade</comment>
	<function><type><annotation pos:line="57" pos:column="9">@<name pos:line="57" pos:column="10">Test</name></annotation>
	<specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">void</name></type> <name pos:line="58" pos:column="21">modifyGrade</name><parameter_list pos:line="58" pos:column="32">()</parameter_list> <block pos:line="58" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">String</name></type> <name pos:line="59" pos:column="24">grade</name> <init pos:line="59" pos:column="30">= <expr><lit:literal type="string" pos:line="59" pos:column="32">"E"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">int</name></type> <name pos:line="60" pos:column="21">gradeLevel</name> <init pos:line="60" pos:column="32">= <expr><lit:literal type="number" pos:line="60" pos:column="34">8</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">GradeSystem</name></type> <name pos:line="61" pos:column="29">studentGrade</name> <init pos:line="61" pos:column="42">= <expr><op:operator pos:line="61" pos:column="44">new</op:operator> <call><name pos:line="61" pos:column="48">GradeSystem</name><argument_list pos:line="61" pos:column="59">(<argument><expr><name pos:line="61" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="61" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="62" pos:column="17">studentGrade</name><op:operator pos:line="62" pos:column="29">.</op:operator><name pos:line="62" pos:column="30">deleteGrade</name></name><argument_list pos:line="62" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="63" pos:column="17">studentGrade</name><op:operator pos:line="63" pos:column="29">.</op:operator><name pos:line="63" pos:column="30">insertNewGrade</name></name><argument_list pos:line="63" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="64" pos:column="17">System</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">out</name><op:operator pos:line="64" pos:column="27">.</op:operator><name pos:line="64" pos:column="28">println</name></name><argument_list pos:line="64" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="36">"--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="65" pos:column="17">boolean</name></type> <name pos:line="65" pos:column="25">gradeModified</name> <init pos:line="65" pos:column="39">= <expr><call><name><name pos:line="65" pos:column="41">studentGrade</name><op:operator pos:line="65" pos:column="53">.</op:operator><name pos:line="65" pos:column="54">modifyGrade</name></name><argument_list pos:line="65" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="66">"E+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">assertEquals</name><argument_list pos:line="66" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="66" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="66" pos:column="35">gradeModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">studentGrade</name> <op:operator pos:line="67" pos:column="30">=</op:operator> <op:operator pos:line="67" pos:column="32">new</op:operator> <call><name pos:line="67" pos:column="36">GradeSystem</name><argument_list pos:line="67" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="48">"E+"</lit:literal></expr></argument>,<argument><expr><name pos:line="67" pos:column="53">gradeLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="68" pos:column="17">studentGrade</name><op:operator pos:line="68" pos:column="29">.</op:operator><name pos:line="68" pos:column="30">modifyGrade</name></name><argument_list pos:line="68" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="42">"E"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="71" pos:column="9">// To modify the level of the grade</comment>
	<function><type><annotation pos:line="72" pos:column="9">@<name pos:line="72" pos:column="10">Test</name></annotation>
	<specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">modifyGradeLevel</name><parameter_list pos:line="73" pos:column="37">()</parameter_list> <block pos:line="73" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">String</name></type> <name pos:line="74" pos:column="24">grade</name> <init pos:line="74" pos:column="30">= <expr><lit:literal type="string" pos:line="74" pos:column="32">"E"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="75" pos:column="17">int</name></type> <name pos:line="75" pos:column="21">gradeLevel</name> <init pos:line="75" pos:column="32">= <expr><lit:literal type="number" pos:line="75" pos:column="34">8</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">GradeSystem</name></type> <name pos:line="76" pos:column="29">studentGrade</name> <init pos:line="76" pos:column="42">= <expr><op:operator pos:line="76" pos:column="44">new</op:operator> <call><name pos:line="76" pos:column="48">GradeSystem</name><argument_list pos:line="76" pos:column="59">(<argument><expr><name pos:line="76" pos:column="60">grade</name></expr></argument>,<argument><expr><name pos:line="76" pos:column="66">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">studentGrade</name><op:operator pos:line="77" pos:column="29">.</op:operator><name pos:line="77" pos:column="30">deleteGrade</name></name><argument_list pos:line="77" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="78" pos:column="17">studentGrade</name><op:operator pos:line="78" pos:column="29">.</op:operator><name pos:line="78" pos:column="30">insertNewGrade</name></name><argument_list pos:line="78" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="79" pos:column="17">System</name><op:operator pos:line="79" pos:column="23">.</op:operator><name pos:line="79" pos:column="24">out</name><op:operator pos:line="79" pos:column="27">.</op:operator><name pos:line="79" pos:column="28">println</name></name><argument_list pos:line="79" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="36">"--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">boolean</name></type> <name pos:line="80" pos:column="25">gradeLevelModified</name> <init pos:line="80" pos:column="44">= <expr><call><name><name pos:line="80" pos:column="46">studentGrade</name><op:operator pos:line="80" pos:column="58">.</op:operator><name pos:line="80" pos:column="59">modifyGradeLevel</name></name><argument_list pos:line="80" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="76">9</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="81" pos:column="17">assertEquals</name><argument_list pos:line="81" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="81" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="81" pos:column="35">gradeLevelModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">studentGrade</name> <op:operator pos:line="82" pos:column="30">=</op:operator> <op:operator pos:line="82" pos:column="32">new</op:operator> <call><name pos:line="82" pos:column="36">GradeSystem</name><argument_list pos:line="82" pos:column="47">(<argument><expr><name pos:line="82" pos:column="48">grade</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="82" pos:column="54">9</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="83" pos:column="17">studentGrade</name><op:operator pos:line="83" pos:column="29">.</op:operator><name pos:line="83" pos:column="30">modifyGradeLevel</name></name><argument_list pos:line="83" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="47">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="86" pos:column="9">// To get a gradelevel for a grade when grade is present</comment>
	<function><type><annotation pos:line="87" pos:column="9">@<name pos:line="87" pos:column="10">Test</name></annotation>
	<specifier pos:line="88" pos:column="9">public</specifier> <name pos:line="88" pos:column="16">void</name></type> <name pos:line="88" pos:column="21">getGradeLevelForGrade</name><parameter_list pos:line="88" pos:column="42">()</parameter_list> <block pos:line="88" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="89" pos:column="17">String</name></type> <name pos:line="89" pos:column="24">grade</name> <init pos:line="89" pos:column="30">= <expr><lit:literal type="string" pos:line="89" pos:column="32">"D"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">GradeSystem</name></type> <name pos:line="90" pos:column="29">studentGrade</name> <init pos:line="90" pos:column="42">= <expr><op:operator pos:line="90" pos:column="44">new</op:operator> <call><name pos:line="90" pos:column="48">GradeSystem</name><argument_list pos:line="90" pos:column="59">(<argument><expr><name pos:line="90" pos:column="60">grade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="91" pos:column="17">studentGrade</name> <op:operator pos:line="91" pos:column="30">=</op:operator> <call><name><name pos:line="91" pos:column="32">studentGrade</name><op:operator pos:line="91" pos:column="44">.</op:operator><name pos:line="91" pos:column="45">getGradeLevelForGrade</name></name><argument_list pos:line="91" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="92" pos:column="17">System</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">out</name><op:operator pos:line="92" pos:column="27">.</op:operator><name pos:line="92" pos:column="28">println</name></name><argument_list pos:line="92" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="36">"GradeLevel: "</lit:literal><op:operator pos:line="92" pos:column="50">+</op:operator><call><name><name pos:line="92" pos:column="51">studentGrade</name><op:operator pos:line="92" pos:column="63">.</op:operator><name pos:line="92" pos:column="64">getGradeLevel</name></name><argument_list pos:line="92" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="93" pos:column="17">System</name><op:operator pos:line="93" pos:column="23">.</op:operator><name pos:line="93" pos:column="24">out</name><op:operator pos:line="93" pos:column="27">.</op:operator><name pos:line="93" pos:column="28">println</name></name><argument_list pos:line="93" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="36">"--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">assertEquals</name><argument_list pos:line="95" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="30">7</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="95" pos:column="32">studentGrade</name><op:operator pos:line="95" pos:column="44">.</op:operator><name pos:line="95" pos:column="45">getGradeLevel</name></name><argument_list pos:line="95" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="98" pos:column="9">// To get a gradelevel for a grade when grade is absent</comment>
	<function><type><annotation pos:line="99" pos:column="9">@<name pos:line="99" pos:column="10">Test</name></annotation>
	<specifier pos:line="100" pos:column="9">public</specifier> <name pos:line="100" pos:column="16">void</name></type> <name pos:line="100" pos:column="21">getGradeLevelForGradeAbsent</name><parameter_list pos:line="100" pos:column="48">()</parameter_list> <block pos:line="100" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="101" pos:column="17">String</name></type> <name pos:line="101" pos:column="24">grade</name> <init pos:line="101" pos:column="30">= <expr><lit:literal type="string" pos:line="101" pos:column="32">"Z"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">GradeSystem</name></type> <name pos:line="102" pos:column="29">studentGrade</name> <init pos:line="102" pos:column="42">= <expr><op:operator pos:line="102" pos:column="44">new</op:operator> <call><name pos:line="102" pos:column="48">GradeSystem</name><argument_list pos:line="102" pos:column="59">(<argument><expr><name pos:line="102" pos:column="60">grade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="103" pos:column="17">studentGrade</name> <op:operator pos:line="103" pos:column="30">=</op:operator> <call><name><name pos:line="103" pos:column="32">studentGrade</name><op:operator pos:line="103" pos:column="44">.</op:operator><name pos:line="103" pos:column="45">getGradeLevelForGrade</name></name><argument_list pos:line="103" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="104" pos:column="17">System</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">out</name><op:operator pos:line="104" pos:column="27">.</op:operator><name pos:line="104" pos:column="28">println</name></name><argument_list pos:line="104" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="36">"GradeLevel: "</lit:literal><op:operator pos:line="104" pos:column="50">+</op:operator><call><name><name pos:line="104" pos:column="51">studentGrade</name><op:operator pos:line="104" pos:column="63">.</op:operator><name pos:line="104" pos:column="64">getGradeLevel</name></name><argument_list pos:line="104" pos:column="77">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="105" pos:column="17">System</name><op:operator pos:line="105" pos:column="23">.</op:operator><name pos:line="105" pos:column="24">out</name><op:operator pos:line="105" pos:column="27">.</op:operator><name pos:line="105" pos:column="28">println</name></name><argument_list pos:line="105" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="36">"--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">assertEquals</name><argument_list pos:line="106" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="106" pos:column="30">0</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="106" pos:column="32">studentGrade</name><op:operator pos:line="106" pos:column="44">.</op:operator><name pos:line="106" pos:column="45">getGradeLevel</name></name><argument_list pos:line="106" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="109" pos:column="9">// To get a grade for a gradelevel when gradelevel is present</comment>
	<function><type><annotation pos:line="110" pos:column="9">@<name pos:line="110" pos:column="10">Test</name></annotation>
	<specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">getGradeForGradeLevel</name><parameter_list pos:line="111" pos:column="42">()</parameter_list> <block pos:line="111" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">int</name></type> <name pos:line="112" pos:column="21">gradeLevel</name> <init pos:line="112" pos:column="32">= <expr><lit:literal type="number" pos:line="112" pos:column="34">5</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="113" pos:column="17">//GradeSystem studentGrade = new GradeSystem(grade);</comment>
		<decl_stmt><decl><type><name pos:line="114" pos:column="17">GradeSystem</name></type> <name pos:line="114" pos:column="29">studentGrade</name> <init pos:line="114" pos:column="42">= <expr><call><name><name pos:line="114" pos:column="44">GradeSystem</name><op:operator pos:line="114" pos:column="55">.</op:operator><name pos:line="114" pos:column="56">getGradeForGradeLevel</name></name><argument_list pos:line="114" pos:column="77">(<argument><expr><name pos:line="114" pos:column="78">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="115" pos:column="17">System</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">out</name><op:operator pos:line="115" pos:column="27">.</op:operator><name pos:line="115" pos:column="28">println</name></name><argument_list pos:line="115" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="36">"Grade: "</lit:literal><op:operator pos:line="115" pos:column="45">+</op:operator><call><name><name pos:line="115" pos:column="46">studentGrade</name><op:operator pos:line="115" pos:column="58">.</op:operator><name pos:line="115" pos:column="59">getGrade</name></name><argument_list pos:line="115" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="116" pos:column="17">System</name><op:operator pos:line="116" pos:column="23">.</op:operator><name pos:line="116" pos:column="24">out</name><op:operator pos:line="116" pos:column="27">.</op:operator><name pos:line="116" pos:column="28">println</name></name><argument_list pos:line="116" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="36">"--"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="117" pos:column="17">assertEquals</name><argument_list pos:line="117" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="30">"B-"</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="117" pos:column="35">studentGrade</name><op:operator pos:line="117" pos:column="47">.</op:operator><name pos:line="117" pos:column="48">getGrade</name></name><argument_list pos:line="117" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="120" pos:column="9">// To get a grade for a gradelevel when gradelevel is absent</comment>

	<function><type><annotation pos:line="122" pos:column="9">@<name pos:line="122" pos:column="10">Test</name></annotation>
	<specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">void</name></type> <name pos:line="123" pos:column="21">getGradeForGradeLevelAbsent</name><parameter_list pos:line="123" pos:column="48">()</parameter_list> <block pos:line="123" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">int</name></type> <name pos:line="124" pos:column="21">gradeLevel</name> <init pos:line="124" pos:column="32">= <expr><lit:literal type="number" pos:line="124" pos:column="34">10</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="125" pos:column="17">//GradeSystem studentGrade = new GradeSystem(grade);</comment>
		<decl_stmt><decl><type><name pos:line="126" pos:column="17">GradeSystem</name></type> <name pos:line="126" pos:column="29">studentGrade</name> <init pos:line="126" pos:column="42">= <expr><call><name><name pos:line="126" pos:column="44">GradeSystem</name><op:operator pos:line="126" pos:column="55">.</op:operator><name pos:line="126" pos:column="56">getGradeForGradeLevel</name></name><argument_list pos:line="126" pos:column="77">(<argument><expr><name pos:line="126" pos:column="78">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="127" pos:column="17">assertNull</name><argument_list pos:line="127" pos:column="27">(<argument><expr><name pos:line="127" pos:column="28">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>
