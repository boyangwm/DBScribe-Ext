<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\CalculateRegression.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">com</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">riskIt</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">data</name><op:operator pos:line="5" pos:column="23">.</op:operator><name pos:line="5" pos:column="24">CalculateRegressionDataStructure</name></name>;</import>


<comment type="block" format="javadoc" pos:line="8" pos:column="1">/**
 * CalculateRegression.java
 * Purpose: Calculation class to calculate linear regression based on two
 * 	lists of integers.  Called by EstiamteIncome Class to calculate the
 * 	simple linear regression values.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="18" pos:column="1">/**
 * Object to perform all calculations necessary to calculate
 * regression analysis on data contained in the database.
 */</comment>
<class><specifier pos:line="22" pos:column="1">public</specifier> class <name pos:line="22" pos:column="14">CalculateRegression</name> <block pos:line="22" pos:column="34">{
	
	<comment type="block" format="javadoc" pos:line="24" pos:column="9">/**
	 * Performs regression analysis for two lists of integers
	 * &lt;p&gt;
	 * @param 				An arrayList&lt;Integer&gt; - first data
	 * @param 				An arrayList&lt;Integer&gt; - second data
	 * @return				CalculateRegressionDataStructure
	 * 							This is a data transfer object used to return
	 * 							the linear regression equation y = m(x) + b
	 * 						Note: Calculations will be performed on the entire
	 * 						data set, and the middle 2/3's of the data set so a
	 * 						comparison can be made regarding the accuracy of the
	 * 						linear regression formula.
	 */</comment>
	<function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">CalculateRegressionDataStructure</name></type> <name pos:line="37" pos:column="49">calculateRegressionNumbers</name><parameter_list pos:line="37" pos:column="75">(<param><decl><type><name><name pos:line="37" pos:column="76">ArrayList</name><argument_list pos:line="37" pos:column="85">&lt;<argument><name pos:line="37" pos:column="86">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="95">firstDataSet</name></decl></param>, <param><decl><type><name><name pos:line="37" pos:column="109">ArrayList</name><argument_list pos:line="37" pos:column="118">&lt;<argument><name pos:line="37" pos:column="119">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="128">secondDataSet</name></decl></param>)</parameter_list> <throws pos:line="37" pos:column="143">throws <argument><expr><name pos:line="37" pos:column="150">IllegalArgumentException</name></expr></argument></throws> <block pos:line="37" pos:column="175">{
		
		<if pos:line="39" pos:column="17">if<condition pos:line="39" pos:column="19">(<expr><name pos:line="39" pos:column="20">firstDataSet</name> <op:operator pos:line="39" pos:column="33">==</op:operator> <lit:literal type="null" pos:line="39" pos:column="36">null</lit:literal> <op:operator pos:line="39" pos:column="41">||</op:operator> <name pos:line="39" pos:column="44">secondDataSet</name> <op:operator pos:line="39" pos:column="58">==</op:operator> <lit:literal type="null" pos:line="39" pos:column="61">null</lit:literal></expr>)</condition><then><block pos:line="39" pos:column="66">{
			<throw pos:line="40" pos:column="25">throw <expr><op:operator pos:line="40" pos:column="31">new</op:operator> <call><name pos:line="40" pos:column="35">IllegalArgumentException</name><argument_list pos:line="40" pos:column="59">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">double</name></type> <name pos:line="43" pos:column="24">slopeAll</name> <init pos:line="43" pos:column="33">= <expr><lit:literal type="number" pos:line="43" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">double</name></type> <name pos:line="44" pos:column="24">interceptAll</name> <init pos:line="44" pos:column="37">= <expr><lit:literal type="number" pos:line="44" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">double</name></type> <name pos:line="45" pos:column="24">slopeMiddleTwoThirds</name> <init pos:line="45" pos:column="45">= <expr><lit:literal type="number" pos:line="45" pos:column="47">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">double</name></type> <name pos:line="46" pos:column="24">interceptMiddleTwoThirds</name> <init pos:line="46" pos:column="49">= <expr><lit:literal type="number" pos:line="46" pos:column="51">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">int</name></type> <name pos:line="47" pos:column="21">secondNumber</name> <init pos:line="47" pos:column="34">= <expr><lit:literal type="number" pos:line="47" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">double</name></type> <name pos:line="48" pos:column="24">size</name> <init pos:line="48" pos:column="29">= <expr><call><name><name pos:line="48" pos:column="31">firstDataSet</name><op:operator pos:line="48" pos:column="43">.</op:operator><name pos:line="48" pos:column="44">size</name></name><argument_list pos:line="48" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">double</name></type> <name pos:line="49" pos:column="24">firstSum</name> <init pos:line="49" pos:column="33">= <expr><lit:literal type="number" pos:line="49" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">double</name></type> <name pos:line="50" pos:column="24">secondSum</name> <init pos:line="50" pos:column="34">= <expr><lit:literal type="number" pos:line="50" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">double</name></type> <name pos:line="51" pos:column="24">sumFirstMultSecond</name> <init pos:line="51" pos:column="43">= <expr><lit:literal type="number" pos:line="51" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">double</name></type> <name pos:line="52" pos:column="24">sumFirstSquared</name> <init pos:line="52" pos:column="40">= <expr><lit:literal type="number" pos:line="52" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="54" pos:column="17">ArrayList</name><argument_list pos:line="54" pos:column="26">&lt;<argument><name pos:line="54" pos:column="27">calcRegressionStructure</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="52">variableIncomeList</name> <init pos:line="54" pos:column="71">= <expr><op:operator pos:line="54" pos:column="73">new</op:operator> <call><name><name pos:line="54" pos:column="77">ArrayList</name><argument_list pos:line="54" pos:column="86">&lt;<argument><name pos:line="54" pos:column="87">calcRegressionStructure</name></argument>&gt;</argument_list></name><argument_list pos:line="54" pos:column="111">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="56" pos:column="17">// Calculate slope and intercept using full data set.</comment>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">int</name></type> <name pos:line="57" pos:column="21">count</name> <init pos:line="57" pos:column="27">= <expr><lit:literal type="number" pos:line="57" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="58" pos:column="17">for(<init><decl><type><name pos:line="58" pos:column="21">int</name></type> <name pos:line="58" pos:column="25">firstNumber</name> <range pos:line="58" pos:column="37">: <expr><name pos:line="58" pos:column="39">firstDataSet</name></expr></range></decl></init>)<block pos:line="58" pos:column="52">{
			<expr_stmt><expr><name pos:line="59" pos:column="25">secondNumber</name> <op:operator pos:line="59" pos:column="38">=</op:operator> <call><name><name pos:line="59" pos:column="40">secondDataSet</name><op:operator pos:line="59" pos:column="53">.</op:operator><name pos:line="59" pos:column="54">get</name></name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">variableIncomeList</name><op:operator pos:line="61" pos:column="43">.</op:operator><name pos:line="61" pos:column="44">add</name></name><argument_list pos:line="61" pos:column="47">(<argument><expr><op:operator pos:line="61" pos:column="48">new</op:operator> <call><name pos:line="61" pos:column="52">calcRegressionStructure</name><argument_list pos:line="61" pos:column="75">(<argument><expr><name pos:line="61" pos:column="76">firstNumber</name></expr></argument>,<argument><expr><name pos:line="61" pos:column="88">secondNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="62" pos:column="25">count</name><op:operator pos:line="62" pos:column="30">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="63" pos:column="25">firstSum</name> <op:operator pos:line="63" pos:column="34">=</op:operator> <name pos:line="63" pos:column="36">firstSum</name> <op:operator pos:line="63" pos:column="45">+</op:operator> <name pos:line="63" pos:column="47">firstNumber</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">secondSum</name> <op:operator pos:line="64" pos:column="35">=</op:operator> <name pos:line="64" pos:column="37">secondSum</name> <op:operator pos:line="64" pos:column="47">+</op:operator> <name pos:line="64" pos:column="49">secondNumber</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="65" pos:column="25">sumFirstMultSecond</name> <op:operator pos:line="65" pos:column="44">=</op:operator> <name pos:line="65" pos:column="46">sumFirstMultSecond</name> <op:operator pos:line="65" pos:column="65">+</op:operator> <op:operator pos:line="65" pos:column="67">(</op:operator><name pos:line="65" pos:column="68">firstNumber</name> <op:operator pos:line="65" pos:column="80">*</op:operator> <name pos:line="65" pos:column="82">secondNumber</name><op:operator pos:line="65" pos:column="94">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="66" pos:column="25">sumFirstSquared</name> <op:operator pos:line="66" pos:column="41">=</op:operator> <name pos:line="66" pos:column="43">sumFirstSquared</name> <op:operator pos:line="66" pos:column="59">+</op:operator> <op:operator pos:line="66" pos:column="61">(</op:operator><name pos:line="66" pos:column="62">firstNumber</name> <op:operator pos:line="66" pos:column="74">*</op:operator> <name pos:line="66" pos:column="76">firstNumber</name><op:operator pos:line="66" pos:column="87">)</op:operator></expr>;</expr_stmt>
		}</block></for>
		
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">double</name></type> <name pos:line="69" pos:column="24">numerator</name> <init pos:line="69" pos:column="34">= <expr><op:operator pos:line="69" pos:column="36">(</op:operator><op:operator pos:line="69" pos:column="37">(</op:operator><name pos:line="69" pos:column="38">size</name> <op:operator pos:line="69" pos:column="43">*</op:operator> <name pos:line="69" pos:column="45">sumFirstMultSecond</name><op:operator pos:line="69" pos:column="63">)</op:operator> <op:operator pos:line="69" pos:column="65">-</op:operator> <op:operator pos:line="69" pos:column="67">(</op:operator><name pos:line="69" pos:column="68">firstSum</name> <op:operator pos:line="69" pos:column="77">*</op:operator> <name pos:line="69" pos:column="79">secondSum</name><op:operator pos:line="69" pos:column="88">)</op:operator><op:operator pos:line="69" pos:column="89">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">double</name></type> <name pos:line="70" pos:column="24">denominator</name> <init pos:line="70" pos:column="36">= <expr><op:operator pos:line="70" pos:column="38">(</op:operator><op:operator pos:line="70" pos:column="39">(</op:operator><name pos:line="70" pos:column="40">size</name> <op:operator pos:line="70" pos:column="45">*</op:operator> <name pos:line="70" pos:column="47">sumFirstSquared</name><op:operator pos:line="70" pos:column="62">)</op:operator> <op:operator pos:line="70" pos:column="64">-</op:operator> <op:operator pos:line="70" pos:column="66">(</op:operator><name pos:line="70" pos:column="67">firstSum</name> <op:operator pos:line="70" pos:column="76">*</op:operator> <name pos:line="70" pos:column="78">firstSum</name><op:operator pos:line="70" pos:column="86">)</op:operator><op:operator pos:line="70" pos:column="87">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="72" pos:column="17">if<condition pos:line="72" pos:column="19">(<expr><name pos:line="72" pos:column="20">denominator</name> <op:operator pos:line="72" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="72" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="72" pos:column="37">{
			<expr_stmt><expr><name pos:line="73" pos:column="25">slopeAll</name> <op:operator pos:line="73" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="73" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="74" pos:column="19">else <block pos:line="74" pos:column="24">{
			<expr_stmt><expr><name pos:line="75" pos:column="25">slopeAll</name> <op:operator pos:line="75" pos:column="34">=</op:operator> <name pos:line="75" pos:column="36">numerator</name> <op:operator pos:line="75" pos:column="46">/</op:operator> <name pos:line="75" pos:column="48">denominator</name></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="78" pos:column="17">if<condition pos:line="78" pos:column="19">(<expr><name pos:line="78" pos:column="20">size</name> <op:operator pos:line="78" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="78" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="78" pos:column="30"> <block pos:line="78" pos:column="31">{
			<expr_stmt><expr><name pos:line="79" pos:column="25">interceptAll</name> <op:operator pos:line="79" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="79" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="80" pos:column="19">else <block pos:line="80" pos:column="24">{
			<expr_stmt><expr><name pos:line="81" pos:column="25">interceptAll</name> <op:operator pos:line="81" pos:column="38">=</op:operator> <op:operator pos:line="81" pos:column="40">(</op:operator><name pos:line="81" pos:column="41">secondSum</name> <op:operator pos:line="81" pos:column="51">-</op:operator> <op:operator pos:line="81" pos:column="53">(</op:operator><name pos:line="81" pos:column="54">slopeAll</name><op:operator pos:line="81" pos:column="62">*</op:operator><name pos:line="81" pos:column="63">firstSum</name><op:operator pos:line="81" pos:column="71">)</op:operator><op:operator pos:line="81" pos:column="72">)</op:operator><op:operator pos:line="81" pos:column="73">/</op:operator><name pos:line="81" pos:column="74">size</name></expr>;</expr_stmt>
		}</block></else></if>
		
		<comment type="line" pos:line="84" pos:column="17">// Calculate slope and intercept for middle 2/3 of data</comment>
		<comment type="line" pos:line="85" pos:column="17">// sorted based on Income</comment>
		
		<expr_stmt><expr><name pos:line="87" pos:column="17">secondNumber</name> <op:operator pos:line="87" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="87" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="88" pos:column="17">size</name> <op:operator pos:line="88" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="88" pos:column="24">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="89" pos:column="17">firstSum</name> <op:operator pos:line="89" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="89" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="90" pos:column="17">secondSum</name> <op:operator pos:line="90" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="90" pos:column="29">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="91" pos:column="17">sumFirstMultSecond</name> <op:operator pos:line="91" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="91" pos:column="38">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">sumFirstSquared</name> <op:operator pos:line="92" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="92" pos:column="35">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">numerator</name> <op:operator pos:line="93" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="93" pos:column="29">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">denominator</name> <op:operator pos:line="94" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="94" pos:column="31">0</lit:literal></expr>;</expr_stmt>
		
		<expr_stmt><expr><name pos:line="96" pos:column="17">count</name> <op:operator pos:line="96" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="96" pos:column="25">0</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">int</name></type> <name pos:line="97" pos:column="21">firstNumber</name></decl>;</decl_stmt>
		<for pos:line="98" pos:column="17">for(<init><decl><type><name pos:line="98" pos:column="21">calcRegressionStructure</name></type> <name pos:line="98" pos:column="45">i</name> <range pos:line="98" pos:column="47">: <expr><name pos:line="98" pos:column="49">variableIncomeList</name></expr></range></decl></init>)<block pos:line="98" pos:column="68">{
			<expr_stmt><expr><name pos:line="99" pos:column="25">count</name><op:operator pos:line="99" pos:column="30">++</op:operator></expr>;</expr_stmt>
			<if pos:line="100" pos:column="25">if<condition pos:line="100" pos:column="27">(<expr><name pos:line="100" pos:column="28">count</name> <op:operator pos:line="100" pos:column="34">&gt;</op:operator> <call pos:line="100" pos:column="36">(<name pos:line="100" pos:column="37">int</name>)<argument_list pos:line="100" pos:column="41">(<argument><expr><call><name><name pos:line="100" pos:column="42">variableIncomeList</name><op:operator pos:line="100" pos:column="60">.</op:operator><name pos:line="100" pos:column="61">size</name></name><argument_list pos:line="100" pos:column="65">()</argument_list></call> <op:operator pos:line="100" pos:column="68">*</op:operator> <op:operator pos:line="100" pos:column="70">(</op:operator><lit:literal type="number" pos:line="100" pos:column="71">1.0</lit:literal><op:operator pos:line="100" pos:column="74">/</op:operator><lit:literal type="number" pos:line="100" pos:column="75">6.0</lit:literal><op:operator pos:line="100" pos:column="78">)</op:operator></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="81">&amp;&amp;</op:operator> <name pos:line="100" pos:column="84">count</name> <op:operator pos:line="100" pos:column="90">&lt;</op:operator> <call pos:line="100" pos:column="92">(<name pos:line="100" pos:column="93">int</name>)<argument_list pos:line="100" pos:column="97">(<argument><expr><call><name><name pos:line="100" pos:column="98">variableIncomeList</name><op:operator pos:line="100" pos:column="116">.</op:operator><name pos:line="100" pos:column="117">size</name></name><argument_list pos:line="100" pos:column="121">()</argument_list></call> <op:operator pos:line="100" pos:column="124">*</op:operator> <op:operator pos:line="100" pos:column="126">(</op:operator><lit:literal type="number" pos:line="100" pos:column="127">5.0</lit:literal><op:operator pos:line="100" pos:column="130">/</op:operator><lit:literal type="number" pos:line="100" pos:column="131">6.0</lit:literal><op:operator pos:line="100" pos:column="134">)</op:operator></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="100" pos:column="137">{
				<expr_stmt><expr><name pos:line="101" pos:column="33">size</name><op:operator pos:line="101" pos:column="37">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="102" pos:column="33">firstNumber</name> <op:operator pos:line="102" pos:column="45">=</op:operator> <call><name><name pos:line="102" pos:column="47">i</name><op:operator pos:line="102" pos:column="48">.</op:operator><name pos:line="102" pos:column="49">getFirstValue</name></name><argument_list pos:line="102" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="103" pos:column="33">secondNumber</name> <op:operator pos:line="103" pos:column="46">=</op:operator> <call><name><name pos:line="103" pos:column="48">i</name><op:operator pos:line="103" pos:column="49">.</op:operator><name pos:line="103" pos:column="50">getSecondValue</name></name><argument_list pos:line="103" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="104" pos:column="33">firstSum</name> <op:operator pos:line="104" pos:column="42">=</op:operator> <name pos:line="104" pos:column="44">firstSum</name> <op:operator pos:line="104" pos:column="53">+</op:operator> <name pos:line="104" pos:column="55">firstNumber</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="105" pos:column="33">secondSum</name> <op:operator pos:line="105" pos:column="43">=</op:operator> <name pos:line="105" pos:column="45">secondSum</name> <op:operator pos:line="105" pos:column="55">+</op:operator> <name pos:line="105" pos:column="57">secondNumber</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="106" pos:column="33">sumFirstMultSecond</name> <op:operator pos:line="106" pos:column="52">=</op:operator> <name pos:line="106" pos:column="54">sumFirstMultSecond</name> <op:operator pos:line="106" pos:column="73">+</op:operator> <op:operator pos:line="106" pos:column="75">(</op:operator><name pos:line="106" pos:column="76">firstNumber</name> <op:operator pos:line="106" pos:column="88">*</op:operator> <name pos:line="106" pos:column="90">secondNumber</name><op:operator pos:line="106" pos:column="102">)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="107" pos:column="33">sumFirstSquared</name> <op:operator pos:line="107" pos:column="49">=</op:operator> <name pos:line="107" pos:column="51">sumFirstSquared</name> <op:operator pos:line="107" pos:column="67">+</op:operator> <op:operator pos:line="107" pos:column="69">(</op:operator><name pos:line="107" pos:column="70">firstNumber</name> <op:operator pos:line="107" pos:column="82">*</op:operator> <name pos:line="107" pos:column="84">firstNumber</name><op:operator pos:line="107" pos:column="95">)</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		
		<expr_stmt><expr><name pos:line="111" pos:column="17">numerator</name> <op:operator pos:line="111" pos:column="27">=</op:operator> <op:operator pos:line="111" pos:column="29">(</op:operator><op:operator pos:line="111" pos:column="30">(</op:operator><name pos:line="111" pos:column="31">size</name> <op:operator pos:line="111" pos:column="36">*</op:operator> <name pos:line="111" pos:column="38">sumFirstMultSecond</name><op:operator pos:line="111" pos:column="56">)</op:operator> <op:operator pos:line="111" pos:column="58">-</op:operator> <op:operator pos:line="111" pos:column="60">(</op:operator><name pos:line="111" pos:column="61">firstSum</name> <op:operator pos:line="111" pos:column="70">*</op:operator> <name pos:line="111" pos:column="72">secondSum</name><op:operator pos:line="111" pos:column="81">)</op:operator><op:operator pos:line="111" pos:column="82">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="112" pos:column="17">denominator</name> <op:operator pos:line="112" pos:column="29">=</op:operator> <op:operator pos:line="112" pos:column="31">(</op:operator><op:operator pos:line="112" pos:column="32">(</op:operator><name pos:line="112" pos:column="33">size</name> <op:operator pos:line="112" pos:column="38">*</op:operator> <name pos:line="112" pos:column="40">sumFirstSquared</name><op:operator pos:line="112" pos:column="55">)</op:operator> <op:operator pos:line="112" pos:column="57">-</op:operator> <op:operator pos:line="112" pos:column="59">(</op:operator><name pos:line="112" pos:column="60">firstSum</name> <op:operator pos:line="112" pos:column="69">*</op:operator> <name pos:line="112" pos:column="71">firstSum</name><op:operator pos:line="112" pos:column="79">)</op:operator><op:operator pos:line="112" pos:column="80">)</op:operator></expr>;</expr_stmt>
		
		<if pos:line="114" pos:column="17">if<condition pos:line="114" pos:column="19">(<expr><name pos:line="114" pos:column="20">denominator</name> <op:operator pos:line="114" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="114" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="114" pos:column="37">{
			<expr_stmt><expr><name pos:line="115" pos:column="25">slopeMiddleTwoThirds</name> <op:operator pos:line="115" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="115" pos:column="48">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="116" pos:column="19">else <block pos:line="116" pos:column="24">{
			<expr_stmt><expr><name pos:line="117" pos:column="25">slopeMiddleTwoThirds</name> <op:operator pos:line="117" pos:column="46">=</op:operator> <name pos:line="117" pos:column="48">numerator</name> <op:operator pos:line="117" pos:column="58">/</op:operator> <name pos:line="117" pos:column="60">denominator</name></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="120" pos:column="17">if<condition pos:line="120" pos:column="19">(<expr><name pos:line="120" pos:column="20">size</name> <op:operator pos:line="120" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="120" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="120" pos:column="30"> <block pos:line="120" pos:column="31">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">interceptMiddleTwoThirds</name> <op:operator pos:line="121" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="121" pos:column="52">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="122" pos:column="19">else <block pos:line="122" pos:column="24">{
			<expr_stmt><expr><name pos:line="123" pos:column="25">interceptMiddleTwoThirds</name> <op:operator pos:line="123" pos:column="50">=</op:operator> <op:operator pos:line="123" pos:column="52">(</op:operator><name pos:line="123" pos:column="53">secondSum</name> <op:operator pos:line="123" pos:column="63">-</op:operator> <op:operator pos:line="123" pos:column="65">(</op:operator><name pos:line="123" pos:column="66">slopeAll</name><op:operator pos:line="123" pos:column="74">*</op:operator><name pos:line="123" pos:column="75">firstSum</name><op:operator pos:line="123" pos:column="83">)</op:operator><op:operator pos:line="123" pos:column="84">)</op:operator><op:operator pos:line="123" pos:column="85">/</op:operator><name pos:line="123" pos:column="86">size</name></expr>;</expr_stmt>
		}</block></else></if>
		
		<return pos:line="126" pos:column="17">return <expr><op:operator pos:line="126" pos:column="24">new</op:operator> <call><name pos:line="126" pos:column="28">CalculateRegressionDataStructure</name><argument_list pos:line="126" pos:column="60">(<argument><expr><name pos:line="126" pos:column="61">slopeAll</name></expr></argument>,<argument><expr><name pos:line="126" pos:column="70">interceptAll</name></expr></argument>,<argument><expr><name pos:line="126" pos:column="83">slopeMiddleTwoThirds</name></expr></argument>,<argument><expr><name pos:line="126" pos:column="104">interceptMiddleTwoThirds</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<class><specifier pos:line="129" pos:column="9">private</specifier> class <name pos:line="129" pos:column="23">calcRegressionStructure</name> <super><implements pos:line="129" pos:column="47">implements <name><name pos:line="129" pos:column="58">Comparable</name><argument_list pos:line="129" pos:column="68">&lt;<argument><name pos:line="129" pos:column="69">calcRegressionStructure</name></argument>&gt;</argument_list></name></implements></super><block pos:line="129" pos:column="93">{
		<decl_stmt><decl><type><specifier pos:line="130" pos:column="17">final</specifier> <name pos:line="130" pos:column="23">int</name></type> <name pos:line="130" pos:column="27">firstValue</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="131" pos:column="17">final</specifier> <name pos:line="131" pos:column="23">int</name></type> <name pos:line="131" pos:column="27">secondValue</name></decl>;</decl_stmt>
		
		<constructor><name pos:line="133" pos:column="17">calcRegressionStructure</name><parameter_list pos:line="133" pos:column="40">(<param><decl><type><name pos:line="133" pos:column="41">int</name></type> <name pos:line="133" pos:column="45">firstValue</name></decl></param>, <param><decl><type><name pos:line="133" pos:column="57">int</name></type> <name pos:line="133" pos:column="61">secondValue</name></decl></param>)</parameter_list><block pos:line="133" pos:column="73">{
			<expr_stmt><expr><name><name pos:line="134" pos:column="25">this</name><op:operator pos:line="134" pos:column="29">.</op:operator><name pos:line="134" pos:column="30">firstValue</name></name> <op:operator pos:line="134" pos:column="41">=</op:operator> <name pos:line="134" pos:column="43">firstValue</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="135" pos:column="25">this</name><op:operator pos:line="135" pos:column="29">.</op:operator><name pos:line="135" pos:column="30">secondValue</name></name> <op:operator pos:line="135" pos:column="42">=</op:operator> <name pos:line="135" pos:column="44">secondValue</name></expr>;</expr_stmt>
		}</block></constructor>
		
		<function><type><name pos:line="138" pos:column="17">int</name></type> <name pos:line="138" pos:column="21">getFirstValue</name><parameter_list pos:line="138" pos:column="34">()</parameter_list><block pos:line="138" pos:column="36">{
			<return pos:line="139" pos:column="25">return <expr><name pos:line="139" pos:column="32">firstValue</name></expr>;</return>
		}</block></function>
		
		<function><type><name pos:line="142" pos:column="17">int</name></type> <name pos:line="142" pos:column="21">getSecondValue</name><parameter_list pos:line="142" pos:column="35">()</parameter_list><block pos:line="142" pos:column="37">{
			<return pos:line="143" pos:column="25">return <expr><name pos:line="143" pos:column="32">secondValue</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="146" pos:column="17">public</specifier> <name pos:line="146" pos:column="24">int</name></type> <name pos:line="146" pos:column="28">compareTo</name><parameter_list pos:line="146" pos:column="37">(<param><decl><type><name pos:line="146" pos:column="38">calcRegressionStructure</name></type> <name pos:line="146" pos:column="62">c</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="65">{
			<return pos:line="147" pos:column="25">return <expr><call><name><name pos:line="147" pos:column="32">this</name><op:operator pos:line="147" pos:column="36">.</op:operator><name pos:line="147" pos:column="37">getFirstValue</name></name><argument_list pos:line="147" pos:column="50">()</argument_list></call> <op:operator pos:line="147" pos:column="53">-</op:operator> <call><name><name pos:line="147" pos:column="55">c</name><op:operator pos:line="147" pos:column="56">.</op:operator><name pos:line="147" pos:column="57">getFirstValue</name></name><argument_list pos:line="147" pos:column="70">()</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>

}</block></class>
</unit>
