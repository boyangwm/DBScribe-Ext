<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\CourseExams.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="line" pos:line="4" pos:column="1">//import java.lang.annotation.ElementType;</comment>
<comment type="line" pos:line="5" pos:column="1">//import java.lang.annotation.Retention;</comment>
<comment type="line" pos:line="6" pos:column="1">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line" pos:line="7" pos:column="1">//import java.lang.annotation.Target;</comment>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">java</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">util</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">HashMap</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">java</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">util</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Iterator</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">java</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">util</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Set</name></name>;</import>

<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">CourseExams</name> <block pos:line="17" pos:column="26">{

	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int</name></type> <name pos:line="19" pos:column="13">offerID</name></decl>;</decl_stmt> <comment type="line" pos:line="19" pos:column="22">// CourseOffered offerID</comment>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">String</name></type> <name pos:line="20" pos:column="16">examName</name></decl>;</decl_stmt> <comment type="line" pos:line="20" pos:column="26">// Name of the exam</comment>
	<decl_stmt><decl><type><name><name pos:line="21" pos:column="9">HashMap</name><argument_list pos:line="21" pos:column="16">&lt;<argument><name pos:line="21" pos:column="17">Student</name></argument>,<argument><name pos:line="21" pos:column="25">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="33">examMarks</name> <init pos:line="21" pos:column="43">= <expr><op:operator pos:line="21" pos:column="45">new</op:operator> <call><name><name pos:line="21" pos:column="49">HashMap</name><argument_list pos:line="21" pos:column="56">&lt;<argument><name pos:line="21" pos:column="57">Student</name></argument>,<argument><name pos:line="21" pos:column="65">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="21" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">CourseOffered</name></type> <name pos:line="22" pos:column="23">courseoffered</name></decl>;</decl_stmt>
	
<comment type="line" pos:line="24" pos:column="1">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line" pos:line="25" pos:column="1">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line" pos:line="26" pos:column="1">//	public @interface DBAnnotation {</comment>
<comment type="line" pos:line="27" pos:column="1">//	 String[] variable () default "";</comment>
<comment type="line" pos:line="28" pos:column="1">//	 String[] table () default "";</comment>
<comment type="line" pos:line="29" pos:column="1">//	 String[] column () default "";</comment>
<comment type="line" pos:line="30" pos:column="1">//	 boolean[] isSource () default false; </comment>
<comment type="line" pos:line="31" pos:column="1">//	}</comment>
	
	<comment type="line" pos:line="33" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">CourseExams</name><parameter_list pos:line="34" pos:column="27">(<param><decl><type><name pos:line="34" pos:column="28">int</name></type> <name pos:line="34" pos:column="32">offerID</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="41">String</name></type> <name pos:line="34" pos:column="48">examName</name></decl></param>, <param><decl><type><name><name pos:line="34" pos:column="58">HashMap</name><argument_list pos:line="34" pos:column="65">&lt;<argument><name pos:line="34" pos:column="66">Student</name></argument>,<argument><name pos:line="34" pos:column="74">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="82">examMarks</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="93">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">super</name><argument_list pos:line="35" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">this</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">offerID</name></name> <op:operator pos:line="36" pos:column="30">=</op:operator> <name pos:line="36" pos:column="32">offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">this</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">examName</name></name> <op:operator pos:line="37" pos:column="31">=</op:operator> <name pos:line="37" pos:column="33">examName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">this</name><op:operator pos:line="38" pos:column="21">.</op:operator><name pos:line="38" pos:column="22">examMarks</name></name> <op:operator pos:line="38" pos:column="32">=</op:operator> <name pos:line="38" pos:column="34">examMarks</name></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line" pos:line="41" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">CourseExams</name><parameter_list pos:line="42" pos:column="27">(<param><decl><type><name pos:line="42" pos:column="28">int</name></type> <name pos:line="42" pos:column="32">offerID</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">super</name><argument_list pos:line="43" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="44" pos:column="17">this</name><op:operator pos:line="44" pos:column="21">.</op:operator><name pos:line="44" pos:column="22">offerID</name></name> <op:operator pos:line="44" pos:column="30">=</op:operator> <name pos:line="44" pos:column="32">offerID</name></expr>;</expr_stmt>
		<try pos:line="45" pos:column="17">try <block pos:line="45" pos:column="21">{
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">this</name><op:operator pos:line="46" pos:column="29">.</op:operator><name pos:line="46" pos:column="30">courseoffered</name></name> <op:operator pos:line="46" pos:column="44">=</op:operator> <op:operator pos:line="46" pos:column="46">new</op:operator> <call><name pos:line="46" pos:column="50">CourseOffered</name><argument_list pos:line="46" pos:column="63">(<argument><expr><name><name pos:line="46" pos:column="64">this</name><op:operator pos:line="46" pos:column="68">.</op:operator><name pos:line="46" pos:column="69">offerID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="47" pos:column="19">catch <parameter_list pos:line="47" pos:column="25">(<param><decl><type><name><name pos:line="47" pos:column="26">Course</name><op:operator pos:line="47" pos:column="32">.</op:operator><name pos:line="47" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="47" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="64">{
			<comment type="line" pos:line="48" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">e</name><op:operator pos:line="49" pos:column="26">.</op:operator><name pos:line="49" pos:column="27">printStackTrace</name></name><argument_list pos:line="49" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="50" pos:column="19">catch <parameter_list pos:line="50" pos:column="25">(<param><decl><type><name><name pos:line="50" pos:column="26">CourseOffered</name><op:operator pos:line="50" pos:column="39">.</op:operator><name pos:line="50" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="50" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="79">{
			<comment type="line" pos:line="51" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">e</name><op:operator pos:line="52" pos:column="26">.</op:operator><name pos:line="52" pos:column="27">printStackTrace</name></name><argument_list pos:line="52" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<comment type="line" pos:line="54" pos:column="17">//this.examName = examName;</comment>
	}</block></constructor>

	<function><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">int</name></type> <name pos:line="57" pos:column="20">getOfferID</name><parameter_list pos:line="57" pos:column="30">()</parameter_list> <block pos:line="57" pos:column="33">{
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">offerID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">setOfferID</name><parameter_list pos:line="61" pos:column="31">(<param><decl><type><name pos:line="61" pos:column="32">int</name></type> <name pos:line="61" pos:column="36">offerID</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">this</name><op:operator pos:line="62" pos:column="21">.</op:operator><name pos:line="62" pos:column="22">offerID</name></name> <op:operator pos:line="62" pos:column="30">=</op:operator> <name pos:line="62" pos:column="32">offerID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">String</name></type> <name pos:line="65" pos:column="23">getExamName</name><parameter_list pos:line="65" pos:column="34">()</parameter_list> <block pos:line="65" pos:column="37">{
		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">examName</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">setExamName</name><parameter_list pos:line="69" pos:column="32">(<param><decl><type><name pos:line="69" pos:column="33">String</name></type> <name pos:line="69" pos:column="40">examName</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">this</name><op:operator pos:line="70" pos:column="21">.</op:operator><name pos:line="70" pos:column="22">examName</name></name> <op:operator pos:line="70" pos:column="31">=</op:operator> <name pos:line="70" pos:column="33">examName</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="73" pos:column="9">public</specifier> <name><name pos:line="73" pos:column="16">HashMap</name><argument_list pos:line="73" pos:column="23">&lt;<argument><name pos:line="73" pos:column="24">Student</name></argument>,<argument><name pos:line="73" pos:column="32">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="40">getExamMarks</name><parameter_list pos:line="73" pos:column="52">()</parameter_list> <block pos:line="73" pos:column="55">{
		<return pos:line="74" pos:column="17">return <expr><name pos:line="74" pos:column="24">examMarks</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="77" pos:column="9">public</specifier> <name pos:line="77" pos:column="16">void</name></type> <name pos:line="77" pos:column="21">setExamMarks</name><parameter_list pos:line="77" pos:column="33">(<param><decl><type><name><name pos:line="77" pos:column="34">HashMap</name><argument_list pos:line="77" pos:column="41">&lt;<argument><name pos:line="77" pos:column="42">Student</name></argument>,<argument><name pos:line="77" pos:column="50">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="58">examMarks</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="69">{
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">this</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">examMarks</name></name> <op:operator pos:line="78" pos:column="32">=</op:operator> <name pos:line="78" pos:column="34">examMarks</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="line" pos:line="81" pos:column="9">// This function creates a new table for each course offered in the semester.</comment>
	<comment type="line" pos:line="82" pos:column="9">// It internally calls the createCourseExamStructureTable of the </comment>
	<comment type="line" pos:line="83" pos:column="9">// CourseExamStructure class to create a table that stores the Course Structure.</comment>
	<comment type="line" pos:line="84" pos:column="9">// We commit the create statements only when both the tables are created.</comment>
	<comment type="line" pos:line="85" pos:column="9">// Hence, the commit statement exists only in createCourseExamMarksTable function.</comment>
	<function><type><specifier pos:line="86" pos:column="9">public</specifier> <specifier pos:line="86" pos:column="16">static</specifier> <name pos:line="86" pos:column="23">boolean</name></type> <name pos:line="86" pos:column="31">createCourseExamMarksTable</name><parameter_list pos:line="86" pos:column="57">(<param><decl><type><name pos:line="86" pos:column="58">String</name></type> <name pos:line="86" pos:column="65">courseName</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="77">int</name></type> <name pos:line="86" pos:column="81">offerID</name></decl></param>,<param><decl><type><name pos:line="86" pos:column="89">int</name></type> <name pos:line="86" pos:column="93">semID</name></decl></param>)</parameter_list><block pos:line="86" pos:column="99">{
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">boolean</name></type> <name pos:line="87" pos:column="25">tableAdded</name> <init pos:line="87" pos:column="36">= <expr><lit:literal type="boolean" pos:line="87" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="88" pos:column="1">//		Course course = offeredCourse.getCourse();</comment>
<comment type="line" pos:line="89" pos:column="1">//		String courseName = course.getCourseName();</comment>
<comment type="line" pos:line="90" pos:column="1">//		int offerID= offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="91" pos:column="1">//		int semID = offeredCourse.getSemesterID();</comment>
		
		
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">String</name></type> <name pos:line="94" pos:column="24">tableName</name> <init pos:line="94" pos:column="34">= <expr><name pos:line="94" pos:column="36">courseName</name> <op:operator pos:line="94" pos:column="47">+</op:operator> <call><name><name pos:line="94" pos:column="49">Integer</name><op:operator pos:line="94" pos:column="56">.</op:operator><name pos:line="94" pos:column="57">toString</name></name><argument_list pos:line="94" pos:column="65">(<argument><expr><name pos:line="94" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="75">+</op:operator> <call><name><name pos:line="94" pos:column="77">Integer</name><op:operator pos:line="94" pos:column="84">.</op:operator><name pos:line="94" pos:column="85">toString</name></name><argument_list pos:line="94" pos:column="93">(<argument><expr><name pos:line="94" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="95" pos:column="17">String</name></type> <name pos:line="95" pos:column="24">studentIDConstraint</name> <init pos:line="95" pos:column="44">= <expr><name pos:line="95" pos:column="46">tableName</name> <op:operator pos:line="95" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="58">"studentID"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="96" pos:column="17">String</name></type> <name pos:line="96" pos:column="24">studentEnrollmentIDConstraint</name> <init pos:line="96" pos:column="54">= <expr><name pos:line="96" pos:column="56">tableName</name> <op:operator pos:line="96" pos:column="66">+</op:operator> <lit:literal type="string" pos:line="96" pos:column="68">"studentEnrollmentID"</lit:literal></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="98" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="99" pos:column="1">//				variable = {"tableName"},  </comment>
<comment type="line" pos:line="100" pos:column="1">//				table = "courseExamStructureTable", </comment>
<comment type="line" pos:line="101" pos:column="1">//				column = {"Username","Password"}, </comment>
<comment type="line" pos:line="102" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">String</name></type> <name pos:line="103" pos:column="24">SQLExamCreate</name> <init pos:line="103" pos:column="38">= <expr><lit:literal type="string" pos:line="103" pos:column="40">"CREATE TABLE %s (`StudentUIN` int(12) NOT NULL,`StudentEnrollmentID` int(12) NOT NULL, "</lit:literal> <op:operator pos:line="103" pos:column="130">+</op:operator>
				<lit:literal type="string" pos:line="104" pos:column="33">"PRIMARY KEY (`StudentUIN`), KEY `StudentID_idx` (`StudentUIN`),  "</lit:literal> <op:operator pos:line="104" pos:column="101">+</op:operator> 
				<lit:literal type="string" pos:line="105" pos:column="33">"KEY `StudentEnrollmentID_idx` (`StudentEnrollmentID`), "</lit:literal> <op:operator pos:line="105" pos:column="91">+</op:operator>
				<lit:literal type="string" pos:line="106" pos:column="33">"CONSTRAINT %s FOREIGN KEY (`StudentEnrollmentID`) REFERENCES `studentenrollment` (`EnrollmentID`) ON DELETE NO ACTION ON UPDATE NO ACTION,"</lit:literal> <op:operator pos:line="106" pos:column="174">+</op:operator>
				<lit:literal type="string" pos:line="107" pos:column="33">"CONSTRAINT %s FOREIGN KEY (`StudentUIN`) REFERENCES `student` (`UIN`) ON DELETE CASCADE ON UPDATE CASCADE);"</lit:literal></expr></init></decl> ;</decl_stmt>

		<comment type="line" pos:line="109" pos:column="17">//String SQLExamCreate = "CREATE TABLE %s (`StudentUIN` int(12), `StudentEnrollmentID` int(12), PRIMARY KEY (StudentUIN))";</comment>
		<expr_stmt><expr><name pos:line="110" pos:column="17">SQLExamCreate</name> <op:operator pos:line="110" pos:column="31">=</op:operator> <call><name><name pos:line="110" pos:column="33">String</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">format</name></name><argument_list pos:line="110" pos:column="46">(<argument><expr><name pos:line="110" pos:column="47">SQLExamCreate</name></expr></argument>, <argument><expr><name pos:line="110" pos:column="62">tableName</name></expr></argument>,<argument><expr><name pos:line="110" pos:column="72">studentEnrollmentIDConstraint</name></expr></argument>,<argument><expr><name pos:line="110" pos:column="102">studentIDConstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="111" pos:column="17">try <block pos:line="111" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">Connection</name></type> <name pos:line="112" pos:column="36">conn</name> <init pos:line="112" pos:column="41">= <expr><call><name><name pos:line="112" pos:column="43">Database</name><op:operator pos:line="112" pos:column="51">.</op:operator><name pos:line="112" pos:column="52">getConnection</name></name><argument_list pos:line="112" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="113" pos:column="25">try <block pos:line="113" pos:column="29">{
				<if pos:line="114" pos:column="33">if <condition pos:line="114" pos:column="36">(<expr><name pos:line="114" pos:column="37">conn</name> <op:operator pos:line="114" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="114" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="114" pos:column="50"> <block pos:line="114" pos:column="51">{
					
					<decl_stmt><decl><type><name pos:line="116" pos:column="41">PreparedStatement</name></type> <name pos:line="116" pos:column="59">statement</name> <init pos:line="116" pos:column="69">= <expr><call><name><name pos:line="116" pos:column="71">conn</name><op:operator pos:line="116" pos:column="75">.</op:operator><name pos:line="116" pos:column="76">prepareStatement</name></name><argument_list pos:line="116" pos:column="92">(<argument><expr><name pos:line="116" pos:column="93">SQLExamCreate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="117" pos:column="1">//					statement.setString(1, tableName);</comment>
<comment type="line" pos:line="118" pos:column="1">//					statement.setString(1, studentEnrollmentIDConstraint);</comment>
<comment type="line" pos:line="119" pos:column="1">//					statement.setString(2, studentIDConstraint);</comment>

					<expr_stmt><expr><call><name><name pos:line="121" pos:column="41">System</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">out</name><op:operator pos:line="121" pos:column="51">.</op:operator><name pos:line="121" pos:column="52">println</name></name><argument_list pos:line="121" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="60">"Before exam create"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="122" pos:column="41">statement</name><op:operator pos:line="122" pos:column="50">.</op:operator><name pos:line="122" pos:column="51">executeUpdate</name></name><argument_list pos:line="122" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="123" pos:column="41">boolean</name></type> <name pos:line="123" pos:column="49">isCourseAdded</name> <init pos:line="123" pos:column="63">= <expr><call><name><name pos:line="123" pos:column="65">CourseExamStructure</name><op:operator pos:line="123" pos:column="84">.</op:operator><name pos:line="123" pos:column="85">createCourseExamStructureTable</name></name><argument_list pos:line="123" pos:column="115">(<argument><expr><name pos:line="123" pos:column="116">courseName</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="128">offerID</name></expr></argument>,<argument><expr><name pos:line="123" pos:column="136">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="124" pos:column="41">if<condition pos:line="124" pos:column="43">(<expr><name pos:line="124" pos:column="44">isCourseAdded</name> <op:operator pos:line="124" pos:column="58">==</op:operator> <lit:literal type="boolean" pos:line="124" pos:column="61">true</lit:literal></expr>)</condition><then><block pos:line="124" pos:column="66">{
						<comment type="line" pos:line="125" pos:column="49">//Database.commitTransaction(conn);</comment>
						<expr_stmt><expr><name pos:line="126" pos:column="49">tableAdded</name> <op:operator pos:line="126" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="126" pos:column="62">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="127" pos:column="49">System</name><op:operator pos:line="127" pos:column="55">.</op:operator><name pos:line="127" pos:column="56">out</name><op:operator pos:line="127" pos:column="59">.</op:operator><name pos:line="127" pos:column="60">println</name></name><argument_list pos:line="127" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="68">"After exam create"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="128" pos:column="43">else <block pos:line="128" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="129" pos:column="49">Database</name><op:operator pos:line="129" pos:column="57">.</op:operator><name pos:line="129" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="129" pos:column="77">(<argument><expr><name pos:line="129" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch pos:line="132" pos:column="27">catch <parameter_list pos:line="132" pos:column="33">(<param><decl><type><name pos:line="132" pos:column="34">SQLException</name></type> <name pos:line="132" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="132" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">System</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">out</name><op:operator pos:line="133" pos:column="43">.</op:operator><name pos:line="133" pos:column="44">println</name></name><argument_list pos:line="133" pos:column="51">(<argument><expr><name pos:line="133" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">Database</name><op:operator pos:line="134" pos:column="41">.</op:operator><name pos:line="134" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="134" pos:column="61">(<argument><expr><name pos:line="134" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="137" pos:column="19">catch <parameter_list pos:line="137" pos:column="25">(<param><decl><type><name pos:line="137" pos:column="26">Exception</name></type> <name pos:line="137" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="138" pos:column="25">System</name><op:operator pos:line="138" pos:column="31">.</op:operator><name pos:line="138" pos:column="32">out</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">println</name></name><argument_list pos:line="138" pos:column="43">(<argument><expr><name pos:line="138" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	
		<return pos:line="141" pos:column="17">return <expr><name pos:line="141" pos:column="24">tableAdded</name></expr>;</return>
	}</block></function>
		
	
	<comment type="line" pos:line="145" pos:column="9">// This function is called when a new exam is added in the CourseExamStructure table.</comment>
	<comment type="line" pos:line="146" pos:column="9">// This function adds a new column in the CourseExam table for the added exam.</comment>
	<function><type><specifier pos:line="147" pos:column="9">public</specifier> <specifier pos:line="147" pos:column="16">static</specifier> <name pos:line="147" pos:column="23">boolean</name></type> <name pos:line="147" pos:column="31">addNewExamColumn</name><parameter_list pos:line="147" pos:column="47">(<param><decl><type><name pos:line="147" pos:column="48">CourseExamStructure</name></type> <name pos:line="147" pos:column="68">courseExamStructure</name></decl></param>)</parameter_list><block pos:line="147" pos:column="88">{
		<decl_stmt><decl><type><name pos:line="148" pos:column="17">boolean</name></type> <name pos:line="148" pos:column="25">examAdded</name> <init pos:line="148" pos:column="35">= <expr><lit:literal type="boolean" pos:line="148" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="150" pos:column="17">CourseOffered</name></type> <name pos:line="150" pos:column="31">offeredCourse</name> <init pos:line="150" pos:column="45">= <expr><call><name><name pos:line="150" pos:column="47">courseExamStructure</name><op:operator pos:line="150" pos:column="66">.</op:operator><name pos:line="150" pos:column="67">getOfferedCourse</name></name><argument_list pos:line="150" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="151" pos:column="17">Course</name></type> <name pos:line="151" pos:column="24">course</name> <init pos:line="151" pos:column="31">= <expr><call><name><name pos:line="151" pos:column="33">offeredCourse</name><op:operator pos:line="151" pos:column="46">.</op:operator><name pos:line="151" pos:column="47">getCourse</name></name><argument_list pos:line="151" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">String</name></type> <name pos:line="152" pos:column="24">courseName</name> <init pos:line="152" pos:column="35">= <expr><call><name><name pos:line="152" pos:column="37">course</name><op:operator pos:line="152" pos:column="43">.</op:operator><name pos:line="152" pos:column="44">getCourseName</name></name><argument_list pos:line="152" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="153" pos:column="17">int</name></type> <name pos:line="153" pos:column="21">offerID</name><init pos:line="153" pos:column="28">= <expr><call><name><name pos:line="153" pos:column="30">offeredCourse</name><op:operator pos:line="153" pos:column="43">.</op:operator><name pos:line="153" pos:column="44">getOfferID</name></name><argument_list pos:line="153" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="154" pos:column="17">int</name></type> <name pos:line="154" pos:column="21">semID</name> <init pos:line="154" pos:column="27">= <expr><call><name><name pos:line="154" pos:column="29">offeredCourse</name><op:operator pos:line="154" pos:column="42">.</op:operator><name pos:line="154" pos:column="43">getSemesterID</name></name><argument_list pos:line="154" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name pos:line="157" pos:column="17">String</name></type> <name pos:line="157" pos:column="24">tableName</name> <init pos:line="157" pos:column="34">= <expr><name pos:line="157" pos:column="36">courseName</name> <op:operator pos:line="157" pos:column="47">+</op:operator> <call><name><name pos:line="157" pos:column="49">Integer</name><op:operator pos:line="157" pos:column="56">.</op:operator><name pos:line="157" pos:column="57">toString</name></name><argument_list pos:line="157" pos:column="65">(<argument><expr><name pos:line="157" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="75">+</op:operator> <call><name><name pos:line="157" pos:column="77">Integer</name><op:operator pos:line="157" pos:column="84">.</op:operator><name pos:line="157" pos:column="85">toString</name></name><argument_list pos:line="157" pos:column="93">(<argument><expr><name pos:line="157" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name pos:line="159" pos:column="17">String</name></type> <name pos:line="159" pos:column="24">examName</name> <init pos:line="159" pos:column="33">= <expr><call><name><name pos:line="159" pos:column="35">courseExamStructure</name><op:operator pos:line="159" pos:column="54">.</op:operator><name pos:line="159" pos:column="55">getExamName</name></name><argument_list pos:line="159" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">boolean</name></type> <name pos:line="161" pos:column="25">isExamPresent</name> <init pos:line="161" pos:column="39">= <expr><call><name pos:line="161" pos:column="41">isExamPresent</name><argument_list pos:line="161" pos:column="54">(<argument><expr><name pos:line="161" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="161" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><name pos:line="162" pos:column="21">isExamPresent</name> <op:operator pos:line="162" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="162" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="162" pos:column="43">{
			<expr_stmt><expr><call><name><name pos:line="163" pos:column="25">System</name><op:operator pos:line="163" pos:column="31">.</op:operator><name pos:line="163" pos:column="32">out</name><op:operator pos:line="163" pos:column="35">.</op:operator><name pos:line="163" pos:column="36">println</name></name><argument_list pos:line="163" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="44">"Exam already present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="164" pos:column="19">else <block pos:line="164" pos:column="24">{
			
		<expr_stmt><expr><call><name><name pos:line="166" pos:column="17">DBAnnotation</name><op:operator pos:line="166" pos:column="29">.</op:operator><name pos:line="166" pos:column="30">annoate</name></name><argument_list pos:line="166" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="38">"examName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="166" pos:column="49">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="166" pos:column="61">"ExamName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="166" pos:column="72">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">String</name></type> <name pos:line="167" pos:column="24">SQLExamAlter</name> <init pos:line="167" pos:column="37">= <expr><lit:literal type="string" pos:line="167" pos:column="39">"ALTER TABLE %s ADD COLUMN %s DECIMAL(4,1) Null DEFAULT 0 ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="168" pos:column="17">SQLExamAlter</name> <op:operator pos:line="168" pos:column="30">=</op:operator> <call><name><name pos:line="168" pos:column="32">String</name><op:operator pos:line="168" pos:column="38">.</op:operator><name pos:line="168" pos:column="39">format</name></name><argument_list pos:line="168" pos:column="45">(<argument><expr><name pos:line="168" pos:column="46">SQLExamAlter</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="60">tableName</name></expr></argument>,<argument><expr><name pos:line="168" pos:column="70">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="169" pos:column="17">try <block pos:line="169" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="170" pos:column="25">Connection</name></type> <name pos:line="170" pos:column="36">conn</name> <init pos:line="170" pos:column="41">= <expr><call><name><name pos:line="170" pos:column="43">Database</name><op:operator pos:line="170" pos:column="51">.</op:operator><name pos:line="170" pos:column="52">getConnection</name></name><argument_list pos:line="170" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="171" pos:column="25">try <block pos:line="171" pos:column="29">{
				<if pos:line="172" pos:column="33">if <condition pos:line="172" pos:column="36">(<expr><name pos:line="172" pos:column="37">conn</name> <op:operator pos:line="172" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="172" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="172" pos:column="50"> <block pos:line="172" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="173" pos:column="41">PreparedStatement</name></type> <name pos:line="173" pos:column="59">statement</name> <init pos:line="173" pos:column="69">= <expr><call><name><name pos:line="173" pos:column="71">conn</name><op:operator pos:line="173" pos:column="75">.</op:operator><name pos:line="173" pos:column="76">prepareStatement</name></name><argument_list pos:line="173" pos:column="92">(<argument><expr><name pos:line="173" pos:column="93">SQLExamAlter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="174" pos:column="1">//					statement.setString(1, tableName);</comment>
<comment type="line" pos:line="175" pos:column="1">//					statement.setString(2, examName);</comment>
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">statement</name><op:operator pos:line="176" pos:column="50">.</op:operator><name pos:line="176" pos:column="51">executeUpdate</name></name><argument_list pos:line="176" pos:column="64">()</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><name pos:line="177" pos:column="41">examAdded</name> <op:operator pos:line="177" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="177" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch pos:line="179" pos:column="27">catch <parameter_list pos:line="179" pos:column="33">(<param><decl><type><name pos:line="179" pos:column="34">SQLException</name></type> <name pos:line="179" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="180" pos:column="33">System</name><op:operator pos:line="180" pos:column="39">.</op:operator><name pos:line="180" pos:column="40">out</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">println</name></name><argument_list pos:line="180" pos:column="51">(<argument><expr><name pos:line="180" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="181" pos:column="33">Database</name><op:operator pos:line="181" pos:column="41">.</op:operator><name pos:line="181" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="181" pos:column="61">(<argument><expr><name pos:line="181" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="184" pos:column="19">catch <parameter_list pos:line="184" pos:column="25">(<param><decl><type><name pos:line="184" pos:column="26">Exception</name></type> <name pos:line="184" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="184" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="185" pos:column="25">System</name><op:operator pos:line="185" pos:column="31">.</op:operator><name pos:line="185" pos:column="32">out</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">println</name></name><argument_list pos:line="185" pos:column="43">(<argument><expr><name pos:line="185" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></else></if> <comment type="line" pos:line="187" pos:column="19">// End of Else</comment>
		<return pos:line="188" pos:column="17">return <expr><name pos:line="188" pos:column="24">examAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="191" pos:column="9">// Checks whether the exam is already present. Returns true, if present, else, false.</comment>
	<function><type><specifier pos:line="192" pos:column="9">private</specifier> <specifier pos:line="192" pos:column="17">static</specifier> <name pos:line="192" pos:column="24">boolean</name></type> <name pos:line="192" pos:column="32">isExamPresent</name><parameter_list pos:line="192" pos:column="45">(<param><decl><type><name pos:line="192" pos:column="46">String</name></type> <name pos:line="192" pos:column="53">tableName</name></decl></param>, <param><decl><type><name pos:line="192" pos:column="64">String</name></type> <name pos:line="192" pos:column="71">examName</name></decl></param>)</parameter_list><block pos:line="192" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="193" pos:column="17">boolean</name></type> <name pos:line="193" pos:column="25">isExamPresent</name> <init pos:line="193" pos:column="39">= <expr><lit:literal type="boolean" pos:line="193" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name pos:line="195" pos:column="17">DBAnnotation</name><op:operator pos:line="195" pos:column="29">.</op:operator><name pos:line="195" pos:column="30">annoate</name></name><argument_list pos:line="195" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="38">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="195" pos:column="50">"INFORMATION_SCHEMA.COLUMNS"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="195" pos:column="79">"column_name"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="195" pos:column="93">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="196" pos:column="17">String</name></type> <name pos:line="196" pos:column="24">INFORMATION_SCHEMA_COLUMNS_Select</name> <init pos:line="196" pos:column="58">= <expr><lit:literal type="string" pos:line="196" pos:column="60">"SELECT ISC.column_name FROM INFORMATION_SCHEMA.COLUMNS ISC WHERE ISC.table_name = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="198" pos:column="17">try <block pos:line="198" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="199" pos:column="25">Connection</name></type> <name pos:line="199" pos:column="36">conn</name> <init pos:line="199" pos:column="41">= <expr><call><name><name pos:line="199" pos:column="43">Database</name><op:operator pos:line="199" pos:column="51">.</op:operator><name pos:line="199" pos:column="52">getConnection</name></name><argument_list pos:line="199" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="200" pos:column="25">try <block pos:line="200" pos:column="29">{
				<if pos:line="201" pos:column="33">if <condition pos:line="201" pos:column="36">(<expr><name pos:line="201" pos:column="37">conn</name> <op:operator pos:line="201" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="201" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="201" pos:column="50"> <block pos:line="201" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="203" pos:column="41">PreparedStatement</name></type> <name pos:line="203" pos:column="59">statement</name> <init pos:line="203" pos:column="69">= <expr><call><name><name pos:line="203" pos:column="71">conn</name><op:operator pos:line="203" pos:column="75">.</op:operator><name pos:line="203" pos:column="76">prepareStatement</name></name><argument_list pos:line="203" pos:column="92">(<argument><expr><name pos:line="203" pos:column="93">INFORMATION_SCHEMA_COLUMNS_Select</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">statement</name><op:operator pos:line="205" pos:column="50">.</op:operator><name pos:line="205" pos:column="51">setString</name></name><argument_list pos:line="205" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="205" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="64">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="206" pos:column="41">ResultSet</name></type> <name pos:line="206" pos:column="51">rs</name> <init pos:line="206" pos:column="54">= <expr><call><name><name pos:line="206" pos:column="56">statement</name><op:operator pos:line="206" pos:column="65">.</op:operator><name pos:line="206" pos:column="66">executeQuery</name></name><argument_list pos:line="206" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="207" pos:column="41">while<condition pos:line="207" pos:column="46">(<expr><call><name><name pos:line="207" pos:column="47">rs</name><op:operator pos:line="207" pos:column="49">.</op:operator><name pos:line="207" pos:column="50">next</name></name><argument_list pos:line="207" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="207" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="208" pos:column="49">DBAnnotation</name><op:operator pos:line="208" pos:column="61">.</op:operator><name pos:line="208" pos:column="62">annoate</name></name><argument_list pos:line="208" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="70">"tableExamName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="208" pos:column="86">"INFORMATION_SCHEMA.COLUMNS"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="208" pos:column="115">"column_name"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="208" pos:column="129">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="209" pos:column="49">String</name></type> <name pos:line="209" pos:column="56">tableExamName</name> <init pos:line="209" pos:column="70">= <expr><call><name><name pos:line="209" pos:column="72">rs</name><op:operator pos:line="209" pos:column="74">.</op:operator><name pos:line="209" pos:column="75">getString</name></name><argument_list pos:line="209" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="85">"column_name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<if pos:line="211" pos:column="49">if<condition pos:line="211" pos:column="51">(<expr><call><name><name pos:line="211" pos:column="52">examName</name><op:operator pos:line="211" pos:column="60">.</op:operator><name pos:line="211" pos:column="61">equals</name></name><argument_list pos:line="211" pos:column="67">(<argument><expr><name pos:line="211" pos:column="68">tableExamName</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="211" pos:column="83">{
							<expr_stmt><expr><name pos:line="212" pos:column="57">isExamPresent</name> <op:operator pos:line="212" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="212" pos:column="73">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="213" pos:column="57">break;</break>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="217" pos:column="27">catch <parameter_list pos:line="217" pos:column="33">(<param><decl><type><name pos:line="217" pos:column="34">SQLException</name></type> <name pos:line="217" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="217" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="218" pos:column="33">System</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">out</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">println</name></name><argument_list pos:line="218" pos:column="51">(<argument><expr><name pos:line="218" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="221" pos:column="19">catch <parameter_list pos:line="221" pos:column="25">(<param><decl><type><name pos:line="221" pos:column="26">Exception</name></type> <name pos:line="221" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">System</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">out</name><op:operator pos:line="222" pos:column="35">.</op:operator><name pos:line="222" pos:column="36">println</name></name><argument_list pos:line="222" pos:column="43">(<argument><expr><name pos:line="222" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="225" pos:column="17">return <expr><name pos:line="225" pos:column="24">isExamPresent</name></expr>;</return>
		
	}</block></function>
	
	<comment type="line" pos:line="229" pos:column="9">// This function is used to modify the column name to be consistent with the </comment>
	<comment type="line" pos:line="230" pos:column="9">// exam name in the CourseExamStructure table.</comment>
	<function><type><specifier pos:line="231" pos:column="9">public</specifier> <specifier pos:line="231" pos:column="16">static</specifier> <name pos:line="231" pos:column="23">boolean</name></type> <name pos:line="231" pos:column="31">modifyExistingExamColumnName</name><parameter_list pos:line="231" pos:column="59">(<param><decl><type><name pos:line="231" pos:column="60">CourseExamStructure</name></type> <name pos:line="231" pos:column="80">courseExamStructure</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="101">String</name></type> <name pos:line="231" pos:column="108">newExamName</name></decl></param>)</parameter_list><block pos:line="231" pos:column="120">{
		<decl_stmt><decl><type><name pos:line="232" pos:column="17">boolean</name></type> <name pos:line="232" pos:column="25">modifiedColumn</name> <init pos:line="232" pos:column="40">= <expr><lit:literal type="boolean" pos:line="232" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="234" pos:column="17">CourseOffered</name></type> <name pos:line="234" pos:column="31">offeredCourse</name> <init pos:line="234" pos:column="45">= <expr><call><name><name pos:line="234" pos:column="47">courseExamStructure</name><op:operator pos:line="234" pos:column="66">.</op:operator><name pos:line="234" pos:column="67">getOfferedCourse</name></name><argument_list pos:line="234" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="235" pos:column="17">Course</name></type> <name pos:line="235" pos:column="24">course</name> <init pos:line="235" pos:column="31">= <expr><call><name><name pos:line="235" pos:column="33">offeredCourse</name><op:operator pos:line="235" pos:column="46">.</op:operator><name pos:line="235" pos:column="47">getCourse</name></name><argument_list pos:line="235" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="236" pos:column="17">String</name></type> <name pos:line="236" pos:column="24">courseName</name> <init pos:line="236" pos:column="35">= <expr><call><name><name pos:line="236" pos:column="37">course</name><op:operator pos:line="236" pos:column="43">.</op:operator><name pos:line="236" pos:column="44">getCourseName</name></name><argument_list pos:line="236" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="237" pos:column="17">int</name></type> <name pos:line="237" pos:column="21">offerID</name><init pos:line="237" pos:column="28">= <expr><call><name><name pos:line="237" pos:column="30">offeredCourse</name><op:operator pos:line="237" pos:column="43">.</op:operator><name pos:line="237" pos:column="44">getOfferID</name></name><argument_list pos:line="237" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="238" pos:column="17">int</name></type> <name pos:line="238" pos:column="21">semID</name> <init pos:line="238" pos:column="27">= <expr><call><name><name pos:line="238" pos:column="29">offeredCourse</name><op:operator pos:line="238" pos:column="42">.</op:operator><name pos:line="238" pos:column="43">getSemesterID</name></name><argument_list pos:line="238" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name pos:line="241" pos:column="17">String</name></type> <name pos:line="241" pos:column="24">tableName</name> <init pos:line="241" pos:column="34">= <expr><name pos:line="241" pos:column="36">courseName</name> <op:operator pos:line="241" pos:column="47">+</op:operator> <call><name><name pos:line="241" pos:column="49">Integer</name><op:operator pos:line="241" pos:column="56">.</op:operator><name pos:line="241" pos:column="57">toString</name></name><argument_list pos:line="241" pos:column="65">(<argument><expr><name pos:line="241" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="75">+</op:operator> <call><name><name pos:line="241" pos:column="77">Integer</name><op:operator pos:line="241" pos:column="84">.</op:operator><name pos:line="241" pos:column="85">toString</name></name><argument_list pos:line="241" pos:column="93">(<argument><expr><name pos:line="241" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name pos:line="243" pos:column="17">String</name></type> <name pos:line="243" pos:column="24">examName</name> <init pos:line="243" pos:column="33">= <expr><call><name><name pos:line="243" pos:column="35">courseExamStructure</name><op:operator pos:line="243" pos:column="54">.</op:operator><name pos:line="243" pos:column="55">getExamName</name></name><argument_list pos:line="243" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name pos:line="245" pos:column="17">boolean</name></type> <name pos:line="245" pos:column="25">isExamPresent</name> <init pos:line="245" pos:column="39">= <expr><call><name pos:line="245" pos:column="41">isExamPresent</name><argument_list pos:line="245" pos:column="54">(<argument><expr><name pos:line="245" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="245" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="246" pos:column="17">boolean</name></type> <name pos:line="246" pos:column="25">isNewExamPresent</name> <init pos:line="246" pos:column="42">= <expr><call><name pos:line="246" pos:column="44">isExamPresent</name><argument_list pos:line="246" pos:column="57">(<argument><expr><name pos:line="246" pos:column="58">tableName</name></expr></argument>,<argument><expr><name pos:line="246" pos:column="68">newExamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><op:operator pos:line="247" pos:column="21">(</op:operator><name pos:line="247" pos:column="22">isExamPresent</name> <op:operator pos:line="247" pos:column="36">==</op:operator> <lit:literal type="boolean" pos:line="247" pos:column="39">true</lit:literal><op:operator pos:line="247" pos:column="43">)</op:operator> <op:operator pos:line="247" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="247" pos:column="48">(</op:operator><name pos:line="247" pos:column="49">isNewExamPresent</name><op:operator pos:line="247" pos:column="65">==</op:operator> <lit:literal type="boolean" pos:line="247" pos:column="68">false</lit:literal><op:operator pos:line="247" pos:column="73">)</op:operator></expr> )</condition><then><block pos:line="247" pos:column="76">{
						
		
		<comment type="line" pos:line="250" pos:column="17">//DBAnnotation.annoate("newExamName","tableName","ExamName",false);</comment>
		<decl_stmt><decl><type><name pos:line="251" pos:column="17">String</name></type> <name pos:line="251" pos:column="24">SQLExamAlter</name> <init pos:line="251" pos:column="37">= <expr><lit:literal type="string" pos:line="251" pos:column="39">"ALTER TABLE %s CHANGE COLUMN %s %s DECIMAL(4,1) NULL;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="252" pos:column="17">SQLExamAlter</name> <op:operator pos:line="252" pos:column="30">=</op:operator> <call><name><name pos:line="252" pos:column="32">String</name><op:operator pos:line="252" pos:column="38">.</op:operator><name pos:line="252" pos:column="39">format</name></name><argument_list pos:line="252" pos:column="45">(<argument><expr><name pos:line="252" pos:column="46">SQLExamAlter</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="60">tableName</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="71">examName</name></expr></argument>,<argument><expr><name pos:line="252" pos:column="80">newExamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="254" pos:column="17">try <block pos:line="254" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="255" pos:column="25">Connection</name></type> <name pos:line="255" pos:column="36">conn</name> <init pos:line="255" pos:column="41">= <expr><call><name><name pos:line="255" pos:column="43">Database</name><op:operator pos:line="255" pos:column="51">.</op:operator><name pos:line="255" pos:column="52">getConnection</name></name><argument_list pos:line="255" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="256" pos:column="25">try <block pos:line="256" pos:column="29">{
				<if pos:line="257" pos:column="33">if <condition pos:line="257" pos:column="36">(<expr><name pos:line="257" pos:column="37">conn</name> <op:operator pos:line="257" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="257" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="257" pos:column="50"> <block pos:line="257" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="259" pos:column="41">PreparedStatement</name></type> <name pos:line="259" pos:column="59">statement</name> <init pos:line="259" pos:column="69">= <expr><call><name><name pos:line="259" pos:column="71">conn</name><op:operator pos:line="259" pos:column="75">.</op:operator><name pos:line="259" pos:column="76">prepareStatement</name></name><argument_list pos:line="259" pos:column="92">(<argument><expr><name pos:line="259" pos:column="93">SQLExamAlter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="260" pos:column="1">//					statement.setString(1, tableName);</comment>
<comment type="line" pos:line="261" pos:column="1">//					statement.setString(2, examName);</comment>
<comment type="line" pos:line="262" pos:column="1">//					statement.setString(3, newExamName);</comment>
					<expr_stmt><expr><call><name><name pos:line="263" pos:column="41">statement</name><op:operator pos:line="263" pos:column="50">.</op:operator><name pos:line="263" pos:column="51">executeUpdate</name></name><argument_list pos:line="263" pos:column="64">()</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><name pos:line="264" pos:column="41">modifiedColumn</name> <op:operator pos:line="264" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="264" pos:column="58">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch pos:line="266" pos:column="27">catch <parameter_list pos:line="266" pos:column="33">(<param><decl><type><name pos:line="266" pos:column="34">SQLException</name></type> <name pos:line="266" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="266" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="267" pos:column="33">System</name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">out</name><op:operator pos:line="267" pos:column="43">.</op:operator><name pos:line="267" pos:column="44">println</name></name><argument_list pos:line="267" pos:column="51">(<argument><expr><name pos:line="267" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="268" pos:column="33">Database</name><op:operator pos:line="268" pos:column="41">.</op:operator><name pos:line="268" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="268" pos:column="61">(<argument><expr><name pos:line="268" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="271" pos:column="19">catch <parameter_list pos:line="271" pos:column="25">(<param><decl><type><name pos:line="271" pos:column="26">Exception</name></type> <name pos:line="271" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="272" pos:column="25">System</name><op:operator pos:line="272" pos:column="31">.</op:operator><name pos:line="272" pos:column="32">out</name><op:operator pos:line="272" pos:column="35">.</op:operator><name pos:line="272" pos:column="36">println</name></name><argument_list pos:line="272" pos:column="43">(<argument><expr><name pos:line="272" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try> 
		
		}</block></then> <else pos:line="275" pos:column="19">else <block pos:line="275" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="276" pos:column="25">System</name><op:operator pos:line="276" pos:column="31">.</op:operator><name pos:line="276" pos:column="32">out</name><op:operator pos:line="276" pos:column="35">.</op:operator><name pos:line="276" pos:column="36">println</name></name><argument_list pos:line="276" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="44">"Old exam name not present or New exam name already present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> 
		
		<return pos:line="279" pos:column="17">return <expr><name pos:line="279" pos:column="24">modifiedColumn</name></expr>;</return>
	}</block></function>	
	
	<comment type="line" pos:line="282" pos:column="9">// This function is used to delete the exam column when that exam is</comment>
	<comment type="line" pos:line="283" pos:column="9">// deleted from the CourseExamStructure table.</comment>
	<function><type><specifier pos:line="284" pos:column="9">public</specifier> <specifier pos:line="284" pos:column="16">static</specifier> <name pos:line="284" pos:column="23">boolean</name></type> <name pos:line="284" pos:column="31">deleteExistingExamColumn</name><parameter_list pos:line="284" pos:column="55">(<param><decl><type><name pos:line="284" pos:column="56">CourseExamStructure</name></type> <name pos:line="284" pos:column="76">courseExamStructure</name></decl></param>)</parameter_list><block pos:line="284" pos:column="96">{
		<decl_stmt><decl><type><name pos:line="285" pos:column="17">boolean</name></type> <name pos:line="285" pos:column="25">examDeleted</name> <init pos:line="285" pos:column="37">= <expr><lit:literal type="boolean" pos:line="285" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="287" pos:column="17">CourseOffered</name></type> <name pos:line="287" pos:column="31">offeredCourse</name> <init pos:line="287" pos:column="45">= <expr><call><name><name pos:line="287" pos:column="47">courseExamStructure</name><op:operator pos:line="287" pos:column="66">.</op:operator><name pos:line="287" pos:column="67">getOfferedCourse</name></name><argument_list pos:line="287" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="288" pos:column="17">Course</name></type> <name pos:line="288" pos:column="24">course</name> <init pos:line="288" pos:column="31">= <expr><call><name><name pos:line="288" pos:column="33">offeredCourse</name><op:operator pos:line="288" pos:column="46">.</op:operator><name pos:line="288" pos:column="47">getCourse</name></name><argument_list pos:line="288" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="289" pos:column="17">String</name></type> <name pos:line="289" pos:column="24">courseName</name> <init pos:line="289" pos:column="35">= <expr><call><name><name pos:line="289" pos:column="37">course</name><op:operator pos:line="289" pos:column="43">.</op:operator><name pos:line="289" pos:column="44">getCourseName</name></name><argument_list pos:line="289" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="290" pos:column="17">int</name></type> <name pos:line="290" pos:column="21">offerID</name><init pos:line="290" pos:column="28">= <expr><call><name><name pos:line="290" pos:column="30">offeredCourse</name><op:operator pos:line="290" pos:column="43">.</op:operator><name pos:line="290" pos:column="44">getOfferID</name></name><argument_list pos:line="290" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="291" pos:column="17">int</name></type> <name pos:line="291" pos:column="21">semID</name> <init pos:line="291" pos:column="27">= <expr><call><name><name pos:line="291" pos:column="29">offeredCourse</name><op:operator pos:line="291" pos:column="42">.</op:operator><name pos:line="291" pos:column="43">getSemesterID</name></name><argument_list pos:line="291" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="293" pos:column="17">String</name></type> <name pos:line="293" pos:column="24">tableName</name> <init pos:line="293" pos:column="34">= <expr><name pos:line="293" pos:column="36">courseName</name> <op:operator pos:line="293" pos:column="47">+</op:operator> <call><name><name pos:line="293" pos:column="49">Integer</name><op:operator pos:line="293" pos:column="56">.</op:operator><name pos:line="293" pos:column="57">toString</name></name><argument_list pos:line="293" pos:column="65">(<argument><expr><name pos:line="293" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="293" pos:column="75">+</op:operator> <call><name><name pos:line="293" pos:column="77">Integer</name><op:operator pos:line="293" pos:column="84">.</op:operator><name pos:line="293" pos:column="85">toString</name></name><argument_list pos:line="293" pos:column="93">(<argument><expr><name pos:line="293" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="295" pos:column="17">String</name></type> <name pos:line="295" pos:column="24">examName</name> <init pos:line="295" pos:column="33">= <expr><call><name><name pos:line="295" pos:column="35">courseExamStructure</name><op:operator pos:line="295" pos:column="54">.</op:operator><name pos:line="295" pos:column="55">getExamName</name></name><argument_list pos:line="295" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="297" pos:column="17">boolean</name></type> <name pos:line="297" pos:column="25">isExamPresent</name> <init pos:line="297" pos:column="39">= <expr><call><name pos:line="297" pos:column="41">isExamPresent</name><argument_list pos:line="297" pos:column="54">(<argument><expr><name pos:line="297" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="297" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="298" pos:column="17">if <condition pos:line="298" pos:column="20">(<expr><name pos:line="298" pos:column="21">isExamPresent</name> <op:operator pos:line="298" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="298" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="298" pos:column="43">{
						
		<expr_stmt><expr><call><name><name pos:line="300" pos:column="17">DBAnnotation</name><op:operator pos:line="300" pos:column="29">.</op:operator><name pos:line="300" pos:column="30">annoate</name></name><argument_list pos:line="300" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="38">"examName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="300" pos:column="49">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="300" pos:column="61">"ExamName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="300" pos:column="72">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="301" pos:column="17">String</name></type> <name pos:line="301" pos:column="24">SQLExamDelete</name> <init pos:line="301" pos:column="38">= <expr><lit:literal type="string" pos:line="301" pos:column="40">"ALTER TABLE %s DROP COLUMN %s ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="302" pos:column="17">SQLExamDelete</name> <op:operator pos:line="302" pos:column="31">=</op:operator> <call><name><name pos:line="302" pos:column="33">String</name><op:operator pos:line="302" pos:column="39">.</op:operator><name pos:line="302" pos:column="40">format</name></name><argument_list pos:line="302" pos:column="46">(<argument><expr><name pos:line="302" pos:column="47">SQLExamDelete</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="62">tableName</name></expr></argument>,<argument><expr><name pos:line="302" pos:column="72">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="303" pos:column="17">try <block pos:line="303" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="304" pos:column="25">Connection</name></type> <name pos:line="304" pos:column="36">conn</name> <init pos:line="304" pos:column="41">= <expr><call><name><name pos:line="304" pos:column="43">Database</name><op:operator pos:line="304" pos:column="51">.</op:operator><name pos:line="304" pos:column="52">getConnection</name></name><argument_list pos:line="304" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="305" pos:column="25">try <block pos:line="305" pos:column="29">{
				<if pos:line="306" pos:column="33">if <condition pos:line="306" pos:column="36">(<expr><name pos:line="306" pos:column="37">conn</name> <op:operator pos:line="306" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="306" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="306" pos:column="50"> <block pos:line="306" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="307" pos:column="41">PreparedStatement</name></type> <name pos:line="307" pos:column="59">statement</name> <init pos:line="307" pos:column="69">= <expr><call><name><name pos:line="307" pos:column="71">conn</name><op:operator pos:line="307" pos:column="75">.</op:operator><name pos:line="307" pos:column="76">prepareStatement</name></name><argument_list pos:line="307" pos:column="92">(<argument><expr><name pos:line="307" pos:column="93">SQLExamDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="308" pos:column="1">//					statement.setString(1, tableName);</comment>
<comment type="line" pos:line="309" pos:column="1">//					statement.setString(2, examName);</comment>
					<expr_stmt><expr><call><name><name pos:line="310" pos:column="41">statement</name><op:operator pos:line="310" pos:column="50">.</op:operator><name pos:line="310" pos:column="51">executeUpdate</name></name><argument_list pos:line="310" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="311" pos:column="41">examDeleted</name> <op:operator pos:line="311" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="311" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch pos:line="313" pos:column="27">catch <parameter_list pos:line="313" pos:column="33">(<param><decl><type><name pos:line="313" pos:column="34">SQLException</name></type> <name pos:line="313" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="314" pos:column="33">System</name><op:operator pos:line="314" pos:column="39">.</op:operator><name pos:line="314" pos:column="40">out</name><op:operator pos:line="314" pos:column="43">.</op:operator><name pos:line="314" pos:column="44">println</name></name><argument_list pos:line="314" pos:column="51">(<argument><expr><name pos:line="314" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="315" pos:column="33">Database</name><op:operator pos:line="315" pos:column="41">.</op:operator><name pos:line="315" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="315" pos:column="61">(<argument><expr><name pos:line="315" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="318" pos:column="19">catch <parameter_list pos:line="318" pos:column="25">(<param><decl><type><name pos:line="318" pos:column="26">Exception</name></type> <name pos:line="318" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="318" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="319" pos:column="25">System</name><op:operator pos:line="319" pos:column="31">.</op:operator><name pos:line="319" pos:column="32">out</name><op:operator pos:line="319" pos:column="35">.</op:operator><name pos:line="319" pos:column="36">println</name></name><argument_list pos:line="319" pos:column="43">(<argument><expr><name pos:line="319" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></then> <else pos:line="321" pos:column="19">else <block pos:line="321" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="322" pos:column="25">System</name><op:operator pos:line="322" pos:column="31">.</op:operator><name pos:line="322" pos:column="32">out</name><op:operator pos:line="322" pos:column="35">.</op:operator><name pos:line="322" pos:column="36">println</name></name><argument_list pos:line="322" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="322" pos:column="44">"Exam not present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> <comment type="line" pos:line="323" pos:column="19">// End of Else</comment>
		<return pos:line="324" pos:column="17">return <expr><name pos:line="324" pos:column="24">examDeleted</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="327" pos:column="9">// This function adds marks of the students in the respective exam columns</comment>
	<function><type><specifier pos:line="328" pos:column="9">public</specifier> <name pos:line="328" pos:column="16">boolean</name></type> <name pos:line="328" pos:column="24">addStudentMarks</name><parameter_list pos:line="328" pos:column="39">()</parameter_list><block pos:line="328" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="329" pos:column="17">boolean</name></type> <name pos:line="329" pos:column="25">studentsMarksAdded</name> <init pos:line="329" pos:column="44">= <expr><lit:literal type="boolean" pos:line="329" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="331" pos:column="17">int</name></type> <name pos:line="331" pos:column="21">offerID</name> <init pos:line="331" pos:column="29">= <expr><call><name><name pos:line="331" pos:column="31">this</name><op:operator pos:line="331" pos:column="35">.</op:operator><name pos:line="331" pos:column="36">getOfferID</name></name><argument_list pos:line="331" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="332" pos:column="17">CourseOffered</name></type> <name pos:line="332" pos:column="31">offeredCourse</name> <init pos:line="332" pos:column="45">= <expr><lit:literal type="null" pos:line="332" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="334" pos:column="17">try <block pos:line="334" pos:column="21">{
			<expr_stmt><expr><name pos:line="335" pos:column="25">offeredCourse</name> <op:operator pos:line="335" pos:column="39">=</op:operator> <op:operator pos:line="335" pos:column="41">new</op:operator> <call><name pos:line="335" pos:column="45">CourseOffered</name><argument_list pos:line="335" pos:column="58">(<argument><expr><name pos:line="335" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="336" pos:column="19">catch <parameter_list pos:line="336" pos:column="25">(<param><decl><type><name><name pos:line="336" pos:column="26">Course</name><op:operator pos:line="336" pos:column="32">.</op:operator><name pos:line="336" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="336" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="336" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="337" pos:column="25">e1</name><op:operator pos:line="337" pos:column="27">.</op:operator><name pos:line="337" pos:column="28">printStackTrace</name></name><argument_list pos:line="337" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="338" pos:column="19">catch <parameter_list pos:line="338" pos:column="25">(<param><decl><type><name><name pos:line="338" pos:column="26">CourseOffered</name><op:operator pos:line="338" pos:column="39">.</op:operator><name pos:line="338" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="338" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="338" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="339" pos:column="25">e1</name><op:operator pos:line="339" pos:column="27">.</op:operator><name pos:line="339" pos:column="28">printStackTrace</name></name><argument_list pos:line="339" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="342" pos:column="17">Course</name></type> <name pos:line="342" pos:column="24">course</name> <init pos:line="342" pos:column="31">= <expr><call><name><name pos:line="342" pos:column="33">offeredCourse</name><op:operator pos:line="342" pos:column="46">.</op:operator><name pos:line="342" pos:column="47">getCourse</name></name><argument_list pos:line="342" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="343" pos:column="17">String</name></type> <name pos:line="343" pos:column="24">courseName</name> <init pos:line="343" pos:column="35">= <expr><call><name><name pos:line="343" pos:column="37">course</name><op:operator pos:line="343" pos:column="43">.</op:operator><name pos:line="343" pos:column="44">getCourseName</name></name><argument_list pos:line="343" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="344" pos:column="17">int</name></type> <name pos:line="344" pos:column="21">semID</name> <init pos:line="344" pos:column="27">= <expr><call><name><name pos:line="344" pos:column="29">offeredCourse</name><op:operator pos:line="344" pos:column="42">.</op:operator><name pos:line="344" pos:column="43">getSemesterID</name></name><argument_list pos:line="344" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="346" pos:column="17">String</name></type> <name pos:line="346" pos:column="24">tableName</name> <init pos:line="346" pos:column="34">= <expr><name pos:line="346" pos:column="36">courseName</name> <op:operator pos:line="346" pos:column="47">+</op:operator> <call><name><name pos:line="346" pos:column="49">Integer</name><op:operator pos:line="346" pos:column="56">.</op:operator><name pos:line="346" pos:column="57">toString</name></name><argument_list pos:line="346" pos:column="65">(<argument><expr><name pos:line="346" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="346" pos:column="75">+</op:operator> <call><name><name pos:line="346" pos:column="77">Integer</name><op:operator pos:line="346" pos:column="84">.</op:operator><name pos:line="346" pos:column="85">toString</name></name><argument_list pos:line="346" pos:column="93">(<argument><expr><name pos:line="346" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name pos:line="348" pos:column="17">String</name></type> <name pos:line="348" pos:column="24">examName</name> <init pos:line="348" pos:column="33">= <expr><call><name><name pos:line="348" pos:column="35">this</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">getExamName</name></name><argument_list pos:line="348" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="349" pos:column="17">HashMap</name><argument_list pos:line="349" pos:column="24">&lt;<argument><name pos:line="349" pos:column="25">Student</name></argument>,<argument><name pos:line="349" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="349" pos:column="41">examMarks</name> <init pos:line="349" pos:column="51">= <expr><name><name pos:line="349" pos:column="53">this</name><op:operator pos:line="349" pos:column="57">.</op:operator><name pos:line="349" pos:column="58">examMarks</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="350" pos:column="17">Set</name><argument_list pos:line="350" pos:column="20">&lt;<argument><name pos:line="350" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="350" pos:column="30">keys</name> <init pos:line="350" pos:column="35">= <expr><call><name><name pos:line="350" pos:column="37">examMarks</name><op:operator pos:line="350" pos:column="46">.</op:operator><name pos:line="350" pos:column="47">keySet</name></name><argument_list pos:line="350" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="351" pos:column="17">Iterator</name><argument_list pos:line="351" pos:column="25">&lt;<argument><name pos:line="351" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="351" pos:column="35">keyIterator</name> <init pos:line="351" pos:column="47">= <expr><call><name><name pos:line="351" pos:column="49">keys</name><op:operator pos:line="351" pos:column="53">.</op:operator><name pos:line="351" pos:column="54">iterator</name></name><argument_list pos:line="351" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="352" pos:column="17">while <condition pos:line="352" pos:column="23">(<expr><call><name><name pos:line="352" pos:column="24">keyIterator</name><op:operator pos:line="352" pos:column="35">.</op:operator><name pos:line="352" pos:column="36">hasNext</name></name><argument_list pos:line="352" pos:column="43">()</argument_list></call></expr>)</condition> <block pos:line="352" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="353" pos:column="25">Student</name></type> <name pos:line="353" pos:column="33">student</name> <init pos:line="353" pos:column="41">= <expr><call><name><name pos:line="353" pos:column="43">keyIterator</name><op:operator pos:line="353" pos:column="54">.</op:operator><name pos:line="353" pos:column="55">next</name></name><argument_list pos:line="353" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="354" pos:column="25">int</name></type> <name pos:line="354" pos:column="29">UIN</name> <init pos:line="354" pos:column="33">= <expr><call><name><name pos:line="354" pos:column="35">student</name><op:operator pos:line="354" pos:column="42">.</op:operator><name pos:line="354" pos:column="43">getUIN</name></name><argument_list pos:line="354" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="356" pos:column="25">double</name></type> <name pos:line="356" pos:column="32">marks</name> <init pos:line="356" pos:column="38">= <expr><op:operator pos:line="356" pos:column="40">(</op:operator><name pos:line="356" pos:column="41">double</name><op:operator pos:line="356" pos:column="47">)</op:operator> <call><name><name pos:line="356" pos:column="49">examMarks</name><op:operator pos:line="356" pos:column="58">.</op:operator><name pos:line="356" pos:column="59">get</name></name><argument_list pos:line="356" pos:column="62">(<argument><expr><name pos:line="356" pos:column="63">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			
			<comment type="line" pos:line="358" pos:column="25">// Step 1: Check if the student is enrolled for this course</comment>
			<decl_stmt><decl><type><name pos:line="359" pos:column="25">boolean</name></type> <name pos:line="359" pos:column="33">isStudentEnrolled</name> <init pos:line="359" pos:column="51">= <expr><call><name pos:line="359" pos:column="53">isStudentEnrolled</name><argument_list pos:line="359" pos:column="70">(<argument><expr><name pos:line="359" pos:column="71">student</name></expr></argument>,<argument><expr><name pos:line="359" pos:column="79">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line" pos:line="361" pos:column="25">// Step 2: Get student Enrollment ID</comment>
			<comment type="line" pos:line="362" pos:column="25">//int enrollmentID = StudentEnrollment.getStudentEnrollmentID(student,offerID);</comment>
			
			<comment type="line" pos:line="364" pos:column="25">// If enrolled, add his marks</comment>
			<if pos:line="365" pos:column="25">if <condition pos:line="365" pos:column="28">(<expr><name pos:line="365" pos:column="29">isStudentEnrolled</name> <op:operator pos:line="365" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="365" pos:column="50">true</lit:literal></expr>)</condition><then><block pos:line="365" pos:column="55">{
				
				<decl_stmt><decl><type><name pos:line="367" pos:column="33">String</name></type> <name pos:line="367" pos:column="40">SQLExamUpdate</name> <init pos:line="367" pos:column="54">= <expr><lit:literal type="string" pos:line="367" pos:column="56">"UPDATE %s SET %s = ? WHERE `StudentUIN`=?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="368" pos:column="33">SQLExamUpdate</name> <op:operator pos:line="368" pos:column="47">=</op:operator> <call><name><name pos:line="368" pos:column="49">String</name><op:operator pos:line="368" pos:column="55">.</op:operator><name pos:line="368" pos:column="56">format</name></name><argument_list pos:line="368" pos:column="62">(<argument><expr><name pos:line="368" pos:column="63">SQLExamUpdate</name></expr></argument>, <argument><expr><name pos:line="368" pos:column="78">tableName</name></expr></argument>,<argument><expr><name pos:line="368" pos:column="88">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try pos:line="369" pos:column="33">try <block pos:line="369" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="370" pos:column="41">Connection</name></type> <name pos:line="370" pos:column="52">conn</name> <init pos:line="370" pos:column="57">= <expr><call><name><name pos:line="370" pos:column="59">Database</name><op:operator pos:line="370" pos:column="67">.</op:operator><name pos:line="370" pos:column="68">getConnection</name></name><argument_list pos:line="370" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="371" pos:column="41">try <block pos:line="371" pos:column="45">{
						<if pos:line="372" pos:column="49">if <condition pos:line="372" pos:column="52">(<expr><name pos:line="372" pos:column="53">conn</name> <op:operator pos:line="372" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="372" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="372" pos:column="66"> <block pos:line="372" pos:column="67">{
						 
							<decl_stmt><decl><type><name pos:line="374" pos:column="57">PreparedStatement</name></type> <name pos:line="374" pos:column="75">statement</name> <init pos:line="374" pos:column="85">= <expr><call><name><name pos:line="374" pos:column="87">conn</name><op:operator pos:line="374" pos:column="91">.</op:operator><name pos:line="374" pos:column="92">prepareStatement</name></name><argument_list pos:line="374" pos:column="108">(<argument><expr><name pos:line="374" pos:column="109">SQLExamUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="375" pos:column="1">//							statement.setString(1, tableName);</comment>
<comment type="line" pos:line="376" pos:column="1">//							statement.setString(2, examName);</comment>
							<expr_stmt><expr><call><name><name pos:line="377" pos:column="57">DBAnnotation</name><op:operator pos:line="377" pos:column="69">.</op:operator><name pos:line="377" pos:column="70">annoate</name></name><argument_list pos:line="377" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="377" pos:column="78">"marks"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="377" pos:column="86">"tableName"</lit:literal></expr></argument>,<argument><expr><name pos:line="377" pos:column="98">examName</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="377" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="378" pos:column="57">statement</name><op:operator pos:line="378" pos:column="66">.</op:operator><name pos:line="378" pos:column="67">setDouble</name></name><argument_list pos:line="378" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="378" pos:column="77">1</lit:literal></expr></argument>, <argument><expr><name pos:line="378" pos:column="80">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="379" pos:column="57">DBAnnotation</name><op:operator pos:line="379" pos:column="69">.</op:operator><name pos:line="379" pos:column="70">annoate</name></name><argument_list pos:line="379" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="78">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="379" pos:column="84">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="379" pos:column="96">"StudentUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="379" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="380" pos:column="57">statement</name><op:operator pos:line="380" pos:column="66">.</op:operator><name pos:line="380" pos:column="67">setInt</name></name><argument_list pos:line="380" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="380" pos:column="74">2</lit:literal></expr></argument>, <argument><expr><name pos:line="380" pos:column="77">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="381" pos:column="57">statement</name><op:operator pos:line="381" pos:column="66">.</op:operator><name pos:line="381" pos:column="67">executeUpdate</name></name><argument_list pos:line="381" pos:column="80">()</argument_list></call></expr>;</expr_stmt>					
							<expr_stmt><expr><call><name><name pos:line="382" pos:column="57">Database</name><op:operator pos:line="382" pos:column="65">.</op:operator><name pos:line="382" pos:column="66">commitTransaction</name></name><argument_list pos:line="382" pos:column="83">(<argument><expr><name pos:line="382" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="383" pos:column="57">studentsMarksAdded</name> <op:operator pos:line="383" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="383" pos:column="78">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>	
					}</block> <catch pos:line="385" pos:column="43">catch <parameter_list pos:line="385" pos:column="49">(<param><decl><type><name pos:line="385" pos:column="50">SQLException</name></type> <name pos:line="385" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="385" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="386" pos:column="49">System</name><op:operator pos:line="386" pos:column="55">.</op:operator><name pos:line="386" pos:column="56">out</name><op:operator pos:line="386" pos:column="59">.</op:operator><name pos:line="386" pos:column="60">println</name></name><argument_list pos:line="386" pos:column="67">(<argument><expr><name pos:line="386" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="387" pos:column="49">Database</name><op:operator pos:line="387" pos:column="57">.</op:operator><name pos:line="387" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="387" pos:column="77">(<argument><expr><name pos:line="387" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="390" pos:column="35">catch <parameter_list pos:line="390" pos:column="41">(<param><decl><type><name pos:line="390" pos:column="42">Exception</name></type> <name pos:line="390" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="390" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="391" pos:column="41">System</name><op:operator pos:line="391" pos:column="47">.</op:operator><name pos:line="391" pos:column="48">out</name><op:operator pos:line="391" pos:column="51">.</op:operator><name pos:line="391" pos:column="52">println</name></name><argument_list pos:line="391" pos:column="59">(<argument><expr><name pos:line="391" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				
			}</block></then> <else pos:line="394" pos:column="27">else <block pos:line="394" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="395" pos:column="33">System</name><op:operator pos:line="395" pos:column="39">.</op:operator><name pos:line="395" pos:column="40">out</name><op:operator pos:line="395" pos:column="43">.</op:operator><name pos:line="395" pos:column="44">println</name></name><argument_list pos:line="395" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="395" pos:column="52">"The student "</lit:literal> <op:operator pos:line="395" pos:column="67">+</op:operator> <call><name><name pos:line="395" pos:column="69">student</name><op:operator pos:line="395" pos:column="76">.</op:operator><name pos:line="395" pos:column="77">getName</name></name><argument_list pos:line="395" pos:column="84">()</argument_list></call> <op:operator pos:line="395" pos:column="87">+</op:operator><lit:literal type="string" pos:line="395" pos:column="88">" is not enrolled."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></while>
		<return pos:line="399" pos:column="17">return <expr><name pos:line="399" pos:column="24">studentsMarksAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="402" pos:column="9">// Checks whether a student is enrolled for the course</comment>
	<function><type><specifier pos:line="403" pos:column="9">private</specifier> <name pos:line="403" pos:column="17">boolean</name></type> <name pos:line="403" pos:column="25">isStudentEnrolled</name><parameter_list pos:line="403" pos:column="42">(<param><decl><type><name pos:line="403" pos:column="43">Student</name></type> <name pos:line="403" pos:column="51">student</name></decl></param>, <param><decl><type><name pos:line="403" pos:column="60">int</name></type> <name pos:line="403" pos:column="64">offerID</name></decl></param>)</parameter_list> <block pos:line="403" pos:column="73">{
		<decl_stmt><decl><type><name pos:line="404" pos:column="17">boolean</name></type> <name pos:line="404" pos:column="25">isStudentEnrolled</name> <init pos:line="404" pos:column="43">= <expr><lit:literal type="boolean" pos:line="404" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="406" pos:column="17">ArrayList</name><argument_list pos:line="406" pos:column="26">&lt;<argument><name pos:line="406" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="406" pos:column="42">coursesTaken</name> <init pos:line="406" pos:column="55">= <expr><call><name><name pos:line="406" pos:column="57">StudentEnrollment</name><op:operator pos:line="406" pos:column="74">.</op:operator><name pos:line="406" pos:column="75">getStudentsAllCourses</name></name><argument_list pos:line="406" pos:column="96">(<argument><expr><name pos:line="406" pos:column="97">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="408" pos:column="17">for(<init><decl><type><name pos:line="408" pos:column="21">CourseOffered</name></type> <name pos:line="408" pos:column="35">course</name> <range pos:line="408" pos:column="42">: <expr><name pos:line="408" pos:column="44">coursesTaken</name></expr></range></decl></init>)<block pos:line="408" pos:column="57">{
			<decl_stmt><decl><type><name pos:line="409" pos:column="25">int</name></type> <name pos:line="409" pos:column="29">courseOfferID</name> <init pos:line="409" pos:column="43">= <expr><call><name><name pos:line="409" pos:column="45">course</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">getOfferID</name></name><argument_list pos:line="409" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="410" pos:column="25">if <condition pos:line="410" pos:column="28">( <expr><name pos:line="410" pos:column="30">courseOfferID</name> <op:operator pos:line="410" pos:column="44">==</op:operator> <name pos:line="410" pos:column="47">offerID</name></expr> )</condition><then><block pos:line="410" pos:column="56">{
				<expr_stmt><expr><name pos:line="411" pos:column="33">isStudentEnrolled</name> <op:operator pos:line="411" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="411" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				<break pos:line="412" pos:column="33">break;</break>
			}</block></then></if>
		}</block></for>
		
		<return pos:line="416" pos:column="17">return <expr><name pos:line="416" pos:column="24">isStudentEnrolled</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="419" pos:column="9">// To retrive the total marks of each student in the course.</comment>
	<function><type><specifier pos:line="420" pos:column="9">public</specifier>  <name pos:line="420" pos:column="17">CourseExams</name></type> <name pos:line="420" pos:column="29">getStudentMarks</name><parameter_list pos:line="420" pos:column="44">()</parameter_list><block pos:line="420" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="421" pos:column="17">int</name></type> <name pos:line="421" pos:column="21">offerID</name> <init pos:line="421" pos:column="29">= <expr><call><name><name pos:line="421" pos:column="31">this</name><op:operator pos:line="421" pos:column="35">.</op:operator><name pos:line="421" pos:column="36">getOfferID</name></name><argument_list pos:line="421" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="422" pos:column="17">HashMap</name><argument_list pos:line="422" pos:column="24">&lt;<argument><name pos:line="422" pos:column="25">Student</name></argument>, <argument><name pos:line="422" pos:column="34">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="422" pos:column="42">examMarks</name> <init pos:line="422" pos:column="52">= <expr><op:operator pos:line="422" pos:column="54">new</op:operator> <call><name><name pos:line="422" pos:column="58">HashMap</name><argument_list pos:line="422" pos:column="65">&lt;<argument><name pos:line="422" pos:column="66">Student</name></argument>,<argument><name pos:line="422" pos:column="74">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="422" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="424" pos:column="17">CourseOffered</name></type> <name pos:line="424" pos:column="31">offeredCourse</name> <init pos:line="424" pos:column="45">= <expr><lit:literal type="null" pos:line="424" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="426" pos:column="17">try <block pos:line="426" pos:column="21">{
			<expr_stmt><expr><name pos:line="427" pos:column="25">offeredCourse</name> <op:operator pos:line="427" pos:column="39">=</op:operator> <op:operator pos:line="427" pos:column="41">new</op:operator> <call><name pos:line="427" pos:column="45">CourseOffered</name><argument_list pos:line="427" pos:column="58">(<argument><expr><name pos:line="427" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="428" pos:column="19">catch <parameter_list pos:line="428" pos:column="25">(<param><decl><type><name><name pos:line="428" pos:column="26">Course</name><op:operator pos:line="428" pos:column="32">.</op:operator><name pos:line="428" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="428" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="428" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="429" pos:column="25">e1</name><op:operator pos:line="429" pos:column="27">.</op:operator><name pos:line="429" pos:column="28">printStackTrace</name></name><argument_list pos:line="429" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="430" pos:column="19">catch <parameter_list pos:line="430" pos:column="25">(<param><decl><type><name><name pos:line="430" pos:column="26">CourseOffered</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="430" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="431" pos:column="25">e1</name><op:operator pos:line="431" pos:column="27">.</op:operator><name pos:line="431" pos:column="28">printStackTrace</name></name><argument_list pos:line="431" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="434" pos:column="17">Course</name></type> <name pos:line="434" pos:column="24">course</name> <init pos:line="434" pos:column="31">= <expr><call><name><name pos:line="434" pos:column="33">offeredCourse</name><op:operator pos:line="434" pos:column="46">.</op:operator><name pos:line="434" pos:column="47">getCourse</name></name><argument_list pos:line="434" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="435" pos:column="17">String</name></type> <name pos:line="435" pos:column="24">courseName</name> <init pos:line="435" pos:column="35">= <expr><call><name><name pos:line="435" pos:column="37">course</name><op:operator pos:line="435" pos:column="43">.</op:operator><name pos:line="435" pos:column="44">getCourseName</name></name><argument_list pos:line="435" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="436" pos:column="17">int</name></type> <name pos:line="436" pos:column="21">semID</name> <init pos:line="436" pos:column="27">= <expr><call><name><name pos:line="436" pos:column="29">offeredCourse</name><op:operator pos:line="436" pos:column="42">.</op:operator><name pos:line="436" pos:column="43">getSemesterID</name></name><argument_list pos:line="436" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="438" pos:column="17">String</name></type> <name pos:line="438" pos:column="24">tableName</name> <init pos:line="438" pos:column="34">= <expr><name pos:line="438" pos:column="36">courseName</name> <op:operator pos:line="438" pos:column="47">+</op:operator> <call><name><name pos:line="438" pos:column="49">Integer</name><op:operator pos:line="438" pos:column="56">.</op:operator><name pos:line="438" pos:column="57">toString</name></name><argument_list pos:line="438" pos:column="65">(<argument><expr><name pos:line="438" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="438" pos:column="75">+</op:operator> <call><name><name pos:line="438" pos:column="77">Integer</name><op:operator pos:line="438" pos:column="84">.</op:operator><name pos:line="438" pos:column="85">toString</name></name><argument_list pos:line="438" pos:column="93">(<argument><expr><name pos:line="438" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		
		<decl_stmt><decl><type><name pos:line="441" pos:column="17">int</name></type> <name pos:line="441" pos:column="21">UIN</name> <init pos:line="441" pos:column="25">= <expr><lit:literal type="number" pos:line="441" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="442" pos:column="17">double</name></type> <name pos:line="442" pos:column="24">studentTotalMarks</name> <init pos:line="442" pos:column="42">= <expr><lit:literal type="number" pos:line="442" pos:column="44">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name pos:line="445" pos:column="17">String</name></type> <name pos:line="445" pos:column="24">SQLExamSelect</name> <init pos:line="445" pos:column="38">= <expr><lit:literal type="string" pos:line="445" pos:column="40">"SELECT * FROM %s ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="446" pos:column="17">SQLExamSelect</name> <op:operator pos:line="446" pos:column="31">=</op:operator> <call><name><name pos:line="446" pos:column="33">String</name><op:operator pos:line="446" pos:column="39">.</op:operator><name pos:line="446" pos:column="40">format</name></name><argument_list pos:line="446" pos:column="46">(<argument><expr><name pos:line="446" pos:column="47">SQLExamSelect</name></expr></argument>, <argument><expr><name pos:line="446" pos:column="62">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try pos:line="448" pos:column="17">try <block pos:line="448" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="449" pos:column="25">Connection</name></type> <name pos:line="449" pos:column="36">conn</name> <init pos:line="449" pos:column="41">= <expr><call><name><name pos:line="449" pos:column="43">Database</name><op:operator pos:line="449" pos:column="51">.</op:operator><name pos:line="449" pos:column="52">getConnection</name></name><argument_list pos:line="449" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="450" pos:column="25">try <block pos:line="450" pos:column="29">{
				<if pos:line="451" pos:column="33">if <condition pos:line="451" pos:column="36">(<expr><name pos:line="451" pos:column="37">conn</name> <op:operator pos:line="451" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="451" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="451" pos:column="50"> <block pos:line="451" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="452" pos:column="41">PreparedStatement</name></type> <name pos:line="452" pos:column="59">statement</name> <init pos:line="452" pos:column="69">= <expr><call><name><name pos:line="452" pos:column="71">conn</name><op:operator pos:line="452" pos:column="75">.</op:operator><name pos:line="452" pos:column="76">prepareStatement</name></name><argument_list pos:line="452" pos:column="92">(<argument><expr><name pos:line="452" pos:column="93">SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="453" pos:column="1">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name pos:line="454" pos:column="41">ResultSet</name></type> <name pos:line="454" pos:column="51">rs</name> <init pos:line="454" pos:column="54">=  <expr><call><name><name pos:line="454" pos:column="57">statement</name><op:operator pos:line="454" pos:column="66">.</op:operator><name pos:line="454" pos:column="67">executeQuery</name></name><argument_list pos:line="454" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="455" pos:column="41">//System.out.println(rs.getDouble());</comment>
					<decl_stmt><decl><type><name><name pos:line="456" pos:column="41">ArrayList</name><argument_list pos:line="456" pos:column="50">&lt;<argument><name pos:line="456" pos:column="51">String</name></argument>&gt;</argument_list></name></type> <name pos:line="456" pos:column="59">allExams</name> <init pos:line="456" pos:column="68">= <expr><call><name><name pos:line="456" pos:column="70">this</name><op:operator pos:line="456" pos:column="74">.</op:operator><name pos:line="456" pos:column="75">viewAllExams</name></name><argument_list pos:line="456" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="457" pos:column="41">if<condition pos:line="457" pos:column="43">(<expr><call><name><name pos:line="457" pos:column="44">allExams</name><op:operator pos:line="457" pos:column="52">.</op:operator><name pos:line="457" pos:column="53">isEmpty</name></name><argument_list pos:line="457" pos:column="60">()</argument_list></call></expr>)</condition><then><block pos:line="457" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="458" pos:column="49">System</name><op:operator pos:line="458" pos:column="55">.</op:operator><name pos:line="458" pos:column="56">out</name><op:operator pos:line="458" pos:column="59">.</op:operator><name pos:line="458" pos:column="60">println</name></name><argument_list pos:line="458" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="458" pos:column="68">"No exams entered yet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="459" pos:column="43">else <block pos:line="459" pos:column="48">{
					
						<while pos:line="461" pos:column="49">while<condition pos:line="461" pos:column="54">(<expr><call><name><name pos:line="461" pos:column="55">rs</name><op:operator pos:line="461" pos:column="57">.</op:operator><name pos:line="461" pos:column="58">next</name></name><argument_list pos:line="461" pos:column="62">()</argument_list></call></expr>)</condition><block pos:line="461" pos:column="65">{
							<expr_stmt><expr><call><name><name pos:line="462" pos:column="57">DBAnnotation</name><op:operator pos:line="462" pos:column="69">.</op:operator><name pos:line="462" pos:column="70">annoate</name></name><argument_list pos:line="462" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="462" pos:column="78">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="462" pos:column="84">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="462" pos:column="96">"StudentUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="462" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="463" pos:column="57">UIN</name> <op:operator pos:line="463" pos:column="61">=</op:operator> <call><name><name pos:line="463" pos:column="63">rs</name><op:operator pos:line="463" pos:column="65">.</op:operator><name pos:line="463" pos:column="66">getInt</name></name><argument_list pos:line="463" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="73">"StudentUIN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="464" pos:column="57">studentTotalMarks</name> <op:operator pos:line="464" pos:column="75">=</op:operator> <lit:literal type="number" pos:line="464" pos:column="77">0.0</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="465" pos:column="57">System</name><op:operator pos:line="465" pos:column="63">.</op:operator><name pos:line="465" pos:column="64">out</name><op:operator pos:line="465" pos:column="67">.</op:operator><name pos:line="465" pos:column="68">println</name></name><argument_list pos:line="465" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="465" pos:column="76">"-*-"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<for pos:line="466" pos:column="57">for(<init><decl><type><name pos:line="466" pos:column="61">String</name></type> <name pos:line="466" pos:column="68">examName</name><range pos:line="466" pos:column="76">:<expr><name pos:line="466" pos:column="77">allExams</name></expr></range></decl></init>)<block pos:line="466" pos:column="86">{
								<expr_stmt><expr><call><name><name pos:line="467" pos:column="65">DBAnnotation</name><op:operator pos:line="467" pos:column="77">.</op:operator><name pos:line="467" pos:column="78">annoate</name></name><argument_list pos:line="467" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="467" pos:column="86">"studentTotalMarks"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="467" pos:column="106">"tableName"</lit:literal></expr></argument>,<argument><expr><name pos:line="467" pos:column="118">examName</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="467" pos:column="127">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="468" pos:column="65">studentTotalMarks</name> <op:operator pos:line="468" pos:column="83">=</op:operator> <name pos:line="468" pos:column="85">studentTotalMarks</name> <op:operator pos:line="468" pos:column="103">+</op:operator> <call><name><name pos:line="468" pos:column="105">rs</name><op:operator pos:line="468" pos:column="107">.</op:operator><name pos:line="468" pos:column="108">getDouble</name></name><argument_list pos:line="468" pos:column="117">(<argument><expr><name pos:line="468" pos:column="118">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></for>
							
							<decl_stmt><decl><type><name pos:line="471" pos:column="57">Student</name></type> <name pos:line="471" pos:column="65">student</name> <init pos:line="471" pos:column="73">= <expr><op:operator pos:line="471" pos:column="75">new</op:operator> <call><name pos:line="471" pos:column="79">Student</name><argument_list pos:line="471" pos:column="86">(<argument><expr><name pos:line="471" pos:column="87">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="472" pos:column="57">examMarks</name><op:operator pos:line="472" pos:column="66">.</op:operator><name pos:line="472" pos:column="67">put</name></name><argument_list pos:line="472" pos:column="70">(<argument><expr><name pos:line="472" pos:column="71">student</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="80">studentTotalMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block></while>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch pos:line="477" pos:column="27">catch <parameter_list pos:line="477" pos:column="33">(<param><decl><type><name pos:line="477" pos:column="34">SQLException</name></type> <name pos:line="477" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="477" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="478" pos:column="33">System</name><op:operator pos:line="478" pos:column="39">.</op:operator><name pos:line="478" pos:column="40">out</name><op:operator pos:line="478" pos:column="43">.</op:operator><name pos:line="478" pos:column="44">println</name></name><argument_list pos:line="478" pos:column="51">(<argument><expr><name pos:line="478" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="481" pos:column="19">catch <parameter_list pos:line="481" pos:column="25">(<param><decl><type><name pos:line="481" pos:column="26">Exception</name></type> <name pos:line="481" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="481" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="482" pos:column="25">System</name><op:operator pos:line="482" pos:column="31">.</op:operator><name pos:line="482" pos:column="32">out</name><op:operator pos:line="482" pos:column="35">.</op:operator><name pos:line="482" pos:column="36">println</name></name><argument_list pos:line="482" pos:column="43">(<argument><expr><name pos:line="482" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<expr_stmt><expr><call><name><name pos:line="485" pos:column="17">this</name><op:operator pos:line="485" pos:column="21">.</op:operator><name pos:line="485" pos:column="22">setExamMarks</name></name><argument_list pos:line="485" pos:column="34">(<argument><expr><name pos:line="485" pos:column="35">examMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="486" pos:column="17">// CourseExams classExamMarks = new CourseExams(offerID,examName,examMarks);</comment>
		<comment type="line" pos:line="487" pos:column="17">// return CourseExams;</comment>
		<return pos:line="488" pos:column="17">return <expr><name pos:line="488" pos:column="24">this</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="491" pos:column="9">// To retrieve marks of one student for all the exams</comment>
	<function><type><specifier pos:line="492" pos:column="9">public</specifier> <specifier pos:line="492" pos:column="16">static</specifier> <name><name pos:line="492" pos:column="23">HashMap</name><argument_list pos:line="492" pos:column="30">&lt;<argument><name pos:line="492" pos:column="31">String</name></argument>,<argument><name pos:line="492" pos:column="38">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="492" pos:column="46">getStudentMarks</name><parameter_list pos:line="492" pos:column="61">(<param><decl><type><name pos:line="492" pos:column="62">CourseOffered</name></type> <name pos:line="492" pos:column="76">offeredCourse</name></decl></param>, <param><decl><type><name pos:line="492" pos:column="91">Student</name></type> <name pos:line="492" pos:column="99">student</name></decl></param>)</parameter_list><block pos:line="492" pos:column="107">{
		<decl_stmt><decl><type><name><name pos:line="493" pos:column="17">HashMap</name><argument_list pos:line="493" pos:column="24">&lt;<argument><name pos:line="493" pos:column="25">String</name></argument>,<argument><name pos:line="493" pos:column="32">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="493" pos:column="40">studentExamAndMarks</name> <init pos:line="493" pos:column="60">= <expr><op:operator pos:line="493" pos:column="62">new</op:operator> <call><name><name pos:line="493" pos:column="66">HashMap</name><argument_list pos:line="493" pos:column="73">&lt;<argument><name pos:line="493" pos:column="74">String</name></argument>,<argument><name pos:line="493" pos:column="81">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="493" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="494" pos:column="17">int</name></type> <name pos:line="494" pos:column="21">offerID</name> <init pos:line="494" pos:column="29">= <expr><call><name><name pos:line="494" pos:column="31">offeredCourse</name><op:operator pos:line="494" pos:column="44">.</op:operator><name pos:line="494" pos:column="45">getOfferID</name></name><argument_list pos:line="494" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="495" pos:column="17">Course</name></type> <name pos:line="495" pos:column="24">course</name> <init pos:line="495" pos:column="31">= <expr><call><name><name pos:line="495" pos:column="33">offeredCourse</name><op:operator pos:line="495" pos:column="46">.</op:operator><name pos:line="495" pos:column="47">getCourse</name></name><argument_list pos:line="495" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="496" pos:column="17">String</name></type> <name pos:line="496" pos:column="24">courseName</name> <init pos:line="496" pos:column="35">= <expr><call><name><name pos:line="496" pos:column="37">course</name><op:operator pos:line="496" pos:column="43">.</op:operator><name pos:line="496" pos:column="44">getCourseName</name></name><argument_list pos:line="496" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="497" pos:column="17">int</name></type> <name pos:line="497" pos:column="21">semID</name> <init pos:line="497" pos:column="27">= <expr><call><name><name pos:line="497" pos:column="29">offeredCourse</name><op:operator pos:line="497" pos:column="42">.</op:operator><name pos:line="497" pos:column="43">getSemesterID</name></name><argument_list pos:line="497" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="499" pos:column="17">String</name></type> <name pos:line="499" pos:column="24">tableName</name> <init pos:line="499" pos:column="34">= <expr><name pos:line="499" pos:column="36">courseName</name> <op:operator pos:line="499" pos:column="47">+</op:operator> <call><name><name pos:line="499" pos:column="49">Integer</name><op:operator pos:line="499" pos:column="56">.</op:operator><name pos:line="499" pos:column="57">toString</name></name><argument_list pos:line="499" pos:column="65">(<argument><expr><name pos:line="499" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="499" pos:column="75">+</op:operator> <call><name><name pos:line="499" pos:column="77">Integer</name><op:operator pos:line="499" pos:column="84">.</op:operator><name pos:line="499" pos:column="85">toString</name></name><argument_list pos:line="499" pos:column="93">(<argument><expr><name pos:line="499" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
		<decl_stmt><decl><type><name pos:line="501" pos:column="17">int</name></type> <name pos:line="501" pos:column="21">UIN</name> <init pos:line="501" pos:column="25">= <expr><call><name><name pos:line="501" pos:column="27">student</name><op:operator pos:line="501" pos:column="34">.</op:operator><name pos:line="501" pos:column="35">getUIN</name></name><argument_list pos:line="501" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="502" pos:column="17">double</name></type> <name pos:line="502" pos:column="24">studentMarks</name> <init pos:line="502" pos:column="37">= <expr><lit:literal type="number" pos:line="502" pos:column="39">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="504" pos:column="17">CourseExams</name></type> <name pos:line="504" pos:column="29">exam</name> <init pos:line="504" pos:column="34">= <expr><op:operator pos:line="504" pos:column="36">new</op:operator> <call><name pos:line="504" pos:column="40">CourseExams</name><argument_list pos:line="504" pos:column="51">(<argument><expr><name pos:line="504" pos:column="52">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="505" pos:column="17">ArrayList</name><argument_list pos:line="505" pos:column="26">&lt;<argument><name pos:line="505" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="505" pos:column="35">allExams</name> <init pos:line="505" pos:column="44">= <expr><call><name><name pos:line="505" pos:column="46">exam</name><op:operator pos:line="505" pos:column="50">.</op:operator><name pos:line="505" pos:column="51">viewAllExams</name></name><argument_list pos:line="505" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="506" pos:column="17">if<condition pos:line="506" pos:column="19">(<expr><call><name><name pos:line="506" pos:column="20">allExams</name><op:operator pos:line="506" pos:column="28">.</op:operator><name pos:line="506" pos:column="29">isEmpty</name></name><argument_list pos:line="506" pos:column="36">()</argument_list></call></expr>)</condition><then><block pos:line="506" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="507" pos:column="25">System</name><op:operator pos:line="507" pos:column="31">.</op:operator><name pos:line="507" pos:column="32">out</name><op:operator pos:line="507" pos:column="35">.</op:operator><name pos:line="507" pos:column="36">println</name></name><argument_list pos:line="507" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="507" pos:column="44">"No exams entered yet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="508" pos:column="19">else <block pos:line="508" pos:column="24">{
			<for pos:line="509" pos:column="25">for(<init><decl><type><name pos:line="509" pos:column="29">String</name></type> <name pos:line="509" pos:column="36">oneExam</name><range pos:line="509" pos:column="43">: <expr><name pos:line="509" pos:column="45">allExams</name></expr></range></decl></init>)<block pos:line="509" pos:column="54">{
				
				
				<decl_stmt><decl><type><name pos:line="512" pos:column="33">String</name></type> <name pos:line="512" pos:column="40">SQLExamSelect</name> <init pos:line="512" pos:column="54">= <expr><lit:literal type="string" pos:line="512" pos:column="56">"SELECT %s FROM %s WHERE StudentUIN = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="513" pos:column="33">SQLExamSelect</name> <op:operator pos:line="513" pos:column="47">=</op:operator> <call><name><name pos:line="513" pos:column="49">String</name><op:operator pos:line="513" pos:column="55">.</op:operator><name pos:line="513" pos:column="56">format</name></name><argument_list pos:line="513" pos:column="62">(<argument><expr><name pos:line="513" pos:column="63">SQLExamSelect</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="78">oneExam</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="87">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try pos:line="515" pos:column="33">try <block pos:line="515" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="516" pos:column="41">Connection</name></type> <name pos:line="516" pos:column="52">conn</name> <init pos:line="516" pos:column="57">= <expr><call><name><name pos:line="516" pos:column="59">Database</name><op:operator pos:line="516" pos:column="67">.</op:operator><name pos:line="516" pos:column="68">getConnection</name></name><argument_list pos:line="516" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="517" pos:column="41">try <block pos:line="517" pos:column="45">{
						<if pos:line="518" pos:column="49">if <condition pos:line="518" pos:column="52">(<expr><name pos:line="518" pos:column="53">conn</name> <op:operator pos:line="518" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="518" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="518" pos:column="66"> <block pos:line="518" pos:column="67">{
							<decl_stmt><decl><type><name pos:line="519" pos:column="57">PreparedStatement</name></type> <name pos:line="519" pos:column="75">statement</name> <init pos:line="519" pos:column="85">= <expr><call><name><name pos:line="519" pos:column="87">conn</name><op:operator pos:line="519" pos:column="91">.</op:operator><name pos:line="519" pos:column="92">prepareStatement</name></name><argument_list pos:line="519" pos:column="108">(<argument><expr><name pos:line="519" pos:column="109">SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line" pos:line="520" pos:column="57">// statement.setString(1, oneExam);</comment>
							<expr_stmt><expr><call><name><name pos:line="521" pos:column="57">DBAnnotation</name><op:operator pos:line="521" pos:column="69">.</op:operator><name pos:line="521" pos:column="70">annoate</name></name><argument_list pos:line="521" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="521" pos:column="78">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="521" pos:column="84">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="521" pos:column="96">"StudentUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="521" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="522" pos:column="57">statement</name><op:operator pos:line="522" pos:column="66">.</op:operator><name pos:line="522" pos:column="67">setInt</name></name><argument_list pos:line="522" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="522" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="522" pos:column="77">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="523" pos:column="57">ResultSet</name></type> <name pos:line="523" pos:column="67">rs</name> <init pos:line="523" pos:column="70">=  <expr><call><name><name pos:line="523" pos:column="73">statement</name><op:operator pos:line="523" pos:column="82">.</op:operator><name pos:line="523" pos:column="83">executeQuery</name></name><argument_list pos:line="523" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line" pos:line="524" pos:column="57">//System.out.println(rs.getDouble());</comment>
								<if pos:line="525" pos:column="65">if<condition pos:line="525" pos:column="67">(<expr><call><name><name pos:line="525" pos:column="68">rs</name><op:operator pos:line="525" pos:column="70">.</op:operator><name pos:line="525" pos:column="71">next</name></name><argument_list pos:line="525" pos:column="75">()</argument_list></call></expr>)</condition><then><block pos:line="525" pos:column="78">{
									<expr_stmt><expr><call><name><name pos:line="526" pos:column="73">DBAnnotation</name><op:operator pos:line="526" pos:column="85">.</op:operator><name pos:line="526" pos:column="86">annoate</name></name><argument_list pos:line="526" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="94">"studentMarks"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="526" pos:column="109">"tableName"</lit:literal></expr></argument>,<argument><expr><name pos:line="526" pos:column="121">oneExam</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="526" pos:column="129">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><name pos:line="527" pos:column="73">studentMarks</name> <op:operator pos:line="527" pos:column="86">=</op:operator> <call><name><name pos:line="527" pos:column="88">rs</name><op:operator pos:line="527" pos:column="90">.</op:operator><name pos:line="527" pos:column="91">getDouble</name></name><argument_list pos:line="527" pos:column="100">(<argument><expr><name pos:line="527" pos:column="101">oneExam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name><name pos:line="528" pos:column="73">studentExamAndMarks</name><op:operator pos:line="528" pos:column="92">.</op:operator><name pos:line="528" pos:column="93">put</name></name><argument_list pos:line="528" pos:column="96">(<argument><expr><name pos:line="528" pos:column="97">oneExam</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="106">studentMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
							}</block></then></if>
							
					}</block> <catch pos:line="532" pos:column="43">catch <parameter_list pos:line="532" pos:column="49">(<param><decl><type><name pos:line="532" pos:column="50">SQLException</name></type> <name pos:line="532" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="532" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="533" pos:column="49">System</name><op:operator pos:line="533" pos:column="55">.</op:operator><name pos:line="533" pos:column="56">out</name><op:operator pos:line="533" pos:column="59">.</op:operator><name pos:line="533" pos:column="60">println</name></name><argument_list pos:line="533" pos:column="67">(<argument><expr><name pos:line="533" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="536" pos:column="35">catch <parameter_list pos:line="536" pos:column="41">(<param><decl><type><name pos:line="536" pos:column="42">Exception</name></type> <name pos:line="536" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="536" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="537" pos:column="41">System</name><op:operator pos:line="537" pos:column="47">.</op:operator><name pos:line="537" pos:column="48">out</name><op:operator pos:line="537" pos:column="51">.</op:operator><name pos:line="537" pos:column="52">println</name></name><argument_list pos:line="537" pos:column="59">(<argument><expr><name pos:line="537" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block></for>
		}</block></else></if>

		<return pos:line="543" pos:column="17">return <expr><name pos:line="543" pos:column="24">studentExamAndMarks</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="546" pos:column="9">// To retrieve marks of each student for the specified exam.</comment>
	<function><type><specifier pos:line="547" pos:column="9">public</specifier> <specifier pos:line="547" pos:column="16">static</specifier> <name><name pos:line="547" pos:column="23">HashMap</name><argument_list pos:line="547" pos:column="30">&lt;<argument><name pos:line="547" pos:column="31">Integer</name></argument>,<argument><name pos:line="547" pos:column="39">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="547" pos:column="47">getStudents</name><parameter_list pos:line="547" pos:column="58">(<param><decl><type><name pos:line="547" pos:column="59">CourseOffered</name></type> <name pos:line="547" pos:column="73">offeredCourse</name></decl></param>, <param><decl><type><name pos:line="547" pos:column="88">String</name></type> <name pos:line="547" pos:column="95">examName</name></decl></param>)</parameter_list><block pos:line="547" pos:column="104">{
		<decl_stmt><decl><type><name><name pos:line="548" pos:column="17">HashMap</name><argument_list pos:line="548" pos:column="24">&lt;<argument><name pos:line="548" pos:column="25">Integer</name></argument>,<argument><name pos:line="548" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="548" pos:column="41">studentsMarks</name> <init pos:line="548" pos:column="55">= <expr><op:operator pos:line="548" pos:column="57">new</op:operator> <call><name><name pos:line="548" pos:column="61">HashMap</name><argument_list pos:line="548" pos:column="68">&lt;<argument><name pos:line="548" pos:column="69">Integer</name></argument>,<argument><name pos:line="548" pos:column="77">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="548" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="550" pos:column="17">int</name></type> <name pos:line="550" pos:column="21">offerID</name> <init pos:line="550" pos:column="29">= <expr><call><name><name pos:line="550" pos:column="31">offeredCourse</name><op:operator pos:line="550" pos:column="44">.</op:operator><name pos:line="550" pos:column="45">getOfferID</name></name><argument_list pos:line="550" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="551" pos:column="17">Course</name></type> <name pos:line="551" pos:column="24">course</name> <init pos:line="551" pos:column="31">= <expr><call><name><name pos:line="551" pos:column="33">offeredCourse</name><op:operator pos:line="551" pos:column="46">.</op:operator><name pos:line="551" pos:column="47">getCourse</name></name><argument_list pos:line="551" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="552" pos:column="17">String</name></type> <name pos:line="552" pos:column="24">courseName</name> <init pos:line="552" pos:column="35">= <expr><call><name><name pos:line="552" pos:column="37">course</name><op:operator pos:line="552" pos:column="43">.</op:operator><name pos:line="552" pos:column="44">getCourseName</name></name><argument_list pos:line="552" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="553" pos:column="17">int</name></type> <name pos:line="553" pos:column="21">semID</name> <init pos:line="553" pos:column="27">= <expr><call><name><name pos:line="553" pos:column="29">offeredCourse</name><op:operator pos:line="553" pos:column="42">.</op:operator><name pos:line="553" pos:column="43">getSemesterID</name></name><argument_list pos:line="553" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="555" pos:column="17">String</name></type> <name pos:line="555" pos:column="24">tableName</name> <init pos:line="555" pos:column="34">= <expr><name pos:line="555" pos:column="36">courseName</name> <op:operator pos:line="555" pos:column="47">+</op:operator> <call><name><name pos:line="555" pos:column="49">Integer</name><op:operator pos:line="555" pos:column="56">.</op:operator><name pos:line="555" pos:column="57">toString</name></name><argument_list pos:line="555" pos:column="65">(<argument><expr><name pos:line="555" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="555" pos:column="75">+</op:operator> <call><name><name pos:line="555" pos:column="77">Integer</name><op:operator pos:line="555" pos:column="84">.</op:operator><name pos:line="555" pos:column="85">toString</name></name><argument_list pos:line="555" pos:column="93">(<argument><expr><name pos:line="555" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
		<decl_stmt><decl><type><name pos:line="557" pos:column="17">boolean</name></type> <name pos:line="557" pos:column="25">isExamPresent</name> <init pos:line="557" pos:column="39">= <expr><call><name pos:line="557" pos:column="41">isExamPresent</name><argument_list pos:line="557" pos:column="54">(<argument><expr><name pos:line="557" pos:column="55">tableName</name></expr></argument>, <argument><expr><name pos:line="557" pos:column="66">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="558" pos:column="25">if<condition pos:line="558" pos:column="27">(<expr><name pos:line="558" pos:column="28">isExamPresent</name> <op:operator pos:line="558" pos:column="42">==</op:operator> <lit:literal type="boolean" pos:line="558" pos:column="45">false</lit:literal></expr>)</condition><then><block pos:line="558" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="559" pos:column="33">System</name><op:operator pos:line="559" pos:column="39">.</op:operator><name pos:line="559" pos:column="40">out</name><op:operator pos:line="559" pos:column="43">.</op:operator><name pos:line="559" pos:column="44">println</name></name><argument_list pos:line="559" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="52">"Exam Absent"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="560" pos:column="27">else <block pos:line="560" pos:column="32">{
<comment type="line" pos:line="561" pos:column="1">//				@DBAnnotation (</comment>
<comment type="line" pos:line="562" pos:column="1">//						variable = {"examName"},  </comment>
<comment type="line" pos:line="563" pos:column="1">//						table = "tableName", </comment>
<comment type="line" pos:line="564" pos:column="1">//						column = {"ExamName"}, </comment>
<comment type="line" pos:line="565" pos:column="1">//						isSource = true)</comment>
				<decl_stmt><decl><type><name pos:line="566" pos:column="33">String</name></type> <name pos:line="566" pos:column="40">SQLExamSelect</name> <init pos:line="566" pos:column="54">= <expr><lit:literal type="string" pos:line="566" pos:column="56">"SELECT StudentUIN, %s FROM %s;"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="567" pos:column="33">SQLExamSelect</name> <op:operator pos:line="567" pos:column="47">=</op:operator> <call><name><name pos:line="567" pos:column="49">String</name><op:operator pos:line="567" pos:column="55">.</op:operator><name pos:line="567" pos:column="56">format</name></name><argument_list pos:line="567" pos:column="62">(<argument><expr><name pos:line="567" pos:column="63">SQLExamSelect</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="78">examName</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="88">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try pos:line="569" pos:column="33">try <block pos:line="569" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="570" pos:column="41">Connection</name></type> <name pos:line="570" pos:column="52">conn</name> <init pos:line="570" pos:column="57">= <expr><call><name><name pos:line="570" pos:column="59">Database</name><op:operator pos:line="570" pos:column="67">.</op:operator><name pos:line="570" pos:column="68">getConnection</name></name><argument_list pos:line="570" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="571" pos:column="41">try <block pos:line="571" pos:column="45">{
						<if pos:line="572" pos:column="49">if <condition pos:line="572" pos:column="52">(<expr><name pos:line="572" pos:column="53">conn</name> <op:operator pos:line="572" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="572" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="572" pos:column="66"> <block pos:line="572" pos:column="67">{
							<decl_stmt><decl><type><name pos:line="573" pos:column="57">PreparedStatement</name></type> <name pos:line="573" pos:column="75">statement</name> <init pos:line="573" pos:column="85">= <expr><call><name><name pos:line="573" pos:column="87">conn</name><op:operator pos:line="573" pos:column="91">.</op:operator><name pos:line="573" pos:column="92">prepareStatement</name></name><argument_list pos:line="573" pos:column="108">(<argument><expr><name pos:line="573" pos:column="109">SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="574" pos:column="1">//							statement.setInt(1, UIN);</comment>
<comment type="line" pos:line="575" pos:column="1">//							statement.setDouble(1, examName);</comment>
							
							<decl_stmt><decl><type><name pos:line="577" pos:column="57">ResultSet</name></type> <name pos:line="577" pos:column="67">rs</name> <init pos:line="577" pos:column="70">=  <expr><call><name><name pos:line="577" pos:column="73">statement</name><op:operator pos:line="577" pos:column="82">.</op:operator><name pos:line="577" pos:column="83">executeQuery</name></name><argument_list pos:line="577" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line" pos:line="578" pos:column="57">//System.out.println(rs.getDouble());</comment>
								<while pos:line="579" pos:column="65">while<condition pos:line="579" pos:column="70">(<expr><call><name><name pos:line="579" pos:column="71">rs</name><op:operator pos:line="579" pos:column="73">.</op:operator><name pos:line="579" pos:column="74">next</name></name><argument_list pos:line="579" pos:column="78">()</argument_list></call></expr>)</condition><block pos:line="579" pos:column="81">{
									<expr_stmt><expr><call><name><name pos:line="580" pos:column="73">DBAnnotation</name><op:operator pos:line="580" pos:column="85">.</op:operator><name pos:line="580" pos:column="86">annoate</name></name><argument_list pos:line="580" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="580" pos:column="94">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="580" pos:column="100">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="580" pos:column="112">"StudentUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="580" pos:column="125">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<decl_stmt><decl><type><name pos:line="581" pos:column="73">int</name></type> <name pos:line="581" pos:column="77">UIN</name> <init pos:line="581" pos:column="81">= <expr><call><name><name pos:line="581" pos:column="83">rs</name><op:operator pos:line="581" pos:column="85">.</op:operator><name pos:line="581" pos:column="86">getInt</name></name><argument_list pos:line="581" pos:column="92">(<argument><expr><lit:literal type="number" pos:line="581" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name pos:line="582" pos:column="73">DBAnnotation</name><op:operator pos:line="582" pos:column="85">.</op:operator><name pos:line="582" pos:column="86">annoate</name></name><argument_list pos:line="582" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="582" pos:column="94">"marks"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="582" pos:column="102">"tableName"</lit:literal></expr></argument>,<argument><expr><name pos:line="582" pos:column="114">examName</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="582" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<decl_stmt><decl><type><name pos:line="583" pos:column="73">double</name></type> <name pos:line="583" pos:column="80">marks</name> <init pos:line="583" pos:column="86">= <expr><call><name><name pos:line="583" pos:column="88">rs</name><op:operator pos:line="583" pos:column="90">.</op:operator><name pos:line="583" pos:column="91">getDouble</name></name><argument_list pos:line="583" pos:column="100">(<argument><expr><lit:literal type="number" pos:line="583" pos:column="101">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
									<expr_stmt><expr><call><name><name pos:line="584" pos:column="73">studentsMarks</name><op:operator pos:line="584" pos:column="86">.</op:operator><name pos:line="584" pos:column="87">put</name></name><argument_list pos:line="584" pos:column="90">(<argument><expr><name pos:line="584" pos:column="91">UIN</name></expr></argument>, <argument><expr><name pos:line="584" pos:column="96">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></while>
							}</block></then></if>
							
					}</block> <catch pos:line="588" pos:column="43">catch <parameter_list pos:line="588" pos:column="49">(<param><decl><type><name pos:line="588" pos:column="50">SQLException</name></type> <name pos:line="588" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="588" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="589" pos:column="49">System</name><op:operator pos:line="589" pos:column="55">.</op:operator><name pos:line="589" pos:column="56">out</name><op:operator pos:line="589" pos:column="59">.</op:operator><name pos:line="589" pos:column="60">println</name></name><argument_list pos:line="589" pos:column="67">(<argument><expr><name pos:line="589" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="592" pos:column="35">catch <parameter_list pos:line="592" pos:column="41">(<param><decl><type><name pos:line="592" pos:column="42">Exception</name></type> <name pos:line="592" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="592" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="593" pos:column="41">System</name><op:operator pos:line="593" pos:column="47">.</op:operator><name pos:line="593" pos:column="48">out</name><op:operator pos:line="593" pos:column="51">.</op:operator><name pos:line="593" pos:column="52">println</name></name><argument_list pos:line="593" pos:column="59">(<argument><expr><name pos:line="593" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block></else></if>

		<return pos:line="598" pos:column="17">return <expr><name pos:line="598" pos:column="24">studentsMarks</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="601" pos:column="9">// To modify the marks of a student for a particular exam.</comment>
 	<function><type><specifier pos:line="602" pos:column="9">public</specifier> <name pos:line="602" pos:column="16">boolean</name></type> <name pos:line="602" pos:column="24">modifyStudentMarks</name><parameter_list pos:line="602" pos:column="42">()</parameter_list><block pos:line="602" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="603" pos:column="17">boolean</name></type> <name pos:line="603" pos:column="25">studentsMarksModified</name> <init pos:line="603" pos:column="47">= <expr><lit:literal type="boolean" pos:line="603" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="605" pos:column="17">int</name></type> <name pos:line="605" pos:column="21">offerID</name> <init pos:line="605" pos:column="29">= <expr><call><name><name pos:line="605" pos:column="31">this</name><op:operator pos:line="605" pos:column="35">.</op:operator><name pos:line="605" pos:column="36">getOfferID</name></name><argument_list pos:line="605" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="606" pos:column="17">String</name></type> <name pos:line="606" pos:column="24">examName</name> <init pos:line="606" pos:column="33">= <expr><call><name><name pos:line="606" pos:column="35">this</name><op:operator pos:line="606" pos:column="39">.</op:operator><name pos:line="606" pos:column="40">getExamName</name></name><argument_list pos:line="606" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="607" pos:column="17">HashMap</name><argument_list pos:line="607" pos:column="24">&lt;<argument><name pos:line="607" pos:column="25">Student</name></argument>,<argument><name pos:line="607" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="607" pos:column="41">examMarks</name> <init pos:line="607" pos:column="51">= <expr><call><name><name pos:line="607" pos:column="53">this</name><op:operator pos:line="607" pos:column="57">.</op:operator><name pos:line="607" pos:column="58">getExamMarks</name></name><argument_list pos:line="607" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="609" pos:column="17">CourseOffered</name></type> <name pos:line="609" pos:column="31">offeredCourse</name> <init pos:line="609" pos:column="45">= <expr><lit:literal type="null" pos:line="609" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="611" pos:column="17">try <block pos:line="611" pos:column="21">{
			<expr_stmt><expr><name pos:line="612" pos:column="25">offeredCourse</name> <op:operator pos:line="612" pos:column="39">=</op:operator> <op:operator pos:line="612" pos:column="41">new</op:operator> <call><name pos:line="612" pos:column="45">CourseOffered</name><argument_list pos:line="612" pos:column="58">(<argument><expr><name pos:line="612" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="613" pos:column="19">catch <parameter_list pos:line="613" pos:column="25">(<param><decl><type><name><name pos:line="613" pos:column="26">Course</name><op:operator pos:line="613" pos:column="32">.</op:operator><name pos:line="613" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="613" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="613" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="614" pos:column="25">e1</name><op:operator pos:line="614" pos:column="27">.</op:operator><name pos:line="614" pos:column="28">printStackTrace</name></name><argument_list pos:line="614" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="615" pos:column="19">catch <parameter_list pos:line="615" pos:column="25">(<param><decl><type><name><name pos:line="615" pos:column="26">CourseOffered</name><op:operator pos:line="615" pos:column="39">.</op:operator><name pos:line="615" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="615" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="615" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="616" pos:column="25">e1</name><op:operator pos:line="616" pos:column="27">.</op:operator><name pos:line="616" pos:column="28">printStackTrace</name></name><argument_list pos:line="616" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="619" pos:column="17">Course</name></type> <name pos:line="619" pos:column="24">course</name> <init pos:line="619" pos:column="31">= <expr><call><name><name pos:line="619" pos:column="33">offeredCourse</name><op:operator pos:line="619" pos:column="46">.</op:operator><name pos:line="619" pos:column="47">getCourse</name></name><argument_list pos:line="619" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="620" pos:column="17">String</name></type> <name pos:line="620" pos:column="24">courseName</name> <init pos:line="620" pos:column="35">= <expr><call><name><name pos:line="620" pos:column="37">course</name><op:operator pos:line="620" pos:column="43">.</op:operator><name pos:line="620" pos:column="44">getCourseName</name></name><argument_list pos:line="620" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="621" pos:column="17">int</name></type> <name pos:line="621" pos:column="21">semID</name> <init pos:line="621" pos:column="27">= <expr><call><name><name pos:line="621" pos:column="29">offeredCourse</name><op:operator pos:line="621" pos:column="42">.</op:operator><name pos:line="621" pos:column="43">getSemesterID</name></name><argument_list pos:line="621" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="623" pos:column="17">String</name></type> <name pos:line="623" pos:column="24">tableName</name> <init pos:line="623" pos:column="34">= <expr><name pos:line="623" pos:column="36">courseName</name> <op:operator pos:line="623" pos:column="47">+</op:operator> <call><name><name pos:line="623" pos:column="49">Integer</name><op:operator pos:line="623" pos:column="56">.</op:operator><name pos:line="623" pos:column="57">toString</name></name><argument_list pos:line="623" pos:column="65">(<argument><expr><name pos:line="623" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="623" pos:column="75">+</op:operator> <call><name><name pos:line="623" pos:column="77">Integer</name><op:operator pos:line="623" pos:column="84">.</op:operator><name pos:line="623" pos:column="85">toString</name></name><argument_list pos:line="623" pos:column="93">(<argument><expr><name pos:line="623" pos:column="94">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	
		<decl_stmt><decl><type><name><name pos:line="625" pos:column="17">Set</name><argument_list pos:line="625" pos:column="20">&lt;<argument><name pos:line="625" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="625" pos:column="30">keys</name> <init pos:line="625" pos:column="35">= <expr><call><name><name pos:line="625" pos:column="37">examMarks</name><op:operator pos:line="625" pos:column="46">.</op:operator><name pos:line="625" pos:column="47">keySet</name></name><argument_list pos:line="625" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="626" pos:column="17">Iterator</name><argument_list pos:line="626" pos:column="25">&lt;<argument><name pos:line="626" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="626" pos:column="35">keyIterator</name> <init pos:line="626" pos:column="47">= <expr><call><name><name pos:line="626" pos:column="49">keys</name><op:operator pos:line="626" pos:column="53">.</op:operator><name pos:line="626" pos:column="54">iterator</name></name><argument_list pos:line="626" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="627" pos:column="17">while <condition pos:line="627" pos:column="23">(<expr><call><name><name pos:line="627" pos:column="24">keyIterator</name><op:operator pos:line="627" pos:column="35">.</op:operator><name pos:line="627" pos:column="36">hasNext</name></name><argument_list pos:line="627" pos:column="43">()</argument_list></call></expr>)</condition> <block pos:line="627" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="628" pos:column="25">Student</name></type> <name pos:line="628" pos:column="33">student</name> <init pos:line="628" pos:column="41">= <expr><call><name><name pos:line="628" pos:column="43">keyIterator</name><op:operator pos:line="628" pos:column="54">.</op:operator><name pos:line="628" pos:column="55">next</name></name><argument_list pos:line="628" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="629" pos:column="25">int</name></type> <name pos:line="629" pos:column="29">UIN</name> <init pos:line="629" pos:column="33">= <expr><call><name><name pos:line="629" pos:column="35">student</name><op:operator pos:line="629" pos:column="42">.</op:operator><name pos:line="629" pos:column="43">getUIN</name></name><argument_list pos:line="629" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="631" pos:column="25">double</name></type> <name pos:line="631" pos:column="32">marks</name> <init pos:line="631" pos:column="38">= <expr><op:operator pos:line="631" pos:column="40">(</op:operator><name pos:line="631" pos:column="41">double</name><op:operator pos:line="631" pos:column="47">)</op:operator> <call><name><name pos:line="631" pos:column="49">examMarks</name><op:operator pos:line="631" pos:column="58">.</op:operator><name pos:line="631" pos:column="59">get</name></name><argument_list pos:line="631" pos:column="62">(<argument><expr><name pos:line="631" pos:column="63">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			
			<comment type="line" pos:line="633" pos:column="25">// Step 1: Check if the student is enrolled for this course</comment>
			<decl_stmt><decl><type><name pos:line="634" pos:column="25">boolean</name></type> <name pos:line="634" pos:column="33">isStudentEnrolled</name> <init pos:line="634" pos:column="51">= <expr><call><name pos:line="634" pos:column="53">isStudentEnrolled</name><argument_list pos:line="634" pos:column="70">(<argument><expr><name pos:line="634" pos:column="71">student</name></expr></argument>,<argument><expr><name pos:line="634" pos:column="79">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			
			<comment type="line" pos:line="637" pos:column="25">// If enrolled, add his marks</comment>
			<if pos:line="638" pos:column="25">if <condition pos:line="638" pos:column="28">(<expr><name pos:line="638" pos:column="29">isStudentEnrolled</name> <op:operator pos:line="638" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="638" pos:column="50">true</lit:literal></expr>)</condition><then><block pos:line="638" pos:column="55">{
				
<comment type="line" pos:line="640" pos:column="1">//				@DBAnnotation (</comment>
<comment type="line" pos:line="641" pos:column="1">//						variable = {"marks","UIN"},  </comment>
<comment type="line" pos:line="642" pos:column="1">//						table = "tableName", </comment>
<comment type="line" pos:line="643" pos:column="1">//						column = {"ExamName","StudentUIN"}, </comment>
<comment type="line" pos:line="644" pos:column="1">//						isSource = false)</comment>
				<decl_stmt><decl><type><name pos:line="645" pos:column="33">String</name></type> <name pos:line="645" pos:column="40">SQLExamUpdate</name> <init pos:line="645" pos:column="54">= <expr><lit:literal type="string" pos:line="645" pos:column="56">"UPDATE %s SET %s = ? WHERE `StudentUIN`=?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="646" pos:column="33">SQLExamUpdate</name> <op:operator pos:line="646" pos:column="47">=</op:operator> <call><name><name pos:line="646" pos:column="49">String</name><op:operator pos:line="646" pos:column="55">.</op:operator><name pos:line="646" pos:column="56">format</name></name><argument_list pos:line="646" pos:column="62">(<argument><expr><name pos:line="646" pos:column="63">SQLExamUpdate</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="78">tableName</name></expr></argument>,<argument><expr><name pos:line="646" pos:column="88">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try pos:line="647" pos:column="33">try <block pos:line="647" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="648" pos:column="41">Connection</name></type> <name pos:line="648" pos:column="52">conn</name> <init pos:line="648" pos:column="57">= <expr><call><name><name pos:line="648" pos:column="59">Database</name><op:operator pos:line="648" pos:column="67">.</op:operator><name pos:line="648" pos:column="68">getConnection</name></name><argument_list pos:line="648" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="649" pos:column="41">try <block pos:line="649" pos:column="45">{
						<if pos:line="650" pos:column="49">if <condition pos:line="650" pos:column="52">(<expr><name pos:line="650" pos:column="53">conn</name> <op:operator pos:line="650" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="650" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="650" pos:column="66"> <block pos:line="650" pos:column="67">{
						 
							<decl_stmt><decl><type><name pos:line="652" pos:column="57">PreparedStatement</name></type> <name pos:line="652" pos:column="75">statement</name> <init pos:line="652" pos:column="85">= <expr><call><name><name pos:line="652" pos:column="87">conn</name><op:operator pos:line="652" pos:column="91">.</op:operator><name pos:line="652" pos:column="92">prepareStatement</name></name><argument_list pos:line="652" pos:column="108">(<argument><expr><name pos:line="652" pos:column="109">SQLExamUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="653" pos:column="1">//							statement.setString(1, tableName);</comment>
<comment type="line" pos:line="654" pos:column="1">//							statement.setString(2, examName);</comment>
							<expr_stmt><expr><call><name><name pos:line="655" pos:column="57">DBAnnotation</name><op:operator pos:line="655" pos:column="69">.</op:operator><name pos:line="655" pos:column="70">annoate</name></name><argument_list pos:line="655" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="655" pos:column="78">"marks"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="655" pos:column="86">"tableName"</lit:literal></expr></argument>,<argument><expr><name pos:line="655" pos:column="98">examName</name></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="655" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="656" pos:column="57">statement</name><op:operator pos:line="656" pos:column="66">.</op:operator><name pos:line="656" pos:column="67">setDouble</name></name><argument_list pos:line="656" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="656" pos:column="77">1</lit:literal></expr></argument>, <argument><expr><name pos:line="656" pos:column="80">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="657" pos:column="57">DBAnnotation</name><op:operator pos:line="657" pos:column="69">.</op:operator><name pos:line="657" pos:column="70">annoate</name></name><argument_list pos:line="657" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="657" pos:column="78">"UIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="657" pos:column="84">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="657" pos:column="96">"StudentUIN"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="657" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="658" pos:column="57">statement</name><op:operator pos:line="658" pos:column="66">.</op:operator><name pos:line="658" pos:column="67">setInt</name></name><argument_list pos:line="658" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="658" pos:column="74">2</lit:literal></expr></argument>, <argument><expr><name pos:line="658" pos:column="77">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="659" pos:column="57">statement</name><op:operator pos:line="659" pos:column="66">.</op:operator><name pos:line="659" pos:column="67">executeUpdate</name></name><argument_list pos:line="659" pos:column="80">()</argument_list></call></expr>;</expr_stmt>					
							<expr_stmt><expr><call><name><name pos:line="660" pos:column="57">Database</name><op:operator pos:line="660" pos:column="65">.</op:operator><name pos:line="660" pos:column="66">commitTransaction</name></name><argument_list pos:line="660" pos:column="83">(<argument><expr><name pos:line="660" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="661" pos:column="57">studentsMarksModified</name> <op:operator pos:line="661" pos:column="79">=</op:operator> <lit:literal type="boolean" pos:line="661" pos:column="81">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>	
					}</block> <catch pos:line="663" pos:column="43">catch <parameter_list pos:line="663" pos:column="49">(<param><decl><type><name pos:line="663" pos:column="50">SQLException</name></type> <name pos:line="663" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="663" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="664" pos:column="49">System</name><op:operator pos:line="664" pos:column="55">.</op:operator><name pos:line="664" pos:column="56">out</name><op:operator pos:line="664" pos:column="59">.</op:operator><name pos:line="664" pos:column="60">println</name></name><argument_list pos:line="664" pos:column="67">(<argument><expr><name pos:line="664" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="665" pos:column="49">Database</name><op:operator pos:line="665" pos:column="57">.</op:operator><name pos:line="665" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="665" pos:column="77">(<argument><expr><name pos:line="665" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="668" pos:column="35">catch <parameter_list pos:line="668" pos:column="41">(<param><decl><type><name pos:line="668" pos:column="42">Exception</name></type> <name pos:line="668" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="668" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="669" pos:column="41">System</name><op:operator pos:line="669" pos:column="47">.</op:operator><name pos:line="669" pos:column="48">out</name><op:operator pos:line="669" pos:column="51">.</op:operator><name pos:line="669" pos:column="52">println</name></name><argument_list pos:line="669" pos:column="59">(<argument><expr><name pos:line="669" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				
			}</block></then> <else pos:line="672" pos:column="27">else <block pos:line="672" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="673" pos:column="33">System</name><op:operator pos:line="673" pos:column="39">.</op:operator><name pos:line="673" pos:column="40">out</name><op:operator pos:line="673" pos:column="43">.</op:operator><name pos:line="673" pos:column="44">println</name></name><argument_list pos:line="673" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="673" pos:column="52">"The student "</lit:literal> <op:operator pos:line="673" pos:column="67">+</op:operator> <call><name><name pos:line="673" pos:column="69">student</name><op:operator pos:line="673" pos:column="76">.</op:operator><name pos:line="673" pos:column="77">getName</name></name><argument_list pos:line="673" pos:column="84">()</argument_list></call> <op:operator pos:line="673" pos:column="87">+</op:operator><lit:literal type="string" pos:line="673" pos:column="88">" is not enrolled."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></while>
		<return pos:line="677" pos:column="17">return <expr><name pos:line="677" pos:column="24">studentsMarksModified</name></expr>;</return>
		
	}</block></function>

 	<comment type="line" pos:line="681" pos:column="9">// To view all the exams in a course</comment>
	<function><type><specifier pos:line="682" pos:column="9">public</specifier> <name><name pos:line="682" pos:column="16">ArrayList</name><argument_list pos:line="682" pos:column="25">&lt;<argument><name pos:line="682" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="682" pos:column="34">viewAllExams</name><parameter_list pos:line="682" pos:column="46">()</parameter_list><block pos:line="682" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="683" pos:column="17">ArrayList</name><argument_list pos:line="683" pos:column="26">&lt;<argument><name pos:line="683" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="683" pos:column="35">allExams</name> <init pos:line="683" pos:column="44">= <expr><op:operator pos:line="683" pos:column="46">new</op:operator> <call><name><name pos:line="683" pos:column="50">ArrayList</name><argument_list pos:line="683" pos:column="59">&lt;<argument><name pos:line="683" pos:column="60">String</name></argument>&gt;</argument_list></name><argument_list pos:line="683" pos:column="67">()</argument_list></call></expr></init></decl> ;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="685" pos:column="17">int</name></type> <name pos:line="685" pos:column="21">offerID</name> <init pos:line="685" pos:column="29">= <expr><call><name><name pos:line="685" pos:column="31">this</name><op:operator pos:line="685" pos:column="35">.</op:operator><name pos:line="685" pos:column="36">getOfferID</name></name><argument_list pos:line="685" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="686" pos:column="17">CourseOffered</name></type> <name pos:line="686" pos:column="31">offeredCourse</name> <init pos:line="686" pos:column="45">= <expr><lit:literal type="null" pos:line="686" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="688" pos:column="17">try <block pos:line="688" pos:column="21">{
			<expr_stmt><expr><name pos:line="689" pos:column="25">offeredCourse</name> <op:operator pos:line="689" pos:column="39">=</op:operator> <op:operator pos:line="689" pos:column="41">new</op:operator> <call><name pos:line="689" pos:column="45">CourseOffered</name><argument_list pos:line="689" pos:column="58">(<argument><expr><name pos:line="689" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="690" pos:column="19">catch <parameter_list pos:line="690" pos:column="25">(<param><decl><type><name><name pos:line="690" pos:column="26">Course</name><op:operator pos:line="690" pos:column="32">.</op:operator><name pos:line="690" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="690" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="690" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="691" pos:column="25">e1</name><op:operator pos:line="691" pos:column="27">.</op:operator><name pos:line="691" pos:column="28">printStackTrace</name></name><argument_list pos:line="691" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="692" pos:column="19">catch <parameter_list pos:line="692" pos:column="25">(<param><decl><type><name><name pos:line="692" pos:column="26">CourseOffered</name><op:operator pos:line="692" pos:column="39">.</op:operator><name pos:line="692" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="692" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="692" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="693" pos:column="25">e1</name><op:operator pos:line="693" pos:column="27">.</op:operator><name pos:line="693" pos:column="28">printStackTrace</name></name><argument_list pos:line="693" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="696" pos:column="17">Course</name></type> <name pos:line="696" pos:column="24">course</name> <init pos:line="696" pos:column="31">= <expr><call><name><name pos:line="696" pos:column="33">offeredCourse</name><op:operator pos:line="696" pos:column="46">.</op:operator><name pos:line="696" pos:column="47">getCourse</name></name><argument_list pos:line="696" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="697" pos:column="17">String</name></type> <name pos:line="697" pos:column="24">courseName</name> <init pos:line="697" pos:column="35">= <expr><call><name><name pos:line="697" pos:column="37">course</name><op:operator pos:line="697" pos:column="43">.</op:operator><name pos:line="697" pos:column="44">getCourseName</name></name><argument_list pos:line="697" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="698" pos:column="17">int</name></type> <name pos:line="698" pos:column="21">semID</name> <init pos:line="698" pos:column="27">= <expr><call><name><name pos:line="698" pos:column="29">offeredCourse</name><op:operator pos:line="698" pos:column="42">.</op:operator><name pos:line="698" pos:column="43">getSemesterID</name></name><argument_list pos:line="698" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="700" pos:column="17">String</name></type> <name pos:line="700" pos:column="24">tableName</name> <init pos:line="700" pos:column="34">= <expr><name pos:line="700" pos:column="36">courseName</name> <op:operator pos:line="700" pos:column="47">+</op:operator> <call><name><name pos:line="700" pos:column="49">Integer</name><op:operator pos:line="700" pos:column="56">.</op:operator><name pos:line="700" pos:column="57">toString</name></name><argument_list pos:line="700" pos:column="65">(<argument><expr><name pos:line="700" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="700" pos:column="75">+</op:operator> <call><name><name pos:line="700" pos:column="77">Integer</name><op:operator pos:line="700" pos:column="84">.</op:operator><name pos:line="700" pos:column="85">toString</name></name><argument_list pos:line="700" pos:column="93">(<argument><expr><name pos:line="700" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="700" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="700" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt> 
	
<comment type="line" pos:line="702" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="703" pos:column="1">//				variable = {"examName"},  </comment>
<comment type="line" pos:line="704" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="705" pos:column="1">//				column = {"ExamName"}, </comment>
<comment type="line" pos:line="706" pos:column="1">//				isSource = true)</comment>
		<decl_stmt><decl><type><name pos:line="707" pos:column="17">String</name></type> <name pos:line="707" pos:column="24">SQLExamSelect</name> <init pos:line="707" pos:column="38">= <expr><lit:literal type="string" pos:line="707" pos:column="40">"SELECT ExamName FROM %s ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="708" pos:column="17">SQLExamSelect</name> <op:operator pos:line="708" pos:column="31">=</op:operator> <call><name><name pos:line="708" pos:column="33">String</name><op:operator pos:line="708" pos:column="39">.</op:operator><name pos:line="708" pos:column="40">format</name></name><argument_list pos:line="708" pos:column="46">(<argument><expr><name pos:line="708" pos:column="47">SQLExamSelect</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="62">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="710" pos:column="17">try <block pos:line="710" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="711" pos:column="25">Connection</name></type> <name pos:line="711" pos:column="36">conn</name> <init pos:line="711" pos:column="41">= <expr><call><name><name pos:line="711" pos:column="43">Database</name><op:operator pos:line="711" pos:column="51">.</op:operator><name pos:line="711" pos:column="52">getConnection</name></name><argument_list pos:line="711" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="712" pos:column="25">try <block pos:line="712" pos:column="29">{
				<if pos:line="713" pos:column="33">if <condition pos:line="713" pos:column="36">(<expr><name pos:line="713" pos:column="37">conn</name> <op:operator pos:line="713" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="713" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="713" pos:column="50"> <block pos:line="713" pos:column="51">{
					<comment type="line" pos:line="714" pos:column="41">//System.out.println(tableName);</comment>
					<decl_stmt><decl><type><name pos:line="715" pos:column="41">PreparedStatement</name></type> <name pos:line="715" pos:column="59">statement</name> <init pos:line="715" pos:column="69">= <expr><call><name><name pos:line="715" pos:column="71">conn</name><op:operator pos:line="715" pos:column="75">.</op:operator><name pos:line="715" pos:column="76">prepareStatement</name></name><argument_list pos:line="715" pos:column="92">(<argument><expr><name pos:line="715" pos:column="93">SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="716" pos:column="1">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name pos:line="717" pos:column="41">ResultSet</name></type> <name pos:line="717" pos:column="51">rs</name> <init pos:line="717" pos:column="54">=  <expr><call><name><name pos:line="717" pos:column="57">statement</name><op:operator pos:line="717" pos:column="66">.</op:operator><name pos:line="717" pos:column="67">executeQuery</name></name><argument_list pos:line="717" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
									
					<while pos:line="719" pos:column="41">while<condition pos:line="719" pos:column="46">(<expr><call><name><name pos:line="719" pos:column="47">rs</name><op:operator pos:line="719" pos:column="49">.</op:operator><name pos:line="719" pos:column="50">next</name></name><argument_list pos:line="719" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="719" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="720" pos:column="49">DBAnnotation</name><op:operator pos:line="720" pos:column="61">.</op:operator><name pos:line="720" pos:column="62">annoate</name></name><argument_list pos:line="720" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="70">"examName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="720" pos:column="81">"tableName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="720" pos:column="93">"ExamName"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="720" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="721" pos:column="49">String</name></type> <name pos:line="721" pos:column="56">examName</name> <init pos:line="721" pos:column="65">= <expr><call><name><name pos:line="721" pos:column="67">rs</name><op:operator pos:line="721" pos:column="69">.</op:operator><name pos:line="721" pos:column="70">getString</name></name><argument_list pos:line="721" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="721" pos:column="80">"ExamName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="722" pos:column="49">System</name><op:operator pos:line="722" pos:column="55">.</op:operator><name pos:line="722" pos:column="56">out</name><op:operator pos:line="722" pos:column="59">.</op:operator><name pos:line="722" pos:column="60">println</name></name><argument_list pos:line="722" pos:column="67">(<argument><expr><name pos:line="722" pos:column="68">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="723" pos:column="49">if<condition pos:line="723" pos:column="51">(<expr><name pos:line="723" pos:column="52">examName</name> <op:operator pos:line="723" pos:column="61">!=</op:operator> <lit:literal type="null" pos:line="723" pos:column="64">null</lit:literal></expr>)</condition><then pos:line="723" pos:column="69">
							<expr_stmt><expr><call><name><name pos:line="724" pos:column="57">allExams</name><op:operator pos:line="724" pos:column="65">.</op:operator><name pos:line="724" pos:column="66">add</name></name><argument_list pos:line="724" pos:column="69">(<argument><expr><name pos:line="724" pos:column="70">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						<expr_stmt><expr><call><name><name pos:line="725" pos:column="49">System</name><op:operator pos:line="725" pos:column="55">.</op:operator><name pos:line="725" pos:column="56">out</name><op:operator pos:line="725" pos:column="59">.</op:operator><name pos:line="725" pos:column="60">println</name></name><argument_list pos:line="725" pos:column="67">(<argument><expr><call><name><name pos:line="725" pos:column="68">allExams</name><op:operator pos:line="725" pos:column="76">.</op:operator><name pos:line="725" pos:column="77">get</name></name><argument_list pos:line="725" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="725" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
					}</block></while>
					
				}</block></then></if>	
			}</block> <catch pos:line="730" pos:column="27">catch <parameter_list pos:line="730" pos:column="33">(<param><decl><type><name pos:line="730" pos:column="34">SQLException</name></type> <name pos:line="730" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="730" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="731" pos:column="33">System</name><op:operator pos:line="731" pos:column="39">.</op:operator><name pos:line="731" pos:column="40">out</name><op:operator pos:line="731" pos:column="43">.</op:operator><name pos:line="731" pos:column="44">println</name></name><argument_list pos:line="731" pos:column="51">(<argument><expr><name pos:line="731" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch pos:line="733" pos:column="19">catch <parameter_list pos:line="733" pos:column="25">(<param><decl><type><name pos:line="733" pos:column="26">Exception</name></type> <name pos:line="733" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="733" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="734" pos:column="25">System</name><op:operator pos:line="734" pos:column="31">.</op:operator><name pos:line="734" pos:column="32">out</name><op:operator pos:line="734" pos:column="35">.</op:operator><name pos:line="734" pos:column="36">println</name></name><argument_list pos:line="734" pos:column="43">(<argument><expr><name pos:line="734" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="736" pos:column="17">return <expr><name pos:line="736" pos:column="24">allExams</name></expr>;</return>
	}</block></function>

	
<comment type="line" pos:line="740" pos:column="1">//	public static void main(String[] args){</comment>

<comment type="line" pos:line="742" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="743" pos:column="1">//		@SuppressWarnings("unused")</comment>
<comment type="line" pos:line="744" pos:column="1">//		CourseOffered offeredCourse = null;</comment>
<comment type="line" pos:line="745" pos:column="1">//		try {</comment>
<comment type="line" pos:line="746" pos:column="1">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="747" pos:column="1">//		} catch (Course.CourseDoesNotExistException e) {</comment>
<comment type="line" pos:line="748" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="749" pos:column="1">//		} catch (CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line" pos:line="750" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="751" pos:column="1">//		}</comment>
		
<comment type="line" pos:line="753" pos:column="1">//		Test to add an exam</comment>
<comment type="line" pos:line="754" pos:column="1">//		boolean courseAdded = CourseExams.createCourseExamMarksTable(offeredCourse);</comment>
<comment type="line" pos:line="755" pos:column="1">//		if(courseAdded == true){</comment>
<comment type="line" pos:line="756" pos:column="1">//			System.out.println("Course Added");</comment>
<comment type="line" pos:line="757" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="758" pos:column="1">//			System.out.println("Course Not Added");</comment>
<comment type="line" pos:line="759" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="761" pos:column="17">// To add mks for a student</comment>
<comment type="line" pos:line="762" pos:column="1">//		String examName = "Assgn1";</comment>
<comment type="line" pos:line="763" pos:column="1">//		int UIN = 1;</comment>
<comment type="line" pos:line="764" pos:column="1">//		Student student = new Student(UIN);</comment>
<comment type="line" pos:line="765" pos:column="1">//		double marks = 8.5; </comment>
<comment type="line" pos:line="766" pos:column="1">//		HashMap&lt;Student,Double&gt; examMarks = new HashMap&lt;Student,Double&gt;();</comment>
<comment type="line" pos:line="767" pos:column="1">//		examMarks.put(student, marks);</comment>
<comment type="line" pos:line="768" pos:column="1">//		UIN = 2;</comment>
<comment type="line" pos:line="769" pos:column="1">//		marks = 7.5;</comment>
<comment type="line" pos:line="770" pos:column="1">//		student = new Student(UIN);</comment>
<comment type="line" pos:line="771" pos:column="1">//		examMarks.put(student, marks);</comment>
<comment type="line" pos:line="772" pos:column="1">//		CourseExams exams = new CourseExams(offerID,examName,examMarks);</comment>
<comment type="line" pos:line="773" pos:column="1">//		</comment>
<comment type="line" pos:line="774" pos:column="1">//		boolean marksAdded = exams.addStudentMarks();</comment>
<comment type="line" pos:line="775" pos:column="1">//		if(marksAdded == true){</comment>
<comment type="line" pos:line="776" pos:column="1">//			System.out.println("Mks Added");</comment>
<comment type="line" pos:line="777" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="778" pos:column="1">//			System.out.println("Mks Not Added");</comment>
<comment type="line" pos:line="779" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="781" pos:column="17">// To get student's marks</comment>
<comment type="line" pos:line="782" pos:column="1">//		CourseExams exams = new CourseExams(offerID);</comment>
<comment type="line" pos:line="783" pos:column="1">//		CourseExams marks = exams.getStudentMarks();</comment>
<comment type="line" pos:line="784" pos:column="1">//		HashMap&lt;Student,Double&gt; examMarks = marks.getExamMarks();</comment>
<comment type="line" pos:line="785" pos:column="1">//		Set&lt;Student&gt; keys = examMarks.keySet();</comment>
<comment type="line" pos:line="786" pos:column="1">//		Iterator&lt;Student&gt; keyIterator = keys.iterator();</comment>
<comment type="line" pos:line="787" pos:column="1">//		while (keyIterator.hasNext()) {</comment>
<comment type="line" pos:line="788" pos:column="1">//			Student student = keyIterator.next();</comment>
<comment type="line" pos:line="789" pos:column="1">//			int UIN = student.getUIN();</comment>
<comment type="line" pos:line="790" pos:column="1">//			double studeMarks = (double) examMarks.get(student);</comment>
<comment type="line" pos:line="791" pos:column="1">//			System.out.println("UIN: " + UIN + " TotalMarks: " + studeMarks);</comment>
<comment type="line" pos:line="792" pos:column="1">//		}	</comment>
		
		
		<comment type="line" pos:line="795" pos:column="17">// To modify student's marks</comment>
<comment type="line" pos:line="796" pos:column="1">//		int UIN = 1;</comment>
<comment type="line" pos:line="797" pos:column="1">//		Student student = new Student(UIN);</comment>
<comment type="line" pos:line="798" pos:column="1">//		double marks = 9; </comment>
<comment type="line" pos:line="799" pos:column="1">//		HashMap&lt;Student,Double&gt; examMarks = new HashMap&lt;Student,Double&gt;();</comment>
<comment type="line" pos:line="800" pos:column="1">//		examMarks.put(student, marks);</comment>
<comment type="line" pos:line="801" pos:column="1">//		UIN = 2;</comment>
<comment type="line" pos:line="802" pos:column="1">//		marks = 3;</comment>
<comment type="line" pos:line="803" pos:column="1">//		student = new Student(UIN);</comment>
<comment type="line" pos:line="804" pos:column="1">//		examMarks.put(student, marks);</comment>
<comment type="line" pos:line="805" pos:column="1">//		CourseExams exams = new CourseExams(offerID,examName,examMarks);</comment>
<comment type="line" pos:line="806" pos:column="1">//		</comment>
<comment type="line" pos:line="807" pos:column="1">//		boolean marksModified = exams.modifyStudentMarks();</comment>
<comment type="line" pos:line="808" pos:column="1">//		if(marksModified == true){</comment>
<comment type="line" pos:line="809" pos:column="1">//			System.out.println("Mks Modified");</comment>
<comment type="line" pos:line="810" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="811" pos:column="1">//			System.out.println("Mks Not Modified");</comment>
<comment type="line" pos:line="812" pos:column="1">//		}</comment>
		
<comment type="line" pos:line="814" pos:column="1">//	}</comment>
}</block></class>
</unit>
