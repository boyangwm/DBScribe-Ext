<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\WaitListTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">org</name><op:operator pos:line="4" pos:column="11">.</op:operator><name pos:line="4" pos:column="12">junit</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Before</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">org</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">junit</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Test</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">umas</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">code</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="8" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">WaitListTest</name> <block pos:line="10" pos:column="27">{

	<decl_stmt><decl><type><specifier pos:line="12" pos:column="9">static</specifier> <name pos:line="12" pos:column="16">Student</name></type> <name pos:line="12" pos:column="24">student</name></decl>;</decl_stmt>
	<function><type><annotation pos:line="13" pos:column="9">@<name pos:line="13" pos:column="10">Before</name></annotation>
	<specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">setUp</name><parameter_list pos:line="14" pos:column="26">()</parameter_list> <throws pos:line="14" pos:column="29">throws <argument><expr><name pos:line="14" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="14" pos:column="46">{
		<expr_stmt><expr><name pos:line="15" pos:column="17">student</name> <op:operator pos:line="15" pos:column="25">=</op:operator> <op:operator pos:line="15" pos:column="27">new</op:operator> <call><name pos:line="15" pos:column="31">Student</name><argument_list pos:line="15" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="15" pos:column="39">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="18" pos:column="9">@<name pos:line="18" pos:column="10">Test</name></annotation>
	<specifier pos:line="19" pos:column="9">public</specifier> <specifier pos:line="19" pos:column="16">final</specifier> <name pos:line="19" pos:column="22">void</name></type> <name pos:line="19" pos:column="27">testAddStudentToWaitList</name><parameter_list pos:line="19" pos:column="51">()</parameter_list> <block pos:line="19" pos:column="54">{
		<comment type="block" pos:line="20" pos:column="17">/*
		 * Add the student to wait list
		 * The student does not get added on the list if the course is register-able
		 * Thus the success of this test is contingent on the conditions
		 */</comment>
		<try pos:line="25" pos:column="17">try <block pos:line="25" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">WaitList</name><op:operator pos:line="26" pos:column="33">.</op:operator><name pos:line="26" pos:column="34">removeFromWaitList</name></name><argument_list pos:line="26" pos:column="52">(<argument><expr><name pos:line="26" pos:column="53">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="26" pos:column="62">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">boolean</name></type> <name pos:line="27" pos:column="33">check</name> <init pos:line="27" pos:column="39">= <expr><call><name><name pos:line="27" pos:column="41">WaitList</name><op:operator pos:line="27" pos:column="49">.</op:operator><name pos:line="27" pos:column="50">addStudentToWaitList</name></name><argument_list pos:line="27" pos:column="70">(<argument><expr><name pos:line="27" pos:column="71">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="27" pos:column="80">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">assertTrue</name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">WaitList</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">removeFromWaitList</name></name><argument_list pos:line="29" pos:column="52">(<argument><expr><name pos:line="29" pos:column="53">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="29" pos:column="62">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="30" pos:column="19">catch <parameter_list pos:line="30" pos:column="25">(<param><decl><type><name><name pos:line="30" pos:column="26">Course</name><op:operator pos:line="30" pos:column="32">.</op:operator><name pos:line="30" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="30" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">fail</name><argument_list pos:line="31" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="30">"Failed to add"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="32" pos:column="25">e</name><op:operator pos:line="32" pos:column="26">.</op:operator><name pos:line="32" pos:column="27">printStackTrace</name></name><argument_list pos:line="32" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="33" pos:column="19">catch <parameter_list pos:line="33" pos:column="25">(<param><decl><type><name><name pos:line="33" pos:column="26">CourseOffered</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="33" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">fail</name><argument_list pos:line="34" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="30">"Failed to add"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="35" pos:column="25">e</name><op:operator pos:line="35" pos:column="26">.</op:operator><name pos:line="35" pos:column="27">printStackTrace</name></name><argument_list pos:line="35" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="39" pos:column="9">@<name pos:line="39" pos:column="10">Test</name></annotation>
	<specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">final</specifier> <name pos:line="40" pos:column="22">void</name></type> <name pos:line="40" pos:column="27">testGetStudentsOnEmailList</name><parameter_list pos:line="40" pos:column="53">()</parameter_list> <block pos:line="40" pos:column="56">{
		<try pos:line="41" pos:column="17">try<block pos:line="41" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">WaitList</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">getStudentsOnEmailList</name></name><argument_list pos:line="42" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="57">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		
		<catch pos:line="45" pos:column="17">catch<parameter_list pos:line="45" pos:column="22">(<param><decl><type><name pos:line="45" pos:column="23">Exception</name></type> <name pos:line="45" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="45" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">fail</name><argument_list pos:line="46" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="30">"Failed to retrieve students"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="50" pos:column="9">@<name pos:line="50" pos:column="10">Test</name></annotation>
	<specifier pos:line="51" pos:column="9">public</specifier> <specifier pos:line="51" pos:column="16">final</specifier> <name pos:line="51" pos:column="22">void</name></type> <name pos:line="51" pos:column="27">testGetStudentsOnWaitList</name><parameter_list pos:line="51" pos:column="52">()</parameter_list> <block pos:line="51" pos:column="55">{
		<try pos:line="52" pos:column="17">try<block pos:line="52" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">WaitList</name><op:operator pos:line="53" pos:column="33">.</op:operator><name pos:line="53" pos:column="34">getStudentsOnWaitList</name></name><argument_list pos:line="53" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="56">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="55" pos:column="17">catch<parameter_list pos:line="55" pos:column="22">(<param><decl><type><name pos:line="55" pos:column="23">Exception</name></type> <name pos:line="55" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="55" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">fail</name><argument_list pos:line="56" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="30">"Failed to retrieve students"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="60" pos:column="9">@<name pos:line="60" pos:column="10">Test</name></annotation>
	<specifier pos:line="61" pos:column="9">public</specifier> <specifier pos:line="61" pos:column="16">final</specifier> <name pos:line="61" pos:column="22">void</name></type> <name pos:line="61" pos:column="27">testGetWaitListCoursesOfStudent</name><parameter_list pos:line="61" pos:column="58">()</parameter_list> <block pos:line="61" pos:column="61">{
		<try pos:line="62" pos:column="17">try<block pos:line="62" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">WaitList</name><op:operator pos:line="63" pos:column="33">.</op:operator><name pos:line="63" pos:column="34">getWaitListCoursesOfStudent</name></name><argument_list pos:line="63" pos:column="61">(<argument><expr><name pos:line="63" pos:column="62">student</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="65" pos:column="17">catch<parameter_list pos:line="65" pos:column="22">(<param><decl><type><name pos:line="65" pos:column="23">Exception</name></type> <name pos:line="65" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="65" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">fail</name><argument_list pos:line="66" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="30">"Failed to retrieve courses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="70" pos:column="9">@<name pos:line="70" pos:column="10">Test</name></annotation>
	<specifier pos:line="71" pos:column="9">public</specifier> <specifier pos:line="71" pos:column="16">final</specifier> <name pos:line="71" pos:column="22">void</name></type> <name pos:line="71" pos:column="27">testRemoveFromWaitList</name><parameter_list pos:line="71" pos:column="49">()</parameter_list> <block pos:line="71" pos:column="52">{
		<comment type="block" pos:line="72" pos:column="17">/*
		 * Adding the student to be removed so that the test does not hamper the database consistency
		 */</comment>
		<try pos:line="75" pos:column="17">try <block pos:line="75" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">WaitList</name><op:operator pos:line="76" pos:column="33">.</op:operator><name pos:line="76" pos:column="34">addStudentToWaitList</name></name><argument_list pos:line="76" pos:column="54">(<argument><expr><name pos:line="76" pos:column="55">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="76" pos:column="64">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">boolean</name></type> <name pos:line="77" pos:column="33">check</name> <init pos:line="77" pos:column="39">= <expr><call><name><name pos:line="77" pos:column="41">WaitList</name><op:operator pos:line="77" pos:column="49">.</op:operator><name pos:line="77" pos:column="50">removeFromWaitList</name></name><argument_list pos:line="77" pos:column="68">(<argument><expr><name pos:line="77" pos:column="69">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="78">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">assertTrue</name><argument_list pos:line="78" pos:column="35">(<argument><expr><name pos:line="78" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="79" pos:column="19">catch <parameter_list pos:line="79" pos:column="25">(<param><decl><type><name><name pos:line="79" pos:column="26">Course</name><op:operator pos:line="79" pos:column="32">.</op:operator><name pos:line="79" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="79" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">fail</name><argument_list pos:line="80" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="30">"Failed to add"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">e</name><op:operator pos:line="81" pos:column="26">.</op:operator><name pos:line="81" pos:column="27">printStackTrace</name></name><argument_list pos:line="81" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="82" pos:column="19">catch <parameter_list pos:line="82" pos:column="25">(<param><decl><type><name><name pos:line="82" pos:column="26">CourseOffered</name><op:operator pos:line="82" pos:column="39">.</op:operator><name pos:line="82" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="82" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">fail</name><argument_list pos:line="83" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="30">"Failed to add"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">e</name><op:operator pos:line="84" pos:column="26">.</op:operator><name pos:line="84" pos:column="27">printStackTrace</name></name><argument_list pos:line="84" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <specifier pos:line="89" pos:column="16">final</specifier> <name pos:line="89" pos:column="22">void</name></type> <name pos:line="89" pos:column="27">testRemoveFromWaitListAndCommit</name><parameter_list pos:line="89" pos:column="58">()</parameter_list> <block pos:line="89" pos:column="61">{
		<comment type="block" pos:line="90" pos:column="17">/*
		 * Adding the student to be removed so that the test does not hamper the database consistency
		 * The earlier test function does not commit as it is a part of chain call which commits in the end of chain
		 */</comment>
		<try pos:line="94" pos:column="17">try <block pos:line="94" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="95" pos:column="25">WaitList</name><op:operator pos:line="95" pos:column="33">.</op:operator><name pos:line="95" pos:column="34">addStudentToWaitList</name></name><argument_list pos:line="95" pos:column="54">(<argument><expr><name pos:line="95" pos:column="55">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="95" pos:column="64">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="96" pos:column="25">boolean</name></type> <name pos:line="96" pos:column="33">check</name> <init pos:line="96" pos:column="39">= <expr><call><name><name pos:line="96" pos:column="41">WaitList</name><op:operator pos:line="96" pos:column="49">.</op:operator><name pos:line="96" pos:column="50">removeFromWaitListAndCommit</name></name><argument_list pos:line="96" pos:column="77">(<argument><expr><name pos:line="96" pos:column="78">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="96" pos:column="87">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">assertTrue</name><argument_list pos:line="97" pos:column="35">(<argument><expr><name pos:line="97" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="98" pos:column="19">catch <parameter_list pos:line="98" pos:column="25">(<param><decl><type><name><name pos:line="98" pos:column="26">Course</name><op:operator pos:line="98" pos:column="32">.</op:operator><name pos:line="98" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="98" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">fail</name><argument_list pos:line="99" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">e</name><op:operator pos:line="100" pos:column="26">.</op:operator><name pos:line="100" pos:column="27">printStackTrace</name></name><argument_list pos:line="100" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="101" pos:column="19">catch <parameter_list pos:line="101" pos:column="25">(<param><decl><type><name><name pos:line="101" pos:column="26">CourseOffered</name><op:operator pos:line="101" pos:column="39">.</op:operator><name pos:line="101" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="101" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="101" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="102" pos:column="25">fail</name><argument_list pos:line="102" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">e</name><op:operator pos:line="103" pos:column="26">.</op:operator><name pos:line="103" pos:column="27">printStackTrace</name></name><argument_list pos:line="103" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="107" pos:column="9">@<name pos:line="107" pos:column="10">Test</name></annotation>
	<specifier pos:line="108" pos:column="9">public</specifier> <specifier pos:line="108" pos:column="16">final</specifier> <name pos:line="108" pos:column="22">void</name></type> <name pos:line="108" pos:column="27">testRemoveFromEmailedList</name><parameter_list pos:line="108" pos:column="52">()</parameter_list> <block pos:line="108" pos:column="55">{
		<comment type="block" pos:line="109" pos:column="17">/*
		 * Adding the student to wait list
		 * Calling the emailFirstStudentOnWaitList to put student on email list
		 * Then calling the removing the student from the email list
		 */</comment>
		<try pos:line="114" pos:column="17">try <block pos:line="114" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="115" pos:column="25">WaitList</name><op:operator pos:line="115" pos:column="33">.</op:operator><name pos:line="115" pos:column="34">addStudentToWaitList</name></name><argument_list pos:line="115" pos:column="54">(<argument><expr><name pos:line="115" pos:column="55">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="115" pos:column="64">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">WaitList</name><op:operator pos:line="116" pos:column="33">.</op:operator><name pos:line="116" pos:column="34">emailFirstStudentOnWaitList</name></name><argument_list pos:line="116" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="62">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="117" pos:column="25">WaitList</name><op:operator pos:line="117" pos:column="33">.</op:operator><name pos:line="117" pos:column="34">removeFromEmailedList</name></name><argument_list pos:line="117" pos:column="55">(<argument><expr><call><name><name pos:line="117" pos:column="56">student</name><op:operator pos:line="117" pos:column="63">.</op:operator><name pos:line="117" pos:column="64">getUIN</name></name><argument_list pos:line="117" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="117" pos:column="74">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="118" pos:column="19">catch <parameter_list pos:line="118" pos:column="25">(<param><decl><type><name><name pos:line="118" pos:column="26">Course</name><op:operator pos:line="118" pos:column="32">.</op:operator><name pos:line="118" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="118" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="119" pos:column="25">fail</name><argument_list pos:line="119" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="120" pos:column="25">e</name><op:operator pos:line="120" pos:column="26">.</op:operator><name pos:line="120" pos:column="27">printStackTrace</name></name><argument_list pos:line="120" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="121" pos:column="19">catch <parameter_list pos:line="121" pos:column="25">(<param><decl><type><name><name pos:line="121" pos:column="26">CourseOffered</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="121" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="121" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="122" pos:column="25">fail</name><argument_list pos:line="122" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="123" pos:column="25">e</name><op:operator pos:line="123" pos:column="26">.</op:operator><name pos:line="123" pos:column="27">printStackTrace</name></name><argument_list pos:line="123" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="127" pos:column="9">@<name pos:line="127" pos:column="10">Test</name></annotation>
	<specifier pos:line="128" pos:column="9">public</specifier> <specifier pos:line="128" pos:column="16">final</specifier> <name pos:line="128" pos:column="22">void</name></type> <name pos:line="128" pos:column="27">testIsStudentRegistered</name><parameter_list pos:line="128" pos:column="50">()</parameter_list> <block pos:line="128" pos:column="53">{
		<comment type="block" pos:line="129" pos:column="17">/*
		 * As long as the student passed is not registered for the course this test will pass
		 */</comment>
		<decl_stmt><decl><type><name pos:line="132" pos:column="17">boolean</name></type> <name pos:line="132" pos:column="25">check</name> <init pos:line="132" pos:column="31">= <expr><call><name><name pos:line="132" pos:column="33">WaitList</name><op:operator pos:line="132" pos:column="41">.</op:operator><name pos:line="132" pos:column="42">isStudentRegistered</name></name><argument_list pos:line="132" pos:column="61">(<argument><expr><name pos:line="132" pos:column="62">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="132" pos:column="71">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">assertFalse</name><argument_list pos:line="133" pos:column="28">(<argument><expr><name pos:line="133" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="136" pos:column="9">@<name pos:line="136" pos:column="10">Test</name></annotation>
	<specifier pos:line="137" pos:column="9">public</specifier> <specifier pos:line="137" pos:column="16">final</specifier> <name pos:line="137" pos:column="22">void</name></type> <name pos:line="137" pos:column="27">testIsStudentOnWaitList</name><parameter_list pos:line="137" pos:column="50">()</parameter_list> <block pos:line="137" pos:column="53">{
		<comment type="block" pos:line="138" pos:column="17">/*
		 * Add a student to wait list
		 * Test the function for correct behavior
		 * Remove the student from wait list
		 */</comment>
		<try pos:line="143" pos:column="17">try <block pos:line="143" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="144" pos:column="25">WaitList</name><op:operator pos:line="144" pos:column="33">.</op:operator><name pos:line="144" pos:column="34">addStudentToWaitList</name></name><argument_list pos:line="144" pos:column="54">(<argument><expr><name pos:line="144" pos:column="55">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="144" pos:column="64">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="145" pos:column="25">boolean</name></type> <name pos:line="145" pos:column="33">check</name> <init pos:line="145" pos:column="39">= <expr><call><name><name pos:line="145" pos:column="41">WaitList</name><op:operator pos:line="145" pos:column="49">.</op:operator><name pos:line="145" pos:column="50">isStudentOnWaitList</name></name><argument_list pos:line="145" pos:column="69">(<argument><expr><name pos:line="145" pos:column="70">student</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="79">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="146" pos:column="25">assertTrue</name><argument_list pos:line="146" pos:column="35">(<argument><expr><name pos:line="146" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">WaitList</name><op:operator pos:line="147" pos:column="33">.</op:operator><name pos:line="147" pos:column="34">removeFromEmailedList</name></name><argument_list pos:line="147" pos:column="55">(<argument><expr><call><name><name pos:line="147" pos:column="56">student</name><op:operator pos:line="147" pos:column="63">.</op:operator><name pos:line="147" pos:column="64">getUIN</name></name><argument_list pos:line="147" pos:column="70">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="147" pos:column="74">448</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="148" pos:column="19">catch <parameter_list pos:line="148" pos:column="25">(<param><decl><type><name><name pos:line="148" pos:column="26">Course</name><op:operator pos:line="148" pos:column="32">.</op:operator><name pos:line="148" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="148" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="148" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="149" pos:column="25">fail</name><argument_list pos:line="149" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="150" pos:column="25">e</name><op:operator pos:line="150" pos:column="26">.</op:operator><name pos:line="150" pos:column="27">printStackTrace</name></name><argument_list pos:line="150" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="151" pos:column="19">catch <parameter_list pos:line="151" pos:column="25">(<param><decl><type><name><name pos:line="151" pos:column="26">CourseOffered</name><op:operator pos:line="151" pos:column="39">.</op:operator><name pos:line="151" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="151" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">fail</name><argument_list pos:line="152" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="30">"Failed to remove"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="153" pos:column="25">e</name><op:operator pos:line="153" pos:column="26">.</op:operator><name pos:line="153" pos:column="27">printStackTrace</name></name><argument_list pos:line="153" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="157" pos:column="9">@<name pos:line="157" pos:column="10">Test</name></annotation>
	<specifier pos:line="158" pos:column="9">public</specifier> <specifier pos:line="158" pos:column="16">final</specifier> <name pos:line="158" pos:column="22">void</name></type> <name pos:line="158" pos:column="27">testIsWaitListEmpty</name><parameter_list pos:line="158" pos:column="46">()</parameter_list> <block pos:line="158" pos:column="49">{
		<comment type="block" pos:line="159" pos:column="17">/*
		 * Checks if the wait list is empty
		 * Passes only if the wait list is empty for the passed offer id
		 */</comment>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">boolean</name></type> <name pos:line="163" pos:column="25">check</name> <init pos:line="163" pos:column="31">= <expr><call><name><name pos:line="163" pos:column="33">WaitList</name><op:operator pos:line="163" pos:column="41">.</op:operator><name pos:line="163" pos:column="42">isWaitListEmpty</name></name><argument_list pos:line="163" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="58">447</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="164" pos:column="17">assertTrue</name><argument_list pos:line="164" pos:column="27">(<argument><expr><name pos:line="164" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


}</block></class>
</unit>
