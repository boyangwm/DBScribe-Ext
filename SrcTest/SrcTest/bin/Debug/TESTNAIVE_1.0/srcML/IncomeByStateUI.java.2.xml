<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\ui\IncomeByStateUI.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">ui</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">text</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">DecimalFormat</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Scanner</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">interfaces</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">CalculateByStateInterface</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">interfaces</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">StartInterface</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">riskIt</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">util</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="12" pos:column="1">/**
 * IncomeByStateGUI.java
 * Purpose: GUI component for CalculatebyState class / requirement
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="20" pos:column="1">public</specifier> class <name pos:line="20" pos:column="14">IncomeByStateUI</name> <super><implements pos:line="20" pos:column="30">implements <name pos:line="20" pos:column="41">StartInterface</name></implements></super> <block pos:line="20" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">String</name></type> <name pos:line="21" pos:column="16">type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">String</name></type> <name pos:line="22" pos:column="16">fillData</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">IncomeByStateUI</name><parameter_list pos:line="24" pos:column="31">(<param><decl><type><name pos:line="24" pos:column="32">String</name></type> <name pos:line="24" pos:column="39">type</name></decl></param>)</parameter_list><block pos:line="24" pos:column="44">{
		<if pos:line="25" pos:column="17">if<condition pos:line="25" pos:column="19">(<expr><name pos:line="25" pos:column="20">type</name> <op:operator pos:line="25" pos:column="25">!=</op:operator> <lit:literal type="null" pos:line="25" pos:column="28">null</lit:literal></expr>)</condition><then><block pos:line="25" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="26" pos:column="25">this</name><op:operator pos:line="26" pos:column="29">.</op:operator><name pos:line="26" pos:column="30">type</name></name> <op:operator pos:line="26" pos:column="35">=</op:operator> <call><name><name pos:line="26" pos:column="37">type</name><op:operator pos:line="26" pos:column="41">.</op:operator><name pos:line="26" pos:column="42">trim</name></name><argument_list pos:line="26" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="28" pos:column="17">else <block pos:line="28" pos:column="22">{
			<expr_stmt><expr><name pos:line="29" pos:column="25">type</name> <op:operator pos:line="29" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="29" pos:column="32">"income"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="32" pos:column="17">if<condition pos:line="32" pos:column="19">(<expr><call><name><name pos:line="32" pos:column="20">type</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="32" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="32" pos:column="52">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">fillData</name> <op:operator pos:line="33" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="33" pos:column="36">"income"</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="34" pos:column="19">else <block pos:line="34" pos:column="24">{
			<expr_stmt><expr><name pos:line="35" pos:column="25">fillData</name> <op:operator pos:line="35" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="35" pos:column="36">"weekly wage"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	
	<decl_stmt><decl><type><specifier pos:line="39" pos:column="9">private</specifier> <name><name pos:line="39" pos:column="17">ArrayList</name><argument_list pos:line="39" pos:column="26">&lt;<argument><name pos:line="39" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="39" pos:column="35">stateList</name> <init pos:line="39" pos:column="45">= <expr><op:operator pos:line="39" pos:column="47">new</op:operator> <call><name><name pos:line="39" pos:column="51">ArrayList</name><argument_list pos:line="39" pos:column="60">&lt;<argument><name pos:line="39" pos:column="61">String</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">void</name></type> <name pos:line="41" pos:column="21">start</name><parameter_list pos:line="41" pos:column="26">()</parameter_list> <block pos:line="41" pos:column="29">{
		
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">Scanner</name></type> <name pos:line="43" pos:column="25">in</name> <init pos:line="43" pos:column="28">= <expr><op:operator pos:line="43" pos:column="30">new</op:operator> <call><name pos:line="43" pos:column="34">Scanner</name><argument_list pos:line="43" pos:column="41">(<argument><expr><name><name pos:line="43" pos:column="42">System</name><op:operator pos:line="43" pos:column="48">.</op:operator><name pos:line="43" pos:column="49">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="44" pos:column="9">double</name></type> <name pos:line="44" pos:column="16">returnValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="45" pos:column="9">String</name></type> <name pos:line="45" pos:column="16">stateSelection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">CalculateByStateInterface</name></type> <name pos:line="46" pos:column="35">calc</name> <init pos:line="46" pos:column="40">= <expr><call><name><name pos:line="46" pos:column="42">Factory</name><op:operator pos:line="46" pos:column="49">.</op:operator><name pos:line="46" pos:column="50">getCalculateByState</name></name><argument_list pos:line="46" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">stateList</name> <op:operator pos:line="47" pos:column="19">=</op:operator> <call><name><name pos:line="47" pos:column="21">calc</name><op:operator pos:line="47" pos:column="25">.</op:operator><name pos:line="47" pos:column="26">getStateList</name></name><argument_list pos:line="47" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">boolean</name></type> <name pos:line="48" pos:column="17">found</name> <init pos:line="48" pos:column="23">= <expr><lit:literal type="boolean" pos:line="48" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">DecimalFormat</name></type> <name pos:line="49" pos:column="23">myFormatter</name> <init pos:line="49" pos:column="35">= <expr><op:operator pos:line="49" pos:column="37">new</op:operator> <call><name pos:line="49" pos:column="41">DecimalFormat</name><argument_list pos:line="49" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="55">"$###,###,###.00"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="51" pos:column="9">// Get Selection from User</comment>
        <do pos:line="52" pos:column="9">do <block pos:line="52" pos:column="12">{
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">System</name><op:operator pos:line="53" pos:column="19">.</op:operator><name pos:line="53" pos:column="20">out</name><op:operator pos:line="53" pos:column="23">.</op:operator><name pos:line="53" pos:column="24">println</name></name><argument_list pos:line="53" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="32">"\nPlease enter a state to show the average "</lit:literal> <op:operator pos:line="53" pos:column="78">+</op:operator> <name pos:line="53" pos:column="80">fillData</name> <op:operator pos:line="53" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="53" pos:column="91">" for that state."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name><name pos:line="54" pos:column="17">System</name><op:operator pos:line="54" pos:column="23">.</op:operator><name pos:line="54" pos:column="24">out</name><op:operator pos:line="54" pos:column="27">.</op:operator><name pos:line="54" pos:column="28">println</name></name><argument_list pos:line="54" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="36">"Enter a two digit state code or 'all' for the average from all states."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name><name pos:line="55" pos:column="17">System</name><op:operator pos:line="55" pos:column="23">.</op:operator><name pos:line="55" pos:column="24">out</name><op:operator pos:line="55" pos:column="27">.</op:operator><name pos:line="55" pos:column="28">println</name></name><argument_list pos:line="55" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="36">"For a list of all state codes type 'list', or type 'exit' to return to the main menu."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><name pos:line="56" pos:column="17">stateSelection</name> <op:operator pos:line="56" pos:column="32">=</op:operator> <call><name><name pos:line="56" pos:column="34">in</name><op:operator pos:line="56" pos:column="36">.</op:operator><name pos:line="56" pos:column="37">nextLine</name></name><argument_list pos:line="56" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><name pos:line="57" pos:column="17">stateSelection</name> <op:operator pos:line="57" pos:column="32">=</op:operator> <call><name><name pos:line="57" pos:column="34">stateSelection</name><op:operator pos:line="57" pos:column="48">.</op:operator><name pos:line="57" pos:column="49">trim</name></name><argument_list pos:line="57" pos:column="53">()</argument_list></call><op:operator pos:line="57" pos:column="55">.</op:operator><call><name pos:line="57" pos:column="56">toUpperCase</name><argument_list pos:line="57" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
        	
        	<if pos:line="59" pos:column="17">if<condition pos:line="59" pos:column="19">(<expr><call><name><name pos:line="59" pos:column="20">stateSelection</name><op:operator pos:line="59" pos:column="34">.</op:operator><name pos:line="59" pos:column="35">equalsIgnoreCase</name></name><argument_list pos:line="59" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="52">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="59" pos:column="60">{
        		<break pos:line="60" pos:column="25">break;</break>
        	}</block></then></if>
        	
        	<if pos:line="63" pos:column="17">if<condition pos:line="63" pos:column="19">(<expr><call><name><name pos:line="63" pos:column="20">stateSelection</name><op:operator pos:line="63" pos:column="34">.</op:operator><name pos:line="63" pos:column="35">equalsIgnoreCase</name></name><argument_list pos:line="63" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="52">"list"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="63" pos:column="60">{
        		<for pos:line="64" pos:column="25">for(<init><decl><type><name pos:line="64" pos:column="29">String</name></type> <name pos:line="64" pos:column="36">i</name> <range pos:line="64" pos:column="38">: <expr><name pos:line="64" pos:column="40">stateList</name></expr></range></decl></init>)<block pos:line="64" pos:column="50">{
        			<expr_stmt><expr><call><name><name pos:line="65" pos:column="33">System</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">out</name><op:operator pos:line="65" pos:column="43">.</op:operator><name pos:line="65" pos:column="44">println</name></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name pos:line="65" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		}</block></for>
        	}</block></then>
        	<else pos:line="68" pos:column="17">else <block pos:line="68" pos:column="22">{
            	<for pos:line="69" pos:column="17">for(<init><decl><type><name pos:line="69" pos:column="21">String</name></type> <name pos:line="69" pos:column="28">i</name> <range pos:line="69" pos:column="30">: <expr><name pos:line="69" pos:column="32">stateList</name></expr></range></decl></init>)<block pos:line="69" pos:column="42">{
            		<if pos:line="70" pos:column="25">if<condition pos:line="70" pos:column="27">(<expr><call><name><name pos:line="70" pos:column="28">i</name><op:operator pos:line="70" pos:column="29">.</op:operator><name pos:line="70" pos:column="30">equalsIgnoreCase</name></name><argument_list pos:line="70" pos:column="46">(<argument><expr><name pos:line="70" pos:column="47">stateSelection</name></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="63">||</op:operator> <call><name><name pos:line="70" pos:column="66">stateSelection</name><op:operator pos:line="70" pos:column="80">.</op:operator><name pos:line="70" pos:column="81">equalsIgnoreCase</name></name><argument_list pos:line="70" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="98">"all"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="70" pos:column="105"> <block pos:line="70" pos:column="106">{
            			<expr_stmt><expr><name pos:line="71" pos:column="33">found</name> <op:operator pos:line="71" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="71" pos:column="41">true</lit:literal></expr>;</expr_stmt>
            		}</block></then></if>
            	}</block></for>
        	}</block></else></if>
        	
        	<if pos:line="76" pos:column="17">if<condition pos:line="76" pos:column="19">(<expr><name pos:line="76" pos:column="20">found</name> <op:operator pos:line="76" pos:column="26">==</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="29">false</lit:literal> <op:operator pos:line="76" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="76" pos:column="38">!</op:operator><op:operator pos:line="76" pos:column="39">(</op:operator><call><name><name pos:line="76" pos:column="40">stateSelection</name><op:operator pos:line="76" pos:column="54">.</op:operator><name pos:line="76" pos:column="55">equalsIgnoreCase</name></name><argument_list pos:line="76" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="72">"list"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="76" pos:column="79">)</op:operator></expr>)</condition><then><block pos:line="76" pos:column="81">{
        		<expr_stmt><expr><call><name><name pos:line="77" pos:column="25">System</name><op:operator pos:line="77" pos:column="31">.</op:operator><name pos:line="77" pos:column="32">out</name><op:operator pos:line="77" pos:column="35">.</op:operator><name pos:line="77" pos:column="36">println</name></name><argument_list pos:line="77" pos:column="43">(<argument><expr><name pos:line="77" pos:column="44">stateSelection</name> <op:operator pos:line="77" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="77" pos:column="61">" is not a valid state code contained in the data base."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then></if>
        	
            <if pos:line="80" pos:column="13">if<condition pos:line="80" pos:column="15">(<expr><name pos:line="80" pos:column="16">found</name> <op:operator pos:line="80" pos:column="22">==</op:operator> <lit:literal type="boolean" pos:line="80" pos:column="25">true</lit:literal></expr>)</condition><then><block pos:line="80" pos:column="30">{
            	
            	<if pos:line="82" pos:column="17">if<condition pos:line="82" pos:column="19">(<expr><call><name><name pos:line="82" pos:column="20">type</name><op:operator pos:line="82" pos:column="24">.</op:operator><name pos:line="82" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="82" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="82" pos:column="52">{
            		<expr_stmt><expr><name pos:line="83" pos:column="25">returnValue</name> <op:operator pos:line="83" pos:column="37">=</op:operator> <call><name><name pos:line="83" pos:column="39">calc</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">calculateIncomeByState</name></name><argument_list pos:line="83" pos:column="66">(<argument><expr><name pos:line="83" pos:column="67">stateSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></then> <else pos:line="84" pos:column="19">else <block pos:line="84" pos:column="24">{
            		<expr_stmt><expr><name pos:line="85" pos:column="25">returnValue</name> <op:operator pos:line="85" pos:column="37">=</op:operator> <call><name><name pos:line="85" pos:column="39">calc</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">calculateWeeklyWageByState</name></name><argument_list pos:line="85" pos:column="70">(<argument><expr><name pos:line="85" pos:column="71">stateSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></else></if>
            	
            	<if pos:line="88" pos:column="17">if<condition pos:line="88" pos:column="19">(<expr><call><name><name pos:line="88" pos:column="20">stateSelection</name><op:operator pos:line="88" pos:column="34">.</op:operator><name pos:line="88" pos:column="35">equalsIgnoreCase</name></name><argument_list pos:line="88" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="52">"all"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="88" pos:column="59">{
            		<expr_stmt><expr><name pos:line="89" pos:column="25">stateSelection</name> <op:operator pos:line="89" pos:column="40">=</op:operator> <lit:literal type="string" pos:line="89" pos:column="42">"all states"</lit:literal></expr>;</expr_stmt>
            	}</block></then></if>
                
                
            	<if pos:line="93" pos:column="17">if<condition pos:line="93" pos:column="19">(<expr><name pos:line="93" pos:column="20">returnValue</name> <op:operator pos:line="93" pos:column="32">&lt;=</op:operator> <lit:literal type="number" pos:line="93" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="93" pos:column="37">{
            		<expr_stmt><expr><call><name><name pos:line="94" pos:column="25">System</name><op:operator pos:line="94" pos:column="31">.</op:operator><name pos:line="94" pos:column="32">out</name><op:operator pos:line="94" pos:column="35">.</op:operator><name pos:line="94" pos:column="36">println</name></name><argument_list pos:line="94" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="44">"\nAverage "</lit:literal> <op:operator pos:line="94" pos:column="57">+</op:operator> <name pos:line="94" pos:column="59">fillData</name> <op:operator pos:line="94" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="94" pos:column="70">" for "</lit:literal> <op:operator pos:line="94" pos:column="78">+</op:operator>  <name pos:line="94" pos:column="81">stateSelection</name> <op:operator pos:line="94" pos:column="96">+</op:operator> <lit:literal type="string" pos:line="94" pos:column="98">" is not available. Actual value = "</lit:literal> <op:operator pos:line="94" pos:column="135">+</op:operator> <call><name><name pos:line="94" pos:column="137">myFormatter</name><op:operator pos:line="94" pos:column="148">.</op:operator><name pos:line="94" pos:column="149">format</name></name><argument_list pos:line="94" pos:column="155">(<argument><expr><name pos:line="94" pos:column="156">returnValue</name></expr></argument>)</argument_list></call> <op:operator pos:line="94" pos:column="169">+</op:operator> <lit:literal type="string" pos:line="94" pos:column="171">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></then> <else pos:line="95" pos:column="19">else <block pos:line="95" pos:column="24">{
            		<expr_stmt><expr><call><name><name pos:line="96" pos:column="25">System</name><op:operator pos:line="96" pos:column="31">.</op:operator><name pos:line="96" pos:column="32">out</name><op:operator pos:line="96" pos:column="35">.</op:operator><name pos:line="96" pos:column="36">println</name></name><argument_list pos:line="96" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="44">"\nAverage "</lit:literal> <op:operator pos:line="96" pos:column="57">+</op:operator> <name pos:line="96" pos:column="59">fillData</name> <op:operator pos:line="96" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="96" pos:column="70">" for "</lit:literal> <op:operator pos:line="96" pos:column="78">+</op:operator> <name pos:line="96" pos:column="80">stateSelection</name> <op:operator pos:line="96" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="96" pos:column="97">" is "</lit:literal> <op:operator pos:line="96" pos:column="104">+</op:operator> <call><name><name pos:line="96" pos:column="106">myFormatter</name><op:operator pos:line="96" pos:column="117">.</op:operator><name pos:line="96" pos:column="118">format</name></name><argument_list pos:line="96" pos:column="124">(<argument><expr><name pos:line="96" pos:column="125">returnValue</name></expr></argument>)</argument_list></call> <op:operator pos:line="96" pos:column="138">+</op:operator> <lit:literal type="string" pos:line="96" pos:column="140">"."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></else></if>
                
                
                
                <expr_stmt><expr><name pos:line="101" pos:column="17">found</name> <op:operator pos:line="101" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="101" pos:column="25">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
        	
        }</block> while <condition pos:line="104" pos:column="17">(<expr><lit:literal type="boolean" pos:line="104" pos:column="18">true</lit:literal></expr>)</condition>;</do>
	}</block></function>
}</block></class>
</unit>
