<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\CourseCurveTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">HashMap</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">List</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">org</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">junit</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Test</name></name>;</import>

<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">CourseCurveTest</name> <block pos:line="12" pos:column="30">{

	
	<function><type><annotation pos:line="15" pos:column="9">@<name pos:line="15" pos:column="10">Test</name></annotation>
	<specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">testCalculatePercentageCurve</name><parameter_list pos:line="16" pos:column="49">()</parameter_list> <block pos:line="16" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int</name></type> <name pos:line="17" pos:column="21">offerID</name> <init pos:line="17" pos:column="29">= <expr><lit:literal type="number" pos:line="17" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="18" pos:column="17">List</name><argument_list pos:line="18" pos:column="21">&lt;<argument><name pos:line="18" pos:column="22">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="18" pos:column="31">curvingCriteria</name> <init pos:line="18" pos:column="47">= <expr><op:operator pos:line="18" pos:column="49">new</op:operator> <call><name><name pos:line="18" pos:column="53">ArrayList</name><argument_list pos:line="18" pos:column="62">&lt;<argument><name pos:line="18" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="18" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="19" pos:column="17">curvingCriteria</name><op:operator pos:line="19" pos:column="32">.</op:operator><name pos:line="19" pos:column="33">add</name></name><argument_list pos:line="19" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="19" pos:column="37">30</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="20" pos:column="17">curvingCriteria</name><op:operator pos:line="20" pos:column="32">.</op:operator><name pos:line="20" pos:column="33">add</name></name><argument_list pos:line="20" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="20" pos:column="37">40</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="21" pos:column="17">curvingCriteria</name><op:operator pos:line="21" pos:column="32">.</op:operator><name pos:line="21" pos:column="33">add</name></name><argument_list pos:line="21" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="37">30</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">CourseCurve</name></type> <name pos:line="23" pos:column="29">curve</name> <init pos:line="23" pos:column="35">= <expr><call><name><name pos:line="23" pos:column="37">CourseCurve</name><op:operator pos:line="23" pos:column="48">.</op:operator><name pos:line="23" pos:column="49">calculatePercentageCurve</name></name><argument_list pos:line="23" pos:column="73">(<argument><expr><name pos:line="23" pos:column="74">offerID</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="83">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">HashMap</name><argument_list pos:line="25" pos:column="24">&lt;<argument><name pos:line="25" pos:column="25">Student</name></argument>,<argument><name pos:line="25" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="41">courseCurve</name> <init pos:line="25" pos:column="53">= <expr><call><name><name pos:line="25" pos:column="55">curve</name><op:operator pos:line="25" pos:column="60">.</op:operator><name pos:line="25" pos:column="61">getCourseCurve</name></name><argument_list pos:line="25" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="27" pos:column="17">for(<init><decl><type><name pos:line="27" pos:column="21">Student</name></type> <name pos:line="27" pos:column="29">students</name><range pos:line="27" pos:column="37">:<expr><call><name><name pos:line="27" pos:column="38">courseCurve</name><op:operator pos:line="27" pos:column="49">.</op:operator><name pos:line="27" pos:column="50">keySet</name></name><argument_list pos:line="27" pos:column="56">()</argument_list></call></expr></range></decl></init>)<block pos:line="27" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="28" pos:column="25">int</name></type> <name pos:line="28" pos:column="29">UIN</name> <init pos:line="28" pos:column="33">= <expr><call><name><name pos:line="28" pos:column="35">students</name><op:operator pos:line="28" pos:column="43">.</op:operator><name pos:line="28" pos:column="44">getUIN</name></name><argument_list pos:line="28" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">String</name></type> <name pos:line="29" pos:column="32">grade</name> <init pos:line="29" pos:column="38">= <expr><call><name><name pos:line="29" pos:column="40">courseCurve</name><op:operator pos:line="29" pos:column="51">.</op:operator><name pos:line="29" pos:column="52">get</name></name><argument_list pos:line="29" pos:column="55">(<argument><expr><name pos:line="29" pos:column="56">students</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="31" pos:column="25">System</name><op:operator pos:line="31" pos:column="31">.</op:operator><name pos:line="31" pos:column="32">out</name><op:operator pos:line="31" pos:column="35">.</op:operator><name pos:line="31" pos:column="36">println</name></name><argument_list pos:line="31" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="44">"UIN: "</lit:literal> <op:operator pos:line="31" pos:column="52">+</op:operator> <name pos:line="31" pos:column="54">UIN</name> <op:operator pos:line="31" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="31" pos:column="60">" Grade: "</lit:literal> <op:operator pos:line="31" pos:column="71">+</op:operator> <name pos:line="31" pos:column="73">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">assertTrue</name><argument_list pos:line="34" pos:column="27">(<argument><expr><call><name><name pos:line="34" pos:column="28">courseCurve</name><op:operator pos:line="34" pos:column="39">.</op:operator><name pos:line="34" pos:column="40">size</name></name><argument_list pos:line="34" pos:column="44">()</argument_list></call> <op:operator pos:line="34" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="37" pos:column="9">@<name pos:line="37" pos:column="10">Test</name></annotation>
	<specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">testCalculateAbsoluteCurve</name><parameter_list pos:line="38" pos:column="47">()</parameter_list> <block pos:line="38" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int</name></type> <name pos:line="39" pos:column="21">offerID</name> <init pos:line="39" pos:column="29">= <expr><lit:literal type="number" pos:line="39" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="40" pos:column="17">List</name><argument_list pos:line="40" pos:column="21">&lt;<argument><name pos:line="40" pos:column="22">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="31">curvingCriteria</name> <init pos:line="40" pos:column="47">= <expr><op:operator pos:line="40" pos:column="49">new</op:operator> <call><name><name pos:line="40" pos:column="53">ArrayList</name><argument_list pos:line="40" pos:column="62">&lt;<argument><name pos:line="40" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="41" pos:column="17">curvingCriteria</name><op:operator pos:line="41" pos:column="32">.</op:operator><name pos:line="41" pos:column="33">add</name></name><argument_list pos:line="41" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="37">80</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="42" pos:column="17">curvingCriteria</name><op:operator pos:line="42" pos:column="32">.</op:operator><name pos:line="42" pos:column="33">add</name></name><argument_list pos:line="42" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="37">70</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="43" pos:column="17">curvingCriteria</name><op:operator pos:line="43" pos:column="32">.</op:operator><name pos:line="43" pos:column="33">add</name></name><argument_list pos:line="43" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="37">20</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">CourseCurve</name></type> <name pos:line="45" pos:column="29">curve</name> <init pos:line="45" pos:column="35">= <expr><call><name><name pos:line="45" pos:column="37">CourseCurve</name><op:operator pos:line="45" pos:column="48">.</op:operator><name pos:line="45" pos:column="49">calculateAbsoluteCurve</name></name><argument_list pos:line="45" pos:column="71">(<argument><expr><name pos:line="45" pos:column="72">offerID</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="81">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="47" pos:column="17">HashMap</name><argument_list pos:line="47" pos:column="24">&lt;<argument><name pos:line="47" pos:column="25">Student</name></argument>,<argument><name pos:line="47" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="41">courseCurve</name> <init pos:line="47" pos:column="53">= <expr><call><name><name pos:line="47" pos:column="55">curve</name><op:operator pos:line="47" pos:column="60">.</op:operator><name pos:line="47" pos:column="61">getCourseCurve</name></name><argument_list pos:line="47" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="49" pos:column="17">for(<init><decl><type><name pos:line="49" pos:column="21">Student</name></type> <name pos:line="49" pos:column="29">students</name><range pos:line="49" pos:column="37">:<expr><call><name><name pos:line="49" pos:column="38">courseCurve</name><op:operator pos:line="49" pos:column="49">.</op:operator><name pos:line="49" pos:column="50">keySet</name></name><argument_list pos:line="49" pos:column="56">()</argument_list></call></expr></range></decl></init>)<block pos:line="49" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">int</name></type> <name pos:line="50" pos:column="29">UIN</name> <init pos:line="50" pos:column="33">= <expr><call><name><name pos:line="50" pos:column="35">students</name><op:operator pos:line="50" pos:column="43">.</op:operator><name pos:line="50" pos:column="44">getUIN</name></name><argument_list pos:line="50" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">String</name></type> <name pos:line="51" pos:column="32">grade</name> <init pos:line="51" pos:column="38">= <expr><call><name><name pos:line="51" pos:column="40">courseCurve</name><op:operator pos:line="51" pos:column="51">.</op:operator><name pos:line="51" pos:column="52">get</name></name><argument_list pos:line="51" pos:column="55">(<argument><expr><name pos:line="51" pos:column="56">students</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">System</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">out</name><op:operator pos:line="53" pos:column="35">.</op:operator><name pos:line="53" pos:column="36">println</name></name><argument_list pos:line="53" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="44">"UIN: "</lit:literal> <op:operator pos:line="53" pos:column="52">+</op:operator> <name pos:line="53" pos:column="54">UIN</name> <op:operator pos:line="53" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="53" pos:column="60">" Grade: "</lit:literal> <op:operator pos:line="53" pos:column="71">+</op:operator> <name pos:line="53" pos:column="73">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<comment type="line" pos:line="55" pos:column="17">// assertNotNull(curve);</comment>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">assertTrue</name><argument_list pos:line="56" pos:column="27">(<argument><expr><call><name><name pos:line="56" pos:column="28">courseCurve</name><op:operator pos:line="56" pos:column="39">.</op:operator><name pos:line="56" pos:column="40">size</name></name><argument_list pos:line="56" pos:column="44">()</argument_list></call> <op:operator pos:line="56" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
 
	<function><type><annotation pos:line="59" pos:column="9">@<name pos:line="59" pos:column="10">Test</name></annotation>
	<specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">testCalculateAbsoluteCurveFail</name><parameter_list pos:line="60" pos:column="51">()</parameter_list> <block pos:line="60" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">int</name></type> <name pos:line="61" pos:column="21">offerID</name> <init pos:line="61" pos:column="29">= <expr><lit:literal type="number" pos:line="61" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="62" pos:column="17">List</name><argument_list pos:line="62" pos:column="21">&lt;<argument><name pos:line="62" pos:column="22">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="62" pos:column="31">curvingCriteria</name> <init pos:line="62" pos:column="47">= <expr><op:operator pos:line="62" pos:column="49">new</op:operator> <call><name><name pos:line="62" pos:column="53">ArrayList</name><argument_list pos:line="62" pos:column="62">&lt;<argument><name pos:line="62" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="63" pos:column="17">curvingCriteria</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">add</name></name><argument_list pos:line="63" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="37">80</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="64" pos:column="17">curvingCriteria</name><op:operator pos:line="64" pos:column="32">.</op:operator><name pos:line="64" pos:column="33">add</name></name><argument_list pos:line="64" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="37">70</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="65" pos:column="17">curvingCriteria</name><op:operator pos:line="65" pos:column="32">.</op:operator><name pos:line="65" pos:column="33">add</name></name><argument_list pos:line="65" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="37">40</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">CourseCurve</name></type> <name pos:line="67" pos:column="29">curve</name> <init pos:line="67" pos:column="35">= <expr><call><name><name pos:line="67" pos:column="37">CourseCurve</name><op:operator pos:line="67" pos:column="48">.</op:operator><name pos:line="67" pos:column="49">calculateAbsoluteCurve</name></name><argument_list pos:line="67" pos:column="71">(<argument><expr><name pos:line="67" pos:column="72">offerID</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="81">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="68" pos:column="17">assertNull</name><argument_list pos:line="68" pos:column="27">(<argument><expr><call><name><name pos:line="68" pos:column="28">curve</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">getCourseCurve</name></name><argument_list pos:line="68" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="71" pos:column="9">@<name pos:line="71" pos:column="10">Test</name></annotation>
	<specifier pos:line="72" pos:column="9">public</specifier> <name pos:line="72" pos:column="16">void</name></type> <name pos:line="72" pos:column="21">testCalculateMaxGapCurve</name><parameter_list pos:line="72" pos:column="45">()</parameter_list> <block pos:line="72" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">int</name></type> <name pos:line="73" pos:column="21">offerID</name> <init pos:line="73" pos:column="29">= <expr><lit:literal type="number" pos:line="73" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="74" pos:column="17">List</name><argument_list pos:line="74" pos:column="21">&lt;<argument><name pos:line="74" pos:column="22">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="31">curvingCriteria</name> <init pos:line="74" pos:column="47">= <expr><op:operator pos:line="74" pos:column="49">new</op:operator> <call><name><name pos:line="74" pos:column="53">ArrayList</name><argument_list pos:line="74" pos:column="62">&lt;<argument><name pos:line="74" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="74" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="75" pos:column="17">curvingCriteria</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">add</name></name><argument_list pos:line="75" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="37">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="76" pos:column="17">curvingCriteria</name><op:operator pos:line="76" pos:column="32">.</op:operator><name pos:line="76" pos:column="33">add</name></name><argument_list pos:line="76" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="76" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">curvingCriteria</name><op:operator pos:line="77" pos:column="32">.</op:operator><name pos:line="77" pos:column="33">add</name></name><argument_list pos:line="77" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">CourseCurve</name></type> <name pos:line="79" pos:column="29">curve</name> <init pos:line="79" pos:column="35">= <expr><call><name><name pos:line="79" pos:column="37">CourseCurve</name><op:operator pos:line="79" pos:column="48">.</op:operator><name pos:line="79" pos:column="49">calculateMaxGapCurve</name></name><argument_list pos:line="79" pos:column="69">(<argument><expr><name pos:line="79" pos:column="70">offerID</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="79">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="81" pos:column="17">HashMap</name><argument_list pos:line="81" pos:column="24">&lt;<argument><name pos:line="81" pos:column="25">Student</name></argument>,<argument><name pos:line="81" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="41">courseCurve</name> <init pos:line="81" pos:column="53">= <expr><call><name><name pos:line="81" pos:column="55">curve</name><op:operator pos:line="81" pos:column="60">.</op:operator><name pos:line="81" pos:column="61">getCourseCurve</name></name><argument_list pos:line="81" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">assertNotNull</name><argument_list pos:line="82" pos:column="30">(<argument><expr><name pos:line="82" pos:column="31">curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	
	<function><type><annotation pos:line="86" pos:column="9">@<name pos:line="86" pos:column="10">Test</name></annotation>
	<specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">testUpdateGrades</name><parameter_list pos:line="87" pos:column="37">()</parameter_list> <block pos:line="87" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int</name></type> <name pos:line="88" pos:column="21">offerID</name> <init pos:line="88" pos:column="29">= <expr><lit:literal type="number" pos:line="88" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="89" pos:column="17">List</name><argument_list pos:line="89" pos:column="21">&lt;<argument><name pos:line="89" pos:column="22">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="31">curvingCriteria</name> <init pos:line="89" pos:column="47">= <expr><op:operator pos:line="89" pos:column="49">new</op:operator> <call><name><name pos:line="89" pos:column="53">ArrayList</name><argument_list pos:line="89" pos:column="62">&lt;<argument><name pos:line="89" pos:column="63">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="89" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="90" pos:column="17">curvingCriteria</name><op:operator pos:line="90" pos:column="32">.</op:operator><name pos:line="90" pos:column="33">add</name></name><argument_list pos:line="90" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="37">80</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="91" pos:column="17">curvingCriteria</name><op:operator pos:line="91" pos:column="32">.</op:operator><name pos:line="91" pos:column="33">add</name></name><argument_list pos:line="91" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="91" pos:column="37">70</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="92" pos:column="17">curvingCriteria</name><op:operator pos:line="92" pos:column="32">.</op:operator><name pos:line="92" pos:column="33">add</name></name><argument_list pos:line="92" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="37">20</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">CourseOffered</name></type> <name pos:line="93" pos:column="31">offered</name> <init pos:line="93" pos:column="39">= <expr><lit:literal type="null" pos:line="93" pos:column="41">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="94" pos:column="17">try <block pos:line="94" pos:column="21">{
			<expr_stmt><expr><name pos:line="95" pos:column="25">offered</name> <op:operator pos:line="95" pos:column="33">=</op:operator> <op:operator pos:line="95" pos:column="35">new</op:operator> <call><name pos:line="95" pos:column="39">CourseOffered</name><argument_list pos:line="95" pos:column="52">(<argument><expr><name pos:line="95" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="96" pos:column="19">catch <parameter_list pos:line="96" pos:column="25">(<param><decl><type><name><name pos:line="96" pos:column="26">Course</name><op:operator pos:line="96" pos:column="32">.</op:operator><name pos:line="96" pos:column="33">CourseDoesNotExistException</name></name></type>
				| <type><name><name pos:line="97" pos:column="35">CourseOffered</name><op:operator pos:line="97" pos:column="48">.</op:operator><name pos:line="97" pos:column="49">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="97" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="88">{
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">e</name><op:operator pos:line="98" pos:column="26">.</op:operator><name pos:line="98" pos:column="27">printStackTrace</name></name><argument_list pos:line="98" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="100" pos:column="17">CourseCurve</name></type> <name pos:line="100" pos:column="29">curve</name> <init pos:line="100" pos:column="35">= <expr><call><name><name pos:line="100" pos:column="37">CourseCurve</name><op:operator pos:line="100" pos:column="48">.</op:operator><name pos:line="100" pos:column="49">calculateAbsoluteCurve</name></name><argument_list pos:line="100" pos:column="71">(<argument><expr><name pos:line="100" pos:column="72">offerID</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="81">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="101" pos:column="17">HashMap</name><argument_list pos:line="101" pos:column="24">&lt;<argument><name pos:line="101" pos:column="25">Student</name></argument>,<argument><name pos:line="101" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="41">courseCurve</name> <init pos:line="101" pos:column="53">= <expr><call><name><name pos:line="101" pos:column="55">curve</name><op:operator pos:line="101" pos:column="60">.</op:operator><name pos:line="101" pos:column="61">getCourseCurve</name></name><argument_list pos:line="101" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="102" pos:column="17">StudentEnrollment</name><op:operator pos:line="102" pos:column="34">.</op:operator><name pos:line="102" pos:column="35">updateAllStudentGrade</name></name><argument_list pos:line="102" pos:column="56">(<argument><expr><name pos:line="102" pos:column="57">courseCurve</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="70">offered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
