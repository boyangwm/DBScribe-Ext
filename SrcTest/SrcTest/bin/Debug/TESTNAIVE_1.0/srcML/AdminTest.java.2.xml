<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\AdminTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>
<import pos:line="3" pos:column="1">import static <name><name pos:line="3" pos:column="15">org</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">junit</name><op:operator pos:line="3" pos:column="24">.</op:operator><name pos:line="3" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Test</name></name>;</import>





<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">AdminTest</name> <block pos:line="13" pos:column="24">{

	
	<function><type><annotation pos:line="16" pos:column="9">@<name pos:line="16" pos:column="10">Test</name></annotation>
	<specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">testAddAdmin2</name><parameter_list pos:line="17" pos:column="34">()</parameter_list> <block pos:line="17" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">Department</name></type> <name pos:line="19" pos:column="28">d</name></decl>;</decl_stmt>
		<try pos:line="20" pos:column="17">try <block pos:line="20" pos:column="21">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">d</name> <op:operator pos:line="21" pos:column="27">=</op:operator> <op:operator pos:line="21" pos:column="29">new</op:operator> <call><name pos:line="21" pos:column="33">Department</name><argument_list pos:line="21" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="44">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">boolean</name></type> <name pos:line="22" pos:column="33">check</name><init pos:line="22" pos:column="38">=<expr><call><name><name pos:line="22" pos:column="39">Admin</name><op:operator pos:line="22" pos:column="44">.</op:operator><name pos:line="22" pos:column="45">addAdmin</name></name><argument_list pos:line="22" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="54">"testing"</lit:literal></expr></argument>,<argument><expr><name pos:line="22" pos:column="64">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">assertFalse</name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="24" pos:column="19">catch <parameter_list pos:line="24" pos:column="25">(<param><decl><type><name><name pos:line="24" pos:column="26">Department</name><op:operator pos:line="24" pos:column="36">.</op:operator><name pos:line="24" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="24" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="73">{
			<comment type="line" pos:line="25" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">e1</name><op:operator pos:line="26" pos:column="27">.</op:operator><name pos:line="26" pos:column="28">printStackTrace</name></name><argument_list pos:line="26" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="27" pos:column="19">catch <parameter_list pos:line="27" pos:column="25">(<param><decl><type><name><name pos:line="27" pos:column="26">People</name><op:operator pos:line="27" pos:column="32">.</op:operator><name pos:line="27" pos:column="33">loginDetailsnotAdded</name></name></type> <name pos:line="27" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="57">{
			<comment type="line" pos:line="28" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">e</name><op:operator pos:line="29" pos:column="26">.</op:operator><name pos:line="29" pos:column="27">printStackTrace</name></name><argument_list pos:line="29" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="34" pos:column="9">@<name pos:line="34" pos:column="10">Test</name></annotation>
	<specifier pos:line="35" pos:column="9">public</specifier> <name pos:line="35" pos:column="16">void</name></type> <name pos:line="35" pos:column="21">testAddAdmin3</name><parameter_list pos:line="35" pos:column="34">()</parameter_list> <block pos:line="35" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">Department</name></type> <name pos:line="37" pos:column="28">d</name></decl>;</decl_stmt>
		<try pos:line="38" pos:column="17">try <block pos:line="38" pos:column="21">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">d</name> <op:operator pos:line="39" pos:column="27">=</op:operator> <op:operator pos:line="39" pos:column="29">new</op:operator> <call><name pos:line="39" pos:column="33">Department</name><argument_list pos:line="39" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="44">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">boolean</name></type> <name pos:line="40" pos:column="33">check</name><init pos:line="40" pos:column="38">=<expr><call><name><name pos:line="40" pos:column="39">Admin</name><op:operator pos:line="40" pos:column="44">.</op:operator><name pos:line="40" pos:column="45">addAdmin</name></name><argument_list pos:line="40" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="40" pos:column="54">""</lit:literal></expr></argument>,<argument><expr><name pos:line="40" pos:column="57">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">assertFalse</name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="42" pos:column="19">catch <parameter_list pos:line="42" pos:column="25">(<param><decl><type><name><name pos:line="42" pos:column="26">Department</name><op:operator pos:line="42" pos:column="36">.</op:operator><name pos:line="42" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="42" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="73">{
			<comment type="line" pos:line="43" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">e1</name><op:operator pos:line="44" pos:column="27">.</op:operator><name pos:line="44" pos:column="28">printStackTrace</name></name><argument_list pos:line="44" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="45" pos:column="19">catch <parameter_list pos:line="45" pos:column="25">(<param><decl><type><name><name pos:line="45" pos:column="26">People</name><op:operator pos:line="45" pos:column="32">.</op:operator><name pos:line="45" pos:column="33">loginDetailsnotAdded</name></name></type> <name pos:line="45" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="57">{
			<comment type="line" pos:line="46" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">e</name><op:operator pos:line="47" pos:column="26">.</op:operator><name pos:line="47" pos:column="27">printStackTrace</name></name><argument_list pos:line="47" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="52" pos:column="9">@<name pos:line="52" pos:column="10">Test</name></annotation>
	<specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">testAddAdmin4</name><parameter_list pos:line="53" pos:column="34">()</parameter_list> <block pos:line="53" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">Department</name></type> <name pos:line="55" pos:column="28">d</name></decl>;</decl_stmt>
		<try pos:line="56" pos:column="17">try <block pos:line="56" pos:column="21">{
			<expr_stmt><expr><name pos:line="57" pos:column="25">d</name> <op:operator pos:line="57" pos:column="27">=</op:operator> <op:operator pos:line="57" pos:column="29">new</op:operator> <call><name pos:line="57" pos:column="33">Department</name><argument_list pos:line="57" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="57" pos:column="44">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">boolean</name></type> <name pos:line="58" pos:column="33">check</name><init pos:line="58" pos:column="38">=<expr><call><name><name pos:line="58" pos:column="39">Admin</name><op:operator pos:line="58" pos:column="44">.</op:operator><name pos:line="58" pos:column="45">addAdmin</name></name><argument_list pos:line="58" pos:column="53">(<argument><expr><lit:literal type="null" pos:line="58" pos:column="54">null</lit:literal></expr></argument>,<argument><expr><name pos:line="58" pos:column="59">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">assertFalse</name><argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="60" pos:column="19">catch <parameter_list pos:line="60" pos:column="25">(<param><decl><type><name><name pos:line="60" pos:column="26">Department</name><op:operator pos:line="60" pos:column="36">.</op:operator><name pos:line="60" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="60" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="73">{
			<comment type="line" pos:line="61" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="62" pos:column="25">e1</name><op:operator pos:line="62" pos:column="27">.</op:operator><name pos:line="62" pos:column="28">printStackTrace</name></name><argument_list pos:line="62" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="63" pos:column="19">catch <parameter_list pos:line="63" pos:column="25">(<param><decl><type><name><name pos:line="63" pos:column="26">People</name><op:operator pos:line="63" pos:column="32">.</op:operator><name pos:line="63" pos:column="33">loginDetailsnotAdded</name></name></type> <name pos:line="63" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="57">{
			<comment type="line" pos:line="64" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="65" pos:column="25">e</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">printStackTrace</name></name><argument_list pos:line="65" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="70" pos:column="9">@<name pos:line="70" pos:column="10">Test</name></annotation>
	<specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">testAddAdmin5</name><parameter_list pos:line="71" pos:column="34">()</parameter_list> <block pos:line="71" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">Department</name></type> <name pos:line="73" pos:column="28">d</name></decl>;</decl_stmt>
		<try pos:line="74" pos:column="17">try <block pos:line="74" pos:column="21">{
			<expr_stmt><expr><name pos:line="75" pos:column="25">d</name> <op:operator pos:line="75" pos:column="27">=</op:operator> <op:operator pos:line="75" pos:column="29">new</op:operator> <call><name pos:line="75" pos:column="33">Department</name><argument_list pos:line="75" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">boolean</name></type> <name pos:line="76" pos:column="33">check</name><init pos:line="76" pos:column="38">=<expr><call><name><name pos:line="76" pos:column="39">Admin</name><op:operator pos:line="76" pos:column="44">.</op:operator><name pos:line="76" pos:column="45">addAdmin</name></name><argument_list pos:line="76" pos:column="53">(<argument><expr><lit:literal type="null" pos:line="76" pos:column="54">null</lit:literal></expr></argument>,<argument><expr><name pos:line="76" pos:column="59">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="77" pos:column="25">assertFalse</name><argument_list pos:line="77" pos:column="36">(<argument><expr><name pos:line="77" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="78" pos:column="19">catch <parameter_list pos:line="78" pos:column="25">(<param><decl><type><name><name pos:line="78" pos:column="26">Department</name><op:operator pos:line="78" pos:column="36">.</op:operator><name pos:line="78" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="78" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="73">{
			<comment type="line" pos:line="79" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">e1</name><op:operator pos:line="80" pos:column="27">.</op:operator><name pos:line="80" pos:column="28">printStackTrace</name></name><argument_list pos:line="80" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="81" pos:column="19">catch <parameter_list pos:line="81" pos:column="25">(<param><decl><type><name><name pos:line="81" pos:column="26">People</name><op:operator pos:line="81" pos:column="32">.</op:operator><name pos:line="81" pos:column="33">loginDetailsnotAdded</name></name></type> <name pos:line="81" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="57">{
			<comment type="line" pos:line="82" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">e</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">printStackTrace</name></name><argument_list pos:line="83" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">testAddAdmin6</name><parameter_list pos:line="89" pos:column="34">()</parameter_list> <block pos:line="89" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">Department</name></type> <name pos:line="91" pos:column="28">d</name></decl>;</decl_stmt>
		<try pos:line="92" pos:column="17">try <block pos:line="92" pos:column="21">{
			<expr_stmt><expr><name pos:line="93" pos:column="25">d</name> <op:operator pos:line="93" pos:column="27">=</op:operator> <op:operator pos:line="93" pos:column="29">new</op:operator> <call><name pos:line="93" pos:column="33">Department</name><argument_list pos:line="93" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="93" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="94" pos:column="25">boolean</name></type> <name pos:line="94" pos:column="33">check</name><init pos:line="94" pos:column="38">=<expr><call><name><name pos:line="94" pos:column="39">Admin</name><op:operator pos:line="94" pos:column="44">.</op:operator><name pos:line="94" pos:column="45">addAdmin</name></name><argument_list pos:line="94" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="54">""</lit:literal></expr></argument>,<argument><expr><name pos:line="94" pos:column="57">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">assertFalse</name><argument_list pos:line="95" pos:column="36">(<argument><expr><name pos:line="95" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="96" pos:column="19">catch <parameter_list pos:line="96" pos:column="25">(<param><decl><type><name><name pos:line="96" pos:column="26">Department</name><op:operator pos:line="96" pos:column="36">.</op:operator><name pos:line="96" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="96" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="73">{
			<comment type="line" pos:line="97" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">e1</name><op:operator pos:line="98" pos:column="27">.</op:operator><name pos:line="98" pos:column="28">printStackTrace</name></name><argument_list pos:line="98" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="99" pos:column="19">catch <parameter_list pos:line="99" pos:column="25">(<param><decl><type><name><name pos:line="99" pos:column="26">People</name><op:operator pos:line="99" pos:column="32">.</op:operator><name pos:line="99" pos:column="33">loginDetailsnotAdded</name></name></type> <name pos:line="99" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="57">{
			<comment type="line" pos:line="100" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="101" pos:column="25">e</name><op:operator pos:line="101" pos:column="26">.</op:operator><name pos:line="101" pos:column="27">printStackTrace</name></name><argument_list pos:line="101" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>


	<function><type><annotation pos:line="107" pos:column="9">@<name pos:line="107" pos:column="10">Test</name></annotation>
	<specifier pos:line="108" pos:column="9">public</specifier> <name pos:line="108" pos:column="16">void</name></type> <name pos:line="108" pos:column="21">testGetAllAdmin</name><parameter_list pos:line="108" pos:column="36">()</parameter_list> <block pos:line="108" pos:column="39">{
		
		<decl_stmt><decl><type><name><name pos:line="110" pos:column="17">ArrayList</name><argument_list pos:line="110" pos:column="26">&lt;<argument><name pos:line="110" pos:column="27">Admin</name></argument>&gt;</argument_list></name></type> <name pos:line="110" pos:column="34">getAllAdminTest</name><init pos:line="110" pos:column="49">=<expr><call><name><name pos:line="110" pos:column="50">Admin</name><op:operator pos:line="110" pos:column="55">.</op:operator><name pos:line="110" pos:column="56">getAllAdmin</name></name><argument_list pos:line="110" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">assertNotNull</name><argument_list pos:line="111" pos:column="30">(<argument><expr><name pos:line="111" pos:column="31">getAllAdminTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="114" pos:column="9">@<name pos:line="114" pos:column="10">Test</name></annotation>
	<specifier pos:line="115" pos:column="9">public</specifier> <name pos:line="115" pos:column="16">void</name></type> <name pos:line="115" pos:column="21">testUpdateAdminUserName1</name><parameter_list pos:line="115" pos:column="45">()</parameter_list> <block pos:line="115" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">Admin</name></type> <name pos:line="117" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="118" pos:column="17">try <block pos:line="118" pos:column="21">{
			<expr_stmt><expr><name pos:line="119" pos:column="25">ad</name> <op:operator pos:line="119" pos:column="28">=</op:operator> <op:operator pos:line="119" pos:column="30">new</op:operator> <call><name pos:line="119" pos:column="34">Admin</name><argument_list pos:line="119" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="119" pos:column="40">581</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="120" pos:column="25">boolean</name></type> <name pos:line="120" pos:column="33">check</name><init pos:line="120" pos:column="38">=<expr><call><name><name pos:line="120" pos:column="39">ad</name><op:operator pos:line="120" pos:column="41">.</op:operator><name pos:line="120" pos:column="42">updateAdminUserName</name></name><argument_list pos:line="120" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="62">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="121" pos:column="25">assertTrue</name><argument_list pos:line="121" pos:column="35">(<argument><expr><name pos:line="121" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="122" pos:column="19">catch <parameter_list pos:line="122" pos:column="25">(<param><decl><type><name><name pos:line="122" pos:column="26">People</name><op:operator pos:line="122" pos:column="32">.</op:operator><name pos:line="122" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="122" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="122" pos:column="64">{
			<comment type="line" pos:line="123" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="124" pos:column="25">e</name><op:operator pos:line="124" pos:column="26">.</op:operator><name pos:line="124" pos:column="27">printStackTrace</name></name><argument_list pos:line="124" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="130" pos:column="9">@<name pos:line="130" pos:column="10">Test</name></annotation>
	<specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">testUpdateAdminUserName2</name><parameter_list pos:line="131" pos:column="45">()</parameter_list> <block pos:line="131" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">Admin</name></type> <name pos:line="133" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="134" pos:column="17">try <block pos:line="134" pos:column="21">{
			<expr_stmt><expr><name pos:line="135" pos:column="25">ad</name> <op:operator pos:line="135" pos:column="28">=</op:operator> <op:operator pos:line="135" pos:column="30">new</op:operator> <call><name pos:line="135" pos:column="34">Admin</name><argument_list pos:line="135" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="135" pos:column="40">581</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="136" pos:column="25">boolean</name></type> <name pos:line="136" pos:column="33">check</name><init pos:line="136" pos:column="38">=<expr><call><name><name pos:line="136" pos:column="39">ad</name><op:operator pos:line="136" pos:column="41">.</op:operator><name pos:line="136" pos:column="42">updateAdminUserName</name></name><argument_list pos:line="136" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="62">"leona"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="137" pos:column="25">assertTrue</name><argument_list pos:line="137" pos:column="35">(<argument><expr><name pos:line="137" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="138" pos:column="19">catch <parameter_list pos:line="138" pos:column="25">(<param><decl><type><name><name pos:line="138" pos:column="26">People</name><op:operator pos:line="138" pos:column="32">.</op:operator><name pos:line="138" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="138" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="64">{
			<comment type="line" pos:line="139" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="140" pos:column="25">e</name><op:operator pos:line="140" pos:column="26">.</op:operator><name pos:line="140" pos:column="27">printStackTrace</name></name><argument_list pos:line="140" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="146" pos:column="9">@<name pos:line="146" pos:column="10">Test</name><argument_list pos:line="146" pos:column="14">(<argument><expr><name pos:line="146" pos:column="15">expected</name><op:operator pos:line="146" pos:column="23">=</op:operator><name><name pos:line="146" pos:column="24">People</name><op:operator pos:line="146" pos:column="30">.</op:operator><name pos:line="146" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="146" pos:column="58">.</op:operator><name pos:line="146" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="147" pos:column="9">public</specifier> <name pos:line="147" pos:column="16">void</name></type> <name pos:line="147" pos:column="21">testUpdateAdminUserName3</name><parameter_list pos:line="147" pos:column="45">()</parameter_list> <throws pos:line="147" pos:column="48">throws <argument><expr><name><name pos:line="147" pos:column="55">People</name><op:operator pos:line="147" pos:column="61">.</op:operator><name pos:line="147" pos:column="62">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="147" pos:column="90">{
		
		<decl_stmt><decl><type><name pos:line="149" pos:column="17">Admin</name></type> <name pos:line="149" pos:column="23">ad</name> <init pos:line="149" pos:column="26">= <expr><op:operator pos:line="149" pos:column="28">new</op:operator> <call><name pos:line="149" pos:column="32">Admin</name><argument_list pos:line="149" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="149" pos:column="38">8</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="154" pos:column="9">@<name pos:line="154" pos:column="10">Test</name></annotation>
	<specifier pos:line="155" pos:column="9">public</specifier> <name pos:line="155" pos:column="16">void</name></type> <name pos:line="155" pos:column="21">testUpdateAdminUserName4</name><parameter_list pos:line="155" pos:column="45">()</parameter_list> <block pos:line="155" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="157" pos:column="17">Admin</name></type> <name pos:line="157" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="158" pos:column="17">try <block pos:line="158" pos:column="21">{
			<expr_stmt><expr><name pos:line="159" pos:column="25">ad</name> <op:operator pos:line="159" pos:column="28">=</op:operator> <op:operator pos:line="159" pos:column="30">new</op:operator> <call><name pos:line="159" pos:column="34">Admin</name><argument_list pos:line="159" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="159" pos:column="40">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="160" pos:column="25">boolean</name></type> <name pos:line="160" pos:column="33">check</name><init pos:line="160" pos:column="38">=<expr><call><name><name pos:line="160" pos:column="39">ad</name><op:operator pos:line="160" pos:column="41">.</op:operator><name pos:line="160" pos:column="42">updateAdminUserName</name></name><argument_list pos:line="160" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="62">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="161" pos:column="25">assertFalse</name><argument_list pos:line="161" pos:column="36">(<argument><expr><name pos:line="161" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="162" pos:column="19">catch <parameter_list pos:line="162" pos:column="25">(<param><decl><type><name><name pos:line="162" pos:column="26">People</name><op:operator pos:line="162" pos:column="32">.</op:operator><name pos:line="162" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="162" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="64">{
			<comment type="line" pos:line="163" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="164" pos:column="25">e</name><op:operator pos:line="164" pos:column="26">.</op:operator><name pos:line="164" pos:column="27">printStackTrace</name></name><argument_list pos:line="164" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="170" pos:column="9">@<name pos:line="170" pos:column="10">Test</name></annotation>
	<specifier pos:line="171" pos:column="9">public</specifier> <name pos:line="171" pos:column="16">void</name></type> <name pos:line="171" pos:column="21">testUpdateAdminUserName5</name><parameter_list pos:line="171" pos:column="45">()</parameter_list> <block pos:line="171" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">Admin</name></type> <name pos:line="173" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="174" pos:column="17">try <block pos:line="174" pos:column="21">{
			<expr_stmt><expr><name pos:line="175" pos:column="25">ad</name> <op:operator pos:line="175" pos:column="28">=</op:operator> <op:operator pos:line="175" pos:column="30">new</op:operator> <call><name pos:line="175" pos:column="34">Admin</name><argument_list pos:line="175" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="40">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="176" pos:column="25">boolean</name></type> <name pos:line="176" pos:column="33">check</name><init pos:line="176" pos:column="38">=<expr><call><name><name pos:line="176" pos:column="39">ad</name><op:operator pos:line="176" pos:column="41">.</op:operator><name pos:line="176" pos:column="42">updateAdminUserName</name></name><argument_list pos:line="176" pos:column="61">(<argument><expr><lit:literal type="null" pos:line="176" pos:column="62">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="177" pos:column="25">assertFalse</name><argument_list pos:line="177" pos:column="36">(<argument><expr><name pos:line="177" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="178" pos:column="19">catch <parameter_list pos:line="178" pos:column="25">(<param><decl><type><name><name pos:line="178" pos:column="26">People</name><op:operator pos:line="178" pos:column="32">.</op:operator><name pos:line="178" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="178" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="64">{
			<comment type="line" pos:line="179" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="180" pos:column="25">e</name><op:operator pos:line="180" pos:column="26">.</op:operator><name pos:line="180" pos:column="27">printStackTrace</name></name><argument_list pos:line="180" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>

	<function><type><annotation pos:line="186" pos:column="9">@<name pos:line="186" pos:column="10">Test</name></annotation>
	<specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">testUpdateAdminUserName6</name><parameter_list pos:line="187" pos:column="45">()</parameter_list> <block pos:line="187" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">Admin</name></type> <name pos:line="189" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="190" pos:column="17">try <block pos:line="190" pos:column="21">{
			<expr_stmt><expr><name pos:line="191" pos:column="25">ad</name> <op:operator pos:line="191" pos:column="28">=</op:operator> <op:operator pos:line="191" pos:column="30">new</op:operator> <call><name pos:line="191" pos:column="34">Admin</name><argument_list pos:line="191" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="191" pos:column="40">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="192" pos:column="25">boolean</name></type> <name pos:line="192" pos:column="33">check</name><init pos:line="192" pos:column="38">=<expr><call><name><name pos:line="192" pos:column="39">ad</name><op:operator pos:line="192" pos:column="41">.</op:operator><name pos:line="192" pos:column="42">updateAdminUserName</name></name><argument_list pos:line="192" pos:column="61">(<argument><expr><lit:literal type="null" pos:line="192" pos:column="62">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="193" pos:column="25">assertFalse</name><argument_list pos:line="193" pos:column="36">(<argument><expr><name pos:line="193" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="194" pos:column="19">catch <parameter_list pos:line="194" pos:column="25">(<param><decl><type><name><name pos:line="194" pos:column="26">People</name><op:operator pos:line="194" pos:column="32">.</op:operator><name pos:line="194" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="194" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="194" pos:column="64">{
			<comment type="line" pos:line="195" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="196" pos:column="25">e</name><op:operator pos:line="196" pos:column="26">.</op:operator><name pos:line="196" pos:column="27">printStackTrace</name></name><argument_list pos:line="196" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>

	<function><type><annotation pos:line="202" pos:column="9">@<name pos:line="202" pos:column="10">Test</name></annotation>
	<specifier pos:line="203" pos:column="9">public</specifier> <name pos:line="203" pos:column="16">void</name></type> <name pos:line="203" pos:column="21">testUpdateAdminName1</name><parameter_list pos:line="203" pos:column="41">()</parameter_list> <block pos:line="203" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="205" pos:column="17">Admin</name></type> <name pos:line="205" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="206" pos:column="17">try <block pos:line="206" pos:column="21">{
			<expr_stmt><expr><name pos:line="207" pos:column="25">ad</name> <op:operator pos:line="207" pos:column="28">=</op:operator> <op:operator pos:line="207" pos:column="30">new</op:operator> <call><name pos:line="207" pos:column="34">Admin</name><argument_list pos:line="207" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="207" pos:column="40">581</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="208" pos:column="25">boolean</name></type> <name pos:line="208" pos:column="33">check</name><init pos:line="208" pos:column="38">=<expr><call><name><name pos:line="208" pos:column="39">ad</name><op:operator pos:line="208" pos:column="41">.</op:operator><name pos:line="208" pos:column="42">updateAdminName</name></name><argument_list pos:line="208" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="58">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="209" pos:column="25">assertTrue</name><argument_list pos:line="209" pos:column="35">(<argument><expr><name pos:line="209" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="210" pos:column="19">catch <parameter_list pos:line="210" pos:column="25">(<param><decl><type><name><name pos:line="210" pos:column="26">People</name><op:operator pos:line="210" pos:column="32">.</op:operator><name pos:line="210" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="210" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="64">{
			<comment type="line" pos:line="211" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="212" pos:column="25">e</name><op:operator pos:line="212" pos:column="26">.</op:operator><name pos:line="212" pos:column="27">printStackTrace</name></name><argument_list pos:line="212" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="218" pos:column="9">@<name pos:line="218" pos:column="10">Test</name></annotation>
	<specifier pos:line="219" pos:column="9">public</specifier> <name pos:line="219" pos:column="16">void</name></type> <name pos:line="219" pos:column="21">testUpdateAdminName2</name><parameter_list pos:line="219" pos:column="41">()</parameter_list> <block pos:line="219" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="221" pos:column="17">Admin</name></type> <name pos:line="221" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="222" pos:column="17">try <block pos:line="222" pos:column="21">{
			<expr_stmt><expr><name pos:line="223" pos:column="25">ad</name> <op:operator pos:line="223" pos:column="28">=</op:operator> <op:operator pos:line="223" pos:column="30">new</op:operator> <call><name pos:line="223" pos:column="34">Admin</name><argument_list pos:line="223" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="223" pos:column="40">581</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="224" pos:column="25">boolean</name></type> <name pos:line="224" pos:column="33">check</name><init pos:line="224" pos:column="38">=<expr><call><name><name pos:line="224" pos:column="39">ad</name><op:operator pos:line="224" pos:column="41">.</op:operator><name pos:line="224" pos:column="42">updateAdminName</name></name><argument_list pos:line="224" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="58">"leonard"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="225" pos:column="25">assertTrue</name><argument_list pos:line="225" pos:column="35">(<argument><expr><name pos:line="225" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="226" pos:column="19">catch <parameter_list pos:line="226" pos:column="25">(<param><decl><type><name><name pos:line="226" pos:column="26">People</name><op:operator pos:line="226" pos:column="32">.</op:operator><name pos:line="226" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="226" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="226" pos:column="64">{
			<comment type="line" pos:line="227" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="228" pos:column="25">e</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">printStackTrace</name></name><argument_list pos:line="228" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="234" pos:column="9">@<name pos:line="234" pos:column="10">Test</name></annotation>
	<specifier pos:line="235" pos:column="9">public</specifier> <name pos:line="235" pos:column="16">void</name></type> <name pos:line="235" pos:column="21">testUpdateAdminName3</name><parameter_list pos:line="235" pos:column="41">()</parameter_list> <block pos:line="235" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="237" pos:column="17">Admin</name></type> <name pos:line="237" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="238" pos:column="17">try <block pos:line="238" pos:column="21">{
			<expr_stmt><expr><name pos:line="239" pos:column="25">ad</name> <op:operator pos:line="239" pos:column="28">=</op:operator> <op:operator pos:line="239" pos:column="30">new</op:operator> <call><name pos:line="239" pos:column="34">Admin</name><argument_list pos:line="239" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="239" pos:column="40">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="240" pos:column="25">boolean</name></type> <name pos:line="240" pos:column="33">check</name><init pos:line="240" pos:column="38">=<expr><call><name><name pos:line="240" pos:column="39">ad</name><op:operator pos:line="240" pos:column="41">.</op:operator><name pos:line="240" pos:column="42">updateAdminName</name></name><argument_list pos:line="240" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="240" pos:column="58">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="241" pos:column="25">assertFalse</name><argument_list pos:line="241" pos:column="36">(<argument><expr><name pos:line="241" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="242" pos:column="19">catch <parameter_list pos:line="242" pos:column="25">(<param><decl><type><name><name pos:line="242" pos:column="26">People</name><op:operator pos:line="242" pos:column="32">.</op:operator><name pos:line="242" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="242" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="242" pos:column="64">{
			<comment type="line" pos:line="243" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="244" pos:column="25">e</name><op:operator pos:line="244" pos:column="26">.</op:operator><name pos:line="244" pos:column="27">printStackTrace</name></name><argument_list pos:line="244" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="250" pos:column="9">@<name pos:line="250" pos:column="10">Test</name></annotation>
	<specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">void</name></type> <name pos:line="251" pos:column="21">testUpdateAdminName4</name><parameter_list pos:line="251" pos:column="41">()</parameter_list> <block pos:line="251" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="253" pos:column="17">Admin</name></type> <name pos:line="253" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="254" pos:column="17">try <block pos:line="254" pos:column="21">{
			<expr_stmt><expr><name pos:line="255" pos:column="25">ad</name> <op:operator pos:line="255" pos:column="28">=</op:operator> <op:operator pos:line="255" pos:column="30">new</op:operator> <call><name pos:line="255" pos:column="34">Admin</name><argument_list pos:line="255" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="255" pos:column="40">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="256" pos:column="25">boolean</name></type> <name pos:line="256" pos:column="33">check</name><init pos:line="256" pos:column="38">=<expr><call><name><name pos:line="256" pos:column="39">ad</name><op:operator pos:line="256" pos:column="41">.</op:operator><name pos:line="256" pos:column="42">updateAdminName</name></name><argument_list pos:line="256" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="58">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="257" pos:column="25">assertFalse</name><argument_list pos:line="257" pos:column="36">(<argument><expr><name pos:line="257" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="258" pos:column="19">catch <parameter_list pos:line="258" pos:column="25">(<param><decl><type><name><name pos:line="258" pos:column="26">People</name><op:operator pos:line="258" pos:column="32">.</op:operator><name pos:line="258" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="258" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="258" pos:column="64">{
			<comment type="line" pos:line="259" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="260" pos:column="25">e</name><op:operator pos:line="260" pos:column="26">.</op:operator><name pos:line="260" pos:column="27">printStackTrace</name></name><argument_list pos:line="260" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="266" pos:column="9">@<name pos:line="266" pos:column="10">Test</name></annotation>
	<specifier pos:line="267" pos:column="9">public</specifier> <name pos:line="267" pos:column="16">void</name></type> <name pos:line="267" pos:column="21">testUpdateAdminName5</name><parameter_list pos:line="267" pos:column="41">()</parameter_list> <block pos:line="267" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="269" pos:column="17">Admin</name></type> <name pos:line="269" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="270" pos:column="17">try <block pos:line="270" pos:column="21">{
			<expr_stmt><expr><name pos:line="271" pos:column="25">ad</name> <op:operator pos:line="271" pos:column="28">=</op:operator> <op:operator pos:line="271" pos:column="30">new</op:operator> <call><name pos:line="271" pos:column="34">Admin</name><argument_list pos:line="271" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="271" pos:column="40">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="272" pos:column="25">boolean</name></type> <name pos:line="272" pos:column="33">check</name><init pos:line="272" pos:column="38">=<expr><call><name><name pos:line="272" pos:column="39">ad</name><op:operator pos:line="272" pos:column="41">.</op:operator><name pos:line="272" pos:column="42">updateAdminName</name></name><argument_list pos:line="272" pos:column="57">(<argument><expr><lit:literal type="null" pos:line="272" pos:column="58">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="273" pos:column="25">assertFalse</name><argument_list pos:line="273" pos:column="36">(<argument><expr><name pos:line="273" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="274" pos:column="19">catch <parameter_list pos:line="274" pos:column="25">(<param><decl><type><name><name pos:line="274" pos:column="26">People</name><op:operator pos:line="274" pos:column="32">.</op:operator><name pos:line="274" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="274" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="274" pos:column="64">{
			<comment type="line" pos:line="275" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="276" pos:column="25">e</name><op:operator pos:line="276" pos:column="26">.</op:operator><name pos:line="276" pos:column="27">printStackTrace</name></name><argument_list pos:line="276" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>

	<function><type><annotation pos:line="282" pos:column="9">@<name pos:line="282" pos:column="10">Test</name></annotation>
	<specifier pos:line="283" pos:column="9">public</specifier> <name pos:line="283" pos:column="16">void</name></type> <name pos:line="283" pos:column="21">testUpdateAdminName6</name><parameter_list pos:line="283" pos:column="41">()</parameter_list> <block pos:line="283" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="285" pos:column="17">Admin</name></type> <name pos:line="285" pos:column="23">ad</name></decl>;</decl_stmt>
		<try pos:line="286" pos:column="17">try <block pos:line="286" pos:column="21">{
			<expr_stmt><expr><name pos:line="287" pos:column="25">ad</name> <op:operator pos:line="287" pos:column="28">=</op:operator> <op:operator pos:line="287" pos:column="30">new</op:operator> <call><name pos:line="287" pos:column="34">Admin</name><argument_list pos:line="287" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="287" pos:column="40">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="288" pos:column="25">boolean</name></type> <name pos:line="288" pos:column="33">check</name><init pos:line="288" pos:column="38">=<expr><call><name><name pos:line="288" pos:column="39">ad</name><op:operator pos:line="288" pos:column="41">.</op:operator><name pos:line="288" pos:column="42">updateAdminName</name></name><argument_list pos:line="288" pos:column="57">(<argument><expr><lit:literal type="null" pos:line="288" pos:column="58">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="289" pos:column="25">assertFalse</name><argument_list pos:line="289" pos:column="36">(<argument><expr><name pos:line="289" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="290" pos:column="19">catch <parameter_list pos:line="290" pos:column="25">(<param><decl><type><name><name pos:line="290" pos:column="26">People</name><op:operator pos:line="290" pos:column="32">.</op:operator><name pos:line="290" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="290" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="290" pos:column="64">{
			<comment type="line" pos:line="291" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="292" pos:column="25">e</name><op:operator pos:line="292" pos:column="26">.</op:operator><name pos:line="292" pos:column="27">printStackTrace</name></name><argument_list pos:line="292" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>

	<function><type><annotation pos:line="298" pos:column="9">@<name pos:line="298" pos:column="10">Test</name></annotation>
	<specifier pos:line="299" pos:column="9">public</specifier> <name pos:line="299" pos:column="16">void</name></type> <name pos:line="299" pos:column="21">testUpdateAdminDept1</name><parameter_list pos:line="299" pos:column="41">()</parameter_list> <throws pos:line="299" pos:column="44">throws <argument><expr><name><name pos:line="299" pos:column="51">People</name><op:operator pos:line="299" pos:column="57">.</op:operator><name pos:line="299" pos:column="58">PersonDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="299" pos:column="87">Department</name><op:operator pos:line="299" pos:column="97">.</op:operator><name pos:line="299" pos:column="98">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="299" pos:column="130">{
		
		<decl_stmt><decl><type><name pos:line="301" pos:column="17">Admin</name></type> <name pos:line="301" pos:column="23">ad</name><init pos:line="301" pos:column="25">=<expr><op:operator pos:line="301" pos:column="26">new</op:operator> <call><name pos:line="301" pos:column="30">Admin</name><argument_list pos:line="301" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="301" pos:column="36">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="302" pos:column="17">Department</name></type> <name pos:line="302" pos:column="28">d</name><init pos:line="302" pos:column="29">=<expr><op:operator pos:line="302" pos:column="30">new</op:operator> <call><name pos:line="302" pos:column="34">Department</name><argument_list pos:line="302" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="45">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="303" pos:column="17">boolean</name></type> <name pos:line="303" pos:column="25">check</name><init pos:line="303" pos:column="30">=<expr><call><name><name pos:line="303" pos:column="31">ad</name><op:operator pos:line="303" pos:column="33">.</op:operator><name pos:line="303" pos:column="34">updateAdminDept</name></name><argument_list pos:line="303" pos:column="49">(<argument><expr><call><name><name pos:line="303" pos:column="50">d</name><op:operator pos:line="303" pos:column="51">.</op:operator><name pos:line="303" pos:column="52">getDepartmentID</name></name><argument_list pos:line="303" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="304" pos:column="17">assertTrue</name><argument_list pos:line="304" pos:column="27">(<argument><expr><name pos:line="304" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="307" pos:column="9">@<name pos:line="307" pos:column="10">Test</name></annotation>
	<specifier pos:line="308" pos:column="9">public</specifier> <name pos:line="308" pos:column="16">void</name></type> <name pos:line="308" pos:column="21">testUpdateAdminDept2</name><parameter_list pos:line="308" pos:column="41">()</parameter_list> <throws pos:line="308" pos:column="44">throws <argument><expr><name><name pos:line="308" pos:column="51">People</name><op:operator pos:line="308" pos:column="57">.</op:operator><name pos:line="308" pos:column="58">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="308" pos:column="86">{
		
		<decl_stmt><decl><type><name pos:line="310" pos:column="17">Admin</name></type> <name pos:line="310" pos:column="23">ad</name><init pos:line="310" pos:column="25">=<expr><op:operator pos:line="310" pos:column="26">new</op:operator> <call><name pos:line="310" pos:column="30">Admin</name><argument_list pos:line="310" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="310" pos:column="36">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="311" pos:column="17">boolean</name></type> <name pos:line="311" pos:column="25">check</name><init pos:line="311" pos:column="30">=<expr><call><name><name pos:line="311" pos:column="31">ad</name><op:operator pos:line="311" pos:column="33">.</op:operator><name pos:line="311" pos:column="34">updateAdminDept</name></name><argument_list pos:line="311" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="311" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="312" pos:column="17">assertTrue</name><argument_list pos:line="312" pos:column="27">(<argument><expr><name pos:line="312" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="315" pos:column="9">@<name pos:line="315" pos:column="10">Test</name><argument_list pos:line="315" pos:column="14">(<argument><expr><name pos:line="315" pos:column="15">expected</name><op:operator pos:line="315" pos:column="23">=</op:operator><name><name pos:line="315" pos:column="24">People</name><op:operator pos:line="315" pos:column="30">.</op:operator><name pos:line="315" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="315" pos:column="58">.</op:operator><name pos:line="315" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="316" pos:column="9">public</specifier> <name pos:line="316" pos:column="16">void</name></type> <name pos:line="316" pos:column="21">testUpdateAdminDept3</name><parameter_list pos:line="316" pos:column="41">()</parameter_list> <throws pos:line="316" pos:column="44">throws <argument><expr><name><name pos:line="316" pos:column="51">People</name><op:operator pos:line="316" pos:column="57">.</op:operator><name pos:line="316" pos:column="58">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="316" pos:column="86">{
		
		<decl_stmt><decl><type><name pos:line="318" pos:column="17">Admin</name></type> <name pos:line="318" pos:column="23">ad</name><init pos:line="318" pos:column="25">=<expr><op:operator pos:line="318" pos:column="26">new</op:operator> <call><name pos:line="318" pos:column="30">Admin</name><argument_list pos:line="318" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="318" pos:column="36">8</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="319" pos:column="17">boolean</name></type> <name pos:line="319" pos:column="25">check</name><init pos:line="319" pos:column="30">=<expr><call><name><name pos:line="319" pos:column="31">ad</name><op:operator pos:line="319" pos:column="33">.</op:operator><name pos:line="319" pos:column="34">updateAdminDept</name></name><argument_list pos:line="319" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="319" pos:column="50">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="320" pos:column="17">assertFalse</name><argument_list pos:line="320" pos:column="28">(<argument><expr><name pos:line="320" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="324" pos:column="9">@<name pos:line="324" pos:column="10">Test</name><argument_list pos:line="324" pos:column="14">(<argument><expr><name pos:line="324" pos:column="15">expected</name><op:operator pos:line="324" pos:column="23">=</op:operator><name><name pos:line="324" pos:column="24">People</name><op:operator pos:line="324" pos:column="30">.</op:operator><name pos:line="324" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="324" pos:column="58">.</op:operator><name pos:line="324" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="325" pos:column="9">public</specifier> <name pos:line="325" pos:column="16">void</name></type> <name pos:line="325" pos:column="21">testUpdateAdminDept4</name><parameter_list pos:line="325" pos:column="41">()</parameter_list> <throws pos:line="325" pos:column="44">throws <argument><expr><name><name pos:line="325" pos:column="51">People</name><op:operator pos:line="325" pos:column="57">.</op:operator><name pos:line="325" pos:column="58">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="325" pos:column="86">{
		
		<decl_stmt><decl><type><name pos:line="327" pos:column="17">Admin</name></type> <name pos:line="327" pos:column="23">ad</name><init pos:line="327" pos:column="25">=<expr><op:operator pos:line="327" pos:column="26">new</op:operator> <call><name pos:line="327" pos:column="30">Admin</name><argument_list pos:line="327" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="327" pos:column="36">8</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="328" pos:column="17">boolean</name></type> <name pos:line="328" pos:column="25">check</name><init pos:line="328" pos:column="30">=<expr><call><name><name pos:line="328" pos:column="31">ad</name><op:operator pos:line="328" pos:column="33">.</op:operator><name pos:line="328" pos:column="34">updateAdminDept</name></name><argument_list pos:line="328" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="328" pos:column="50">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="329" pos:column="17">assertFalse</name><argument_list pos:line="329" pos:column="28">(<argument><expr><name pos:line="329" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="333" pos:column="9">@<name pos:line="333" pos:column="10">Test</name><argument_list pos:line="333" pos:column="14">(<argument><expr><name pos:line="333" pos:column="15">expected</name><op:operator pos:line="333" pos:column="23">=</op:operator><name><name pos:line="333" pos:column="24">Department</name><op:operator pos:line="333" pos:column="34">.</op:operator><name pos:line="333" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="333" pos:column="66">.</op:operator><name pos:line="333" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="334" pos:column="9">public</specifier> <name pos:line="334" pos:column="16">void</name></type> <name pos:line="334" pos:column="21">testUpdateAdminDept5</name><parameter_list pos:line="334" pos:column="41">()</parameter_list> <throws pos:line="334" pos:column="44">throws <argument><expr><name><name pos:line="334" pos:column="51">People</name><op:operator pos:line="334" pos:column="57">.</op:operator><name pos:line="334" pos:column="58">PersonDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="334" pos:column="87">Department</name><op:operator pos:line="334" pos:column="97">.</op:operator><name pos:line="334" pos:column="98">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="334" pos:column="130">{
		
		<decl_stmt><decl><type><name pos:line="336" pos:column="17">Admin</name></type> <name pos:line="336" pos:column="23">ad</name><init pos:line="336" pos:column="25">=<expr><op:operator pos:line="336" pos:column="26">new</op:operator> <call><name pos:line="336" pos:column="30">Admin</name><argument_list pos:line="336" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="336" pos:column="36">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="337" pos:column="17">Department</name></type> <name pos:line="337" pos:column="28">d</name><init pos:line="337" pos:column="29">=<expr><op:operator pos:line="337" pos:column="30">new</op:operator> <call><name pos:line="337" pos:column="34">Department</name><argument_list pos:line="337" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="337" pos:column="45">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="338" pos:column="17">boolean</name></type> <name pos:line="338" pos:column="25">check</name><init pos:line="338" pos:column="30">=<expr><call><name><name pos:line="338" pos:column="31">ad</name><op:operator pos:line="338" pos:column="33">.</op:operator><name pos:line="338" pos:column="34">updateAdminDept</name></name><argument_list pos:line="338" pos:column="49">(<argument><expr><call><name><name pos:line="338" pos:column="50">d</name><op:operator pos:line="338" pos:column="51">.</op:operator><name pos:line="338" pos:column="52">getDepartmentID</name></name><argument_list pos:line="338" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
	}</block></function>

}</block></class>
</unit>
