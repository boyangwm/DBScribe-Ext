<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\StudentEnrollment.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="line" pos:line="4" pos:column="1">//import java.lang.annotation.ElementType;</comment>
<comment type="line" pos:line="5" pos:column="1">//import java.lang.annotation.Retention;</comment>
<comment type="line" pos:line="6" pos:column="1">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line" pos:line="7" pos:column="1">//import java.lang.annotation.Target;</comment>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">java</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">util</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">HashMap</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">java</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">util</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">Iterator</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">java</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">util</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Set</name></name>;</import>


<class><specifier pos:line="18" pos:column="1">public</specifier> class <name pos:line="18" pos:column="14">StudentEnrollment</name> <block pos:line="18" pos:column="32">{
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">int</name></type> <name pos:line="19" pos:column="13">enrollmentID</name></decl>;</decl_stmt> <comment type="line" pos:line="19" pos:column="27">// Unique id per enrollment</comment>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int</name></type> <name pos:line="20" pos:column="13">UIN</name></decl>;</decl_stmt>		<comment type="line" pos:line="20" pos:column="33">// Student UIN</comment>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">int</name></type> <name pos:line="21" pos:column="13">offerID</name></decl>;</decl_stmt> <comment type="line" pos:line="21" pos:column="22">//OfferID of course offered in a sem</comment>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">String</name></type> <name pos:line="22" pos:column="16">grade</name></decl>;</decl_stmt> <comment type="line" pos:line="22" pos:column="23">//Student Grade = 'A', 'B','C', 'D' and 'F'</comment>
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name pos:line="23" pos:column="17">Student</name></type> <name pos:line="23" pos:column="25">stdnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="24" pos:column="9">private</specifier> <name pos:line="24" pos:column="17">CourseOffered</name></type> <name pos:line="24" pos:column="31">cOffered</name></decl>;</decl_stmt>
	
	
<comment type="line" pos:line="27" pos:column="1">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line" pos:line="28" pos:column="1">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line" pos:line="29" pos:column="1">//	public @interface DBAnnotation {</comment>
<comment type="line" pos:line="30" pos:column="1">//	 String[] variable () default "";</comment>
<comment type="line" pos:line="31" pos:column="1">//	 String[] table () default "";</comment>
<comment type="line" pos:line="32" pos:column="1">//	 String[] column () default "";</comment>
<comment type="line" pos:line="33" pos:column="1">//	 boolean[] isSource () default false; </comment>
<comment type="line" pos:line="34" pos:column="1">//	}</comment>
	

	<function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">int</name></type> <name pos:line="37" pos:column="20">getEnrollmentID</name><parameter_list pos:line="37" pos:column="35">()</parameter_list> <block pos:line="37" pos:column="38">{
		<return pos:line="38" pos:column="17">return <expr><name pos:line="38" pos:column="24">enrollmentID</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="41" pos:column="9">// Constructor to populate object</comment>
	<constructor><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">StudentEnrollment</name><parameter_list pos:line="42" pos:column="33">(<param><decl><type><name pos:line="42" pos:column="34">int</name></type> <name pos:line="42" pos:column="38">enrollmentID</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="52">int</name></type> <name pos:line="42" pos:column="56">UIN</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="61">int</name></type> <name pos:line="42" pos:column="65">offerID</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="74">String</name></type> <name pos:line="42" pos:column="81">grade</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="88">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">super</name><argument_list pos:line="43" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="44" pos:column="17">this</name><op:operator pos:line="44" pos:column="21">.</op:operator><name pos:line="44" pos:column="22">enrollmentID</name></name> <op:operator pos:line="44" pos:column="35">=</op:operator> <name pos:line="44" pos:column="37">enrollmentID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">this</name><op:operator pos:line="45" pos:column="21">.</op:operator><name pos:line="45" pos:column="22">UIN</name></name> <op:operator pos:line="45" pos:column="26">=</op:operator> <name pos:line="45" pos:column="28">UIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">this</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">offerID</name></name> <op:operator pos:line="46" pos:column="30">=</op:operator> <name pos:line="46" pos:column="32">offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">this</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">grade</name></name> <op:operator pos:line="47" pos:column="28">=</op:operator> <name pos:line="47" pos:column="30">grade</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="50" pos:column="9">// Constructor to populate object</comment>
	<constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">StudentEnrollment</name><parameter_list pos:line="51" pos:column="33">(<param><decl><type><name pos:line="51" pos:column="34">int</name></type> <name pos:line="51" pos:column="38">UIN</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="43">int</name></type> <name pos:line="51" pos:column="47">offerID</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="56">String</name></type> <name pos:line="51" pos:column="63">grade</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="70">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">super</name><argument_list pos:line="52" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="53" pos:column="17">this</name><op:operator pos:line="53" pos:column="21">.</op:operator><name pos:line="53" pos:column="22">offerID</name></name> <op:operator pos:line="53" pos:column="30">=</op:operator> <name pos:line="53" pos:column="32">offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">this</name><op:operator pos:line="54" pos:column="21">.</op:operator><name pos:line="54" pos:column="22">grade</name></name> <op:operator pos:line="54" pos:column="28">=</op:operator> <name pos:line="54" pos:column="30">grade</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">this</name><op:operator pos:line="55" pos:column="21">.</op:operator><name pos:line="55" pos:column="22">UIN</name></name> <op:operator pos:line="55" pos:column="26">=</op:operator> <name pos:line="55" pos:column="28">UIN</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="58" pos:column="9">// Constructor to create objects of studentenrollment before inserting into </comment>
	<comment type="line" pos:line="59" pos:column="9">// the database for the first time</comment>
	<constructor><specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">StudentEnrollment</name><parameter_list pos:line="60" pos:column="33">(<param><decl><type><name pos:line="60" pos:column="34">int</name></type> <name pos:line="60" pos:column="38">offerID</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="47">int</name></type> <name pos:line="60" pos:column="51">UIN</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="56">{
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">super</name><argument_list pos:line="61" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">this</name><op:operator pos:line="62" pos:column="21">.</op:operator><name pos:line="62" pos:column="22">offerID</name></name> <op:operator pos:line="62" pos:column="30">=</op:operator> <name pos:line="62" pos:column="32">offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">this</name><op:operator pos:line="63" pos:column="21">.</op:operator><name pos:line="63" pos:column="22">grade</name></name> <op:operator pos:line="63" pos:column="28">=</op:operator> <lit:literal type="string" pos:line="63" pos:column="30">"A"</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="63" pos:column="35">// Default grade at the time of enrollment</comment>
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">this</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">UIN</name></name> <op:operator pos:line="64" pos:column="26">=</op:operator> <name pos:line="64" pos:column="28">UIN</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><type><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">int</name></type> <name pos:line="67" pos:column="20">getUIN</name><parameter_list pos:line="67" pos:column="26">()</parameter_list> <block pos:line="67" pos:column="29">{
		<return pos:line="68" pos:column="17">return <expr><name pos:line="68" pos:column="24">UIN</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="71" pos:column="9">public</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">setUIN</name><parameter_list pos:line="71" pos:column="27">(<param><decl><type><name pos:line="71" pos:column="28">int</name></type> <name pos:line="71" pos:column="32">uIN</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="37">{
		<expr_stmt><expr><name pos:line="72" pos:column="17">UIN</name> <op:operator pos:line="72" pos:column="21">=</op:operator> <name pos:line="72" pos:column="23">uIN</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">int</name></type> <name pos:line="75" pos:column="20">getOfferID</name><parameter_list pos:line="75" pos:column="30">()</parameter_list> <block pos:line="75" pos:column="33">{
		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">offerID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="79" pos:column="9">public</specifier> <name pos:line="79" pos:column="16">void</name></type> <name pos:line="79" pos:column="21">setEnrollmentID</name><parameter_list pos:line="79" pos:column="36">(<param><decl><type><name pos:line="79" pos:column="37">int</name></type> <name pos:line="79" pos:column="41">enrollmentID</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="55">{
		<expr_stmt><expr><name><name pos:line="80" pos:column="17">this</name><op:operator pos:line="80" pos:column="21">.</op:operator><name pos:line="80" pos:column="22">enrollmentID</name></name> <op:operator pos:line="80" pos:column="35">=</op:operator> <name pos:line="80" pos:column="37">enrollmentID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">setOfferID</name><parameter_list pos:line="83" pos:column="31">(<param><decl><type><name pos:line="83" pos:column="32">int</name></type> <name pos:line="83" pos:column="36">offerID</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="84" pos:column="17">this</name><op:operator pos:line="84" pos:column="21">.</op:operator><name pos:line="84" pos:column="22">offerID</name></name> <op:operator pos:line="84" pos:column="30">=</op:operator> <name pos:line="84" pos:column="32">offerID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">String</name></type> <name pos:line="87" pos:column="23">getGrade</name><parameter_list pos:line="87" pos:column="31">()</parameter_list> <block pos:line="87" pos:column="34">{
		<return pos:line="88" pos:column="17">return <expr><name pos:line="88" pos:column="24">grade</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">setGrade</name><parameter_list pos:line="91" pos:column="29">(<param><decl><type><name pos:line="91" pos:column="30">String</name></type> <name pos:line="91" pos:column="37">grade</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="92" pos:column="17">this</name><op:operator pos:line="92" pos:column="21">.</op:operator><name pos:line="92" pos:column="22">grade</name></name> <op:operator pos:line="92" pos:column="28">=</op:operator> <name pos:line="92" pos:column="30">grade</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="95" pos:column="9">// Given a student this function returns all the grades of that student</comment>
	<function><type><specifier pos:line="96" pos:column="9">public</specifier> <specifier pos:line="96" pos:column="16">static</specifier> <name><name pos:line="96" pos:column="23">HashMap</name><argument_list pos:line="96" pos:column="30">&lt;<argument><name pos:line="96" pos:column="31">CourseOffered</name></argument>, <argument><name pos:line="96" pos:column="46">String</name></argument>&gt;</argument_list></name></type> <name pos:line="96" pos:column="54">getAllGradesOfStudent</name> <parameter_list pos:line="96" pos:column="76">(<param><decl><type><name pos:line="96" pos:column="77">Student</name></type> <name pos:line="96" pos:column="85">student</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="94">{
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">int</name></type> <name pos:line="97" pos:column="21">UIN</name> <init pos:line="97" pos:column="25">= <expr><call><name><name pos:line="97" pos:column="27">student</name><op:operator pos:line="97" pos:column="34">.</op:operator><name pos:line="97" pos:column="35">getUIN</name></name><argument_list pos:line="97" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="98" pos:column="17">HashMap</name><argument_list pos:line="98" pos:column="24">&lt;<argument><name pos:line="98" pos:column="25">CourseOffered</name></argument>, <argument><name pos:line="98" pos:column="40">String</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="48">courseGrade</name> <init pos:line="98" pos:column="60">= <expr><op:operator pos:line="98" pos:column="62">new</op:operator> <call><name><name pos:line="98" pos:column="66">HashMap</name><argument_list pos:line="98" pos:column="73">&lt;<argument><name pos:line="98" pos:column="74">CourseOffered</name></argument>, <argument><name pos:line="98" pos:column="89">String</name></argument>&gt;</argument_list></name><argument_list pos:line="98" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="100" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="101" pos:column="1">//				variable = {"UIN"},  </comment>
<comment type="line" pos:line="102" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="103" pos:column="1">//				column = {"UIN"}, </comment>
<comment type="line" pos:line="104" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="106" pos:column="17">String</name></type> <name pos:line="106" pos:column="24">SQLGradeSelect</name> <init pos:line="106" pos:column="39">= <expr><lit:literal type="string" pos:line="106" pos:column="41">"Select OfferID, Grade FROM studentenrollment WHERE UIN = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="107" pos:column="17">try<block pos:line="107" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="108" pos:column="25">Connection</name></type> <name pos:line="108" pos:column="36">conn</name> <init pos:line="108" pos:column="41">= <expr><call><name><name pos:line="108" pos:column="43">Database</name><op:operator pos:line="108" pos:column="51">.</op:operator><name pos:line="108" pos:column="52">getConnection</name></name><argument_list pos:line="108" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="110" pos:column="25">try<block pos:line="110" pos:column="28">{
			
				<if pos:line="112" pos:column="33">if<condition pos:line="112" pos:column="35">(<expr><name pos:line="112" pos:column="36">conn</name> <op:operator pos:line="112" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="112" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="112" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="114" pos:column="41">PreparedStatement</name></type> <name pos:line="114" pos:column="59">statement</name> <init pos:line="114" pos:column="69">= <expr><call><name><name pos:line="114" pos:column="71">conn</name><op:operator pos:line="114" pos:column="75">.</op:operator><name pos:line="114" pos:column="76">prepareStatement</name></name><argument_list pos:line="114" pos:column="92">(<argument><expr><name pos:line="114" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="115" pos:column="41">DBAnnotation</name><op:operator pos:line="115" pos:column="53">.</op:operator><name pos:line="115" pos:column="54">annoate</name></name><argument_list pos:line="115" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="69">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="115" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="116" pos:column="41">statement</name><op:operator pos:line="116" pos:column="50">.</op:operator><name pos:line="116" pos:column="51">setInt</name></name><argument_list pos:line="116" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="117" pos:column="41">ResultSet</name></type> <name pos:line="117" pos:column="51">rs</name> <init pos:line="117" pos:column="54">= <expr><call><name><name pos:line="117" pos:column="56">statement</name><op:operator pos:line="117" pos:column="65">.</op:operator><name pos:line="117" pos:column="66">executeQuery</name></name><argument_list pos:line="117" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="119" pos:column="41">while<condition pos:line="119" pos:column="46">(<expr><call><name><name pos:line="119" pos:column="47">rs</name><op:operator pos:line="119" pos:column="49">.</op:operator><name pos:line="119" pos:column="50">next</name></name><argument_list pos:line="119" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="119" pos:column="57">{
						<comment type="line" pos:line="120" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="121" pos:column="49">DBAnnotation</name><op:operator pos:line="121" pos:column="61">.</op:operator><name pos:line="121" pos:column="62">annoate</name></name><argument_list pos:line="121" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="121" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="122" pos:column="41">int</name></type> <name pos:line="122" pos:column="45">offerID</name> <init pos:line="122" pos:column="53">= <expr><call><name><name pos:line="122" pos:column="55">rs</name><op:operator pos:line="122" pos:column="57">.</op:operator><name pos:line="122" pos:column="58">getInt</name></name><argument_list pos:line="122" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="65">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        <expr_stmt><expr><call><name><name pos:line="123" pos:column="41">DBAnnotation</name><op:operator pos:line="123" pos:column="53">.</op:operator><name pos:line="123" pos:column="54">annoate</name></name><argument_list pos:line="123" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="62">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="71">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="92">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="123" pos:column="101">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="124" pos:column="41">String</name></type> <name pos:line="124" pos:column="48">grade</name> <init pos:line="124" pos:column="54">= <expr><call><name><name pos:line="124" pos:column="56">rs</name><op:operator pos:line="124" pos:column="58">.</op:operator><name pos:line="124" pos:column="59">getString</name></name><argument_list pos:line="124" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="69">"Grade"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        <decl_stmt><decl><type><name pos:line="125" pos:column="41">CourseOffered</name></type> <name pos:line="125" pos:column="55">studentCourse</name> <init pos:line="125" pos:column="69">= <expr><lit:literal type="null" pos:line="125" pos:column="71">null</lit:literal></expr></init></decl>;</decl_stmt>
				 		
				 		<try pos:line="127" pos:column="49">try <block pos:line="127" pos:column="53">{
				 			<expr_stmt><expr><name pos:line="128" pos:column="57">studentCourse</name> <op:operator pos:line="128" pos:column="71">=</op:operator> <op:operator pos:line="128" pos:column="73">new</op:operator> <call><name pos:line="128" pos:column="77">CourseOffered</name><argument_list pos:line="128" pos:column="90">(<argument><expr><name pos:line="128" pos:column="91">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				 		}</block> <catch pos:line="129" pos:column="51">catch <parameter_list pos:line="129" pos:column="57">(<param><decl><type><name><name pos:line="129" pos:column="58">Course</name><op:operator pos:line="129" pos:column="64">.</op:operator><name pos:line="129" pos:column="65">CourseDoesNotExistException</name></name></type> <name pos:line="129" pos:column="93">e1</name></decl></param>)</parameter_list> <block pos:line="129" pos:column="97">{
				 			<expr_stmt><expr><call><name><name pos:line="130" pos:column="57">e1</name><op:operator pos:line="130" pos:column="59">.</op:operator><name pos:line="130" pos:column="60">printStackTrace</name></name><argument_list pos:line="130" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch> <catch pos:line="131" pos:column="51">catch <parameter_list pos:line="131" pos:column="57">(<param><decl><type><name><name pos:line="131" pos:column="58">CourseOffered</name><op:operator pos:line="131" pos:column="71">.</op:operator><name pos:line="131" pos:column="72">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="131" pos:column="108">e1</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="112">{
				 			<expr_stmt><expr><call><name><name pos:line="132" pos:column="57">e1</name><op:operator pos:line="132" pos:column="59">.</op:operator><name pos:line="132" pos:column="60">printStackTrace</name></name><argument_list pos:line="132" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch></try>
				         
				         <expr_stmt><expr><call><name><name pos:line="135" pos:column="42">courseGrade</name><op:operator pos:line="135" pos:column="53">.</op:operator><name pos:line="135" pos:column="54">put</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><name pos:line="135" pos:column="58">studentCourse</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="73">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line" pos:line="136" pos:column="1">//				         Item item = new Item(itemID, itemName,itemQuantity, itemCost);</comment>
<comment type="line" pos:line="137" pos:column="1">//				         items.add(item);</comment>
					}</block></while>      
				}</block></then></if>
			}</block>
			<catch pos:line="141" pos:column="25">catch<parameter_list pos:line="141" pos:column="30">(<param><decl><type><name pos:line="141" pos:column="31">SQLException</name></type> <name pos:line="141" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="141" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">System</name><op:operator pos:line="142" pos:column="39">.</op:operator><name pos:line="142" pos:column="40">out</name><op:operator pos:line="142" pos:column="43">.</op:operator><name pos:line="142" pos:column="44">println</name></name><argument_list pos:line="142" pos:column="51">(<argument><expr><name pos:line="142" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block>
		<catch pos:line="146" pos:column="17">catch<parameter_list pos:line="146" pos:column="22">(<param><decl><type><name pos:line="146" pos:column="23">Exception</name></type> <name pos:line="146" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="146" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">System</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">out</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">println</name></name><argument_list pos:line="147" pos:column="43">(<argument><expr><name pos:line="147" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>


		<return pos:line="151" pos:column="17">return <expr><name pos:line="151" pos:column="24">courseGrade</name></expr>;</return>
	
	}</block></function>

	<comment type="line" pos:line="155" pos:column="9">// Given a student this function returns all the courses taken by that student till date </comment>
	<function><type><specifier pos:line="156" pos:column="9">public</specifier> <specifier pos:line="156" pos:column="16">static</specifier> <name><name pos:line="156" pos:column="23">ArrayList</name><argument_list pos:line="156" pos:column="32">&lt;<argument><name pos:line="156" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="156" pos:column="48">getStudentsAllCourses</name><parameter_list pos:line="156" pos:column="69">(<param><decl><type><name pos:line="156" pos:column="70">Student</name></type> <name pos:line="156" pos:column="78">student</name></decl></param>)</parameter_list><block pos:line="156" pos:column="86">{
		<decl_stmt><decl><type><name><name pos:line="157" pos:column="17">ArrayList</name><argument_list pos:line="157" pos:column="26">&lt;<argument><name pos:line="157" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="157" pos:column="42">coursesTaken</name> <init pos:line="157" pos:column="55">= <expr><op:operator pos:line="157" pos:column="57">new</op:operator> <call><name><name pos:line="157" pos:column="61">ArrayList</name><argument_list pos:line="157" pos:column="70">&lt;<argument><name pos:line="157" pos:column="71">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="157" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="159" pos:column="17">int</name></type> <name pos:line="159" pos:column="21">UIN</name> <init pos:line="159" pos:column="25">= <expr><call><name><name pos:line="159" pos:column="27">student</name><op:operator pos:line="159" pos:column="34">.</op:operator><name pos:line="159" pos:column="35">getUIN</name></name><argument_list pos:line="159" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="161" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="162" pos:column="1">//				variable = {"UIN"},  </comment>
<comment type="line" pos:line="163" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="164" pos:column="1">//				column = {"UIN"}, </comment>
<comment type="line" pos:line="165" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">String</name></type> <name pos:line="167" pos:column="24">SQLGradeSelect</name> <init pos:line="167" pos:column="39">= <expr><lit:literal type="string" pos:line="167" pos:column="41">"Select OfferID FROM studentenrollment WHERE UIN = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="168" pos:column="17">try<block pos:line="168" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="169" pos:column="25">Connection</name></type> <name pos:line="169" pos:column="36">conn</name> <init pos:line="169" pos:column="41">= <expr><call><name><name pos:line="169" pos:column="43">Database</name><op:operator pos:line="169" pos:column="51">.</op:operator><name pos:line="169" pos:column="52">getConnection</name></name><argument_list pos:line="169" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="171" pos:column="25">try<block pos:line="171" pos:column="28">{
			
				<if pos:line="173" pos:column="33">if<condition pos:line="173" pos:column="35">(<expr><name pos:line="173" pos:column="36">conn</name> <op:operator pos:line="173" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="173" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="173" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="175" pos:column="41">PreparedStatement</name></type> <name pos:line="175" pos:column="59">statement</name> <init pos:line="175" pos:column="69">= <expr><call><name><name pos:line="175" pos:column="71">conn</name><op:operator pos:line="175" pos:column="75">.</op:operator><name pos:line="175" pos:column="76">prepareStatement</name></name><argument_list pos:line="175" pos:column="92">(<argument><expr><name pos:line="175" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">DBAnnotation</name><op:operator pos:line="176" pos:column="53">.</op:operator><name pos:line="176" pos:column="54">annoate</name></name><argument_list pos:line="176" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="176" pos:column="69">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="176" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="176" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="177" pos:column="41">statement</name><op:operator pos:line="177" pos:column="50">.</op:operator><name pos:line="177" pos:column="51">setInt</name></name><argument_list pos:line="177" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="177" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="177" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="178" pos:column="41">ResultSet</name></type> <name pos:line="178" pos:column="51">rs</name> <init pos:line="178" pos:column="54">= <expr><call><name><name pos:line="178" pos:column="56">statement</name><op:operator pos:line="178" pos:column="65">.</op:operator><name pos:line="178" pos:column="66">executeQuery</name></name><argument_list pos:line="178" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="180" pos:column="41">while<condition pos:line="180" pos:column="46">(<expr><call><name><name pos:line="180" pos:column="47">rs</name><op:operator pos:line="180" pos:column="49">.</op:operator><name pos:line="180" pos:column="50">next</name></name><argument_list pos:line="180" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="180" pos:column="57">{
						<comment type="line" pos:line="181" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="182" pos:column="49">DBAnnotation</name><op:operator pos:line="182" pos:column="61">.</op:operator><name pos:line="182" pos:column="62">annoate</name></name><argument_list pos:line="182" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="182" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="183" pos:column="41">int</name></type> <name pos:line="183" pos:column="45">offerID</name> <init pos:line="183" pos:column="53">= <expr><call><name><name pos:line="183" pos:column="55">rs</name><op:operator pos:line="183" pos:column="57">.</op:operator><name pos:line="183" pos:column="58">getInt</name></name><argument_list pos:line="183" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="65">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        <decl_stmt><decl><type><name pos:line="184" pos:column="41">CourseOffered</name></type> <name pos:line="184" pos:column="55">studentCourse</name> <init pos:line="184" pos:column="69">= <expr><lit:literal type="null" pos:line="184" pos:column="71">null</lit:literal></expr></init></decl>;</decl_stmt>
				 		
				 		<try pos:line="186" pos:column="49">try <block pos:line="186" pos:column="53">{
				 			<expr_stmt><expr><name pos:line="187" pos:column="57">studentCourse</name> <op:operator pos:line="187" pos:column="71">=</op:operator> <op:operator pos:line="187" pos:column="73">new</op:operator> <call><name pos:line="187" pos:column="77">CourseOffered</name><argument_list pos:line="187" pos:column="90">(<argument><expr><name pos:line="187" pos:column="91">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				 		}</block> <catch pos:line="188" pos:column="51">catch <parameter_list pos:line="188" pos:column="57">(<param><decl><type><name><name pos:line="188" pos:column="58">Course</name><op:operator pos:line="188" pos:column="64">.</op:operator><name pos:line="188" pos:column="65">CourseDoesNotExistException</name></name></type> <name pos:line="188" pos:column="93">e1</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="97">{
				 			<expr_stmt><expr><call><name><name pos:line="189" pos:column="57">e1</name><op:operator pos:line="189" pos:column="59">.</op:operator><name pos:line="189" pos:column="60">printStackTrace</name></name><argument_list pos:line="189" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch> <catch pos:line="190" pos:column="51">catch <parameter_list pos:line="190" pos:column="57">(<param><decl><type><name><name pos:line="190" pos:column="58">CourseOffered</name><op:operator pos:line="190" pos:column="71">.</op:operator><name pos:line="190" pos:column="72">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="190" pos:column="108">e1</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="112">{
				 			<expr_stmt><expr><call><name><name pos:line="191" pos:column="57">e1</name><op:operator pos:line="191" pos:column="59">.</op:operator><name pos:line="191" pos:column="60">printStackTrace</name></name><argument_list pos:line="191" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch></try>
				         
				 		<expr_stmt><expr><call><name><name pos:line="194" pos:column="49">coursesTaken</name><op:operator pos:line="194" pos:column="61">.</op:operator><name pos:line="194" pos:column="62">add</name></name><argument_list pos:line="194" pos:column="65">(<argument><expr><name pos:line="194" pos:column="66">studentCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>      
				}</block></then></if>
			}</block> <catch pos:line="197" pos:column="27">catch<parameter_list pos:line="197" pos:column="32">(<param><decl><type><name pos:line="197" pos:column="33">SQLException</name></type> <name pos:line="197" pos:column="46">e</name></decl></param>)</parameter_list><block pos:line="197" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="198" pos:column="33">System</name><op:operator pos:line="198" pos:column="39">.</op:operator><name pos:line="198" pos:column="40">out</name><op:operator pos:line="198" pos:column="43">.</op:operator><name pos:line="198" pos:column="44">println</name></name><argument_list pos:line="198" pos:column="51">(<argument><expr><name pos:line="198" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block> <catch pos:line="201" pos:column="19">catch<parameter_list pos:line="201" pos:column="24">(<param><decl><type><name pos:line="201" pos:column="25">Exception</name></type> <name pos:line="201" pos:column="35">e</name></decl></param>)</parameter_list><block pos:line="201" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="202" pos:column="25">System</name><op:operator pos:line="202" pos:column="31">.</op:operator><name pos:line="202" pos:column="32">out</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">println</name></name><argument_list pos:line="202" pos:column="43">(<argument><expr><name pos:line="202" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="205" pos:column="17">return <expr><name pos:line="205" pos:column="24">coursesTaken</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="208" pos:column="9">// Given a course, this function retrives all the students in a particular course</comment>
 	<function><type><specifier pos:line="209" pos:column="9">public</specifier> <specifier pos:line="209" pos:column="16">static</specifier> <name><name pos:line="209" pos:column="23">ArrayList</name><argument_list pos:line="209" pos:column="32">&lt;<argument><name pos:line="209" pos:column="33">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="42">getStudentsInCourse</name><parameter_list pos:line="209" pos:column="61">(<param><decl><type><name pos:line="209" pos:column="62">CourseOffered</name></type> <name pos:line="209" pos:column="76">courseOffered</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="91">{
		<decl_stmt><decl><type><name><name pos:line="210" pos:column="17">ArrayList</name><argument_list pos:line="210" pos:column="26">&lt;<argument><name pos:line="210" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="36">enrolledStudents</name> <init pos:line="210" pos:column="53">= <expr><op:operator pos:line="210" pos:column="55">new</op:operator> <call><name><name pos:line="210" pos:column="59">ArrayList</name><argument_list pos:line="210" pos:column="68">&lt;<argument><name pos:line="210" pos:column="69">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="210" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="212" pos:column="17">int</name></type> <name pos:line="212" pos:column="21">offerID</name> <init pos:line="212" pos:column="29">= <expr><call><name><name pos:line="212" pos:column="31">courseOffered</name><op:operator pos:line="212" pos:column="44">.</op:operator><name pos:line="212" pos:column="45">getOfferID</name></name><argument_list pos:line="212" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="214" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="215" pos:column="1">//				variable = {"offerID"},  </comment>
<comment type="line" pos:line="216" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="217" pos:column="1">//				column = {"OfferID"}, </comment>
<comment type="line" pos:line="218" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="220" pos:column="17">String</name></type> <name pos:line="220" pos:column="24">SQLGradeSelect</name> <init pos:line="220" pos:column="39">= <expr><lit:literal type="string" pos:line="220" pos:column="41">"Select UIN FROM studentenrollment WHERE OfferID = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="221" pos:column="17">try<block pos:line="221" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="222" pos:column="25">Connection</name></type> <name pos:line="222" pos:column="36">conn</name> <init pos:line="222" pos:column="41">= <expr><call><name><name pos:line="222" pos:column="43">Database</name><op:operator pos:line="222" pos:column="51">.</op:operator><name pos:line="222" pos:column="52">getConnection</name></name><argument_list pos:line="222" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="224" pos:column="25">try<block pos:line="224" pos:column="28">{
			
				<if pos:line="226" pos:column="33">if<condition pos:line="226" pos:column="35">(<expr><name pos:line="226" pos:column="36">conn</name> <op:operator pos:line="226" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="226" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="226" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="228" pos:column="41">PreparedStatement</name></type> <name pos:line="228" pos:column="59">statement</name> <init pos:line="228" pos:column="69">= <expr><call><name><name pos:line="228" pos:column="71">conn</name><op:operator pos:line="228" pos:column="75">.</op:operator><name pos:line="228" pos:column="76">prepareStatement</name></name><argument_list pos:line="228" pos:column="92">(<argument><expr><name pos:line="228" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="229" pos:column="41">DBAnnotation</name><op:operator pos:line="229" pos:column="53">.</op:operator><name pos:line="229" pos:column="54">annoate</name></name><argument_list pos:line="229" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="229" pos:column="73">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="229" pos:column="94">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="229" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="230" pos:column="41">statement</name><op:operator pos:line="230" pos:column="50">.</op:operator><name pos:line="230" pos:column="51">setInt</name></name><argument_list pos:line="230" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="230" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="231" pos:column="41">ResultSet</name></type> <name pos:line="231" pos:column="51">rs</name> <init pos:line="231" pos:column="54">= <expr><call><name><name pos:line="231" pos:column="56">statement</name><op:operator pos:line="231" pos:column="65">.</op:operator><name pos:line="231" pos:column="66">executeQuery</name></name><argument_list pos:line="231" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="233" pos:column="41">while<condition pos:line="233" pos:column="46">(<expr><call><name><name pos:line="233" pos:column="47">rs</name><op:operator pos:line="233" pos:column="49">.</op:operator><name pos:line="233" pos:column="50">next</name></name><argument_list pos:line="233" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="233" pos:column="57">{
						<comment type="line" pos:line="234" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="235" pos:column="49">DBAnnotation</name><op:operator pos:line="235" pos:column="61">.</op:operator><name pos:line="235" pos:column="62">annoate</name></name><argument_list pos:line="235" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="235" pos:column="77">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="235" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="235" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="236" pos:column="41">int</name></type> <name pos:line="236" pos:column="45">UIN</name> <init pos:line="236" pos:column="49">= <expr><call><name><name pos:line="236" pos:column="51">rs</name><op:operator pos:line="236" pos:column="53">.</op:operator><name pos:line="236" pos:column="54">getInt</name></name><argument_list pos:line="236" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="61">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        <decl_stmt><decl><type><name pos:line="237" pos:column="41">Student</name></type> <name pos:line="237" pos:column="49">student</name> <init pos:line="237" pos:column="57">= <expr><op:operator pos:line="237" pos:column="59">new</op:operator> <call><name pos:line="237" pos:column="63">Student</name><argument_list pos:line="237" pos:column="70">(<argument><expr><name pos:line="237" pos:column="71">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="238" pos:column="49">enrolledStudents</name><op:operator pos:line="238" pos:column="65">.</op:operator><name pos:line="238" pos:column="66">add</name></name><argument_list pos:line="238" pos:column="69">(<argument><expr><name pos:line="238" pos:column="70">student</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>      
				}</block></then></if>
			}</block> <catch pos:line="241" pos:column="27">catch<parameter_list pos:line="241" pos:column="32">(<param><decl><type><name pos:line="241" pos:column="33">SQLException</name></type> <name pos:line="241" pos:column="46">e</name></decl></param>)</parameter_list><block pos:line="241" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="242" pos:column="33">System</name><op:operator pos:line="242" pos:column="39">.</op:operator><name pos:line="242" pos:column="40">out</name><op:operator pos:line="242" pos:column="43">.</op:operator><name pos:line="242" pos:column="44">println</name></name><argument_list pos:line="242" pos:column="51">(<argument><expr><name pos:line="242" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block> <catch pos:line="245" pos:column="19">catch<parameter_list pos:line="245" pos:column="24">(<param><decl><type><name pos:line="245" pos:column="25">Exception</name></type> <name pos:line="245" pos:column="35">e</name></decl></param>)</parameter_list><block pos:line="245" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="246" pos:column="25">System</name><op:operator pos:line="246" pos:column="31">.</op:operator><name pos:line="246" pos:column="32">out</name><op:operator pos:line="246" pos:column="35">.</op:operator><name pos:line="246" pos:column="36">println</name></name><argument_list pos:line="246" pos:column="43">(<argument><expr><name pos:line="246" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="248" pos:column="17">return <expr><name pos:line="248" pos:column="24">enrolledStudents</name></expr>;</return>
	}</block></function>
	
 	<comment type="line" pos:line="251" pos:column="9">// Given a student this function returns all the current courses taken by that student</comment>
	<function><type><specifier pos:line="252" pos:column="9">public</specifier> <specifier pos:line="252" pos:column="16">static</specifier> <name><name pos:line="252" pos:column="23">ArrayList</name><argument_list pos:line="252" pos:column="32">&lt;<argument><name pos:line="252" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="252" pos:column="48">getCurrentCoursesOfStudent</name> <parameter_list pos:line="252" pos:column="75">(<param><decl><type><name pos:line="252" pos:column="76">Student</name></type> <name pos:line="252" pos:column="84">student</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="93">{
		<decl_stmt><decl><type><name><name pos:line="253" pos:column="17">ArrayList</name><argument_list pos:line="253" pos:column="26">&lt;<argument><name pos:line="253" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="253" pos:column="42">enrolledCourses</name> <init pos:line="253" pos:column="58">= <expr><op:operator pos:line="253" pos:column="60">new</op:operator> <call><name><name pos:line="253" pos:column="64">ArrayList</name><argument_list pos:line="253" pos:column="73">&lt;<argument><name pos:line="253" pos:column="74">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="253" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="255" pos:column="17">int</name></type> <name pos:line="255" pos:column="21">UIN</name> <init pos:line="255" pos:column="25">= <expr><call><name><name pos:line="255" pos:column="27">student</name><op:operator pos:line="255" pos:column="34">.</op:operator><name pos:line="255" pos:column="35">getUIN</name></name><argument_list pos:line="255" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="257" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="258" pos:column="1">//				variable = {"UIN"},  </comment>
<comment type="line" pos:line="259" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="260" pos:column="1">//				column = {"UIN"}, </comment>
<comment type="line" pos:line="261" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="263" pos:column="17">String</name></type> <name pos:line="263" pos:column="24">SQLGradeSelect</name> <init pos:line="263" pos:column="39">= <expr><lit:literal type="string" pos:line="263" pos:column="41">"SELECT studentenrollment.OfferID "</lit:literal> <op:operator pos:line="263" pos:column="77">+</op:operator>  
								<lit:literal type="string" pos:line="264" pos:column="65">"FROM university.studentenrollment JOIN coursesoffered JOIN semester "</lit:literal> <op:operator pos:line="264" pos:column="136">+</op:operator>
								<lit:literal type="string" pos:line="265" pos:column="65">"Where studentenrollment.UIN = ? "</lit:literal> <op:operator pos:line="265" pos:column="100">+</op:operator>
								<lit:literal type="string" pos:line="266" pos:column="65">"AND studentenrollment.OfferID = coursesoffered.OfferID "</lit:literal> <op:operator pos:line="266" pos:column="123">+</op:operator> 
								<lit:literal type="string" pos:line="267" pos:column="65">"AND coursesoffered.SemesterID = semester.SemesterID "</lit:literal> <op:operator pos:line="267" pos:column="120">+</op:operator>
								<lit:literal type="string" pos:line="268" pos:column="65">"AND semester.IsCurrent = 1;"</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="269" pos:column="17">try<block pos:line="269" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="270" pos:column="25">Connection</name></type> <name pos:line="270" pos:column="36">conn</name> <init pos:line="270" pos:column="41">= <expr><call><name><name pos:line="270" pos:column="43">Database</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">getConnection</name></name><argument_list pos:line="270" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="272" pos:column="25">try<block pos:line="272" pos:column="28">{
			
				<if pos:line="274" pos:column="33">if<condition pos:line="274" pos:column="35">(<expr><name pos:line="274" pos:column="36">conn</name> <op:operator pos:line="274" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="274" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="274" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="276" pos:column="41">PreparedStatement</name></type> <name pos:line="276" pos:column="59">statement</name> <init pos:line="276" pos:column="69">= <expr><call><name><name pos:line="276" pos:column="71">conn</name><op:operator pos:line="276" pos:column="75">.</op:operator><name pos:line="276" pos:column="76">prepareStatement</name></name><argument_list pos:line="276" pos:column="92">(<argument><expr><name pos:line="276" pos:column="93">SQLGradeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="277" pos:column="41">DBAnnotation</name><op:operator pos:line="277" pos:column="53">.</op:operator><name pos:line="277" pos:column="54">annoate</name></name><argument_list pos:line="277" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="69">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="277" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="278" pos:column="41">statement</name><op:operator pos:line="278" pos:column="50">.</op:operator><name pos:line="278" pos:column="51">setInt</name></name><argument_list pos:line="278" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="278" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="278" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="279" pos:column="41">ResultSet</name></type> <name pos:line="279" pos:column="51">rs</name> <init pos:line="279" pos:column="54">= <expr><call><name><name pos:line="279" pos:column="56">statement</name><op:operator pos:line="279" pos:column="65">.</op:operator><name pos:line="279" pos:column="66">executeQuery</name></name><argument_list pos:line="279" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="281" pos:column="41">while<condition pos:line="281" pos:column="46">(<expr><call><name><name pos:line="281" pos:column="47">rs</name><op:operator pos:line="281" pos:column="49">.</op:operator><name pos:line="281" pos:column="50">next</name></name><argument_list pos:line="281" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="281" pos:column="57">{
						<comment type="line" pos:line="282" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="283" pos:column="49">DBAnnotation</name><op:operator pos:line="283" pos:column="61">.</op:operator><name pos:line="283" pos:column="62">annoate</name></name><argument_list pos:line="283" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="283" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="284" pos:column="41">int</name></type> <name pos:line="284" pos:column="45">offerID</name> <init pos:line="284" pos:column="53">= <expr><call><name><name pos:line="284" pos:column="55">rs</name><op:operator pos:line="284" pos:column="57">.</op:operator><name pos:line="284" pos:column="58">getInt</name></name><argument_list pos:line="284" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="284" pos:column="65">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				        <decl_stmt><decl><type><name pos:line="285" pos:column="41">CourseOffered</name></type> <name pos:line="285" pos:column="55">studentCourse</name> <init pos:line="285" pos:column="69">= <expr><lit:literal type="null" pos:line="285" pos:column="71">null</lit:literal></expr></init></decl>;</decl_stmt>
				 		
				 		<try pos:line="287" pos:column="49">try <block pos:line="287" pos:column="53">{
				 			<expr_stmt><expr><name pos:line="288" pos:column="57">studentCourse</name> <op:operator pos:line="288" pos:column="71">=</op:operator> <op:operator pos:line="288" pos:column="73">new</op:operator> <call><name pos:line="288" pos:column="77">CourseOffered</name><argument_list pos:line="288" pos:column="90">(<argument><expr><name pos:line="288" pos:column="91">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				 		}</block> <catch pos:line="289" pos:column="51">catch <parameter_list pos:line="289" pos:column="57">(<param><decl><type><name><name pos:line="289" pos:column="58">Course</name><op:operator pos:line="289" pos:column="64">.</op:operator><name pos:line="289" pos:column="65">CourseDoesNotExistException</name></name></type> <name pos:line="289" pos:column="93">e1</name></decl></param>)</parameter_list> <block pos:line="289" pos:column="97">{
				 			<expr_stmt><expr><call><name><name pos:line="290" pos:column="57">e1</name><op:operator pos:line="290" pos:column="59">.</op:operator><name pos:line="290" pos:column="60">printStackTrace</name></name><argument_list pos:line="290" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch> <catch pos:line="291" pos:column="51">catch <parameter_list pos:line="291" pos:column="57">(<param><decl><type><name><name pos:line="291" pos:column="58">CourseOffered</name><op:operator pos:line="291" pos:column="71">.</op:operator><name pos:line="291" pos:column="72">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="291" pos:column="108">e1</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="112">{
				 			<expr_stmt><expr><call><name><name pos:line="292" pos:column="57">e1</name><op:operator pos:line="292" pos:column="59">.</op:operator><name pos:line="292" pos:column="60">printStackTrace</name></name><argument_list pos:line="292" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
				 		}</block></catch></try>
				         
				 		<expr_stmt><expr><call><name><name pos:line="295" pos:column="49">enrolledCourses</name><op:operator pos:line="295" pos:column="64">.</op:operator><name pos:line="295" pos:column="65">add</name></name><argument_list pos:line="295" pos:column="68">(<argument><expr><name pos:line="295" pos:column="69">studentCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>      
				}</block></then></if>
			}</block> <catch pos:line="298" pos:column="27">catch<parameter_list pos:line="298" pos:column="32">(<param><decl><type><name pos:line="298" pos:column="33">SQLException</name></type> <name pos:line="298" pos:column="46">e</name></decl></param>)</parameter_list><block pos:line="298" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="299" pos:column="33">System</name><op:operator pos:line="299" pos:column="39">.</op:operator><name pos:line="299" pos:column="40">out</name><op:operator pos:line="299" pos:column="43">.</op:operator><name pos:line="299" pos:column="44">println</name></name><argument_list pos:line="299" pos:column="51">(<argument><expr><name pos:line="299" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block> <catch pos:line="302" pos:column="19">catch<parameter_list pos:line="302" pos:column="24">(<param><decl><type><name pos:line="302" pos:column="25">Exception</name></type> <name pos:line="302" pos:column="35">e</name></decl></param>)</parameter_list><block pos:line="302" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="303" pos:column="25">System</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">out</name><op:operator pos:line="303" pos:column="35">.</op:operator><name pos:line="303" pos:column="36">println</name></name><argument_list pos:line="303" pos:column="43">(<argument><expr><name pos:line="303" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="306" pos:column="17">return <expr><name pos:line="306" pos:column="24">enrolledCourses</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="309" pos:column="9">// A synchronized function to enroll students in a course in a Firct Come First Served basis.</comment>
	<comment type="line" pos:line="310" pos:column="9">// This ensure the database integrity that values(like seats remaining) read are the same while enrolling</comment>
	<comment type="line" pos:line="311" pos:column="9">// and do not change in(i.e. the course is not filled up) in the middle of an enrollment.</comment>
	<function><type><specifier pos:line="312" pos:column="9">public</specifier> <specifier pos:line="312" pos:column="16">synchronized</specifier> <name pos:line="312" pos:column="29">boolean</name></type> <name pos:line="312" pos:column="37">enrollStudents</name><parameter_list pos:line="312" pos:column="51">()</parameter_list><block pos:line="312" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="313" pos:column="17">boolean</name></type> <name pos:line="313" pos:column="25">isStudentEnrolled</name> <init pos:line="313" pos:column="43">= <expr><lit:literal type="boolean" pos:line="313" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="314" pos:column="17">int</name></type> <name pos:line="314" pos:column="21">UIN</name> <init pos:line="314" pos:column="25">= <expr><call><name><name pos:line="314" pos:column="27">this</name><op:operator pos:line="314" pos:column="31">.</op:operator><name pos:line="314" pos:column="32">getUIN</name></name><argument_list pos:line="314" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="315" pos:column="17">int</name></type> <name pos:line="315" pos:column="21">offerID</name> <init pos:line="315" pos:column="29">= <expr><call><name><name pos:line="315" pos:column="31">this</name><op:operator pos:line="315" pos:column="35">.</op:operator><name pos:line="315" pos:column="36">getOfferID</name></name><argument_list pos:line="315" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="316" pos:column="17">String</name></type> <name pos:line="316" pos:column="24">grade</name> <init pos:line="316" pos:column="30">= <expr><call><name><name pos:line="316" pos:column="32">this</name><op:operator pos:line="316" pos:column="36">.</op:operator><name pos:line="316" pos:column="37">getGrade</name></name><argument_list pos:line="316" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="318" pos:column="17">// Step 1: Check if student is already enrolled for this course</comment>
		<decl_stmt><decl><type><name pos:line="319" pos:column="17">boolean</name></type> <name pos:line="319" pos:column="25">isStudentCurrentlyEnrolled</name> <init pos:line="319" pos:column="52">= <expr><call><name><name pos:line="319" pos:column="54">this</name><op:operator pos:line="319" pos:column="58">.</op:operator><name pos:line="319" pos:column="59">isStudentEnrolled</name></name><argument_list pos:line="319" pos:column="76">(<argument><expr><name pos:line="319" pos:column="77">UIN</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="82">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="320" pos:column="17">if<condition pos:line="320" pos:column="19">(<expr><name pos:line="320" pos:column="20">isStudentCurrentlyEnrolled</name> <op:operator pos:line="320" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="320" pos:column="50">true</lit:literal></expr>)</condition><then><block pos:line="320" pos:column="55">{
			<expr_stmt><expr><call><name><name pos:line="321" pos:column="25">System</name><op:operator pos:line="321" pos:column="31">.</op:operator><name pos:line="321" pos:column="32">out</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">println</name></name><argument_list pos:line="321" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="44">"The student is already enrolled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="322" pos:column="19">else<block pos:line="322" pos:column="23">{
			<comment type="line" pos:line="323" pos:column="25">// Step 2: if student is not enrolled, check whether there are any seats left.</comment>
			<decl_stmt><decl><type><name pos:line="324" pos:column="25">boolean</name></type> <name pos:line="324" pos:column="33">isSeatAvailable</name> <init pos:line="324" pos:column="49">= <expr><call><name><name pos:line="324" pos:column="51">this</name><op:operator pos:line="324" pos:column="55">.</op:operator><name pos:line="324" pos:column="56">isSeatAvailable</name></name><argument_list pos:line="324" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="325" pos:column="25">if<condition pos:line="325" pos:column="27">(<expr><name pos:line="325" pos:column="28">isSeatAvailable</name> <op:operator pos:line="325" pos:column="44">==</op:operator> <lit:literal type="boolean" pos:line="325" pos:column="47">false</lit:literal></expr>)</condition><then><block pos:line="325" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="326" pos:column="33">System</name><op:operator pos:line="326" pos:column="39">.</op:operator><name pos:line="326" pos:column="40">out</name><op:operator pos:line="326" pos:column="43">.</op:operator><name pos:line="326" pos:column="44">println</name></name><argument_list pos:line="326" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="52">"Seats not available."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="327" pos:column="27">else<block pos:line="327" pos:column="31">{
				
				<comment type="line" pos:line="329" pos:column="33">// Step 3: If student is not enrolled currently AND </comment>
				<comment type="line" pos:line="330" pos:column="33">// if a seat is available, Enroll the student</comment>
				
				<decl_stmt><decl><type><name pos:line="332" pos:column="33">CourseOffered</name></type> <name pos:line="332" pos:column="47">offeredCourse</name> <init pos:line="332" pos:column="61">= <expr><lit:literal type="null" pos:line="332" pos:column="63">null</lit:literal></expr></init></decl>;</decl_stmt>
				
				<try pos:line="334" pos:column="33">try <block pos:line="334" pos:column="37">{
					<expr_stmt><expr><name pos:line="335" pos:column="41">offeredCourse</name> <op:operator pos:line="335" pos:column="55">=</op:operator> <op:operator pos:line="335" pos:column="57">new</op:operator> <call><name pos:line="335" pos:column="61">CourseOffered</name><argument_list pos:line="335" pos:column="74">(<argument><expr><name pos:line="335" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch pos:line="336" pos:column="35">catch <parameter_list pos:line="336" pos:column="41">(<param><decl><type><name><name pos:line="336" pos:column="42">Course</name><op:operator pos:line="336" pos:column="48">.</op:operator><name pos:line="336" pos:column="49">CourseDoesNotExistException</name></name></type> <name pos:line="336" pos:column="77">e1</name></decl></param>)</parameter_list> <block pos:line="336" pos:column="81">{
					<expr_stmt><expr><call><name><name pos:line="337" pos:column="41">e1</name><op:operator pos:line="337" pos:column="43">.</op:operator><name pos:line="337" pos:column="44">printStackTrace</name></name><argument_list pos:line="337" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch pos:line="338" pos:column="35">catch <parameter_list pos:line="338" pos:column="41">(<param><decl><type><name><name pos:line="338" pos:column="42">CourseOffered</name><op:operator pos:line="338" pos:column="55">.</op:operator><name pos:line="338" pos:column="56">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="338" pos:column="92">e1</name></decl></param>)</parameter_list> <block pos:line="338" pos:column="96">{
					<expr_stmt><expr><call><name><name pos:line="339" pos:column="41">e1</name><op:operator pos:line="339" pos:column="43">.</op:operator><name pos:line="339" pos:column="44">printStackTrace</name></name><argument_list pos:line="339" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				
				<decl_stmt><decl><type><name pos:line="342" pos:column="33">Course</name></type> <name pos:line="342" pos:column="40">course</name> <init pos:line="342" pos:column="47">= <expr><call><name><name pos:line="342" pos:column="49">offeredCourse</name><op:operator pos:line="342" pos:column="62">.</op:operator><name pos:line="342" pos:column="63">getCourse</name></name><argument_list pos:line="342" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="343" pos:column="33">String</name></type> <name pos:line="343" pos:column="40">courseName</name> <init pos:line="343" pos:column="51">= <expr><call><name><name pos:line="343" pos:column="53">course</name><op:operator pos:line="343" pos:column="59">.</op:operator><name pos:line="343" pos:column="60">getCourseName</name></name><argument_list pos:line="343" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="344" pos:column="33">int</name></type> <name pos:line="344" pos:column="37">semID</name> <init pos:line="344" pos:column="43">= <expr><call><name><name pos:line="344" pos:column="45">offeredCourse</name><op:operator pos:line="344" pos:column="58">.</op:operator><name pos:line="344" pos:column="59">getSemesterID</name></name><argument_list pos:line="344" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name pos:line="346" pos:column="33">String</name></type> <name pos:line="346" pos:column="40">tableName</name> <init pos:line="346" pos:column="50">= <expr><name pos:line="346" pos:column="52">courseName</name> <op:operator pos:line="346" pos:column="63">+</op:operator> <call><name><name pos:line="346" pos:column="65">Integer</name><op:operator pos:line="346" pos:column="72">.</op:operator><name pos:line="346" pos:column="73">toString</name></name><argument_list pos:line="346" pos:column="81">(<argument><expr><name pos:line="346" pos:column="82">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="346" pos:column="91">+</op:operator> <call><name><name pos:line="346" pos:column="93">Integer</name><op:operator pos:line="346" pos:column="100">.</op:operator><name pos:line="346" pos:column="101">toString</name></name><argument_list pos:line="346" pos:column="109">(<argument><expr><name pos:line="346" pos:column="110">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			
				
<comment type="line" pos:line="349" pos:column="1">//				@DBAnnotation (</comment>
<comment type="line" pos:line="350" pos:column="1">//						variable = {"UIN","offerID"},  </comment>
<comment type="line" pos:line="351" pos:column="1">//						table = "studentenrollment", </comment>
<comment type="line" pos:line="352" pos:column="1">//						column = {"UIN","OfferID"}, </comment>
<comment type="line" pos:line="353" pos:column="1">//						isSource = false)</comment>
				
				<decl_stmt><decl><type><name pos:line="355" pos:column="33">String</name></type> <name pos:line="355" pos:column="40">SQLCourseExamsInsert</name> <init pos:line="355" pos:column="61">= <expr><lit:literal type="string" pos:line="355" pos:column="63">"INSERT INTO %s (StudentUIN,StudentEnrollmentID) VALUES(?,?) ;"</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="356" pos:column="33">SQLCourseExamsInsert</name> <op:operator pos:line="356" pos:column="54">=</op:operator> <call><name><name pos:line="356" pos:column="56">String</name><op:operator pos:line="356" pos:column="62">.</op:operator><name pos:line="356" pos:column="63">format</name></name><argument_list pos:line="356" pos:column="69">(<argument><expr><name pos:line="356" pos:column="70">SQLCourseExamsInsert</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="92">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="357" pos:column="33">String</name></type> <name pos:line="357" pos:column="40">SQLStudentEnrollInsert</name> <init pos:line="357" pos:column="63">= <expr><lit:literal type="string" pos:line="357" pos:column="65">"INSERT INTO studentenrollment(UIN,OfferID,Grade) VALUES(?,?,?) ;"</lit:literal></expr></init></decl>;</decl_stmt>
				
				
				
				<try pos:line="361" pos:column="33">try <block pos:line="361" pos:column="37">{
					<decl_stmt><decl><type><name pos:line="362" pos:column="41">Connection</name></type> <name pos:line="362" pos:column="52">conn</name> <init pos:line="362" pos:column="57">= <expr><call><name><name pos:line="362" pos:column="59">Database</name><op:operator pos:line="362" pos:column="67">.</op:operator><name pos:line="362" pos:column="68">getConnection</name></name><argument_list pos:line="362" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try pos:line="363" pos:column="41">try <block pos:line="363" pos:column="45">{
						<if pos:line="364" pos:column="49">if <condition pos:line="364" pos:column="52">(<expr><name pos:line="364" pos:column="53">conn</name> <op:operator pos:line="364" pos:column="58">!=</op:operator> <lit:literal type="null" pos:line="364" pos:column="61">null</lit:literal></expr>)</condition><then pos:line="364" pos:column="66"> <block pos:line="364" pos:column="67">{
						 
							<decl_stmt><decl><type><name pos:line="366" pos:column="57">String</name></type> <name><name pos:line="366" pos:column="64">key</name><index pos:line="366" pos:column="67">[]</index></name> <init pos:line="366" pos:column="70">= <expr><block pos:line="366" pos:column="72">{ <expr><lit:literal type="string" pos:line="366" pos:column="74">"EnrollmentID"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="367" pos:column="57">PreparedStatement</name></type> <name pos:line="367" pos:column="75">statement</name> <init pos:line="367" pos:column="85">= <expr><call><name><name pos:line="367" pos:column="87">conn</name><op:operator pos:line="367" pos:column="91">.</op:operator><name pos:line="367" pos:column="92">prepareStatement</name></name><argument_list pos:line="367" pos:column="108">(<argument><expr><name pos:line="367" pos:column="109">SQLStudentEnrollInsert</name></expr></argument>,<argument><expr><name pos:line="367" pos:column="132">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="368" pos:column="57">DBAnnotation</name><op:operator pos:line="368" pos:column="69">.</op:operator><name pos:line="368" pos:column="70">annoate</name></name><argument_list pos:line="368" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="78">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="368" pos:column="85">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="368" pos:column="106">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="368" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="369" pos:column="57">statement</name><op:operator pos:line="369" pos:column="66">.</op:operator><name pos:line="369" pos:column="67">setInt</name></name><argument_list pos:line="369" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="369" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="369" pos:column="77">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="370" pos:column="57">DBAnnotation</name><op:operator pos:line="370" pos:column="69">.</op:operator><name pos:line="370" pos:column="70">annoate</name></name><argument_list pos:line="370" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="370" pos:column="78">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="89">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="110">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="370" pos:column="121">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="371" pos:column="57">statement</name><op:operator pos:line="371" pos:column="66">.</op:operator><name pos:line="371" pos:column="67">setInt</name></name><argument_list pos:line="371" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="371" pos:column="74">2</lit:literal></expr></argument>, <argument><expr><name pos:line="371" pos:column="77">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="372" pos:column="57">DBAnnotation</name><op:operator pos:line="372" pos:column="69">.</op:operator><name pos:line="372" pos:column="70">annoate</name></name><argument_list pos:line="372" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="78">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="372" pos:column="87">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="372" pos:column="108">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="372" pos:column="117">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="373" pos:column="57">statement</name><op:operator pos:line="373" pos:column="66">.</op:operator><name pos:line="373" pos:column="67">setString</name></name><argument_list pos:line="373" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="373" pos:column="77">3</lit:literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="80">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="375" pos:column="57">statement</name><op:operator pos:line="375" pos:column="66">.</op:operator><name pos:line="375" pos:column="67">executeUpdate</name></name><argument_list pos:line="375" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
							
							<decl_stmt><decl><type><name pos:line="377" pos:column="57">ResultSet</name></type> <name pos:line="377" pos:column="67">rs</name> <init pos:line="377" pos:column="70">= <expr><call><name><name pos:line="377" pos:column="72">statement</name><op:operator pos:line="377" pos:column="81">.</op:operator><name pos:line="377" pos:column="82">getGeneratedKeys</name></name><argument_list pos:line="377" pos:column="98">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="378" pos:column="57">int</name></type> <name pos:line="378" pos:column="61">generatedEnrollmentID</name> <init pos:line="378" pos:column="83">= <expr><lit:literal type="number" pos:line="378" pos:column="85">0</lit:literal></expr></init></decl>;</decl_stmt>
							<comment type="line" pos:line="379" pos:column="57">// To get the database auto-generated EnrollmentID of</comment>
							<comment type="line" pos:line="380" pos:column="57">// the student enrollment just inserted</comment>
							<if pos:line="381" pos:column="57">if <condition pos:line="381" pos:column="60">(<expr><call><name><name pos:line="381" pos:column="61">rs</name><op:operator pos:line="381" pos:column="63">.</op:operator><name pos:line="381" pos:column="64">next</name></name><argument_list pos:line="381" pos:column="68">()</argument_list></call></expr>)</condition><then pos:line="381" pos:column="71"> <block pos:line="381" pos:column="72">{
								<expr_stmt><expr><call><name><name pos:line="382" pos:column="65">DBAnnotation</name><op:operator pos:line="382" pos:column="77">.</op:operator><name pos:line="382" pos:column="78">annoate</name></name><argument_list pos:line="382" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="86">"generatedEnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="111">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="382" pos:column="132">"EnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="382" pos:column="148">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="383" pos:column="65">generatedEnrollmentID</name><op:operator pos:line="383" pos:column="86">=</op:operator> <call><name><name pos:line="383" pos:column="88">rs</name><op:operator pos:line="383" pos:column="90">.</op:operator><name pos:line="383" pos:column="91">getInt</name></name><argument_list pos:line="383" pos:column="97">(<argument><expr><lit:literal type="number" pos:line="383" pos:column="98">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
							
							<expr_stmt><expr><name pos:line="386" pos:column="57">statement</name> <op:operator pos:line="386" pos:column="67">=</op:operator> <call><name><name pos:line="386" pos:column="69">conn</name><op:operator pos:line="386" pos:column="73">.</op:operator><name pos:line="386" pos:column="74">prepareStatement</name></name><argument_list pos:line="386" pos:column="90">(<argument><expr><name pos:line="386" pos:column="91">SQLCourseExamsInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="line" pos:line="387" pos:column="57">// statement.setString(1, tableName);</comment>
							<expr_stmt><expr><call><name><name pos:line="388" pos:column="57">DBAnnotation</name><op:operator pos:line="388" pos:column="69">.</op:operator><name pos:line="388" pos:column="70">annoate</name></name><argument_list pos:line="388" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="388" pos:column="78">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="388" pos:column="85">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="388" pos:column="106">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="388" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="389" pos:column="57">statement</name><op:operator pos:line="389" pos:column="66">.</op:operator><name pos:line="389" pos:column="67">setInt</name></name><argument_list pos:line="389" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="389" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="389" pos:column="77">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="390" pos:column="57">DBAnnotation</name><op:operator pos:line="390" pos:column="69">.</op:operator><name pos:line="390" pos:column="70">annoate</name></name><argument_list pos:line="390" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="78">"generatedEnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="390" pos:column="103">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="390" pos:column="124">"EnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="390" pos:column="140">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="391" pos:column="57">statement</name><op:operator pos:line="391" pos:column="66">.</op:operator><name pos:line="391" pos:column="67">setInt</name></name><argument_list pos:line="391" pos:column="73">(<argument><expr><lit:literal type="number" pos:line="391" pos:column="74">2</lit:literal></expr></argument>, <argument><expr><name pos:line="391" pos:column="77">generatedEnrollmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="392" pos:column="57">statement</name><op:operator pos:line="392" pos:column="66">.</op:operator><name pos:line="392" pos:column="67">executeUpdate</name></name><argument_list pos:line="392" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
							
							<decl_stmt><decl><type><name pos:line="394" pos:column="57">boolean</name></type> <name pos:line="394" pos:column="65">seatAdded</name> <init pos:line="394" pos:column="75">= <expr><call><name><name pos:line="394" pos:column="77">offeredCourse</name><op:operator pos:line="394" pos:column="90">.</op:operator><name pos:line="394" pos:column="91">addOneSeatFilledToCourseOffered</name></name><argument_list pos:line="394" pos:column="122">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="395" pos:column="57">if<condition pos:line="395" pos:column="59">(<expr><name pos:line="395" pos:column="60">seatAdded</name> <op:operator pos:line="395" pos:column="70">=</op:operator> <lit:literal type="boolean" pos:line="395" pos:column="72">true</lit:literal></expr>)</condition><then><block pos:line="395" pos:column="77">{
								<expr_stmt><expr><call><name><name pos:line="396" pos:column="65">Database</name><op:operator pos:line="396" pos:column="73">.</op:operator><name pos:line="396" pos:column="74">commitTransaction</name></name><argument_list pos:line="396" pos:column="91">(<argument><expr><name pos:line="396" pos:column="92">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="397" pos:column="65">isStudentEnrolled</name> <op:operator pos:line="397" pos:column="83">=</op:operator> <lit:literal type="boolean" pos:line="397" pos:column="85">true</lit:literal></expr>;</expr_stmt>
							}</block></then> <else pos:line="398" pos:column="59">else <block pos:line="398" pos:column="64">{
								<expr_stmt><expr><call><name><name pos:line="399" pos:column="65">Database</name><op:operator pos:line="399" pos:column="73">.</op:operator><name pos:line="399" pos:column="74">rollBackTransaction</name></name><argument_list pos:line="399" pos:column="93">(<argument><expr><name pos:line="399" pos:column="94">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else></if>
							
						}</block></then></if>	
					}</block> <catch pos:line="403" pos:column="43">catch <parameter_list pos:line="403" pos:column="49">(<param><decl><type><name pos:line="403" pos:column="50">SQLException</name></type> <name pos:line="403" pos:column="63">e</name></decl></param>)</parameter_list> <block pos:line="403" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="404" pos:column="49">System</name><op:operator pos:line="404" pos:column="55">.</op:operator><name pos:line="404" pos:column="56">out</name><op:operator pos:line="404" pos:column="59">.</op:operator><name pos:line="404" pos:column="60">println</name></name><argument_list pos:line="404" pos:column="67">(<argument><expr><name pos:line="404" pos:column="68">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="405" pos:column="49">Database</name><op:operator pos:line="405" pos:column="57">.</op:operator><name pos:line="405" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="405" pos:column="77">(<argument><expr><name pos:line="405" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>

				}</block> <catch pos:line="408" pos:column="35">catch <parameter_list pos:line="408" pos:column="41">(<param><decl><type><name pos:line="408" pos:column="42">Exception</name></type> <name pos:line="408" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="408" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="409" pos:column="41">System</name><op:operator pos:line="409" pos:column="47">.</op:operator><name pos:line="409" pos:column="48">out</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">println</name></name><argument_list pos:line="409" pos:column="59">(<argument><expr><name pos:line="409" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></else></if>	
		}</block></else></if>
		<return pos:line="413" pos:column="17">return <expr><name pos:line="413" pos:column="24">isStudentEnrolled</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="416" pos:column="9">// Updates the grades of all the students in a course</comment>
	<function><type><specifier pos:line="417" pos:column="9">public</specifier> <specifier pos:line="417" pos:column="16">static</specifier> <name pos:line="417" pos:column="23">boolean</name></type> <name pos:line="417" pos:column="31">updateAllStudentGrade</name><parameter_list pos:line="417" pos:column="52">(<param><decl><type><name><name pos:line="417" pos:column="53">HashMap</name><argument_list pos:line="417" pos:column="60">&lt;<argument><name pos:line="417" pos:column="61">Student</name></argument>,<argument><name pos:line="417" pos:column="69">String</name></argument>&gt;</argument_list></name></type> <name pos:line="417" pos:column="77">studentGrades</name></decl></param>, <param><decl><type><name pos:line="417" pos:column="92">CourseOffered</name></type> <name pos:line="417" pos:column="106">offeredCourse</name></decl></param>)</parameter_list><block pos:line="417" pos:column="120">{
		<decl_stmt><decl><type><name pos:line="418" pos:column="17">boolean</name></type> <name pos:line="418" pos:column="25">isGradeUpdated</name> <init pos:line="418" pos:column="40">= <expr><lit:literal type="boolean" pos:line="418" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="420" pos:column="17">int</name></type> <name pos:line="420" pos:column="21">offerID</name> <init pos:line="420" pos:column="29">= <expr><call><name><name pos:line="420" pos:column="31">offeredCourse</name><op:operator pos:line="420" pos:column="44">.</op:operator><name pos:line="420" pos:column="45">getOfferID</name></name><argument_list pos:line="420" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="421" pos:column="17">Set</name><argument_list pos:line="421" pos:column="20">&lt;<argument><name pos:line="421" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="421" pos:column="30">keys</name> <init pos:line="421" pos:column="35">= <expr><call><name><name pos:line="421" pos:column="37">studentGrades</name><op:operator pos:line="421" pos:column="50">.</op:operator><name pos:line="421" pos:column="51">keySet</name></name><argument_list pos:line="421" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="422" pos:column="17">Iterator</name><argument_list pos:line="422" pos:column="25">&lt;<argument><name pos:line="422" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="422" pos:column="35">keyIterator</name> <init pos:line="422" pos:column="47">= <expr><call><name><name pos:line="422" pos:column="49">keys</name><op:operator pos:line="422" pos:column="53">.</op:operator><name pos:line="422" pos:column="54">iterator</name></name><argument_list pos:line="422" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="423" pos:column="17">while <condition pos:line="423" pos:column="23">(<expr><call><name><name pos:line="423" pos:column="24">keyIterator</name><op:operator pos:line="423" pos:column="35">.</op:operator><name pos:line="423" pos:column="36">hasNext</name></name><argument_list pos:line="423" pos:column="43">()</argument_list></call></expr>)</condition> <block pos:line="423" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="424" pos:column="25">Student</name></type> <name pos:line="424" pos:column="33">student</name> <init pos:line="424" pos:column="41">= <expr><call><name><name pos:line="424" pos:column="43">keyIterator</name><op:operator pos:line="424" pos:column="54">.</op:operator><name pos:line="424" pos:column="55">next</name></name><argument_list pos:line="424" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="425" pos:column="25">int</name></type> <name pos:line="425" pos:column="29">UIN</name> <init pos:line="425" pos:column="33">= <expr><call><name><name pos:line="425" pos:column="35">student</name><op:operator pos:line="425" pos:column="42">.</op:operator><name pos:line="425" pos:column="43">getUIN</name></name><argument_list pos:line="425" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="426" pos:column="25">String</name></type> <name pos:line="426" pos:column="32">grade</name> <init pos:line="426" pos:column="38">= <expr><call><name><name pos:line="426" pos:column="40">studentGrades</name><op:operator pos:line="426" pos:column="53">.</op:operator><name pos:line="426" pos:column="54">get</name></name><argument_list pos:line="426" pos:column="57">(<argument><expr><name pos:line="426" pos:column="58">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="427" pos:column="25">GradeSystem</name></type> <name pos:line="427" pos:column="37">gradesys</name> <init pos:line="427" pos:column="46">= <expr><op:operator pos:line="427" pos:column="48">new</op:operator> <call><name pos:line="427" pos:column="52">GradeSystem</name><argument_list pos:line="427" pos:column="63">(<argument><expr><name pos:line="427" pos:column="64">grade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="428" pos:column="25">boolean</name></type> <name pos:line="428" pos:column="33">isgradePresent</name> <init pos:line="428" pos:column="48">= <expr><call><name><name pos:line="428" pos:column="50">gradesys</name><op:operator pos:line="428" pos:column="58">.</op:operator><name pos:line="428" pos:column="59">isGradePresent</name></name><argument_list pos:line="428" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="429" pos:column="25">if <condition pos:line="429" pos:column="28">(<expr><name pos:line="429" pos:column="29">isgradePresent</name> <op:operator pos:line="429" pos:column="44">==</op:operator> <lit:literal type="boolean" pos:line="429" pos:column="47">false</lit:literal></expr>)</condition><then><block pos:line="429" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="430" pos:column="33">System</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">out</name><op:operator pos:line="430" pos:column="43">.</op:operator><name pos:line="430" pos:column="44">println</name></name><argument_list pos:line="430" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="430" pos:column="52">"Grade Not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="431" pos:column="27">else <block pos:line="431" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="432" pos:column="33">StudentEnrollment</name></type> <name pos:line="432" pos:column="51">enrollStudent</name> <init pos:line="432" pos:column="65">= <expr><op:operator pos:line="432" pos:column="67">new</op:operator> <call><name pos:line="432" pos:column="71">StudentEnrollment</name><argument_list pos:line="432" pos:column="88">(<argument><expr><name pos:line="432" pos:column="89">UIN</name></expr></argument>,<argument><expr><name pos:line="432" pos:column="93">offerID</name></expr></argument>,<argument><expr><name pos:line="432" pos:column="101">grade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="433" pos:column="33">boolean</name></type> <name pos:line="433" pos:column="41">updateStudentGrade</name> <init pos:line="433" pos:column="60">= <expr><call><name><name pos:line="433" pos:column="62">enrollStudent</name><op:operator pos:line="433" pos:column="75">.</op:operator><name pos:line="433" pos:column="76">updateStudentGrade</name></name><argument_list pos:line="433" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if pos:line="435" pos:column="33">if<condition pos:line="435" pos:column="35">(<expr><name pos:line="435" pos:column="36">updateStudentGrade</name> <op:operator pos:line="435" pos:column="55">==</op:operator> <lit:literal type="boolean" pos:line="435" pos:column="58">false</lit:literal></expr>)</condition><then><block pos:line="435" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="436" pos:column="41">System</name><op:operator pos:line="436" pos:column="47">.</op:operator><name pos:line="436" pos:column="48">out</name><op:operator pos:line="436" pos:column="51">.</op:operator><name pos:line="436" pos:column="52">println</name></name><argument_list pos:line="436" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="436" pos:column="60">"Student "</lit:literal> <op:operator pos:line="436" pos:column="71">+</op:operator> <call><name><name pos:line="436" pos:column="73">student</name><op:operator pos:line="436" pos:column="80">.</op:operator><name pos:line="436" pos:column="81">getName</name></name><argument_list pos:line="436" pos:column="88">()</argument_list></call> <op:operator pos:line="436" pos:column="91">+</op:operator> <lit:literal type="string" pos:line="436" pos:column="93">"'s grade not updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="437" pos:column="35">else <block pos:line="437" pos:column="40">{
					<expr_stmt><expr><name pos:line="438" pos:column="41">isGradeUpdated</name> <op:operator pos:line="438" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="438" pos:column="58">true</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			
			}</block></else></if>
		}</block></while>
		
		<return pos:line="444" pos:column="17">return <expr><name pos:line="444" pos:column="24">isGradeUpdated</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="447" pos:column="9">// Updates the grade of a single student</comment>
	<function><type><specifier pos:line="448" pos:column="9">public</specifier> <name pos:line="448" pos:column="16">boolean</name></type> <name pos:line="448" pos:column="24">updateStudentGrade</name><parameter_list pos:line="448" pos:column="42">()</parameter_list><block pos:line="448" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="449" pos:column="17">boolean</name></type> <name pos:line="449" pos:column="25">isGradeUpdated</name> <init pos:line="449" pos:column="40">= <expr><lit:literal type="boolean" pos:line="449" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="450" pos:column="17">int</name></type> <name pos:line="450" pos:column="21">UIN</name> <init pos:line="450" pos:column="25">= <expr><call><name><name pos:line="450" pos:column="27">this</name><op:operator pos:line="450" pos:column="31">.</op:operator><name pos:line="450" pos:column="32">getUIN</name></name><argument_list pos:line="450" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="451" pos:column="17">int</name></type> <name pos:line="451" pos:column="21">offerID</name> <init pos:line="451" pos:column="29">= <expr><call><name><name pos:line="451" pos:column="31">this</name><op:operator pos:line="451" pos:column="35">.</op:operator><name pos:line="451" pos:column="36">getOfferID</name></name><argument_list pos:line="451" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="452" pos:column="17">String</name></type> <name pos:line="452" pos:column="24">grade</name> <init pos:line="452" pos:column="30">= <expr><call><name><name pos:line="452" pos:column="32">this</name><op:operator pos:line="452" pos:column="36">.</op:operator><name pos:line="452" pos:column="37">getGrade</name></name><argument_list pos:line="452" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="453" pos:column="17">GradeSystem</name></type> <name pos:line="453" pos:column="29">gradesys</name> <init pos:line="453" pos:column="38">= <expr><op:operator pos:line="453" pos:column="40">new</op:operator> <call><name pos:line="453" pos:column="44">GradeSystem</name><argument_list pos:line="453" pos:column="55">(<argument><expr><name pos:line="453" pos:column="56">grade</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="454" pos:column="17">boolean</name></type> <name pos:line="454" pos:column="25">isgradePresent</name> <init pos:line="454" pos:column="40">= <expr><call><name><name pos:line="454" pos:column="42">gradesys</name><op:operator pos:line="454" pos:column="50">.</op:operator><name pos:line="454" pos:column="51">isGradePresent</name></name><argument_list pos:line="454" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="455" pos:column="17">if <condition pos:line="455" pos:column="20">(<expr><name pos:line="455" pos:column="21">isgradePresent</name> <op:operator pos:line="455" pos:column="36">==</op:operator> <lit:literal type="boolean" pos:line="455" pos:column="39">false</lit:literal></expr>)</condition><then><block pos:line="455" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="456" pos:column="25">System</name><op:operator pos:line="456" pos:column="31">.</op:operator><name pos:line="456" pos:column="32">out</name><op:operator pos:line="456" pos:column="35">.</op:operator><name pos:line="456" pos:column="36">println</name></name><argument_list pos:line="456" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="456" pos:column="44">"Grade Not present"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="457" pos:column="19">else <block pos:line="457" pos:column="24">{
			
		
		<comment type="line" pos:line="460" pos:column="17">// Step 1: Check if student is already enrolled for this course</comment>
		<decl_stmt><decl><type><name pos:line="461" pos:column="17">boolean</name></type> <name pos:line="461" pos:column="25">isStudentCurrentlyEnrolled</name> <init pos:line="461" pos:column="52">= <expr><call><name><name pos:line="461" pos:column="54">this</name><op:operator pos:line="461" pos:column="58">.</op:operator><name pos:line="461" pos:column="59">isStudentEnrolled</name></name><argument_list pos:line="461" pos:column="76">(<argument><expr><name pos:line="461" pos:column="77">UIN</name></expr></argument>, <argument><expr><name pos:line="461" pos:column="82">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="462" pos:column="17">if<condition pos:line="462" pos:column="19">(<expr><name pos:line="462" pos:column="20">isStudentCurrentlyEnrolled</name> <op:operator pos:line="462" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="462" pos:column="50">false</lit:literal></expr>)</condition><then><block pos:line="462" pos:column="56">{
			<expr_stmt><expr><call><name><name pos:line="463" pos:column="25">System</name><op:operator pos:line="463" pos:column="31">.</op:operator><name pos:line="463" pos:column="32">out</name><op:operator pos:line="463" pos:column="35">.</op:operator><name pos:line="463" pos:column="36">println</name></name><argument_list pos:line="463" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="44">"The student is not enrolled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="464" pos:column="19">else<block pos:line="464" pos:column="23">{
			
			<decl_stmt><decl><type><name pos:line="466" pos:column="25">int</name></type> <name pos:line="466" pos:column="29">enrollmentID</name> <init pos:line="466" pos:column="42">= <expr><call><name><name pos:line="466" pos:column="44">this</name><op:operator pos:line="466" pos:column="48">.</op:operator><name pos:line="466" pos:column="49">getStudentEnrollmentID</name></name><argument_list pos:line="466" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>	
			<comment type="line" pos:line="467" pos:column="25">// Step 2: If student is enrolled currently, update their grade.</comment>
			
<comment type="line" pos:line="469" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="470" pos:column="1">//					variable = {"grade","enrollmentID"},  </comment>
<comment type="line" pos:line="471" pos:column="1">//					table = "studentenrollment", </comment>
<comment type="line" pos:line="472" pos:column="1">//					column = {"Grade","EnrollmentID"}, </comment>
<comment type="line" pos:line="473" pos:column="1">//					isSource = false)</comment>
			<decl_stmt><decl><type><name pos:line="474" pos:column="25">String</name></type> <name pos:line="474" pos:column="32">SQLStudentEnrollInsert</name> <init pos:line="474" pos:column="55">= <expr><lit:literal type="string" pos:line="474" pos:column="57">"UPDATE `studentenrollment` SET `Grade`=? WHERE `EnrollmentID`=?;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="476" pos:column="25">try <block pos:line="476" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="477" pos:column="33">Connection</name></type> <name pos:line="477" pos:column="44">conn</name> <init pos:line="477" pos:column="49">= <expr><call><name><name pos:line="477" pos:column="51">Database</name><op:operator pos:line="477" pos:column="59">.</op:operator><name pos:line="477" pos:column="60">getConnection</name></name><argument_list pos:line="477" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="478" pos:column="33">try <block pos:line="478" pos:column="37">{
					<if pos:line="479" pos:column="41">if <condition pos:line="479" pos:column="44">(<expr><name pos:line="479" pos:column="45">conn</name> <op:operator pos:line="479" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="479" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="479" pos:column="58"> <block pos:line="479" pos:column="59">{
					 
						<decl_stmt><decl><type><name pos:line="481" pos:column="49">PreparedStatement</name></type> <name pos:line="481" pos:column="67">statement</name> <init pos:line="481" pos:column="77">= <expr><call><name><name pos:line="481" pos:column="79">conn</name><op:operator pos:line="481" pos:column="83">.</op:operator><name pos:line="481" pos:column="84">prepareStatement</name></name><argument_list pos:line="481" pos:column="100">(<argument><expr><name pos:line="481" pos:column="101">SQLStudentEnrollInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="482" pos:column="49">DBAnnotation</name><op:operator pos:line="482" pos:column="61">.</op:operator><name pos:line="482" pos:column="62">annoate</name></name><argument_list pos:line="482" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="482" pos:column="70">"grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="482" pos:column="79">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="482" pos:column="100">"Grade"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="482" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="483" pos:column="49">statement</name><op:operator pos:line="483" pos:column="58">.</op:operator><name pos:line="483" pos:column="59">setString</name></name><argument_list pos:line="483" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="483" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="483" pos:column="72">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="484" pos:column="49">DBAnnotation</name><op:operator pos:line="484" pos:column="61">.</op:operator><name pos:line="484" pos:column="62">annoate</name></name><argument_list pos:line="484" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="484" pos:column="70">"enrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="484" pos:column="86">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="484" pos:column="107">"EnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="484" pos:column="123">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="485" pos:column="49">statement</name><op:operator pos:line="485" pos:column="58">.</op:operator><name pos:line="485" pos:column="59">setInt</name></name><argument_list pos:line="485" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="485" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="485" pos:column="69">enrollmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="486" pos:column="49">statement</name><op:operator pos:line="486" pos:column="58">.</op:operator><name pos:line="486" pos:column="59">executeUpdate</name></name><argument_list pos:line="486" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="487" pos:column="49">Database</name><op:operator pos:line="487" pos:column="57">.</op:operator><name pos:line="487" pos:column="58">commitTransaction</name></name><argument_list pos:line="487" pos:column="75">(<argument><expr><name pos:line="487" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="488" pos:column="49">isGradeUpdated</name> <op:operator pos:line="488" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="488" pos:column="66">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>	
				}</block> <catch pos:line="490" pos:column="35">catch <parameter_list pos:line="490" pos:column="41">(<param><decl><type><name pos:line="490" pos:column="42">SQLException</name></type> <name pos:line="490" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="490" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="491" pos:column="41">System</name><op:operator pos:line="491" pos:column="47">.</op:operator><name pos:line="491" pos:column="48">out</name><op:operator pos:line="491" pos:column="51">.</op:operator><name pos:line="491" pos:column="52">println</name></name><argument_list pos:line="491" pos:column="59">(<argument><expr><name pos:line="491" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="492" pos:column="41">Database</name><op:operator pos:line="492" pos:column="49">.</op:operator><name pos:line="492" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="492" pos:column="69">(<argument><expr><name pos:line="492" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="495" pos:column="27">catch <parameter_list pos:line="495" pos:column="33">(<param><decl><type><name pos:line="495" pos:column="34">Exception</name></type> <name pos:line="495" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="495" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">System</name><op:operator pos:line="496" pos:column="39">.</op:operator><name pos:line="496" pos:column="40">out</name><op:operator pos:line="496" pos:column="43">.</op:operator><name pos:line="496" pos:column="44">println</name></name><argument_list pos:line="496" pos:column="51">(<argument><expr><name pos:line="496" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>
		}</block></else></if>
	
		<return pos:line="501" pos:column="17">return <expr><name pos:line="501" pos:column="24">isGradeUpdated</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="504" pos:column="9">// To retrive the enrollment id for a student</comment>
	<function><type><specifier pos:line="505" pos:column="9">private</specifier> <name pos:line="505" pos:column="17">int</name></type> <name pos:line="505" pos:column="21">getStudentEnrollmentID</name><parameter_list pos:line="505" pos:column="43">()</parameter_list> <block pos:line="505" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="506" pos:column="17">int</name></type> <name pos:line="506" pos:column="21">enrollmentID</name> <init pos:line="506" pos:column="34">= <expr><lit:literal type="number" pos:line="506" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="507" pos:column="17">int</name></type> <name pos:line="507" pos:column="21">UIN</name> <init pos:line="507" pos:column="25">= <expr><call><name><name pos:line="507" pos:column="27">this</name><op:operator pos:line="507" pos:column="31">.</op:operator><name pos:line="507" pos:column="32">getUIN</name></name><argument_list pos:line="507" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="508" pos:column="17">int</name></type> <name pos:line="508" pos:column="21">offerID</name> <init pos:line="508" pos:column="29">= <expr><call><name><name pos:line="508" pos:column="31">this</name><op:operator pos:line="508" pos:column="35">.</op:operator><name pos:line="508" pos:column="36">getOfferID</name></name><argument_list pos:line="508" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="510" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="511" pos:column="1">//				variable = {"UIN","offerID","enrollmentID"},  </comment>
<comment type="line" pos:line="512" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="513" pos:column="1">//				column = {"UIN","OfferID","EnrollmentID"}, </comment>
<comment type="line" pos:line="514" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="516" pos:column="17">String</name></type> <name pos:line="516" pos:column="24">SQLStudentEnrollSelect</name> <init pos:line="516" pos:column="47">= <expr><lit:literal type="string" pos:line="516" pos:column="49">"Select EnrollmentID FROM studentenrollment WHERE UIN = ? AND OfferID = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="518" pos:column="17">try<block pos:line="518" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="519" pos:column="25">Connection</name></type> <name pos:line="519" pos:column="36">conn</name> <init pos:line="519" pos:column="41">= <expr><call><name><name pos:line="519" pos:column="43">Database</name><op:operator pos:line="519" pos:column="51">.</op:operator><name pos:line="519" pos:column="52">getConnection</name></name><argument_list pos:line="519" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="521" pos:column="25">try<block pos:line="521" pos:column="28">{
			
				<if pos:line="523" pos:column="33">if<condition pos:line="523" pos:column="35">(<expr><name pos:line="523" pos:column="36">conn</name> <op:operator pos:line="523" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="523" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="523" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="525" pos:column="41">PreparedStatement</name></type> <name pos:line="525" pos:column="59">statement</name> <init pos:line="525" pos:column="69">= <expr><call><name><name pos:line="525" pos:column="71">conn</name><op:operator pos:line="525" pos:column="75">.</op:operator><name pos:line="525" pos:column="76">prepareStatement</name></name><argument_list pos:line="525" pos:column="92">(<argument><expr><name pos:line="525" pos:column="93">SQLStudentEnrollSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="526" pos:column="41">DBAnnotation</name><op:operator pos:line="526" pos:column="53">.</op:operator><name pos:line="526" pos:column="54">annoate</name></name><argument_list pos:line="526" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="526" pos:column="69">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="526" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="526" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="527" pos:column="41">statement</name><op:operator pos:line="527" pos:column="50">.</op:operator><name pos:line="527" pos:column="51">setInt</name></name><argument_list pos:line="527" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="527" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="527" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="528" pos:column="41">DBAnnotation</name><op:operator pos:line="528" pos:column="53">.</op:operator><name pos:line="528" pos:column="54">annoate</name></name><argument_list pos:line="528" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="528" pos:column="73">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="528" pos:column="94">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="528" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="529" pos:column="41">statement</name><op:operator pos:line="529" pos:column="50">.</op:operator><name pos:line="529" pos:column="51">setInt</name></name><argument_list pos:line="529" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="529" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="529" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="531" pos:column="41">ResultSet</name></type> <name pos:line="531" pos:column="51">rs</name> <init pos:line="531" pos:column="54">= <expr><call><name><name pos:line="531" pos:column="56">statement</name><op:operator pos:line="531" pos:column="65">.</op:operator><name pos:line="531" pos:column="66">executeQuery</name></name><argument_list pos:line="531" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="533" pos:column="41">while<condition pos:line="533" pos:column="46">(<expr><call><name><name pos:line="533" pos:column="47">rs</name><op:operator pos:line="533" pos:column="49">.</op:operator><name pos:line="533" pos:column="50">next</name></name><argument_list pos:line="533" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="533" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="534" pos:column="49">DBAnnotation</name><op:operator pos:line="534" pos:column="61">.</op:operator><name pos:line="534" pos:column="62">annoate</name></name><argument_list pos:line="534" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="534" pos:column="70">"enrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="534" pos:column="86">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="534" pos:column="107">"EnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="534" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <expr_stmt><expr><name pos:line="535" pos:column="41">enrollmentID</name> <op:operator pos:line="535" pos:column="54">=</op:operator> <call><name><name pos:line="535" pos:column="56">rs</name><op:operator pos:line="535" pos:column="58">.</op:operator><name pos:line="535" pos:column="59">getInt</name></name><argument_list pos:line="535" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="535" pos:column="66">"EnrollmentID"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>      
					<expr_stmt><expr><call><name><name pos:line="537" pos:column="41">this</name><op:operator pos:line="537" pos:column="45">.</op:operator><name pos:line="537" pos:column="46">setEnrollmentID</name></name><argument_list pos:line="537" pos:column="61">(<argument><expr><name pos:line="537" pos:column="62">enrollmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			<catch pos:line="540" pos:column="25">catch<parameter_list pos:line="540" pos:column="30">(<param><decl><type><name pos:line="540" pos:column="31">SQLException</name></type> <name pos:line="540" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="540" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="541" pos:column="33">System</name><op:operator pos:line="541" pos:column="39">.</op:operator><name pos:line="541" pos:column="40">out</name><op:operator pos:line="541" pos:column="43">.</op:operator><name pos:line="541" pos:column="44">println</name></name><argument_list pos:line="541" pos:column="51">(<argument><expr><name pos:line="541" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block>
		<catch pos:line="545" pos:column="17">catch<parameter_list pos:line="545" pos:column="22">(<param><decl><type><name pos:line="545" pos:column="23">Exception</name></type> <name pos:line="545" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="545" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="546" pos:column="25">System</name><op:operator pos:line="546" pos:column="31">.</op:operator><name pos:line="546" pos:column="32">out</name><op:operator pos:line="546" pos:column="35">.</op:operator><name pos:line="546" pos:column="36">println</name></name><argument_list pos:line="546" pos:column="43">(<argument><expr><name pos:line="546" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="549" pos:column="17">return <expr><name pos:line="549" pos:column="24">enrollmentID</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="552" pos:column="9">// Unregisters a student from the student enrollment table</comment>
	<function><type><specifier pos:line="553" pos:column="9">public</specifier> <name pos:line="553" pos:column="16">boolean</name></type> <name pos:line="553" pos:column="24">unregisterStudent</name><parameter_list pos:line="553" pos:column="41">()</parameter_list><block pos:line="553" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="554" pos:column="17">boolean</name></type> <name pos:line="554" pos:column="25">studentUnregistered</name> <init pos:line="554" pos:column="45">= <expr><lit:literal type="boolean" pos:line="554" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="556" pos:column="17">int</name></type> <name pos:line="556" pos:column="21">UIN</name> <init pos:line="556" pos:column="25">= <expr><call><name><name pos:line="556" pos:column="27">this</name><op:operator pos:line="556" pos:column="31">.</op:operator><name pos:line="556" pos:column="32">getUIN</name></name><argument_list pos:line="556" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="557" pos:column="17">int</name></type> <name pos:line="557" pos:column="21">offerID</name> <init pos:line="557" pos:column="29">= <expr><call><name><name pos:line="557" pos:column="31">this</name><op:operator pos:line="557" pos:column="35">.</op:operator><name pos:line="557" pos:column="36">getOfferID</name></name><argument_list pos:line="557" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="559" pos:column="17">// Step 1: Check if student is enrolled for this course</comment>
		<decl_stmt><decl><type><name pos:line="560" pos:column="17">boolean</name></type> <name pos:line="560" pos:column="25">isStudentCurrentlyEnrolled</name> <init pos:line="560" pos:column="52">= <expr><call><name><name pos:line="560" pos:column="54">this</name><op:operator pos:line="560" pos:column="58">.</op:operator><name pos:line="560" pos:column="59">isStudentEnrolled</name></name><argument_list pos:line="560" pos:column="76">(<argument><expr><name pos:line="560" pos:column="77">UIN</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="82">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="561" pos:column="17">if<condition pos:line="561" pos:column="19">(<expr><name pos:line="561" pos:column="20">isStudentCurrentlyEnrolled</name> <op:operator pos:line="561" pos:column="47">==</op:operator> <lit:literal type="boolean" pos:line="561" pos:column="50">false</lit:literal></expr>)</condition><then><block pos:line="561" pos:column="56">{
			<expr_stmt><expr><call><name><name pos:line="562" pos:column="25">System</name><op:operator pos:line="562" pos:column="31">.</op:operator><name pos:line="562" pos:column="32">out</name><op:operator pos:line="562" pos:column="35">.</op:operator><name pos:line="562" pos:column="36">println</name></name><argument_list pos:line="562" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="562" pos:column="44">"The student is not enrolled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="563" pos:column="19">else<block pos:line="563" pos:column="23">{
			
			<comment type="line" pos:line="565" pos:column="25">// Step 2: If enroll, delete the student record</comment>
			<decl_stmt><decl><type><name pos:line="566" pos:column="25">int</name></type> <name pos:line="566" pos:column="29">enrollmentID</name> <init pos:line="566" pos:column="42">= <expr><call><name><name pos:line="566" pos:column="44">this</name><op:operator pos:line="566" pos:column="48">.</op:operator><name pos:line="566" pos:column="49">getStudentEnrollmentID</name></name><argument_list pos:line="566" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="568" pos:column="25">CourseOffered</name></type> <name pos:line="568" pos:column="39">offeredCourse</name> <init pos:line="568" pos:column="53">= <expr><lit:literal type="null" pos:line="568" pos:column="55">null</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="570" pos:column="25">try <block pos:line="570" pos:column="29">{
				<expr_stmt><expr><name pos:line="571" pos:column="33">offeredCourse</name> <op:operator pos:line="571" pos:column="47">=</op:operator> <op:operator pos:line="571" pos:column="49">new</op:operator> <call><name pos:line="571" pos:column="53">CourseOffered</name><argument_list pos:line="571" pos:column="66">(<argument><expr><name pos:line="571" pos:column="67">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch pos:line="572" pos:column="27">catch <parameter_list pos:line="572" pos:column="33">(<param><decl><type><name><name pos:line="572" pos:column="34">Course</name><op:operator pos:line="572" pos:column="40">.</op:operator><name pos:line="572" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="572" pos:column="69">e1</name></decl></param>)</parameter_list> <block pos:line="572" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="573" pos:column="33">e1</name><op:operator pos:line="573" pos:column="35">.</op:operator><name pos:line="573" pos:column="36">printStackTrace</name></name><argument_list pos:line="573" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="574" pos:column="27">catch <parameter_list pos:line="574" pos:column="33">(<param><decl><type><name><name pos:line="574" pos:column="34">CourseOffered</name><op:operator pos:line="574" pos:column="47">.</op:operator><name pos:line="574" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="574" pos:column="84">e1</name></decl></param>)</parameter_list> <block pos:line="574" pos:column="88">{
				<expr_stmt><expr><call><name><name pos:line="575" pos:column="33">e1</name><op:operator pos:line="575" pos:column="35">.</op:operator><name pos:line="575" pos:column="36">printStackTrace</name></name><argument_list pos:line="575" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			<decl_stmt><decl><type><name pos:line="578" pos:column="25">Course</name></type> <name pos:line="578" pos:column="32">course</name> <init pos:line="578" pos:column="39">= <expr><call><name><name pos:line="578" pos:column="41">offeredCourse</name><op:operator pos:line="578" pos:column="54">.</op:operator><name pos:line="578" pos:column="55">getCourse</name></name><argument_list pos:line="578" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="579" pos:column="25">String</name></type> <name pos:line="579" pos:column="32">courseName</name> <init pos:line="579" pos:column="43">= <expr><call><name><name pos:line="579" pos:column="45">course</name><op:operator pos:line="579" pos:column="51">.</op:operator><name pos:line="579" pos:column="52">getCourseName</name></name><argument_list pos:line="579" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="580" pos:column="25">int</name></type> <name pos:line="580" pos:column="29">semID</name> <init pos:line="580" pos:column="35">= <expr><call><name><name pos:line="580" pos:column="37">offeredCourse</name><op:operator pos:line="580" pos:column="50">.</op:operator><name pos:line="580" pos:column="51">getSemesterID</name></name><argument_list pos:line="580" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="582" pos:column="25">String</name></type> <name pos:line="582" pos:column="32">tableName</name> <init pos:line="582" pos:column="42">= <expr><name pos:line="582" pos:column="44">courseName</name> <op:operator pos:line="582" pos:column="55">+</op:operator> <call><name><name pos:line="582" pos:column="57">Integer</name><op:operator pos:line="582" pos:column="64">.</op:operator><name pos:line="582" pos:column="65">toString</name></name><argument_list pos:line="582" pos:column="73">(<argument><expr><name pos:line="582" pos:column="74">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="582" pos:column="83">+</op:operator> <call><name><name pos:line="582" pos:column="85">Integer</name><op:operator pos:line="582" pos:column="92">.</op:operator><name pos:line="582" pos:column="93">toString</name></name><argument_list pos:line="582" pos:column="101">(<argument><expr><name pos:line="582" pos:column="102">semID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
			
<comment type="line" pos:line="585" pos:column="1">//			@DBAnnotation (</comment>
<comment type="line" pos:line="586" pos:column="1">//					variable = {"EnrollmentID","UIN"},  </comment>
<comment type="line" pos:line="587" pos:column="1">//					table = {"studentenrollment","tableName"}, </comment>
<comment type="line" pos:line="588" pos:column="1">//					column = {"UIN","OfferID","All"}, </comment>
<comment type="line" pos:line="589" pos:column="1">//					isSource = true)</comment>
			
			<decl_stmt><decl><type><name pos:line="591" pos:column="25">String</name></type> <name pos:line="591" pos:column="32">SQLCourseExamsDelete</name> <init pos:line="591" pos:column="53">= <expr><lit:literal type="string" pos:line="591" pos:column="55">"DELETE FROM %s WHERE `StudentUIN`=?;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="592" pos:column="25">SQLCourseExamsDelete</name> <op:operator pos:line="592" pos:column="46">=</op:operator> <call><name><name pos:line="592" pos:column="48">String</name><op:operator pos:line="592" pos:column="54">.</op:operator><name pos:line="592" pos:column="55">format</name></name><argument_list pos:line="592" pos:column="61">(<argument><expr><name pos:line="592" pos:column="62">SQLCourseExamsDelete</name></expr></argument>, <argument><expr><name pos:line="592" pos:column="84">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="593" pos:column="25">String</name></type> <name pos:line="593" pos:column="32">SQLStudentEnrollDelete</name> <init pos:line="593" pos:column="55">= <expr><lit:literal type="string" pos:line="593" pos:column="57">"DELETE FROM `studentenrollment` WHERE `EnrollmentID`=?;"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<try pos:line="595" pos:column="25">try <block pos:line="595" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="596" pos:column="33">Connection</name></type> <name pos:line="596" pos:column="44">conn</name> <init pos:line="596" pos:column="49">= <expr><call><name><name pos:line="596" pos:column="51">Database</name><op:operator pos:line="596" pos:column="59">.</op:operator><name pos:line="596" pos:column="60">getConnection</name></name><argument_list pos:line="596" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="597" pos:column="33">try <block pos:line="597" pos:column="37">{
					<if pos:line="598" pos:column="41">if <condition pos:line="598" pos:column="44">(<expr><name pos:line="598" pos:column="45">conn</name> <op:operator pos:line="598" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="598" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="598" pos:column="58"> <block pos:line="598" pos:column="59">{
					 
						<decl_stmt><decl><type><name pos:line="600" pos:column="49">PreparedStatement</name></type> <name pos:line="600" pos:column="67">statement</name> <init pos:line="600" pos:column="77">= <expr><call><name><name pos:line="600" pos:column="79">conn</name><op:operator pos:line="600" pos:column="83">.</op:operator><name pos:line="600" pos:column="84">prepareStatement</name></name><argument_list pos:line="600" pos:column="100">(<argument><expr><name pos:line="600" pos:column="101">SQLCourseExamsDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="line" pos:line="601" pos:column="49">//statement.setString(1, tableName);</comment>
						<expr_stmt><expr><call><name><name pos:line="602" pos:column="49">DBAnnotation</name><op:operator pos:line="602" pos:column="61">.</op:operator><name pos:line="602" pos:column="62">annoate</name></name><argument_list pos:line="602" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="602" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="602" pos:column="77">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="602" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="602" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="603" pos:column="49">statement</name><op:operator pos:line="603" pos:column="58">.</op:operator><name pos:line="603" pos:column="59">setInt</name></name><argument_list pos:line="603" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="603" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="603" pos:column="69">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="604" pos:column="49">statement</name><op:operator pos:line="604" pos:column="58">.</op:operator><name pos:line="604" pos:column="59">executeUpdate</name></name><argument_list pos:line="604" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><name pos:line="606" pos:column="49">statement</name> <op:operator pos:line="606" pos:column="59">=</op:operator> <call><name><name pos:line="606" pos:column="61">conn</name><op:operator pos:line="606" pos:column="65">.</op:operator><name pos:line="606" pos:column="66">prepareStatement</name></name><argument_list pos:line="606" pos:column="82">(<argument><expr><name pos:line="606" pos:column="83">SQLStudentEnrollDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="607" pos:column="49">DBAnnotation</name><op:operator pos:line="607" pos:column="61">.</op:operator><name pos:line="607" pos:column="62">annoate</name></name><argument_list pos:line="607" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="607" pos:column="70">"enrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="607" pos:column="86">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="607" pos:column="107">"EnrollmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="607" pos:column="123">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="608" pos:column="49">statement</name><op:operator pos:line="608" pos:column="58">.</op:operator><name pos:line="608" pos:column="59">setInt</name></name><argument_list pos:line="608" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="608" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="608" pos:column="69">enrollmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="609" pos:column="49">statement</name><op:operator pos:line="609" pos:column="58">.</op:operator><name pos:line="609" pos:column="59">executeUpdate</name></name><argument_list pos:line="609" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="610" pos:column="49">boolean</name></type> <name pos:line="610" pos:column="57">removed</name> <init pos:line="610" pos:column="65">= <expr><call><name><name pos:line="610" pos:column="67">this</name><op:operator pos:line="610" pos:column="71">.</op:operator><name pos:line="610" pos:column="72">removeOneSeatFromCourseOffered</name></name><argument_list pos:line="610" pos:column="102">(<argument><expr><name pos:line="610" pos:column="103">offeredCourse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="611" pos:column="49">if<condition pos:line="611" pos:column="51">(<expr><name pos:line="611" pos:column="52">removed</name> <op:operator pos:line="611" pos:column="60">==</op:operator> <lit:literal type="boolean" pos:line="611" pos:column="63">true</lit:literal></expr>)</condition><then><block pos:line="611" pos:column="68">{
							<expr_stmt><expr><call><name><name pos:line="612" pos:column="57">Database</name><op:operator pos:line="612" pos:column="65">.</op:operator><name pos:line="612" pos:column="66">commitTransaction</name></name><argument_list pos:line="612" pos:column="83">(<argument><expr><name pos:line="612" pos:column="84">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="613" pos:column="57">studentUnregistered</name> <op:operator pos:line="613" pos:column="77">=</op:operator> <lit:literal type="boolean" pos:line="613" pos:column="79">true</lit:literal></expr>;</expr_stmt>
						}</block></then> <else pos:line="614" pos:column="51">else <block pos:line="614" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="615" pos:column="57">Database</name><op:operator pos:line="615" pos:column="65">.</op:operator><name pos:line="615" pos:column="66">rollBackTransaction</name></name><argument_list pos:line="615" pos:column="85">(<argument><expr><name pos:line="615" pos:column="86">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
						
					}</block></then></if>	
				}</block> <catch pos:line="619" pos:column="35">catch <parameter_list pos:line="619" pos:column="41">(<param><decl><type><name pos:line="619" pos:column="42">SQLException</name></type> <name pos:line="619" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="619" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="620" pos:column="41">System</name><op:operator pos:line="620" pos:column="47">.</op:operator><name pos:line="620" pos:column="48">out</name><op:operator pos:line="620" pos:column="51">.</op:operator><name pos:line="620" pos:column="52">println</name></name><argument_list pos:line="620" pos:column="59">(<argument><expr><name pos:line="620" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="621" pos:column="41">Database</name><op:operator pos:line="621" pos:column="49">.</op:operator><name pos:line="621" pos:column="50">rollBackTransaction</name></name><argument_list pos:line="621" pos:column="69">(<argument><expr><name pos:line="621" pos:column="70">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

			}</block> <catch pos:line="624" pos:column="27">catch <parameter_list pos:line="624" pos:column="33">(<param><decl><type><name pos:line="624" pos:column="34">Exception</name></type> <name pos:line="624" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="624" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="625" pos:column="33">System</name><op:operator pos:line="625" pos:column="39">.</op:operator><name pos:line="625" pos:column="40">out</name><op:operator pos:line="625" pos:column="43">.</op:operator><name pos:line="625" pos:column="44">println</name></name><argument_list pos:line="625" pos:column="51">(<argument><expr><name pos:line="625" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></else></if>
		
		<return pos:line="629" pos:column="17">return <expr><name pos:line="629" pos:column="24">studentUnregistered</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="632" pos:column="9">// Checks whether the student is enrolled or not</comment>
	<function><type><specifier pos:line="633" pos:column="9">private</specifier> <name pos:line="633" pos:column="17">boolean</name></type> <name pos:line="633" pos:column="25">isStudentEnrolled</name><parameter_list pos:line="633" pos:column="42">(<param><decl><type><name pos:line="633" pos:column="43">int</name></type> <name pos:line="633" pos:column="47">UIN</name></decl></param>,<param><decl><type><name pos:line="633" pos:column="51">int</name></type> <name pos:line="633" pos:column="55">offerID</name></decl></param>)</parameter_list><block pos:line="633" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="634" pos:column="17">boolean</name></type> <name pos:line="634" pos:column="25">isStudentEnrolled</name> <init pos:line="634" pos:column="43">= <expr><lit:literal type="boolean" pos:line="634" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="636" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="637" pos:column="1">//				variable = {"UIN","offerID"},  </comment>
<comment type="line" pos:line="638" pos:column="1">//				table = "studentenrollment", </comment>
<comment type="line" pos:line="639" pos:column="1">//				column = {"UIN","OfferID"}, </comment>
<comment type="line" pos:line="640" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="642" pos:column="17">String</name></type> <name pos:line="642" pos:column="24">SQLStudentEnrollSelect</name> <init pos:line="642" pos:column="47">= <expr><lit:literal type="string" pos:line="642" pos:column="49">"Select UIN FROM studentenrollment WHERE UIN = ? AND OfferID = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="644" pos:column="17">try<block pos:line="644" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="645" pos:column="25">Connection</name></type> <name pos:line="645" pos:column="36">conn</name> <init pos:line="645" pos:column="41">= <expr><call><name><name pos:line="645" pos:column="43">Database</name><op:operator pos:line="645" pos:column="51">.</op:operator><name pos:line="645" pos:column="52">getConnection</name></name><argument_list pos:line="645" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="647" pos:column="25">try<block pos:line="647" pos:column="28">{
			
				<if pos:line="649" pos:column="33">if<condition pos:line="649" pos:column="35">(<expr><name pos:line="649" pos:column="36">conn</name> <op:operator pos:line="649" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="649" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="649" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="651" pos:column="41">PreparedStatement</name></type> <name pos:line="651" pos:column="59">statement</name> <init pos:line="651" pos:column="69">= <expr><call><name><name pos:line="651" pos:column="71">conn</name><op:operator pos:line="651" pos:column="75">.</op:operator><name pos:line="651" pos:column="76">prepareStatement</name></name><argument_list pos:line="651" pos:column="92">(<argument><expr><name pos:line="651" pos:column="93">SQLStudentEnrollSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="652" pos:column="41">DBAnnotation</name><op:operator pos:line="652" pos:column="53">.</op:operator><name pos:line="652" pos:column="54">annoate</name></name><argument_list pos:line="652" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="652" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="652" pos:column="69">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="652" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="652" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="653" pos:column="41">statement</name><op:operator pos:line="653" pos:column="50">.</op:operator><name pos:line="653" pos:column="51">setInt</name></name><argument_list pos:line="653" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="653" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="653" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="654" pos:column="41">DBAnnotation</name><op:operator pos:line="654" pos:column="53">.</op:operator><name pos:line="654" pos:column="54">annoate</name></name><argument_list pos:line="654" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="654" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="654" pos:column="73">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="654" pos:column="94">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="654" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="655" pos:column="41">statement</name><op:operator pos:line="655" pos:column="50">.</op:operator><name pos:line="655" pos:column="51">setInt</name></name><argument_list pos:line="655" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="655" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="655" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="657" pos:column="41">ResultSet</name></type> <name pos:line="657" pos:column="51">rs</name> <init pos:line="657" pos:column="54">= <expr><call><name><name pos:line="657" pos:column="56">statement</name><op:operator pos:line="657" pos:column="65">.</op:operator><name pos:line="657" pos:column="66">executeQuery</name></name><argument_list pos:line="657" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="659" pos:column="41">while<condition pos:line="659" pos:column="46">(<expr><call><name><name pos:line="659" pos:column="47">rs</name><op:operator pos:line="659" pos:column="49">.</op:operator><name pos:line="659" pos:column="50">next</name></name><argument_list pos:line="659" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="659" pos:column="57">{
						<comment type="line" pos:line="660" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="661" pos:column="49">DBAnnotation</name><op:operator pos:line="661" pos:column="61">.</op:operator><name pos:line="661" pos:column="62">annoate</name></name><argument_list pos:line="661" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="661" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="661" pos:column="77">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="661" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="661" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="662" pos:column="41">int</name></type> <name pos:line="662" pos:column="45">tableUIN</name> <init pos:line="662" pos:column="54">= <expr><call><name><name pos:line="662" pos:column="56">rs</name><op:operator pos:line="662" pos:column="58">.</op:operator><name pos:line="662" pos:column="59">getInt</name></name><argument_list pos:line="662" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="662" pos:column="66">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				         
				        <if pos:line="664" pos:column="41">if <condition pos:line="664" pos:column="44">(<expr><name pos:line="664" pos:column="45">UIN</name> <op:operator pos:line="664" pos:column="49">==</op:operator> <name pos:line="664" pos:column="52">tableUIN</name></expr>)</condition><then><block pos:line="664" pos:column="61">{
				        	<expr_stmt><expr><name pos:line="665" pos:column="49">isStudentEnrolled</name> <op:operator pos:line="665" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="665" pos:column="69">true</lit:literal></expr>;</expr_stmt>
				        }</block></then></if>
					}</block></while>      
				}</block></then></if>
			}</block>
			<catch pos:line="670" pos:column="25">catch<parameter_list pos:line="670" pos:column="30">(<param><decl><type><name pos:line="670" pos:column="31">SQLException</name></type> <name pos:line="670" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="670" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="671" pos:column="33">System</name><op:operator pos:line="671" pos:column="39">.</op:operator><name pos:line="671" pos:column="40">out</name><op:operator pos:line="671" pos:column="43">.</op:operator><name pos:line="671" pos:column="44">println</name></name><argument_list pos:line="671" pos:column="51">(<argument><expr><name pos:line="671" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block>
		<catch pos:line="675" pos:column="17">catch<parameter_list pos:line="675" pos:column="22">(<param><decl><type><name pos:line="675" pos:column="23">Exception</name></type> <name pos:line="675" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="675" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="676" pos:column="25">System</name><op:operator pos:line="676" pos:column="31">.</op:operator><name pos:line="676" pos:column="32">out</name><op:operator pos:line="676" pos:column="35">.</op:operator><name pos:line="676" pos:column="36">println</name></name><argument_list pos:line="676" pos:column="43">(<argument><expr><name pos:line="676" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
		<return pos:line="680" pos:column="17">return <expr><name pos:line="680" pos:column="24">isStudentEnrolled</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="683" pos:column="9">// Checks whether a seat is available for the course or not</comment>
	<function><type><specifier pos:line="684" pos:column="9">private</specifier> <name pos:line="684" pos:column="17">boolean</name></type> <name pos:line="684" pos:column="25">isSeatAvailable</name><parameter_list pos:line="684" pos:column="40">()</parameter_list><block pos:line="684" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="685" pos:column="17">boolean</name></type> <name pos:line="685" pos:column="25">isSeatAvailable</name> <init pos:line="685" pos:column="41">= <expr><lit:literal type="boolean" pos:line="685" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="687" pos:column="17">int</name></type> <name pos:line="687" pos:column="21">offerID</name> <init pos:line="687" pos:column="29">= <expr><call><name><name pos:line="687" pos:column="31">this</name><op:operator pos:line="687" pos:column="35">.</op:operator><name pos:line="687" pos:column="36">getOfferID</name></name><argument_list pos:line="687" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="689" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="690" pos:column="1">//				variable = {"offerID"},  </comment>
<comment type="line" pos:line="691" pos:column="1">//				table = "coursesoffered", </comment>
<comment type="line" pos:line="692" pos:column="1">//				column = {"OfferID"}, </comment>
<comment type="line" pos:line="693" pos:column="1">//				isSource = true)</comment>
		
		<decl_stmt><decl><type><name pos:line="695" pos:column="17">String</name></type> <name pos:line="695" pos:column="24">SQLStudentEnrollSelect</name> <init pos:line="695" pos:column="47">= <expr><lit:literal type="string" pos:line="695" pos:column="49">"Select OfferID FROM coursesoffered "</lit:literal> <op:operator pos:line="695" pos:column="87">+</op:operator>
										<lit:literal type="string" pos:line="696" pos:column="81">"WHERE SeatsFilled &lt; TotalCapacity "</lit:literal> <op:operator pos:line="696" pos:column="118">+</op:operator>
										<lit:literal type="string" pos:line="697" pos:column="81">"AND OfferID = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="699" pos:column="17">try<block pos:line="699" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="700" pos:column="25">Connection</name></type> <name pos:line="700" pos:column="36">conn</name> <init pos:line="700" pos:column="41">= <expr><call><name><name pos:line="700" pos:column="43">Database</name><op:operator pos:line="700" pos:column="51">.</op:operator><name pos:line="700" pos:column="52">getConnection</name></name><argument_list pos:line="700" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="702" pos:column="25">try<block pos:line="702" pos:column="28">{
			
				<if pos:line="704" pos:column="33">if<condition pos:line="704" pos:column="35">(<expr><name pos:line="704" pos:column="36">conn</name> <op:operator pos:line="704" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="704" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="704" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="706" pos:column="41">PreparedStatement</name></type> <name pos:line="706" pos:column="59">statement</name> <init pos:line="706" pos:column="69">= <expr><call><name><name pos:line="706" pos:column="71">conn</name><op:operator pos:line="706" pos:column="75">.</op:operator><name pos:line="706" pos:column="76">prepareStatement</name></name><argument_list pos:line="706" pos:column="92">(<argument><expr><name pos:line="706" pos:column="93">SQLStudentEnrollSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="707" pos:column="41">DBAnnotation</name><op:operator pos:line="707" pos:column="53">.</op:operator><name pos:line="707" pos:column="54">annoate</name></name><argument_list pos:line="707" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="707" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="707" pos:column="73">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="707" pos:column="94">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="707" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="708" pos:column="41">statement</name><op:operator pos:line="708" pos:column="50">.</op:operator><name pos:line="708" pos:column="51">setInt</name></name><argument_list pos:line="708" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="708" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="708" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="710" pos:column="41">ResultSet</name></type> <name pos:line="710" pos:column="51">rs</name> <init pos:line="710" pos:column="54">= <expr><call><name><name pos:line="710" pos:column="56">statement</name><op:operator pos:line="710" pos:column="65">.</op:operator><name pos:line="710" pos:column="66">executeQuery</name></name><argument_list pos:line="710" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
					<while pos:line="712" pos:column="41">while<condition pos:line="712" pos:column="46">(<expr><call><name><name pos:line="712" pos:column="47">rs</name><op:operator pos:line="712" pos:column="49">.</op:operator><name pos:line="712" pos:column="50">next</name></name><argument_list pos:line="712" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="712" pos:column="57">{
						<comment type="line" pos:line="713" pos:column="49">//Retrieve by column name</comment>
						<expr_stmt><expr><call><name><name pos:line="714" pos:column="49">DBAnnotation</name><op:operator pos:line="714" pos:column="61">.</op:operator><name pos:line="714" pos:column="62">annoate</name></name><argument_list pos:line="714" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="714" pos:column="70">"tableOfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="714" pos:column="86">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="714" pos:column="107">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="714" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				        <decl_stmt><decl><type><name pos:line="715" pos:column="41">int</name></type> <name pos:line="715" pos:column="45">tableOfferID</name> <init pos:line="715" pos:column="58">= <expr><call><name><name pos:line="715" pos:column="60">rs</name><op:operator pos:line="715" pos:column="62">.</op:operator><name pos:line="715" pos:column="63">getInt</name></name><argument_list pos:line="715" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="715" pos:column="70">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				         
				        <if pos:line="717" pos:column="41">if <condition pos:line="717" pos:column="44">(<expr><name pos:line="717" pos:column="45">offerID</name> <op:operator pos:line="717" pos:column="53">==</op:operator> <name pos:line="717" pos:column="56">tableOfferID</name></expr>)</condition><then><block pos:line="717" pos:column="69">{
				        	<expr_stmt><expr><name pos:line="718" pos:column="49">isSeatAvailable</name> <op:operator pos:line="718" pos:column="65">=</op:operator> <lit:literal type="boolean" pos:line="718" pos:column="67">true</lit:literal></expr>;</expr_stmt>
				        }</block></then></if>
					}</block></while>      
				}</block></then></if>
			}</block>
			<catch pos:line="723" pos:column="25">catch<parameter_list pos:line="723" pos:column="30">(<param><decl><type><name pos:line="723" pos:column="31">SQLException</name></type> <name pos:line="723" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="723" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="724" pos:column="33">System</name><op:operator pos:line="724" pos:column="39">.</op:operator><name pos:line="724" pos:column="40">out</name><op:operator pos:line="724" pos:column="43">.</op:operator><name pos:line="724" pos:column="44">println</name></name><argument_list pos:line="724" pos:column="51">(<argument><expr><name pos:line="724" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
				
		}</block>
		<catch pos:line="728" pos:column="17">catch<parameter_list pos:line="728" pos:column="22">(<param><decl><type><name pos:line="728" pos:column="23">Exception</name></type> <name pos:line="728" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="728" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="729" pos:column="25">System</name><op:operator pos:line="729" pos:column="31">.</op:operator><name pos:line="729" pos:column="32">out</name><op:operator pos:line="729" pos:column="35">.</op:operator><name pos:line="729" pos:column="36">println</name></name><argument_list pos:line="729" pos:column="43">(<argument><expr><name pos:line="729" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
		<return pos:line="733" pos:column="17">return <expr><name pos:line="733" pos:column="24">isSeatAvailable</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="736" pos:column="9">// To update the number of seats for the mentioned course in the course offered table</comment>
	<comment type="line" pos:line="737" pos:column="9">// by increasing the number by one when a student is unregistered.</comment>
	<function><type><specifier pos:line="738" pos:column="9">private</specifier>  <name pos:line="738" pos:column="18">boolean</name></type> <name pos:line="738" pos:column="26">removeOneSeatFromCourseOffered</name><parameter_list pos:line="738" pos:column="56">(<param><decl><type><name pos:line="738" pos:column="57">CourseOffered</name></type> <name pos:line="738" pos:column="71">courseOffered</name></decl></param>)</parameter_list> <throws pos:line="738" pos:column="86">throws <argument><expr><name><name pos:line="738" pos:column="93">CourseOffered</name><op:operator pos:line="738" pos:column="106">.</op:operator><name pos:line="738" pos:column="107">CourseOfferingDoesNotExistException</name></name></expr></argument></throws><block pos:line="738" pos:column="142">{
		<decl_stmt><decl><type><name pos:line="739" pos:column="17">boolean</name></type> <name pos:line="739" pos:column="25">seatRemoved</name> <init pos:line="739" pos:column="37">= <expr><lit:literal type="boolean" pos:line="739" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="741" pos:column="17">int</name></type> <name pos:line="741" pos:column="21">offerID</name> <init pos:line="741" pos:column="29">= <expr><call><name><name pos:line="741" pos:column="31">this</name><op:operator pos:line="741" pos:column="35">.</op:operator><name pos:line="741" pos:column="36">getOfferID</name></name><argument_list pos:line="741" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="742" pos:column="17">try<block pos:line="742" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="743" pos:column="25">Connection</name></type> <name pos:line="743" pos:column="36">conn</name> <init pos:line="743" pos:column="41">= <expr><call><name><name pos:line="743" pos:column="43">Database</name><op:operator pos:line="743" pos:column="51">.</op:operator><name pos:line="743" pos:column="52">getConnection</name></name><argument_list pos:line="743" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="744" pos:column="25">try<block pos:line="744" pos:column="28">{
				<if pos:line="745" pos:column="33">if<condition pos:line="745" pos:column="35">(<expr><name pos:line="745" pos:column="36">conn</name> <op:operator pos:line="745" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="745" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="745" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="746" pos:column="41">int</name></type> <name pos:line="746" pos:column="45">currentlyFilled</name> <init pos:line="746" pos:column="61">= <expr><op:operator pos:line="746" pos:column="63">-</op:operator><lit:literal type="number" pos:line="746" pos:column="64">1</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="747" pos:column="1">//					@DBAnnotation (</comment>
<comment type="line" pos:line="748" pos:column="1">//							variable = {"offerID"},  </comment>
<comment type="line" pos:line="749" pos:column="1">//							table = "coursesoffered", </comment>
<comment type="line" pos:line="750" pos:column="1">//							column = {"OfferID"}, </comment>
<comment type="line" pos:line="751" pos:column="1">//							isSource = true)</comment>
					<decl_stmt><decl><type><name pos:line="752" pos:column="41">String</name></type> <name pos:line="752" pos:column="48">SQLcoursesOfferedSelect</name> <init pos:line="752" pos:column="72">= <expr><lit:literal type="string" pos:line="752" pos:column="74">"Select * FROM coursesoffered WHERE OfferID= ?;"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="753" pos:column="41">PreparedStatement</name></type> <name pos:line="753" pos:column="59">statement</name> <init pos:line="753" pos:column="69">= <expr><call><name><name pos:line="753" pos:column="71">conn</name><op:operator pos:line="753" pos:column="75">.</op:operator><name pos:line="753" pos:column="76">prepareStatement</name></name><argument_list pos:line="753" pos:column="92">(<argument><expr><name pos:line="753" pos:column="93">SQLcoursesOfferedSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="754" pos:column="41">DBAnnotation</name><op:operator pos:line="754" pos:column="53">.</op:operator><name pos:line="754" pos:column="54">annoate</name></name><argument_list pos:line="754" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="754" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="754" pos:column="73">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="754" pos:column="91">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="754" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="755" pos:column="41">statement</name><op:operator pos:line="755" pos:column="50">.</op:operator><name pos:line="755" pos:column="51">setInt</name></name><argument_list pos:line="755" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="755" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="755" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="757" pos:column="41">ResultSet</name></type> <name pos:line="757" pos:column="51">rs</name> <init pos:line="757" pos:column="54">= <expr><call><name><name pos:line="757" pos:column="56">statement</name><op:operator pos:line="757" pos:column="65">.</op:operator><name pos:line="757" pos:column="66">executeQuery</name></name><argument_list pos:line="757" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="758" pos:column="41">if<condition pos:line="758" pos:column="43">(<expr><call><name><name pos:line="758" pos:column="44">rs</name><op:operator pos:line="758" pos:column="46">.</op:operator><name pos:line="758" pos:column="47">next</name></name><argument_list pos:line="758" pos:column="51">()</argument_list></call></expr>)</condition><then><block pos:line="758" pos:column="54">{
						<expr_stmt><expr><call><name><name pos:line="759" pos:column="49">DBAnnotation</name><op:operator pos:line="759" pos:column="61">.</op:operator><name pos:line="759" pos:column="62">annoate</name></name><argument_list pos:line="759" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="759" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="759" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="759" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="759" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="760" pos:column="49">currentlyFilled</name> <op:operator pos:line="760" pos:column="65">=</op:operator> <call><name><name pos:line="760" pos:column="67">rs</name><op:operator pos:line="760" pos:column="69">.</op:operator><name pos:line="760" pos:column="70">getInt</name></name><argument_list pos:line="760" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="760" pos:column="77">"SeatsFilled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="761" pos:column="49">currentlyFilled</name> <op:operator pos:line="761" pos:column="65">-=</op:operator> <lit:literal type="number" pos:line="761" pos:column="68">1</lit:literal></expr>;</expr_stmt>
<comment type="line" pos:line="762" pos:column="1">//						rs.updateInt(5, currentlyFilled);</comment>
<comment type="line" pos:line="763" pos:column="1">//						Database.commitTransaction(conn);</comment>
<comment type="line" pos:line="764" pos:column="1">//						seatRemoved = true;</comment>
						
					}</block></then>
					<else pos:line="767" pos:column="41">else<block pos:line="767" pos:column="45">{
						<throw pos:line="768" pos:column="49">throw <expr><op:operator pos:line="768" pos:column="55">new</op:operator> <call><name><name pos:line="768" pos:column="59">CourseOffered</name><op:operator pos:line="768" pos:column="72">.</op:operator><name pos:line="768" pos:column="73">CourseOfferingDoesNotExistException</name></name><argument_list pos:line="768" pos:column="108">()</argument_list></call></expr>;</throw>
					}</block></else></if>
					
					<decl_stmt><decl><type><name pos:line="771" pos:column="41">String</name></type> <name pos:line="771" pos:column="48">updateStatement</name> <init pos:line="771" pos:column="64">= <expr><lit:literal type="string" pos:line="771" pos:column="66">"UPDATE university.coursesoffered "</lit:literal>
							<op:operator pos:line="772" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="772" pos:column="59">"SET SeatsFilled= ? "</lit:literal>
							<op:operator pos:line="773" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="773" pos:column="59">"WHERE OfferID= ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="774" pos:column="41">statement</name> <op:operator pos:line="774" pos:column="51">=</op:operator> <call><name><name pos:line="774" pos:column="53">conn</name><op:operator pos:line="774" pos:column="57">.</op:operator><name pos:line="774" pos:column="58">prepareStatement</name></name><argument_list pos:line="774" pos:column="74">(<argument><expr><name pos:line="774" pos:column="75">updateStatement</name></expr></argument>, <argument><expr><name><name pos:line="774" pos:column="92">ResultSet</name><op:operator pos:line="774" pos:column="101">.</op:operator><name pos:line="774" pos:column="102">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="776" pos:column="41">DBAnnotation</name><op:operator pos:line="776" pos:column="53">.</op:operator><name pos:line="776" pos:column="54">annoate</name></name><argument_list pos:line="776" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="776" pos:column="62">"currentlyFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="776" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="776" pos:column="99">"CurrentlyFilled"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="776" pos:column="118">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="777" pos:column="41">statement</name><op:operator pos:line="777" pos:column="50">.</op:operator><name pos:line="777" pos:column="51">setInt</name></name><argument_list pos:line="777" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="777" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="777" pos:column="61">currentlyFilled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="778" pos:column="41">DBAnnotation</name><op:operator pos:line="778" pos:column="53">.</op:operator><name pos:line="778" pos:column="54">annoate</name></name><argument_list pos:line="778" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="778" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="778" pos:column="73">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="778" pos:column="91">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="778" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="779" pos:column="41">statement</name><op:operator pos:line="779" pos:column="50">.</op:operator><name pos:line="779" pos:column="51">setInt</name></name><argument_list pos:line="779" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="779" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="779" pos:column="61">this</name><op:operator pos:line="779" pos:column="65">.</op:operator><name pos:line="779" pos:column="66">getOfferID</name></name><argument_list pos:line="779" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="780" pos:column="41">statement</name><op:operator pos:line="780" pos:column="50">.</op:operator><name pos:line="780" pos:column="51">executeUpdate</name></name><argument_list pos:line="780" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="781" pos:column="41">Database</name><op:operator pos:line="781" pos:column="49">.</op:operator><name pos:line="781" pos:column="50">commitTransaction</name></name><argument_list pos:line="781" pos:column="67">(<argument><expr><name pos:line="781" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="782" pos:column="41">seatRemoved</name> <op:operator pos:line="782" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="782" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>						
					
			}</block> <catch pos:line="785" pos:column="27">catch<parameter_list pos:line="785" pos:column="32">(<param><decl><type><name pos:line="785" pos:column="33">SQLException</name></type> <name pos:line="785" pos:column="46">e</name></decl></param>)</parameter_list><block pos:line="785" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="786" pos:column="33">System</name><op:operator pos:line="786" pos:column="39">.</op:operator><name pos:line="786" pos:column="40">out</name><op:operator pos:line="786" pos:column="43">.</op:operator><name pos:line="786" pos:column="44">println</name></name><argument_list pos:line="786" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="786" pos:column="52">"Error adding course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="787" pos:column="33">System</name><op:operator pos:line="787" pos:column="39">.</op:operator><name pos:line="787" pos:column="40">out</name><op:operator pos:line="787" pos:column="43">.</op:operator><name pos:line="787" pos:column="44">println</name></name><argument_list pos:line="787" pos:column="51">(<argument><expr><call><name><name pos:line="787" pos:column="52">e</name><op:operator pos:line="787" pos:column="53">.</op:operator><name pos:line="787" pos:column="54">getMessage</name></name><argument_list pos:line="787" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="788" pos:column="33">e</name><op:operator pos:line="788" pos:column="34">.</op:operator><name pos:line="788" pos:column="35">printStackTrace</name></name><argument_list pos:line="788" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="789" pos:column="33">Database</name><op:operator pos:line="789" pos:column="41">.</op:operator><name pos:line="789" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="789" pos:column="61">(<argument><expr><name pos:line="789" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch pos:line="791" pos:column="19">catch <parameter_list pos:line="791" pos:column="25">(<param><decl><type><name pos:line="791" pos:column="26">Exception</name></type> <name pos:line="791" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="791" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="792" pos:column="25">System</name><op:operator pos:line="792" pos:column="31">.</op:operator><name pos:line="792" pos:column="32">out</name><op:operator pos:line="792" pos:column="35">.</op:operator><name pos:line="792" pos:column="36">println</name></name><argument_list pos:line="792" pos:column="43">(<argument><expr><name pos:line="792" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			
		<return pos:line="795" pos:column="17">return <expr><name pos:line="795" pos:column="24">seatRemoved</name></expr> ;</return>
	}</block></function>
	
	<function><type><specifier pos:line="798" pos:column="9">public</specifier> <specifier pos:line="798" pos:column="16">static</specifier> <name pos:line="798" pos:column="23">void</name></type> <name pos:line="798" pos:column="28">main</name><parameter_list pos:line="798" pos:column="32">(<param><decl><type><name><name pos:line="798" pos:column="33">String</name><index pos:line="798" pos:column="39">[]</index></name></type> <name pos:line="798" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="798" pos:column="47">{
		<comment type="line" pos:line="799" pos:column="17">// Test getAllGradesOfStudent function</comment>
<comment type="line" pos:line="800" pos:column="1">//		try {</comment>
<comment type="line" pos:line="801" pos:column="1">//			Student student = new Student(1);</comment>
<comment type="line" pos:line="802" pos:column="1">//		} catch (People.PersonDoesNotExistException e) {</comment>
<comment type="line" pos:line="803" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="804" pos:column="1">//		}</comment>
<comment type="line" pos:line="805" pos:column="1">//		StudentEnrollment enrolledStud = new StudentEnrollment(345678,1);</comment>
<comment type="line" pos:line="806" pos:column="1">//		HashMap&lt;CourseOffered, String&gt; grades = StudentEnrollment.getAllGradesOfStudent(student);</comment>
<comment type="line" pos:line="807" pos:column="1">//		for(CourseOffered offeredCourse: grades.keySet() ){</comment>
<comment type="line" pos:line="808" pos:column="1">//			int offerID = offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="809" pos:column="1">//			String grade = grades.get(offeredCourse);</comment>
<comment type="line" pos:line="810" pos:column="1">//			System.out.println("Course: "+ offerID + " Grade: " + grade);</comment>
<comment type="line" pos:line="811" pos:column="1">//		}</comment>
<comment type="line" pos:line="812" pos:column="1">//		</comment>
<comment type="line" pos:line="813" pos:column="1">//		// Test getStudentsAllCourses function</comment>
<comment type="line" pos:line="814" pos:column="1">//		ArrayList&lt;CourseOffered&gt; courses = StudentEnrollment.getStudentsAllCourses(student);</comment>
<comment type="line" pos:line="815" pos:column="1">//		for(CourseOffered offeredCourse: courses){</comment>
<comment type="line" pos:line="816" pos:column="1">//			int offerID = offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="817" pos:column="1">//			System.out.println("Course: "+ offerID);			</comment>
<comment type="line" pos:line="818" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="820" pos:column="17">// Test getStudentsInCourse function</comment>
<comment type="line" pos:line="821" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="822" pos:column="1">//		CourseOffered offeredCourse = null;</comment>
<comment type="line" pos:line="823" pos:column="1">//		try {</comment>
<comment type="line" pos:line="824" pos:column="1">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="825" pos:column="1">//		} catch (Course.CourseDoesNotExistException</comment>
<comment type="line" pos:line="826" pos:column="1">//				| CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line" pos:line="827" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="828" pos:column="1">//		}</comment>
<comment type="line" pos:line="829" pos:column="1">//		</comment>
<comment type="line" pos:line="830" pos:column="1">//		// Test getStudentsInCourse function</comment>
<comment type="line" pos:line="831" pos:column="1">//		ArrayList&lt;Student&gt; students = StudentEnrollment.getStudentsInCourse(offeredCourse);</comment>
<comment type="line" pos:line="832" pos:column="1">//		for(Student stud: students){</comment>
<comment type="line" pos:line="833" pos:column="1">//			int UIN = stud.getUIN();</comment>
<comment type="line" pos:line="834" pos:column="1">//			System.out.println("Student: "+ UIN);			</comment>
<comment type="line" pos:line="835" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="837" pos:column="17">// Test getStudentsAllCourses function</comment>
<comment type="line" pos:line="838" pos:column="1">//		ArrayList&lt;CourseOffered&gt; courses = StudentEnrollment.getCurrentCoursesOfStudent(student);</comment>
<comment type="line" pos:line="839" pos:column="1">//		for(CourseOffered offeredCourse: courses){</comment>
<comment type="line" pos:line="840" pos:column="1">//			int offerID = offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="841" pos:column="1">//			System.out.println("Course: "+ offerID);			</comment>
<comment type="line" pos:line="842" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="844" pos:column="17">// To enroll student</comment>
<comment type="line" pos:line="845" pos:column="1">//		StudentEnrollment enrolledStud = new StudentEnrollment(345678,4);</comment>
<comment type="line" pos:line="846" pos:column="1">//		boolean enrolled =  enrolledStud.enrollStudents();</comment>
<comment type="line" pos:line="847" pos:column="1">//		if (enrolled == true){</comment>
<comment type="line" pos:line="848" pos:column="1">//			System.out.println("Student Enrolled");</comment>
<comment type="line" pos:line="849" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="850" pos:column="1">//			System.out.println("Student Not Enrolled");</comment>
<comment type="line" pos:line="851" pos:column="1">//		}</comment>
		
		<comment type="line" pos:line="853" pos:column="17">// To unregister students</comment>
<comment type="line" pos:line="854" pos:column="1">//		StudentEnrollment enrolledStud = new StudentEnrollment(345678,4);</comment>
<comment type="line" pos:line="855" pos:column="1">//		boolean enrolled =  enrolledStud.unregisterStudent();</comment>
<comment type="line" pos:line="856" pos:column="1">//		if (enrolled == true){</comment>
<comment type="line" pos:line="857" pos:column="1">//			System.out.println("Student Unregistered");</comment>
<comment type="line" pos:line="858" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="859" pos:column="1">//			System.out.println("Student Still Registered");</comment>
<comment type="line" pos:line="860" pos:column="1">//		}</comment>
	
		<comment type="line" pos:line="862" pos:column="17">// Update Grades</comment>
<comment type="line" pos:line="863" pos:column="1">//		StudentEnrollment enrolledStud = new StudentEnrollment(2, 123456, "C");</comment>
<comment type="line" pos:line="864" pos:column="1">//		boolean updated =  enrolledStud.updateStudentGrade();</comment>
<comment type="line" pos:line="865" pos:column="1">//		if (updated == true){</comment>
<comment type="line" pos:line="866" pos:column="1">//			System.out.println("Student Grade Updated");</comment>
<comment type="line" pos:line="867" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="868" pos:column="1">//			System.out.println("Student Grade Not Updated");</comment>
<comment type="line" pos:line="869" pos:column="1">//		}</comment>
		
		
		<comment type="line" pos:line="872" pos:column="17">// To update multiple student's grades</comment>
<comment type="line" pos:line="873" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="874" pos:column="1">//		CourseOffered offeredCourse = null;</comment>
<comment type="line" pos:line="875" pos:column="1">//		try {</comment>
<comment type="line" pos:line="876" pos:column="1">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="877" pos:column="1">//		} catch (Course.CourseDoesNotExistException</comment>
<comment type="line" pos:line="878" pos:column="1">//				| CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line" pos:line="879" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="880" pos:column="1">//		}</comment>
<comment type="line" pos:line="881" pos:column="1">//		HashMap&lt;Student,String&gt; studentGrades = new HashMap&lt;Student,String&gt;();</comment>
<comment type="line" pos:line="882" pos:column="1">//		student = new Student(1);</comment>
<comment type="line" pos:line="883" pos:column="1">//		studentGrades.put(student, "B");</comment>
<comment type="line" pos:line="884" pos:column="1">//		student = new Student(2);</comment>
<comment type="line" pos:line="885" pos:column="1">//		studentGrades.put(student, "A");</comment>
<comment type="line" pos:line="886" pos:column="1">//		</comment>
<comment type="line" pos:line="887" pos:column="1">//		boolean updated =  StudentEnrollment.updateAllStudentGrade(studentGrades, offeredCourse);</comment>
<comment type="line" pos:line="888" pos:column="1">//		if (updated == true){</comment>
<comment type="line" pos:line="889" pos:column="1">//			System.out.println("Students Grades Updated");</comment>
<comment type="line" pos:line="890" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="891" pos:column="1">//			System.out.println("Students Grades Not Updated");</comment>
<comment type="line" pos:line="892" pos:column="1">//		}</comment>
		
	}</block></function>
	
}</block></class>
</unit>
