<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\JobApplicationTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">LinkedHashMap</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">org</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">junit</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Test</name></name>;</import>







<class><specifier pos:line="16" pos:column="1">public</specifier> class <name pos:line="16" pos:column="14">JobApplicationTest</name> <block pos:line="16" pos:column="33">{

	<function><type><annotation pos:line="18" pos:column="9">@<name pos:line="18" pos:column="10">Test</name></annotation>
	<specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">testJobApplication1</name><parameter_list pos:line="19" pos:column="40">()</parameter_list> <block pos:line="19" pos:column="43">{

		<try pos:line="21" pos:column="17">try <block pos:line="21" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">JobApplication</name></type> <name pos:line="22" pos:column="40">jobApp</name><init pos:line="22" pos:column="46">=<expr><op:operator pos:line="22" pos:column="47">new</op:operator> <call><name pos:line="22" pos:column="51">JobApplication</name><argument_list pos:line="22" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="22" pos:column="66">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">assertEquals</name><argument_list pos:line="23" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="23" pos:column="38">15</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="42">jobApp</name><op:operator pos:line="23" pos:column="48">.</op:operator><name pos:line="23" pos:column="49">getApplicationID</name></name><argument_list pos:line="23" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="24" pos:column="19">catch <parameter_list pos:line="24" pos:column="25">(<param><decl><type><name><name pos:line="24" pos:column="26">People</name><op:operator pos:line="24" pos:column="32">.</op:operator><name pos:line="24" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="24" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="64">{
			<comment type="line" pos:line="25" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">e</name><op:operator pos:line="26" pos:column="26">.</op:operator><name pos:line="26" pos:column="27">printStackTrace</name></name><argument_list pos:line="26" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="30" pos:column="9">@<name pos:line="30" pos:column="10">Test</name></annotation>
	<specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">testJobApplication2</name><parameter_list pos:line="31" pos:column="40">()</parameter_list> <block pos:line="31" pos:column="43">{

		<try pos:line="33" pos:column="17">try <block pos:line="33" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">JobApplication</name></type> <name pos:line="34" pos:column="40">jobApp</name><init pos:line="34" pos:column="46">=<expr><op:operator pos:line="34" pos:column="47">new</op:operator> <call><name pos:line="34" pos:column="51">JobApplication</name><argument_list pos:line="34" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="66">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">assertEquals</name><argument_list pos:line="35" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="35" pos:column="41">jobApp</name><op:operator pos:line="35" pos:column="47">.</op:operator><name pos:line="35" pos:column="48">getApplicationID</name></name><argument_list pos:line="35" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="36" pos:column="19">catch <parameter_list pos:line="36" pos:column="25">(<param><decl><type><name><name pos:line="36" pos:column="26">People</name><op:operator pos:line="36" pos:column="32">.</op:operator><name pos:line="36" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="36" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="64">{
			<comment type="line" pos:line="37" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="38" pos:column="25">e</name><op:operator pos:line="38" pos:column="26">.</op:operator><name pos:line="38" pos:column="27">printStackTrace</name></name><argument_list pos:line="38" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="42" pos:column="9">@<name pos:line="42" pos:column="10">Test</name></annotation>
	<specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">testJobApplication3</name><parameter_list pos:line="43" pos:column="40">()</parameter_list> <block pos:line="43" pos:column="43">{

		<try pos:line="45" pos:column="17">try <block pos:line="45" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">JobApplication</name></type> <name pos:line="46" pos:column="40">jobApp</name><init pos:line="46" pos:column="46">=<expr><op:operator pos:line="46" pos:column="47">new</op:operator> <call><name pos:line="46" pos:column="51">JobApplication</name><argument_list pos:line="46" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="66">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
		}</block> <catch pos:line="48" pos:column="19">catch <parameter_list pos:line="48" pos:column="25">(<param><decl><type><name><name pos:line="48" pos:column="26">People</name><op:operator pos:line="48" pos:column="32">.</op:operator><name pos:line="48" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="48" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="64">{
			<comment type="line" pos:line="49" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="50" pos:column="25">e</name><op:operator pos:line="50" pos:column="26">.</op:operator><name pos:line="50" pos:column="27">printStackTrace</name></name><argument_list pos:line="50" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="54" pos:column="9">@<name pos:line="54" pos:column="10">Test</name></annotation>
	<specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">void</name></type> <name pos:line="55" pos:column="21">testAddApplicationDetails</name><parameter_list pos:line="55" pos:column="46">()</parameter_list> <block pos:line="55" pos:column="49">{

	<comment type="line" pos:line="57" pos:column="9">//this functionality cannot be tested as this would cause the test to fail when it is run more than once</comment>
		
	}</block></function>
	<function><type><annotation pos:line="60" pos:column="9">@<name pos:line="60" pos:column="10">Test</name></annotation>
	<specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">testAddApplicationDetails1</name><parameter_list pos:line="61" pos:column="47">()</parameter_list> <block pos:line="61" pos:column="50">{

		<decl_stmt><decl><type><name pos:line="63" pos:column="17">boolean</name></type> <name pos:line="63" pos:column="25">check</name></decl>;</decl_stmt>
		<try pos:line="64" pos:column="17">try <block pos:line="64" pos:column="21">{
			<expr_stmt><expr><name pos:line="65" pos:column="25">check</name> <op:operator pos:line="65" pos:column="31">=</op:operator> <call><name><name pos:line="65" pos:column="33">JobApplication</name><op:operator pos:line="65" pos:column="47">.</op:operator><name pos:line="65" pos:column="48">addApplicationDetails</name></name><argument_list pos:line="65" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="70">519</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="65" pos:column="75">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="65" pos:column="78">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="65" pos:column="84">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="65" pos:column="90">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="65" pos:column="96">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="65" pos:column="102">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">assertFalse</name><argument_list pos:line="66" pos:column="36">(<argument><expr><name pos:line="66" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="67" pos:column="19">catch <parameter_list pos:line="67" pos:column="25">(<param><decl><type><name><name pos:line="67" pos:column="26">People</name><op:operator pos:line="67" pos:column="32">.</op:operator><name pos:line="67" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="67" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="64">{
			<comment type="line" pos:line="68" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="69" pos:column="25">e</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">printStackTrace</name></name><argument_list pos:line="69" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="74" pos:column="9">@<name pos:line="74" pos:column="10">Test</name></annotation>
	<specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">testAddApplicationDetails2</name><parameter_list pos:line="75" pos:column="47">()</parameter_list> <block pos:line="75" pos:column="50">{

		<decl_stmt><decl><type><name pos:line="77" pos:column="17">boolean</name></type> <name pos:line="77" pos:column="25">check</name></decl>;</decl_stmt>
		<try pos:line="78" pos:column="17">try <block pos:line="78" pos:column="21">{
			<expr_stmt><expr><name pos:line="79" pos:column="25">check</name> <op:operator pos:line="79" pos:column="31">=</op:operator> <call><name><name pos:line="79" pos:column="33">JobApplication</name><op:operator pos:line="79" pos:column="47">.</op:operator><name pos:line="79" pos:column="48">addApplicationDetails</name></name><argument_list pos:line="79" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="79" pos:column="70">272</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="75">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="78">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="84">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="90">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="96">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="79" pos:column="102">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">assertFalse</name><argument_list pos:line="80" pos:column="36">(<argument><expr><name pos:line="80" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="81" pos:column="19">catch <parameter_list pos:line="81" pos:column="25">(<param><decl><type><name><name pos:line="81" pos:column="26">People</name><op:operator pos:line="81" pos:column="32">.</op:operator><name pos:line="81" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="81" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="64">{
			<comment type="line" pos:line="82" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">e</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">printStackTrace</name></name><argument_list pos:line="83" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>

	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">testAddApplicationDetailsCheck1</name><parameter_list pos:line="89" pos:column="52">()</parameter_list> <block pos:line="89" pos:column="55">{
		
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">boolean</name></type> <name pos:line="91" pos:column="25">check</name><init pos:line="91" pos:column="30">=<expr><call><name><name pos:line="91" pos:column="31">JobApplication</name><op:operator pos:line="91" pos:column="45">.</op:operator><name pos:line="91" pos:column="46">addApplicationDetailsCheck</name></name><argument_list pos:line="91" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="91" pos:column="73">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">assertTrue</name><argument_list pos:line="92" pos:column="27">(<argument><expr><name pos:line="92" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="95" pos:column="9">@<name pos:line="95" pos:column="10">Test</name></annotation>
	<specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">testAddApplicationDetailsCheck2</name><parameter_list pos:line="96" pos:column="52">()</parameter_list> <block pos:line="96" pos:column="55">{
		
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">boolean</name></type> <name pos:line="98" pos:column="25">check</name><init pos:line="98" pos:column="30">=<expr><call><name><name pos:line="98" pos:column="31">JobApplication</name><op:operator pos:line="98" pos:column="45">.</op:operator><name pos:line="98" pos:column="46">addApplicationDetailsCheck</name></name><argument_list pos:line="98" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="98" pos:column="73">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">assertFalse</name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="102" pos:column="9">@<name pos:line="102" pos:column="10">Test</name></annotation>
	<specifier pos:line="103" pos:column="9">public</specifier> <name pos:line="103" pos:column="16">void</name></type> <name pos:line="103" pos:column="21">testCalculateScaledScore</name><parameter_list pos:line="103" pos:column="45">()</parameter_list> <block pos:line="103" pos:column="48">{

		<decl_stmt><decl><type><name pos:line="105" pos:column="17">double</name></type> <name pos:line="105" pos:column="24">check</name><init pos:line="105" pos:column="29">=<expr><call><name><name pos:line="105" pos:column="30">JobApplication</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">calculateScaledScore</name></name><argument_list pos:line="105" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="66">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="105" pos:column="71">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="74">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="80">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="87">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="94">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="101">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">assertEquals</name><argument_list pos:line="106" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="106" pos:column="30">5.5</lit:literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="35">check</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="106" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	

	<function><type><annotation pos:line="110" pos:column="9">@<name pos:line="110" pos:column="10">Test</name></annotation>
	<specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">void</name></type> <name pos:line="111" pos:column="21">testRetreiveMatchingStudents</name><parameter_list pos:line="111" pos:column="49">()</parameter_list> <block pos:line="111" pos:column="52">{
		
		<decl_stmt><decl><type><name><name pos:line="113" pos:column="17">LinkedHashMap</name><argument_list pos:line="113" pos:column="30">&lt;<argument><name pos:line="113" pos:column="31">Integer</name></argument> , <argument><name pos:line="113" pos:column="41">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="113" pos:column="50">retreiveCheck</name><init pos:line="113" pos:column="63">=<expr><call><name><name pos:line="113" pos:column="64">JobApplication</name><op:operator pos:line="113" pos:column="78">.</op:operator><name pos:line="113" pos:column="79">retreiveMatchingStudents</name></name><argument_list pos:line="113" pos:column="103">(<argument><expr><lit:literal type="number" pos:line="113" pos:column="104">2.5</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="113" pos:column="109">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="113" pos:column="112">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="113" pos:column="119">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="113" pos:column="125">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="113" pos:column="131">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="113" pos:column="137">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="114" pos:column="17">assertNotNull</name><argument_list pos:line="114" pos:column="30">(<argument><expr><name pos:line="114" pos:column="31">retreiveCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="117" pos:column="9">@<name pos:line="117" pos:column="10">Test</name></annotation>
	<specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">testRetreiveMatchingStudents2</name><parameter_list pos:line="118" pos:column="50">()</parameter_list> <block pos:line="118" pos:column="53">{
		
		<decl_stmt><decl><type><name><name pos:line="120" pos:column="17">LinkedHashMap</name><argument_list pos:line="120" pos:column="30">&lt;<argument><name pos:line="120" pos:column="31">Integer</name></argument> , <argument><name pos:line="120" pos:column="41">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="120" pos:column="50">retreiveCheck</name><init pos:line="120" pos:column="63">=<expr><call><name><name pos:line="120" pos:column="64">JobApplication</name><op:operator pos:line="120" pos:column="78">.</op:operator><name pos:line="120" pos:column="79">retreiveMatchingStudents</name></name><argument_list pos:line="120" pos:column="103">(<argument><expr><lit:literal type="number" pos:line="120" pos:column="104">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="107">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="110">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="116">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="122">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="128">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="134">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="121" pos:column="17">assertEquals</name><argument_list pos:line="121" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="121" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="121" pos:column="33">retreiveCheck</name><op:operator pos:line="121" pos:column="46">.</op:operator><name pos:line="121" pos:column="47">size</name></name><argument_list pos:line="121" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="121" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="124" pos:column="9">@<name pos:line="124" pos:column="10">Test</name></annotation>
	<specifier pos:line="125" pos:column="9">public</specifier> <name pos:line="125" pos:column="16">void</name></type> <name pos:line="125" pos:column="21">testRePost</name><parameter_list pos:line="125" pos:column="31">()</parameter_list> <block pos:line="125" pos:column="34">{
		<comment type="line" pos:line="126" pos:column="17">//this function cannot be tested here as it would create inconsistency in the database</comment>
	}</block></function>
	
	<function><type><annotation pos:line="129" pos:column="9">@<name pos:line="129" pos:column="10">Test</name></annotation>
	<specifier pos:line="130" pos:column="9">public</specifier> <name pos:line="130" pos:column="16">void</name></type> <name pos:line="130" pos:column="21">testRePost2</name><parameter_list pos:line="130" pos:column="32">()</parameter_list> <block pos:line="130" pos:column="35">{
		
		<decl_stmt><decl><type><name pos:line="132" pos:column="17">Job</name></type> <name pos:line="132" pos:column="21">job</name><init pos:line="132" pos:column="24">=<expr><op:operator pos:line="132" pos:column="25">new</op:operator> <call><name pos:line="132" pos:column="29">Job</name><argument_list pos:line="132" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="132" pos:column="33">15</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="134" pos:column="17">LinkedHashMap</name><argument_list pos:line="134" pos:column="30">&lt;<argument><name pos:line="134" pos:column="31">Integer</name></argument> , <argument><name pos:line="134" pos:column="41">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="50">retreiveCheck</name><init pos:line="134" pos:column="63">=<expr><call><name><name pos:line="134" pos:column="64">JobApplication</name><op:operator pos:line="134" pos:column="78">.</op:operator><name pos:line="134" pos:column="79">rePost</name></name><argument_list pos:line="134" pos:column="85">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="86">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="89">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="134" pos:column="92">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="134" pos:column="98">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="134" pos:column="105">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="134" pos:column="112">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="134" pos:column="119">false</lit:literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="126">job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">assertNotNull</name><argument_list pos:line="135" pos:column="30">(<argument><expr><name pos:line="135" pos:column="31">retreiveCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="138" pos:column="9">@<name pos:line="138" pos:column="10">Test</name></annotation>
	<specifier pos:line="139" pos:column="9">public</specifier> <name pos:line="139" pos:column="16">void</name></type> <name pos:line="139" pos:column="21">testRePost3</name><parameter_list pos:line="139" pos:column="32">()</parameter_list> <block pos:line="139" pos:column="35">{
		
		<decl_stmt><decl><type><name pos:line="141" pos:column="17">Job</name></type> <name pos:line="141" pos:column="21">job</name><init pos:line="141" pos:column="24">=<expr><op:operator pos:line="141" pos:column="25">new</op:operator> <call><name pos:line="141" pos:column="29">Job</name><argument_list pos:line="141" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="143" pos:column="17">LinkedHashMap</name><argument_list pos:line="143" pos:column="30">&lt;<argument><name pos:line="143" pos:column="31">Integer</name></argument> , <argument><name pos:line="143" pos:column="41">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="50">retreiveCheck</name><init pos:line="143" pos:column="63">=<expr><call><name><name pos:line="143" pos:column="64">JobApplication</name><op:operator pos:line="143" pos:column="78">.</op:operator><name pos:line="143" pos:column="79">rePost</name></name><argument_list pos:line="143" pos:column="85">(<argument><expr><lit:literal type="number" pos:line="143" pos:column="86">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="143" pos:column="89">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="143" pos:column="92">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="143" pos:column="99">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="143" pos:column="105">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="143" pos:column="111">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="143" pos:column="117">false</lit:literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="124">job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="144" pos:column="17">assertEquals</name><argument_list pos:line="144" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="144" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="33">retreiveCheck</name><op:operator pos:line="144" pos:column="46">.</op:operator><name pos:line="144" pos:column="47">size</name></name><argument_list pos:line="144" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="144" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="147" pos:column="9">@<name pos:line="147" pos:column="10">Test</name></annotation>
	<specifier pos:line="148" pos:column="9">public</specifier> <name pos:line="148" pos:column="16">void</name></type> <name pos:line="148" pos:column="21">testUpdateApplication</name><parameter_list pos:line="148" pos:column="42">()</parameter_list> <block pos:line="148" pos:column="45">{
		
		<try pos:line="150" pos:column="17">try <block pos:line="150" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="151" pos:column="25">boolean</name></type> <name pos:line="151" pos:column="33">check</name><init pos:line="151" pos:column="38">=<expr><call><name><name pos:line="151" pos:column="39">JobApplication</name><op:operator pos:line="151" pos:column="53">.</op:operator><name pos:line="151" pos:column="54">updateApplication</name></name><argument_list pos:line="151" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="151" pos:column="72">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="151" pos:column="77">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="80">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="86">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="92">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="98">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="151" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="152" pos:column="25">assertTrue</name><argument_list pos:line="152" pos:column="35">(<argument><expr><name pos:line="152" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="153" pos:column="19">catch <parameter_list pos:line="153" pos:column="25">(<param><decl><type><name><name pos:line="153" pos:column="26">People</name><op:operator pos:line="153" pos:column="32">.</op:operator><name pos:line="153" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="153" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="153" pos:column="64">{
			<comment type="line" pos:line="154" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">e</name><op:operator pos:line="155" pos:column="26">.</op:operator><name pos:line="155" pos:column="27">printStackTrace</name></name><argument_list pos:line="155" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="159" pos:column="9">@<name pos:line="159" pos:column="10">Test</name></annotation>
	<specifier pos:line="160" pos:column="9">public</specifier> <name pos:line="160" pos:column="16">void</name></type> <name pos:line="160" pos:column="21">testUpdateApplication2</name><parameter_list pos:line="160" pos:column="43">()</parameter_list> <block pos:line="160" pos:column="46">{
		
		<try pos:line="162" pos:column="17">try <block pos:line="162" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="163" pos:column="25">boolean</name></type> <name pos:line="163" pos:column="33">check</name><init pos:line="163" pos:column="38">=<expr><call><name><name pos:line="163" pos:column="39">JobApplication</name><op:operator pos:line="163" pos:column="53">.</op:operator><name pos:line="163" pos:column="54">updateApplication</name></name><argument_list pos:line="163" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="72">451</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="163" pos:column="77">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="163" pos:column="80">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="163" pos:column="86">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="163" pos:column="92">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="163" pos:column="98">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="163" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="164" pos:column="25">assertFalse</name><argument_list pos:line="164" pos:column="36">(<argument><expr><name pos:line="164" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="165" pos:column="19">catch <parameter_list pos:line="165" pos:column="25">(<param><decl><type><name><name pos:line="165" pos:column="26">People</name><op:operator pos:line="165" pos:column="32">.</op:operator><name pos:line="165" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="165" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="64">{
			<comment type="line" pos:line="166" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="167" pos:column="25">e</name><op:operator pos:line="167" pos:column="26">.</op:operator><name pos:line="167" pos:column="27">printStackTrace</name></name><argument_list pos:line="167" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="171" pos:column="9">@<name pos:line="171" pos:column="10">Test</name></annotation>
	<specifier pos:line="172" pos:column="9">public</specifier> <name pos:line="172" pos:column="16">void</name></type> <name pos:line="172" pos:column="21">testUpdateApplicationCheck</name><parameter_list pos:line="172" pos:column="47">()</parameter_list> <block pos:line="172" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="174" pos:column="17">boolean</name></type> <name pos:line="174" pos:column="25">check</name><init pos:line="174" pos:column="30">=<expr><call><name><name pos:line="174" pos:column="31">JobApplication</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">updateApplicationCheck</name></name><argument_list pos:line="174" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="174" pos:column="69">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">assertTrue</name><argument_list pos:line="175" pos:column="27">(<argument><expr><name pos:line="175" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="178" pos:column="9">@<name pos:line="178" pos:column="10">Test</name></annotation>
	<specifier pos:line="179" pos:column="9">public</specifier> <name pos:line="179" pos:column="16">void</name></type> <name pos:line="179" pos:column="21">testUpdateApplicationCheck2</name><parameter_list pos:line="179" pos:column="48">()</parameter_list> <block pos:line="179" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">boolean</name></type> <name pos:line="181" pos:column="25">check</name><init pos:line="181" pos:column="30">=<expr><call><name><name pos:line="181" pos:column="31">JobApplication</name><op:operator pos:line="181" pos:column="45">.</op:operator><name pos:line="181" pos:column="46">updateApplicationCheck</name></name><argument_list pos:line="181" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="181" pos:column="69">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="182" pos:column="17">assertFalse</name><argument_list pos:line="182" pos:column="28">(<argument><expr><name pos:line="182" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>

</unit>
