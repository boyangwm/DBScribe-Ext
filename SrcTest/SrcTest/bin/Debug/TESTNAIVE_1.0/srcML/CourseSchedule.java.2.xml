<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\CourseSchedule.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">util</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Collections</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">HashMap</name></name>;</import>



<class><specifier pos:line="16" pos:column="1">public</specifier> class <name pos:line="16" pos:column="14">CourseSchedule</name> <block pos:line="16" pos:column="29">{
	<decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">int</name></type> <name pos:line="17" pos:column="21">offerID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">int</name></type> <name pos:line="18" pos:column="21">classroomID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">int</name></type> <name pos:line="19" pos:column="21">timeSlotID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">private</specifier> <name pos:line="20" pos:column="17">Timeslots</name></type> <name pos:line="20" pos:column="27">timeslot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <name pos:line="21" pos:column="17">Classroom</name></type> <name pos:line="21" pos:column="27">classroom</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc" pos:line="23" pos:column="9">/**
	 * @return the offerID
	 */</comment>
	<function><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">int</name></type> <name pos:line="26" pos:column="20">getOfferID</name><parameter_list pos:line="26" pos:column="30">()</parameter_list> <block pos:line="26" pos:column="33">{
		<return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">offerID</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="30" pos:column="9">/**
	 * @param offerID the offerID to set
	 */</comment>
	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">setOfferID</name><parameter_list pos:line="33" pos:column="31">(<param><decl><type><name pos:line="33" pos:column="32">int</name></type> <name pos:line="33" pos:column="36">offerID</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">this</name><op:operator pos:line="34" pos:column="21">.</op:operator><name pos:line="34" pos:column="22">offerID</name></name> <op:operator pos:line="34" pos:column="30">=</op:operator> <name pos:line="34" pos:column="32">offerID</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="37" pos:column="9">/**
	 * @return the classroomID
	 */</comment>
	<function><type><specifier pos:line="40" pos:column="9">public</specifier> <name pos:line="40" pos:column="16">int</name></type> <name pos:line="40" pos:column="20">getClassroomID</name><parameter_list pos:line="40" pos:column="34">()</parameter_list> <block pos:line="40" pos:column="37">{
		<return pos:line="41" pos:column="17">return <expr><name pos:line="41" pos:column="24">classroomID</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="44" pos:column="9">/**
	 * @param classroomID the classroomID to set
	 */</comment>
	<function><type><specifier pos:line="47" pos:column="9">public</specifier> <name pos:line="47" pos:column="16">void</name></type> <name pos:line="47" pos:column="21">setClassroomID</name><parameter_list pos:line="47" pos:column="35">(<param><decl><type><name pos:line="47" pos:column="36">int</name></type> <name pos:line="47" pos:column="40">classroomID</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">this</name><op:operator pos:line="48" pos:column="21">.</op:operator><name pos:line="48" pos:column="22">classroomID</name></name> <op:operator pos:line="48" pos:column="34">=</op:operator> <name pos:line="48" pos:column="36">classroomID</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="51" pos:column="9">/**
	 * @return the timeSlotID
	 */</comment>
	<function><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">int</name></type> <name pos:line="54" pos:column="20">getTimeSlotID</name><parameter_list pos:line="54" pos:column="33">()</parameter_list> <block pos:line="54" pos:column="36">{
		<return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">timeSlotID</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="58" pos:column="9">/**
	 * @param timeSlotID the timeSlotID to set
	 */</comment>
	<function><type><specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">setTimeSlotID</name><parameter_list pos:line="61" pos:column="34">(<param><decl><type><name pos:line="61" pos:column="35">int</name></type> <name pos:line="61" pos:column="39">timeSlotID</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="51">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">this</name><op:operator pos:line="62" pos:column="21">.</op:operator><name pos:line="62" pos:column="22">timeSlotID</name></name> <op:operator pos:line="62" pos:column="33">=</op:operator> <name pos:line="62" pos:column="35">timeSlotID</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="65" pos:column="9">/**
	 * @return the timeslot
	 */</comment>
	<function><type><specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">Timeslots</name></type> <name pos:line="68" pos:column="26">getTimeslot</name><parameter_list pos:line="68" pos:column="37">()</parameter_list> <block pos:line="68" pos:column="40">{
		<return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">timeslot</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="72" pos:column="9">/**
	 * @param timeslot the timeslot to set
	 */</comment>
	<function><type><specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">setTimeslot</name><parameter_list pos:line="75" pos:column="32">(<param><decl><type><name pos:line="75" pos:column="33">Timeslots</name></type> <name pos:line="75" pos:column="43">timeslot</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="53">{
		<if pos:line="76" pos:column="17">if<condition pos:line="76" pos:column="19">(<expr><name pos:line="76" pos:column="20">timeslot</name> <op:operator pos:line="76" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="76" pos:column="32">null</lit:literal></expr>)</condition><then pos:line="76" pos:column="37">
			<throw pos:line="77" pos:column="25">throw <expr><op:operator pos:line="77" pos:column="31">new</op:operator> <call><name pos:line="77" pos:column="35">NullPointerException</name><argument_list pos:line="77" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="56">"Timeslot is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">this</name><op:operator pos:line="78" pos:column="21">.</op:operator><name pos:line="78" pos:column="22">timeslot</name></name> <op:operator pos:line="78" pos:column="31">=</op:operator> <name pos:line="78" pos:column="33">timeslot</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="81" pos:column="9">/**
	 * @return the classroom
	 */</comment>
	<function><type><specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">Classroom</name></type> <name pos:line="84" pos:column="26">getClassroom</name><parameter_list pos:line="84" pos:column="38">()</parameter_list> <block pos:line="84" pos:column="41">{
		<return pos:line="85" pos:column="17">return <expr><name pos:line="85" pos:column="24">classroom</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="88" pos:column="9">/**
	 * @param classroom the classroom to set
	 */</comment>
	<function><type><specifier pos:line="91" pos:column="9">public</specifier> <name pos:line="91" pos:column="16">void</name></type> <name pos:line="91" pos:column="21">setClassroom</name><parameter_list pos:line="91" pos:column="33">(<param><decl><type><name pos:line="91" pos:column="34">Classroom</name></type> <name pos:line="91" pos:column="44">classroom</name></decl></param>)</parameter_list> <block pos:line="91" pos:column="55">{
		<if pos:line="92" pos:column="17">if<condition pos:line="92" pos:column="19">(<expr><name pos:line="92" pos:column="20">classroom</name> <op:operator pos:line="92" pos:column="30">==</op:operator> <lit:literal type="null" pos:line="92" pos:column="33">null</lit:literal></expr>)</condition><then pos:line="92" pos:column="38">
			<throw pos:line="93" pos:column="25">throw <expr><op:operator pos:line="93" pos:column="31">new</op:operator> <call><name pos:line="93" pos:column="35">NullPointerException</name><argument_list pos:line="93" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="56">"Classroom object is null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		<expr_stmt><expr><name><name pos:line="94" pos:column="17">this</name><op:operator pos:line="94" pos:column="21">.</op:operator><name pos:line="94" pos:column="22">classroom</name></name> <op:operator pos:line="94" pos:column="32">=</op:operator> <name pos:line="94" pos:column="34">classroom</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="97" pos:column="9">/*
	 * Retrieves the course schedule for the specified course offer id
	 * If the courseOffering is not current, it doesn't initialize the any value
	 * Doesn't throw any exceptions as non-current course offerings do not have a schedule and that is acceptable 
	 */</comment>
	<constructor><specifier pos:line="102" pos:column="9">public</specifier> <name pos:line="102" pos:column="16">CourseSchedule</name><parameter_list pos:line="102" pos:column="30">(<param><decl><type><name pos:line="102" pos:column="31">int</name></type> <name pos:line="102" pos:column="35">offerID</name></decl></param>)</parameter_list><block pos:line="102" pos:column="43">{		
		<try pos:line="103" pos:column="17">try<block pos:line="103" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="104" pos:column="25">Connection</name></type> <name pos:line="104" pos:column="36">conn</name> <init pos:line="104" pos:column="41">= <expr><call><name><name pos:line="104" pos:column="43">Database</name><op:operator pos:line="104" pos:column="51">.</op:operator><name pos:line="104" pos:column="52">getConnection</name></name><argument_list pos:line="104" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="106" pos:column="25">try<block pos:line="106" pos:column="28">{
				<if pos:line="107" pos:column="33">if<condition pos:line="107" pos:column="35">(<expr><name pos:line="107" pos:column="36">conn</name> <op:operator pos:line="107" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="107" pos:column="44">null</lit:literal> <op:operator pos:line="107" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="107" pos:column="52">CourseOffered</name><op:operator pos:line="107" pos:column="65">.</op:operator><name pos:line="107" pos:column="66">checkIfExists</name></name><argument_list pos:line="107" pos:column="79">(<argument><expr><name pos:line="107" pos:column="80">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="107" pos:column="89">{
					
					<comment type="line" pos:line="109" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="110" pos:column="41">String</name></type> <name pos:line="110" pos:column="48">scheduleSelect</name> <init pos:line="110" pos:column="63">= <expr><lit:literal type="string" pos:line="110" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="111" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="111" pos:column="59">" FROM courseschedule"</lit:literal>
							<op:operator pos:line="112" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="112" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="113" pos:column="41">PreparedStatement</name></type> <name pos:line="113" pos:column="59">statement</name> <init pos:line="113" pos:column="69">= <expr><call><name><name pos:line="113" pos:column="71">conn</name><op:operator pos:line="113" pos:column="75">.</op:operator><name pos:line="113" pos:column="76">prepareStatement</name></name><argument_list pos:line="113" pos:column="92">(<argument><expr><name pos:line="113" pos:column="93">scheduleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="114" pos:column="41">statement</name><op:operator pos:line="114" pos:column="50">.</op:operator><name pos:line="114" pos:column="51">setInt</name></name><argument_list pos:line="114" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="114" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="115" pos:column="41">ResultSet</name></type> <name pos:line="115" pos:column="51">rs</name> <init pos:line="115" pos:column="54">= <expr><call><name><name pos:line="115" pos:column="56">statement</name><op:operator pos:line="115" pos:column="65">.</op:operator><name pos:line="115" pos:column="66">executeQuery</name></name><argument_list pos:line="115" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="117" pos:column="41">if<condition pos:line="117" pos:column="43">(<expr><call><name><name pos:line="117" pos:column="44">rs</name><op:operator pos:line="117" pos:column="46">.</op:operator><name pos:line="117" pos:column="47">first</name></name><argument_list pos:line="117" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="117" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="118" pos:column="49">DBAnnotation</name><op:operator pos:line="118" pos:column="61">.</op:operator><name pos:line="118" pos:column="62">annoate</name></name><argument_list pos:line="118" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="70">"offID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="79">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="97">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="118" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="119" pos:column="49">int</name></type> <name pos:line="119" pos:column="53">offID</name> <init pos:line="119" pos:column="59">= <expr><call><name><name pos:line="119" pos:column="61">rs</name><op:operator pos:line="119" pos:column="63">.</op:operator><name pos:line="119" pos:column="64">getInt</name></name><argument_list pos:line="119" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="71">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="120" pos:column="49">DBAnnotation</name><op:operator pos:line="120" pos:column="61">.</op:operator><name pos:line="120" pos:column="62">annoate</name></name><argument_list pos:line="120" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="70">"classroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="85">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="103">"ClassroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="120" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="121" pos:column="49">int</name></type> <name pos:line="121" pos:column="53">classroomID</name> <init pos:line="121" pos:column="65">= <expr><call><name><name pos:line="121" pos:column="67">rs</name><op:operator pos:line="121" pos:column="69">.</op:operator><name pos:line="121" pos:column="70">getInt</name></name><argument_list pos:line="121" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="77">"ClassroomID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="122" pos:column="49">DBAnnotation</name><op:operator pos:line="122" pos:column="61">.</op:operator><name pos:line="122" pos:column="62">annoate</name></name><argument_list pos:line="122" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="70">"timeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="84">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="102">"TimeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="122" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="123" pos:column="49">int</name></type> <name pos:line="123" pos:column="53">timeSlotID</name> <init pos:line="123" pos:column="64">= <expr><call><name><name pos:line="123" pos:column="66">rs</name><op:operator pos:line="123" pos:column="68">.</op:operator><name pos:line="123" pos:column="69">getInt</name></name><argument_list pos:line="123" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="76">"TImeSlotID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="125" pos:column="49">Timeslots</name></type> <name pos:line="125" pos:column="59">timeslot</name> <init pos:line="125" pos:column="68">= <expr><op:operator pos:line="125" pos:column="70">new</op:operator> <call><name pos:line="125" pos:column="74">Timeslots</name><argument_list pos:line="125" pos:column="83">(<argument><expr><name pos:line="125" pos:column="84">timeSlotID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="126" pos:column="49">Classroom</name></type> <name pos:line="126" pos:column="59">classroom</name> <init pos:line="126" pos:column="69">= <expr><op:operator pos:line="126" pos:column="71">new</op:operator> <call><name pos:line="126" pos:column="75">Classroom</name><argument_list pos:line="126" pos:column="84">(<argument><expr><name pos:line="126" pos:column="85">classroomID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="127" pos:column="49">setClassroom</name><argument_list pos:line="127" pos:column="61">(<argument><expr><name pos:line="127" pos:column="62">classroom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="128" pos:column="49">setClassroomID</name><argument_list pos:line="128" pos:column="63">(<argument><expr><name pos:line="128" pos:column="64">classroomID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="129" pos:column="49">setOfferID</name><argument_list pos:line="129" pos:column="59">(<argument><expr><name pos:line="129" pos:column="60">offID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="130" pos:column="49">setTimeslot</name><argument_list pos:line="130" pos:column="60">(<argument><expr><name pos:line="130" pos:column="61">timeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="131" pos:column="49">setTimeSlotID</name><argument_list pos:line="131" pos:column="62">(<argument><expr><name pos:line="131" pos:column="63">timeSlotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block></then>
					
					<else pos:line="135" pos:column="41">else<block pos:line="135" pos:column="45">{
						<expr_stmt><expr><call><name><name pos:line="136" pos:column="49">System</name><op:operator pos:line="136" pos:column="55">.</op:operator><name pos:line="136" pos:column="56">out</name><op:operator pos:line="136" pos:column="59">.</op:operator><name pos:line="136" pos:column="60">println</name></name><argument_list pos:line="136" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="68">"Course with offerID:"</lit:literal><op:operator pos:line="136" pos:column="90">+</op:operator><name pos:line="136" pos:column="91">offerID</name><op:operator pos:line="136" pos:column="98">+</op:operator><lit:literal type="string" pos:line="136" pos:column="99">" is NOT scheduled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line" pos:line="137" pos:column="49">//throw new IllegalArgumentException();</comment>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="144" pos:column="25">catch<parameter_list pos:line="144" pos:column="30">(<param><decl><type><name pos:line="144" pos:column="31">SQLException</name></type> <name pos:line="144" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="144" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">System</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">out</name><op:operator pos:line="145" pos:column="43">.</op:operator><name pos:line="145" pos:column="44">println</name></name><argument_list pos:line="145" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="52">"Error retreiving schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="146" pos:column="33">System</name><op:operator pos:line="146" pos:column="39">.</op:operator><name pos:line="146" pos:column="40">out</name><op:operator pos:line="146" pos:column="43">.</op:operator><name pos:line="146" pos:column="44">println</name></name><argument_list pos:line="146" pos:column="51">(<argument><expr><call><name><name pos:line="146" pos:column="52">e</name><op:operator pos:line="146" pos:column="53">.</op:operator><name pos:line="146" pos:column="54">getMessage</name></name><argument_list pos:line="146" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">e</name><op:operator pos:line="147" pos:column="34">.</op:operator><name pos:line="147" pos:column="35">printStackTrace</name></name><argument_list pos:line="147" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="152" pos:column="17">finally<block pos:line="152" pos:column="24">{
		}</block></finally></try>
	}</block></constructor>
	
	<comment type="block" pos:line="156" pos:column="9">/*
	 * Update the course schedule of the passed course offering, with the passed classroom and the passed time slot
	 * Checks if the course offering is already scheduled, if not, it will not update the course schedule
	 * Also checks if the classroom and the time slot requested are available, otherwise the updating will fail
	 * Throws a course offering not current exception if the courseOffered passed is not a currently offered course
	 * 
	 */</comment>
	<function><type><specifier pos:line="163" pos:column="9">public</specifier> <specifier pos:line="163" pos:column="16">static</specifier> <name pos:line="163" pos:column="23">boolean</name></type> <name pos:line="163" pos:column="31">updateCourseSchedule</name><parameter_list pos:line="163" pos:column="51">(<param><decl><type><name pos:line="163" pos:column="52">CourseOffered</name></type> <name pos:line="163" pos:column="66">courseoffered</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="81">Classroom</name></type> <name pos:line="163" pos:column="91">classroom</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="102">Timeslots</name></type> <name pos:line="163" pos:column="112">timeslots</name></decl></param>)</parameter_list> <throws pos:line="163" pos:column="123">throws <argument><expr><name><name pos:line="163" pos:column="130">CourseOffered</name><op:operator pos:line="163" pos:column="143">.</op:operator><name pos:line="163" pos:column="144">CourseOfferingNotCurrentException</name></name></expr></argument></throws><block pos:line="163" pos:column="177">{
		<if pos:line="164" pos:column="17">if<condition pos:line="164" pos:column="19">(<expr><name pos:line="164" pos:column="20">courseoffered</name> <op:operator pos:line="164" pos:column="34">==</op:operator> <lit:literal type="null" pos:line="164" pos:column="37">null</lit:literal> <op:operator pos:line="164" pos:column="42">||</op:operator> <name pos:line="164" pos:column="45">classroom</name> <op:operator pos:line="164" pos:column="55">==</op:operator> <lit:literal type="null" pos:line="164" pos:column="58">null</lit:literal> <op:operator pos:line="164" pos:column="63">||</op:operator> <name pos:line="164" pos:column="66">timeslots</name> <op:operator pos:line="164" pos:column="76">==</op:operator> <lit:literal type="null" pos:line="164" pos:column="79">null</lit:literal></expr>)</condition><then><block pos:line="164" pos:column="84">{
			<return pos:line="165" pos:column="25">return <expr><lit:literal type="boolean" pos:line="165" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
				
		<comment type="line" pos:line="168" pos:column="17">//Check if the course offering is already scheduled</comment>
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">boolean</name></type> <name pos:line="169" pos:column="25">isAlreadyScheduled</name> <init pos:line="169" pos:column="44">= <expr><call><name><name pos:line="169" pos:column="46">courseoffered</name><op:operator pos:line="169" pos:column="59">.</op:operator><name pos:line="169" pos:column="60">checkIfScheduled</name></name><argument_list pos:line="169" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">boolean</name></type> <name pos:line="170" pos:column="25">isEmpty</name> <init pos:line="170" pos:column="33">= <expr><call><name><name pos:line="170" pos:column="35">Classroom</name><op:operator pos:line="170" pos:column="44">.</op:operator><name pos:line="170" pos:column="45">isEmpty</name></name><argument_list pos:line="170" pos:column="52">(<argument><expr><name pos:line="170" pos:column="53">classroom</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="64">timeslots</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="171" pos:column="17">if<condition pos:line="171" pos:column="19">(<expr><name pos:line="171" pos:column="20">isAlreadyScheduled</name> <op:operator pos:line="171" pos:column="39">&amp;&amp;</op:operator> <name pos:line="171" pos:column="42">isEmpty</name></expr>)</condition><then><block pos:line="171" pos:column="50">{
			<try pos:line="172" pos:column="25">try<block pos:line="172" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="173" pos:column="33">Connection</name></type> <name pos:line="173" pos:column="44">conn</name> <init pos:line="173" pos:column="49">= <expr><call><name><name pos:line="173" pos:column="51">Database</name><op:operator pos:line="173" pos:column="59">.</op:operator><name pos:line="173" pos:column="60">getConnection</name></name><argument_list pos:line="173" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<try pos:line="175" pos:column="33">try<block pos:line="175" pos:column="36">{
					<if pos:line="176" pos:column="41">if<condition pos:line="176" pos:column="43">(<expr><name pos:line="176" pos:column="44">conn</name> <op:operator pos:line="176" pos:column="49">!=</op:operator> <lit:literal type="null" pos:line="176" pos:column="52">null</lit:literal></expr>)</condition><then><block pos:line="176" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="177" pos:column="49">DBAnnotation</name><op:operator pos:line="177" pos:column="61">.</op:operator><name pos:line="177" pos:column="62">annoate</name></name><argument_list pos:line="177" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="70">"timeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="84">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="177" pos:column="102">"TimeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="177" pos:column="116">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="178" pos:column="49">int</name></type> <name pos:line="178" pos:column="53">timeSlotID</name> <init pos:line="178" pos:column="64">= <expr><call><name><name pos:line="178" pos:column="66">timeslots</name><op:operator pos:line="178" pos:column="75">.</op:operator><name pos:line="178" pos:column="76">getTimeSlotID</name></name><argument_list pos:line="178" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="180" pos:column="49">DBAnnotation</name><op:operator pos:line="180" pos:column="61">.</op:operator><name pos:line="180" pos:column="62">annoate</name></name><argument_list pos:line="180" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="70">"classroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="85">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="103">"ClassroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="180" pos:column="118">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="181" pos:column="49">int</name></type> <name pos:line="181" pos:column="53">classroomID</name> <init pos:line="181" pos:column="65">= <expr><call><name><name pos:line="181" pos:column="67">classroom</name><op:operator pos:line="181" pos:column="76">.</op:operator><name pos:line="181" pos:column="77">getClassroomID</name></name><argument_list pos:line="181" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="183" pos:column="49">DBAnnotation</name><op:operator pos:line="183" pos:column="61">.</op:operator><name pos:line="183" pos:column="62">annoate</name></name><argument_list pos:line="183" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="183" pos:column="81">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="183" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="183" pos:column="110">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
						<decl_stmt><decl><type><name pos:line="184" pos:column="49">int</name></type> <name pos:line="184" pos:column="53">offerID</name> <init pos:line="184" pos:column="61">= <expr><call><name><name pos:line="184" pos:column="63">courseoffered</name><op:operator pos:line="184" pos:column="76">.</op:operator><name pos:line="184" pos:column="77">getOfferID</name></name><argument_list pos:line="184" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="186" pos:column="49">String</name></type> <name pos:line="186" pos:column="56">scheduleInsert</name> <init pos:line="186" pos:column="71">= <expr><lit:literal type="string" pos:line="186" pos:column="73">"UPDATE courseschedule "</lit:literal>
								<op:operator pos:line="187" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="67">"SET TimeSlotID= ? , ClassroomID=? "</lit:literal>
								<op:operator pos:line="188" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="188" pos:column="67">"WHERE OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="189" pos:column="49">PreparedStatement</name></type> <name pos:line="189" pos:column="67">statement</name> <init pos:line="189" pos:column="77">= <expr><call><name><name pos:line="189" pos:column="79">conn</name><op:operator pos:line="189" pos:column="83">.</op:operator><name pos:line="189" pos:column="84">prepareStatement</name></name><argument_list pos:line="189" pos:column="100">(<argument><expr><name pos:line="189" pos:column="101">scheduleInsert</name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="117">ResultSet</name><op:operator pos:line="189" pos:column="126">.</op:operator><name pos:line="189" pos:column="127">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="190" pos:column="49">statement</name><op:operator pos:line="190" pos:column="58">.</op:operator><name pos:line="190" pos:column="59">setInt</name></name><argument_list pos:line="190" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="190" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="69">timeSlotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="191" pos:column="49">statement</name><op:operator pos:line="191" pos:column="58">.</op:operator><name pos:line="191" pos:column="59">setInt</name></name><argument_list pos:line="191" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="191" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="191" pos:column="69">classroomID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="192" pos:column="49">statement</name><op:operator pos:line="192" pos:column="58">.</op:operator><name pos:line="192" pos:column="59">setInt</name></name><argument_list pos:line="192" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="192" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="69">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="193" pos:column="49">statement</name><op:operator pos:line="193" pos:column="58">.</op:operator><name pos:line="193" pos:column="59">executeUpdate</name></name><argument_list pos:line="193" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="194" pos:column="49">Database</name><op:operator pos:line="194" pos:column="57">.</op:operator><name pos:line="194" pos:column="58">commitTransaction</name></name><argument_list pos:line="194" pos:column="75">(<argument><expr><name pos:line="194" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="195" pos:column="49">return <expr><lit:literal type="boolean" pos:line="195" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then></if>
				}</block>
				
				<catch pos:line="199" pos:column="33">catch<parameter_list pos:line="199" pos:column="38">(<param><decl><type><name pos:line="199" pos:column="39">SQLException</name></type> <name pos:line="199" pos:column="52">e</name></decl></param>)</parameter_list><block pos:line="199" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="200" pos:column="41">System</name><op:operator pos:line="200" pos:column="47">.</op:operator><name pos:line="200" pos:column="48">out</name><op:operator pos:line="200" pos:column="51">.</op:operator><name pos:line="200" pos:column="52">println</name></name><argument_list pos:line="200" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="60">"Error updating schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="201" pos:column="41">System</name><op:operator pos:line="201" pos:column="47">.</op:operator><name pos:line="201" pos:column="48">out</name><op:operator pos:line="201" pos:column="51">.</op:operator><name pos:line="201" pos:column="52">println</name></name><argument_list pos:line="201" pos:column="59">(<argument><expr><call><name><name pos:line="201" pos:column="60">e</name><op:operator pos:line="201" pos:column="61">.</op:operator><name pos:line="201" pos:column="62">getMessage</name></name><argument_list pos:line="201" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="202" pos:column="41">//e.printStackTrace();</comment>
					<return pos:line="203" pos:column="41">return <expr><lit:literal type="boolean" pos:line="203" pos:column="48">false</lit:literal></expr>;</return>
				}</block></catch></try>
				
			}</block>
			
			<finally pos:line="208" pos:column="25">finally<block pos:line="208" pos:column="32">{
			}</block></finally></try>
			
		}</block></then></if>
		
		<return pos:line="213" pos:column="17">return <expr><lit:literal type="boolean" pos:line="213" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="216" pos:column="9">/*
	 * Returns a Map of Course schedule id and the course schedule object for all the currently scheduled courses
	 */</comment>
	<function><type><specifier pos:line="219" pos:column="9">public</specifier> <specifier pos:line="219" pos:column="16">static</specifier> <name><name pos:line="219" pos:column="23">HashMap</name><argument_list pos:line="219" pos:column="30">&lt;<argument><name pos:line="219" pos:column="31">Integer</name></argument>, <argument><name pos:line="219" pos:column="40">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="219" pos:column="56">getHaspMapForSchedule</name><parameter_list pos:line="219" pos:column="77">()</parameter_list><block pos:line="219" pos:column="79">{
		<decl_stmt><decl><type><name><name pos:line="220" pos:column="17">HashMap</name><argument_list pos:line="220" pos:column="24">&lt;<argument><name pos:line="220" pos:column="25">Integer</name></argument>, <argument><name pos:line="220" pos:column="34">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="220" pos:column="50">cs</name> <init pos:line="220" pos:column="53">= <expr><op:operator pos:line="220" pos:column="55">new</op:operator> <call><name><name pos:line="220" pos:column="59">HashMap</name><argument_list pos:line="220" pos:column="66">&lt;<argument><name pos:line="220" pos:column="67">Integer</name></argument>, <argument><name pos:line="220" pos:column="76">CourseSchedule</name></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="221" pos:column="17">for(<init><decl><type><name pos:line="221" pos:column="21">CourseSchedule</name></type> <name pos:line="221" pos:column="36">c</name><range pos:line="221" pos:column="37">: <expr><call><name pos:line="221" pos:column="39">getAllScheduledCourses</name><argument_list pos:line="221" pos:column="61">()</argument_list></call></expr></range></decl></init>)<block pos:line="221" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">cs</name><op:operator pos:line="222" pos:column="27">.</op:operator><name pos:line="222" pos:column="28">put</name></name><argument_list pos:line="222" pos:column="31">(<argument><expr><call><name><name pos:line="222" pos:column="32">c</name><op:operator pos:line="222" pos:column="33">.</op:operator><name pos:line="222" pos:column="34">getOfferID</name></name><argument_list pos:line="222" pos:column="44">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="222" pos:column="48">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<return pos:line="225" pos:column="17">return <expr><name pos:line="225" pos:column="24">cs</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="228" pos:column="9">/*
	 * Returns a ArrayList of Course schedule object for all the currently scheduled course
	 */</comment>
	<function><type><specifier pos:line="231" pos:column="9">public</specifier> <specifier pos:line="231" pos:column="16">static</specifier> <name><name pos:line="231" pos:column="23">ArrayList</name><argument_list pos:line="231" pos:column="32">&lt;<argument><name pos:line="231" pos:column="33">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="49">getAllScheduledCourses</name><parameter_list pos:line="231" pos:column="71">()</parameter_list><block pos:line="231" pos:column="73">{
		<decl_stmt><decl><type><name><name pos:line="232" pos:column="17">ArrayList</name><argument_list pos:line="232" pos:column="26">&lt;<argument><name pos:line="232" pos:column="27">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="232" pos:column="43">courseSchedule</name> <init pos:line="232" pos:column="58">= <expr><op:operator pos:line="232" pos:column="60">new</op:operator> <call><name><name pos:line="232" pos:column="64">ArrayList</name><argument_list pos:line="232" pos:column="73">&lt;<argument><name pos:line="232" pos:column="74">CourseSchedule</name></argument>&gt;</argument_list></name><argument_list pos:line="232" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="233" pos:column="17">try<block pos:line="233" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="234" pos:column="25">Connection</name></type> <name pos:line="234" pos:column="36">conn</name> <init pos:line="234" pos:column="41">= <expr><call><name><name pos:line="234" pos:column="43">Database</name><op:operator pos:line="234" pos:column="51">.</op:operator><name pos:line="234" pos:column="52">getConnection</name></name><argument_list pos:line="234" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="236" pos:column="25">try<block pos:line="236" pos:column="28">{
				<if pos:line="237" pos:column="33">if<condition pos:line="237" pos:column="35">(<expr><name pos:line="237" pos:column="36">conn</name> <op:operator pos:line="237" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="237" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="237" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="239" pos:column="41">String</name></type> <name pos:line="239" pos:column="48">SQLSelect</name><init pos:line="239" pos:column="57">= <expr><lit:literal type="string" pos:line="239" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="240" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="240" pos:column="59">" FROM courseschedule natural join coursesoffered "</lit:literal>
							<op:operator pos:line="241" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="241" pos:column="59">"ORDER BY TotalCapacity"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="242" pos:column="41">PreparedStatement</name></type> <name pos:line="242" pos:column="59">statement</name> <init pos:line="242" pos:column="69">= <expr><call><name><name pos:line="242" pos:column="71">conn</name><op:operator pos:line="242" pos:column="75">.</op:operator><name pos:line="242" pos:column="76">prepareStatement</name></name><argument_list pos:line="242" pos:column="92">(<argument><expr><name pos:line="242" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="243" pos:column="41">ResultSet</name></type> <name pos:line="243" pos:column="51">rs</name> <init pos:line="243" pos:column="54">=  <expr><call><name><name pos:line="243" pos:column="57">statement</name><op:operator pos:line="243" pos:column="66">.</op:operator><name pos:line="243" pos:column="67">executeQuery</name></name><argument_list pos:line="243" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="245" pos:column="41">while<condition pos:line="245" pos:column="46">(<expr><call><name><name pos:line="245" pos:column="47">rs</name><op:operator pos:line="245" pos:column="49">.</op:operator><name pos:line="245" pos:column="50">next</name></name><argument_list pos:line="245" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="245" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="246" pos:column="49">DBAnnotation</name><op:operator pos:line="246" pos:column="61">.</op:operator><name pos:line="246" pos:column="62">annoate</name></name><argument_list pos:line="246" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="246" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="247" pos:column="49">int</name></type> <name pos:line="247" pos:column="53">offerID</name> <init pos:line="247" pos:column="61">= <expr><call><name><name pos:line="247" pos:column="63">rs</name><op:operator pos:line="247" pos:column="65">.</op:operator><name pos:line="247" pos:column="66">getInt</name></name><argument_list pos:line="247" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="248" pos:column="49">CourseSchedule</name></type> <name pos:line="248" pos:column="64">cs</name> <init pos:line="248" pos:column="67">= <expr><op:operator pos:line="248" pos:column="69">new</op:operator> <call><name pos:line="248" pos:column="73">CourseSchedule</name><argument_list pos:line="248" pos:column="87">(<argument><expr><name pos:line="248" pos:column="88">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="249" pos:column="49">courseSchedule</name><op:operator pos:line="249" pos:column="63">.</op:operator><name pos:line="249" pos:column="64">add</name></name><argument_list pos:line="249" pos:column="67">(<argument><expr><name pos:line="249" pos:column="68">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="255" pos:column="25">catch<parameter_list pos:line="255" pos:column="30">(<param><decl><type><name pos:line="255" pos:column="31">SQLException</name></type> <name pos:line="255" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="255" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="256" pos:column="33">System</name><op:operator pos:line="256" pos:column="39">.</op:operator><name pos:line="256" pos:column="40">out</name><op:operator pos:line="256" pos:column="43">.</op:operator><name pos:line="256" pos:column="44">println</name></name><argument_list pos:line="256" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="52">"Error getting"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="257" pos:column="33">System</name><op:operator pos:line="257" pos:column="39">.</op:operator><name pos:line="257" pos:column="40">out</name><op:operator pos:line="257" pos:column="43">.</op:operator><name pos:line="257" pos:column="44">println</name></name><argument_list pos:line="257" pos:column="51">(<argument><expr><call><name><name pos:line="257" pos:column="52">e</name><op:operator pos:line="257" pos:column="53">.</op:operator><name pos:line="257" pos:column="54">getMessage</name></name><argument_list pos:line="257" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="262" pos:column="17">finally<block pos:line="262" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="265" pos:column="17">return <expr><name pos:line="265" pos:column="24">courseSchedule</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="268" pos:column="9">/*
	 * Returns a ArrayList of all the scheduled courses in the specified department
	 */</comment>
	<function><type><specifier pos:line="271" pos:column="9">public</specifier> <specifier pos:line="271" pos:column="16">static</specifier> <name><name pos:line="271" pos:column="23">ArrayList</name><argument_list pos:line="271" pos:column="32">&lt;<argument><name pos:line="271" pos:column="33">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="271" pos:column="49">getAllScheduledCourses</name><parameter_list pos:line="271" pos:column="71">(<param><decl><type><name pos:line="271" pos:column="72">Department</name></type> <name pos:line="271" pos:column="83">department</name></decl></param>)</parameter_list><block pos:line="271" pos:column="94">{
		<decl_stmt><decl><type><name><name pos:line="272" pos:column="17">ArrayList</name><argument_list pos:line="272" pos:column="26">&lt;<argument><name pos:line="272" pos:column="27">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="272" pos:column="43">courseSchedule</name> <init pos:line="272" pos:column="58">= <expr><op:operator pos:line="272" pos:column="60">new</op:operator> <call><name><name pos:line="272" pos:column="64">ArrayList</name><argument_list pos:line="272" pos:column="73">&lt;<argument><name pos:line="272" pos:column="74">CourseSchedule</name></argument>&gt;</argument_list></name><argument_list pos:line="272" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="273" pos:column="17">if<condition pos:line="273" pos:column="19">(<expr><name pos:line="273" pos:column="20">department</name> <op:operator pos:line="273" pos:column="31">==</op:operator> <lit:literal type="null" pos:line="273" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="273" pos:column="39">
			<return pos:line="274" pos:column="25">return <expr><name pos:line="274" pos:column="32">courseSchedule</name></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name pos:line="276" pos:column="17">String</name></type> <name pos:line="276" pos:column="24">departmentName</name> <init pos:line="276" pos:column="39">= <expr><call><name><name pos:line="276" pos:column="41">department</name><op:operator pos:line="276" pos:column="51">.</op:operator><name pos:line="276" pos:column="52">getDepartmentName</name></name><argument_list pos:line="276" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="277" pos:column="17">try<block pos:line="277" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="278" pos:column="25">Connection</name></type> <name pos:line="278" pos:column="36">conn</name> <init pos:line="278" pos:column="41">= <expr><call><name><name pos:line="278" pos:column="43">Database</name><op:operator pos:line="278" pos:column="51">.</op:operator><name pos:line="278" pos:column="52">getConnection</name></name><argument_list pos:line="278" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="280" pos:column="25">try<block pos:line="280" pos:column="28">{
				<if pos:line="281" pos:column="33">if<condition pos:line="281" pos:column="35">(<expr><name pos:line="281" pos:column="36">conn</name> <op:operator pos:line="281" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="281" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="281" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="283" pos:column="41">String</name></type> <name pos:line="283" pos:column="48">SQLSelect</name><init pos:line="283" pos:column="57">= <expr><lit:literal type="string" pos:line="283" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="284" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="284" pos:column="59">" FROM courseschedule natural join coursesoffered "</lit:literal>
							<op:operator pos:line="285" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="285" pos:column="59">"ORDER BY TotalCapacity"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="286" pos:column="41">PreparedStatement</name></type> <name pos:line="286" pos:column="59">statement</name> <init pos:line="286" pos:column="69">= <expr><call><name><name pos:line="286" pos:column="71">conn</name><op:operator pos:line="286" pos:column="75">.</op:operator><name pos:line="286" pos:column="76">prepareStatement</name></name><argument_list pos:line="286" pos:column="92">(<argument><expr><name pos:line="286" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="287" pos:column="41">ResultSet</name></type> <name pos:line="287" pos:column="51">rs</name> <init pos:line="287" pos:column="54">=  <expr><call><name><name pos:line="287" pos:column="57">statement</name><op:operator pos:line="287" pos:column="66">.</op:operator><name pos:line="287" pos:column="67">executeQuery</name></name><argument_list pos:line="287" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="289" pos:column="41">while<condition pos:line="289" pos:column="46">(<expr><call><name><name pos:line="289" pos:column="47">rs</name><op:operator pos:line="289" pos:column="49">.</op:operator><name pos:line="289" pos:column="50">next</name></name><argument_list pos:line="289" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="289" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="290" pos:column="49">DBAnnotation</name><op:operator pos:line="290" pos:column="61">.</op:operator><name pos:line="290" pos:column="62">annoate</name></name><argument_list pos:line="290" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="290" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="291" pos:column="49">int</name></type> <name pos:line="291" pos:column="53">offerID</name> <init pos:line="291" pos:column="61">= <expr><call><name><name pos:line="291" pos:column="63">rs</name><op:operator pos:line="291" pos:column="65">.</op:operator><name pos:line="291" pos:column="66">getInt</name></name><argument_list pos:line="291" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="291" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="292" pos:column="49">CourseOffered</name></type> <name pos:line="292" pos:column="63">co</name> <init pos:line="292" pos:column="66">= <expr><op:operator pos:line="292" pos:column="68">new</op:operator> <call><name pos:line="292" pos:column="72">CourseOffered</name><argument_list pos:line="292" pos:column="85">(<argument><expr><name pos:line="292" pos:column="86">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="294" pos:column="49">DBAnnotation</name><op:operator pos:line="294" pos:column="61">.</op:operator><name pos:line="294" pos:column="62">annoate</name></name><argument_list pos:line="294" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="294" pos:column="70">"deptName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="294" pos:column="82">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="294" pos:column="96">"DepartmentName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="294" pos:column="114">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="295" pos:column="49">String</name></type> <name pos:line="295" pos:column="56">deptName</name> <init pos:line="295" pos:column="65">= <expr><call><name><name pos:line="295" pos:column="67">co</name><op:operator pos:line="295" pos:column="69">.</op:operator><name pos:line="295" pos:column="70">getDepartmentName</name></name><argument_list pos:line="295" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="296" pos:column="49">if<condition pos:line="296" pos:column="51">(<expr><call><name><name pos:line="296" pos:column="52">deptName</name><op:operator pos:line="296" pos:column="60">.</op:operator><name pos:line="296" pos:column="61">equals</name></name><argument_list pos:line="296" pos:column="67">(<argument><expr><name pos:line="296" pos:column="68">departmentName</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="296" pos:column="84">{
							<expr_stmt><expr><call><name><name pos:line="297" pos:column="57">courseSchedule</name><op:operator pos:line="297" pos:column="71">.</op:operator><name pos:line="297" pos:column="72">add</name></name><argument_list pos:line="297" pos:column="75">(<argument><expr><op:operator pos:line="297" pos:column="76">new</op:operator> <call><name pos:line="297" pos:column="80">CourseSchedule</name><argument_list pos:line="297" pos:column="94">(<argument><expr><name pos:line="297" pos:column="95">offerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="304" pos:column="25">catch<parameter_list pos:line="304" pos:column="30">(<param><decl><type><name pos:line="304" pos:column="31">SQLException</name></type> <name pos:line="304" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="304" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="305" pos:column="33">System</name><op:operator pos:line="305" pos:column="39">.</op:operator><name pos:line="305" pos:column="40">out</name><op:operator pos:line="305" pos:column="43">.</op:operator><name pos:line="305" pos:column="44">println</name></name><argument_list pos:line="305" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="52">"Error getting schedule for department"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="306" pos:column="33">System</name><op:operator pos:line="306" pos:column="39">.</op:operator><name pos:line="306" pos:column="40">out</name><op:operator pos:line="306" pos:column="43">.</op:operator><name pos:line="306" pos:column="44">println</name></name><argument_list pos:line="306" pos:column="51">(<argument><expr><call><name><name pos:line="306" pos:column="52">e</name><op:operator pos:line="306" pos:column="53">.</op:operator><name pos:line="306" pos:column="54">getMessage</name></name><argument_list pos:line="306" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="307" pos:column="27">catch <parameter_list pos:line="307" pos:column="33">(<param><decl><type><name><name pos:line="307" pos:column="34">Course</name><op:operator pos:line="307" pos:column="40">.</op:operator><name pos:line="307" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="307" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="307" pos:column="72">{
				<comment type="line" pos:line="308" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="309" pos:column="33">e</name><op:operator pos:line="309" pos:column="34">.</op:operator><name pos:line="309" pos:column="35">printStackTrace</name></name><argument_list pos:line="309" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="310" pos:column="27">catch <parameter_list pos:line="310" pos:column="33">(<param><decl><type><name><name pos:line="310" pos:column="34">CourseOffered</name><op:operator pos:line="310" pos:column="47">.</op:operator><name pos:line="310" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="310" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="310" pos:column="87">{
				<comment type="line" pos:line="311" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="312" pos:column="33">e</name><op:operator pos:line="312" pos:column="34">.</op:operator><name pos:line="312" pos:column="35">printStackTrace</name></name><argument_list pos:line="312" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="317" pos:column="17">finally<block pos:line="317" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="320" pos:column="17">return <expr><name pos:line="320" pos:column="24">courseSchedule</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="323" pos:column="9">/*
	 * Schedule the passed courseOffered course
	 * The algorithm looks for a classroom with a empty time slot and schedules the course
	 * If no class room is found, it will return false, indicating the course was not scheduled
	 * Else it will schedule the course offering in the first empty classroom found
	 */</comment>
	<function><type><specifier pos:line="329" pos:column="9">public</specifier> <specifier pos:line="329" pos:column="16">static</specifier> <name pos:line="329" pos:column="23">boolean</name></type> <name pos:line="329" pos:column="31">scheduleCourse</name><parameter_list pos:line="329" pos:column="45">(<param><decl><type><name pos:line="329" pos:column="46">CourseOffered</name></type> <name pos:line="329" pos:column="60">courseOffered</name></decl></param>)</parameter_list><block pos:line="329" pos:column="74">{
		<comment type="line" pos:line="330" pos:column="17">//Check if the course is already scheduled</comment>
		<expr_stmt><expr><call><name><name pos:line="331" pos:column="17">System</name><op:operator pos:line="331" pos:column="23">.</op:operator><name pos:line="331" pos:column="24">out</name><op:operator pos:line="331" pos:column="27">.</op:operator><name pos:line="331" pos:column="28">println</name></name><argument_list pos:line="331" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="331" pos:column="36">"xxxxxxxxxxxxxxxxINSIDE SCHEDULE COURSE FUNCTIONxxxxxxxxxxxxxx"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="332" pos:column="17">Classroom</name></type> <name pos:line="332" pos:column="27">c</name> <init pos:line="332" pos:column="29">= <expr><lit:literal type="null" pos:line="332" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="333" pos:column="17">Timeslots</name></type> <name pos:line="333" pos:column="27">t</name> <init pos:line="333" pos:column="29">= <expr><lit:literal type="null" pos:line="333" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="334" pos:column="17">int</name></type> <name pos:line="334" pos:column="21">timeSlotType</name> <init pos:line="334" pos:column="34">= <expr><lit:literal type="number" pos:line="334" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="335" pos:column="17">boolean</name></type> <name pos:line="335" pos:column="25">isScheduled</name> <init pos:line="335" pos:column="37">= <expr><lit:literal type="boolean" pos:line="335" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="337" pos:column="17">if<condition pos:line="337" pos:column="19">(<expr><call><name pos:line="337" pos:column="20">isScheduled</name><argument_list pos:line="337" pos:column="31">(<argument><expr><call><name><name pos:line="337" pos:column="32">courseOffered</name><op:operator pos:line="337" pos:column="45">.</op:operator><name pos:line="337" pos:column="46">getOfferID</name></name><argument_list pos:line="337" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="337" pos:column="60">{
			<expr_stmt><expr><call><name><name pos:line="338" pos:column="25">System</name><op:operator pos:line="338" pos:column="31">.</op:operator><name pos:line="338" pos:column="32">out</name><op:operator pos:line="338" pos:column="35">.</op:operator><name pos:line="338" pos:column="36">println</name></name><argument_list pos:line="338" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="338" pos:column="44">"Course is already scheduled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="339" pos:column="25">return <expr><name pos:line="339" pos:column="32">isScheduled</name></expr>;</return>
		}</block></then></if>
		
		<comment type="line" pos:line="342" pos:column="17">//Find a classroom with empty slot</comment>
		<label><name pos:line="343" pos:column="17">classroomFind</name>:</label><while pos:line="343" pos:column="31">while<condition pos:line="343" pos:column="36">(<expr><name pos:line="343" pos:column="37">timeSlotType</name><op:operator pos:line="343" pos:column="49">&lt;=</op:operator><lit:literal type="number" pos:line="343" pos:column="51">2</lit:literal></expr>)</condition><block pos:line="343" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="344" pos:column="25">System</name><op:operator pos:line="344" pos:column="31">.</op:operator><name pos:line="344" pos:column="32">out</name><op:operator pos:line="344" pos:column="35">.</op:operator><name pos:line="344" pos:column="36">println</name></name><argument_list pos:line="344" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="44">"--------------------------------------------------------------"</lit:literal>
					<op:operator pos:line="345" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="345" pos:column="43">"\n LOOKING FOR TIMESLOTS WITH TYPE:"</lit:literal><op:operator pos:line="345" pos:column="80">+</op:operator><name pos:line="345" pos:column="81">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<for pos:line="347" pos:column="25">for(<init><decl><type><name pos:line="347" pos:column="29">ClassroomLocation</name></type> <name pos:line="347" pos:column="47">location</name><range pos:line="347" pos:column="55">:<expr><call><name><name pos:line="347" pos:column="56">ClassroomLocation</name><op:operator pos:line="347" pos:column="73">.</op:operator><name pos:line="347" pos:column="74">values</name></name><argument_list pos:line="347" pos:column="80">()</argument_list></call></expr></range></decl></init>)<block pos:line="347" pos:column="83">{
				<expr_stmt><expr><call><name><name pos:line="348" pos:column="33">System</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">out</name><op:operator pos:line="348" pos:column="43">.</op:operator><name pos:line="348" pos:column="44">println</name></name><argument_list pos:line="348" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="52">"-----------------------------------------------------------"</lit:literal>
						<op:operator pos:line="349" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="349" pos:column="51">"\n LOOKING AT LOCATION:"</lit:literal><op:operator pos:line="349" pos:column="76">+</op:operator><call><name><name pos:line="349" pos:column="77">location</name><op:operator pos:line="349" pos:column="85">.</op:operator><name pos:line="349" pos:column="86">toString</name></name><argument_list pos:line="349" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><name pos:line="351" pos:column="33">c</name> <op:operator pos:line="351" pos:column="35">=</op:operator> <call><name><name pos:line="351" pos:column="37">Classroom</name><op:operator pos:line="351" pos:column="46">.</op:operator><name pos:line="351" pos:column="47">getEmptyClassroom</name></name><argument_list pos:line="351" pos:column="64">(<argument><expr><name pos:line="351" pos:column="65">location</name></expr></argument>, <argument><expr><name pos:line="351" pos:column="75">timeSlotType</name></expr></argument>, <argument><expr><call><name><name pos:line="351" pos:column="89">courseOffered</name><op:operator pos:line="351" pos:column="102">.</op:operator><name pos:line="351" pos:column="103">getTotalCapacity</name></name><argument_list pos:line="351" pos:column="119">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="352" pos:column="33">//System.out.println("Got classroom:"+c.getClassroomName().toString()+" at location:"+location.toString()+" repeat:"+c.getClassroomLocation().toString());</comment>
				<if pos:line="353" pos:column="33">if<condition pos:line="353" pos:column="35">(<expr><name pos:line="353" pos:column="36">c</name><op:operator pos:line="353" pos:column="37">!=</op:operator><lit:literal type="null" pos:line="353" pos:column="39">null</lit:literal></expr>)</condition><then><block pos:line="353" pos:column="44">{
					<expr_stmt><expr><call><name><name pos:line="354" pos:column="41">System</name><op:operator pos:line="354" pos:column="47">.</op:operator><name pos:line="354" pos:column="48">out</name><op:operator pos:line="354" pos:column="51">.</op:operator><name pos:line="354" pos:column="52">println</name></name><argument_list pos:line="354" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="354" pos:column="60">"Returning classroom:"</lit:literal><op:operator pos:line="354" pos:column="82">+</op:operator><call><name><name pos:line="354" pos:column="83">c</name><op:operator pos:line="354" pos:column="84">.</op:operator><name pos:line="354" pos:column="85">getClassroomName</name></name><argument_list pos:line="354" pos:column="101">()</argument_list></call><op:operator pos:line="354" pos:column="103">.</op:operator><call><name pos:line="354" pos:column="104">toString</name><argument_list pos:line="354" pos:column="112">()</argument_list></call><op:operator pos:line="354" pos:column="114">+</op:operator><lit:literal type="string" pos:line="354" pos:column="115">" at location:"</lit:literal><op:operator pos:line="354" pos:column="130">+</op:operator><call><name><name pos:line="354" pos:column="131">location</name><op:operator pos:line="354" pos:column="139">.</op:operator><name pos:line="354" pos:column="140">toString</name></name><argument_list pos:line="354" pos:column="148">()</argument_list></call><op:operator pos:line="354" pos:column="150">+</op:operator><lit:literal type="string" pos:line="354" pos:column="151">" repeat:"</lit:literal><op:operator pos:line="354" pos:column="161">+</op:operator><call><name><name pos:line="354" pos:column="162">c</name><op:operator pos:line="354" pos:column="163">.</op:operator><name pos:line="354" pos:column="164">getClassroomLocation</name></name><argument_list pos:line="354" pos:column="184">()</argument_list></call><op:operator pos:line="354" pos:column="186">.</op:operator><call><name pos:line="354" pos:column="187">toString</name><argument_list pos:line="354" pos:column="195">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="355" pos:column="41">break classroomFind;</break>
				}</block></then></if>
			}</block></for>
			
			<expr_stmt><expr><name pos:line="359" pos:column="25">timeSlotType</name><op:operator pos:line="359" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		
		<if pos:line="362" pos:column="17">if<condition pos:line="362" pos:column="19">(<expr><name pos:line="362" pos:column="20">c</name><op:operator pos:line="362" pos:column="21">==</op:operator><lit:literal type="null" pos:line="362" pos:column="23">null</lit:literal></expr>)</condition><then><block pos:line="362" pos:column="28">{
			<expr_stmt><expr><call><name><name pos:line="363" pos:column="25">System</name><op:operator pos:line="363" pos:column="31">.</op:operator><name pos:line="363" pos:column="32">out</name><op:operator pos:line="363" pos:column="35">.</op:operator><name pos:line="363" pos:column="36">println</name></name><argument_list pos:line="363" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="363" pos:column="44">"Cannot schedule this course, no empty class found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="364" pos:column="25">return <expr><name pos:line="364" pos:column="32">isScheduled</name></expr>;</return>
		}</block></then></if>
		
		<if pos:line="367" pos:column="17">if<condition pos:line="367" pos:column="19">(<expr><name pos:line="367" pos:column="20">c</name><op:operator pos:line="367" pos:column="21">!=</op:operator><lit:literal type="null" pos:line="367" pos:column="23">null</lit:literal></expr>)</condition><then><block pos:line="367" pos:column="28">{
			<expr_stmt><expr><name pos:line="368" pos:column="25">t</name> <op:operator pos:line="368" pos:column="27">=</op:operator> <call><name><name pos:line="368" pos:column="29">c</name><op:operator pos:line="368" pos:column="30">.</op:operator><name pos:line="368" pos:column="31">getEmptySlot</name></name><argument_list pos:line="368" pos:column="43">(<argument><expr><name pos:line="368" pos:column="44">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
			<comment type="line" pos:line="369" pos:column="25">//Schedule the course in the empty slot</comment>
			<decl_stmt><decl><type><name pos:line="370" pos:column="25">int</name></type> <name pos:line="370" pos:column="29">offerID</name> <init pos:line="370" pos:column="37">= <expr><call><name><name pos:line="370" pos:column="39">courseOffered</name><op:operator pos:line="370" pos:column="52">.</op:operator><name pos:line="370" pos:column="53">getOfferID</name></name><argument_list pos:line="370" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="371" pos:column="25">int</name></type> <name pos:line="371" pos:column="29">classroomID</name> <init pos:line="371" pos:column="41">= <expr><call><name><name pos:line="371" pos:column="43">c</name><op:operator pos:line="371" pos:column="44">.</op:operator><name pos:line="371" pos:column="45">getClassroomID</name></name><argument_list pos:line="371" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="372" pos:column="25">int</name></type> <name pos:line="372" pos:column="29">timeslotID</name> <init pos:line="372" pos:column="40">= <expr><call><name><name pos:line="372" pos:column="42">t</name><op:operator pos:line="372" pos:column="43">.</op:operator><name pos:line="372" pos:column="44">getTimeSlotID</name></name><argument_list pos:line="372" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="373" pos:column="25">isScheduled</name> <op:operator pos:line="373" pos:column="37">=</op:operator> <call><name pos:line="373" pos:column="39">addSchedule</name><argument_list pos:line="373" pos:column="50">(<argument><expr><name pos:line="373" pos:column="51">offerID</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="60">classroomID</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="73">timeslotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<return pos:line="376" pos:column="17">return <expr><name pos:line="376" pos:column="24">isScheduled</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="379" pos:column="9">/*
	 * Similar to above function only input parameters are different
	 */</comment>
	<function><type><specifier pos:line="382" pos:column="9">public</specifier> <specifier pos:line="382" pos:column="16">static</specifier> <name pos:line="382" pos:column="23">boolean</name></type> <name pos:line="382" pos:column="31">scheduleCourseUsingID</name><parameter_list pos:line="382" pos:column="52">(<param><decl><type><name pos:line="382" pos:column="53">int</name></type> <name pos:line="382" pos:column="57">offerID</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="66">int</name></type> <name pos:line="382" pos:column="70">capacity</name></decl></param>)</parameter_list><block pos:line="382" pos:column="79">{
		<decl_stmt><decl><type><name pos:line="383" pos:column="17">Classroom</name></type> <name pos:line="383" pos:column="27">c</name> <init pos:line="383" pos:column="29">= <expr><lit:literal type="null" pos:line="383" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="384" pos:column="17">Timeslots</name></type> <name pos:line="384" pos:column="27">t</name> <init pos:line="384" pos:column="29">= <expr><lit:literal type="null" pos:line="384" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="385" pos:column="17">int</name></type> <name pos:line="385" pos:column="21">timeSlotType</name> <init pos:line="385" pos:column="34">= <expr><lit:literal type="number" pos:line="385" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="386" pos:column="17">boolean</name></type> <name pos:line="386" pos:column="25">addFlag</name> <init pos:line="386" pos:column="33">= <expr><lit:literal type="boolean" pos:line="386" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="388" pos:column="17">if<condition pos:line="388" pos:column="19">(<expr><call><name pos:line="388" pos:column="20">isScheduled</name><argument_list pos:line="388" pos:column="31">(<argument><expr><name pos:line="388" pos:column="32">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="388" pos:column="41">{
			<expr_stmt><expr><call><name><name pos:line="389" pos:column="25">System</name><op:operator pos:line="389" pos:column="31">.</op:operator><name pos:line="389" pos:column="32">out</name><op:operator pos:line="389" pos:column="35">.</op:operator><name pos:line="389" pos:column="36">println</name></name><argument_list pos:line="389" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="389" pos:column="44">"Course is already scheduled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="390" pos:column="25">return <expr><lit:literal type="boolean" pos:line="390" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<comment type="line" pos:line="393" pos:column="17">//Find a classroom with empty slot</comment>
		<label><name pos:line="394" pos:column="17">classroomFind</name>:</label><while pos:line="394" pos:column="31">while<condition pos:line="394" pos:column="36">(<expr><name pos:line="394" pos:column="37">timeSlotType</name><op:operator pos:line="394" pos:column="49">&lt;=</op:operator><lit:literal type="number" pos:line="394" pos:column="51">2</lit:literal></expr>)</condition><block pos:line="394" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="395" pos:column="25">System</name><op:operator pos:line="395" pos:column="31">.</op:operator><name pos:line="395" pos:column="32">out</name><op:operator pos:line="395" pos:column="35">.</op:operator><name pos:line="395" pos:column="36">println</name></name><argument_list pos:line="395" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="395" pos:column="44">"--------------------------------------------------------------"</lit:literal>
					<op:operator pos:line="396" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="396" pos:column="43">"\n LOOKING FOR TIMESLOTS WITH TYPE:"</lit:literal><op:operator pos:line="396" pos:column="80">+</op:operator><name pos:line="396" pos:column="81">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<for pos:line="398" pos:column="25">for(<init><decl><type><name pos:line="398" pos:column="29">ClassroomLocation</name></type> <name pos:line="398" pos:column="47">location</name><range pos:line="398" pos:column="55">:<expr><call><name><name pos:line="398" pos:column="56">ClassroomLocation</name><op:operator pos:line="398" pos:column="73">.</op:operator><name pos:line="398" pos:column="74">values</name></name><argument_list pos:line="398" pos:column="80">()</argument_list></call></expr></range></decl></init>)<block pos:line="398" pos:column="83">{
				<expr_stmt><expr><call><name><name pos:line="399" pos:column="33">System</name><op:operator pos:line="399" pos:column="39">.</op:operator><name pos:line="399" pos:column="40">out</name><op:operator pos:line="399" pos:column="43">.</op:operator><name pos:line="399" pos:column="44">println</name></name><argument_list pos:line="399" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="399" pos:column="52">"-----------------------------------------------------------"</lit:literal>
						<op:operator pos:line="400" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="400" pos:column="51">"\n LOOKING AT LOCATION:"</lit:literal><op:operator pos:line="400" pos:column="76">+</op:operator><call><name><name pos:line="400" pos:column="77">location</name><op:operator pos:line="400" pos:column="85">.</op:operator><name pos:line="400" pos:column="86">toString</name></name><argument_list pos:line="400" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><name pos:line="402" pos:column="33">c</name> <op:operator pos:line="402" pos:column="35">=</op:operator> <call><name><name pos:line="402" pos:column="37">Classroom</name><op:operator pos:line="402" pos:column="46">.</op:operator><name pos:line="402" pos:column="47">getEmptyClassroom</name></name><argument_list pos:line="402" pos:column="64">(<argument><expr><name pos:line="402" pos:column="65">location</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="75">timeSlotType</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="89">capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="403" pos:column="33">//System.out.println("Got classroom:"+c.getClassroomName().toString()+" at location:"+location.toString()+" repeat:"+c.getClassroomLocation().toString());</comment>
				<if pos:line="404" pos:column="33">if<condition pos:line="404" pos:column="35">(<expr><name pos:line="404" pos:column="36">c</name><op:operator pos:line="404" pos:column="37">!=</op:operator><lit:literal type="null" pos:line="404" pos:column="39">null</lit:literal></expr>)</condition><then><block pos:line="404" pos:column="44">{
					<expr_stmt><expr><call><name><name pos:line="405" pos:column="41">System</name><op:operator pos:line="405" pos:column="47">.</op:operator><name pos:line="405" pos:column="48">out</name><op:operator pos:line="405" pos:column="51">.</op:operator><name pos:line="405" pos:column="52">println</name></name><argument_list pos:line="405" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="405" pos:column="60">"Returning classroom:"</lit:literal><op:operator pos:line="405" pos:column="82">+</op:operator><call><name><name pos:line="405" pos:column="83">c</name><op:operator pos:line="405" pos:column="84">.</op:operator><name pos:line="405" pos:column="85">getClassroomName</name></name><argument_list pos:line="405" pos:column="101">()</argument_list></call><op:operator pos:line="405" pos:column="103">.</op:operator><call><name pos:line="405" pos:column="104">toString</name><argument_list pos:line="405" pos:column="112">()</argument_list></call><op:operator pos:line="405" pos:column="114">+</op:operator><lit:literal type="string" pos:line="405" pos:column="115">" at location:"</lit:literal><op:operator pos:line="405" pos:column="130">+</op:operator><call><name><name pos:line="405" pos:column="131">location</name><op:operator pos:line="405" pos:column="139">.</op:operator><name pos:line="405" pos:column="140">toString</name></name><argument_list pos:line="405" pos:column="148">()</argument_list></call><op:operator pos:line="405" pos:column="150">+</op:operator><lit:literal type="string" pos:line="405" pos:column="151">" repeat:"</lit:literal><op:operator pos:line="405" pos:column="161">+</op:operator><call><name><name pos:line="405" pos:column="162">c</name><op:operator pos:line="405" pos:column="163">.</op:operator><name pos:line="405" pos:column="164">getClassroomLocation</name></name><argument_list pos:line="405" pos:column="184">()</argument_list></call><op:operator pos:line="405" pos:column="186">.</op:operator><call><name pos:line="405" pos:column="187">toString</name><argument_list pos:line="405" pos:column="195">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="406" pos:column="41">break classroomFind;</break>
				}</block></then></if>
			}</block></for>
			
			<expr_stmt><expr><name pos:line="410" pos:column="25">timeSlotType</name><op:operator pos:line="410" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		
		<if pos:line="413" pos:column="17">if<condition pos:line="413" pos:column="19">(<expr><name pos:line="413" pos:column="20">c</name><op:operator pos:line="413" pos:column="21">==</op:operator><lit:literal type="null" pos:line="413" pos:column="23">null</lit:literal></expr>)</condition><then><block pos:line="413" pos:column="28">{
			<expr_stmt><expr><call><name><name pos:line="414" pos:column="25">System</name><op:operator pos:line="414" pos:column="31">.</op:operator><name pos:line="414" pos:column="32">out</name><op:operator pos:line="414" pos:column="35">.</op:operator><name pos:line="414" pos:column="36">println</name></name><argument_list pos:line="414" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="44">"Cannot schedule this course, no empty classroom found"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="415" pos:column="25">return <expr><lit:literal type="boolean" pos:line="415" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		<if pos:line="417" pos:column="17">if<condition pos:line="417" pos:column="19">(<expr><name pos:line="417" pos:column="20">c</name><op:operator pos:line="417" pos:column="21">!=</op:operator><lit:literal type="null" pos:line="417" pos:column="23">null</lit:literal></expr>)</condition><then><block pos:line="417" pos:column="28">{
			<expr_stmt><expr><name pos:line="418" pos:column="25">t</name> <op:operator pos:line="418" pos:column="27">=</op:operator> <call><name><name pos:line="418" pos:column="29">c</name><op:operator pos:line="418" pos:column="30">.</op:operator><name pos:line="418" pos:column="31">getEmptySlot</name></name><argument_list pos:line="418" pos:column="43">(<argument><expr><name pos:line="418" pos:column="44">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
			<comment type="line" pos:line="419" pos:column="25">//Schedule the course in the empty slot</comment>
			<decl_stmt><decl><type><name pos:line="420" pos:column="25">int</name></type> <name pos:line="420" pos:column="29">classroomID</name> <init pos:line="420" pos:column="41">= <expr><call><name><name pos:line="420" pos:column="43">c</name><op:operator pos:line="420" pos:column="44">.</op:operator><name pos:line="420" pos:column="45">getClassroomID</name></name><argument_list pos:line="420" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="421" pos:column="25">int</name></type> <name pos:line="421" pos:column="29">timeslotID</name> <init pos:line="421" pos:column="40">= <expr><call><name><name pos:line="421" pos:column="42">t</name><op:operator pos:line="421" pos:column="43">.</op:operator><name pos:line="421" pos:column="44">getTimeSlotID</name></name><argument_list pos:line="421" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="422" pos:column="25">addFlag</name> <op:operator pos:line="422" pos:column="33">=</op:operator> <call><name pos:line="422" pos:column="35">addSchedule</name><argument_list pos:line="422" pos:column="46">(<argument><expr><name pos:line="422" pos:column="47">offerID</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="56">classroomID</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="69">timeslotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<return pos:line="425" pos:column="17">return <expr><name pos:line="425" pos:column="24">addFlag</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="428" pos:column="9">/*
	 * Checks if the course offering is scheduled or not	
	 */</comment>
	<function><type><specifier pos:line="431" pos:column="9">public</specifier> <specifier pos:line="431" pos:column="16">static</specifier> <name pos:line="431" pos:column="23">boolean</name></type> <name pos:line="431" pos:column="31">isScheduled</name><parameter_list pos:line="431" pos:column="42">(<param><decl><type><name pos:line="431" pos:column="43">int</name></type> <name pos:line="431" pos:column="47">offerID</name></decl></param>)</parameter_list><block pos:line="431" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="432" pos:column="17">boolean</name></type> <name pos:line="432" pos:column="25">isScheduled</name> <init pos:line="432" pos:column="37">= <expr><lit:literal type="boolean" pos:line="432" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="433" pos:column="17">try<block pos:line="433" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="434" pos:column="25">Connection</name></type> <name pos:line="434" pos:column="36">conn</name> <init pos:line="434" pos:column="41">= <expr><call><name><name pos:line="434" pos:column="43">Database</name><op:operator pos:line="434" pos:column="51">.</op:operator><name pos:line="434" pos:column="52">getConnection</name></name><argument_list pos:line="434" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="436" pos:column="25">try<block pos:line="436" pos:column="28">{
				<if pos:line="437" pos:column="33">if<condition pos:line="437" pos:column="35">(<expr><name pos:line="437" pos:column="36">conn</name> <op:operator pos:line="437" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="437" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="437" pos:column="49">{
					
					<comment type="line" pos:line="439" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="440" pos:column="41">String</name></type> <name pos:line="440" pos:column="48">SQLSelect</name> <init pos:line="440" pos:column="58">= <expr><lit:literal type="string" pos:line="440" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="441" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="441" pos:column="59">" FROM courseschedule"</lit:literal>
							<op:operator pos:line="442" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="442" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="443" pos:column="41">PreparedStatement</name></type> <name pos:line="443" pos:column="59">statement</name> <init pos:line="443" pos:column="69">= <expr><call><name><name pos:line="443" pos:column="71">conn</name><op:operator pos:line="443" pos:column="75">.</op:operator><name pos:line="443" pos:column="76">prepareStatement</name></name><argument_list pos:line="443" pos:column="92">(<argument><expr><name pos:line="443" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="444" pos:column="41">statement</name><op:operator pos:line="444" pos:column="50">.</op:operator><name pos:line="444" pos:column="51">setInt</name></name><argument_list pos:line="444" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="444" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="444" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="445" pos:column="41">ResultSet</name></type> <name pos:line="445" pos:column="51">rs</name> <init pos:line="445" pos:column="54">= <expr><call><name><name pos:line="445" pos:column="56">statement</name><op:operator pos:line="445" pos:column="65">.</op:operator><name pos:line="445" pos:column="66">executeQuery</name></name><argument_list pos:line="445" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="447" pos:column="41">if<condition pos:line="447" pos:column="43">(<expr><call><name><name pos:line="447" pos:column="44">rs</name><op:operator pos:line="447" pos:column="46">.</op:operator><name pos:line="447" pos:column="47">first</name></name><argument_list pos:line="447" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="447" pos:column="55">{
						<expr_stmt><expr><name pos:line="448" pos:column="49">isScheduled</name> <op:operator pos:line="448" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="448" pos:column="63">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="449" pos:column="49">System</name><op:operator pos:line="449" pos:column="55">.</op:operator><name pos:line="449" pos:column="56">out</name><op:operator pos:line="449" pos:column="59">.</op:operator><name pos:line="449" pos:column="60">println</name></name><argument_list pos:line="449" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="449" pos:column="68">"Course with offerID:"</lit:literal><op:operator pos:line="449" pos:column="90">+</op:operator><name pos:line="449" pos:column="91">offerID</name><op:operator pos:line="449" pos:column="98">+</op:operator><lit:literal type="string" pos:line="449" pos:column="99">" is already scheduled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="452" pos:column="41">else<block pos:line="452" pos:column="45">{
						<expr_stmt><expr><name pos:line="453" pos:column="49">isScheduled</name> <op:operator pos:line="453" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="63">false</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="454" pos:column="49">System</name><op:operator pos:line="454" pos:column="55">.</op:operator><name pos:line="454" pos:column="56">out</name><op:operator pos:line="454" pos:column="59">.</op:operator><name pos:line="454" pos:column="60">println</name></name><argument_list pos:line="454" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="68">"Course with offerID:"</lit:literal><op:operator pos:line="454" pos:column="90">+</op:operator><name pos:line="454" pos:column="91">offerID</name><op:operator pos:line="454" pos:column="98">+</op:operator><lit:literal type="string" pos:line="454" pos:column="99">" is NOT scheduled"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="461" pos:column="25">catch<parameter_list pos:line="461" pos:column="30">(<param><decl><type><name pos:line="461" pos:column="31">SQLException</name></type> <name pos:line="461" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="461" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="462" pos:column="33">System</name><op:operator pos:line="462" pos:column="39">.</op:operator><name pos:line="462" pos:column="40">out</name><op:operator pos:line="462" pos:column="43">.</op:operator><name pos:line="462" pos:column="44">println</name></name><argument_list pos:line="462" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="462" pos:column="52">"Error retreiving schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="463" pos:column="33">System</name><op:operator pos:line="463" pos:column="39">.</op:operator><name pos:line="463" pos:column="40">out</name><op:operator pos:line="463" pos:column="43">.</op:operator><name pos:line="463" pos:column="44">println</name></name><argument_list pos:line="463" pos:column="51">(<argument><expr><call><name><name pos:line="463" pos:column="52">e</name><op:operator pos:line="463" pos:column="53">.</op:operator><name pos:line="463" pos:column="54">getMessage</name></name><argument_list pos:line="463" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="464" pos:column="33">e</name><op:operator pos:line="464" pos:column="34">.</op:operator><name pos:line="464" pos:column="35">printStackTrace</name></name><argument_list pos:line="464" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="469" pos:column="17">finally<block pos:line="469" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="472" pos:column="17">return <expr><name pos:line="472" pos:column="24">isScheduled</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="475" pos:column="9">/*
	 * This function is called by the earlier functions to schedule the coure offering
	 */</comment>
	<function><type><specifier pos:line="478" pos:column="9">private</specifier> <specifier pos:line="478" pos:column="17">static</specifier> <name pos:line="478" pos:column="24">boolean</name></type> <name pos:line="478" pos:column="32">addSchedule</name><parameter_list pos:line="478" pos:column="43">(<param><decl><type><name pos:line="478" pos:column="44">int</name></type> <name pos:line="478" pos:column="48">offerID</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="57">int</name></type> <name pos:line="478" pos:column="61">classroomID</name></decl></param>, <param><decl><type><name pos:line="478" pos:column="74">int</name></type> <name pos:line="478" pos:column="78">timeslotID</name></decl></param>)</parameter_list><block pos:line="478" pos:column="89">{
		<decl_stmt><decl><type><name pos:line="479" pos:column="17">boolean</name></type> <name pos:line="479" pos:column="25">addFlag</name> <init pos:line="479" pos:column="33">= <expr><lit:literal type="boolean" pos:line="479" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="481" pos:column="17">try<block pos:line="481" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="482" pos:column="25">Connection</name></type> <name pos:line="482" pos:column="36">conn</name> <init pos:line="482" pos:column="41">= <expr><call><name><name pos:line="482" pos:column="43">Database</name><op:operator pos:line="482" pos:column="51">.</op:operator><name pos:line="482" pos:column="52">getConnection</name></name><argument_list pos:line="482" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="484" pos:column="25">try<block pos:line="484" pos:column="28">{
				<if pos:line="485" pos:column="33">if<condition pos:line="485" pos:column="35">(<expr><name pos:line="485" pos:column="36">conn</name> <op:operator pos:line="485" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="485" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="485" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="486" pos:column="41">DBAnnotation</name><op:operator pos:line="486" pos:column="53">.</op:operator><name pos:line="486" pos:column="54">annoate</name></name><argument_list pos:line="486" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="486" pos:column="62">"offID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="71">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="89">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="486" pos:column="100">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="487" pos:column="41">int</name></type> <name pos:line="487" pos:column="45">offID</name> <init pos:line="487" pos:column="51">= <expr><name pos:line="487" pos:column="53">offerID</name></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="489" pos:column="41">DBAnnotation</name><op:operator pos:line="489" pos:column="53">.</op:operator><name pos:line="489" pos:column="54">annoate</name></name><argument_list pos:line="489" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="489" pos:column="62">"classID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="73">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="91">"ClassroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="489" pos:column="106">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="490" pos:column="41">int</name></type> <name pos:line="490" pos:column="45">classID</name> <init pos:line="490" pos:column="53">= <expr><name pos:line="490" pos:column="55">classroomID</name></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="492" pos:column="41">DBAnnotation</name><op:operator pos:line="492" pos:column="53">.</op:operator><name pos:line="492" pos:column="54">annoate</name></name><argument_list pos:line="492" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="492" pos:column="62">"timeID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="72">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="90">"TimeslotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="492" pos:column="104">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="493" pos:column="41">int</name></type> <name pos:line="493" pos:column="45">timeID</name> <init pos:line="493" pos:column="52">= <expr><name pos:line="493" pos:column="54">timeslotID</name></expr></init></decl>;</decl_stmt>
					
					<decl_stmt><decl><type><name pos:line="495" pos:column="41">String</name></type> <name pos:line="495" pos:column="48">scheduleInsert</name> <init pos:line="495" pos:column="63">= <expr><lit:literal type="string" pos:line="495" pos:column="65">"Insert into courseschedule"</lit:literal>
							<op:operator pos:line="496" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="496" pos:column="59">" (OfferID, TimeSlotID, ClassroomID)"</lit:literal>
							<op:operator pos:line="497" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="497" pos:column="59">" Values(?,?,?)"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="498" pos:column="41">PreparedStatement</name></type> <name pos:line="498" pos:column="59">statement</name> <init pos:line="498" pos:column="69">= <expr><call><name><name pos:line="498" pos:column="71">conn</name><op:operator pos:line="498" pos:column="75">.</op:operator><name pos:line="498" pos:column="76">prepareStatement</name></name><argument_list pos:line="498" pos:column="92">(<argument><expr><name pos:line="498" pos:column="93">scheduleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="499" pos:column="41">statement</name><op:operator pos:line="499" pos:column="50">.</op:operator><name pos:line="499" pos:column="51">setInt</name></name><argument_list pos:line="499" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="499" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="499" pos:column="61">offID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="500" pos:column="41">statement</name><op:operator pos:line="500" pos:column="50">.</op:operator><name pos:line="500" pos:column="51">setInt</name></name><argument_list pos:line="500" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="500" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="500" pos:column="61">timeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="501" pos:column="41">statement</name><op:operator pos:line="501" pos:column="50">.</op:operator><name pos:line="501" pos:column="51">setInt</name></name><argument_list pos:line="501" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="501" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name pos:line="501" pos:column="61">classID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="502" pos:column="41">statement</name><op:operator pos:line="502" pos:column="50">.</op:operator><name pos:line="502" pos:column="51">executeUpdate</name></name><argument_list pos:line="502" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="503" pos:column="41">System</name><op:operator pos:line="503" pos:column="47">.</op:operator><name pos:line="503" pos:column="48">out</name><op:operator pos:line="503" pos:column="51">.</op:operator><name pos:line="503" pos:column="52">println</name></name><argument_list pos:line="503" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="503" pos:column="60">"Adding course schedule with offerID:"</lit:literal><op:operator pos:line="503" pos:column="98">+</op:operator><name pos:line="503" pos:column="99">offerID</name><op:operator pos:line="503" pos:column="106">+</op:operator><lit:literal type="string" pos:line="503" pos:column="107">" ClassroomID:"</lit:literal><op:operator pos:line="503" pos:column="122">+</op:operator><name pos:line="503" pos:column="123">classroomID</name><op:operator pos:line="503" pos:column="134">+</op:operator><lit:literal type="string" pos:line="503" pos:column="135">" TimeslotID:"</lit:literal><op:operator pos:line="503" pos:column="149">+</op:operator><name pos:line="503" pos:column="150">timeslotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="504" pos:column="41">addFlag</name> <op:operator pos:line="504" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="504" pos:column="51">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch pos:line="508" pos:column="25">catch<parameter_list pos:line="508" pos:column="30">(<param><decl><type><name pos:line="508" pos:column="31">SQLException</name></type> <name pos:line="508" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="508" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="509" pos:column="33">System</name><op:operator pos:line="509" pos:column="39">.</op:operator><name pos:line="509" pos:column="40">out</name><op:operator pos:line="509" pos:column="43">.</op:operator><name pos:line="509" pos:column="44">println</name></name><argument_list pos:line="509" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="509" pos:column="52">"Error adding schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="510" pos:column="33">System</name><op:operator pos:line="510" pos:column="39">.</op:operator><name pos:line="510" pos:column="40">out</name><op:operator pos:line="510" pos:column="43">.</op:operator><name pos:line="510" pos:column="44">println</name></name><argument_list pos:line="510" pos:column="51">(<argument><expr><call><name><name pos:line="510" pos:column="52">e</name><op:operator pos:line="510" pos:column="53">.</op:operator><name pos:line="510" pos:column="54">getMessage</name></name><argument_list pos:line="510" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="511" pos:column="33">e</name><op:operator pos:line="511" pos:column="34">.</op:operator><name pos:line="511" pos:column="35">printStackTrace</name></name><argument_list pos:line="511" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="516" pos:column="17">finally<block pos:line="516" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="519" pos:column="17">return <expr><name pos:line="519" pos:column="24">addFlag</name></expr>;</return>
	}</block></function>
	
	
	<comment type="block" pos:line="523" pos:column="9">/*
	 * Schedules/reschedules all the current course offerings
	 */</comment>
	<function><type><specifier pos:line="526" pos:column="9">public</specifier> <specifier pos:line="526" pos:column="16">static</specifier> <name pos:line="526" pos:column="23">void</name></type> <name pos:line="526" pos:column="28">scheduleAllCurrentCourses</name><parameter_list pos:line="526" pos:column="53">()</parameter_list><block pos:line="526" pos:column="55">{
		<comment type="block" pos:line="527" pos:column="17">/*
		 * Remove all the scheduled courses
		 */</comment>
		<expr_stmt><expr><call><name pos:line="530" pos:column="17">deleteAllCourseSchedule</name><argument_list pos:line="530" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block" pos:line="532" pos:column="17">/*
		 * Get all the current course offerings
		 * Pick up one courseOffering at random
		 * Find a classroom and an empty time slot for the offering
		 * Schedule the courseOffering
		 * Repeat the steps with other offerings
		 */</comment>
		
		<decl_stmt><decl><type><name><name pos:line="540" pos:column="17">ArrayList</name><argument_list pos:line="540" pos:column="26">&lt;<argument><name pos:line="540" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="540" pos:column="42">allCourses</name> <init pos:line="540" pos:column="53">= <expr><call><name><name pos:line="540" pos:column="55">CourseOffered</name><op:operator pos:line="540" pos:column="68">.</op:operator><name pos:line="540" pos:column="69">getAllCurrentlyOfferedCourses</name></name><argument_list pos:line="540" pos:column="98">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="541" pos:column="17">Collections</name><op:operator pos:line="541" pos:column="28">.</op:operator><name pos:line="541" pos:column="29">shuffle</name></name><argument_list pos:line="541" pos:column="36">(<argument><expr><name pos:line="541" pos:column="37">allCourses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="542" pos:column="17">for(<init><decl><type><name pos:line="542" pos:column="21">CourseOffered</name></type> <name pos:line="542" pos:column="35">co</name><range pos:line="542" pos:column="37">:<expr><name pos:line="542" pos:column="38">allCourses</name></expr></range></decl></init>)<block pos:line="542" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="543" pos:column="25">System</name><op:operator pos:line="543" pos:column="31">.</op:operator><name pos:line="543" pos:column="32">out</name><op:operator pos:line="543" pos:column="35">.</op:operator><name pos:line="543" pos:column="36">println</name></name><argument_list pos:line="543" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="543" pos:column="44">"\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</lit:literal>
					<op:operator pos:line="544" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="544" pos:column="43">"\n--------------------------------------------------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name pos:line="546" pos:column="25">scheduleCourse</name><argument_list pos:line="546" pos:column="39">(<argument><expr><name pos:line="546" pos:column="40">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="548" pos:column="25">System</name><op:operator pos:line="548" pos:column="31">.</op:operator><name pos:line="548" pos:column="32">out</name><op:operator pos:line="548" pos:column="35">.</op:operator><name pos:line="548" pos:column="36">println</name></name><argument_list pos:line="548" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="548" pos:column="44">"\n\n\n-----------------------------------------------------------------------------------------------------------"</lit:literal>
					<op:operator pos:line="549" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="549" pos:column="43">"\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name pos:line="552" pos:column="17">Database</name><op:operator pos:line="552" pos:column="25">.</op:operator><name pos:line="552" pos:column="26">commitTransaction</name></name><argument_list pos:line="552" pos:column="43">(<argument><expr><call><name><name pos:line="552" pos:column="44">Database</name><op:operator pos:line="552" pos:column="52">.</op:operator><name pos:line="552" pos:column="53">getConnection</name></name><argument_list pos:line="552" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="block" pos:line="556" pos:column="9">/*
	 * Reschedule all the current course offerings for the specified department
	 */</comment>
	<function><type><specifier pos:line="559" pos:column="9">public</specifier> <specifier pos:line="559" pos:column="16">static</specifier> <name pos:line="559" pos:column="23">void</name></type> <name pos:line="559" pos:column="28">scheduleAllCurrentCourses</name><parameter_list pos:line="559" pos:column="53">(<param><decl><type><name pos:line="559" pos:column="54">Department</name></type> <name pos:line="559" pos:column="65">department</name></decl></param>)</parameter_list><block pos:line="559" pos:column="76">{
		<comment type="line" pos:line="560" pos:column="17">//Remove all the scheduled courses in the dept</comment>
		
		<expr_stmt><expr><call><name pos:line="562" pos:column="17">deleteAllCourseSchedule</name><argument_list pos:line="562" pos:column="40">(<argument><expr><name pos:line="562" pos:column="41">department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		
		<decl_stmt><decl><type><name><name pos:line="564" pos:column="17">ArrayList</name><argument_list pos:line="564" pos:column="26">&lt;<argument><name pos:line="564" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="564" pos:column="42">allCourses</name> <init pos:line="564" pos:column="53">= <expr><call><name><name pos:line="564" pos:column="55">department</name><op:operator pos:line="564" pos:column="65">.</op:operator><name pos:line="564" pos:column="66">getDepartmentCourseOffered</name></name><argument_list pos:line="564" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="565" pos:column="17">for(<init><decl><type><name pos:line="565" pos:column="21">CourseOffered</name></type> <name pos:line="565" pos:column="35">co</name><range pos:line="565" pos:column="37">:<expr><name pos:line="565" pos:column="38">allCourses</name></expr></range></decl></init>)<block pos:line="565" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="566" pos:column="25">System</name><op:operator pos:line="566" pos:column="31">.</op:operator><name pos:line="566" pos:column="32">out</name><op:operator pos:line="566" pos:column="35">.</op:operator><name pos:line="566" pos:column="36">println</name></name><argument_list pos:line="566" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="566" pos:column="44">"\n\n\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</lit:literal>
					<op:operator pos:line="567" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="567" pos:column="43">"\n--------------------------------------------------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name pos:line="569" pos:column="25">scheduleCourse</name><argument_list pos:line="569" pos:column="39">(<argument><expr><name pos:line="569" pos:column="40">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="571" pos:column="25">System</name><op:operator pos:line="571" pos:column="31">.</op:operator><name pos:line="571" pos:column="32">out</name><op:operator pos:line="571" pos:column="35">.</op:operator><name pos:line="571" pos:column="36">println</name></name><argument_list pos:line="571" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="571" pos:column="44">"\n\n\n-----------------------------------------------------------------------------------------------------------"</lit:literal>
					<op:operator pos:line="572" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="572" pos:column="43">"\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name><name pos:line="575" pos:column="17">Database</name><op:operator pos:line="575" pos:column="25">.</op:operator><name pos:line="575" pos:column="26">commitTransaction</name></name><argument_list pos:line="575" pos:column="43">(<argument><expr><call><name><name pos:line="575" pos:column="44">Database</name><op:operator pos:line="575" pos:column="52">.</op:operator><name pos:line="575" pos:column="53">getConnection</name></name><argument_list pos:line="575" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block" pos:line="578" pos:column="9">/*
	 * Deletes all the course schedule
	 */</comment>
	<function><type><specifier pos:line="581" pos:column="9">public</specifier> <specifier pos:line="581" pos:column="16">static</specifier> <name pos:line="581" pos:column="23">void</name></type> <name pos:line="581" pos:column="28">deleteAllCourseSchedule</name><parameter_list pos:line="581" pos:column="51">()</parameter_list><block pos:line="581" pos:column="53">{
		<try pos:line="582" pos:column="17">try<block pos:line="582" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="583" pos:column="25">Connection</name></type> <name pos:line="583" pos:column="36">conn</name> <init pos:line="583" pos:column="41">= <expr><call><name><name pos:line="583" pos:column="43">Database</name><op:operator pos:line="583" pos:column="51">.</op:operator><name pos:line="583" pos:column="52">getConnection</name></name><argument_list pos:line="583" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="585" pos:column="25">try<block pos:line="585" pos:column="28">{
				<if pos:line="586" pos:column="33">if<condition pos:line="586" pos:column="35">(<expr><name pos:line="586" pos:column="36">conn</name> <op:operator pos:line="586" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="586" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="586" pos:column="49">{
					
					<comment type="line" pos:line="588" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="589" pos:column="41">String</name></type> <name pos:line="589" pos:column="48">courseScheduleDelete</name> <init pos:line="589" pos:column="69">= <expr><lit:literal type="string" pos:line="589" pos:column="71">"Delete"</lit:literal>
							<op:operator pos:line="590" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="590" pos:column="59">" FROM courseschedule"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="591" pos:column="41">PreparedStatement</name></type> <name pos:line="591" pos:column="59">statement</name> <init pos:line="591" pos:column="69">= <expr><call><name><name pos:line="591" pos:column="71">conn</name><op:operator pos:line="591" pos:column="75">.</op:operator><name pos:line="591" pos:column="76">prepareStatement</name></name><argument_list pos:line="591" pos:column="92">(<argument><expr><name pos:line="591" pos:column="93">courseScheduleDelete</name></expr></argument>, <argument><expr><name><name pos:line="591" pos:column="115">ResultSet</name><op:operator pos:line="591" pos:column="124">.</op:operator><name pos:line="591" pos:column="125">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				    <decl_stmt><decl><type><name pos:line="592" pos:column="37">int</name></type> <name pos:line="592" pos:column="41">isDeleted</name><init pos:line="592" pos:column="50">= <expr><call><name><name pos:line="592" pos:column="52">statement</name><op:operator pos:line="592" pos:column="61">.</op:operator><name pos:line="592" pos:column="62">executeUpdate</name></name><argument_list pos:line="592" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
				    <expr_stmt><expr><call><name><name pos:line="593" pos:column="37">System</name><op:operator pos:line="593" pos:column="43">.</op:operator><name pos:line="593" pos:column="44">out</name><op:operator pos:line="593" pos:column="47">.</op:operator><name pos:line="593" pos:column="48">println</name></name><argument_list pos:line="593" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="593" pos:column="56">"Deletd:"</lit:literal><op:operator pos:line="593" pos:column="65">+</op:operator><name pos:line="593" pos:column="66">isDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    <if pos:line="594" pos:column="37">if<condition pos:line="594" pos:column="39">(<expr><name pos:line="594" pos:column="40">isDeleted</name> <op:operator pos:line="594" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="594" pos:column="52">0</lit:literal></expr>)</condition><then><block pos:line="594" pos:column="54">{
				    	<expr_stmt><expr><call><name><name pos:line="595" pos:column="41">Database</name><op:operator pos:line="595" pos:column="49">.</op:operator><name pos:line="595" pos:column="50">commitTransaction</name></name><argument_list pos:line="595" pos:column="67">(<argument><expr><name pos:line="595" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    }</block></then></if>
				    
									
				}</block></then></if>
			}</block>
			
			<catch pos:line="602" pos:column="25">catch<parameter_list pos:line="602" pos:column="30">(<param><decl><type><name pos:line="602" pos:column="31">SQLException</name></type> <name pos:line="602" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="602" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="603" pos:column="33">System</name><op:operator pos:line="603" pos:column="39">.</op:operator><name pos:line="603" pos:column="40">out</name><op:operator pos:line="603" pos:column="43">.</op:operator><name pos:line="603" pos:column="44">println</name></name><argument_list pos:line="603" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="603" pos:column="52">"Error deleting schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="604" pos:column="33">System</name><op:operator pos:line="604" pos:column="39">.</op:operator><name pos:line="604" pos:column="40">out</name><op:operator pos:line="604" pos:column="43">.</op:operator><name pos:line="604" pos:column="44">println</name></name><argument_list pos:line="604" pos:column="51">(<argument><expr><call><name><name pos:line="604" pos:column="52">e</name><op:operator pos:line="604" pos:column="53">.</op:operator><name pos:line="604" pos:column="54">getMessage</name></name><argument_list pos:line="604" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="605" pos:column="33">Database</name><op:operator pos:line="605" pos:column="41">.</op:operator><name pos:line="605" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="605" pos:column="61">(<argument><expr><name pos:line="605" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="606" pos:column="33">e</name><op:operator pos:line="606" pos:column="34">.</op:operator><name pos:line="606" pos:column="35">printStackTrace</name></name><argument_list pos:line="606" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="611" pos:column="17">finally<block pos:line="611" pos:column="24">{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="615" pos:column="9">/*
	 * Deletes all the current course schedule for the course offering for the specified department 
	 */</comment>
	<function><type><specifier pos:line="618" pos:column="9">public</specifier> <specifier pos:line="618" pos:column="16">static</specifier> <name pos:line="618" pos:column="23">void</name></type> <name pos:line="618" pos:column="28">deleteAllCourseSchedule</name><parameter_list pos:line="618" pos:column="51">(<param><decl><type><name pos:line="618" pos:column="52">Department</name></type> <name pos:line="618" pos:column="63">department</name></decl></param>)</parameter_list><block pos:line="618" pos:column="74">{
		<decl_stmt><decl><type><name><name pos:line="619" pos:column="17">ArrayList</name><argument_list pos:line="619" pos:column="26">&lt;<argument><name pos:line="619" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="619" pos:column="42">deptCoursesOffering</name> <init pos:line="619" pos:column="62">= <expr><call><name><name pos:line="619" pos:column="64">department</name><op:operator pos:line="619" pos:column="74">.</op:operator><name pos:line="619" pos:column="75">getDepartmentCourseOffered</name></name><argument_list pos:line="619" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="621" pos:column="17">for(<init><decl><type><name pos:line="621" pos:column="21">CourseOffered</name></type> <name pos:line="621" pos:column="35">co</name><range pos:line="621" pos:column="37">:<expr><name pos:line="621" pos:column="38">deptCoursesOffering</name></expr></range></decl></init>)<block pos:line="621" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="622" pos:column="25">deleteSingleSchedule</name><argument_list pos:line="622" pos:column="45">(<argument><expr><call><name><name pos:line="622" pos:column="46">co</name><op:operator pos:line="622" pos:column="48">.</op:operator><name pos:line="622" pos:column="49">getOfferID</name></name><argument_list pos:line="622" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	
	<comment type="block" pos:line="626" pos:column="9">/*
	 * This function is used by deleteAlCourseSchedule function to delete course offerings one at a time
	 */</comment>
	<function><type><specifier pos:line="629" pos:column="9">private</specifier> <specifier pos:line="629" pos:column="17">static</specifier> <name pos:line="629" pos:column="24">void</name></type> <name pos:line="629" pos:column="29">deleteSingleSchedule</name><parameter_list pos:line="629" pos:column="49">(<param><decl><type><name pos:line="629" pos:column="50">int</name></type> <name pos:line="629" pos:column="54">offerID</name></decl></param>)</parameter_list><block pos:line="629" pos:column="62">{
		<try pos:line="630" pos:column="17">try<block pos:line="630" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="631" pos:column="25">Connection</name></type> <name pos:line="631" pos:column="36">conn</name> <init pos:line="631" pos:column="41">= <expr><call><name><name pos:line="631" pos:column="43">Database</name><op:operator pos:line="631" pos:column="51">.</op:operator><name pos:line="631" pos:column="52">getConnection</name></name><argument_list pos:line="631" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="633" pos:column="25">try<block pos:line="633" pos:column="28">{
				<if pos:line="634" pos:column="33">if<condition pos:line="634" pos:column="35">(<expr><name pos:line="634" pos:column="36">conn</name> <op:operator pos:line="634" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="634" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="634" pos:column="49">{
					
					<comment type="block" pos:line="636" pos:column="41">/*
					 * Retrieve the current semester ID
					 */</comment>
					
					<comment type="block" pos:line="640" pos:column="41">/*
					 * Delete from table annotation
					 */</comment>
					<expr_stmt><expr><call><name><name pos:line="643" pos:column="41">DBAnnotation</name><op:operator pos:line="643" pos:column="53">.</op:operator><name pos:line="643" pos:column="54">annoate</name></name><argument_list pos:line="643" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="643" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="643" pos:column="73">"courseschedule"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="643" pos:column="91">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="643" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="644" pos:column="41">String</name></type> <name pos:line="644" pos:column="48">courseScheduleDelete</name> <init pos:line="644" pos:column="69">= <expr><lit:literal type="string" pos:line="644" pos:column="71">"Delete"</lit:literal>
							<op:operator pos:line="645" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="645" pos:column="59">" FROM courseschedule "</lit:literal>
							<op:operator pos:line="646" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="646" pos:column="59">"WHERE OfferID = ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="647" pos:column="41">PreparedStatement</name></type> <name pos:line="647" pos:column="59">statement</name> <init pos:line="647" pos:column="69">= <expr><call><name><name pos:line="647" pos:column="71">conn</name><op:operator pos:line="647" pos:column="75">.</op:operator><name pos:line="647" pos:column="76">prepareStatement</name></name><argument_list pos:line="647" pos:column="92">(<argument><expr><name pos:line="647" pos:column="93">courseScheduleDelete</name></expr></argument>, <argument><expr><name><name pos:line="647" pos:column="115">ResultSet</name><op:operator pos:line="647" pos:column="124">.</op:operator><name pos:line="647" pos:column="125">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="648" pos:column="41">statement</name><op:operator pos:line="648" pos:column="50">.</op:operator><name pos:line="648" pos:column="51">setInt</name></name><argument_list pos:line="648" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="648" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="648" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    <decl_stmt><decl><type><name pos:line="649" pos:column="37">int</name></type> <name pos:line="649" pos:column="41">isDeleted</name><init pos:line="649" pos:column="50">= <expr><call><name><name pos:line="649" pos:column="52">statement</name><op:operator pos:line="649" pos:column="61">.</op:operator><name pos:line="649" pos:column="62">executeUpdate</name></name><argument_list pos:line="649" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
				    <expr_stmt><expr><call><name><name pos:line="650" pos:column="37">System</name><op:operator pos:line="650" pos:column="43">.</op:operator><name pos:line="650" pos:column="44">out</name><op:operator pos:line="650" pos:column="47">.</op:operator><name pos:line="650" pos:column="48">println</name></name><argument_list pos:line="650" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="650" pos:column="56">"Deletd:"</lit:literal><op:operator pos:line="650" pos:column="65">+</op:operator><name pos:line="650" pos:column="66">isDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    <if pos:line="651" pos:column="37">if<condition pos:line="651" pos:column="39">(<expr><name pos:line="651" pos:column="40">isDeleted</name> <op:operator pos:line="651" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="651" pos:column="52">0</lit:literal></expr>)</condition><then><block pos:line="651" pos:column="54">{
				    	<expr_stmt><expr><call><name><name pos:line="652" pos:column="41">Database</name><op:operator pos:line="652" pos:column="49">.</op:operator><name pos:line="652" pos:column="50">commitTransaction</name></name><argument_list pos:line="652" pos:column="67">(<argument><expr><name pos:line="652" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    }</block></then></if>
				    
									
				}</block></then></if>
			}</block>
			
			<catch pos:line="659" pos:column="25">catch<parameter_list pos:line="659" pos:column="30">(<param><decl><type><name pos:line="659" pos:column="31">SQLException</name></type> <name pos:line="659" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="659" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="660" pos:column="33">System</name><op:operator pos:line="660" pos:column="39">.</op:operator><name pos:line="660" pos:column="40">out</name><op:operator pos:line="660" pos:column="43">.</op:operator><name pos:line="660" pos:column="44">println</name></name><argument_list pos:line="660" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="660" pos:column="52">"Error deleting schedule"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="661" pos:column="33">System</name><op:operator pos:line="661" pos:column="39">.</op:operator><name pos:line="661" pos:column="40">out</name><op:operator pos:line="661" pos:column="43">.</op:operator><name pos:line="661" pos:column="44">println</name></name><argument_list pos:line="661" pos:column="51">(<argument><expr><call><name><name pos:line="661" pos:column="52">e</name><op:operator pos:line="661" pos:column="53">.</op:operator><name pos:line="661" pos:column="54">getMessage</name></name><argument_list pos:line="661" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="662" pos:column="33">e</name><op:operator pos:line="662" pos:column="34">.</op:operator><name pos:line="662" pos:column="35">printStackTrace</name></name><argument_list pos:line="662" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="667" pos:column="17">finally<block pos:line="667" pos:column="24">{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="671" pos:column="9">/*
	 * Checks of another course is schedulable for the capacity mentioned
	 */</comment>
	<function><type><specifier pos:line="674" pos:column="9">public</specifier> <specifier pos:line="674" pos:column="16">static</specifier> <name pos:line="674" pos:column="23">boolean</name></type> <name pos:line="674" pos:column="31">isAnotherCourseSchedulable</name><parameter_list pos:line="674" pos:column="57">(<param><decl><type><name pos:line="674" pos:column="58">int</name></type> <name pos:line="674" pos:column="62">courseCapacity</name></decl></param>)</parameter_list><block pos:line="674" pos:column="77">{
		<decl_stmt><decl><type><name pos:line="675" pos:column="17">int</name></type> <name pos:line="675" pos:column="21">timeSlotType</name> <init pos:line="675" pos:column="34">= <expr><lit:literal type="number" pos:line="675" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="676" pos:column="17">Classroom</name></type> <name pos:line="676" pos:column="27">c</name> <init pos:line="676" pos:column="29">= <expr><lit:literal type="null" pos:line="676" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="677" pos:column="17">while<condition pos:line="677" pos:column="22">(<expr><name pos:line="677" pos:column="23">timeSlotType</name><op:operator pos:line="677" pos:column="35">&lt;=</op:operator><lit:literal type="number" pos:line="677" pos:column="37">2</lit:literal></expr>)</condition><block pos:line="677" pos:column="39">{
			<for pos:line="678" pos:column="25">for(<init><decl><type><name pos:line="678" pos:column="29">ClassroomLocation</name></type> <name pos:line="678" pos:column="47">location</name><range pos:line="678" pos:column="55">:<expr><call><name><name pos:line="678" pos:column="56">ClassroomLocation</name><op:operator pos:line="678" pos:column="73">.</op:operator><name pos:line="678" pos:column="74">values</name></name><argument_list pos:line="678" pos:column="80">()</argument_list></call></expr></range></decl></init>)<block pos:line="678" pos:column="83">{
				<expr_stmt><expr><name pos:line="679" pos:column="33">c</name> <op:operator pos:line="679" pos:column="35">=</op:operator> <call><name><name pos:line="679" pos:column="37">Classroom</name><op:operator pos:line="679" pos:column="46">.</op:operator><name pos:line="679" pos:column="47">getEmptyClassroom</name></name><argument_list pos:line="679" pos:column="64">(<argument><expr><name pos:line="679" pos:column="65">location</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="75">timeSlotType</name></expr></argument>, <argument><expr><name pos:line="679" pos:column="89">courseCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="680" pos:column="33">if<condition pos:line="680" pos:column="35">(<expr><name pos:line="680" pos:column="36">c</name><op:operator pos:line="680" pos:column="37">!=</op:operator><lit:literal type="null" pos:line="680" pos:column="39">null</lit:literal></expr>)</condition><then><block pos:line="680" pos:column="44">{
					<return pos:line="681" pos:column="41">return <expr><lit:literal type="boolean" pos:line="681" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></for>
			
			<expr_stmt><expr><name pos:line="685" pos:column="25">timeSlotType</name><op:operator pos:line="685" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		
		<return pos:line="688" pos:column="17">return <expr><lit:literal type="boolean" pos:line="688" pos:column="24">false</lit:literal></expr>;</return>
		
	}</block></function>
	
	
<comment type="line" pos:line="693" pos:column="1">//	public static void main(String args[]) throws Course.CourseDoesNotExistException, CourseOffered.CourseOfferingDoesNotExistException{</comment>
<comment type="line" pos:line="694" pos:column="1">//		//scheduleAllCurrentCourses();</comment>
<comment type="line" pos:line="695" pos:column="1">//		try {</comment>
<comment type="line" pos:line="696" pos:column="1">//			updateCourseSchedule(new CourseOffered(295), new Classroom(10), new Timeslots(31));</comment>
<comment type="line" pos:line="697" pos:column="1">//		} catch (CourseOffered.CourseOfferingNotCurrentException e) {</comment>
<comment type="line" pos:line="698" pos:column="1">//			// TODO Auto-generated catch block</comment>
<comment type="line" pos:line="699" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="700" pos:column="1">//		}</comment>
<comment type="line" pos:line="701" pos:column="1">//	}</comment>
}</block></class>
</unit>
