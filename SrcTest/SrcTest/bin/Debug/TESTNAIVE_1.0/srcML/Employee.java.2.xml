<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Employee.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="9" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="14" pos:column="1">/*************** EMPLOYEE.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="16" pos:column="1">public</specifier> class <name pos:line="16" pos:column="14">Employee</name> <super><extends pos:line="16" pos:column="23">extends <name pos:line="16" pos:column="31">People</name></extends></super> <block pos:line="16" pos:column="38">{

	<comment type="block" pos:line="18" pos:column="9">/*class variables for employee specific use*/</comment>
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">protected</specifier> <name pos:line="19" pos:column="19">double</name></type> <name pos:line="19" pos:column="26">salary</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">protected</specifier> <name pos:line="20" pos:column="19">String</name></type> <name pos:line="20" pos:column="26">officeAddress</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">protected</specifier> <name pos:line="21" pos:column="19">String</name></type> <name pos:line="21" pos:column="26">officeHours</name></decl>;</decl_stmt>

	
	<comment type="block" pos:line="24" pos:column="9">/*----------------GETTERS AND SETTERS START------------------------------------*/</comment>
	<function><type><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">double</name></type> <name pos:line="25" pos:column="23">getSalary</name><parameter_list pos:line="25" pos:column="32">()</parameter_list> <block pos:line="25" pos:column="35">{
		<return pos:line="26" pos:column="17">return <expr><name pos:line="26" pos:column="24">salary</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">void</name></type> <name pos:line="29" pos:column="21">setSalary</name><parameter_list pos:line="29" pos:column="30">(<param><decl><type><name pos:line="29" pos:column="31">double</name></type> <name pos:line="29" pos:column="38">salary</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="46">{
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">this</name><op:operator pos:line="30" pos:column="21">.</op:operator><name pos:line="30" pos:column="22">salary</name></name> <op:operator pos:line="30" pos:column="29">=</op:operator> <name pos:line="30" pos:column="31">salary</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">String</name></type> <name pos:line="33" pos:column="23">getOfficeAddress</name><parameter_list pos:line="33" pos:column="39">()</parameter_list> <block pos:line="33" pos:column="42">{
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">officeAddress</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">setOfficeAddress</name><parameter_list pos:line="37" pos:column="37">(<param><decl><type><name pos:line="37" pos:column="38">String</name></type> <name pos:line="37" pos:column="45">officeAddress</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="60">{
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">this</name><op:operator pos:line="38" pos:column="21">.</op:operator><name pos:line="38" pos:column="22">officeAddress</name></name> <op:operator pos:line="38" pos:column="36">=</op:operator> <name pos:line="38" pos:column="38">officeAddress</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">String</name></type> <name pos:line="41" pos:column="23">getOfficeHours</name><parameter_list pos:line="41" pos:column="37">()</parameter_list> <block pos:line="41" pos:column="40">{
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">officeHours</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">setOfficeHours</name><parameter_list pos:line="45" pos:column="35">(<param><decl><type><name pos:line="45" pos:column="36">String</name></type> <name pos:line="45" pos:column="43">officeHours</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="56">{
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">this</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">officeHours</name></name> <op:operator pos:line="46" pos:column="34">=</op:operator> <name pos:line="46" pos:column="36">officeHours</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="49" pos:column="9">/*----------------GETTERS AND SETTERS END------------------------------------*/</comment>
	
	<comment type="block" pos:line="51" pos:column="9">/*the constructor takes in the UIN and then initializes the employee specific variables
	 * 
	 * it calls in super people class and sets the people class variables too
	 * 
	 * it thorws person does not exist exception */</comment>
	<constructor><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">Employee</name><parameter_list pos:line="56" pos:column="24">(<param><decl><type><name pos:line="56" pos:column="25">int</name></type> <name pos:line="56" pos:column="29">UIN</name></decl></param>)</parameter_list> <throws pos:line="56" pos:column="34">throws <argument><expr><name pos:line="56" pos:column="41">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="56" pos:column="69">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">super</name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try pos:line="59" pos:column="17">try <block pos:line="59" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="60" pos:column="25">Connection</name></type> <name pos:line="60" pos:column="36">conn</name> <init pos:line="60" pos:column="41">= <expr><call><name><name pos:line="60" pos:column="43">Database</name><op:operator pos:line="60" pos:column="51">.</op:operator><name pos:line="60" pos:column="52">getConnection</name></name><argument_list pos:line="60" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="60" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="61" pos:column="25">String</name></type> <name pos:line="61" pos:column="32">SQLPeopleSelect</name> <init pos:line="61" pos:column="48">= <expr><lit:literal type="string" pos:line="61" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="63" pos:column="25">try <block pos:line="63" pos:column="29">{
				<comment type="line" pos:line="64" pos:column="33">//select employee details from employee table where for passed UIN</comment>
				<expr_stmt><expr><name pos:line="65" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="65" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="65" pos:column="51">"Select * From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="66" pos:column="33">PreparedStatement</name></type> <name pos:line="66" pos:column="51">stmt</name> <init pos:line="66" pos:column="56">= <expr><call><name><name pos:line="66" pos:column="58">conn</name><op:operator pos:line="66" pos:column="62">.</op:operator><name pos:line="66" pos:column="63">prepareStatement</name></name><argument_list pos:line="66" pos:column="79">(<argument><expr><name pos:line="66" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">stmt</name><op:operator pos:line="67" pos:column="37">.</op:operator><name pos:line="67" pos:column="38">setInt</name></name><argument_list pos:line="67" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="67" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="67" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="68" pos:column="33">ResultSet</name></type> <name pos:line="68" pos:column="43">rs</name> <init pos:line="68" pos:column="46">= <expr><call><name><name pos:line="68" pos:column="48">stmt</name><op:operator pos:line="68" pos:column="52">.</op:operator><name pos:line="68" pos:column="53">executeQuery</name></name><argument_list pos:line="68" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="68" pos:column="68">//execute the query</comment>

				<if pos:line="70" pos:column="33">if <condition pos:line="70" pos:column="36">(<expr><call><name><name pos:line="70" pos:column="37">rs</name><op:operator pos:line="70" pos:column="39">.</op:operator><name pos:line="70" pos:column="40">first</name></name><argument_list pos:line="70" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="70" pos:column="48"> <block pos:line="70" pos:column="49">{
					<comment type="line" pos:line="71" pos:column="41">//if exists then initialize the variables</comment>
					<expr_stmt><expr><call><name><name pos:line="72" pos:column="41">System</name><op:operator pos:line="72" pos:column="47">.</op:operator><name pos:line="72" pos:column="48">out</name><op:operator pos:line="72" pos:column="51">.</op:operator><name pos:line="72" pos:column="52">println</name></name><argument_list pos:line="72" pos:column="59">(<argument><expr><name pos:line="72" pos:column="60">UIN</name> <op:operator pos:line="72" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="66">"already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="74" pos:column="41">DBAnnotation</name><op:operator pos:line="74" pos:column="53">.</op:operator><name pos:line="74" pos:column="54">annoate</name></name><argument_list pos:line="74" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="62">"retrievedEmployeeUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="86">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="74" pos:column="98">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="74" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="75" pos:column="41">int</name></type> <name pos:line="75" pos:column="45">retrievedEmployeeUIN</name> <init pos:line="75" pos:column="66">= <expr><call><name><name pos:line="75" pos:column="68">rs</name><op:operator pos:line="75" pos:column="70">.</op:operator><name pos:line="75" pos:column="71">getInt</name></name><argument_list pos:line="75" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="78">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="75" pos:column="85">//retrieve the UIN </comment>
					
					<expr_stmt><expr><call><name><name pos:line="77" pos:column="41">DBAnnotation</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">annoate</name></name><argument_list pos:line="77" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="62">"retrievedEmployeeSalary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="89">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="101">"Salary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="77" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="78" pos:column="41">double</name></type> <name pos:line="78" pos:column="48">retrievedEmployeeSalary</name> <init pos:line="78" pos:column="72">= <expr><call><name><name pos:line="78" pos:column="74">rs</name><op:operator pos:line="78" pos:column="76">.</op:operator><name pos:line="78" pos:column="77">getDouble</name></name><argument_list pos:line="78" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="87">"Salary"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="78" pos:column="97">//retrieve the salary </comment>
					
					<expr_stmt><expr><call><name><name pos:line="80" pos:column="41">DBAnnotation</name><op:operator pos:line="80" pos:column="53">.</op:operator><name pos:line="80" pos:column="54">annoate</name></name><argument_list pos:line="80" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="62">"retrievedOfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="88">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="100">"OfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="80" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="81" pos:column="41">String</name></type> <name pos:line="81" pos:column="48">retrievedOfficeAddress</name> <init pos:line="81" pos:column="71">= <expr><call><name><name pos:line="81" pos:column="73">rs</name><op:operator pos:line="81" pos:column="75">.</op:operator><name pos:line="81" pos:column="76">getString</name></name><argument_list pos:line="81" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="86">"OfficeAddress"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="81" pos:column="103">//retrieve the office address</comment>
					
					<expr_stmt><expr><call><name><name pos:line="83" pos:column="41">DBAnnotation</name><op:operator pos:line="83" pos:column="53">.</op:operator><name pos:line="83" pos:column="54">annoate</name></name><argument_list pos:line="83" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="62">"retrievedOfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="86">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="98">"OfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="83" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="84" pos:column="41">String</name></type> <name pos:line="84" pos:column="48">retrievedOfficeHours</name> <init pos:line="84" pos:column="69">= <expr><call><name><name pos:line="84" pos:column="71">rs</name><op:operator pos:line="84" pos:column="73">.</op:operator><name pos:line="84" pos:column="74">getString</name></name><argument_list pos:line="84" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="84">"OfficeHours"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="84" pos:column="99">//retrieve the office hours</comment>

					<comment type="line" pos:line="86" pos:column="41">//set the class variables to the UIN specific</comment>
					
					<expr_stmt><expr><name><name pos:line="88" pos:column="41">this</name><op:operator pos:line="88" pos:column="45">.</op:operator><name pos:line="88" pos:column="46">UIN</name></name> <op:operator pos:line="88" pos:column="50">=</op:operator> <name pos:line="88" pos:column="52">retrievedEmployeeUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="89" pos:column="41">this</name><op:operator pos:line="89" pos:column="45">.</op:operator><name pos:line="89" pos:column="46">salary</name></name> <op:operator pos:line="89" pos:column="53">=</op:operator> <name pos:line="89" pos:column="55">retrievedEmployeeSalary</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="90" pos:column="41">this</name><op:operator pos:line="90" pos:column="45">.</op:operator><name pos:line="90" pos:column="46">officeAddress</name></name> <op:operator pos:line="90" pos:column="60">=</op:operator> <name pos:line="90" pos:column="62">retrievedOfficeAddress</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="91" pos:column="41">this</name><op:operator pos:line="91" pos:column="45">.</op:operator><name pos:line="91" pos:column="46">officeHours</name></name> <op:operator pos:line="91" pos:column="58">=</op:operator> <name pos:line="91" pos:column="60">retrievedOfficeHours</name></expr>;</expr_stmt>

				}</block></then>

				<else pos:line="95" pos:column="33">else <block pos:line="95" pos:column="38">{
					<comment type="line" pos:line="96" pos:column="41">//if the resultset is empty then return false and throw an exception</comment>
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">System</name><op:operator pos:line="97" pos:column="47">.</op:operator><name pos:line="97" pos:column="48">out</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">println</name></name><argument_list pos:line="97" pos:column="59">(<argument><expr><name pos:line="97" pos:column="60">UIN</name> <op:operator pos:line="97" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="66">"does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<throw pos:line="98" pos:column="41">throw <expr><op:operator pos:line="98" pos:column="47">new</op:operator> <call><name pos:line="98" pos:column="51">PersonDoesNotExistException</name><argument_list pos:line="98" pos:column="78">()</argument_list></call></expr>;</throw>

				}</block></else></if>

			}</block>

			<comment type="line" pos:line="104" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="105" pos:column="25">catch <parameter_list pos:line="105" pos:column="31">(<param><decl><type><name pos:line="105" pos:column="32">SQLException</name></type> <name pos:line="105" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="105" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">System</name><op:operator pos:line="106" pos:column="39">.</op:operator><name pos:line="106" pos:column="40">out</name><op:operator pos:line="106" pos:column="43">.</op:operator><name pos:line="106" pos:column="44">println</name></name><argument_list pos:line="106" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="107" pos:column="33">e</name><op:operator pos:line="107" pos:column="34">.</op:operator><name pos:line="107" pos:column="35">printStackTrace</name></name><argument_list pos:line="107" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">System</name><op:operator pos:line="108" pos:column="39">.</op:operator><name pos:line="108" pos:column="40">out</name><op:operator pos:line="108" pos:column="43">.</op:operator><name pos:line="108" pos:column="44">println</name></name><argument_list pos:line="108" pos:column="51">(<argument><expr><name pos:line="108" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="block" pos:line="112" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="114" pos:column="17">finally <block pos:line="114" pos:column="25">{

			<comment type="line" pos:line="116" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<comment type="line" pos:line="119" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="line" pos:line="122" pos:column="9">//constructor calls the super class</comment>
	<constructor><specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">Employee</name><parameter_list pos:line="123" pos:column="24">(<param><decl><type><name pos:line="123" pos:column="25">String</name></type> <name pos:line="123" pos:column="32">name</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="38">String</name></type> <name pos:line="123" pos:column="45">userName</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="55">int</name></type> <name pos:line="123" pos:column="59">deptID</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="67">int</name></type> <name pos:line="123" pos:column="71">positionID</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="83">{
		<expr_stmt><expr><call><name pos:line="124" pos:column="17">super</name><argument_list pos:line="124" pos:column="22">(<argument><expr><name pos:line="124" pos:column="23">name</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="29">userName</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="39">deptID</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="47">positionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="125" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="line" pos:line="128" pos:column="9">//construtor calls the super class</comment>
	<constructor><specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">Employee</name><parameter_list pos:line="129" pos:column="24">(<param><decl><type><name pos:line="129" pos:column="25">String</name></type> <name pos:line="129" pos:column="32">userName</name></decl></param>)</parameter_list><block pos:line="129" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="130" pos:column="17">super</name><argument_list pos:line="130" pos:column="22">(<argument><expr><name pos:line="130" pos:column="23">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="131" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block" pos:line="134" pos:column="9">/*the add employee to the database takes in the UIN and adds him to the employee table
	 * 
	 * the return type is boolean 
	 * 
	 * */</comment>
	<function><type><specifier pos:line="139" pos:column="9">public</specifier> <specifier pos:line="139" pos:column="16">static</specifier> <name pos:line="139" pos:column="23">boolean</name></type> <name pos:line="139" pos:column="31">addEmployee</name><parameter_list pos:line="139" pos:column="42">(<param><decl><type><name pos:line="139" pos:column="43">int</name></type> <name pos:line="139" pos:column="47">UIN</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="52">{

		<decl_stmt><decl><type><name pos:line="141" pos:column="17">boolean</name></type> <name pos:line="141" pos:column="25">isAdded</name> <init pos:line="141" pos:column="33">= <expr><lit:literal type="boolean" pos:line="141" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="141" pos:column="41">//create a boolean value for returning. set it to false</comment>
		<decl_stmt><decl><type><name pos:line="142" pos:column="17">double</name></type> <name pos:line="142" pos:column="24">salary</name> <init pos:line="142" pos:column="31">= <expr><lit:literal type="number" pos:line="142" pos:column="33">40000.00</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="142" pos:column="42">//this is a default value</comment>
		<decl_stmt><decl><type><name pos:line="143" pos:column="17">String</name></type> <name pos:line="143" pos:column="24">Office_address</name> <init pos:line="143" pos:column="39">= <expr><lit:literal type="string" pos:line="143" pos:column="41">"to be decided"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="143" pos:column="57">//this is a default value</comment>
		<decl_stmt><decl><type><name pos:line="144" pos:column="17">String</name></type> <name pos:line="144" pos:column="24">office_hours</name> <init pos:line="144" pos:column="37">= <expr><lit:literal type="string" pos:line="144" pos:column="39">"to be decided"</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="144" pos:column="55">//this is a default value</comment>

		<try pos:line="146" pos:column="17">try <block pos:line="146" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="147" pos:column="25">Connection</name></type> <name pos:line="147" pos:column="36">conn</name> <init pos:line="147" pos:column="41">= <expr><call><name><name pos:line="147" pos:column="43">Database</name><op:operator pos:line="147" pos:column="51">.</op:operator><name pos:line="147" pos:column="52">getConnection</name></name><argument_list pos:line="147" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="147" pos:column="68">//establish a connection</comment>

			<try pos:line="149" pos:column="25">try <block pos:line="149" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="151" pos:column="33">boolean</name></type> <name pos:line="151" pos:column="41">isExisting</name> <init pos:line="151" pos:column="52">= <expr><call><name pos:line="151" pos:column="54">addEmployeeCheck</name><argument_list pos:line="151" pos:column="70">(<argument><expr><name pos:line="151" pos:column="71">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="151" pos:column="76">//check if its existing </comment>

				<if pos:line="153" pos:column="33">if <condition pos:line="153" pos:column="36">(<expr><name pos:line="153" pos:column="37">isExisting</name></expr>)</condition><then pos:line="153" pos:column="48"> <block pos:line="153" pos:column="49">{
					<comment type="line" pos:line="154" pos:column="41">//return false it the UIN already exists in the employee table</comment>
					<return pos:line="155" pos:column="41">return <expr><lit:literal type="boolean" pos:line="155" pos:column="48">false</lit:literal></expr>;</return>
					
				}</block></then>

				<else pos:line="159" pos:column="33">else <block pos:line="159" pos:column="38">{
					<comment type="line" pos:line="160" pos:column="41">//insert new employee in the database</comment>
					<expr_stmt><expr><call><name><name pos:line="161" pos:column="41">System</name><op:operator pos:line="161" pos:column="47">.</op:operator><name pos:line="161" pos:column="48">out</name><op:operator pos:line="161" pos:column="51">.</op:operator><name pos:line="161" pos:column="52">println</name></name><argument_list pos:line="161" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="60">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="162" pos:column="41">String</name></type> <name pos:line="162" pos:column="48">SQLEmployeeInsert</name> <init pos:line="162" pos:column="66">= <expr><lit:literal type="string" pos:line="162" pos:column="68">"Insert into employee (UIN, Salary, OfficeAddress, OfficeHours) Values (?,?,?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="163" pos:column="41">PreparedStatement</name></type> <name pos:line="163" pos:column="59">stmt</name> <init pos:line="163" pos:column="64">= <expr><call><name><name pos:line="163" pos:column="66">conn</name><op:operator pos:line="163" pos:column="70">.</op:operator><name pos:line="163" pos:column="71">prepareStatement</name></name><argument_list pos:line="163" pos:column="87">(<argument><expr><name pos:line="163" pos:column="88">SQLEmployeeInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="164" pos:column="41">stmt</name><op:operator pos:line="164" pos:column="45">.</op:operator><name pos:line="164" pos:column="46">setInt</name></name><argument_list pos:line="164" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="164" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="164" pos:column="61">//set the UIN</comment>
					<expr_stmt><expr><call><name><name pos:line="165" pos:column="41">stmt</name><op:operator pos:line="165" pos:column="45">.</op:operator><name pos:line="165" pos:column="46">setDouble</name></name><argument_list pos:line="165" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="165" pos:column="56">2</lit:literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="59">salary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="165" pos:column="67">//set the salary</comment>
					<expr_stmt><expr><call><name><name pos:line="166" pos:column="41">stmt</name><op:operator pos:line="166" pos:column="45">.</op:operator><name pos:line="166" pos:column="46">setString</name></name><argument_list pos:line="166" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="166" pos:column="56">3</lit:literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="59">Office_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="166" pos:column="75">//set the office address</comment>
					<expr_stmt><expr><call><name><name pos:line="167" pos:column="41">stmt</name><op:operator pos:line="167" pos:column="45">.</op:operator><name pos:line="167" pos:column="46">setString</name></name><argument_list pos:line="167" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="167" pos:column="56">4</lit:literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="59">office_hours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="167" pos:column="73">//set the office hours					</comment>
					<expr_stmt><expr><call><name><name pos:line="168" pos:column="41">System</name><op:operator pos:line="168" pos:column="47">.</op:operator><name pos:line="168" pos:column="48">out</name><op:operator pos:line="168" pos:column="51">.</op:operator><name pos:line="168" pos:column="52">println</name></name><argument_list pos:line="168" pos:column="59">(<argument><expr><name pos:line="168" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="169" pos:column="41">int</name></type> <name pos:line="169" pos:column="45">i</name> <init pos:line="169" pos:column="47">= <expr><call><name><name pos:line="169" pos:column="49">stmt</name><op:operator pos:line="169" pos:column="53">.</op:operator><name pos:line="169" pos:column="54">executeUpdate</name></name><argument_list pos:line="169" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="169" pos:column="70">//execute query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="171" pos:column="41">DBAnnotation</name><op:operator pos:line="171" pos:column="53">.</op:operator><name pos:line="171" pos:column="54">annoate</name></name><argument_list pos:line="171" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="69">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="81">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="171" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="172" pos:column="41">DBAnnotation</name><op:operator pos:line="172" pos:column="53">.</op:operator><name pos:line="172" pos:column="54">annoate</name></name><argument_list pos:line="172" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="62">"salary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="72">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="84">"Salary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="172" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="173" pos:column="41">DBAnnotation</name><op:operator pos:line="173" pos:column="53">.</op:operator><name pos:line="173" pos:column="54">annoate</name></name><argument_list pos:line="173" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="62">"office_address"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="80">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="92">"OfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="173" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">DBAnnotation</name><op:operator pos:line="174" pos:column="53">.</op:operator><name pos:line="174" pos:column="54">annoate</name></name><argument_list pos:line="174" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="62">"office_hours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="78">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="174" pos:column="90">"OfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="174" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">System</name><op:operator pos:line="176" pos:column="47">.</op:operator><name pos:line="176" pos:column="48">out</name><op:operator pos:line="176" pos:column="51">.</op:operator><name pos:line="176" pos:column="52">println</name></name><argument_list pos:line="176" pos:column="59">(<argument><expr><name pos:line="176" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="177" pos:column="41">System</name><op:operator pos:line="177" pos:column="47">.</op:operator><name pos:line="177" pos:column="48">out</name><op:operator pos:line="177" pos:column="51">.</op:operator><name pos:line="177" pos:column="52">println</name></name><argument_list pos:line="177" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="178" pos:column="41">isAdded</name> <op:operator pos:line="178" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="178" pos:column="51">true</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="178" pos:column="56">//set the return value to true</comment>

				}</block></else></if>

			}</block>

			<comment type="line" pos:line="184" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="185" pos:column="25">catch <parameter_list pos:line="185" pos:column="31">(<param><decl><type><name pos:line="185" pos:column="32">SQLException</name></type> <name pos:line="185" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="185" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="186" pos:column="33">System</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">out</name><op:operator pos:line="186" pos:column="43">.</op:operator><name pos:line="186" pos:column="44">println</name></name><argument_list pos:line="186" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="186" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="187" pos:column="33">e</name><op:operator pos:line="187" pos:column="34">.</op:operator><name pos:line="187" pos:column="35">printStackTrace</name></name><argument_list pos:line="187" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="188" pos:column="33">System</name><op:operator pos:line="188" pos:column="39">.</op:operator><name pos:line="188" pos:column="40">out</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">println</name></name><argument_list pos:line="188" pos:column="51">(<argument><expr><name pos:line="188" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="191" pos:column="25">finally <block pos:line="191" pos:column="33">{
				<comment type="line" pos:line="192" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="193" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="196" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="197" pos:column="17">catch <parameter_list pos:line="197" pos:column="23">(<param><decl><type><name pos:line="197" pos:column="24">Exception</name></type> <name pos:line="197" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="198" pos:column="25">System</name><op:operator pos:line="198" pos:column="31">.</op:operator><name pos:line="198" pos:column="32">out</name><op:operator pos:line="198" pos:column="35">.</op:operator><name pos:line="198" pos:column="36">println</name></name><argument_list pos:line="198" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">e</name><op:operator pos:line="199" pos:column="26">.</op:operator><name pos:line="199" pos:column="27">printStackTrace</name></name><argument_list pos:line="199" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="200" pos:column="25">System</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">out</name><op:operator pos:line="200" pos:column="35">.</op:operator><name pos:line="200" pos:column="36">println</name></name><argument_list pos:line="200" pos:column="43">(<argument><expr><name pos:line="200" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="204" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="206" pos:column="17">finally <block pos:line="206" pos:column="25">{

			<comment type="line" pos:line="208" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="211" pos:column="17">return <expr><name pos:line="211" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>
	<comment type="block" pos:line="214" pos:column="9">/*this function mainly is to check whether the employee already exists in the employee table
	 * 
	 *  the return type is boolean */</comment>
	<function><type><specifier pos:line="217" pos:column="9">public</specifier> <specifier pos:line="217" pos:column="16">static</specifier> <name pos:line="217" pos:column="23">boolean</name></type> <name pos:line="217" pos:column="31">addEmployeeCheck</name><parameter_list pos:line="217" pos:column="47">(<param><decl><type><name pos:line="217" pos:column="48">int</name></type> <name pos:line="217" pos:column="52">UIN</name></decl></param>)</parameter_list> <block pos:line="217" pos:column="57">{

		<decl_stmt><decl><type><name pos:line="219" pos:column="17">boolean</name></type> <name pos:line="219" pos:column="25">isExisting</name> <init pos:line="219" pos:column="36">= <expr><lit:literal type="boolean" pos:line="219" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="219" pos:column="44">//create a boolean value for returning. set it to false</comment>

		<try pos:line="221" pos:column="17">try <block pos:line="221" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="222" pos:column="25">Connection</name></type> <name pos:line="222" pos:column="36">conn</name> <init pos:line="222" pos:column="41">= <expr><call><name><name pos:line="222" pos:column="43">Database</name><op:operator pos:line="222" pos:column="51">.</op:operator><name pos:line="222" pos:column="52">getConnection</name></name><argument_list pos:line="222" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="222" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="223" pos:column="25">String</name></type> <name pos:line="223" pos:column="32">SQLEmployeeSelect</name> <init pos:line="223" pos:column="50">= <expr><lit:literal type="string" pos:line="223" pos:column="52">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="225" pos:column="25">try <block pos:line="225" pos:column="29">{
				<comment type="line" pos:line="226" pos:column="33">//select the UIN</comment>
				<expr_stmt><expr><name pos:line="227" pos:column="33">SQLEmployeeSelect</name> <op:operator pos:line="227" pos:column="51">=</op:operator> <lit:literal type="string" pos:line="227" pos:column="53">"Select UIN From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="228" pos:column="33">PreparedStatement</name></type> <name pos:line="228" pos:column="51">stmt</name> <init pos:line="228" pos:column="56">= <expr><call><name><name pos:line="228" pos:column="58">conn</name><op:operator pos:line="228" pos:column="62">.</op:operator><name pos:line="228" pos:column="63">prepareStatement</name></name><argument_list pos:line="228" pos:column="79">(<argument><expr><name pos:line="228" pos:column="80">SQLEmployeeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">stmt</name><op:operator pos:line="229" pos:column="37">.</op:operator><name pos:line="229" pos:column="38">setInt</name></name><argument_list pos:line="229" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="229" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="229" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="229" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="230" pos:column="33">ResultSet</name></type> <name pos:line="230" pos:column="43">rs</name> <init pos:line="230" pos:column="46">= <expr><call><name><name pos:line="230" pos:column="48">stmt</name><op:operator pos:line="230" pos:column="52">.</op:operator><name pos:line="230" pos:column="53">executeQuery</name></name><argument_list pos:line="230" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="230" pos:column="68">//execute the query</comment>

				<if pos:line="232" pos:column="33">if <condition pos:line="232" pos:column="36">(<expr><call><name><name pos:line="232" pos:column="37">rs</name><op:operator pos:line="232" pos:column="39">.</op:operator><name pos:line="232" pos:column="40">first</name></name><argument_list pos:line="232" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="232" pos:column="48"> <block pos:line="232" pos:column="49">{
					<comment type="line" pos:line="233" pos:column="41">//if the resultset exists then return true</comment>
					<expr_stmt><expr><call><name><name pos:line="234" pos:column="41">System</name><op:operator pos:line="234" pos:column="47">.</op:operator><name pos:line="234" pos:column="48">out</name><op:operator pos:line="234" pos:column="51">.</op:operator><name pos:line="234" pos:column="52">println</name></name><argument_list pos:line="234" pos:column="59">(<argument><expr><name pos:line="234" pos:column="60">UIN</name> <op:operator pos:line="234" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="234" pos:column="66">"already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="235" pos:column="41">return <expr><lit:literal type="boolean" pos:line="235" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="239" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="240" pos:column="25">catch <parameter_list pos:line="240" pos:column="31">(<param><decl><type><name pos:line="240" pos:column="32">SQLException</name></type> <name pos:line="240" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="240" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="241" pos:column="33">System</name><op:operator pos:line="241" pos:column="39">.</op:operator><name pos:line="241" pos:column="40">out</name><op:operator pos:line="241" pos:column="43">.</op:operator><name pos:line="241" pos:column="44">println</name></name><argument_list pos:line="241" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="242" pos:column="33">e</name><op:operator pos:line="242" pos:column="34">.</op:operator><name pos:line="242" pos:column="35">printStackTrace</name></name><argument_list pos:line="242" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="243" pos:column="33">System</name><op:operator pos:line="243" pos:column="39">.</op:operator><name pos:line="243" pos:column="40">out</name><op:operator pos:line="243" pos:column="43">.</op:operator><name pos:line="243" pos:column="44">println</name></name><argument_list pos:line="243" pos:column="51">(<argument><expr><name pos:line="243" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="246" pos:column="25">finally <block pos:line="246" pos:column="33">{
				<comment type="line" pos:line="247" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="248" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="251" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="252" pos:column="17">catch <parameter_list pos:line="252" pos:column="23">(<param><decl><type><name pos:line="252" pos:column="24">Exception</name></type> <name pos:line="252" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="253" pos:column="25">System</name><op:operator pos:line="253" pos:column="31">.</op:operator><name pos:line="253" pos:column="32">out</name><op:operator pos:line="253" pos:column="35">.</op:operator><name pos:line="253" pos:column="36">println</name></name><argument_list pos:line="253" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="254" pos:column="25">e</name><op:operator pos:line="254" pos:column="26">.</op:operator><name pos:line="254" pos:column="27">printStackTrace</name></name><argument_list pos:line="254" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="255" pos:column="25">System</name><op:operator pos:line="255" pos:column="31">.</op:operator><name pos:line="255" pos:column="32">out</name><op:operator pos:line="255" pos:column="35">.</op:operator><name pos:line="255" pos:column="36">println</name></name><argument_list pos:line="255" pos:column="43">(<argument><expr><name pos:line="255" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="258" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="260" pos:column="17">finally <block pos:line="260" pos:column="25">{

			<comment type="line" pos:line="262" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="265" pos:column="17">return <expr><name pos:line="265" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>


	<comment type="block" pos:line="270" pos:column="9">/*
	 * updateEmployeeDetauls function takes in the inputs of the the new office address and new office hours
	 * 
	 * checks if it is an employee
	 * 
	 * if updated returns true
	 * 
	 * 
	 * else the function returns false
	 */</comment>
	<function><type><specifier pos:line="280" pos:column="9">public</specifier> <specifier pos:line="280" pos:column="16">static</specifier> <name pos:line="280" pos:column="23">boolean</name></type> <name pos:line="280" pos:column="31">updateEmpDetails</name><parameter_list pos:line="280" pos:column="47">(<param><decl><type><name pos:line="280" pos:column="48">int</name></type> <name pos:line="280" pos:column="52">UIN</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="57">String</name></type> <name pos:line="280" pos:column="64">officeAddress</name></decl></param>,<param><decl><type><name pos:line="280" pos:column="78">String</name></type> <name pos:line="280" pos:column="85">officeHours</name></decl></param>)</parameter_list> <throws pos:line="280" pos:column="98">throws <argument><expr><name><name pos:line="280" pos:column="105">Student</name><op:operator pos:line="280" pos:column="112">.</op:operator><name pos:line="280" pos:column="113">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="280" pos:column="135">{

		
		<if pos:line="283" pos:column="17">if<condition pos:line="283" pos:column="19">(<expr><name pos:line="283" pos:column="20">officeAddress</name><op:operator pos:line="283" pos:column="33">==</op:operator><lit:literal type="null" pos:line="283" pos:column="35">null</lit:literal></expr>)</condition><then><block pos:line="283" pos:column="40">{
			<return pos:line="284" pos:column="25">return <expr><lit:literal type="boolean" pos:line="284" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="287" pos:column="17">if<condition pos:line="287" pos:column="19">(<expr><name pos:line="287" pos:column="20">officeHours</name><op:operator pos:line="287" pos:column="31">==</op:operator><lit:literal type="null" pos:line="287" pos:column="33">null</lit:literal></expr>)</condition><then><block pos:line="287" pos:column="38">{
			<return pos:line="288" pos:column="25">return <expr><lit:literal type="boolean" pos:line="288" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="291" pos:column="17">if<condition pos:line="291" pos:column="19">(<expr><call><name><name pos:line="291" pos:column="20">officeAddress</name><op:operator pos:line="291" pos:column="33">.</op:operator><name pos:line="291" pos:column="34">length</name></name><argument_list pos:line="291" pos:column="40">()</argument_list></call><op:operator pos:line="291" pos:column="42">==</op:operator><lit:literal type="number" pos:line="291" pos:column="44">0</lit:literal></expr>)</condition><then><block pos:line="291" pos:column="46">{
			<return pos:line="292" pos:column="25">return <expr><lit:literal type="boolean" pos:line="292" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="295" pos:column="17">if<condition pos:line="295" pos:column="19">(<expr><call><name><name pos:line="295" pos:column="20">officeHours</name><op:operator pos:line="295" pos:column="31">.</op:operator><name pos:line="295" pos:column="32">length</name></name><argument_list pos:line="295" pos:column="38">()</argument_list></call><op:operator pos:line="295" pos:column="40">==</op:operator><lit:literal type="number" pos:line="295" pos:column="42">0</lit:literal></expr>)</condition><then><block pos:line="295" pos:column="44">{
			<return pos:line="296" pos:column="25">return <expr><lit:literal type="boolean" pos:line="296" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="299" pos:column="17">boolean</name></type> <name pos:line="299" pos:column="25">check</name> <init pos:line="299" pos:column="31">= <expr><call><name pos:line="299" pos:column="33">checkIfEmployee</name><argument_list pos:line="299" pos:column="48">(<argument><expr><name pos:line="299" pos:column="49">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="299" pos:column="54">//check if the UIN passed is an employee</comment>
		<if pos:line="300" pos:column="17">if <condition pos:line="300" pos:column="20">(<expr><op:operator pos:line="300" pos:column="21">!</op:operator><name pos:line="300" pos:column="22">check</name></expr>)</condition><then pos:line="300" pos:column="28"> <block pos:line="300" pos:column="29">{
			<throw pos:line="301" pos:column="25">throw <expr><op:operator pos:line="301" pos:column="31">new</op:operator> <call><name><name pos:line="301" pos:column="35">Student</name><op:operator pos:line="301" pos:column="42">.</op:operator><name pos:line="301" pos:column="43">AccessDeniedException</name></name><argument_list pos:line="301" pos:column="64">()</argument_list></call></expr>;</throw><comment type="line" pos:line="301" pos:column="67">//else access is denied</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="304" pos:column="17">boolean</name></type> <name pos:line="304" pos:column="25">isUpdated</name> <init pos:line="304" pos:column="35">= <expr><lit:literal type="boolean" pos:line="304" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="305" pos:column="17">try <block pos:line="305" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="306" pos:column="25">Connection</name></type> <name pos:line="306" pos:column="36">conn</name> <init pos:line="306" pos:column="41">= <expr><call><name><name pos:line="306" pos:column="43">Database</name><op:operator pos:line="306" pos:column="51">.</op:operator><name pos:line="306" pos:column="52">getConnection</name></name><argument_list pos:line="306" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="306" pos:column="68">//establish a connection </comment>

			<try pos:line="308" pos:column="25">try <block pos:line="308" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="310" pos:column="33">boolean</name></type> <name pos:line="310" pos:column="41">isExisting</name> <init pos:line="310" pos:column="52">= <expr><call><name pos:line="310" pos:column="54">updateEmpDetailscheck</name><argument_list pos:line="310" pos:column="75">(<argument><expr><name pos:line="310" pos:column="76">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="310" pos:column="81">//check if the employee details already exist</comment>

				<if pos:line="312" pos:column="33">if <condition pos:line="312" pos:column="36">(<expr><name pos:line="312" pos:column="37">isExisting</name></expr>)</condition><then pos:line="312" pos:column="48"> <block pos:line="312" pos:column="49">{

					<comment type="line" pos:line="314" pos:column="41">// updating the employee details</comment>
					<expr_stmt><expr><call><name><name pos:line="315" pos:column="41">System</name><op:operator pos:line="315" pos:column="47">.</op:operator><name pos:line="315" pos:column="48">out</name><op:operator pos:line="315" pos:column="51">.</op:operator><name pos:line="315" pos:column="52">println</name></name><argument_list pos:line="315" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="60">"Updating the emp details in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="316" pos:column="41">String</name></type> <name pos:line="316" pos:column="48">SQLPeopleInsert</name> <init pos:line="316" pos:column="64">= <expr><lit:literal type="string" pos:line="316" pos:column="66">"UPDATE employee SET OfficeAddress=?, OfficeHours=? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="317" pos:column="41">PreparedStatement</name></type> <name pos:line="317" pos:column="59">stmt</name> <init pos:line="317" pos:column="64">= <expr><call><name><name pos:line="317" pos:column="66">conn</name><op:operator pos:line="317" pos:column="70">.</op:operator><name pos:line="317" pos:column="71">prepareStatement</name></name><argument_list pos:line="317" pos:column="87">(<argument><expr><name pos:line="317" pos:column="88">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="318" pos:column="41">stmt</name><op:operator pos:line="318" pos:column="45">.</op:operator><name pos:line="318" pos:column="46">setString</name></name><argument_list pos:line="318" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="318" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="318" pos:column="59">officeAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="318" pos:column="74">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="319" pos:column="41">stmt</name><op:operator pos:line="319" pos:column="45">.</op:operator><name pos:line="319" pos:column="46">setString</name></name><argument_list pos:line="319" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="319" pos:column="56">2</lit:literal></expr></argument>, <argument><expr><name pos:line="319" pos:column="59">officeHours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="320" pos:column="41">stmt</name><op:operator pos:line="320" pos:column="45">.</op:operator><name pos:line="320" pos:column="46">setInt</name></name><argument_list pos:line="320" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="320" pos:column="53">3</lit:literal></expr></argument>, <argument><expr><name pos:line="320" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="320" pos:column="61">//set the UIN</comment>
					<expr_stmt><expr><call><name><name pos:line="321" pos:column="41">System</name><op:operator pos:line="321" pos:column="47">.</op:operator><name pos:line="321" pos:column="48">out</name><op:operator pos:line="321" pos:column="51">.</op:operator><name pos:line="321" pos:column="52">println</name></name><argument_list pos:line="321" pos:column="59">(<argument><expr><name pos:line="321" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="322" pos:column="41">int</name></type> <name pos:line="322" pos:column="45">i</name> <init pos:line="322" pos:column="47">= <expr><call><name><name pos:line="322" pos:column="49">stmt</name><op:operator pos:line="322" pos:column="53">.</op:operator><name pos:line="322" pos:column="54">executeUpdate</name></name><argument_list pos:line="322" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="322" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="324" pos:column="41">DBAnnotation</name><op:operator pos:line="324" pos:column="53">.</op:operator><name pos:line="324" pos:column="54">annoate</name></name><argument_list pos:line="324" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="62">"officeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="324" pos:column="79">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="324" pos:column="91">"OfficeAddress"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="324" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="325" pos:column="41">DBAnnotation</name><op:operator pos:line="325" pos:column="53">.</op:operator><name pos:line="325" pos:column="54">annoate</name></name><argument_list pos:line="325" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="62">"officeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="77">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="89">"OfficeHours"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="325" pos:column="104">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="326" pos:column="41">DBAnnotation</name><op:operator pos:line="326" pos:column="53">.</op:operator><name pos:line="326" pos:column="54">annoate</name></name><argument_list pos:line="326" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="69">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="326" pos:column="81">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="326" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="328" pos:column="41">System</name><op:operator pos:line="328" pos:column="47">.</op:operator><name pos:line="328" pos:column="48">out</name><op:operator pos:line="328" pos:column="51">.</op:operator><name pos:line="328" pos:column="52">println</name></name><argument_list pos:line="328" pos:column="59">(<argument><expr><name pos:line="328" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="329" pos:column="41">System</name><op:operator pos:line="329" pos:column="47">.</op:operator><name pos:line="329" pos:column="48">out</name><op:operator pos:line="329" pos:column="51">.</op:operator><name pos:line="329" pos:column="52">println</name></name><argument_list pos:line="329" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="329" pos:column="60">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name pos:line="331" pos:column="41">Database</name><op:operator pos:line="331" pos:column="49">.</op:operator><name pos:line="331" pos:column="50">commitTransaction</name></name><argument_list pos:line="331" pos:column="67">(<argument><expr><name pos:line="331" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="331" pos:column="74">//commit the transaction</comment>
					<expr_stmt><expr><name pos:line="332" pos:column="41">isUpdated</name> <op:operator pos:line="332" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="332" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then>

				<else pos:line="335" pos:column="33">else <block pos:line="335" pos:column="38">{
					<comment type="line" pos:line="336" pos:column="41">//if the resultset doesnt return anything then its not an employee</comment>
					<expr_stmt><expr><call><name><name pos:line="337" pos:column="41">System</name><op:operator pos:line="337" pos:column="47">.</op:operator><name pos:line="337" pos:column="48">out</name><op:operator pos:line="337" pos:column="51">.</op:operator><name pos:line="337" pos:column="52">println</name></name><argument_list pos:line="337" pos:column="59">(<argument><expr><name pos:line="337" pos:column="60">UIN</name> <op:operator pos:line="337" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="337" pos:column="66">" is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="342" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="343" pos:column="25">catch <parameter_list pos:line="343" pos:column="31">(<param><decl><type><name pos:line="343" pos:column="32">SQLException</name></type> <name pos:line="343" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="343" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="344" pos:column="33">System</name><op:operator pos:line="344" pos:column="39">.</op:operator><name pos:line="344" pos:column="40">out</name><op:operator pos:line="344" pos:column="43">.</op:operator><name pos:line="344" pos:column="44">println</name></name><argument_list pos:line="344" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="344" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="345" pos:column="33">e</name><op:operator pos:line="345" pos:column="34">.</op:operator><name pos:line="345" pos:column="35">printStackTrace</name></name><argument_list pos:line="345" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">System</name><op:operator pos:line="346" pos:column="39">.</op:operator><name pos:line="346" pos:column="40">out</name><op:operator pos:line="346" pos:column="43">.</op:operator><name pos:line="346" pos:column="44">println</name></name><argument_list pos:line="346" pos:column="51">(<argument><expr><name pos:line="346" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="349" pos:column="25">finally <block pos:line="349" pos:column="33">{
				<comment type="line" pos:line="350" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="351" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="354" pos:column="17">//catch block</comment>
		<catch pos:line="355" pos:column="17">catch <parameter_list pos:line="355" pos:column="23">(<param><decl><type><name pos:line="355" pos:column="24">Exception</name></type> <name pos:line="355" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="355" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="356" pos:column="25">System</name><op:operator pos:line="356" pos:column="31">.</op:operator><name pos:line="356" pos:column="32">out</name><op:operator pos:line="356" pos:column="35">.</op:operator><name pos:line="356" pos:column="36">println</name></name><argument_list pos:line="356" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="357" pos:column="25">e</name><op:operator pos:line="357" pos:column="26">.</op:operator><name pos:line="357" pos:column="27">printStackTrace</name></name><argument_list pos:line="357" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="358" pos:column="25">System</name><op:operator pos:line="358" pos:column="31">.</op:operator><name pos:line="358" pos:column="32">out</name><op:operator pos:line="358" pos:column="35">.</op:operator><name pos:line="358" pos:column="36">println</name></name><argument_list pos:line="358" pos:column="43">(<argument><expr><name pos:line="358" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="361" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="363" pos:column="17">finally <block pos:line="363" pos:column="25">{

			<comment type="line" pos:line="365" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="368" pos:column="17">return <expr><name pos:line="368" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="371" pos:column="9">/*the function is to mainly check if the employee exists in the table
	 * 
	 * the parameter passed is the UIN
	 * 
	 *  the return type is boolean */</comment>
	<function><type><specifier pos:line="376" pos:column="9">public</specifier> <specifier pos:line="376" pos:column="16">static</specifier> <name pos:line="376" pos:column="23">boolean</name></type> <name pos:line="376" pos:column="31">updateEmpDetailscheck</name><parameter_list pos:line="376" pos:column="52">(<param><decl><type><name pos:line="376" pos:column="53">int</name></type> <name pos:line="376" pos:column="57">UIN</name></decl></param>)</parameter_list> <block pos:line="376" pos:column="62">{

		<decl_stmt><decl><type><name pos:line="378" pos:column="17">boolean</name></type> <name pos:line="378" pos:column="25">isUpdated</name> <init pos:line="378" pos:column="35">= <expr><lit:literal type="boolean" pos:line="378" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="379" pos:column="17">try <block pos:line="379" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="380" pos:column="25">Connection</name></type> <name pos:line="380" pos:column="36">conn</name> <init pos:line="380" pos:column="41">= <expr><call><name><name pos:line="380" pos:column="43">Database</name><op:operator pos:line="380" pos:column="51">.</op:operator><name pos:line="380" pos:column="52">getConnection</name></name><argument_list pos:line="380" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="380" pos:column="68">//establish connection</comment>
			<decl_stmt><decl><type><name pos:line="381" pos:column="25">String</name></type> <name pos:line="381" pos:column="32">SQLselectEmp</name> <init pos:line="381" pos:column="45">= <expr><lit:literal type="string" pos:line="381" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="383" pos:column="25">try <block pos:line="383" pos:column="29">{

				<expr_stmt><expr><name pos:line="385" pos:column="33">SQLselectEmp</name> <op:operator pos:line="385" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="385" pos:column="48">"Select UIN From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="386" pos:column="33">PreparedStatement</name></type> <name pos:line="386" pos:column="51">stmt</name> <init pos:line="386" pos:column="56">= <expr><call><name><name pos:line="386" pos:column="58">conn</name><op:operator pos:line="386" pos:column="62">.</op:operator><name pos:line="386" pos:column="63">prepareStatement</name></name><argument_list pos:line="386" pos:column="79">(<argument><expr><name pos:line="386" pos:column="80">SQLselectEmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="387" pos:column="33">stmt</name><op:operator pos:line="387" pos:column="37">.</op:operator><name pos:line="387" pos:column="38">setInt</name></name><argument_list pos:line="387" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="387" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="388" pos:column="33">ResultSet</name></type> <name pos:line="388" pos:column="43">rs</name> <init pos:line="388" pos:column="46">= <expr><call><name><name pos:line="388" pos:column="48">stmt</name><op:operator pos:line="388" pos:column="52">.</op:operator><name pos:line="388" pos:column="53">executeQuery</name></name><argument_list pos:line="388" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="388" pos:column="68">//execute query</comment>

				<if pos:line="390" pos:column="33">if <condition pos:line="390" pos:column="36">(<expr><call><name><name pos:line="390" pos:column="37">rs</name><op:operator pos:line="390" pos:column="39">.</op:operator><name pos:line="390" pos:column="40">first</name></name><argument_list pos:line="390" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="390" pos:column="48"> <block pos:line="390" pos:column="49">{
					<comment type="line" pos:line="391" pos:column="41">//if exists the return true</comment>
					<return pos:line="392" pos:column="41">return <expr><lit:literal type="boolean" pos:line="392" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>

				<else pos:line="395" pos:column="33">else <block pos:line="395" pos:column="38">{
					
					<expr_stmt><expr><call><name><name pos:line="397" pos:column="41">System</name><op:operator pos:line="397" pos:column="47">.</op:operator><name pos:line="397" pos:column="48">out</name><op:operator pos:line="397" pos:column="51">.</op:operator><name pos:line="397" pos:column="52">println</name></name><argument_list pos:line="397" pos:column="59">(<argument><expr><name pos:line="397" pos:column="60">UIN</name> <op:operator pos:line="397" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="397" pos:column="66">" is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="402" pos:column="25">//catch block</comment>
			<catch pos:line="403" pos:column="25">catch <parameter_list pos:line="403" pos:column="31">(<param><decl><type><name pos:line="403" pos:column="32">SQLException</name></type> <name pos:line="403" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="403" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="404" pos:column="33">System</name><op:operator pos:line="404" pos:column="39">.</op:operator><name pos:line="404" pos:column="40">out</name><op:operator pos:line="404" pos:column="43">.</op:operator><name pos:line="404" pos:column="44">println</name></name><argument_list pos:line="404" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="404" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="405" pos:column="33">e</name><op:operator pos:line="405" pos:column="34">.</op:operator><name pos:line="405" pos:column="35">printStackTrace</name></name><argument_list pos:line="405" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="406" pos:column="33">System</name><op:operator pos:line="406" pos:column="39">.</op:operator><name pos:line="406" pos:column="40">out</name><op:operator pos:line="406" pos:column="43">.</op:operator><name pos:line="406" pos:column="44">println</name></name><argument_list pos:line="406" pos:column="51">(<argument><expr><name pos:line="406" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<comment type="line" pos:line="409" pos:column="25">//finally block</comment>
			<finally pos:line="410" pos:column="25">finally <block pos:line="410" pos:column="33">{
				<comment type="line" pos:line="411" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="412" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="415" pos:column="17">//catch the outer try s general exception</comment>
		<catch pos:line="416" pos:column="17">catch <parameter_list pos:line="416" pos:column="23">(<param><decl><type><name pos:line="416" pos:column="24">Exception</name></type> <name pos:line="416" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="416" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="417" pos:column="25">System</name><op:operator pos:line="417" pos:column="31">.</op:operator><name pos:line="417" pos:column="32">out</name><op:operator pos:line="417" pos:column="35">.</op:operator><name pos:line="417" pos:column="36">println</name></name><argument_list pos:line="417" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="417" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="418" pos:column="25">e</name><op:operator pos:line="418" pos:column="26">.</op:operator><name pos:line="418" pos:column="27">printStackTrace</name></name><argument_list pos:line="418" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="419" pos:column="25">System</name><op:operator pos:line="419" pos:column="31">.</op:operator><name pos:line="419" pos:column="32">out</name><op:operator pos:line="419" pos:column="35">.</op:operator><name pos:line="419" pos:column="36">println</name></name><argument_list pos:line="419" pos:column="43">(<argument><expr><name pos:line="419" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="423" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="425" pos:column="17">finally <block pos:line="425" pos:column="25">{

			<comment type="line" pos:line="427" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="430" pos:column="17">return <expr><name pos:line="430" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="433" pos:column="9">/*to give a bonus to any employee then the percentage and the UIN is passed
	 * 
	 *  the return type is boolean */</comment>
	<function><type><specifier pos:line="436" pos:column="9">public</specifier> <specifier pos:line="436" pos:column="16">static</specifier> <name pos:line="436" pos:column="23">boolean</name></type> <name pos:line="436" pos:column="31">giveBonus</name><parameter_list pos:line="436" pos:column="40">(<param><decl><type><name pos:line="436" pos:column="41">int</name></type> <name pos:line="436" pos:column="45">UIN</name></decl></param>, <param><decl><type><name pos:line="436" pos:column="50">double</name></type> <name pos:line="436" pos:column="57">bonusPercent</name></decl></param>)</parameter_list> <throws pos:line="436" pos:column="71">throws <argument><expr><name pos:line="436" pos:column="78">bonusNotValidException</name></expr></argument>, <argument><expr><name><name pos:line="436" pos:column="102">Student</name><op:operator pos:line="436" pos:column="109">.</op:operator><name pos:line="436" pos:column="110">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="436" pos:column="132">{

		<decl_stmt><decl><type><name pos:line="438" pos:column="17">boolean</name></type> <name pos:line="438" pos:column="25">check</name> <init pos:line="438" pos:column="31">= <expr><call><name pos:line="438" pos:column="33">checkIfEmployee</name><argument_list pos:line="438" pos:column="48">(<argument><expr><name pos:line="438" pos:column="49">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="438" pos:column="54">//check it its an employee</comment>
		<if pos:line="439" pos:column="17">if <condition pos:line="439" pos:column="20">(<expr><op:operator pos:line="439" pos:column="21">!</op:operator><name pos:line="439" pos:column="22">check</name></expr>)</condition><then pos:line="439" pos:column="28"> <block pos:line="439" pos:column="29">{
			<throw pos:line="440" pos:column="25">throw <expr><op:operator pos:line="440" pos:column="31">new</op:operator> <call><name><name pos:line="440" pos:column="35">Student</name><op:operator pos:line="440" pos:column="42">.</op:operator><name pos:line="440" pos:column="43">AccessDeniedException</name></name><argument_list pos:line="440" pos:column="64">()</argument_list></call></expr>;</throw><comment type="line" pos:line="440" pos:column="67">//throw an exception if its not an employee</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="443" pos:column="17">boolean</name></type> <name pos:line="443" pos:column="25">giveBonus</name> <init pos:line="443" pos:column="35">= <expr><lit:literal type="boolean" pos:line="443" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="444" pos:column="17">//if the bonus percent is not appropriate then throw an exception</comment>
		<if pos:line="445" pos:column="17">if <condition pos:line="445" pos:column="20">(<expr><name><name pos:line="445" pos:column="21">bonusPercent</name> <argument_list pos:line="445" pos:column="34">&lt; <argument><lit:literal type="number" pos:line="445" pos:column="36">5.0</lit:literal> <op:operator pos:line="445" pos:column="40">||</op:operator> <name pos:line="445" pos:column="43">bonusPercent</name></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="445" pos:column="58">30.0</lit:literal></expr>)</condition><then pos:line="445" pos:column="63"> <block pos:line="445" pos:column="64">{
			<throw pos:line="446" pos:column="25">throw <expr><op:operator pos:line="446" pos:column="31">new</op:operator> <call><name pos:line="446" pos:column="35">bonusNotValidException</name><argument_list pos:line="446" pos:column="57">()</argument_list></call></expr>;</throw>
		}</block></then></if>

		<try pos:line="449" pos:column="17">try <block pos:line="449" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="450" pos:column="25">Connection</name></type> <name pos:line="450" pos:column="36">conn</name> <init pos:line="450" pos:column="41">= <expr><call><name><name pos:line="450" pos:column="43">Database</name><op:operator pos:line="450" pos:column="51">.</op:operator><name pos:line="450" pos:column="52">getConnection</name></name><argument_list pos:line="450" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="450" pos:column="68">//get the connection</comment>

			<try pos:line="452" pos:column="25">try <block pos:line="452" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="454" pos:column="33">boolean</name></type> <name pos:line="454" pos:column="41">isExisting</name> <init pos:line="454" pos:column="52">= <expr><call><name pos:line="454" pos:column="54">giveBonusCheck</name><argument_list pos:line="454" pos:column="68">(<argument><expr><name pos:line="454" pos:column="69">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="454" pos:column="74">//checking if the UIn exists in the batabase</comment>

				<if pos:line="456" pos:column="33">if <condition pos:line="456" pos:column="36">(<expr><name pos:line="456" pos:column="37">isExisting</name></expr>)</condition><then pos:line="456" pos:column="48"> <block pos:line="456" pos:column="49">{

					<decl_stmt><decl><type><name pos:line="458" pos:column="41">double</name></type> <name pos:line="458" pos:column="48">retreivedSalaryForBonus</name> <init pos:line="458" pos:column="72">= <expr><call><name pos:line="458" pos:column="74">getsalary</name><argument_list pos:line="458" pos:column="83">(<argument><expr><name pos:line="458" pos:column="84">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="458" pos:column="89">//get the salary of the employee</comment>

					<if pos:line="460" pos:column="41">if <condition pos:line="460" pos:column="44">(<expr><name pos:line="460" pos:column="45">retreivedSalaryForBonus</name> <op:operator pos:line="460" pos:column="69">!=</op:operator> <op:operator pos:line="460" pos:column="72">-</op:operator><lit:literal type="number" pos:line="460" pos:column="73">1</lit:literal></expr>)</condition><then pos:line="460" pos:column="75"> <block pos:line="460" pos:column="76">{
						<comment type="line" pos:line="461" pos:column="49">//calculate the new salary</comment>
						<decl_stmt><decl><type><name pos:line="462" pos:column="49">double</name></type> <name pos:line="462" pos:column="56">newSalary</name> <init pos:line="462" pos:column="66">= <expr><op:operator pos:line="462" pos:column="68">(</op:operator><name pos:line="462" pos:column="69">retreivedSalaryForBonus</name> <op:operator pos:line="462" pos:column="93">+</op:operator> <op:operator pos:line="462" pos:column="95">(</op:operator><op:operator pos:line="462" pos:column="96">(</op:operator><name pos:line="462" pos:column="97">retreivedSalaryForBonus</name> <op:operator pos:line="462" pos:column="121">*</op:operator> <name pos:line="462" pos:column="123">bonusPercent</name><op:operator pos:line="462" pos:column="135">)</op:operator> <op:operator pos:line="462" pos:column="137">/</op:operator> <lit:literal type="number" pos:line="462" pos:column="139">100</lit:literal><op:operator pos:line="462" pos:column="142">)</op:operator><op:operator pos:line="462" pos:column="143">)</op:operator></expr></init></decl>;</decl_stmt>


						<expr_stmt><expr><call><name><name pos:line="465" pos:column="49">System</name><op:operator pos:line="465" pos:column="55">.</op:operator><name pos:line="465" pos:column="56">out</name><op:operator pos:line="465" pos:column="59">.</op:operator><name pos:line="465" pos:column="60">println</name></name><argument_list pos:line="465" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="465" pos:column="68">"Updating the emp details in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="466" pos:column="49">String</name></type> <name pos:line="466" pos:column="56">SQLPeopleInsert</name> <init pos:line="466" pos:column="72">= <expr><lit:literal type="string" pos:line="466" pos:column="74">"UPDATE employee SET Salary=? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="467" pos:column="49">PreparedStatement</name></type> <name pos:line="467" pos:column="67">stmt</name> <init pos:line="467" pos:column="72">= <expr><call><name><name pos:line="467" pos:column="74">conn</name><op:operator pos:line="467" pos:column="78">.</op:operator><name pos:line="467" pos:column="79">prepareStatement</name></name><argument_list pos:line="467" pos:column="95">(<argument><expr><name pos:line="467" pos:column="96">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="468" pos:column="49">stmt</name><op:operator pos:line="468" pos:column="53">.</op:operator><name pos:line="468" pos:column="54">setDouble</name></name><argument_list pos:line="468" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="468" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="468" pos:column="67">newSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="468" pos:column="78">//set the new salary</comment>
						<expr_stmt><expr><call><name><name pos:line="469" pos:column="49">stmt</name><op:operator pos:line="469" pos:column="53">.</op:operator><name pos:line="469" pos:column="54">setInt</name></name><argument_list pos:line="469" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="469" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="469" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="469" pos:column="69">//for the UIN</comment>
						<expr_stmt><expr><call><name><name pos:line="470" pos:column="49">System</name><op:operator pos:line="470" pos:column="55">.</op:operator><name pos:line="470" pos:column="56">out</name><op:operator pos:line="470" pos:column="59">.</op:operator><name pos:line="470" pos:column="60">println</name></name><argument_list pos:line="470" pos:column="67">(<argument><expr><name pos:line="470" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="471" pos:column="49">int</name></type> <name pos:line="471" pos:column="53">i</name> <init pos:line="471" pos:column="55">= <expr><call><name><name pos:line="471" pos:column="57">stmt</name><op:operator pos:line="471" pos:column="61">.</op:operator><name pos:line="471" pos:column="62">executeUpdate</name></name><argument_list pos:line="471" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="471" pos:column="78">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="473" pos:column="49">DBAnnotation</name><op:operator pos:line="473" pos:column="61">.</op:operator><name pos:line="473" pos:column="62">annoate</name></name><argument_list pos:line="473" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="473" pos:column="70">"newSalary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="473" pos:column="83">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="473" pos:column="95">"Salary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="473" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="474" pos:column="49">DBAnnotation</name><op:operator pos:line="474" pos:column="61">.</op:operator><name pos:line="474" pos:column="62">annoate</name></name><argument_list pos:line="474" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="474" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="474" pos:column="77">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="474" pos:column="89">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="474" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="476" pos:column="49">System</name><op:operator pos:line="476" pos:column="55">.</op:operator><name pos:line="476" pos:column="56">out</name><op:operator pos:line="476" pos:column="59">.</op:operator><name pos:line="476" pos:column="60">println</name></name><argument_list pos:line="476" pos:column="67">(<argument><expr><name pos:line="476" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="477" pos:column="49">System</name><op:operator pos:line="477" pos:column="55">.</op:operator><name pos:line="477" pos:column="56">out</name><op:operator pos:line="477" pos:column="59">.</op:operator><name pos:line="477" pos:column="60">println</name></name><argument_list pos:line="477" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="477" pos:column="68">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name><name pos:line="479" pos:column="49">Database</name><op:operator pos:line="479" pos:column="57">.</op:operator><name pos:line="479" pos:column="58">commitTransaction</name></name><argument_list pos:line="479" pos:column="75">(<argument><expr><name pos:line="479" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="480" pos:column="49">giveBonus</name> <op:operator pos:line="480" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="480" pos:column="61">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>

				}</block></then>

				<else pos:line="485" pos:column="33">else <block pos:line="485" pos:column="38">{
					<comment type="line" pos:line="486" pos:column="41">//if the resultset is empty then not an employee</comment>
					<expr_stmt><expr><call><name><name pos:line="487" pos:column="41">System</name><op:operator pos:line="487" pos:column="47">.</op:operator><name pos:line="487" pos:column="48">out</name><op:operator pos:line="487" pos:column="51">.</op:operator><name pos:line="487" pos:column="52">println</name></name><argument_list pos:line="487" pos:column="59">(<argument><expr><name pos:line="487" pos:column="60">UIN</name> <op:operator pos:line="487" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="487" pos:column="66">" is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="492" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="493" pos:column="25">catch <parameter_list pos:line="493" pos:column="31">(<param><decl><type><name pos:line="493" pos:column="32">SQLException</name></type> <name pos:line="493" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="493" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="494" pos:column="33">System</name><op:operator pos:line="494" pos:column="39">.</op:operator><name pos:line="494" pos:column="40">out</name><op:operator pos:line="494" pos:column="43">.</op:operator><name pos:line="494" pos:column="44">println</name></name><argument_list pos:line="494" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="494" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="495" pos:column="33">e</name><op:operator pos:line="495" pos:column="34">.</op:operator><name pos:line="495" pos:column="35">printStackTrace</name></name><argument_list pos:line="495" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">System</name><op:operator pos:line="496" pos:column="39">.</op:operator><name pos:line="496" pos:column="40">out</name><op:operator pos:line="496" pos:column="43">.</op:operator><name pos:line="496" pos:column="44">println</name></name><argument_list pos:line="496" pos:column="51">(<argument><expr><name pos:line="496" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="499" pos:column="25">finally <block pos:line="499" pos:column="33">{
				<comment type="line" pos:line="500" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="501" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="504" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="505" pos:column="17">catch <parameter_list pos:line="505" pos:column="23">(<param><decl><type><name pos:line="505" pos:column="24">Exception</name></type> <name pos:line="505" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="505" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="506" pos:column="25">System</name><op:operator pos:line="506" pos:column="31">.</op:operator><name pos:line="506" pos:column="32">out</name><op:operator pos:line="506" pos:column="35">.</op:operator><name pos:line="506" pos:column="36">println</name></name><argument_list pos:line="506" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="506" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="507" pos:column="25">e</name><op:operator pos:line="507" pos:column="26">.</op:operator><name pos:line="507" pos:column="27">printStackTrace</name></name><argument_list pos:line="507" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="508" pos:column="25">System</name><op:operator pos:line="508" pos:column="31">.</op:operator><name pos:line="508" pos:column="32">out</name><op:operator pos:line="508" pos:column="35">.</op:operator><name pos:line="508" pos:column="36">println</name></name><argument_list pos:line="508" pos:column="43">(<argument><expr><name pos:line="508" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="511" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="513" pos:column="17">finally <block pos:line="513" pos:column="25">{

			<comment type="line" pos:line="515" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="518" pos:column="17">return <expr><name pos:line="518" pos:column="24">giveBonus</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="521" pos:column="9">/*to give a bonus to any employee then the salary should be retrieved then this function is called
	 * 
	 * the UIN is passed
	 * 
	 *  the return type is double */</comment>
	<function><type><specifier pos:line="526" pos:column="9">public</specifier> <specifier pos:line="526" pos:column="16">static</specifier> <name pos:line="526" pos:column="23">double</name></type> <name pos:line="526" pos:column="30">getsalary</name><parameter_list pos:line="526" pos:column="39">(<param><decl><type><name pos:line="526" pos:column="40">int</name></type> <name pos:line="526" pos:column="44">UIN</name></decl></param>)</parameter_list> <block pos:line="526" pos:column="49">{

		<try pos:line="528" pos:column="17">try <block pos:line="528" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="529" pos:column="25">Connection</name></type> <name pos:line="529" pos:column="36">conn</name> <init pos:line="529" pos:column="41">= <expr><call><name><name pos:line="529" pos:column="43">Database</name><op:operator pos:line="529" pos:column="51">.</op:operator><name pos:line="529" pos:column="52">getConnection</name></name><argument_list pos:line="529" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="529" pos:column="68">//establish the salary</comment>
			<decl_stmt><decl><type><name pos:line="530" pos:column="25">String</name></type> <name pos:line="530" pos:column="32">SQLselectEmp</name> <init pos:line="530" pos:column="45">= <expr><lit:literal type="string" pos:line="530" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="532" pos:column="25">try <block pos:line="532" pos:column="29">{

				<expr_stmt><expr><name pos:line="534" pos:column="33">SQLselectEmp</name> <op:operator pos:line="534" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="534" pos:column="48">"Select Salary From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="535" pos:column="33">PreparedStatement</name></type> <name pos:line="535" pos:column="51">stmt</name> <init pos:line="535" pos:column="56">= <expr><call><name><name pos:line="535" pos:column="58">conn</name><op:operator pos:line="535" pos:column="62">.</op:operator><name pos:line="535" pos:column="63">prepareStatement</name></name><argument_list pos:line="535" pos:column="79">(<argument><expr><name pos:line="535" pos:column="80">SQLselectEmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="536" pos:column="33">stmt</name><op:operator pos:line="536" pos:column="37">.</op:operator><name pos:line="536" pos:column="38">setInt</name></name><argument_list pos:line="536" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="536" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="536" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="536" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="537" pos:column="33">ResultSet</name></type> <name pos:line="537" pos:column="43">rs</name> <init pos:line="537" pos:column="46">= <expr><call><name><name pos:line="537" pos:column="48">stmt</name><op:operator pos:line="537" pos:column="52">.</op:operator><name pos:line="537" pos:column="53">executeQuery</name></name><argument_list pos:line="537" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="537" pos:column="68">//execute the query</comment>

				<if pos:line="539" pos:column="33">if <condition pos:line="539" pos:column="36">(<expr><call><name><name pos:line="539" pos:column="37">rs</name><op:operator pos:line="539" pos:column="39">.</op:operator><name pos:line="539" pos:column="40">first</name></name><argument_list pos:line="539" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="539" pos:column="48"> <block pos:line="539" pos:column="49">{
					<comment type="line" pos:line="540" pos:column="41">//retrieve the salary</comment>
					<expr_stmt><expr><call><name><name pos:line="541" pos:column="41">DBAnnotation</name><op:operator pos:line="541" pos:column="53">.</op:operator><name pos:line="541" pos:column="54">annoate</name></name><argument_list pos:line="541" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="541" pos:column="62">"retreivedSalary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="541" pos:column="81">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="541" pos:column="93">"Salary"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="541" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="542" pos:column="41">double</name></type> <name pos:line="542" pos:column="48">retreivedSalary</name> <init pos:line="542" pos:column="64">= <expr><call><name><name pos:line="542" pos:column="66">rs</name><op:operator pos:line="542" pos:column="68">.</op:operator><name pos:line="542" pos:column="69">getDouble</name></name><argument_list pos:line="542" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="542" pos:column="79">"Salary"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<return pos:line="544" pos:column="41">return <expr><name pos:line="544" pos:column="48">retreivedSalary</name></expr>;</return>

				}</block></then>

				<else pos:line="548" pos:column="33">else <block pos:line="548" pos:column="38">{
					<comment type="line" pos:line="549" pos:column="41">//not an employee</comment>
					<expr_stmt><expr><call><name><name pos:line="550" pos:column="41">System</name><op:operator pos:line="550" pos:column="47">.</op:operator><name pos:line="550" pos:column="48">out</name><op:operator pos:line="550" pos:column="51">.</op:operator><name pos:line="550" pos:column="52">println</name></name><argument_list pos:line="550" pos:column="59">(<argument><expr><name pos:line="550" pos:column="60">UIN</name> <op:operator pos:line="550" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="550" pos:column="66">" is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="555" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="556" pos:column="25">catch <parameter_list pos:line="556" pos:column="31">(<param><decl><type><name pos:line="556" pos:column="32">SQLException</name></type> <name pos:line="556" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="556" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="557" pos:column="33">System</name><op:operator pos:line="557" pos:column="39">.</op:operator><name pos:line="557" pos:column="40">out</name><op:operator pos:line="557" pos:column="43">.</op:operator><name pos:line="557" pos:column="44">println</name></name><argument_list pos:line="557" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="557" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="558" pos:column="33">e</name><op:operator pos:line="558" pos:column="34">.</op:operator><name pos:line="558" pos:column="35">printStackTrace</name></name><argument_list pos:line="558" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="559" pos:column="33">System</name><op:operator pos:line="559" pos:column="39">.</op:operator><name pos:line="559" pos:column="40">out</name><op:operator pos:line="559" pos:column="43">.</op:operator><name pos:line="559" pos:column="44">println</name></name><argument_list pos:line="559" pos:column="51">(<argument><expr><name pos:line="559" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="562" pos:column="25">finally <block pos:line="562" pos:column="33">{
				<comment type="line" pos:line="563" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="564" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="567" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="568" pos:column="17">catch <parameter_list pos:line="568" pos:column="23">(<param><decl><type><name pos:line="568" pos:column="24">Exception</name></type> <name pos:line="568" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="568" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="569" pos:column="25">System</name><op:operator pos:line="569" pos:column="31">.</op:operator><name pos:line="569" pos:column="32">out</name><op:operator pos:line="569" pos:column="35">.</op:operator><name pos:line="569" pos:column="36">println</name></name><argument_list pos:line="569" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="569" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="570" pos:column="25">e</name><op:operator pos:line="570" pos:column="26">.</op:operator><name pos:line="570" pos:column="27">printStackTrace</name></name><argument_list pos:line="570" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="571" pos:column="25">System</name><op:operator pos:line="571" pos:column="31">.</op:operator><name pos:line="571" pos:column="32">out</name><op:operator pos:line="571" pos:column="35">.</op:operator><name pos:line="571" pos:column="36">println</name></name><argument_list pos:line="571" pos:column="43">(<argument><expr><name pos:line="571" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="574" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="576" pos:column="17">finally <block pos:line="576" pos:column="25">{

			<comment type="line" pos:line="578" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="581" pos:column="17">return <expr><op:operator pos:line="581" pos:column="24">-</op:operator><lit:literal type="number" pos:line="581" pos:column="25">1</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="584" pos:column="9">/*the function is to mainly check if the employee exists in the table
	 * 
	 * the parameter passed is the UIN
	 * 
	 *  the return type is boolean */</comment>
	<function><type><specifier pos:line="589" pos:column="9">public</specifier> <specifier pos:line="589" pos:column="16">static</specifier> <name pos:line="589" pos:column="23">boolean</name></type> <name pos:line="589" pos:column="31">giveBonusCheck</name><parameter_list pos:line="589" pos:column="45">(<param><decl><type><name pos:line="589" pos:column="46">int</name></type> <name pos:line="589" pos:column="50">UIN</name></decl></param>)</parameter_list> <block pos:line="589" pos:column="55">{

		<decl_stmt><decl><type><name pos:line="591" pos:column="17">boolean</name></type> <name pos:line="591" pos:column="25">giveBonusCheck</name> <init pos:line="591" pos:column="40">= <expr><lit:literal type="boolean" pos:line="591" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="593" pos:column="17">try <block pos:line="593" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="594" pos:column="25">Connection</name></type> <name pos:line="594" pos:column="36">conn</name> <init pos:line="594" pos:column="41">= <expr><call><name><name pos:line="594" pos:column="43">Database</name><op:operator pos:line="594" pos:column="51">.</op:operator><name pos:line="594" pos:column="52">getConnection</name></name><argument_list pos:line="594" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="594" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="595" pos:column="25">String</name></type> <name pos:line="595" pos:column="32">SQLselectEmp</name> <init pos:line="595" pos:column="45">= <expr><lit:literal type="string" pos:line="595" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="597" pos:column="25">try <block pos:line="597" pos:column="29">{

				<expr_stmt><expr><name pos:line="599" pos:column="33">SQLselectEmp</name> <op:operator pos:line="599" pos:column="46">=</op:operator> <lit:literal type="string" pos:line="599" pos:column="48">"Select * From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="600" pos:column="33">PreparedStatement</name></type> <name pos:line="600" pos:column="51">stmt</name> <init pos:line="600" pos:column="56">= <expr><call><name><name pos:line="600" pos:column="58">conn</name><op:operator pos:line="600" pos:column="62">.</op:operator><name pos:line="600" pos:column="63">prepareStatement</name></name><argument_list pos:line="600" pos:column="79">(<argument><expr><name pos:line="600" pos:column="80">SQLselectEmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="601" pos:column="33">stmt</name><op:operator pos:line="601" pos:column="37">.</op:operator><name pos:line="601" pos:column="38">setInt</name></name><argument_list pos:line="601" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="601" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="601" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="601" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="602" pos:column="33">ResultSet</name></type> <name pos:line="602" pos:column="43">rs</name> <init pos:line="602" pos:column="46">= <expr><call><name><name pos:line="602" pos:column="48">stmt</name><op:operator pos:line="602" pos:column="52">.</op:operator><name pos:line="602" pos:column="53">executeQuery</name></name><argument_list pos:line="602" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="604" pos:column="33">if <condition pos:line="604" pos:column="36">(<expr><call><name><name pos:line="604" pos:column="37">rs</name><op:operator pos:line="604" pos:column="39">.</op:operator><name pos:line="604" pos:column="40">first</name></name><argument_list pos:line="604" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="604" pos:column="48"> <block pos:line="604" pos:column="49">{
					<comment type="line" pos:line="605" pos:column="41">//if exists then return true</comment>
					<return pos:line="606" pos:column="41">return <expr><lit:literal type="boolean" pos:line="606" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>

				<else pos:line="609" pos:column="33">else <block pos:line="609" pos:column="38">{

					<expr_stmt><expr><call><name><name pos:line="611" pos:column="41">System</name><op:operator pos:line="611" pos:column="47">.</op:operator><name pos:line="611" pos:column="48">out</name><op:operator pos:line="611" pos:column="51">.</op:operator><name pos:line="611" pos:column="52">println</name></name><argument_list pos:line="611" pos:column="59">(<argument><expr><name pos:line="611" pos:column="60">UIN</name> <op:operator pos:line="611" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="611" pos:column="66">" is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>

			<comment type="line" pos:line="617" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="618" pos:column="25">catch <parameter_list pos:line="618" pos:column="31">(<param><decl><type><name pos:line="618" pos:column="32">SQLException</name></type> <name pos:line="618" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="618" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="619" pos:column="33">System</name><op:operator pos:line="619" pos:column="39">.</op:operator><name pos:line="619" pos:column="40">out</name><op:operator pos:line="619" pos:column="43">.</op:operator><name pos:line="619" pos:column="44">println</name></name><argument_list pos:line="619" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="619" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="620" pos:column="33">e</name><op:operator pos:line="620" pos:column="34">.</op:operator><name pos:line="620" pos:column="35">printStackTrace</name></name><argument_list pos:line="620" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="621" pos:column="33">System</name><op:operator pos:line="621" pos:column="39">.</op:operator><name pos:line="621" pos:column="40">out</name><op:operator pos:line="621" pos:column="43">.</op:operator><name pos:line="621" pos:column="44">println</name></name><argument_list pos:line="621" pos:column="51">(<argument><expr><name pos:line="621" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="624" pos:column="25">finally <block pos:line="624" pos:column="33">{
				<comment type="line" pos:line="625" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="626" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="629" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="630" pos:column="17">catch <parameter_list pos:line="630" pos:column="23">(<param><decl><type><name pos:line="630" pos:column="24">Exception</name></type> <name pos:line="630" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="630" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="631" pos:column="25">System</name><op:operator pos:line="631" pos:column="31">.</op:operator><name pos:line="631" pos:column="32">out</name><op:operator pos:line="631" pos:column="35">.</op:operator><name pos:line="631" pos:column="36">println</name></name><argument_list pos:line="631" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="631" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="632" pos:column="25">e</name><op:operator pos:line="632" pos:column="26">.</op:operator><name pos:line="632" pos:column="27">printStackTrace</name></name><argument_list pos:line="632" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="633" pos:column="25">System</name><op:operator pos:line="633" pos:column="31">.</op:operator><name pos:line="633" pos:column="32">out</name><op:operator pos:line="633" pos:column="35">.</op:operator><name pos:line="633" pos:column="36">println</name></name><argument_list pos:line="633" pos:column="43">(<argument><expr><name pos:line="633" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="636" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="638" pos:column="17">finally <block pos:line="638" pos:column="25">{

			<comment type="line" pos:line="640" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="643" pos:column="17">return <expr><name pos:line="643" pos:column="24">giveBonusCheck</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="646" pos:column="9">/*The delete function takes in the UIN of the user
	*
	*The return type is boolean*/</comment>
	<function><type><specifier pos:line="649" pos:column="9">public</specifier> <specifier pos:line="649" pos:column="16">static</specifier> <name pos:line="649" pos:column="23">boolean</name></type> <name pos:line="649" pos:column="31">deleteFromEmployeeByUIN</name><parameter_list pos:line="649" pos:column="54">(<param><decl><type><name pos:line="649" pos:column="55">int</name></type> <name pos:line="649" pos:column="59">UIN</name></decl></param>)</parameter_list> <block pos:line="649" pos:column="64">{

		<decl_stmt><decl><type><name pos:line="651" pos:column="17">boolean</name></type> <name pos:line="651" pos:column="25">isDeleted</name> <init pos:line="651" pos:column="35">= <expr><lit:literal type="boolean" pos:line="651" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="651" pos:column="43">//create a boolean value for returning. set it to false</comment>

		<try pos:line="653" pos:column="17">try <block pos:line="653" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="654" pos:column="25">Connection</name></type> <name pos:line="654" pos:column="36">conn</name> <init pos:line="654" pos:column="41">= <expr><call><name><name pos:line="654" pos:column="43">Database</name><op:operator pos:line="654" pos:column="51">.</op:operator><name pos:line="654" pos:column="52">getConnection</name></name><argument_list pos:line="654" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="654" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="655" pos:column="25">String</name></type> <name pos:line="655" pos:column="32">SQLPeopleDelete</name> <init pos:line="655" pos:column="48">= <expr><lit:literal type="string" pos:line="655" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="656" pos:column="25">try <block pos:line="656" pos:column="29">{
				<if pos:line="657" pos:column="33">if <condition pos:line="657" pos:column="36">(<expr><name pos:line="657" pos:column="37">conn</name> <op:operator pos:line="657" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="657" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="657" pos:column="50"> <block pos:line="657" pos:column="51">{

					<decl_stmt><decl><type><name pos:line="659" pos:column="41">boolean</name></type> <name pos:line="659" pos:column="49">ifExisting</name> <init pos:line="659" pos:column="60">= <expr><call><name pos:line="659" pos:column="62">deleteFromEmployeeByUINCheck</name><argument_list pos:line="659" pos:column="90">(<argument><expr><name pos:line="659" pos:column="91">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="659" pos:column="96">//check if the emp exists</comment>

					<if pos:line="661" pos:column="41">if <condition pos:line="661" pos:column="44">(<expr><name pos:line="661" pos:column="45">ifExisting</name></expr>)</condition><then pos:line="661" pos:column="56"> <block pos:line="661" pos:column="57">{

						<expr_stmt><expr><name pos:line="663" pos:column="49">SQLPeopleDelete</name> <op:operator pos:line="663" pos:column="65">=</op:operator> <lit:literal type="string" pos:line="663" pos:column="67">"Delete From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="664" pos:column="49">PreparedStatement</name></type> <name pos:line="664" pos:column="67">stmt</name> <init pos:line="664" pos:column="72">= <expr><call><name><name pos:line="664" pos:column="74">conn</name><op:operator pos:line="664" pos:column="78">.</op:operator><name pos:line="664" pos:column="79">prepareStatement</name></name><argument_list pos:line="664" pos:column="95">(<argument><expr><name pos:line="664" pos:column="96">SQLPeopleDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="665" pos:column="49">stmt</name><op:operator pos:line="665" pos:column="53">.</op:operator><name pos:line="665" pos:column="54">setInt</name></name><argument_list pos:line="665" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="665" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="665" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="665" pos:column="69">//set the UIN</comment>
						<decl_stmt><decl><type><name pos:line="666" pos:column="49">int</name></type> <name pos:line="666" pos:column="53">rs1</name> <init pos:line="666" pos:column="57">= <expr><call><name><name pos:line="666" pos:column="59">stmt</name><op:operator pos:line="666" pos:column="63">.</op:operator><name pos:line="666" pos:column="64">executeUpdate</name></name><argument_list pos:line="666" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="666" pos:column="80">//execute the query</comment>
						<expr_stmt><expr><call><name><name pos:line="667" pos:column="49">DBAnnotation</name><op:operator pos:line="667" pos:column="61">.</op:operator><name pos:line="667" pos:column="62">annoate</name></name><argument_list pos:line="667" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="667" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="667" pos:column="77">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="667" pos:column="89">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="667" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="669" pos:column="49">System</name><op:operator pos:line="669" pos:column="55">.</op:operator><name pos:line="669" pos:column="56">out</name><op:operator pos:line="669" pos:column="59">.</op:operator><name pos:line="669" pos:column="60">println</name></name><argument_list pos:line="669" pos:column="67">(<argument><expr><name pos:line="669" pos:column="68">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="670" pos:column="49">System</name><op:operator pos:line="670" pos:column="55">.</op:operator><name pos:line="670" pos:column="56">out</name><op:operator pos:line="670" pos:column="59">.</op:operator><name pos:line="670" pos:column="60">println</name></name><argument_list pos:line="670" pos:column="67">(<argument><expr><name pos:line="670" pos:column="68">UIN</name> <op:operator pos:line="670" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="670" pos:column="74">" is deleted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="671" pos:column="49">isDeleted</name> <op:operator pos:line="671" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="671" pos:column="61">true</lit:literal></expr>;</expr_stmt>

					}</block></then>

					<else pos:line="675" pos:column="41">else <block pos:line="675" pos:column="46">{
						<comment type="line" pos:line="676" pos:column="49">//emp does not exist</comment>
						<expr_stmt><expr><call><name><name pos:line="677" pos:column="49">System</name><op:operator pos:line="677" pos:column="55">.</op:operator><name pos:line="677" pos:column="56">out</name><op:operator pos:line="677" pos:column="59">.</op:operator><name pos:line="677" pos:column="60">println</name></name><argument_list pos:line="677" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="677" pos:column="68">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="683" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="684" pos:column="25">catch <parameter_list pos:line="684" pos:column="31">(<param><decl><type><name pos:line="684" pos:column="32">SQLException</name></type> <name pos:line="684" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="684" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="685" pos:column="33">System</name><op:operator pos:line="685" pos:column="39">.</op:operator><name pos:line="685" pos:column="40">out</name><op:operator pos:line="685" pos:column="43">.</op:operator><name pos:line="685" pos:column="44">println</name></name><argument_list pos:line="685" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="685" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="686" pos:column="33">e</name><op:operator pos:line="686" pos:column="34">.</op:operator><name pos:line="686" pos:column="35">printStackTrace</name></name><argument_list pos:line="686" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="687" pos:column="33">System</name><op:operator pos:line="687" pos:column="39">.</op:operator><name pos:line="687" pos:column="40">out</name><op:operator pos:line="687" pos:column="43">.</op:operator><name pos:line="687" pos:column="44">println</name></name><argument_list pos:line="687" pos:column="51">(<argument><expr><name pos:line="687" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="690" pos:column="25">finally <block pos:line="690" pos:column="33">{
				<comment type="line" pos:line="691" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>

		<comment type="line" pos:line="695" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="696" pos:column="17">catch <parameter_list pos:line="696" pos:column="23">(<param><decl><type><name pos:line="696" pos:column="24">Exception</name></type> <name pos:line="696" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="696" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="697" pos:column="25">System</name><op:operator pos:line="697" pos:column="31">.</op:operator><name pos:line="697" pos:column="32">out</name><op:operator pos:line="697" pos:column="35">.</op:operator><name pos:line="697" pos:column="36">println</name></name><argument_list pos:line="697" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="697" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="698" pos:column="25">e</name><op:operator pos:line="698" pos:column="26">.</op:operator><name pos:line="698" pos:column="27">printStackTrace</name></name><argument_list pos:line="698" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="699" pos:column="25">System</name><op:operator pos:line="699" pos:column="31">.</op:operator><name pos:line="699" pos:column="32">out</name><op:operator pos:line="699" pos:column="35">.</op:operator><name pos:line="699" pos:column="36">println</name></name><argument_list pos:line="699" pos:column="43">(<argument><expr><name pos:line="699" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="703" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="705" pos:column="17">finally <block pos:line="705" pos:column="25">{

			<comment type="line" pos:line="707" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="710" pos:column="17">return <expr><name pos:line="710" pos:column="24">isDeleted</name></expr>;</return>

	}</block></function>
	<comment type="block" pos:line="713" pos:column="9">/*The function is mainly check if th UIN passed exists in the table or not
	 * 
	 * the return type is boolean
	 * */</comment>
	<function><type><specifier pos:line="717" pos:column="9">public</specifier> <specifier pos:line="717" pos:column="16">static</specifier> <name pos:line="717" pos:column="23">boolean</name></type> <name pos:line="717" pos:column="31">deleteFromEmployeeByUINCheck</name><parameter_list pos:line="717" pos:column="59">(<param><decl><type><name pos:line="717" pos:column="60">int</name></type> <name pos:line="717" pos:column="64">UIN</name></decl></param>)</parameter_list> <block pos:line="717" pos:column="69">{

		<decl_stmt><decl><type><name pos:line="719" pos:column="17">boolean</name></type> <name pos:line="719" pos:column="25">isExisting</name> <init pos:line="719" pos:column="36">= <expr><lit:literal type="boolean" pos:line="719" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="721" pos:column="17">try <block pos:line="721" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="722" pos:column="25">Connection</name></type> <name pos:line="722" pos:column="36">conn</name> <init pos:line="722" pos:column="41">= <expr><call><name><name pos:line="722" pos:column="43">Database</name><op:operator pos:line="722" pos:column="51">.</op:operator><name pos:line="722" pos:column="52">getConnection</name></name><argument_list pos:line="722" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="722" pos:column="68">//get connection to db</comment>
			<decl_stmt><decl><type><name pos:line="723" pos:column="25">String</name></type> <name pos:line="723" pos:column="32">SQLEmployeeSelect</name> <init pos:line="723" pos:column="50">= <expr><lit:literal type="string" pos:line="723" pos:column="52">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="724" pos:column="25">try <block pos:line="724" pos:column="29">{
				<if pos:line="725" pos:column="33">if <condition pos:line="725" pos:column="36">(<expr><name pos:line="725" pos:column="37">conn</name> <op:operator pos:line="725" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="725" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="725" pos:column="50"> <block pos:line="725" pos:column="51">{
					<expr_stmt><expr><name pos:line="726" pos:column="41">SQLEmployeeSelect</name> <op:operator pos:line="726" pos:column="59">=</op:operator> <lit:literal type="string" pos:line="726" pos:column="61">"Select UIN From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="727" pos:column="41">PreparedStatement</name></type> <name pos:line="727" pos:column="59">stmt</name> <init pos:line="727" pos:column="64">= <expr><call><name><name pos:line="727" pos:column="66">conn</name><op:operator pos:line="727" pos:column="70">.</op:operator><name pos:line="727" pos:column="71">prepareStatement</name></name><argument_list pos:line="727" pos:column="87">(<argument><expr><name pos:line="727" pos:column="88">SQLEmployeeSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="728" pos:column="41">stmt</name><op:operator pos:line="728" pos:column="45">.</op:operator><name pos:line="728" pos:column="46">setInt</name></name><argument_list pos:line="728" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="728" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="728" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="728" pos:column="61">//set the UIN</comment>
					<decl_stmt><decl><type><name pos:line="729" pos:column="41">ResultSet</name></type> <name pos:line="729" pos:column="51">rs</name> <init pos:line="729" pos:column="54">= <expr><call><name><name pos:line="729" pos:column="56">stmt</name><op:operator pos:line="729" pos:column="60">.</op:operator><name pos:line="729" pos:column="61">executeQuery</name></name><argument_list pos:line="729" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="729" pos:column="76">//execute the query</comment>

					<if pos:line="731" pos:column="41">if <condition pos:line="731" pos:column="44">(<expr><call><name><name pos:line="731" pos:column="45">rs</name><op:operator pos:line="731" pos:column="47">.</op:operator><name pos:line="731" pos:column="48">first</name></name><argument_list pos:line="731" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="731" pos:column="56"> <block pos:line="731" pos:column="57">{
						<comment type="line" pos:line="732" pos:column="49">//if exists then return true</comment>
						<return pos:line="733" pos:column="49">return <expr><lit:literal type="boolean" pos:line="733" pos:column="56">true</lit:literal></expr>;</return>

					}</block></then>

					<else pos:line="737" pos:column="41">else <block pos:line="737" pos:column="46">{
						<comment type="line" pos:line="738" pos:column="49">//else empl does not exist</comment>
						<expr_stmt><expr><call><name><name pos:line="739" pos:column="49">System</name><op:operator pos:line="739" pos:column="55">.</op:operator><name pos:line="739" pos:column="56">out</name><op:operator pos:line="739" pos:column="59">.</op:operator><name pos:line="739" pos:column="60">println</name></name><argument_list pos:line="739" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="739" pos:column="68">"UIN does not exist in the employee table"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="745" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="746" pos:column="25">catch <parameter_list pos:line="746" pos:column="31">(<param><decl><type><name pos:line="746" pos:column="32">SQLException</name></type> <name pos:line="746" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="746" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="747" pos:column="33">System</name><op:operator pos:line="747" pos:column="39">.</op:operator><name pos:line="747" pos:column="40">out</name><op:operator pos:line="747" pos:column="43">.</op:operator><name pos:line="747" pos:column="44">println</name></name><argument_list pos:line="747" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="747" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="748" pos:column="33">e</name><op:operator pos:line="748" pos:column="34">.</op:operator><name pos:line="748" pos:column="35">printStackTrace</name></name><argument_list pos:line="748" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="749" pos:column="33">System</name><op:operator pos:line="749" pos:column="39">.</op:operator><name pos:line="749" pos:column="40">out</name><op:operator pos:line="749" pos:column="43">.</op:operator><name pos:line="749" pos:column="44">println</name></name><argument_list pos:line="749" pos:column="51">(<argument><expr><name pos:line="749" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="752" pos:column="25">finally <block pos:line="752" pos:column="33">{
				<comment type="line" pos:line="753" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		
		<comment type="line" pos:line="757" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="758" pos:column="17">catch <parameter_list pos:line="758" pos:column="23">(<param><decl><type><name pos:line="758" pos:column="24">Exception</name></type> <name pos:line="758" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="758" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="759" pos:column="25">System</name><op:operator pos:line="759" pos:column="31">.</op:operator><name pos:line="759" pos:column="32">out</name><op:operator pos:line="759" pos:column="35">.</op:operator><name pos:line="759" pos:column="36">println</name></name><argument_list pos:line="759" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="759" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="760" pos:column="25">e</name><op:operator pos:line="760" pos:column="26">.</op:operator><name pos:line="760" pos:column="27">printStackTrace</name></name><argument_list pos:line="760" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="761" pos:column="25">System</name><op:operator pos:line="761" pos:column="31">.</op:operator><name pos:line="761" pos:column="32">out</name><op:operator pos:line="761" pos:column="35">.</op:operator><name pos:line="761" pos:column="36">println</name></name><argument_list pos:line="761" pos:column="43">(<argument><expr><name pos:line="761" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="765" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
																here the finally block does not contain any general statements*/</comment>
		<finally pos:line="767" pos:column="17">finally <block pos:line="767" pos:column="25">{

			<comment type="line" pos:line="769" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="772" pos:column="17">return <expr><name pos:line="772" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="776" pos:column="9">/*The delete function takes in the Username of the user
	*
	*The return type is boolean*/</comment>
	<function><type><specifier pos:line="779" pos:column="9">public</specifier> <specifier pos:line="779" pos:column="16">static</specifier> <name pos:line="779" pos:column="23">boolean</name></type> <name pos:line="779" pos:column="31">deleteFromEmployeeByUserName</name><parameter_list pos:line="779" pos:column="59">(<param><decl><type><name pos:line="779" pos:column="60">String</name></type> <name pos:line="779" pos:column="67">userName</name></decl></param>)</parameter_list> <block pos:line="779" pos:column="77">{

		<decl_stmt><decl><type><name pos:line="781" pos:column="17">boolean</name></type> <name pos:line="781" pos:column="25">isDeleted</name> <init pos:line="781" pos:column="35">= <expr><lit:literal type="boolean" pos:line="781" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="781" pos:column="43">//create a boolean value for returning. set it to false</comment>
		<try pos:line="782" pos:column="17">try <block pos:line="782" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="783" pos:column="25">Connection</name></type> <name pos:line="783" pos:column="36">conn</name> <init pos:line="783" pos:column="41">= <expr><call><name><name pos:line="783" pos:column="43">Database</name><op:operator pos:line="783" pos:column="51">.</op:operator><name pos:line="783" pos:column="52">getConnection</name></name><argument_list pos:line="783" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="783" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="784" pos:column="25">String</name></type> <name pos:line="784" pos:column="32">SQLPeopleDelete</name> <init pos:line="784" pos:column="48">= <expr><lit:literal type="string" pos:line="784" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="785" pos:column="25">try <block pos:line="785" pos:column="29">{
				<if pos:line="786" pos:column="33">if <condition pos:line="786" pos:column="36">(<expr><name pos:line="786" pos:column="37">conn</name> <op:operator pos:line="786" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="786" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="786" pos:column="50"> <block pos:line="786" pos:column="51">{

					<decl_stmt><decl><type><name pos:line="788" pos:column="41">boolean</name></type> <name pos:line="788" pos:column="49">isExisting</name> <init pos:line="788" pos:column="60">= <expr><call><name pos:line="788" pos:column="62">deleteFromEmployeeByUserNameCheck</name><argument_list pos:line="788" pos:column="95">(<argument><expr><name pos:line="788" pos:column="96">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="788" pos:column="106">//check if the emp exists</comment>

					<if pos:line="790" pos:column="41">if <condition pos:line="790" pos:column="44">(<expr><name pos:line="790" pos:column="45">isExisting</name></expr>)</condition><then pos:line="790" pos:column="56"> <block pos:line="790" pos:column="57">{
						<decl_stmt><decl><type><name pos:line="791" pos:column="49">int</name></type> <name pos:line="791" pos:column="53">getUINtoDelete</name> <init pos:line="791" pos:column="68">= <expr><call><name pos:line="791" pos:column="70">getEmployeeUIN</name><argument_list pos:line="791" pos:column="84">(<argument><expr><name pos:line="791" pos:column="85">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="791" pos:column="95">//retreive the UIN</comment>

						<expr_stmt><expr><name pos:line="793" pos:column="49">SQLPeopleDelete</name> <op:operator pos:line="793" pos:column="65">=</op:operator> <lit:literal type="string" pos:line="793" pos:column="67">"Delete From employee where UIN=?;"</lit:literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="794" pos:column="49">PreparedStatement</name></type> <name pos:line="794" pos:column="67">stmt</name> <init pos:line="794" pos:column="72">= <expr><call><name><name pos:line="794" pos:column="74">conn</name><op:operator pos:line="794" pos:column="78">.</op:operator><name pos:line="794" pos:column="79">prepareStatement</name></name><argument_list pos:line="794" pos:column="95">(<argument><expr><name pos:line="794" pos:column="96">SQLPeopleDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="795" pos:column="49">stmt</name><op:operator pos:line="795" pos:column="53">.</op:operator><name pos:line="795" pos:column="54">setInt</name></name><argument_list pos:line="795" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="795" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="795" pos:column="64">getUINtoDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="795" pos:column="80">//set the UIN</comment>
						<decl_stmt><decl><type><name pos:line="796" pos:column="49">int</name></type> <name pos:line="796" pos:column="53">rs1</name> <init pos:line="796" pos:column="57">= <expr><call><name><name pos:line="796" pos:column="59">stmt</name><op:operator pos:line="796" pos:column="63">.</op:operator><name pos:line="796" pos:column="64">executeUpdate</name></name><argument_list pos:line="796" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="796" pos:column="80">//execute the query</comment>
						<expr_stmt><expr><call><name><name pos:line="797" pos:column="49">DBAnnotation</name><op:operator pos:line="797" pos:column="61">.</op:operator><name pos:line="797" pos:column="62">annoate</name></name><argument_list pos:line="797" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="797" pos:column="70">"getUINtoDelete"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="797" pos:column="88">"employee"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="797" pos:column="100">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="797" pos:column="107">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="799" pos:column="49">System</name><op:operator pos:line="799" pos:column="55">.</op:operator><name pos:line="799" pos:column="56">out</name><op:operator pos:line="799" pos:column="59">.</op:operator><name pos:line="799" pos:column="60">println</name></name><argument_list pos:line="799" pos:column="67">(<argument><expr><name pos:line="799" pos:column="68">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="800" pos:column="49">System</name><op:operator pos:line="800" pos:column="55">.</op:operator><name pos:line="800" pos:column="56">out</name><op:operator pos:line="800" pos:column="59">.</op:operator><name pos:line="800" pos:column="60">println</name></name><argument_list pos:line="800" pos:column="67">(<argument><expr><name pos:line="800" pos:column="68">getUINtoDelete</name> <op:operator pos:line="800" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="800" pos:column="85">" is deleted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="801" pos:column="49">isDeleted</name> <op:operator pos:line="801" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="801" pos:column="61">true</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="801" pos:column="66">//set the return value to be true</comment>

					}</block></then>

					<else pos:line="805" pos:column="41">else <block pos:line="805" pos:column="46">{
						<comment type="line" pos:line="806" pos:column="49">//the emp does not exist to delete</comment>
						<expr_stmt><expr><call><name><name pos:line="807" pos:column="49">System</name><op:operator pos:line="807" pos:column="55">.</op:operator><name pos:line="807" pos:column="56">out</name><op:operator pos:line="807" pos:column="59">.</op:operator><name pos:line="807" pos:column="60">println</name></name><argument_list pos:line="807" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="807" pos:column="68">"UIN does not exist as a employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="813" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="814" pos:column="25">catch <parameter_list pos:line="814" pos:column="31">(<param><decl><type><name pos:line="814" pos:column="32">SQLException</name></type> <name pos:line="814" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="814" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="815" pos:column="33">System</name><op:operator pos:line="815" pos:column="39">.</op:operator><name pos:line="815" pos:column="40">out</name><op:operator pos:line="815" pos:column="43">.</op:operator><name pos:line="815" pos:column="44">println</name></name><argument_list pos:line="815" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="815" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="816" pos:column="33">e</name><op:operator pos:line="816" pos:column="34">.</op:operator><name pos:line="816" pos:column="35">printStackTrace</name></name><argument_list pos:line="816" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="817" pos:column="33">System</name><op:operator pos:line="817" pos:column="39">.</op:operator><name pos:line="817" pos:column="40">out</name><op:operator pos:line="817" pos:column="43">.</op:operator><name pos:line="817" pos:column="44">println</name></name><argument_list pos:line="817" pos:column="51">(<argument><expr><name pos:line="817" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<finally pos:line="820" pos:column="25">finally <block pos:line="820" pos:column="33">{
				<comment type="line" pos:line="821" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		
		<comment type="line" pos:line="825" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="826" pos:column="17">catch <parameter_list pos:line="826" pos:column="23">(<param><decl><type><name pos:line="826" pos:column="24">Exception</name></type> <name pos:line="826" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="826" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="827" pos:column="25">System</name><op:operator pos:line="827" pos:column="31">.</op:operator><name pos:line="827" pos:column="32">out</name><op:operator pos:line="827" pos:column="35">.</op:operator><name pos:line="827" pos:column="36">println</name></name><argument_list pos:line="827" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="827" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="828" pos:column="25">e</name><op:operator pos:line="828" pos:column="26">.</op:operator><name pos:line="828" pos:column="27">printStackTrace</name></name><argument_list pos:line="828" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="829" pos:column="25">System</name><op:operator pos:line="829" pos:column="31">.</op:operator><name pos:line="829" pos:column="32">out</name><op:operator pos:line="829" pos:column="35">.</op:operator><name pos:line="829" pos:column="36">println</name></name><argument_list pos:line="829" pos:column="43">(<argument><expr><name pos:line="829" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="833" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="835" pos:column="17">finally <block pos:line="835" pos:column="25">{

			<comment type="line" pos:line="837" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="840" pos:column="17">return <expr><name pos:line="840" pos:column="24">isDeleted</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="843" pos:column="9">//get the UIN if the username if the employee is passed</comment>
	<function><type><specifier pos:line="844" pos:column="9">public</specifier> <specifier pos:line="844" pos:column="16">static</specifier> <name pos:line="844" pos:column="23">int</name></type> <name pos:line="844" pos:column="27">getEmployeeUIN</name><parameter_list pos:line="844" pos:column="41">(<param><decl><type><name pos:line="844" pos:column="42">String</name></type> <name pos:line="844" pos:column="49">userName</name></decl></param>)</parameter_list> <block pos:line="844" pos:column="59">{

		<try pos:line="846" pos:column="17">try <block pos:line="846" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="847" pos:column="25">Connection</name></type> <name pos:line="847" pos:column="36">conn</name> <init pos:line="847" pos:column="41">= <expr><call><name><name pos:line="847" pos:column="43">Database</name><op:operator pos:line="847" pos:column="51">.</op:operator><name pos:line="847" pos:column="52">getConnection</name></name><argument_list pos:line="847" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="847" pos:column="68">//create a connection</comment>
			<decl_stmt><decl><type><name pos:line="848" pos:column="25">String</name></type> <name pos:line="848" pos:column="32">SQLUINSelect</name> <init pos:line="848" pos:column="45">= <expr><lit:literal type="string" pos:line="848" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="850" pos:column="25">try <block pos:line="850" pos:column="29">{
				<if pos:line="851" pos:column="33">if <condition pos:line="851" pos:column="36">(<expr><name pos:line="851" pos:column="37">conn</name> <op:operator pos:line="851" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="851" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="851" pos:column="50"> <block pos:line="851" pos:column="51">{
					<expr_stmt><expr><name pos:line="852" pos:column="41">SQLUINSelect</name> <op:operator pos:line="852" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="852" pos:column="56">"Select UIN From people where Username=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="853" pos:column="41">PreparedStatement</name></type> <name pos:line="853" pos:column="59">stmt</name> <init pos:line="853" pos:column="64">= <expr><call><name><name pos:line="853" pos:column="66">conn</name><op:operator pos:line="853" pos:column="70">.</op:operator><name pos:line="853" pos:column="71">prepareStatement</name></name><argument_list pos:line="853" pos:column="87">(<argument><expr><name pos:line="853" pos:column="88">SQLUINSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="854" pos:column="41">stmt</name><op:operator pos:line="854" pos:column="45">.</op:operator><name pos:line="854" pos:column="46">setString</name></name><argument_list pos:line="854" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="854" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="854" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="854" pos:column="69">//set the employee</comment>
					<decl_stmt><decl><type><name pos:line="855" pos:column="41">ResultSet</name></type> <name pos:line="855" pos:column="51">rs</name> <init pos:line="855" pos:column="54">= <expr><call><name><name pos:line="855" pos:column="56">stmt</name><op:operator pos:line="855" pos:column="60">.</op:operator><name pos:line="855" pos:column="61">executeQuery</name></name><argument_list pos:line="855" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="855" pos:column="76">//execute the query</comment>

					<if pos:line="857" pos:column="41">if <condition pos:line="857" pos:column="44">(<expr><call><name><name pos:line="857" pos:column="45">rs</name><op:operator pos:line="857" pos:column="47">.</op:operator><name pos:line="857" pos:column="48">first</name></name><argument_list pos:line="857" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="857" pos:column="56"> <block pos:line="857" pos:column="57">{

						<expr_stmt><expr><call><name><name pos:line="859" pos:column="49">DBAnnotation</name><op:operator pos:line="859" pos:column="61">.</op:operator><name pos:line="859" pos:column="62">annoate</name></name><argument_list pos:line="859" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="859" pos:column="70">"peopleRetrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="859" pos:column="92">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="859" pos:column="102">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="859" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="860" pos:column="49">int</name></type> <name pos:line="860" pos:column="53">peopleRetrievedUIN</name> <init pos:line="860" pos:column="72">= <expr><call><name><name pos:line="860" pos:column="74">rs</name><op:operator pos:line="860" pos:column="76">.</op:operator><name pos:line="860" pos:column="77">getInt</name></name><argument_list pos:line="860" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="860" pos:column="84">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="860" pos:column="91">//retrieve the query</comment>

						<return pos:line="862" pos:column="49">return <expr><name pos:line="862" pos:column="56">peopleRetrievedUIN</name></expr>;</return><comment type="line" pos:line="862" pos:column="75">//return the UIN</comment>

					}</block></then>

					<else pos:line="866" pos:column="41">else <block pos:line="866" pos:column="46">{
						<comment type="line" pos:line="867" pos:column="49">//not exists in the emp table</comment>
						<expr_stmt><expr><call><name><name pos:line="868" pos:column="49">System</name><op:operator pos:line="868" pos:column="55">.</op:operator><name pos:line="868" pos:column="56">out</name><op:operator pos:line="868" pos:column="59">.</op:operator><name pos:line="868" pos:column="60">println</name></name><argument_list pos:line="868" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="868" pos:column="68">"UIN does not exist as a employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			
			<comment type="line" pos:line="875" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="876" pos:column="25">catch <parameter_list pos:line="876" pos:column="31">(<param><decl><type><name pos:line="876" pos:column="32">SQLException</name></type> <name pos:line="876" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="876" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="877" pos:column="33">System</name><op:operator pos:line="877" pos:column="39">.</op:operator><name pos:line="877" pos:column="40">out</name><op:operator pos:line="877" pos:column="43">.</op:operator><name pos:line="877" pos:column="44">println</name></name><argument_list pos:line="877" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="877" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="878" pos:column="33">e</name><op:operator pos:line="878" pos:column="34">.</op:operator><name pos:line="878" pos:column="35">printStackTrace</name></name><argument_list pos:line="878" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="879" pos:column="33">System</name><op:operator pos:line="879" pos:column="39">.</op:operator><name pos:line="879" pos:column="40">out</name><op:operator pos:line="879" pos:column="43">.</op:operator><name pos:line="879" pos:column="44">println</name></name><argument_list pos:line="879" pos:column="51">(<argument><expr><name pos:line="879" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="882" pos:column="25">finally <block pos:line="882" pos:column="33">{
				<comment type="line" pos:line="883" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="886" pos:column="17">//CATCH BLOCK</comment>
		<catch pos:line="887" pos:column="17">catch <parameter_list pos:line="887" pos:column="23">(<param><decl><type><name pos:line="887" pos:column="24">Exception</name></type> <name pos:line="887" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="887" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="888" pos:column="25">System</name><op:operator pos:line="888" pos:column="31">.</op:operator><name pos:line="888" pos:column="32">out</name><op:operator pos:line="888" pos:column="35">.</op:operator><name pos:line="888" pos:column="36">println</name></name><argument_list pos:line="888" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="888" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="889" pos:column="25">e</name><op:operator pos:line="889" pos:column="26">.</op:operator><name pos:line="889" pos:column="27">printStackTrace</name></name><argument_list pos:line="889" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="890" pos:column="25">System</name><op:operator pos:line="890" pos:column="31">.</op:operator><name pos:line="890" pos:column="32">out</name><op:operator pos:line="890" pos:column="35">.</op:operator><name pos:line="890" pos:column="36">println</name></name><argument_list pos:line="890" pos:column="43">(<argument><expr><name pos:line="890" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="894" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
																here the finally block does not contain any general statements*/</comment>
		<finally pos:line="896" pos:column="17">finally <block pos:line="896" pos:column="25">{

			<comment type="line" pos:line="898" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="901" pos:column="17">return <expr><op:operator pos:line="901" pos:column="24">-</op:operator><lit:literal type="number" pos:line="901" pos:column="25">1</lit:literal></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="905" pos:column="9">/*this function is to mainly check if the username exists in the table
	 * 
	 *  return true if exists
	 *  
	 *  */</comment>
	<function><type><specifier pos:line="910" pos:column="9">public</specifier> <specifier pos:line="910" pos:column="16">static</specifier> <name pos:line="910" pos:column="23">boolean</name></type> <name pos:line="910" pos:column="31">deleteFromEmployeeByUserNameCheck</name><parameter_list pos:line="910" pos:column="64">(<param><decl><type><name pos:line="910" pos:column="65">String</name></type> <name pos:line="910" pos:column="72">userName</name></decl></param>)</parameter_list> <block pos:line="910" pos:column="82">{

		<decl_stmt><decl><type><name pos:line="912" pos:column="17">boolean</name></type> <name pos:line="912" pos:column="25">isExisting</name> <init pos:line="912" pos:column="36">= <expr><lit:literal type="boolean" pos:line="912" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="913" pos:column="17">try <block pos:line="913" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="914" pos:column="25">Connection</name></type> <name pos:line="914" pos:column="36">conn</name> <init pos:line="914" pos:column="41">= <expr><call><name><name pos:line="914" pos:column="43">Database</name><op:operator pos:line="914" pos:column="51">.</op:operator><name pos:line="914" pos:column="52">getConnection</name></name><argument_list pos:line="914" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="914" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="915" pos:column="25">String</name></type> <name pos:line="915" pos:column="32">SQLPeopleSelect</name> <init pos:line="915" pos:column="48">= <expr><lit:literal type="string" pos:line="915" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="916" pos:column="25">try <block pos:line="916" pos:column="29">{
				<if pos:line="917" pos:column="33">if <condition pos:line="917" pos:column="36">(<expr><name pos:line="917" pos:column="37">conn</name> <op:operator pos:line="917" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="917" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="917" pos:column="50"> <block pos:line="917" pos:column="51">{
					<expr_stmt><expr><name pos:line="918" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="918" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="918" pos:column="59">"Select UIN From people where Username=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="918" pos:column="102">//write the query</comment>
					<decl_stmt><decl><type><name pos:line="919" pos:column="41">PreparedStatement</name></type> <name pos:line="919" pos:column="59">stmt</name> <init pos:line="919" pos:column="64">= <expr><call><name><name pos:line="919" pos:column="66">conn</name><op:operator pos:line="919" pos:column="70">.</op:operator><name pos:line="919" pos:column="71">prepareStatement</name></name><argument_list pos:line="919" pos:column="87">(<argument><expr><name pos:line="919" pos:column="88">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="920" pos:column="41">stmt</name><op:operator pos:line="920" pos:column="45">.</op:operator><name pos:line="920" pos:column="46">setString</name></name><argument_list pos:line="920" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="920" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="920" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="920" pos:column="69">//set the uIN</comment>
					<decl_stmt><decl><type><name pos:line="921" pos:column="41">ResultSet</name></type> <name pos:line="921" pos:column="51">rs</name> <init pos:line="921" pos:column="54">= <expr><call><name><name pos:line="921" pos:column="56">stmt</name><op:operator pos:line="921" pos:column="60">.</op:operator><name pos:line="921" pos:column="61">executeQuery</name></name><argument_list pos:line="921" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="921" pos:column="76">//execute the query</comment>

					<if pos:line="923" pos:column="41">if <condition pos:line="923" pos:column="44">(<expr><call><name><name pos:line="923" pos:column="45">rs</name><op:operator pos:line="923" pos:column="47">.</op:operator><name pos:line="923" pos:column="48">first</name></name><argument_list pos:line="923" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="923" pos:column="56"> <block pos:line="923" pos:column="57">{
						<comment type="line" pos:line="924" pos:column="49">//if exists then return true</comment>
						<return pos:line="925" pos:column="49">return <expr><lit:literal type="boolean" pos:line="925" pos:column="56">true</lit:literal></expr>;</return>

					}</block></then>

					<else pos:line="929" pos:column="41">else <block pos:line="929" pos:column="46">{

						<expr_stmt><expr><call><name><name pos:line="931" pos:column="49">System</name><op:operator pos:line="931" pos:column="55">.</op:operator><name pos:line="931" pos:column="56">out</name><op:operator pos:line="931" pos:column="59">.</op:operator><name pos:line="931" pos:column="60">println</name></name><argument_list pos:line="931" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="931" pos:column="68">"UIN does not exist as a employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="937" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="938" pos:column="25">catch <parameter_list pos:line="938" pos:column="31">(<param><decl><type><name pos:line="938" pos:column="32">SQLException</name></type> <name pos:line="938" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="938" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="939" pos:column="33">System</name><op:operator pos:line="939" pos:column="39">.</op:operator><name pos:line="939" pos:column="40">out</name><op:operator pos:line="939" pos:column="43">.</op:operator><name pos:line="939" pos:column="44">println</name></name><argument_list pos:line="939" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="939" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="940" pos:column="33">e</name><op:operator pos:line="940" pos:column="34">.</op:operator><name pos:line="940" pos:column="35">printStackTrace</name></name><argument_list pos:line="940" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="941" pos:column="33">System</name><op:operator pos:line="941" pos:column="39">.</op:operator><name pos:line="941" pos:column="40">out</name><op:operator pos:line="941" pos:column="43">.</op:operator><name pos:line="941" pos:column="44">println</name></name><argument_list pos:line="941" pos:column="51">(<argument><expr><name pos:line="941" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="944" pos:column="25">finally <block pos:line="944" pos:column="33">{
				<comment type="line" pos:line="945" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		

		<comment type="line" pos:line="950" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="951" pos:column="17">catch <parameter_list pos:line="951" pos:column="23">(<param><decl><type><name pos:line="951" pos:column="24">Exception</name></type> <name pos:line="951" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="951" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="952" pos:column="25">System</name><op:operator pos:line="952" pos:column="31">.</op:operator><name pos:line="952" pos:column="32">out</name><op:operator pos:line="952" pos:column="35">.</op:operator><name pos:line="952" pos:column="36">println</name></name><argument_list pos:line="952" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="952" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="953" pos:column="25">e</name><op:operator pos:line="953" pos:column="26">.</op:operator><name pos:line="953" pos:column="27">printStackTrace</name></name><argument_list pos:line="953" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="954" pos:column="25">System</name><op:operator pos:line="954" pos:column="31">.</op:operator><name pos:line="954" pos:column="32">out</name><op:operator pos:line="954" pos:column="35">.</op:operator><name pos:line="954" pos:column="36">println</name></name><argument_list pos:line="954" pos:column="43">(<argument><expr><name pos:line="954" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="957" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="959" pos:column="17">finally <block pos:line="959" pos:column="25">{

			<comment type="line" pos:line="961" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="964" pos:column="17">return <expr><name pos:line="964" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="968" pos:column="9">/*retrieve all the employees that belong in a department 
	 * 
	 * when a dept name is passed as a parameter
	 * 
	 * return type is an arraylist of employee objects
	 * 
	 * this thorws an dept does not exist exception*/</comment>
	<function><type><specifier pos:line="975" pos:column="9">public</specifier> <specifier pos:line="975" pos:column="16">static</specifier> <name><name pos:line="975" pos:column="23">ArrayList</name><argument_list pos:line="975" pos:column="32">&lt;<argument><name pos:line="975" pos:column="33">Employee</name></argument>&gt;</argument_list></name></type> <name pos:line="975" pos:column="43">getAllEmployeesByDepartment</name><parameter_list pos:line="975" pos:column="70">(<param><decl><type><name pos:line="975" pos:column="71">String</name></type> <name pos:line="975" pos:column="78">deptName</name></decl></param>)</parameter_list> <throws pos:line="975" pos:column="88">throws <argument><expr><name><name pos:line="975" pos:column="95">Department</name><op:operator pos:line="975" pos:column="105">.</op:operator><name pos:line="975" pos:column="106">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="975" pos:column="138">{

		<decl_stmt><decl><type><name><name pos:line="977" pos:column="17">ArrayList</name><argument_list pos:line="977" pos:column="26">&lt;<argument><name pos:line="977" pos:column="27">Employee</name></argument>&gt;</argument_list></name></type> <name pos:line="977" pos:column="37">getAllEmpDept</name> <init pos:line="977" pos:column="51">= <expr><op:operator pos:line="977" pos:column="53">new</op:operator> <call><name><name pos:line="977" pos:column="57">ArrayList</name><argument_list pos:line="977" pos:column="66">&lt;<argument><name pos:line="977" pos:column="67">Employee</name></argument>&gt;</argument_list></name><argument_list pos:line="977" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="977" pos:column="79">//declare the arraylist and initialize it</comment>
		<try pos:line="978" pos:column="17">try <block pos:line="978" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="979" pos:column="25">Connection</name></type> <name pos:line="979" pos:column="36">conn</name> <init pos:line="979" pos:column="41">= <expr><call><name><name pos:line="979" pos:column="43">Database</name><op:operator pos:line="979" pos:column="51">.</op:operator><name pos:line="979" pos:column="52">getConnection</name></name><argument_list pos:line="979" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="979" pos:column="68">//get the conn</comment>

			<try pos:line="981" pos:column="25">try <block pos:line="981" pos:column="29">{
				<if pos:line="982" pos:column="33">if <condition pos:line="982" pos:column="36">(<expr><name pos:line="982" pos:column="37">conn</name> <op:operator pos:line="982" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="982" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="982" pos:column="50"> <block pos:line="982" pos:column="51">{


					<decl_stmt><decl><type><name pos:line="985" pos:column="41">String</name></type> <name pos:line="985" pos:column="48">getDeptID</name> <init pos:line="985" pos:column="58">= <expr><lit:literal type="string" pos:line="985" pos:column="60">"Select Username"</lit:literal>
							<op:operator pos:line="986" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="986" pos:column="59">" FROM employee natural join people natural join department"</lit:literal>
							<op:operator pos:line="987" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="987" pos:column="59">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="989" pos:column="41">PreparedStatement</name></type> <name pos:line="989" pos:column="59">statement</name> <init pos:line="989" pos:column="69">= <expr><call><name><name pos:line="989" pos:column="71">conn</name><op:operator pos:line="989" pos:column="75">.</op:operator><name pos:line="989" pos:column="76">prepareStatement</name></name><argument_list pos:line="989" pos:column="92">(<argument><expr><name pos:line="989" pos:column="93">getDeptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="990" pos:column="41">statement</name><op:operator pos:line="990" pos:column="50">.</op:operator><name pos:line="990" pos:column="51">setString</name></name><argument_list pos:line="990" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="990" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="990" pos:column="64">deptName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="990" pos:column="74">//set the dept name</comment>
					<decl_stmt><decl><type><name pos:line="991" pos:column="41">ResultSet</name></type> <name pos:line="991" pos:column="51">rs</name> <init pos:line="991" pos:column="54">= <expr><call><name><name pos:line="991" pos:column="56">statement</name><op:operator pos:line="991" pos:column="65">.</op:operator><name pos:line="991" pos:column="66">executeQuery</name></name><argument_list pos:line="991" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<while pos:line="993" pos:column="41">while <condition pos:line="993" pos:column="47">(<expr><call><name><name pos:line="993" pos:column="48">rs</name><op:operator pos:line="993" pos:column="50">.</op:operator><name pos:line="993" pos:column="51">next</name></name><argument_list pos:line="993" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="993" pos:column="59">{

						<expr_stmt><expr><call><name><name pos:line="995" pos:column="49">DBAnnotation</name><op:operator pos:line="995" pos:column="61">.</op:operator><name pos:line="995" pos:column="62">annoate</name></name><argument_list pos:line="995" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="995" pos:column="70">"retreivedProfUserNames"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="995" pos:column="96">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="995" pos:column="106">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="995" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="996" pos:column="49">String</name></type> <name pos:line="996" pos:column="56">retreivedProfUserNames</name> <init pos:line="996" pos:column="79">= <expr><call><name><name pos:line="996" pos:column="81">rs</name><op:operator pos:line="996" pos:column="83">.</op:operator><name pos:line="996" pos:column="84">getString</name></name><argument_list pos:line="996" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="996" pos:column="94">"Username"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="996" pos:column="106">//retrieve the usernames</comment>
						
						<decl_stmt><decl><type><name pos:line="998" pos:column="49">Employee</name></type> <name pos:line="998" pos:column="58">emps</name> <init pos:line="998" pos:column="63">= <expr><op:operator pos:line="998" pos:column="65">new</op:operator> <call><name pos:line="998" pos:column="69">Employee</name><argument_list pos:line="998" pos:column="77">(<argument><expr><name pos:line="998" pos:column="78">retreivedProfUserNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="998" pos:column="102">//pass it to the emp constructor</comment>
						<expr_stmt><expr><call><name><name pos:line="999" pos:column="49">getAllEmpDept</name><op:operator pos:line="999" pos:column="62">.</op:operator><name pos:line="999" pos:column="63">add</name></name><argument_list pos:line="999" pos:column="66">(<argument><expr><name pos:line="999" pos:column="67">emps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="999" pos:column="73">//add the objects to the array</comment>
						
						<expr_stmt><expr><call><name><name pos:line="1001" pos:column="49">DBAnnotation</name><op:operator pos:line="1001" pos:column="61">.</op:operator><name pos:line="1001" pos:column="62">annoate</name></name><argument_list pos:line="1001" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="1001" pos:column="70">"empUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1001" pos:column="85">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1001" pos:column="95">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1001" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="1002" pos:column="49">String</name></type> <name pos:line="1002" pos:column="56">empUserName</name><init pos:line="1002" pos:column="67">=<expr><call><name><name pos:line="1002" pos:column="68">emps</name><op:operator pos:line="1002" pos:column="72">.</op:operator><name pos:line="1002" pos:column="73">getName</name></name><argument_list pos:line="1002" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="1004" pos:column="49">System</name><op:operator pos:line="1004" pos:column="55">.</op:operator><name pos:line="1004" pos:column="56">out</name><op:operator pos:line="1004" pos:column="59">.</op:operator><name pos:line="1004" pos:column="60">println</name></name><argument_list pos:line="1004" pos:column="67">(<argument><expr><name pos:line="1004" pos:column="68">empUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></while>
				}</block></then></if>
			}</block>
			<comment type="line" pos:line="1009" pos:column="25">//catch block</comment>
			<catch pos:line="1010" pos:column="25">catch <parameter_list pos:line="1010" pos:column="31">(<param><decl><type><name pos:line="1010" pos:column="32">SQLException</name></type> <name pos:line="1010" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1010" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1011" pos:column="33">System</name><op:operator pos:line="1011" pos:column="39">.</op:operator><name pos:line="1011" pos:column="40">out</name><op:operator pos:line="1011" pos:column="43">.</op:operator><name pos:line="1011" pos:column="44">println</name></name><argument_list pos:line="1011" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1011" pos:column="52">"Error finding the department name "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1012" pos:column="33">System</name><op:operator pos:line="1012" pos:column="39">.</op:operator><name pos:line="1012" pos:column="40">out</name><op:operator pos:line="1012" pos:column="43">.</op:operator><name pos:line="1012" pos:column="44">println</name></name><argument_list pos:line="1012" pos:column="51">(<argument><expr><call><name><name pos:line="1012" pos:column="52">e</name><op:operator pos:line="1012" pos:column="53">.</op:operator><name pos:line="1012" pos:column="54">getMessage</name></name><argument_list pos:line="1012" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1013" pos:column="33">e</name><op:operator pos:line="1013" pos:column="34">.</op:operator><name pos:line="1013" pos:column="35">printStackTrace</name></name><argument_list pos:line="1013" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="line" pos:line="1016" pos:column="25">//finally block</comment>
			<finally pos:line="1017" pos:column="25">finally <block pos:line="1017" pos:column="33">{
				<comment type="line" pos:line="1018" pos:column="33">// Database.commitTransaction(conn);</comment>
			}</block></finally></try>

		}</block>
		<comment type="line" pos:line="1022" pos:column="17">//catch block </comment>
		<catch pos:line="1023" pos:column="17">catch <parameter_list pos:line="1023" pos:column="23">(<param><decl><type><name pos:line="1023" pos:column="24">Exception</name></type> <name pos:line="1023" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1023" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1024" pos:column="25">System</name><op:operator pos:line="1024" pos:column="31">.</op:operator><name pos:line="1024" pos:column="32">out</name><op:operator pos:line="1024" pos:column="35">.</op:operator><name pos:line="1024" pos:column="36">println</name></name><argument_list pos:line="1024" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="1024" pos:column="44">"Error fetching all the professors of the department "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1025" pos:column="25">System</name><op:operator pos:line="1025" pos:column="31">.</op:operator><name pos:line="1025" pos:column="32">out</name><op:operator pos:line="1025" pos:column="35">.</op:operator><name pos:line="1025" pos:column="36">println</name></name><argument_list pos:line="1025" pos:column="43">(<argument><expr><call><name><name pos:line="1025" pos:column="44">e</name><op:operator pos:line="1025" pos:column="45">.</op:operator><name pos:line="1025" pos:column="46">getMessage</name></name><argument_list pos:line="1025" pos:column="56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1026" pos:column="25">e</name><op:operator pos:line="1026" pos:column="26">.</op:operator><name pos:line="1026" pos:column="27">printStackTrace</name></name><argument_list pos:line="1026" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="1030" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="1032" pos:column="17">finally <block pos:line="1032" pos:column="25">{
		}</block></finally></try>

		<return pos:line="1035" pos:column="17">return <expr><name pos:line="1035" pos:column="24">getAllEmpDept</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="1038" pos:column="9">/*this function is to mainly check if its employee or not
	 * 
	 * passed is a UIN
	 * 
	 * return type is a boolean*/</comment>
	<function><type><specifier pos:line="1043" pos:column="9">public</specifier> <specifier pos:line="1043" pos:column="16">static</specifier> <name pos:line="1043" pos:column="23">boolean</name></type> <name pos:line="1043" pos:column="31">checkIfEmployee</name><parameter_list pos:line="1043" pos:column="46">(<param><decl><type><name pos:line="1043" pos:column="47">int</name></type> <name pos:line="1043" pos:column="51">UIN</name></decl></param>)</parameter_list> <block pos:line="1043" pos:column="56">{

		<try pos:line="1045" pos:column="17">try <block pos:line="1045" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="1046" pos:column="25">Connection</name></type> <name pos:line="1046" pos:column="36">conn</name> <init pos:line="1046" pos:column="41">= <expr><call><name><name pos:line="1046" pos:column="43">Database</name><op:operator pos:line="1046" pos:column="51">.</op:operator><name pos:line="1046" pos:column="52">getConnection</name></name><argument_list pos:line="1046" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1046" pos:column="68">//set the connection</comment>
			<decl_stmt><decl><type><name pos:line="1047" pos:column="25">String</name></type> <name pos:line="1047" pos:column="32">SQLEmpSelect</name> <init pos:line="1047" pos:column="45">= <expr><lit:literal type="string" pos:line="1047" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="1048" pos:column="25">try <block pos:line="1048" pos:column="29">{

				<if pos:line="1050" pos:column="33">if <condition pos:line="1050" pos:column="36">(<expr><name pos:line="1050" pos:column="37">conn</name> <op:operator pos:line="1050" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="1050" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="1050" pos:column="50"> <block pos:line="1050" pos:column="51">{

					<expr_stmt><expr><name pos:line="1052" pos:column="41">SQLEmpSelect</name> <op:operator pos:line="1052" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="1052" pos:column="56">"Select PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="1052" pos:column="101">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="1055" pos:column="33">PreparedStatement</name></type> <name pos:line="1055" pos:column="51">stmtForSelect</name> <init pos:line="1055" pos:column="65">= <expr><call><name><name pos:line="1055" pos:column="67">conn</name><op:operator pos:line="1055" pos:column="71">.</op:operator><name pos:line="1055" pos:column="72">prepareStatement</name></name><argument_list pos:line="1055" pos:column="88">(<argument><expr><name pos:line="1055" pos:column="89">SQLEmpSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1056" pos:column="33">stmtForSelect</name><op:operator pos:line="1056" pos:column="46">.</op:operator><name pos:line="1056" pos:column="47">setInt</name></name><argument_list pos:line="1056" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="1056" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1056" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1056" pos:column="62">//set the UIN</comment>

				<decl_stmt><decl><type><name pos:line="1058" pos:column="33">ResultSet</name></type> <name pos:line="1058" pos:column="43">rs</name> <init pos:line="1058" pos:column="46">= <expr><call><name><name pos:line="1058" pos:column="48">stmtForSelect</name><op:operator pos:line="1058" pos:column="61">.</op:operator><name pos:line="1058" pos:column="62">executeQuery</name></name><argument_list pos:line="1058" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1058" pos:column="77">//Execute the query</comment>

				<if pos:line="1060" pos:column="33">if <condition pos:line="1060" pos:column="36">(<expr><call><name><name pos:line="1060" pos:column="37">rs</name><op:operator pos:line="1060" pos:column="39">.</op:operator><name pos:line="1060" pos:column="40">first</name></name><argument_list pos:line="1060" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="1060" pos:column="48"> <block pos:line="1060" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="1062" pos:column="41">DBAnnotation</name><op:operator pos:line="1062" pos:column="53">.</op:operator><name pos:line="1062" pos:column="54">annoate</name></name><argument_list pos:line="1062" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="1062" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1062" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1062" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1062" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1063" pos:column="41">int</name></type> <name pos:line="1063" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="1063" pos:column="71">= <expr><call><name><name pos:line="1063" pos:column="73">rs</name><op:operator pos:line="1063" pos:column="75">.</op:operator><name pos:line="1063" pos:column="76">getInt</name></name><argument_list pos:line="1063" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="1063" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1063" pos:column="97">//get the position ID</comment>
					
					<expr_stmt><expr><call><name><name pos:line="1065" pos:column="41">System</name><op:operator pos:line="1065" pos:column="47">.</op:operator><name pos:line="1065" pos:column="48">out</name><op:operator pos:line="1065" pos:column="51">.</op:operator><name pos:line="1065" pos:column="52">println</name></name><argument_list pos:line="1065" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1065" pos:column="60">"UIN:"</lit:literal> <op:operator pos:line="1065" pos:column="67">+</op:operator> <name pos:line="1065" pos:column="69">UIN</name> <op:operator pos:line="1065" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="1065" pos:column="75">" Position ID:"</lit:literal><op:operator pos:line="1065" pos:column="90">+</op:operator> <name pos:line="1065" pos:column="92">peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="1067" pos:column="41">if <condition pos:line="1067" pos:column="44">(<expr><name pos:line="1067" pos:column="45">peopleRetrievedPositionID</name> <op:operator pos:line="1067" pos:column="71">&lt;=</op:operator> <lit:literal type="number" pos:line="1067" pos:column="74">2</lit:literal> <op:operator pos:line="1067" pos:column="76">||</op:operator> <name pos:line="1067" pos:column="79">peopleRetrievedPositionID</name> <op:operator pos:line="1067" pos:column="105">==</op:operator> <lit:literal type="number" pos:line="1067" pos:column="108">5</lit:literal></expr>)</condition><then pos:line="1067" pos:column="110"> 
					<comment type="line" pos:line="1068" pos:column="41">//if the position ID is &lt;=2 or 5 then its an employee</comment>
					<block pos:line="1069" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="1070" pos:column="49">System</name><op:operator pos:line="1070" pos:column="55">.</op:operator><name pos:line="1070" pos:column="56">out</name><op:operator pos:line="1070" pos:column="59">.</op:operator><name pos:line="1070" pos:column="60">println</name></name><argument_list pos:line="1070" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1070" pos:column="68">"UIN is an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="1071" pos:column="49">return <expr><lit:literal type="boolean" pos:line="1071" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then> <else pos:line="1072" pos:column="43">else <block pos:line="1072" pos:column="48">{<comment type="line" pos:line="1072" pos:column="49">//else not an employee</comment>
						<expr_stmt><expr><call><name><name pos:line="1073" pos:column="49">System</name><op:operator pos:line="1073" pos:column="55">.</op:operator><name pos:line="1073" pos:column="56">out</name><op:operator pos:line="1073" pos:column="59">.</op:operator><name pos:line="1073" pos:column="60">println</name></name><argument_list pos:line="1073" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1073" pos:column="68">"UIN exists, but it is not a Employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="1074" pos:column="49">return <expr><lit:literal type="boolean" pos:line="1074" pos:column="56">false</lit:literal></expr>;</return>

					}</block></else></if>

				}</block></then>

				<else pos:line="1080" pos:column="33">else <block pos:line="1080" pos:column="38">{
					<comment type="line" pos:line="1081" pos:column="41">//else the UIN does not exist in the emplloyee table</comment>
					<expr_stmt><expr><call><name><name pos:line="1082" pos:column="41">System</name><op:operator pos:line="1082" pos:column="47">.</op:operator><name pos:line="1082" pos:column="48">out</name><op:operator pos:line="1082" pos:column="51">.</op:operator><name pos:line="1082" pos:column="52">println</name></name><argument_list pos:line="1082" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1082" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="1083" pos:column="41">return <expr><lit:literal type="boolean" pos:line="1083" pos:column="48">false</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>

			<catch pos:line="1089" pos:column="25">catch <parameter_list pos:line="1089" pos:column="31">(<param><decl><type><name pos:line="1089" pos:column="32">SQLException</name></type> <name pos:line="1089" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1089" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1090" pos:column="33">System</name><op:operator pos:line="1090" pos:column="39">.</op:operator><name pos:line="1090" pos:column="40">out</name><op:operator pos:line="1090" pos:column="43">.</op:operator><name pos:line="1090" pos:column="44">println</name></name><argument_list pos:line="1090" pos:column="51">(<argument><expr><name pos:line="1090" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="1094" pos:column="25">finally <block pos:line="1094" pos:column="33">{

				<comment type="line" pos:line="1096" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>

		<catch pos:line="1100" pos:column="17">catch <parameter_list pos:line="1100" pos:column="23">(<param><decl><type><name pos:line="1100" pos:column="24">Exception</name></type> <name pos:line="1100" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1100" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1101" pos:column="25">System</name><op:operator pos:line="1101" pos:column="31">.</op:operator><name pos:line="1101" pos:column="32">out</name><op:operator pos:line="1101" pos:column="35">.</op:operator><name pos:line="1101" pos:column="36">println</name></name><argument_list pos:line="1101" pos:column="43">(<argument><expr><name pos:line="1101" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally pos:line="1105" pos:column="17">finally <block pos:line="1105" pos:column="25">{

			<comment type="line" pos:line="1107" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1110" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1110" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="1113" pos:column="9">/*this function is to mainly check if its employee or not
	 * 
	 * passed is a Username
	 * 
	 * return type is a boolean*/</comment>
	<function><type><specifier pos:line="1118" pos:column="9">public</specifier> <specifier pos:line="1118" pos:column="16">static</specifier> <name pos:line="1118" pos:column="23">boolean</name></type> <name pos:line="1118" pos:column="31">checkIfEmployee</name><parameter_list pos:line="1118" pos:column="46">(<param><decl><type><name pos:line="1118" pos:column="47">String</name></type> <name pos:line="1118" pos:column="54">userName</name></decl></param>)</parameter_list> <block pos:line="1118" pos:column="64">{


		<if pos:line="1121" pos:column="17">if<condition pos:line="1121" pos:column="19">(<expr><name pos:line="1121" pos:column="20">userName</name><op:operator pos:line="1121" pos:column="28">==</op:operator><lit:literal type="null" pos:line="1121" pos:column="30">null</lit:literal></expr>)</condition><then><block pos:line="1121" pos:column="35">{
			<return pos:line="1122" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1122" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="1125" pos:column="17">if<condition pos:line="1125" pos:column="19">(<expr><call><name><name pos:line="1125" pos:column="20">userName</name><op:operator pos:line="1125" pos:column="28">.</op:operator><name pos:line="1125" pos:column="29">length</name></name><argument_list pos:line="1125" pos:column="35">()</argument_list></call><op:operator pos:line="1125" pos:column="37">==</op:operator><lit:literal type="number" pos:line="1125" pos:column="39">0</lit:literal></expr>)</condition><then><block pos:line="1125" pos:column="41">{
			<return pos:line="1126" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1126" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<try pos:line="1129" pos:column="17">try <block pos:line="1129" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="1130" pos:column="25">Connection</name></type> <name pos:line="1130" pos:column="36">conn</name> <init pos:line="1130" pos:column="41">= <expr><call><name><name pos:line="1130" pos:column="43">Database</name><op:operator pos:line="1130" pos:column="51">.</op:operator><name pos:line="1130" pos:column="52">getConnection</name></name><argument_list pos:line="1130" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1130" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="1131" pos:column="25">String</name></type> <name pos:line="1131" pos:column="32">SQLEmpSelect</name> <init pos:line="1131" pos:column="45">= <expr><lit:literal type="string" pos:line="1131" pos:column="47">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="1132" pos:column="25">try <block pos:line="1132" pos:column="29">{

				<if pos:line="1134" pos:column="33">if <condition pos:line="1134" pos:column="36">(<expr><name pos:line="1134" pos:column="37">conn</name> <op:operator pos:line="1134" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="1134" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="1134" pos:column="50"> <block pos:line="1134" pos:column="51">{

					<expr_stmt><expr><name pos:line="1136" pos:column="41">SQLEmpSelect</name> <op:operator pos:line="1136" pos:column="54">=</op:operator> <lit:literal type="string" pos:line="1136" pos:column="56">"Select PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="1136" pos:column="106">//fire the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="1139" pos:column="33">PreparedStatement</name></type> <name pos:line="1139" pos:column="51">stmtForSelect</name> <init pos:line="1139" pos:column="65">= <expr><call><name><name pos:line="1139" pos:column="67">conn</name><op:operator pos:line="1139" pos:column="71">.</op:operator><name pos:line="1139" pos:column="72">prepareStatement</name></name><argument_list pos:line="1139" pos:column="88">(<argument><expr><name pos:line="1139" pos:column="89">SQLEmpSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1140" pos:column="33">stmtForSelect</name><op:operator pos:line="1140" pos:column="46">.</op:operator><name pos:line="1140" pos:column="47">setString</name></name><argument_list pos:line="1140" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="1140" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1140" pos:column="60">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1140" pos:column="70">//set the query</comment>

				<decl_stmt><decl><type><name pos:line="1142" pos:column="33">ResultSet</name></type> <name pos:line="1142" pos:column="43">rs</name> <init pos:line="1142" pos:column="46">= <expr><call><name><name pos:line="1142" pos:column="48">stmtForSelect</name><op:operator pos:line="1142" pos:column="61">.</op:operator><name pos:line="1142" pos:column="62">executeQuery</name></name><argument_list pos:line="1142" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1142" pos:column="77">//execute the query</comment>

				<if pos:line="1144" pos:column="33">if <condition pos:line="1144" pos:column="36">(<expr><call><name><name pos:line="1144" pos:column="37">rs</name><op:operator pos:line="1144" pos:column="39">.</op:operator><name pos:line="1144" pos:column="40">first</name></name><argument_list pos:line="1144" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="1144" pos:column="48"> <block pos:line="1144" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="1146" pos:column="41">DBAnnotation</name><op:operator pos:line="1146" pos:column="53">.</op:operator><name pos:line="1146" pos:column="54">annoate</name></name><argument_list pos:line="1146" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="1146" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1146" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1146" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1146" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1147" pos:column="41">int</name></type> <name pos:line="1147" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="1147" pos:column="71">= <expr><call><name><name pos:line="1147" pos:column="73">rs</name><op:operator pos:line="1147" pos:column="75">.</op:operator><name pos:line="1147" pos:column="76">getInt</name></name><argument_list pos:line="1147" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="1147" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="1149" pos:column="41">System</name><op:operator pos:line="1149" pos:column="47">.</op:operator><name pos:line="1149" pos:column="48">out</name><op:operator pos:line="1149" pos:column="51">.</op:operator><name pos:line="1149" pos:column="52">println</name></name><argument_list pos:line="1149" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1149" pos:column="60">"Username:"</lit:literal> <op:operator pos:line="1149" pos:column="72">+</op:operator> <name pos:line="1149" pos:column="74">userName</name> <op:operator pos:line="1149" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="1149" pos:column="85">" Position ID:"</lit:literal><op:operator pos:line="1149" pos:column="100">+</op:operator> <name pos:line="1149" pos:column="102">peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block" pos:line="1150" pos:column="41">/*
					 * Checking here if the position ID id of a professor i.e 2,
					 * UIN exists for students professors, admins TA and
					 * virtually every person existing in the university Check
					 * if the position ID of the passed UIN is of a professor, employee or super admin.
					 */</comment>

					<if pos:line="1157" pos:column="41">if <condition pos:line="1157" pos:column="44">(<expr><name pos:line="1157" pos:column="45">peopleRetrievedPositionID</name> <op:operator pos:line="1157" pos:column="71">&lt;=</op:operator> <lit:literal type="number" pos:line="1157" pos:column="74">2</lit:literal><op:operator pos:line="1157" pos:column="75">||</op:operator> <name pos:line="1157" pos:column="78">peopleRetrievedPositionID</name> <op:operator pos:line="1157" pos:column="104">==</op:operator> <lit:literal type="number" pos:line="1157" pos:column="107">5</lit:literal></expr>)</condition><then pos:line="1157" pos:column="109"> <block pos:line="1157" pos:column="110">{
						<expr_stmt><expr><call><name><name pos:line="1158" pos:column="49">System</name><op:operator pos:line="1158" pos:column="55">.</op:operator><name pos:line="1158" pos:column="56">out</name><op:operator pos:line="1158" pos:column="59">.</op:operator><name pos:line="1158" pos:column="60">println</name></name><argument_list pos:line="1158" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1158" pos:column="68">"UIN is an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="1159" pos:column="49">return <expr><lit:literal type="boolean" pos:line="1159" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then> <else pos:line="1160" pos:column="43">else <block pos:line="1160" pos:column="48">{
						<comment type="line" pos:line="1161" pos:column="49">//else not an employee</comment>
						<expr_stmt><expr><call><name><name pos:line="1162" pos:column="49">System</name><op:operator pos:line="1162" pos:column="55">.</op:operator><name pos:line="1162" pos:column="56">out</name><op:operator pos:line="1162" pos:column="59">.</op:operator><name pos:line="1162" pos:column="60">println</name></name><argument_list pos:line="1162" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1162" pos:column="68">"UIN is not an employee"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="1163" pos:column="49">return <expr><lit:literal type="boolean" pos:line="1163" pos:column="56">false</lit:literal></expr>;</return>

					}</block></else></if>
					<comment type="line" pos:line="1166" pos:column="41">// System.out.println("Professor UIN exists");</comment>

				}</block></then>

				<else pos:line="1170" pos:column="33">else <block pos:line="1170" pos:column="38">{
					<comment type="line" pos:line="1171" pos:column="41">//Username is not found</comment>
					<expr_stmt><expr><call><name><name pos:line="1172" pos:column="41">System</name><op:operator pos:line="1172" pos:column="47">.</op:operator><name pos:line="1172" pos:column="48">out</name><op:operator pos:line="1172" pos:column="51">.</op:operator><name pos:line="1172" pos:column="52">println</name></name><argument_list pos:line="1172" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1172" pos:column="60">"username does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="1173" pos:column="41">return <expr><lit:literal type="boolean" pos:line="1173" pos:column="48">false</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="1178" pos:column="25">//catch sql block</comment>
			<catch pos:line="1179" pos:column="25">catch <parameter_list pos:line="1179" pos:column="31">(<param><decl><type><name pos:line="1179" pos:column="32">SQLException</name></type> <name pos:line="1179" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1179" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1180" pos:column="33">System</name><op:operator pos:line="1180" pos:column="39">.</op:operator><name pos:line="1180" pos:column="40">out</name><op:operator pos:line="1180" pos:column="43">.</op:operator><name pos:line="1180" pos:column="44">println</name></name><argument_list pos:line="1180" pos:column="51">(<argument><expr><name pos:line="1180" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>

			<finally pos:line="1184" pos:column="25">finally <block pos:line="1184" pos:column="33">{

				<comment type="line" pos:line="1186" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="1189" pos:column="17">//catch block</comment>
		<catch pos:line="1190" pos:column="17">catch <parameter_list pos:line="1190" pos:column="23">(<param><decl><type><name pos:line="1190" pos:column="24">Exception</name></type> <name pos:line="1190" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1190" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1191" pos:column="25">System</name><op:operator pos:line="1191" pos:column="31">.</op:operator><name pos:line="1191" pos:column="32">out</name><op:operator pos:line="1191" pos:column="35">.</op:operator><name pos:line="1191" pos:column="36">println</name></name><argument_list pos:line="1191" pos:column="43">(<argument><expr><name pos:line="1191" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="1195" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="1197" pos:column="17">finally <block pos:line="1197" pos:column="25">{

			<comment type="line" pos:line="1199" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1202" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1202" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="1205" pos:column="9">//new bonus not valid added exceptions</comment>
	<class><specifier pos:line="1206" pos:column="9">public</specifier> <specifier pos:line="1206" pos:column="16">static</specifier> class <name pos:line="1206" pos:column="29">bonusNotValidException</name> <super><extends pos:line="1206" pos:column="52">extends <name pos:line="1206" pos:column="60">Exception</name></extends></super> <block pos:line="1206" pos:column="70">{
		<decl_stmt><decl><type><specifier pos:line="1207" pos:column="17">private</specifier> <specifier pos:line="1207" pos:column="25">static</specifier> <specifier pos:line="1207" pos:column="32">final</specifier> <name pos:line="1207" pos:column="38">long</name></type> <name pos:line="1207" pos:column="43">serialVersionUID</name> <init pos:line="1207" pos:column="60">= <expr><lit:literal type="number" pos:line="1207" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1208" pos:column="17">private</specifier> <name pos:line="1208" pos:column="25">String</name></type> <name pos:line="1208" pos:column="32">message</name> <init pos:line="1208" pos:column="40">= <expr><lit:literal type="null" pos:line="1208" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="1210" pos:column="17">public</specifier> <name pos:line="1210" pos:column="24">bonusNotValidException</name><parameter_list pos:line="1210" pos:column="46">()</parameter_list> <block pos:line="1210" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="1211" pos:column="25">super</name><argument_list pos:line="1211" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1212" pos:column="25">this</name><op:operator pos:line="1212" pos:column="29">.</op:operator><name pos:line="1212" pos:column="30">message</name></name> <op:operator pos:line="1212" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="1212" pos:column="40">"bonus is not valid"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="1215" pos:column="17">public</specifier> <name pos:line="1215" pos:column="24">bonusNotValidException</name><parameter_list pos:line="1215" pos:column="46">(<param><decl><type><name pos:line="1215" pos:column="47">String</name></type> <name pos:line="1215" pos:column="54">message</name></decl></param>)</parameter_list> <block pos:line="1215" pos:column="63">{
			<expr_stmt><expr><call><name pos:line="1216" pos:column="25">super</name><argument_list pos:line="1216" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1217" pos:column="25">this</name><op:operator pos:line="1217" pos:column="29">.</op:operator><name pos:line="1217" pos:column="30">message</name></name> <op:operator pos:line="1217" pos:column="38">=</op:operator> <name pos:line="1217" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="1220" pos:column="17">@<name pos:line="1220" pos:column="18">Override</name></annotation>
		<specifier pos:line="1221" pos:column="17">public</specifier> <name pos:line="1221" pos:column="24">String</name></type> <name pos:line="1221" pos:column="31">toString</name><parameter_list pos:line="1221" pos:column="39">()</parameter_list> <block pos:line="1221" pos:column="42">{
			<return pos:line="1222" pos:column="25">return <expr><name pos:line="1222" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="1225" pos:column="17">@<name pos:line="1225" pos:column="18">Override</name></annotation>
		<specifier pos:line="1226" pos:column="17">public</specifier> <name pos:line="1226" pos:column="24">String</name></type> <name pos:line="1226" pos:column="31">getMessage</name><parameter_list pos:line="1226" pos:column="41">()</parameter_list> <block pos:line="1226" pos:column="44">{
			<return pos:line="1227" pos:column="25">return <expr><name pos:line="1227" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block" pos:line="1231" pos:column="9">/*
	 * All employee functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier pos:line="1236" pos:column="9">public</specifier> <specifier pos:line="1236" pos:column="16">static</specifier> <name pos:line="1236" pos:column="23">void</name></type> <name pos:line="1236" pos:column="28">main</name><parameter_list pos:line="1236" pos:column="32">(<param><decl><type><name><name pos:line="1236" pos:column="33">String</name><index pos:line="1236" pos:column="39">[]</index></name></type> <name pos:line="1236" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="1236" pos:column="48">{

	}</block></function>
}</block></class>
</unit>
