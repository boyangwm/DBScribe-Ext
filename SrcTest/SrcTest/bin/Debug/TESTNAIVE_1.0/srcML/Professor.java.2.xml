<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Professor.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="9" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="14" pos:column="1">/*************** PROFESSOR.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="16" pos:column="1">public</specifier> class <name pos:line="16" pos:column="14">Professor</name> <super><extends pos:line="16" pos:column="24">extends <name pos:line="16" pos:column="32">Employee</name></extends></super> <block pos:line="16" pos:column="41">{

	<comment type="line" pos:line="18" pos:column="9">// prof constructor takes in name, username and dept ID</comment>
	<constructor><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">Professor</name><parameter_list pos:line="19" pos:column="25">(<param><decl><type><name pos:line="19" pos:column="26">String</name></type> <name pos:line="19" pos:column="33">name</name></decl></param>, <param><decl><type><name pos:line="19" pos:column="39">String</name></type> <name pos:line="19" pos:column="46">userName</name></decl></param>, <param><decl><type><name pos:line="19" pos:column="56">int</name></type> <name pos:line="19" pos:column="60">deptID</name></decl></param>)</parameter_list> <block pos:line="19" pos:column="68">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">super</name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">name</name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">userName</name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">deptID</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="47">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line" pos:line="23" pos:column="9">//this is a professor class constructor which passes the UIN and initializes the details</comment>
	<constructor><specifier pos:line="24" pos:column="9">public</specifier> <name pos:line="24" pos:column="16">Professor</name><parameter_list pos:line="24" pos:column="25">(<param><decl><type><name pos:line="24" pos:column="26">int</name></type> <name pos:line="24" pos:column="30">UIN</name></decl></param>)</parameter_list> <throws pos:line="24" pos:column="35">throws <argument><expr><name><name pos:line="24" pos:column="42">Student</name><op:operator pos:line="24" pos:column="49">.</op:operator><name pos:line="24" pos:column="50">AccessDeniedException</name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="73">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="24" pos:column="101">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">super</name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="25" pos:column="28">//calls the super class</comment>
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">boolean</name></type> <name pos:line="26" pos:column="25">check</name> <init pos:line="26" pos:column="31">= <expr><call><name pos:line="26" pos:column="33">checkIfProfessor</name><argument_list pos:line="26" pos:column="49">(<argument><expr><name pos:line="26" pos:column="50">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="26" pos:column="55">//checking if the UIN is a professor </comment>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><op:operator pos:line="28" pos:column="21">!</op:operator><name pos:line="28" pos:column="22">check</name></expr>)</condition><then pos:line="28" pos:column="28"> <block pos:line="28" pos:column="29">{
			<throw pos:line="29" pos:column="25">throw <expr><op:operator pos:line="29" pos:column="31">new</op:operator> <call><name><name pos:line="29" pos:column="35">Student</name><op:operator pos:line="29" pos:column="42">.</op:operator><name pos:line="29" pos:column="43">AccessDeniedException</name></name><argument_list pos:line="29" pos:column="64">()</argument_list></call></expr>;</throw><comment type="line" pos:line="29" pos:column="67">//if its not a professor then throw an exception</comment>
		}</block></then></if>

	}</block></constructor>
	<comment type="block" pos:line="33" pos:column="9">/*calls the professor constructor with the username*/</comment>
	<constructor><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">Professor</name><parameter_list pos:line="34" pos:column="25">(<param><decl><type><name pos:line="34" pos:column="26">String</name></type> <name pos:line="34" pos:column="33">userName</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">super</name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="block" pos:line="38" pos:column="9">/*prof adding to the database
	 * 
	 * pass the name and the dept to the function
	 * 
	 * return type is boolean
	 * 
	 * */</comment>
	<function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">boolean</name></type> <name pos:line="45" pos:column="31">addProfToDb</name><parameter_list pos:line="45" pos:column="42">(<param><decl><type><name pos:line="45" pos:column="43">String</name></type> <name pos:line="45" pos:column="50">name</name></decl></param>, <param><decl><type><name pos:line="45" pos:column="56">Department</name></type> <name pos:line="45" pos:column="67">dept</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="73">{

		<decl_stmt><decl><type><name pos:line="47" pos:column="17">boolean</name></type> <name pos:line="47" pos:column="25">isAdded</name> <init pos:line="47" pos:column="33">= <expr><lit:literal type="boolean" pos:line="47" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">int</name></type> <name pos:line="48" pos:column="21">returnedUIN</name></decl>;</decl_stmt>

		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">dept</name> <op:operator pos:line="50" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="50" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="50" pos:column="34"> <block pos:line="50" pos:column="35">{
			<throw pos:line="51" pos:column="25">throw <expr><op:operator pos:line="51" pos:column="31">new</op:operator> <call><name pos:line="51" pos:column="35">NullPointerException</name><argument_list pos:line="51" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="51" pos:column="58">//if the object is null then throw an exception</comment>
		}</block></then></if>

		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><call><name><name pos:line="54" pos:column="21">name</name><op:operator pos:line="54" pos:column="25">.</op:operator><name pos:line="54" pos:column="26">equals</name></name><argument_list pos:line="54" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="33">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="37"> <block pos:line="54" pos:column="38">{
			<throw pos:line="55" pos:column="25">throw <expr><op:operator pos:line="55" pos:column="31">new</op:operator> <call><name pos:line="55" pos:column="35">NullPointerException</name><argument_list pos:line="55" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="55" pos:column="58">//if the name is empty then throw an exception</comment>
		}</block></then></if>

		<try pos:line="58" pos:column="17">try <block pos:line="58" pos:column="21">{
			<expr_stmt><expr><name pos:line="59" pos:column="25">returnedUIN</name> <op:operator pos:line="59" pos:column="37">=</op:operator> <call><name pos:line="59" pos:column="39">addIntoDatabase</name><argument_list pos:line="59" pos:column="54">(<argument><expr><name pos:line="59" pos:column="55">name</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="61">dept</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="67">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="59" pos:column="70">//add into the database</comment>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">returnedUIN</name> <op:operator pos:line="60" pos:column="41">!=</op:operator> <op:operator pos:line="60" pos:column="44">-</op:operator><lit:literal type="number" pos:line="60" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="60" pos:column="47"> <block pos:line="60" pos:column="48">{<comment type="line" pos:line="60" pos:column="49">//check the returned UIN</comment>

				<expr_stmt><expr><call><name><name pos:line="62" pos:column="33">System</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">out</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">println</name></name><argument_list pos:line="62" pos:column="51">(<argument><expr><name pos:line="62" pos:column="52">returnedUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name pos:line="64" pos:column="33">isAdded</name> <op:operator pos:line="64" pos:column="41">=</op:operator> <call><name><name pos:line="64" pos:column="43">Employee</name><op:operator pos:line="64" pos:column="51">.</op:operator><name pos:line="64" pos:column="52">addEmployee</name></name><argument_list pos:line="64" pos:column="63">(<argument><expr><name pos:line="64" pos:column="64">returnedUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="64" pos:column="77">//add to employee</comment>

				<decl_stmt><decl><type><name pos:line="66" pos:column="33">Connection</name></type> <name pos:line="66" pos:column="44">conn</name> <init pos:line="66" pos:column="49">= <expr><call><name><name pos:line="66" pos:column="51">Database</name><op:operator pos:line="66" pos:column="59">.</op:operator><name pos:line="66" pos:column="60">getConnection</name></name><argument_list pos:line="66" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="67" pos:column="33">Database</name><op:operator pos:line="67" pos:column="41">.</op:operator><name pos:line="67" pos:column="42">commitTransaction</name></name><argument_list pos:line="67" pos:column="59">(<argument><expr><name pos:line="67" pos:column="60">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="67" pos:column="66">//commit</comment>
			}</block></then></if>
		}</block>
		<comment type="line" pos:line="70" pos:column="17">//catch</comment>
		<catch pos:line="71" pos:column="17">catch <parameter_list pos:line="71" pos:column="23">(<param><decl><type><name><name pos:line="71" pos:column="24">People</name><op:operator pos:line="71" pos:column="30">.</op:operator><name pos:line="71" pos:column="31">loginDetailsnotAdded</name></name></type> <name pos:line="71" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="55">{
			<comment type="line" pos:line="72" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">e</name><op:operator pos:line="73" pos:column="26">.</op:operator><name pos:line="73" pos:column="27">printStackTrace</name></name><argument_list pos:line="73" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return pos:line="76" pos:column="17">return <expr><name pos:line="76" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>

	<comment type="line" pos:line="80" pos:column="9">// CHECKING IF THE PERSON WHOS UIN IS INPUT IS A PROFESSOR OR NOT</comment>
	<function><type><specifier pos:line="81" pos:column="9">public</specifier> <specifier pos:line="81" pos:column="16">static</specifier> <name pos:line="81" pos:column="23">boolean</name></type> <name pos:line="81" pos:column="31">checkIfProfessor</name><parameter_list pos:line="81" pos:column="47">(<param><decl><type><name pos:line="81" pos:column="48">int</name></type> <name pos:line="81" pos:column="52">UIN</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">boolean</name></type> <name pos:line="82" pos:column="25">ifProfessor</name> <init pos:line="82" pos:column="37">= <expr><lit:literal type="boolean" pos:line="82" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="83" pos:column="17">try <block pos:line="83" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">Connection</name></type> <name pos:line="84" pos:column="36">conn</name> <init pos:line="84" pos:column="41">= <expr><call><name><name pos:line="84" pos:column="43">Database</name><op:operator pos:line="84" pos:column="51">.</op:operator><name pos:line="84" pos:column="52">getConnection</name></name><argument_list pos:line="84" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="84" pos:column="68">//connection</comment>
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">String</name></type> <name pos:line="85" pos:column="32">SQLPeopleSelect</name> <init pos:line="85" pos:column="48">= <expr><lit:literal type="string" pos:line="85" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="86" pos:column="25">try <block pos:line="86" pos:column="29">{

				<if pos:line="88" pos:column="33">if <condition pos:line="88" pos:column="36">(<expr><name pos:line="88" pos:column="37">conn</name> <op:operator pos:line="88" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="88" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="88" pos:column="50"> <block pos:line="88" pos:column="51">{

					<expr_stmt><expr><name pos:line="90" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="90" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="90" pos:column="59">"Select PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="90" pos:column="104">//write query</comment>

				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="94" pos:column="33">PreparedStatement</name></type> <name pos:line="94" pos:column="51">stmtForSelect</name> <init pos:line="94" pos:column="65">= <expr><call><name><name pos:line="94" pos:column="67">conn</name><op:operator pos:line="94" pos:column="71">.</op:operator><name pos:line="94" pos:column="72">prepareStatement</name></name><argument_list pos:line="94" pos:column="88">(<argument><expr><name pos:line="94" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">stmtForSelect</name><op:operator pos:line="95" pos:column="46">.</op:operator><name pos:line="95" pos:column="47">setInt</name></name><argument_list pos:line="95" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="95" pos:column="62">//set the values</comment>

				<decl_stmt><decl><type><name pos:line="97" pos:column="33">ResultSet</name></type> <name pos:line="97" pos:column="43">rs</name> <init pos:line="97" pos:column="46">= <expr><call><name><name pos:line="97" pos:column="48">stmtForSelect</name><op:operator pos:line="97" pos:column="61">.</op:operator><name pos:line="97" pos:column="62">executeQuery</name></name><argument_list pos:line="97" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="97" pos:column="77">//execute the query</comment>

				<if pos:line="99" pos:column="33">if <condition pos:line="99" pos:column="36">(<expr><call><name><name pos:line="99" pos:column="37">rs</name><op:operator pos:line="99" pos:column="39">.</op:operator><name pos:line="99" pos:column="40">first</name></name><argument_list pos:line="99" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="99" pos:column="48"> <block pos:line="99" pos:column="49">{
					<comment type="line" pos:line="100" pos:column="41">//if the resultset exists</comment>
					<expr_stmt><expr><call><name><name pos:line="101" pos:column="41">DBAnnotation</name><op:operator pos:line="101" pos:column="53">.</op:operator><name pos:line="101" pos:column="54">annoate</name></name><argument_list pos:line="101" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="101" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="102" pos:column="41">int</name></type> <name pos:line="102" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="102" pos:column="71">= <expr><call><name><name pos:line="102" pos:column="73">rs</name><op:operator pos:line="102" pos:column="75">.</op:operator><name pos:line="102" pos:column="76">getInt</name></name><argument_list pos:line="102" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="104" pos:column="41">System</name><op:operator pos:line="104" pos:column="47">.</op:operator><name pos:line="104" pos:column="48">out</name><op:operator pos:line="104" pos:column="51">.</op:operator><name pos:line="104" pos:column="52">println</name></name><argument_list pos:line="104" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="60">"UIN:"</lit:literal> <op:operator pos:line="104" pos:column="67">+</op:operator> <name pos:line="104" pos:column="69">UIN</name> <op:operator pos:line="104" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="104" pos:column="75">" Position ID:"</lit:literal><op:operator pos:line="104" pos:column="90">+</op:operator> <name pos:line="104" pos:column="92">peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="106" pos:column="41">if <condition pos:line="106" pos:column="44">(<expr><name pos:line="106" pos:column="45">peopleRetrievedPositionID</name> <op:operator pos:line="106" pos:column="71">==</op:operator> <lit:literal type="number" pos:line="106" pos:column="74">2</lit:literal></expr>)</condition><then pos:line="106" pos:column="76"> <block pos:line="106" pos:column="77">{<comment type="line" pos:line="106" pos:column="78">//check the position ID</comment>
						<expr_stmt><expr><call><name><name pos:line="107" pos:column="49">System</name><op:operator pos:line="107" pos:column="55">.</op:operator><name pos:line="107" pos:column="56">out</name><op:operator pos:line="107" pos:column="59">.</op:operator><name pos:line="107" pos:column="60">println</name></name><argument_list pos:line="107" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="68">"Professor UIN exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="108" pos:column="49">ifProfessor</name> <op:operator pos:line="108" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="108" pos:column="63">true</lit:literal></expr>;</expr_stmt>
					}</block></then>

					<else pos:line="111" pos:column="41">else <block pos:line="111" pos:column="46">{
						<expr_stmt><expr><call><name><name pos:line="112" pos:column="49">System</name><op:operator pos:line="112" pos:column="55">.</op:operator><name pos:line="112" pos:column="56">out</name><op:operator pos:line="112" pos:column="59">.</op:operator><name pos:line="112" pos:column="60">println</name></name><argument_list pos:line="112" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="68">"UIN exists, but it is not a professor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="113" pos:column="49">ifProfessor</name> <op:operator pos:line="113" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="113" pos:column="63">false</lit:literal></expr>;</expr_stmt>

					}</block></else></if>

				}</block></then>

				<else pos:line="119" pos:column="33">else <block pos:line="119" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="120" pos:column="41">System</name><op:operator pos:line="120" pos:column="47">.</op:operator><name pos:line="120" pos:column="48">out</name><op:operator pos:line="120" pos:column="51">.</op:operator><name pos:line="120" pos:column="52">println</name></name><argument_list pos:line="120" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="121" pos:column="41">ifProfessor</name> <op:operator pos:line="121" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="121" pos:column="55">false</lit:literal></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="126" pos:column="25">//catch block</comment>
			<catch pos:line="127" pos:column="25">catch <parameter_list pos:line="127" pos:column="31">(<param><decl><type><name pos:line="127" pos:column="32">SQLException</name></type> <name pos:line="127" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="127" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">System</name><op:operator pos:line="128" pos:column="39">.</op:operator><name pos:line="128" pos:column="40">out</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">println</name></name><argument_list pos:line="128" pos:column="51">(<argument><expr><name pos:line="128" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="129" pos:column="33">return <expr><name pos:line="129" pos:column="40">ifProfessor</name></expr>;</return>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="133" pos:column="17">//catch blcok</comment>
		<catch pos:line="134" pos:column="17">catch <parameter_list pos:line="134" pos:column="23">(<param><decl><type><name pos:line="134" pos:column="24">Exception</name></type> <name pos:line="134" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="134" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="135" pos:column="25">System</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">out</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">println</name></name><argument_list pos:line="135" pos:column="43">(<argument><expr><name pos:line="135" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="138" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
		here the finally block does not contain any general statements*/</comment>
		<finally pos:line="140" pos:column="17">finally <block pos:line="140" pos:column="25">{
		}</block></finally></try>

		<return pos:line="143" pos:column="17">return <expr><name pos:line="143" pos:column="24">ifProfessor</name></expr>;</return>
	}</block></function>
	<comment type="block" pos:line="145" pos:column="9">/*this function mainly checks if the username beongs to the professor or not*/</comment>
	<function><type><specifier pos:line="146" pos:column="9">public</specifier> <specifier pos:line="146" pos:column="16">static</specifier> <name pos:line="146" pos:column="23">boolean</name></type> <name pos:line="146" pos:column="31">checkIfProfessor</name><parameter_list pos:line="146" pos:column="47">(<param><decl><type><name pos:line="146" pos:column="48">String</name></type> <name pos:line="146" pos:column="55">userName</name></decl></param>)</parameter_list> <block pos:line="146" pos:column="65">{

		<if pos:line="148" pos:column="17">if<condition pos:line="148" pos:column="19">(<expr><name pos:line="148" pos:column="20">userName</name><op:operator pos:line="148" pos:column="28">==</op:operator><lit:literal type="null" pos:line="148" pos:column="30">null</lit:literal></expr>)</condition><then><block pos:line="148" pos:column="35">{
			<return pos:line="149" pos:column="25">return <expr><lit:literal type="boolean" pos:line="149" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="152" pos:column="17">if<condition pos:line="152" pos:column="19">(<expr><call><name><name pos:line="152" pos:column="20">userName</name><op:operator pos:line="152" pos:column="28">.</op:operator><name pos:line="152" pos:column="29">length</name></name><argument_list pos:line="152" pos:column="35">()</argument_list></call><op:operator pos:line="152" pos:column="37">==</op:operator><lit:literal type="number" pos:line="152" pos:column="39">0</lit:literal></expr>)</condition><then><block pos:line="152" pos:column="41">{
			<return pos:line="153" pos:column="25">return <expr><lit:literal type="boolean" pos:line="153" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<try pos:line="156" pos:column="17">try <block pos:line="156" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="157" pos:column="25">Connection</name></type> <name pos:line="157" pos:column="36">conn</name> <init pos:line="157" pos:column="41">= <expr><call><name><name pos:line="157" pos:column="43">Database</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">getConnection</name></name><argument_list pos:line="157" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="157" pos:column="68">// get the connection</comment>
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">String</name></type> <name pos:line="158" pos:column="32">SQLProfSelect</name> <init pos:line="158" pos:column="46">= <expr><lit:literal type="string" pos:line="158" pos:column="48">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="159" pos:column="25">try <block pos:line="159" pos:column="29">{

				<if pos:line="161" pos:column="33">if <condition pos:line="161" pos:column="36">(<expr><name pos:line="161" pos:column="37">conn</name> <op:operator pos:line="161" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="161" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="161" pos:column="50"> <block pos:line="161" pos:column="51">{

					<expr_stmt><expr><name pos:line="163" pos:column="41">SQLProfSelect</name> <op:operator pos:line="163" pos:column="55">=</op:operator> <lit:literal type="string" pos:line="163" pos:column="57">"Select PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="163" pos:column="107">//write the query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="166" pos:column="33">PreparedStatement</name></type> <name pos:line="166" pos:column="51">stmtForSelect</name> <init pos:line="166" pos:column="65">= <expr><call><name><name pos:line="166" pos:column="67">conn</name><op:operator pos:line="166" pos:column="71">.</op:operator><name pos:line="166" pos:column="72">prepareStatement</name></name><argument_list pos:line="166" pos:column="88">(<argument><expr><name pos:line="166" pos:column="89">SQLProfSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="167" pos:column="33">stmtForSelect</name><op:operator pos:line="167" pos:column="46">.</op:operator><name pos:line="167" pos:column="47">setString</name></name><argument_list pos:line="167" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="167" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="60">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="167" pos:column="70">//set the values</comment>

				<decl_stmt><decl><type><name pos:line="169" pos:column="33">ResultSet</name></type> <name pos:line="169" pos:column="43">rs</name> <init pos:line="169" pos:column="46">= <expr><call><name><name pos:line="169" pos:column="48">stmtForSelect</name><op:operator pos:line="169" pos:column="61">.</op:operator><name pos:line="169" pos:column="62">executeQuery</name></name><argument_list pos:line="169" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="169" pos:column="77">//execute the query</comment>

				<if pos:line="171" pos:column="33">if <condition pos:line="171" pos:column="36">(<expr><call><name><name pos:line="171" pos:column="37">rs</name><op:operator pos:line="171" pos:column="39">.</op:operator><name pos:line="171" pos:column="40">first</name></name><argument_list pos:line="171" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="171" pos:column="48"> <block pos:line="171" pos:column="49">{
					
					<expr_stmt><expr><call><name><name pos:line="173" pos:column="41">DBAnnotation</name><op:operator pos:line="173" pos:column="53">.</op:operator><name pos:line="173" pos:column="54">annoate</name></name><argument_list pos:line="173" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="173" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="173" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="174" pos:column="41">int</name></type> <name pos:line="174" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="174" pos:column="71">= <expr><call><name><name pos:line="174" pos:column="73">rs</name><op:operator pos:line="174" pos:column="75">.</op:operator><name pos:line="174" pos:column="76">getInt</name></name><argument_list pos:line="174" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="174" pos:column="97">//retreive the position ID</comment>
					
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">System</name><op:operator pos:line="176" pos:column="47">.</op:operator><name pos:line="176" pos:column="48">out</name><op:operator pos:line="176" pos:column="51">.</op:operator><name pos:line="176" pos:column="52">println</name></name><argument_list pos:line="176" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="176" pos:column="60">"Username:"</lit:literal> <op:operator pos:line="176" pos:column="72">+</op:operator> <name pos:line="176" pos:column="74">userName</name> <op:operator pos:line="176" pos:column="83">+</op:operator> <lit:literal type="string" pos:line="176" pos:column="85">" Position ID:"</lit:literal><op:operator pos:line="176" pos:column="100">+</op:operator> <name pos:line="176" pos:column="102">peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block" pos:line="177" pos:column="41">/*
					 * Checking if the position ID id of a professor i.e 2,
					 * UIN exists for students professors, admins TA and
					 * virtually every person existing in the university Check
					 * if the position ID of the passed UIN is of a professor.
					 */</comment>

					<if pos:line="184" pos:column="41">if <condition pos:line="184" pos:column="44">(<expr><name pos:line="184" pos:column="45">peopleRetrievedPositionID</name> <op:operator pos:line="184" pos:column="71">==</op:operator> <lit:literal type="number" pos:line="184" pos:column="74">2</lit:literal></expr>)</condition><then pos:line="184" pos:column="76"> <block pos:line="184" pos:column="77">{
						<return pos:line="185" pos:column="49">return <expr><lit:literal type="boolean" pos:line="185" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then> <else pos:line="186" pos:column="43">else <block pos:line="186" pos:column="48">{
						<return pos:line="187" pos:column="49">return <expr><lit:literal type="boolean" pos:line="187" pos:column="56">false</lit:literal></expr>;</return>
					}</block></else></if>

				}</block></then>

				<else pos:line="192" pos:column="33">else <block pos:line="192" pos:column="38">{

					<expr_stmt><expr><call><name><name pos:line="194" pos:column="41">System</name><op:operator pos:line="194" pos:column="47">.</op:operator><name pos:line="194" pos:column="48">out</name><op:operator pos:line="194" pos:column="51">.</op:operator><name pos:line="194" pos:column="52">println</name></name><argument_list pos:line="194" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="60">"username does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="195" pos:column="41">return <expr><lit:literal type="boolean" pos:line="195" pos:column="48">false</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="200" pos:column="25">//catch block </comment>
			<catch pos:line="201" pos:column="25">catch <parameter_list pos:line="201" pos:column="31">(<param><decl><type><name pos:line="201" pos:column="32">SQLException</name></type> <name pos:line="201" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">System</name><op:operator pos:line="202" pos:column="39">.</op:operator><name pos:line="202" pos:column="40">out</name><op:operator pos:line="202" pos:column="43">.</op:operator><name pos:line="202" pos:column="44">println</name></name><argument_list pos:line="202" pos:column="51">(<argument><expr><name pos:line="202" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>

		<catch pos:line="208" pos:column="17">catch <parameter_list pos:line="208" pos:column="23">(<param><decl><type><name pos:line="208" pos:column="24">Exception</name></type> <name pos:line="208" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="208" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="209" pos:column="25">System</name><op:operator pos:line="209" pos:column="31">.</op:operator><name pos:line="209" pos:column="32">out</name><op:operator pos:line="209" pos:column="35">.</op:operator><name pos:line="209" pos:column="36">println</name></name><argument_list pos:line="209" pos:column="43">(<argument><expr><name pos:line="209" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="212" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="214" pos:column="17">finally <block pos:line="214" pos:column="25">{

			<comment type="line" pos:line="216" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="219" pos:column="17">return <expr><lit:literal type="boolean" pos:line="219" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	
	<comment type="line" pos:line="223" pos:column="9">// retrieval of the details of the professor by UIN</comment>
	<function><type><specifier pos:line="224" pos:column="9">public</specifier> <specifier pos:line="224" pos:column="16">static</specifier> <name pos:line="224" pos:column="23">Professor</name></type> <name pos:line="224" pos:column="33">retrieveProfDetailsByUIN</name><parameter_list pos:line="224" pos:column="57">(<param><decl><type><name pos:line="224" pos:column="58">int</name></type> <name pos:line="224" pos:column="62">UIN</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="67">{

		<decl_stmt><decl><type><name pos:line="226" pos:column="17">boolean</name></type> <name pos:line="226" pos:column="25">check</name> <init pos:line="226" pos:column="31">= <expr><call><name pos:line="226" pos:column="33">checkIfProfessor</name><argument_list pos:line="226" pos:column="49">(<argument><expr><name pos:line="226" pos:column="50">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="226" pos:column="55">//checking if the UIN is a professor</comment>

		<if pos:line="228" pos:column="17">if <condition pos:line="228" pos:column="20">(<expr><name pos:line="228" pos:column="21">check</name> <op:operator pos:line="228" pos:column="27">==</op:operator> <lit:literal type="boolean" pos:line="228" pos:column="30">true</lit:literal></expr>)</condition><then pos:line="228" pos:column="35"> <block pos:line="228" pos:column="36">{
			<comment type="line" pos:line="229" pos:column="25">// retireveDetailsByUIN(12);</comment>
			<decl_stmt><decl><type><name pos:line="230" pos:column="25">Professor</name></type> <name pos:line="230" pos:column="35">professor</name></decl>;</decl_stmt><comment type="line" pos:line="230" pos:column="45">//set the class object</comment>
			<try pos:line="231" pos:column="25">try <block pos:line="231" pos:column="29">{
				<expr_stmt><expr><name pos:line="232" pos:column="33">professor</name> <op:operator pos:line="232" pos:column="43">=</op:operator> <op:operator pos:line="232" pos:column="45">new</op:operator> <call><name pos:line="232" pos:column="49">Professor</name><argument_list pos:line="232" pos:column="58">(<argument><expr><name pos:line="232" pos:column="59">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="232" pos:column="64">//send the UIN to the constructor</comment>
				<return pos:line="233" pos:column="33">return <expr><name pos:line="233" pos:column="40">professor</name></expr>;</return>
			}</block> <catch pos:line="234" pos:column="27">catch <parameter_list pos:line="234" pos:column="33">(<param><decl><type><name pos:line="234" pos:column="34">PersonDoesNotExistException</name></type> <name pos:line="234" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="234" pos:column="65">{
				<comment type="line" pos:line="235" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="236" pos:column="33">e</name><op:operator pos:line="236" pos:column="34">.</op:operator><name pos:line="236" pos:column="35">printStackTrace</name></name><argument_list pos:line="236" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="237" pos:column="27">catch <parameter_list pos:line="237" pos:column="33">(<param><decl><type><name><name pos:line="237" pos:column="34">Student</name><op:operator pos:line="237" pos:column="41">.</op:operator><name pos:line="237" pos:column="42">AccessDeniedException</name></name></type> <name pos:line="237" pos:column="64">e</name></decl></param>)</parameter_list> <block pos:line="237" pos:column="67">{
				<comment type="line" pos:line="238" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="239" pos:column="33">e</name><op:operator pos:line="239" pos:column="34">.</op:operator><name pos:line="239" pos:column="35">printStackTrace</name></name><argument_list pos:line="239" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block></then>

		<else pos:line="244" pos:column="17">else <block pos:line="244" pos:column="22">{
			<expr_stmt><expr><call><name><name pos:line="245" pos:column="25">System</name><op:operator pos:line="245" pos:column="31">.</op:operator><name pos:line="245" pos:column="32">out</name><op:operator pos:line="245" pos:column="35">.</op:operator><name pos:line="245" pos:column="36">println</name></name><argument_list pos:line="245" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="44">"There exists no professor with that UIN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="246" pos:column="25">return <expr><lit:literal type="null" pos:line="246" pos:column="32">null</lit:literal></expr>;</return>
		}</block></else></if>

		<return pos:line="249" pos:column="17">return <expr><lit:literal type="null" pos:line="249" pos:column="24">null</lit:literal></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="252" pos:column="9">// retrieve the details of the professor when a username is passed</comment>
	<function><type><specifier pos:line="253" pos:column="9">public</specifier> <specifier pos:line="253" pos:column="16">static</specifier> <name pos:line="253" pos:column="23">Professor</name></type> <name pos:line="253" pos:column="33">retrieveProfDetailsByUserName</name><parameter_list pos:line="253" pos:column="62">(<param><decl><type><name pos:line="253" pos:column="63">String</name></type> <name pos:line="253" pos:column="70">userName</name></decl></param>)</parameter_list> <block pos:line="253" pos:column="80">{

		<decl_stmt><decl><type><name pos:line="255" pos:column="17">boolean</name></type> <name pos:line="255" pos:column="25">check</name> <init pos:line="255" pos:column="31">= <expr><call><name pos:line="255" pos:column="33">checkIfProfessor</name><argument_list pos:line="255" pos:column="49">(<argument><expr><name pos:line="255" pos:column="50">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="255" pos:column="60">//check if its a professor</comment>

		<if pos:line="257" pos:column="17">if <condition pos:line="257" pos:column="20">(<expr><name pos:line="257" pos:column="21">check</name> <op:operator pos:line="257" pos:column="27">==</op:operator> <lit:literal type="boolean" pos:line="257" pos:column="30">true</lit:literal></expr>)</condition><then pos:line="257" pos:column="35"> <block pos:line="257" pos:column="36">{
			<decl_stmt><decl><type><name pos:line="258" pos:column="25">Professor</name></type> <name pos:line="258" pos:column="35">professor</name> <init pos:line="258" pos:column="45">= <expr><op:operator pos:line="258" pos:column="47">new</op:operator> <call><name pos:line="258" pos:column="51">Professor</name><argument_list pos:line="258" pos:column="60">(<argument><expr><name pos:line="258" pos:column="61">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="258" pos:column="71">//set it as a object</comment>
			<comment type="line" pos:line="259" pos:column="25">// System.out.println(professor.getUIN());</comment>
			<return pos:line="260" pos:column="25">return <expr><name pos:line="260" pos:column="32">professor</name></expr>;</return>

		}</block></then> <else pos:line="262" pos:column="19">else <block pos:line="262" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="263" pos:column="25">System</name><op:operator pos:line="263" pos:column="31">.</op:operator><name pos:line="263" pos:column="32">out</name><op:operator pos:line="263" pos:column="35">.</op:operator><name pos:line="263" pos:column="36">println</name></name><argument_list pos:line="263" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="44">"There exists no professor with that username"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="264" pos:column="25">return <expr><lit:literal type="null" pos:line="264" pos:column="32">null</lit:literal></expr>;</return>
		}</block></else></if>

	}</block></function>

	<comment type="line" pos:line="269" pos:column="9">// Delete a professor by passing a uin</comment>
	<function><type><specifier pos:line="270" pos:column="9">public</specifier> <specifier pos:line="270" pos:column="16">static</specifier> <name pos:line="270" pos:column="23">void</name></type> <name pos:line="270" pos:column="28">deleteProfFromDbUsingUIN</name><parameter_list pos:line="270" pos:column="52">(<param><decl><type><name pos:line="270" pos:column="53">int</name></type> <name pos:line="270" pos:column="57">UIN</name></decl></param>)</parameter_list> <block pos:line="270" pos:column="62">{

		<decl_stmt><decl><type><name pos:line="272" pos:column="17">boolean</name></type> <name pos:line="272" pos:column="25">check</name> <init pos:line="272" pos:column="31">= <expr><call><name pos:line="272" pos:column="33">checkIfProfessor</name><argument_list pos:line="272" pos:column="49">(<argument><expr><name pos:line="272" pos:column="50">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="272" pos:column="55">//CHECK IF ITS A PROFESSOR</comment>

		<if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><name pos:line="274" pos:column="21">check</name> <op:operator pos:line="274" pos:column="27">==</op:operator> <lit:literal type="boolean" pos:line="274" pos:column="30">true</lit:literal></expr>)</condition><then pos:line="274" pos:column="35"> <block pos:line="274" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="275" pos:column="25">deleteFromDatabaseByUIN</name><argument_list pos:line="275" pos:column="48">(<argument><expr><name pos:line="275" pos:column="49">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="275" pos:column="54">//delete from database in the people table</comment>
			<expr_stmt><expr><call><name><name pos:line="276" pos:column="25">Employee</name><op:operator pos:line="276" pos:column="33">.</op:operator><name pos:line="276" pos:column="34">deleteFromDatabaseByUIN</name></name><argument_list pos:line="276" pos:column="57">(<argument><expr><name pos:line="276" pos:column="58">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="276" pos:column="63">//delete from the employee table too</comment>

			<decl_stmt><decl><type><name pos:line="278" pos:column="25">Connection</name></type> <name pos:line="278" pos:column="36">conn</name> <init pos:line="278" pos:column="41">= <expr><call><name><name pos:line="278" pos:column="43">Database</name><op:operator pos:line="278" pos:column="51">.</op:operator><name pos:line="278" pos:column="52">getConnection</name></name><argument_list pos:line="278" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="279" pos:column="25">Database</name><op:operator pos:line="279" pos:column="33">.</op:operator><name pos:line="279" pos:column="34">commitTransaction</name></name><argument_list pos:line="279" pos:column="51">(<argument><expr><name pos:line="279" pos:column="52">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="280" pos:column="19">else <block pos:line="280" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="281" pos:column="25">System</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">out</name><op:operator pos:line="281" pos:column="35">.</op:operator><name pos:line="281" pos:column="36">println</name></name><argument_list pos:line="281" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="281" pos:column="44">"There exists no professor with that UIN"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

	}</block></function>

	<comment type="line" pos:line="286" pos:column="9">// prof deletion by username</comment>
	<function><type><specifier pos:line="287" pos:column="9">public</specifier> <specifier pos:line="287" pos:column="16">static</specifier> <name pos:line="287" pos:column="23">boolean</name></type> <name pos:line="287" pos:column="31">deleteProfFromDbUsingUserName</name><parameter_list pos:line="287" pos:column="60">(<param><decl><type><name pos:line="287" pos:column="61">String</name></type> <name pos:line="287" pos:column="68">userName</name></decl></param>)</parameter_list> <block pos:line="287" pos:column="78">{

		<decl_stmt><decl><type><name pos:line="289" pos:column="17">boolean</name></type> <name pos:line="289" pos:column="25">isDeleted</name> <init pos:line="289" pos:column="35">= <expr><lit:literal type="boolean" pos:line="289" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="291" pos:column="17">boolean</name></type> <name pos:line="291" pos:column="25">check</name> <init pos:line="291" pos:column="31">= <expr><call><name pos:line="291" pos:column="33">checkIfProfessor</name><argument_list pos:line="291" pos:column="49">(<argument><expr><name pos:line="291" pos:column="50">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="291" pos:column="60">//CHECK IF ITS A PROFESSOR</comment>

		<if pos:line="293" pos:column="17">if <condition pos:line="293" pos:column="20">(<expr><name pos:line="293" pos:column="21">check</name> <op:operator pos:line="293" pos:column="27">==</op:operator> <lit:literal type="boolean" pos:line="293" pos:column="30">true</lit:literal></expr>)</condition><then pos:line="293" pos:column="35"> <block pos:line="293" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="294" pos:column="25">deleteFromDatabaseByUserName</name><argument_list pos:line="294" pos:column="53">(<argument><expr><name pos:line="294" pos:column="54">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="294" pos:column="64">//delete from database in the people table</comment>
			<expr_stmt><expr><name pos:line="295" pos:column="25">isDeleted</name> <op:operator pos:line="295" pos:column="35">=</op:operator> <call><name><name pos:line="295" pos:column="37">Employee</name><op:operator pos:line="295" pos:column="45">.</op:operator><name pos:line="295" pos:column="46">deleteFromDatabaseByUserName</name></name><argument_list pos:line="295" pos:column="74">(<argument><expr><name pos:line="295" pos:column="75">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="295" pos:column="85">//delete from the employee table too</comment>
		}</block></then> <else pos:line="296" pos:column="19">else <block pos:line="296" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="297" pos:column="25">System</name><op:operator pos:line="297" pos:column="31">.</op:operator><name pos:line="297" pos:column="32">out</name><op:operator pos:line="297" pos:column="35">.</op:operator><name pos:line="297" pos:column="36">println</name></name><argument_list pos:line="297" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="297" pos:column="44">"There exists no professor with that username"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<return pos:line="300" pos:column="17">return <expr><name pos:line="300" pos:column="24">isDeleted</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="303" pos:column="9">public</specifier> <name pos:line="303" pos:column="16">String</name></type> <name pos:line="303" pos:column="23">toString</name><parameter_list pos:line="303" pos:column="31">()</parameter_list> <block pos:line="303" pos:column="34">{

		<return pos:line="305" pos:column="17">return <expr><call><name pos:line="305" pos:column="24">getUIN</name><argument_list pos:line="305" pos:column="30">()</argument_list></call> <op:operator pos:line="305" pos:column="33">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="35">" "</lit:literal> <op:operator pos:line="305" pos:column="39">+</op:operator> <call><name pos:line="305" pos:column="41">getUserName</name><argument_list pos:line="305" pos:column="52">()</argument_list></call> <op:operator pos:line="305" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="57">" "</lit:literal> <op:operator pos:line="305" pos:column="61">+</op:operator> <call><name pos:line="305" pos:column="63">getName</name><argument_list pos:line="305" pos:column="70">()</argument_list></call> <op:operator pos:line="305" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="305" pos:column="75">" "</lit:literal>
				<op:operator pos:line="306" pos:column="33">+</op:operator> <call><name pos:line="306" pos:column="35">getDeptID</name><argument_list pos:line="306" pos:column="44">()</argument_list></call> <op:operator pos:line="306" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="306" pos:column="49">" "</lit:literal> <op:operator pos:line="306" pos:column="53">+</op:operator> <call><name pos:line="306" pos:column="55">getPositionID</name><argument_list pos:line="306" pos:column="68">()</argument_list></call></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="310" pos:column="9">/*getting all the professors in a department when passed a dept ID*/</comment>
	<function><type><specifier pos:line="311" pos:column="9">public</specifier> <specifier pos:line="311" pos:column="16">static</specifier> <name><name pos:line="311" pos:column="23">ArrayList</name><argument_list pos:line="311" pos:column="32">&lt;<argument><name pos:line="311" pos:column="33">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="311" pos:column="44">getAllProfInADept</name><parameter_list pos:line="311" pos:column="61">(<param><decl><type><name pos:line="311" pos:column="62">int</name></type> <name pos:line="311" pos:column="66">departmentID</name></decl></param>)</parameter_list>
			<throws pos:line="312" pos:column="25">throws <argument><expr><name pos:line="312" pos:column="32">ProfessorDoesNotExistException</name></expr></argument></throws> <block pos:line="312" pos:column="63">{
		<comment type="line" pos:line="313" pos:column="17">// if(Professor == null)</comment>
		<comment type="line" pos:line="314" pos:column="17">// throw new NullPointerException();</comment>

		<decl_stmt><decl><type><name><name pos:line="316" pos:column="17">ArrayList</name><argument_list pos:line="316" pos:column="26">&lt;<argument><name pos:line="316" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="316" pos:column="38">ProfOfOneDept</name> <init pos:line="316" pos:column="52">= <expr><op:operator pos:line="316" pos:column="54">new</op:operator> <call><name><name pos:line="316" pos:column="58">ArrayList</name><argument_list pos:line="316" pos:column="67">&lt;<argument><name pos:line="316" pos:column="68">Professor</name></argument>&gt;</argument_list></name><argument_list pos:line="316" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="316" pos:column="81">//initialize the prof arraylist</comment>

		<try pos:line="318" pos:column="17">try <block pos:line="318" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="319" pos:column="25">Connection</name></type> <name pos:line="319" pos:column="36">conn</name> <init pos:line="319" pos:column="41">= <expr><call><name><name pos:line="319" pos:column="43">Database</name><op:operator pos:line="319" pos:column="51">.</op:operator><name pos:line="319" pos:column="52">getConnection</name></name><argument_list pos:line="319" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="319" pos:column="68">//get the connection</comment>

			<try pos:line="321" pos:column="25">try <block pos:line="321" pos:column="29">{
				<if pos:line="322" pos:column="33">if <condition pos:line="322" pos:column="36">(<expr><name pos:line="322" pos:column="37">conn</name> <op:operator pos:line="322" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="322" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="322" pos:column="50"> <block pos:line="322" pos:column="51">{

					<decl_stmt><decl><type><name pos:line="324" pos:column="41">Department</name></type> <name pos:line="324" pos:column="52">dept</name> <init pos:line="324" pos:column="57">= <expr><op:operator pos:line="324" pos:column="59">new</op:operator> <call><name pos:line="324" pos:column="63">Department</name><argument_list pos:line="324" pos:column="73">(<argument><expr><name pos:line="324" pos:column="74">departmentID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="324" pos:column="88">//get the dept object</comment>

					<comment type="line" pos:line="326" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="327" pos:column="41">String</name></type> <name pos:line="327" pos:column="48">ProfessorSelect</name> <init pos:line="327" pos:column="64">= <expr><lit:literal type="string" pos:line="327" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="328" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="328" pos:column="59">" FROM people"</lit:literal>
							<op:operator pos:line="329" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="329" pos:column="59">" WHERE DepartmentID= ? and PositionID=2"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="330" pos:column="41">PreparedStatement</name></type> <name pos:line="330" pos:column="59">statement</name> <init pos:line="330" pos:column="69">= <expr><call><name><name pos:line="330" pos:column="71">conn</name><op:operator pos:line="330" pos:column="75">.</op:operator><name pos:line="330" pos:column="76">prepareStatement</name></name><argument_list pos:line="330" pos:column="92">(<argument><expr><name pos:line="330" pos:column="93">ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="331" pos:column="41">statement</name><op:operator pos:line="331" pos:column="50">.</op:operator><name pos:line="331" pos:column="51">setInt</name></name><argument_list pos:line="331" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="331" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="331" pos:column="61">departmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="331" pos:column="75">//set the dept ID</comment>
					<decl_stmt><decl><type><name pos:line="332" pos:column="41">ResultSet</name></type> <name pos:line="332" pos:column="51">rs</name> <init pos:line="332" pos:column="54">= <expr><call><name><name pos:line="332" pos:column="56">statement</name><op:operator pos:line="332" pos:column="65">.</op:operator><name pos:line="332" pos:column="66">executeQuery</name></name><argument_list pos:line="332" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<while pos:line="334" pos:column="41">while <condition pos:line="334" pos:column="47">(<expr><call><name><name pos:line="334" pos:column="48">rs</name><op:operator pos:line="334" pos:column="50">.</op:operator><name pos:line="334" pos:column="51">next</name></name><argument_list pos:line="334" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="334" pos:column="59">{

						<expr_stmt><expr><call><name><name pos:line="336" pos:column="49">DBAnnotation</name><op:operator pos:line="336" pos:column="61">.</op:operator><name pos:line="336" pos:column="62">annoate</name></name><argument_list pos:line="336" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="336" pos:column="70">"retreivedProfUserNames"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="336" pos:column="96">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="336" pos:column="106">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="336" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="337" pos:column="49">String</name></type> <name pos:line="337" pos:column="56">retreivedProfUserNames</name> <init pos:line="337" pos:column="79">= <expr><call><name><name pos:line="337" pos:column="81">rs</name><op:operator pos:line="337" pos:column="83">.</op:operator><name pos:line="337" pos:column="84">getString</name></name><argument_list pos:line="337" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="337" pos:column="94">"Username"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="339" pos:column="49">Professor</name></type> <name pos:line="339" pos:column="59">prof</name> <init pos:line="339" pos:column="64">= <expr><op:operator pos:line="339" pos:column="66">new</op:operator> <call><name pos:line="339" pos:column="70">Professor</name><argument_list pos:line="339" pos:column="79">(<argument><expr><name pos:line="339" pos:column="80">retreivedProfUserNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="340" pos:column="49">ProfOfOneDept</name><op:operator pos:line="340" pos:column="62">.</op:operator><name pos:line="340" pos:column="63">add</name></name><argument_list pos:line="340" pos:column="66">(<argument><expr><name pos:line="340" pos:column="67">prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="340" pos:column="73">//add it to the arraylist</comment>
						<expr_stmt><expr><call><name><name pos:line="341" pos:column="49">System</name><op:operator pos:line="341" pos:column="55">.</op:operator><name pos:line="341" pos:column="56">out</name><op:operator pos:line="341" pos:column="59">.</op:operator><name pos:line="341" pos:column="60">println</name></name><argument_list pos:line="341" pos:column="67">(<argument><expr><call><name><name pos:line="341" pos:column="68">prof</name><op:operator pos:line="341" pos:column="72">.</op:operator><name pos:line="341" pos:column="73">toString</name></name><argument_list pos:line="341" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="347" pos:column="25">//catch block</comment>
			<catch pos:line="348" pos:column="25">catch <parameter_list pos:line="348" pos:column="31">(<param><decl><type><name pos:line="348" pos:column="32">SQLException</name></type> <name pos:line="348" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="348" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="349" pos:column="33">System</name><op:operator pos:line="349" pos:column="39">.</op:operator><name pos:line="349" pos:column="40">out</name><op:operator pos:line="349" pos:column="43">.</op:operator><name pos:line="349" pos:column="44">println</name></name><argument_list pos:line="349" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="52">"Error fetching all the professors of the department "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="350" pos:column="33">System</name><op:operator pos:line="350" pos:column="39">.</op:operator><name pos:line="350" pos:column="40">out</name><op:operator pos:line="350" pos:column="43">.</op:operator><name pos:line="350" pos:column="44">println</name></name><argument_list pos:line="350" pos:column="51">(<argument><expr><call><name><name pos:line="350" pos:column="52">e</name><op:operator pos:line="350" pos:column="53">.</op:operator><name pos:line="350" pos:column="54">getMessage</name></name><argument_list pos:line="350" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="351" pos:column="33">e</name><op:operator pos:line="351" pos:column="34">.</op:operator><name pos:line="351" pos:column="35">printStackTrace</name></name><argument_list pos:line="351" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="line" pos:line="354" pos:column="25">//catch block</comment>
			<catch pos:line="355" pos:column="25">catch <parameter_list pos:line="355" pos:column="31">(<param><decl><type><name><name pos:line="355" pos:column="32">Department</name><op:operator pos:line="355" pos:column="42">.</op:operator><name pos:line="355" pos:column="43">DepartmentDoesNotExistException</name></name></type> <name pos:line="355" pos:column="75">e</name></decl></param>)</parameter_list> <block pos:line="355" pos:column="78">{
				<expr_stmt><expr><call><name><name pos:line="356" pos:column="33">System</name><op:operator pos:line="356" pos:column="39">.</op:operator><name pos:line="356" pos:column="40">out</name><op:operator pos:line="356" pos:column="43">.</op:operator><name pos:line="356" pos:column="44">println</name></name><argument_list pos:line="356" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="356" pos:column="52">"Error fetching the department "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="357" pos:column="33">System</name><op:operator pos:line="357" pos:column="39">.</op:operator><name pos:line="357" pos:column="40">out</name><op:operator pos:line="357" pos:column="43">.</op:operator><name pos:line="357" pos:column="44">println</name></name><argument_list pos:line="357" pos:column="51">(<argument><expr><call><name><name pos:line="357" pos:column="52">e</name><op:operator pos:line="357" pos:column="53">.</op:operator><name pos:line="357" pos:column="54">getMessage</name></name><argument_list pos:line="357" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="358" pos:column="33">e</name><op:operator pos:line="358" pos:column="34">.</op:operator><name pos:line="358" pos:column="35">printStackTrace</name></name><argument_list pos:line="358" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>


			<return pos:line="363" pos:column="25">return <expr><name pos:line="363" pos:column="32">ProfOfOneDept</name></expr>;</return>
		}</block>
		<comment type="block" pos:line="365" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="367" pos:column="17">finally <block pos:line="367" pos:column="25">{
		}</block></finally></try>

	}</block></function>

	<comment type="block" pos:line="372" pos:column="9">/*get all professors in a dept when passed a dept name*/</comment>
	<function><type><specifier pos:line="373" pos:column="9">public</specifier> <specifier pos:line="373" pos:column="16">static</specifier> <name><name pos:line="373" pos:column="23">ArrayList</name><argument_list pos:line="373" pos:column="32">&lt;<argument><name pos:line="373" pos:column="33">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="373" pos:column="44">getAllProfInADept</name><parameter_list pos:line="373" pos:column="61">(<param><decl><type><name pos:line="373" pos:column="62">String</name></type> <name pos:line="373" pos:column="69">DepartmentName</name></decl></param>)</parameter_list>
			<throws pos:line="374" pos:column="25">throws <argument><expr><name pos:line="374" pos:column="32">ProfessorDoesNotExistException</name></expr></argument></throws> <block pos:line="374" pos:column="63">{
		<comment type="line" pos:line="375" pos:column="17">// if(Professor == null)</comment>
		<comment type="line" pos:line="376" pos:column="17">// throw new NullPointerException();</comment>

		<decl_stmt><decl><type><name><name pos:line="378" pos:column="17">ArrayList</name><argument_list pos:line="378" pos:column="26">&lt;<argument><name pos:line="378" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="378" pos:column="38">ProfOfOneDept</name> <init pos:line="378" pos:column="52">= <expr><op:operator pos:line="378" pos:column="54">new</op:operator> <call><name><name pos:line="378" pos:column="58">ArrayList</name><argument_list pos:line="378" pos:column="67">&lt;<argument><name pos:line="378" pos:column="68">Professor</name></argument>&gt;</argument_list></name><argument_list pos:line="378" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="378" pos:column="81">//initialize the araaylist</comment>

		<try pos:line="380" pos:column="17">try <block pos:line="380" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="381" pos:column="25">Connection</name></type> <name pos:line="381" pos:column="36">conn</name> <init pos:line="381" pos:column="41">= <expr><call><name><name pos:line="381" pos:column="43">Database</name><op:operator pos:line="381" pos:column="51">.</op:operator><name pos:line="381" pos:column="52">getConnection</name></name><argument_list pos:line="381" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="381" pos:column="68">//get the connection</comment>

			<try pos:line="383" pos:column="25">try <block pos:line="383" pos:column="29">{
				<if pos:line="384" pos:column="33">if <condition pos:line="384" pos:column="36">(<expr><name pos:line="384" pos:column="37">conn</name> <op:operator pos:line="384" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="384" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="384" pos:column="50"> <block pos:line="384" pos:column="51">{

					<decl_stmt><decl><type><name pos:line="386" pos:column="41">int</name></type> <name pos:line="386" pos:column="45">retreivedDepartmentID</name> <init pos:line="386" pos:column="67">= <expr><lit:literal type="number" pos:line="386" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>

					<try pos:line="388" pos:column="41">try <block pos:line="388" pos:column="45">{
						<decl_stmt><decl><type><name pos:line="389" pos:column="49">String</name></type> <name pos:line="389" pos:column="56">getDeptID</name> <init pos:line="389" pos:column="66">= <expr><lit:literal type="string" pos:line="389" pos:column="68">"Select DepartmentID"</lit:literal>
								<op:operator pos:line="390" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="390" pos:column="67">" FROM department"</lit:literal>
								<op:operator pos:line="391" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="391" pos:column="67">" WHERE DepartmentName= ?"</lit:literal></expr></init></decl>;</decl_stmt>

						<decl_stmt><decl><type><name pos:line="393" pos:column="49">PreparedStatement</name></type> <name pos:line="393" pos:column="67">statement</name> <init pos:line="393" pos:column="77">= <expr><call><name><name pos:line="393" pos:column="79">conn</name><op:operator pos:line="393" pos:column="83">.</op:operator><name pos:line="393" pos:column="84">prepareStatement</name></name><argument_list pos:line="393" pos:column="100">(<argument><expr><name pos:line="393" pos:column="101">getDeptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="394" pos:column="49">statement</name><op:operator pos:line="394" pos:column="58">.</op:operator><name pos:line="394" pos:column="59">setString</name></name><argument_list pos:line="394" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="394" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="394" pos:column="72">DepartmentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="394" pos:column="88">//set the dept ID</comment>
						<decl_stmt><decl><type><name pos:line="395" pos:column="49">ResultSet</name></type> <name pos:line="395" pos:column="59">rs1</name> <init pos:line="395" pos:column="63">= <expr><call><name><name pos:line="395" pos:column="65">statement</name><op:operator pos:line="395" pos:column="74">.</op:operator><name pos:line="395" pos:column="75">executeQuery</name></name><argument_list pos:line="395" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>

						<if pos:line="397" pos:column="49">if <condition pos:line="397" pos:column="52">(<expr><call><name><name pos:line="397" pos:column="53">rs1</name><op:operator pos:line="397" pos:column="56">.</op:operator><name pos:line="397" pos:column="57">first</name></name><argument_list pos:line="397" pos:column="62">()</argument_list></call></expr>)</condition><then pos:line="397" pos:column="65"> <block pos:line="397" pos:column="66">{

							<expr_stmt><expr><call><name><name pos:line="399" pos:column="57">DBAnnotation</name><op:operator pos:line="399" pos:column="69">.</op:operator><name pos:line="399" pos:column="70">annoate</name></name><argument_list pos:line="399" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="399" pos:column="78">"retreivedDepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="399" pos:column="103">"department"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="399" pos:column="117">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="399" pos:column="133">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="400" pos:column="57">retreivedDepartmentID</name> <op:operator pos:line="400" pos:column="79">=</op:operator> <call><name><name pos:line="400" pos:column="81">rs1</name><op:operator pos:line="400" pos:column="84">.</op:operator><name pos:line="400" pos:column="85">getInt</name></name><argument_list pos:line="400" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="400" pos:column="92">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="400" pos:column="108">//retrieve the dept ID</comment>

						}</block></then> <else pos:line="402" pos:column="51">else <block pos:line="402" pos:column="56">{

							<throw pos:line="404" pos:column="57">throw <expr><op:operator pos:line="404" pos:column="63">new</op:operator> <call><name><name pos:line="404" pos:column="67">Department</name><op:operator pos:line="404" pos:column="77">.</op:operator><name pos:line="404" pos:column="78">DepartmentDoesNotExistException</name></name><argument_list pos:line="404" pos:column="109">()</argument_list></call></expr>;</throw><comment type="line" pos:line="404" pos:column="112">//throw an exception</comment>
						}</block></else></if>

					}</block>
					<comment type="line" pos:line="408" pos:column="41">//catch block</comment>
					<catch pos:line="409" pos:column="41">catch <parameter_list pos:line="409" pos:column="47">(<param><decl><type><name pos:line="409" pos:column="48">SQLException</name></type> <name pos:line="409" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="409" pos:column="64">{
						<expr_stmt><expr><call><name><name pos:line="410" pos:column="49">System</name><op:operator pos:line="410" pos:column="55">.</op:operator><name pos:line="410" pos:column="56">out</name>
								<op:operator pos:line="411" pos:column="65">.</op:operator><name pos:line="411" pos:column="66">println</name></name><argument_list pos:line="411" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="411" pos:column="74">"Error finding the department name "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="412" pos:column="49">System</name><op:operator pos:line="412" pos:column="55">.</op:operator><name pos:line="412" pos:column="56">out</name><op:operator pos:line="412" pos:column="59">.</op:operator><name pos:line="412" pos:column="60">println</name></name><argument_list pos:line="412" pos:column="67">(<argument><expr><call><name><name pos:line="412" pos:column="68">e</name><op:operator pos:line="412" pos:column="69">.</op:operator><name pos:line="412" pos:column="70">getMessage</name></name><argument_list pos:line="412" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="413" pos:column="49">e</name><op:operator pos:line="413" pos:column="50">.</op:operator><name pos:line="413" pos:column="51">printStackTrace</name></name><argument_list pos:line="413" pos:column="66">()</argument_list></call></expr>;</expr_stmt>

					}</block></catch>
					<comment type="line" pos:line="416" pos:column="41">//catch block</comment>
					<catch pos:line="417" pos:column="41">catch <parameter_list pos:line="417" pos:column="47">(<param><decl><type><name><name pos:line="417" pos:column="48">Department</name><op:operator pos:line="417" pos:column="58">.</op:operator><name pos:line="417" pos:column="59">DepartmentDoesNotExistException</name></name></type> <name pos:line="417" pos:column="91">e</name></decl></param>)</parameter_list> <block pos:line="417" pos:column="94">{
						<expr_stmt><expr><call><name><name pos:line="418" pos:column="49">System</name><op:operator pos:line="418" pos:column="55">.</op:operator><name pos:line="418" pos:column="56">out</name><op:operator pos:line="418" pos:column="59">.</op:operator><name pos:line="418" pos:column="60">println</name></name><argument_list pos:line="418" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="418" pos:column="68">"Error fetching the department "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="419" pos:column="49">System</name><op:operator pos:line="419" pos:column="55">.</op:operator><name pos:line="419" pos:column="56">out</name><op:operator pos:line="419" pos:column="59">.</op:operator><name pos:line="419" pos:column="60">println</name></name><argument_list pos:line="419" pos:column="67">(<argument><expr><call><name><name pos:line="419" pos:column="68">e</name><op:operator pos:line="419" pos:column="69">.</op:operator><name pos:line="419" pos:column="70">getMessage</name></name><argument_list pos:line="419" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="420" pos:column="49">e</name><op:operator pos:line="420" pos:column="50">.</op:operator><name pos:line="420" pos:column="51">printStackTrace</name></name><argument_list pos:line="420" pos:column="66">()</argument_list></call></expr>;</expr_stmt>

					}</block></catch></try>

					<comment type="line" pos:line="424" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="425" pos:column="41">String</name></type> <name pos:line="425" pos:column="48">SemesterSelect</name> <init pos:line="425" pos:column="63">= <expr><lit:literal type="string" pos:line="425" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="426" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="426" pos:column="59">" FROM people"</lit:literal>
							<op:operator pos:line="427" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="427" pos:column="59">" WHERE DepartmentID= ? and PositionID=2"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="428" pos:column="41">PreparedStatement</name></type> <name pos:line="428" pos:column="59">statement1</name> <init pos:line="428" pos:column="70">= <expr><call><name><name pos:line="428" pos:column="72">conn</name>
							<op:operator pos:line="429" pos:column="57">.</op:operator><name pos:line="429" pos:column="58">prepareStatement</name></name><argument_list pos:line="429" pos:column="74">(<argument><expr><name pos:line="429" pos:column="75">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="430" pos:column="41">statement1</name><op:operator pos:line="430" pos:column="51">.</op:operator><name pos:line="430" pos:column="52">setInt</name></name><argument_list pos:line="430" pos:column="58">(<argument><expr><lit:literal type="number" pos:line="430" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="430" pos:column="62">retreivedDepartmentID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="431" pos:column="41">ResultSet</name></type> <name pos:line="431" pos:column="51">rs</name> <init pos:line="431" pos:column="54">= <expr><call><name><name pos:line="431" pos:column="56">statement1</name><op:operator pos:line="431" pos:column="66">.</op:operator><name pos:line="431" pos:column="67">executeQuery</name></name><argument_list pos:line="431" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<while pos:line="433" pos:column="41">while <condition pos:line="433" pos:column="47">(<expr><call><name><name pos:line="433" pos:column="48">rs</name><op:operator pos:line="433" pos:column="50">.</op:operator><name pos:line="433" pos:column="51">next</name></name><argument_list pos:line="433" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="433" pos:column="59">{

						<expr_stmt><expr><call><name><name pos:line="435" pos:column="49">DBAnnotation</name><op:operator pos:line="435" pos:column="61">.</op:operator><name pos:line="435" pos:column="62">annoate</name></name><argument_list pos:line="435" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="435" pos:column="70">"retreivedProfUserNames"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="435" pos:column="96">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="435" pos:column="106">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="435" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="436" pos:column="49">String</name></type> <name pos:line="436" pos:column="56">retreivedProfUserNames</name> <init pos:line="436" pos:column="79">= <expr><call><name><name pos:line="436" pos:column="81">rs</name><op:operator pos:line="436" pos:column="83">.</op:operator><name pos:line="436" pos:column="84">getString</name></name><argument_list pos:line="436" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="436" pos:column="94">"Username"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<decl_stmt><decl><type><name pos:line="438" pos:column="49">Professor</name></type> <name pos:line="438" pos:column="59">prof</name> <init pos:line="438" pos:column="64">= <expr><op:operator pos:line="438" pos:column="66">new</op:operator> <call><name pos:line="438" pos:column="70">Professor</name><argument_list pos:line="438" pos:column="79">(<argument><expr><name pos:line="438" pos:column="80">retreivedProfUserNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="439" pos:column="49">ProfOfOneDept</name><op:operator pos:line="439" pos:column="62">.</op:operator><name pos:line="439" pos:column="63">add</name></name><argument_list pos:line="439" pos:column="66">(<argument><expr><name pos:line="439" pos:column="67">prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="439" pos:column="73">//add the professor objects to te arraylist</comment>
						<expr_stmt><expr><call><name><name pos:line="440" pos:column="49">System</name><op:operator pos:line="440" pos:column="55">.</op:operator><name pos:line="440" pos:column="56">out</name><op:operator pos:line="440" pos:column="59">.</op:operator><name pos:line="440" pos:column="60">println</name></name><argument_list pos:line="440" pos:column="67">(<argument><expr><call><name><name pos:line="440" pos:column="68">prof</name><op:operator pos:line="440" pos:column="72">.</op:operator><name pos:line="440" pos:column="73">toString</name></name><argument_list pos:line="440" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="446" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="447" pos:column="25">catch <parameter_list pos:line="447" pos:column="31">(<param><decl><type><name pos:line="447" pos:column="32">SQLException</name></type> <name pos:line="447" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="447" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="448" pos:column="33">System</name><op:operator pos:line="448" pos:column="39">.</op:operator><name pos:line="448" pos:column="40">out</name><op:operator pos:line="448" pos:column="43">.</op:operator><name pos:line="448" pos:column="44">println</name></name><argument_list pos:line="448" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="448" pos:column="52">"Error fetching all the professors of the department "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="449" pos:column="33">System</name><op:operator pos:line="449" pos:column="39">.</op:operator><name pos:line="449" pos:column="40">out</name><op:operator pos:line="449" pos:column="43">.</op:operator><name pos:line="449" pos:column="44">println</name></name><argument_list pos:line="449" pos:column="51">(<argument><expr><call><name><name pos:line="449" pos:column="52">e</name><op:operator pos:line="449" pos:column="53">.</op:operator><name pos:line="449" pos:column="54">getMessage</name></name><argument_list pos:line="449" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="450" pos:column="33">e</name><op:operator pos:line="450" pos:column="34">.</op:operator><name pos:line="450" pos:column="35">printStackTrace</name></name><argument_list pos:line="450" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

			<return pos:line="454" pos:column="25">return <expr><name pos:line="454" pos:column="32">ProfOfOneDept</name></expr>;</return>
		}</block>

		<comment type="block" pos:line="457" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="459" pos:column="17">finally <block pos:line="459" pos:column="25">{
		}</block></finally></try>

	}</block></function>

	<comment type="block" pos:line="464" pos:column="9">/*get all professors from the people table*/</comment>
	<function><type><specifier pos:line="465" pos:column="9">public</specifier> <specifier pos:line="465" pos:column="16">static</specifier> <name><name pos:line="465" pos:column="23">ArrayList</name><argument_list pos:line="465" pos:column="32">&lt;<argument><name pos:line="465" pos:column="33">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="465" pos:column="44">getAllProf</name><parameter_list pos:line="465" pos:column="54">()</parameter_list> <block pos:line="465" pos:column="57">{

		<decl_stmt><decl><type><name><name pos:line="467" pos:column="17">ArrayList</name><argument_list pos:line="467" pos:column="26">&lt;<argument><name pos:line="467" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="467" pos:column="38">allProfs</name> <init pos:line="467" pos:column="47">= <expr><op:operator pos:line="467" pos:column="49">new</op:operator> <call><name><name pos:line="467" pos:column="53">ArrayList</name><argument_list pos:line="467" pos:column="62">&lt;<argument><name pos:line="467" pos:column="63">Professor</name></argument>&gt;</argument_list></name><argument_list pos:line="467" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="467" pos:column="76">//initialize the arraylist</comment>

		<try pos:line="469" pos:column="17">try <block pos:line="469" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="470" pos:column="25">Connection</name></type> <name pos:line="470" pos:column="36">conn</name> <init pos:line="470" pos:column="41">= <expr><call><name><name pos:line="470" pos:column="43">Database</name><op:operator pos:line="470" pos:column="51">.</op:operator><name pos:line="470" pos:column="52">getConnection</name></name><argument_list pos:line="470" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="470" pos:column="68">//get the connection</comment>

			<try pos:line="472" pos:column="25">try <block pos:line="472" pos:column="29">{
				<if pos:line="473" pos:column="33">if <condition pos:line="473" pos:column="36">(<expr><name pos:line="473" pos:column="37">conn</name> <op:operator pos:line="473" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="473" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="473" pos:column="50"> <block pos:line="473" pos:column="51">{

					<comment type="line" pos:line="475" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="476" pos:column="41">String</name></type> <name pos:line="476" pos:column="48">ProfessorSelect</name> <init pos:line="476" pos:column="64">= <expr><lit:literal type="string" pos:line="476" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="477" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="59">" FROM people"</lit:literal> <op:operator pos:line="477" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="477" pos:column="76">" WHERE PositionID=2"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="478" pos:column="41">PreparedStatement</name></type> <name pos:line="478" pos:column="59">statement</name> <init pos:line="478" pos:column="69">= <expr><call><name><name pos:line="478" pos:column="71">conn</name><op:operator pos:line="478" pos:column="75">.</op:operator><name pos:line="478" pos:column="76">prepareStatement</name></name><argument_list pos:line="478" pos:column="92">(<argument><expr><name pos:line="478" pos:column="93">ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="479" pos:column="41">ResultSet</name></type> <name pos:line="479" pos:column="51">rs</name> <init pos:line="479" pos:column="54">= <expr><call><name><name pos:line="479" pos:column="56">statement</name><op:operator pos:line="479" pos:column="65">.</op:operator><name pos:line="479" pos:column="66">executeQuery</name></name><argument_list pos:line="479" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="479" pos:column="81">//execute the query</comment>

					<while pos:line="481" pos:column="41">while <condition pos:line="481" pos:column="47">(<expr><call><name><name pos:line="481" pos:column="48">rs</name><op:operator pos:line="481" pos:column="50">.</op:operator><name pos:line="481" pos:column="51">next</name></name><argument_list pos:line="481" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="481" pos:column="59">{

						<expr_stmt><expr><call><name><name pos:line="483" pos:column="49">DBAnnotation</name><op:operator pos:line="483" pos:column="61">.</op:operator><name pos:line="483" pos:column="62">annoate</name></name><argument_list pos:line="483" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="483" pos:column="70">"retreivedProfUserNames"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="96">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="106">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="483" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="484" pos:column="49">String</name></type> <name pos:line="484" pos:column="56">retreivedProfUserNames</name> <init pos:line="484" pos:column="79">= <expr><call><name><name pos:line="484" pos:column="81">rs</name><op:operator pos:line="484" pos:column="83">.</op:operator><name pos:line="484" pos:column="84">getString</name></name><argument_list pos:line="484" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="484" pos:column="94">"Username"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="484" pos:column="106">//retieve the username</comment>
						
						<decl_stmt><decl><type><name pos:line="486" pos:column="49">Professor</name></type> <name pos:line="486" pos:column="59">prof</name> <init pos:line="486" pos:column="64">= <expr><op:operator pos:line="486" pos:column="66">new</op:operator> <call><name pos:line="486" pos:column="70">Professor</name><argument_list pos:line="486" pos:column="79">(<argument><expr><name pos:line="486" pos:column="80">retreivedProfUserNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="487" pos:column="49">allProfs</name><op:operator pos:line="487" pos:column="57">.</op:operator><name pos:line="487" pos:column="58">add</name></name><argument_list pos:line="487" pos:column="61">(<argument><expr><name pos:line="487" pos:column="62">prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="487" pos:column="68">//add it to the arraylist the professor objects</comment>
						<expr_stmt><expr><call><name><name pos:line="488" pos:column="49">System</name><op:operator pos:line="488" pos:column="55">.</op:operator><name pos:line="488" pos:column="56">out</name><op:operator pos:line="488" pos:column="59">.</op:operator><name pos:line="488" pos:column="60">println</name></name><argument_list pos:line="488" pos:column="67">(<argument><expr><call><name><name pos:line="488" pos:column="68">prof</name><op:operator pos:line="488" pos:column="72">.</op:operator><name pos:line="488" pos:column="73">getUserName</name></name><argument_list pos:line="488" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="494" pos:column="25">//catch block</comment>
			<catch pos:line="495" pos:column="25">catch <parameter_list pos:line="495" pos:column="31">(<param><decl><type><name pos:line="495" pos:column="32">SQLException</name></type> <name pos:line="495" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="495" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">System</name><op:operator pos:line="496" pos:column="39">.</op:operator><name pos:line="496" pos:column="40">out</name><op:operator pos:line="496" pos:column="43">.</op:operator><name pos:line="496" pos:column="44">println</name></name><argument_list pos:line="496" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="496" pos:column="52">"Error fetching all the professors"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="497" pos:column="33">System</name><op:operator pos:line="497" pos:column="39">.</op:operator><name pos:line="497" pos:column="40">out</name><op:operator pos:line="497" pos:column="43">.</op:operator><name pos:line="497" pos:column="44">println</name></name><argument_list pos:line="497" pos:column="51">(<argument><expr><call><name><name pos:line="497" pos:column="52">e</name><op:operator pos:line="497" pos:column="53">.</op:operator><name pos:line="497" pos:column="54">getMessage</name></name><argument_list pos:line="497" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="498" pos:column="33">e</name><op:operator pos:line="498" pos:column="34">.</op:operator><name pos:line="498" pos:column="35">printStackTrace</name></name><argument_list pos:line="498" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>


			<return pos:line="503" pos:column="25">return <expr><name pos:line="503" pos:column="32">allProfs</name></expr>;</return>
		}</block>
		<comment type="block" pos:line="505" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="507" pos:column="17">finally <block pos:line="507" pos:column="25">{
		}</block></finally></try>

	}</block></function>

	<comment type="line" pos:line="512" pos:column="9">//update the professor username</comment>
	<function><type><specifier pos:line="513" pos:column="9">public</specifier> <name pos:line="513" pos:column="16">boolean</name></type> <name pos:line="513" pos:column="24">updateProfUserName</name><parameter_list pos:line="513" pos:column="42">(<param><decl><type><name pos:line="513" pos:column="43">String</name></type> <name pos:line="513" pos:column="50">userName</name></decl></param>)</parameter_list> <block pos:line="513" pos:column="60">{
		
		<if pos:line="515" pos:column="17">if<condition pos:line="515" pos:column="19">(<expr><name pos:line="515" pos:column="20">userName</name><op:operator pos:line="515" pos:column="28">==</op:operator><lit:literal type="null" pos:line="515" pos:column="30">null</lit:literal></expr>)</condition><then><block pos:line="515" pos:column="35">{
			<return pos:line="516" pos:column="25">return <expr><lit:literal type="boolean" pos:line="516" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="519" pos:column="17">if<condition pos:line="519" pos:column="19">(<expr><call><name><name pos:line="519" pos:column="20">userName</name><op:operator pos:line="519" pos:column="28">.</op:operator><name pos:line="519" pos:column="29">length</name></name><argument_list pos:line="519" pos:column="35">()</argument_list></call><op:operator pos:line="519" pos:column="37">==</op:operator><lit:literal type="number" pos:line="519" pos:column="39">0</lit:literal></expr>)</condition><then><block pos:line="519" pos:column="41">{
			<return pos:line="520" pos:column="25">return <expr><lit:literal type="boolean" pos:line="520" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="523" pos:column="17">boolean</name></type> <name pos:line="523" pos:column="25">isUpdated</name> <init pos:line="523" pos:column="35">= <expr><lit:literal type="boolean" pos:line="523" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="525" pos:column="17">try <block pos:line="525" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="526" pos:column="25">Connection</name></type> <name pos:line="526" pos:column="36">conn</name> <init pos:line="526" pos:column="41">= <expr><call><name><name pos:line="526" pos:column="43">Database</name><op:operator pos:line="526" pos:column="51">.</op:operator><name pos:line="526" pos:column="52">getConnection</name></name><argument_list pos:line="526" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="526" pos:column="68">//get the connection</comment>

			<try pos:line="528" pos:column="25">try <block pos:line="528" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="530" pos:column="33">boolean</name></type> <name pos:line="530" pos:column="41">ifAddedInLogin</name> <init pos:line="530" pos:column="56">= <expr><call><name><name pos:line="530" pos:column="58">People</name><op:operator pos:line="530" pos:column="64">.</op:operator><name pos:line="530" pos:column="65">updateUserNameIntoLoginTable</name></name><argument_list pos:line="530" pos:column="93">(<argument><expr><name pos:line="530" pos:column="94">userName</name></expr></argument>, <argument><expr><call><name><name pos:line="530" pos:column="104">this</name><op:operator pos:line="530" pos:column="108">.</op:operator><name pos:line="530" pos:column="109">getUserName</name></name><argument_list pos:line="530" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="530" pos:column="124">//update in login table</comment>
				<if pos:line="531" pos:column="33">if <condition pos:line="531" pos:column="36">(<expr><name pos:line="531" pos:column="37">ifAddedInLogin</name></expr>)</condition><then pos:line="531" pos:column="52">
					<expr_stmt><expr><name pos:line="532" pos:column="41">isUpdated</name> <op:operator pos:line="532" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="532" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="535" pos:column="25">//catch the exception</comment>
			<catch pos:line="536" pos:column="25">catch <parameter_list pos:line="536" pos:column="31">(<param><decl><type><name pos:line="536" pos:column="32">Exception</name></type> <name pos:line="536" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="536" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="537" pos:column="33">System</name><op:operator pos:line="537" pos:column="39">.</op:operator><name pos:line="537" pos:column="40">out</name><op:operator pos:line="537" pos:column="43">.</op:operator><name pos:line="537" pos:column="44">println</name></name><argument_list pos:line="537" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="537" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="538" pos:column="33">e</name><op:operator pos:line="538" pos:column="34">.</op:operator><name pos:line="538" pos:column="35">printStackTrace</name></name><argument_list pos:line="538" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="539" pos:column="33">System</name><op:operator pos:line="539" pos:column="39">.</op:operator><name pos:line="539" pos:column="40">out</name><op:operator pos:line="539" pos:column="43">.</op:operator><name pos:line="539" pos:column="44">println</name></name><argument_list pos:line="539" pos:column="51">(<argument><expr><name pos:line="539" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="543" pos:column="17">//catch the exception</comment>
		<catch pos:line="544" pos:column="17">catch <parameter_list pos:line="544" pos:column="23">(<param><decl><type><name pos:line="544" pos:column="24">Exception</name></type> <name pos:line="544" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="544" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="545" pos:column="25">System</name><op:operator pos:line="545" pos:column="31">.</op:operator><name pos:line="545" pos:column="32">out</name><op:operator pos:line="545" pos:column="35">.</op:operator><name pos:line="545" pos:column="36">println</name></name><argument_list pos:line="545" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="545" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="546" pos:column="25">e</name><op:operator pos:line="546" pos:column="26">.</op:operator><name pos:line="546" pos:column="27">printStackTrace</name></name><argument_list pos:line="546" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="547" pos:column="25">System</name><op:operator pos:line="547" pos:column="31">.</op:operator><name pos:line="547" pos:column="32">out</name><op:operator pos:line="547" pos:column="35">.</op:operator><name pos:line="547" pos:column="36">println</name></name><argument_list pos:line="547" pos:column="43">(<argument><expr><name pos:line="547" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="551" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="553" pos:column="17">finally <block pos:line="553" pos:column="25">{

			<comment type="line" pos:line="555" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="558" pos:column="17">return <expr><name pos:line="558" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="line" pos:line="562" pos:column="9">//update the professor name</comment>
	<function><type><specifier pos:line="563" pos:column="9">public</specifier> <name pos:line="563" pos:column="16">boolean</name></type> <name pos:line="563" pos:column="24">updateProfName</name><parameter_list pos:line="563" pos:column="38">(<param><decl><type><name pos:line="563" pos:column="39">String</name></type> <name pos:line="563" pos:column="46">name</name></decl></param>)</parameter_list> <block pos:line="563" pos:column="52">{
		
		<if pos:line="565" pos:column="17">if<condition pos:line="565" pos:column="19">(<expr><name pos:line="565" pos:column="20">name</name><op:operator pos:line="565" pos:column="24">==</op:operator><lit:literal type="null" pos:line="565" pos:column="26">null</lit:literal></expr>)</condition><then><block pos:line="565" pos:column="31">{
			<return pos:line="566" pos:column="25">return <expr><lit:literal type="boolean" pos:line="566" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		
		<if pos:line="569" pos:column="17">if<condition pos:line="569" pos:column="19">(<expr><call><name><name pos:line="569" pos:column="20">name</name><op:operator pos:line="569" pos:column="24">.</op:operator><name pos:line="569" pos:column="25">length</name></name><argument_list pos:line="569" pos:column="31">()</argument_list></call><op:operator pos:line="569" pos:column="33">==</op:operator><lit:literal type="number" pos:line="569" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="569" pos:column="37">{
			<return pos:line="570" pos:column="25">return <expr><lit:literal type="boolean" pos:line="570" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="573" pos:column="17">boolean</name></type> <name pos:line="573" pos:column="25">isUpdated</name> <init pos:line="573" pos:column="35">= <expr><lit:literal type="boolean" pos:line="573" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="575" pos:column="17">try <block pos:line="575" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="576" pos:column="25">Connection</name></type> <name pos:line="576" pos:column="36">conn</name> <init pos:line="576" pos:column="41">= <expr><call><name><name pos:line="576" pos:column="43">Database</name><op:operator pos:line="576" pos:column="51">.</op:operator><name pos:line="576" pos:column="52">getConnection</name></name><argument_list pos:line="576" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="576" pos:column="68">//get the connection</comment>

			<try pos:line="578" pos:column="25">try <block pos:line="578" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="580" pos:column="33">boolean</name></type> <name pos:line="580" pos:column="41">ifUpdatedInPeople</name> <init pos:line="580" pos:column="59">= <expr><call><name><name pos:line="580" pos:column="61">People</name><op:operator pos:line="580" pos:column="67">.</op:operator><name pos:line="580" pos:column="68">updateNameIntoPeopleTable</name></name><argument_list pos:line="580" pos:column="93">(<argument><expr><name pos:line="580" pos:column="94">name</name></expr></argument>, <argument><expr><call><name><name pos:line="580" pos:column="100">this</name><op:operator pos:line="580" pos:column="104">.</op:operator><name pos:line="580" pos:column="105">getUIN</name></name><argument_list pos:line="580" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="580" pos:column="115">//update into the people table</comment>
				<if pos:line="581" pos:column="33">if <condition pos:line="581" pos:column="36">(<expr><name pos:line="581" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="581" pos:column="55">
					<expr_stmt><expr><name pos:line="582" pos:column="41">isUpdated</name> <op:operator pos:line="582" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="582" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="585" pos:column="25">//catch block</comment>
			<catch pos:line="586" pos:column="25">catch <parameter_list pos:line="586" pos:column="31">(<param><decl><type><name pos:line="586" pos:column="32">Exception</name></type> <name pos:line="586" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="586" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="587" pos:column="33">System</name><op:operator pos:line="587" pos:column="39">.</op:operator><name pos:line="587" pos:column="40">out</name><op:operator pos:line="587" pos:column="43">.</op:operator><name pos:line="587" pos:column="44">println</name></name><argument_list pos:line="587" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="587" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="588" pos:column="33">e</name><op:operator pos:line="588" pos:column="34">.</op:operator><name pos:line="588" pos:column="35">printStackTrace</name></name><argument_list pos:line="588" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="589" pos:column="33">System</name><op:operator pos:line="589" pos:column="39">.</op:operator><name pos:line="589" pos:column="40">out</name><op:operator pos:line="589" pos:column="43">.</op:operator><name pos:line="589" pos:column="44">println</name></name><argument_list pos:line="589" pos:column="51">(<argument><expr><name pos:line="589" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="593" pos:column="17">//catch block</comment>
		<catch pos:line="594" pos:column="17">catch <parameter_list pos:line="594" pos:column="23">(<param><decl><type><name pos:line="594" pos:column="24">Exception</name></type> <name pos:line="594" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="594" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="595" pos:column="25">System</name><op:operator pos:line="595" pos:column="31">.</op:operator><name pos:line="595" pos:column="32">out</name><op:operator pos:line="595" pos:column="35">.</op:operator><name pos:line="595" pos:column="36">println</name></name><argument_list pos:line="595" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="595" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="596" pos:column="25">e</name><op:operator pos:line="596" pos:column="26">.</op:operator><name pos:line="596" pos:column="27">printStackTrace</name></name><argument_list pos:line="596" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="597" pos:column="25">System</name><op:operator pos:line="597" pos:column="31">.</op:operator><name pos:line="597" pos:column="32">out</name><op:operator pos:line="597" pos:column="35">.</op:operator><name pos:line="597" pos:column="36">println</name></name><argument_list pos:line="597" pos:column="43">(<argument><expr><name pos:line="597" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="600" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="602" pos:column="17">finally <block pos:line="602" pos:column="25">{

			<comment type="line" pos:line="604" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="607" pos:column="17">return <expr><name pos:line="607" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="line" pos:line="611" pos:column="9">//update the prof dept</comment>
	<function><type><specifier pos:line="612" pos:column="9">public</specifier> <name pos:line="612" pos:column="16">boolean</name></type> <name pos:line="612" pos:column="24">updateProfDept</name><parameter_list pos:line="612" pos:column="38">(<param><decl><type><name pos:line="612" pos:column="39">int</name></type> <name pos:line="612" pos:column="43">deptID</name></decl></param>)</parameter_list> <block pos:line="612" pos:column="51">{

		<comment type="line" pos:line="614" pos:column="17">// how to check if the dept ID is not existing</comment>
		<decl_stmt><decl><type><name pos:line="615" pos:column="17">boolean</name></type> <name pos:line="615" pos:column="25">isUpdated</name> <init pos:line="615" pos:column="35">= <expr><lit:literal type="boolean" pos:line="615" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="617" pos:column="17">try <block pos:line="617" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="618" pos:column="25">Connection</name></type> <name pos:line="618" pos:column="36">conn</name> <init pos:line="618" pos:column="41">= <expr><call><name><name pos:line="618" pos:column="43">Database</name><op:operator pos:line="618" pos:column="51">.</op:operator><name pos:line="618" pos:column="52">getConnection</name></name><argument_list pos:line="618" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="618" pos:column="68">//get the connection</comment>

			<try pos:line="620" pos:column="25">try <block pos:line="620" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="622" pos:column="33">boolean</name></type> <name pos:line="622" pos:column="41">ifUpdatedInPeople</name> <init pos:line="622" pos:column="59">= <expr><call><name><name pos:line="622" pos:column="61">People</name><op:operator pos:line="622" pos:column="67">.</op:operator><name pos:line="622" pos:column="68">updateDeptIntoPeopleTable</name></name><argument_list pos:line="622" pos:column="93">(<argument><expr><name pos:line="622" pos:column="94">deptID</name></expr></argument>, <argument><expr><call><name><name pos:line="622" pos:column="102">this</name><op:operator pos:line="622" pos:column="106">.</op:operator><name pos:line="622" pos:column="107">getUIN</name></name><argument_list pos:line="622" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="622" pos:column="117">//update the dept</comment>
				<if pos:line="623" pos:column="33">if <condition pos:line="623" pos:column="36">(<expr><name pos:line="623" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="623" pos:column="55">
					<expr_stmt><expr><name pos:line="624" pos:column="41">isUpdated</name> <op:operator pos:line="624" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="624" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="627" pos:column="25">//catch block</comment>
			<catch pos:line="628" pos:column="25">catch <parameter_list pos:line="628" pos:column="31">(<param><decl><type><name pos:line="628" pos:column="32">Exception</name></type> <name pos:line="628" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="628" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="629" pos:column="33">System</name><op:operator pos:line="629" pos:column="39">.</op:operator><name pos:line="629" pos:column="40">out</name><op:operator pos:line="629" pos:column="43">.</op:operator><name pos:line="629" pos:column="44">println</name></name><argument_list pos:line="629" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="629" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="630" pos:column="33">e</name><op:operator pos:line="630" pos:column="34">.</op:operator><name pos:line="630" pos:column="35">printStackTrace</name></name><argument_list pos:line="630" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="631" pos:column="33">System</name><op:operator pos:line="631" pos:column="39">.</op:operator><name pos:line="631" pos:column="40">out</name><op:operator pos:line="631" pos:column="43">.</op:operator><name pos:line="631" pos:column="44">println</name></name><argument_list pos:line="631" pos:column="51">(<argument><expr><name pos:line="631" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="635" pos:column="17">//catch block</comment>
		<catch pos:line="636" pos:column="17">catch <parameter_list pos:line="636" pos:column="23">(<param><decl><type><name pos:line="636" pos:column="24">Exception</name></type> <name pos:line="636" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="636" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="637" pos:column="25">System</name><op:operator pos:line="637" pos:column="31">.</op:operator><name pos:line="637" pos:column="32">out</name><op:operator pos:line="637" pos:column="35">.</op:operator><name pos:line="637" pos:column="36">println</name></name><argument_list pos:line="637" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="637" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="638" pos:column="25">e</name><op:operator pos:line="638" pos:column="26">.</op:operator><name pos:line="638" pos:column="27">printStackTrace</name></name><argument_list pos:line="638" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="639" pos:column="25">System</name><op:operator pos:line="639" pos:column="31">.</op:operator><name pos:line="639" pos:column="32">out</name><op:operator pos:line="639" pos:column="35">.</op:operator><name pos:line="639" pos:column="36">println</name></name><argument_list pos:line="639" pos:column="43">(<argument><expr><name pos:line="639" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally pos:line="643" pos:column="17">finally <block pos:line="643" pos:column="25">{

			<comment type="line" pos:line="645" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="648" pos:column="17">return <expr><name pos:line="648" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="line" pos:line="652" pos:column="9">//new exceptions added that can be thrown </comment>
	<class><specifier pos:line="653" pos:column="9">public</specifier> <specifier pos:line="653" pos:column="16">static</specifier> class <name pos:line="653" pos:column="29">ProfessorDoesNotExistException</name> <super><extends pos:line="653" pos:column="60">extends <name pos:line="653" pos:column="68">Exception</name></extends></super> <block pos:line="653" pos:column="78">{
		<decl_stmt><decl><type><specifier pos:line="654" pos:column="17">private</specifier> <specifier pos:line="654" pos:column="25">static</specifier> <specifier pos:line="654" pos:column="32">final</specifier> <name pos:line="654" pos:column="38">long</name></type> <name pos:line="654" pos:column="43">serialVersionUID</name> <init pos:line="654" pos:column="60">= <expr><lit:literal type="number" pos:line="654" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="655" pos:column="17">private</specifier> <name pos:line="655" pos:column="25">String</name></type> <name pos:line="655" pos:column="32">message</name> <init pos:line="655" pos:column="40">= <expr><lit:literal type="null" pos:line="655" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="657" pos:column="17">public</specifier> <name pos:line="657" pos:column="24">ProfessorDoesNotExistException</name><parameter_list pos:line="657" pos:column="54">()</parameter_list> <block pos:line="657" pos:column="57">{
			<expr_stmt><expr><call><name pos:line="658" pos:column="25">super</name><argument_list pos:line="658" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="659" pos:column="25">this</name><op:operator pos:line="659" pos:column="29">.</op:operator><name pos:line="659" pos:column="30">message</name></name> <op:operator pos:line="659" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="659" pos:column="40">"Professor does not exist"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="662" pos:column="17">public</specifier> <name pos:line="662" pos:column="24">ProfessorDoesNotExistException</name><parameter_list pos:line="662" pos:column="54">(<param><decl><type><name pos:line="662" pos:column="55">String</name></type> <name pos:line="662" pos:column="62">message</name></decl></param>)</parameter_list> <block pos:line="662" pos:column="71">{
			<expr_stmt><expr><call><name pos:line="663" pos:column="25">super</name><argument_list pos:line="663" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="664" pos:column="25">this</name><op:operator pos:line="664" pos:column="29">.</op:operator><name pos:line="664" pos:column="30">message</name></name> <op:operator pos:line="664" pos:column="38">=</op:operator> <name pos:line="664" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="667" pos:column="17">@<name pos:line="667" pos:column="18">Override</name></annotation>
		<specifier pos:line="668" pos:column="17">public</specifier> <name pos:line="668" pos:column="24">String</name></type> <name pos:line="668" pos:column="31">toString</name><parameter_list pos:line="668" pos:column="39">()</parameter_list> <block pos:line="668" pos:column="42">{
			<return pos:line="669" pos:column="25">return <expr><name pos:line="669" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="672" pos:column="17">@<name pos:line="672" pos:column="18">Override</name></annotation>
		<specifier pos:line="673" pos:column="17">public</specifier> <name pos:line="673" pos:column="24">String</name></type> <name pos:line="673" pos:column="31">getMessage</name><parameter_list pos:line="673" pos:column="41">()</parameter_list> <block pos:line="673" pos:column="44">{
			<return pos:line="674" pos:column="25">return <expr><name pos:line="674" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block" pos:line="678" pos:column="9">/*
	 * All professor functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier pos:line="683" pos:column="9">public</specifier> <specifier pos:line="683" pos:column="16">static</specifier> <name pos:line="683" pos:column="23">void</name></type> <name pos:line="683" pos:column="28">main</name><parameter_list pos:line="683" pos:column="32">(<param><decl><type><name><name pos:line="683" pos:column="33">String</name><index pos:line="683" pos:column="39">[]</index></name></type> <name pos:line="683" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="683" pos:column="48">{

	}</block></function>

}</block></class>
</unit>
