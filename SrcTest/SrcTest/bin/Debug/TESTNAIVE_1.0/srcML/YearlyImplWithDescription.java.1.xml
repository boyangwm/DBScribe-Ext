<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\implObjects\YearlyImplWithDescription.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">implObjects</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">com</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">riskIt</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">interfaces</name><op:operator pos:line="5" pos:column="29">.</op:operator><name pos:line="5" pos:column="30">CalcImplWithDescriptionInterface</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">riskIt</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">interfaces</name><op:operator pos:line="6" pos:column="29">.</op:operator><name pos:line="6" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">util</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Factory</name></name>;</import>

<comment type="block" format="javadoc" pos:line="9" pos:column="1">/**
 * WeeklyImplWithDescription.java
 * Purpose: Implementation class to allow calculation class
 * 	to introduce late binding and state to calculate values
 * 	based on Weekly Wage for a given value in the database.
 * 	Specialization needed to deal with occupation and industry
 * 	code values.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="21" pos:column="1">public</specifier> class <name pos:line="21" pos:column="14">YearlyImplWithDescription</name> <super><implements pos:line="21" pos:column="40">implements <name pos:line="21" pos:column="51">CalcImplWithDescriptionInterface</name></implements></super> <block pos:line="21" pos:column="84">{
	
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <specifier pos:line="23" pos:column="17">final</specifier> <name pos:line="23" pos:column="23">String</name></type> <name pos:line="23" pos:column="30">description</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">YearlyImplWithDescription</name><parameter_list pos:line="25" pos:column="41">(<param><decl><type><name pos:line="25" pos:column="42">String</name></type> <name pos:line="25" pos:column="49">description</name></decl></param>)</parameter_list><block pos:line="25" pos:column="61">{
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">this</name><op:operator pos:line="26" pos:column="21">.</op:operator><name pos:line="26" pos:column="22">description</name></name> <op:operator pos:line="26" pos:column="34">=</op:operator> <name pos:line="26" pos:column="36">description</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><type><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">String</name></type> <name pos:line="29" pos:column="23">getDescription</name><parameter_list pos:line="29" pos:column="37">()</parameter_list> <block pos:line="29" pos:column="40">{
		<return pos:line="30" pos:column="17">return <expr><name pos:line="30" pos:column="24">description</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">addToArrayList</name><parameter_list pos:line="33" pos:column="35">(<param><decl><type><name><name pos:line="33" pos:column="36">ArrayList</name><argument_list pos:line="33" pos:column="45">&lt;<argument><name pos:line="33" pos:column="46">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="78">dataAL</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="86">String</name></type> <name pos:line="33" pos:column="93">code</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="99">int</name></type> <name pos:line="33" pos:column="103">weekWage</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="113">int</name></type> <name pos:line="33" pos:column="117">workWeeks</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="128">{
		<if pos:line="34" pos:column="17">if<condition pos:line="34" pos:column="19">(<expr><name pos:line="34" pos:column="20">weekWage</name> <op:operator pos:line="34" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="31">0</lit:literal> <op:operator pos:line="34" pos:column="33">&amp;&amp;</op:operator> <name pos:line="34" pos:column="36">workWeeks</name> <op:operator pos:line="34" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="48">0</lit:literal></expr>)</condition><then><block pos:line="34" pos:column="50">{
			<expr_stmt><expr><call><name><name pos:line="35" pos:column="25">dataAL</name><op:operator pos:line="35" pos:column="31">.</op:operator><name pos:line="35" pos:column="32">add</name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><call><name><name pos:line="35" pos:column="36">Factory</name><op:operator pos:line="35" pos:column="43">.</op:operator><name pos:line="35" pos:column="44">getTypeWageDataStructure</name></name><argument_list pos:line="35" pos:column="68">(<argument><expr><name pos:line="35" pos:column="69">code</name></expr></argument>, <argument><expr><name pos:line="35" pos:column="75">weekWage</name></expr></argument>,<argument><expr><name pos:line="35" pos:column="84">workWeeks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">double</name></type> <name pos:line="39" pos:column="23">calculateAverage</name><parameter_list pos:line="39" pos:column="39">(<param><decl><type><name pos:line="39" pos:column="40">String</name></type> <name pos:line="39" pos:column="47">code</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="53">TypeWageDataStructureInterface</name></type> <name pos:line="39" pos:column="84">i</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="87">{
		<if pos:line="40" pos:column="17">if<condition pos:line="40" pos:column="19">(<expr><name pos:line="40" pos:column="20">code</name> <op:operator pos:line="40" pos:column="25">==</op:operator> <lit:literal type="null" pos:line="40" pos:column="28">null</lit:literal></expr>)</condition><then><block pos:line="40" pos:column="33">{
			<return pos:line="41" pos:column="25">return <expr><lit:literal type="number" pos:line="41" pos:column="32">0</lit:literal></expr>;</return>
		}</block></then> <else pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><call><name><name pos:line="42" pos:column="28">i</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">getType</name></name><argument_list pos:line="42" pos:column="37">()</argument_list></call> <op:operator pos:line="42" pos:column="40">!=</op:operator> <lit:literal type="null" pos:line="42" pos:column="43">null</lit:literal> <op:operator pos:line="42" pos:column="48">&amp;&amp;</op:operator> <name pos:line="42" pos:column="51">code</name> <op:operator pos:line="42" pos:column="56">!=</op:operator> <lit:literal type="null" pos:line="42" pos:column="59">null</lit:literal> <op:operator pos:line="42" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="42" pos:column="67">i</name><op:operator pos:line="42" pos:column="68">.</op:operator><name pos:line="42" pos:column="69">getType</name></name><argument_list pos:line="42" pos:column="76">()</argument_list></call><op:operator pos:line="42" pos:column="78">.</op:operator><call><name pos:line="42" pos:column="79">trim</name><argument_list pos:line="42" pos:column="83">()</argument_list></call><op:operator pos:line="42" pos:column="85">.</op:operator><call><name pos:line="42" pos:column="86">equalsIgnoreCase</name><argument_list pos:line="42" pos:column="102">(<argument><expr><name pos:line="42" pos:column="103">code</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="42" pos:column="109">{
			<return pos:line="43" pos:column="25">return <expr><op:operator pos:line="43" pos:column="32">(</op:operator><call><name><name pos:line="43" pos:column="33">i</name><op:operator pos:line="43" pos:column="34">.</op:operator><name pos:line="43" pos:column="35">getWeekWage</name></name><argument_list pos:line="43" pos:column="46">()</argument_list></call> <op:operator pos:line="43" pos:column="49">*</op:operator> <call><name><name pos:line="43" pos:column="51">i</name><op:operator pos:line="43" pos:column="52">.</op:operator><name pos:line="43" pos:column="53">getWorkWeeks</name></name><argument_list pos:line="43" pos:column="65">()</argument_list></call><op:operator pos:line="43" pos:column="67">)</op:operator></expr>;</return>
		}</block></then> <else pos:line="44" pos:column="19">else <block pos:line="44" pos:column="24">{
			<return pos:line="45" pos:column="25">return <expr><lit:literal type="number" pos:line="45" pos:column="32">0</lit:literal></expr>;</return>
		}</block></else></if></else></if>
	}</block></function>
}</block></class>
</unit>
