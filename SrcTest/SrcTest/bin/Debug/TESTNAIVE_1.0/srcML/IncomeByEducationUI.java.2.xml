<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\ui\IncomeByEducationUI.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">ui</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">text</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">DecimalFormat</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Scanner</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">interfaces</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">CalculateByEducationInterface</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">interfaces</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">StartInterface</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">riskIt</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">util</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="12" pos:column="1">/**
 * IncomeByEducationGUI.java
 * Purpose: GUI component for CalculatebyEducation class / features
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="20" pos:column="1">public</specifier> class <name pos:line="20" pos:column="14">IncomeByEducationUI</name> <super><implements pos:line="20" pos:column="34">implements <name pos:line="20" pos:column="45">StartInterface</name></implements></super> <block pos:line="20" pos:column="60">{
	
	<decl_stmt><decl><type><specifier pos:line="22" pos:column="9">private</specifier> <name pos:line="22" pos:column="17">int</name></type> <name pos:line="22" pos:column="21">listCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">private</specifier> <name><name pos:line="23" pos:column="17">ArrayList</name><argument_list pos:line="23" pos:column="26">&lt;<argument><name pos:line="23" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="35">educationList</name> <init pos:line="23" pos:column="49">= <expr><op:operator pos:line="23" pos:column="51">new</op:operator> <call><name><name pos:line="23" pos:column="55">ArrayList</name><argument_list pos:line="23" pos:column="64">&lt;<argument><name pos:line="23" pos:column="65">String</name></argument>&gt;</argument_list></name><argument_list pos:line="23" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">DecimalFormat</name></type> <name pos:line="24" pos:column="19">myFormatter</name> <init pos:line="24" pos:column="31">= <expr><op:operator pos:line="24" pos:column="33">new</op:operator> <call><name pos:line="24" pos:column="37">DecimalFormat</name><argument_list pos:line="24" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="24" pos:column="51">"$###,###,###.00"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">String</name></type> <name pos:line="25" pos:column="16">type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">String</name></type> <name pos:line="26" pos:column="16">fillData</name></decl>;</decl_stmt>
    
    <constructor><specifier pos:line="28" pos:column="5">public</specifier> <name pos:line="28" pos:column="12">IncomeByEducationUI</name><parameter_list pos:line="28" pos:column="31">(<param><decl><type><name pos:line="28" pos:column="32">String</name></type> <name pos:line="28" pos:column="39">type</name></decl></param>)</parameter_list><block pos:line="28" pos:column="44">{
		<if pos:line="29" pos:column="17">if<condition pos:line="29" pos:column="19">(<expr><name pos:line="29" pos:column="20">type</name> <op:operator pos:line="29" pos:column="25">!=</op:operator> <lit:literal type="null" pos:line="29" pos:column="28">null</lit:literal></expr>)</condition><then><block pos:line="29" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="30" pos:column="25">this</name><op:operator pos:line="30" pos:column="29">.</op:operator><name pos:line="30" pos:column="30">type</name></name> <op:operator pos:line="30" pos:column="35">=</op:operator> <call><name><name pos:line="30" pos:column="37">type</name><op:operator pos:line="30" pos:column="41">.</op:operator><name pos:line="30" pos:column="42">trim</name></name><argument_list pos:line="30" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="32" pos:column="17">else <block pos:line="32" pos:column="22">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">type</name> <op:operator pos:line="33" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="33" pos:column="32">"income"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><call><name><name pos:line="36" pos:column="20">type</name><op:operator pos:line="36" pos:column="24">.</op:operator><name pos:line="36" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="36" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="36" pos:column="52">{
			<expr_stmt><expr><name pos:line="37" pos:column="25">fillData</name> <op:operator pos:line="37" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="37" pos:column="36">"income"</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="38" pos:column="19">else <block pos:line="38" pos:column="24">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">fillData</name> <op:operator pos:line="39" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="39" pos:column="36">"weekly wage"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>

	<function><type><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">void</name></type> <name pos:line="43" pos:column="21">start</name><parameter_list pos:line="43" pos:column="26">()</parameter_list> <block pos:line="43" pos:column="29">{
		
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">Scanner</name></type> <name pos:line="45" pos:column="25">in</name> <init pos:line="45" pos:column="28">= <expr><op:operator pos:line="45" pos:column="30">new</op:operator> <call><name pos:line="45" pos:column="34">Scanner</name><argument_list pos:line="45" pos:column="41">(<argument><expr><name><name pos:line="45" pos:column="42">System</name><op:operator pos:line="45" pos:column="48">.</op:operator><name pos:line="45" pos:column="49">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">double</name></type> <name pos:line="46" pos:column="16">returnValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="47" pos:column="9">String</name></type> <name pos:line="47" pos:column="16">educationSelection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">CalculateByEducationInterface</name></type> <name pos:line="48" pos:column="39">calc</name> <init pos:line="48" pos:column="44">=  <expr><call><name><name pos:line="48" pos:column="47">Factory</name><op:operator pos:line="48" pos:column="54">.</op:operator><name pos:line="48" pos:column="55">getCalculateByEducation</name></name><argument_list pos:line="48" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">educationList</name> <op:operator pos:line="49" pos:column="23">=</op:operator> <call><name><name pos:line="49" pos:column="25">calc</name><op:operator pos:line="49" pos:column="29">.</op:operator><name pos:line="49" pos:column="30">getEducationLevelList</name></name><argument_list pos:line="49" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
        
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">displayMenu</name><argument_list pos:line="51" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
    	
        <comment type="line" pos:line="53" pos:column="9">// Get Selection from User</comment>
        <decl_stmt><decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">intChoice</name> <init pos:line="54" pos:column="23">= <expr><lit:literal type="number" pos:line="54" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
        <do pos:line="55" pos:column="9">do <block pos:line="55" pos:column="12">{
            <do pos:line="56" pos:column="13">do<block pos:line="56" pos:column="15">{
            	<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><call><name><name pos:line="57" pos:column="21">in</name><op:operator pos:line="57" pos:column="23">.</op:operator><name pos:line="57" pos:column="24">hasNextInt</name></name><argument_list pos:line="57" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="57" pos:column="37"> <block pos:line="57" pos:column="38">{
            		<expr_stmt><expr><name pos:line="58" pos:column="25">intChoice</name> <op:operator pos:line="58" pos:column="35">=</op:operator> <call><name><name pos:line="58" pos:column="37">in</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">nextInt</name></name><argument_list pos:line="58" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
            		<if pos:line="59" pos:column="25">if<condition pos:line="59" pos:column="27">(<expr><name><name pos:line="59" pos:column="28">intChoice</name> <argument_list pos:line="59" pos:column="38">&lt; <argument><lit:literal type="number" pos:line="59" pos:column="40">1</lit:literal> <op:operator pos:line="59" pos:column="42">||</op:operator> <name pos:line="59" pos:column="45">intChoice</name></argument> &gt;</argument_list></name>  <name pos:line="59" pos:column="58">listCount</name><op:operator pos:line="59" pos:column="67">-</op:operator><lit:literal type="number" pos:line="59" pos:column="68">1</lit:literal></expr>)</condition><then><block pos:line="59" pos:column="70">{
            	        <expr_stmt><expr><call><name pos:line="60" pos:column="25">displayMenu</name><argument_list pos:line="60" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            	        <expr_stmt><expr><call><name><name pos:line="61" pos:column="25">System</name><op:operator pos:line="61" pos:column="31">.</op:operator><name pos:line="61" pos:column="32">out</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">println</name></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">intChoice</name> <op:operator pos:line="61" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="61" pos:column="56">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            		}</block></then></if>
            	}</block></then>
            	<else pos:line="64" pos:column="17">else <block pos:line="64" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="65" pos:column="21">displayMenu</name><argument_list pos:line="65" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            		<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">System</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">out</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">println</name></name><argument_list pos:line="66" pos:column="43">(<argument><expr><call><name><name pos:line="66" pos:column="44">in</name><op:operator pos:line="66" pos:column="46">.</op:operator><name pos:line="66" pos:column="47">next</name></name><argument_list pos:line="66" pos:column="51">()</argument_list></call> <op:operator pos:line="66" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="66" pos:column="56">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            		<expr_stmt><expr><name pos:line="67" pos:column="25">intChoice</name> <op:operator pos:line="67" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="67" pos:column="37">0</lit:literal></expr>;</expr_stmt>
            	}</block></else></if>
            }</block> while <condition pos:line="69" pos:column="21">(<expr><name><name pos:line="69" pos:column="22">intChoice</name> <argument_list pos:line="69" pos:column="32">&lt; <argument><lit:literal type="number" pos:line="69" pos:column="34">1</lit:literal> <op:operator pos:line="69" pos:column="36">||</op:operator> <name pos:line="69" pos:column="39">intChoice</name></argument> &gt;</argument_list></name> <name pos:line="69" pos:column="51">listCount</name><op:operator pos:line="69" pos:column="60">-</op:operator><lit:literal type="number" pos:line="69" pos:column="61">1</lit:literal></expr>)</condition>;</do>
            
            <comment type="line" pos:line="71" pos:column="13">// Exit</comment>
            <if pos:line="72" pos:column="13">if<condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">intChoice</name> <op:operator pos:line="72" pos:column="26">==</op:operator> <call><name><name pos:line="72" pos:column="29">educationList</name><op:operator pos:line="72" pos:column="42">.</op:operator><name pos:line="72" pos:column="43">size</name></name><argument_list pos:line="72" pos:column="47">()</argument_list></call><op:operator pos:line="72" pos:column="49">+</op:operator><lit:literal type="number" pos:line="72" pos:column="50">2</lit:literal></expr>)</condition><then><block pos:line="72" pos:column="52">{
            	<break pos:line="73" pos:column="17">break;</break>
            }</block></then></if>
            
            <comment type="line" pos:line="76" pos:column="13">//*** Calculate Average for All Education Levels</comment>
            <if pos:line="77" pos:column="13">if<condition pos:line="77" pos:column="15">(<expr><name pos:line="77" pos:column="16">intChoice</name> <op:operator pos:line="77" pos:column="26">==</op:operator> <call><name><name pos:line="77" pos:column="29">educationList</name><op:operator pos:line="77" pos:column="42">.</op:operator><name pos:line="77" pos:column="43">size</name></name><argument_list pos:line="77" pos:column="47">()</argument_list></call><op:operator pos:line="77" pos:column="49">+</op:operator><lit:literal type="number" pos:line="77" pos:column="50">1</lit:literal></expr>)</condition><then><block pos:line="77" pos:column="52">{
            	<expr_stmt><expr><name pos:line="78" pos:column="17">educationSelection</name> <op:operator pos:line="78" pos:column="36">=</op:operator> <lit:literal type="string" pos:line="78" pos:column="38">"all education levels"</lit:literal></expr>;</expr_stmt>
            	<if pos:line="79" pos:column="17">if<condition pos:line="79" pos:column="19">(<expr><call><name><name pos:line="79" pos:column="20">type</name><op:operator pos:line="79" pos:column="24">.</op:operator><name pos:line="79" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="79" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="79" pos:column="52">{
            		<expr_stmt><expr><name pos:line="80" pos:column="25">returnValue</name> <op:operator pos:line="80" pos:column="37">=</op:operator> <call><name><name pos:line="80" pos:column="39">calc</name><op:operator pos:line="80" pos:column="43">.</op:operator><name pos:line="80" pos:column="44">calculateIncomeByEducationLevel</name></name><argument_list pos:line="80" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="76">"all"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></then> <else pos:line="81" pos:column="19">else <block pos:line="81" pos:column="24">{
            		<expr_stmt><expr><name pos:line="82" pos:column="25">returnValue</name> <op:operator pos:line="82" pos:column="37">=</op:operator> <call><name><name pos:line="82" pos:column="39">calc</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">calculateWeeklyWageByEducationLevel</name></name><argument_list pos:line="82" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="80">"all"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></else></if>
            }</block></then>

            <comment type="line" pos:line="86" pos:column="13">// Calculate the average for the specific education level</comment>
            <else pos:line="87" pos:column="13">else<block pos:line="87" pos:column="17">{
            	<expr_stmt><expr><name pos:line="88" pos:column="17">educationSelection</name> <op:operator pos:line="88" pos:column="36">=</op:operator> <call><name><name pos:line="88" pos:column="38">educationList</name><op:operator pos:line="88" pos:column="51">.</op:operator><name pos:line="88" pos:column="52">get</name></name><argument_list pos:line="88" pos:column="55">(<argument><expr><name pos:line="88" pos:column="56">intChoice</name> <op:operator pos:line="88" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="88" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	<if pos:line="89" pos:column="17">if<condition pos:line="89" pos:column="19">(<expr><call><name><name pos:line="89" pos:column="20">type</name><op:operator pos:line="89" pos:column="24">.</op:operator><name pos:line="89" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="89" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="89" pos:column="52">{
            		<expr_stmt><expr><name pos:line="90" pos:column="25">returnValue</name> <op:operator pos:line="90" pos:column="37">=</op:operator> <call><name><name pos:line="90" pos:column="39">calc</name><op:operator pos:line="90" pos:column="43">.</op:operator><name pos:line="90" pos:column="44">calculateIncomeByEducationLevel</name></name><argument_list pos:line="90" pos:column="75">(<argument><expr><name pos:line="90" pos:column="76">educationSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></then> <else pos:line="91" pos:column="19">else <block pos:line="91" pos:column="24">{
            		<expr_stmt><expr><name pos:line="92" pos:column="25">returnValue</name> <op:operator pos:line="92" pos:column="37">=</op:operator> <call><name><name pos:line="92" pos:column="39">calc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">calculateWeeklyWageByEducationLevel</name></name><argument_list pos:line="92" pos:column="79">(<argument><expr><name pos:line="92" pos:column="80">educationSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	}</block></else></if>
            }</block></else></if>
            
        	<expr_stmt><expr><call><name pos:line="96" pos:column="17">displayMenu</name><argument_list pos:line="96" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        	
        	<if pos:line="98" pos:column="17">if<condition pos:line="98" pos:column="19">(<expr><name pos:line="98" pos:column="20">returnValue</name> <op:operator pos:line="98" pos:column="32">&lt;=</op:operator> <lit:literal type="number" pos:line="98" pos:column="35">0</lit:literal></expr>)</condition><then><block pos:line="98" pos:column="37">{
        		<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">System</name><op:operator pos:line="99" pos:column="31">.</op:operator><name pos:line="99" pos:column="32">out</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">println</name></name><argument_list pos:line="99" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="44">"\nAverage "</lit:literal> <op:operator pos:line="99" pos:column="57">+</op:operator> <name pos:line="99" pos:column="59">fillData</name> <op:operator pos:line="99" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="99" pos:column="70">" for "</lit:literal> <op:operator pos:line="99" pos:column="78">+</op:operator>  <name pos:line="99" pos:column="81">educationSelection</name> <op:operator pos:line="99" pos:column="100">+</op:operator> <lit:literal type="string" pos:line="99" pos:column="102">" is not available. Actual value = "</lit:literal> <op:operator pos:line="99" pos:column="139">+</op:operator> <call><name><name pos:line="99" pos:column="141">myFormatter</name><op:operator pos:line="99" pos:column="152">.</op:operator><name pos:line="99" pos:column="153">format</name></name><argument_list pos:line="99" pos:column="159">(<argument><expr><name pos:line="99" pos:column="160">returnValue</name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="173">+</op:operator> <lit:literal type="string" pos:line="99" pos:column="175">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></then> <else pos:line="100" pos:column="19">else <block pos:line="100" pos:column="24">{
        		<expr_stmt><expr><call><name><name pos:line="101" pos:column="25">System</name><op:operator pos:line="101" pos:column="31">.</op:operator><name pos:line="101" pos:column="32">out</name><op:operator pos:line="101" pos:column="35">.</op:operator><name pos:line="101" pos:column="36">println</name></name><argument_list pos:line="101" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="44">"\nAverage "</lit:literal> <op:operator pos:line="101" pos:column="57">+</op:operator> <name pos:line="101" pos:column="59">fillData</name> <op:operator pos:line="101" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="101" pos:column="70">" for "</lit:literal> <op:operator pos:line="101" pos:column="78">+</op:operator>  <name pos:line="101" pos:column="81">educationSelection</name> <op:operator pos:line="101" pos:column="100">+</op:operator> <lit:literal type="string" pos:line="101" pos:column="102">" is "</lit:literal> <op:operator pos:line="101" pos:column="109">+</op:operator> <call><name><name pos:line="101" pos:column="111">myFormatter</name><op:operator pos:line="101" pos:column="122">.</op:operator><name pos:line="101" pos:column="123">format</name></name><argument_list pos:line="101" pos:column="129">(<argument><expr><name pos:line="101" pos:column="130">returnValue</name></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="143">+</op:operator> <lit:literal type="string" pos:line="101" pos:column="145">".\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></else></if>
        	
            
            
        }</block> while <condition pos:line="106" pos:column="17">(<expr><lit:literal type="boolean" pos:line="106" pos:column="18">true</lit:literal></expr>)</condition>;</do>
	}</block></function>
	
	<function><type><specifier pos:line="109" pos:column="9">private</specifier> <name pos:line="109" pos:column="17">void</name></type> <name pos:line="109" pos:column="22">displayMenu</name><parameter_list pos:line="109" pos:column="33">()</parameter_list><block pos:line="109" pos:column="35">{
    	<expr_stmt><expr><name pos:line="110" pos:column="9">listCount</name> <op:operator pos:line="110" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="110" pos:column="21">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="111" pos:column="17">System</name><op:operator pos:line="111" pos:column="23">.</op:operator><name pos:line="111" pos:column="24">out</name><op:operator pos:line="111" pos:column="27">.</op:operator><name pos:line="111" pos:column="28">println</name></name><argument_list pos:line="111" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="36">"Enter an education catigory to show the average "</lit:literal> <op:operator pos:line="111" pos:column="87">+</op:operator> <name pos:line="111" pos:column="89">fillData</name> <op:operator pos:line="111" pos:column="98">+</op:operator> <lit:literal type="string" pos:line="111" pos:column="100">" for that education level."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:line="112" pos:column="9">for(<init><decl><type><name pos:line="112" pos:column="13">String</name></type> <name pos:line="112" pos:column="20">i</name> <range pos:line="112" pos:column="22">: <expr><name pos:line="112" pos:column="24">educationList</name></expr></range></decl></init>)<block pos:line="112" pos:column="38">{
        	<expr_stmt><expr><call><name><name pos:line="113" pos:column="17">System</name><op:operator pos:line="113" pos:column="23">.</op:operator><name pos:line="113" pos:column="24">out</name><op:operator pos:line="113" pos:column="27">.</op:operator><name pos:line="113" pos:column="28">println</name></name><argument_list pos:line="113" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="36">"["</lit:literal> <op:operator pos:line="113" pos:column="40">+</op:operator> <name pos:line="113" pos:column="42">listCount</name><op:operator pos:line="113" pos:column="51">++</op:operator> <op:operator pos:line="113" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="113" pos:column="56">"] "</lit:literal> <op:operator pos:line="113" pos:column="61">+</op:operator> <name pos:line="113" pos:column="63">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>       
        <expr_stmt><expr><call><name><name pos:line="115" pos:column="9">System</name><op:operator pos:line="115" pos:column="15">.</op:operator><name pos:line="115" pos:column="16">out</name><op:operator pos:line="115" pos:column="19">.</op:operator><name pos:line="115" pos:column="20">println</name></name><argument_list pos:line="115" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="28">"["</lit:literal> <op:operator pos:line="115" pos:column="32">+</op:operator> <name pos:line="115" pos:column="34">listCount</name><op:operator pos:line="115" pos:column="43">++</op:operator> <op:operator pos:line="115" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="115" pos:column="48">"] "</lit:literal> <op:operator pos:line="115" pos:column="53">+</op:operator> <lit:literal type="string" pos:line="115" pos:column="55">"All education levels"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="116" pos:column="9">System</name><op:operator pos:line="116" pos:column="15">.</op:operator><name pos:line="116" pos:column="16">out</name><op:operator pos:line="116" pos:column="19">.</op:operator><name pos:line="116" pos:column="20">println</name></name><argument_list pos:line="116" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="28">"["</lit:literal> <op:operator pos:line="116" pos:column="32">+</op:operator> <name pos:line="116" pos:column="34">listCount</name><op:operator pos:line="116" pos:column="43">++</op:operator> <op:operator pos:line="116" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="116" pos:column="48">"] "</lit:literal> <op:operator pos:line="116" pos:column="53">+</op:operator> <lit:literal type="string" pos:line="116" pos:column="55">"Return"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
        <expr_stmt><expr><call><name><name pos:line="117" pos:column="9">System</name><op:operator pos:line="117" pos:column="15">.</op:operator><name pos:line="117" pos:column="16">out</name><op:operator pos:line="117" pos:column="19">.</op:operator><name pos:line="117" pos:column="20">println</name></name><argument_list pos:line="117" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="28">"Please enter a selection 1 ~"</lit:literal> <op:operator pos:line="117" pos:column="59">+</op:operator> <op:operator pos:line="117" pos:column="61">(</op:operator><name pos:line="117" pos:column="62">listCount</name><op:operator pos:line="117" pos:column="71">-</op:operator><lit:literal type="number" pos:line="117" pos:column="72">1</lit:literal><op:operator pos:line="117" pos:column="73">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
