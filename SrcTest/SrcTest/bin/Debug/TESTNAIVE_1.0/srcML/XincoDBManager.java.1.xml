<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\core\server\XincoDBManager.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2009 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoDBManager
 *
 * Description:     server-side database manager
 *
 * Original Author: Alexander Manes
 * Date:            2004
 *
 * Modifications:
 *
 * Who?             When?             What?
 * Javier A. Ortiz  01/04/2007        Added methods for result set manipulation and formating
 *
 *************************************************************
 */</comment>
<package pos:line="36" pos:column="1">package <name><name pos:line="36" pos:column="9">com</name><op:operator pos:line="36" pos:column="12">.</op:operator><name pos:line="36" pos:column="13">bluecubs</name><op:operator pos:line="36" pos:column="21">.</op:operator><name pos:line="36" pos:column="22">xinco</name><op:operator pos:line="36" pos:column="27">.</op:operator><name pos:line="36" pos:column="28">core</name><op:operator pos:line="36" pos:column="32">.</op:operator><name pos:line="36" pos:column="33">server</name></name>;</package>

<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">javax</name><op:operator pos:line="38" pos:column="13">.</op:operator><name pos:line="38" pos:column="14">sql</name><op:operator pos:line="38" pos:column="17">.</op:operator><name pos:line="38" pos:column="18">DataSource</name></name>;</import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">javax</name><op:operator pos:line="39" pos:column="13">.</op:operator><name pos:line="39" pos:column="14">naming</name><op:operator pos:line="39" pos:column="20">.</op:operator><name pos:line="39" pos:column="21">InitialContext</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">com</name><op:operator pos:line="40" pos:column="11">.</op:operator><name pos:line="40" pos:column="12">bluecubs</name><op:operator pos:line="40" pos:column="20">.</op:operator><name pos:line="40" pos:column="21">xinco</name><op:operator pos:line="40" pos:column="26">.</op:operator><name pos:line="40" pos:column="27">conf</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">XincoConfigSingletonServer</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">java</name><op:operator pos:line="41" pos:column="12">.</op:operator><name pos:line="41" pos:column="13">io</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">PrintWriter</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">java</name><op:operator pos:line="42" pos:column="12">.</op:operator><name pos:line="42" pos:column="13">sql</name><op:operator pos:line="42" pos:column="16">.</op:operator><name pos:line="42" pos:column="17">Connection</name></name>;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">java</name><op:operator pos:line="43" pos:column="12">.</op:operator><name pos:line="43" pos:column="13">sql</name><op:operator pos:line="43" pos:column="16">.</op:operator><name pos:line="43" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="44" pos:column="1">import <name><name pos:line="44" pos:column="8">java</name><op:operator pos:line="44" pos:column="12">.</op:operator><name pos:line="44" pos:column="13">sql</name><op:operator pos:line="44" pos:column="16">.</op:operator><name pos:line="44" pos:column="17">ResultSetMetaData</name></name>;</import>
<import pos:line="45" pos:column="1">import <name><name pos:line="45" pos:column="8">java</name><op:operator pos:line="45" pos:column="12">.</op:operator><name pos:line="45" pos:column="13">sql</name><op:operator pos:line="45" pos:column="16">.</op:operator><name pos:line="45" pos:column="17">SQLException</name></name>;</import>
<import pos:line="46" pos:column="1">import <name><name pos:line="46" pos:column="8">java</name><op:operator pos:line="46" pos:column="12">.</op:operator><name pos:line="46" pos:column="13">sql</name><op:operator pos:line="46" pos:column="16">.</op:operator><name pos:line="46" pos:column="17">Statement</name></name>;</import>
<import pos:line="47" pos:column="1">import <name><name pos:line="47" pos:column="8">java</name><op:operator pos:line="47" pos:column="12">.</op:operator><name pos:line="47" pos:column="13">util</name><op:operator pos:line="47" pos:column="17">.</op:operator><name pos:line="47" pos:column="18">Locale</name></name>;</import>
<import pos:line="48" pos:column="1">import <name><name pos:line="48" pos:column="8">java</name><op:operator pos:line="48" pos:column="12">.</op:operator><name pos:line="48" pos:column="13">util</name><op:operator pos:line="48" pos:column="17">.</op:operator><name pos:line="48" pos:column="18">MissingResourceException</name></name>;</import>
<import pos:line="49" pos:column="1">import <name><name pos:line="49" pos:column="8">java</name><op:operator pos:line="49" pos:column="12">.</op:operator><name pos:line="49" pos:column="13">util</name><op:operator pos:line="49" pos:column="17">.</op:operator><name pos:line="49" pos:column="18">ResourceBundle</name></name>;</import>
<import pos:line="50" pos:column="1">import <name><name pos:line="50" pos:column="8">java</name><op:operator pos:line="50" pos:column="12">.</op:operator><name pos:line="50" pos:column="13">util</name><op:operator pos:line="50" pos:column="17">.</op:operator><name pos:line="50" pos:column="18">StringTokenizer</name></name>;</import>

<class><specifier pos:line="52" pos:column="1">public</specifier> class <name pos:line="52" pos:column="14">XincoDBManager</name> <block pos:line="52" pos:column="29">{

    <decl_stmt><decl><type><specifier pos:line="54" pos:column="5">public</specifier> <name pos:line="54" pos:column="12">Connection</name></type> <name pos:line="54" pos:column="23">con</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="55" pos:column="5">public</specifier> <name pos:line="55" pos:column="12">XincoConfigSingletonServer</name></type> <name pos:line="55" pos:column="39">config</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="56" pos:column="5">public</specifier> <specifier pos:line="56" pos:column="12">static</specifier> <name pos:line="56" pos:column="19">int</name></type> <name pos:line="56" pos:column="23">count</name> <init pos:line="56" pos:column="29">= <expr><lit:literal type="number" pos:line="56" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">private</specifier> <name pos:line="57" pos:column="13">int</name></type> <name pos:line="57" pos:column="17">EmailLink</name> <init pos:line="57" pos:column="27">= <expr><lit:literal type="number" pos:line="57" pos:column="29">1</lit:literal></expr></init><op:operator pos:line="57" pos:column="30">,</op:operator> <name pos:line="57" pos:column="32">DataLink</name> <init pos:line="57" pos:column="41">= <expr><lit:literal type="number" pos:line="57" pos:column="43">2</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="58" pos:column="5">private</specifier> <name pos:line="58" pos:column="13">ResourceBundle</name></type> <name pos:line="58" pos:column="28">lrb</name> <init pos:line="58" pos:column="32">= <expr><lit:literal type="null" pos:line="58" pos:column="34">null</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="59" pos:column="5">private</specifier> <name pos:line="59" pos:column="13">Locale</name></type> <name pos:line="59" pos:column="20">loc</name> <init pos:line="59" pos:column="24">= <expr><lit:literal type="null" pos:line="59" pos:column="26">null</lit:literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier pos:line="61" pos:column="5">public</specifier> <name pos:line="61" pos:column="12">XincoDBManager</name><parameter_list pos:line="61" pos:column="26">()</parameter_list> <throws pos:line="61" pos:column="29">throws <argument><expr><name pos:line="61" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="61" pos:column="46">{
        <expr_stmt><expr><name pos:line="62" pos:column="9">lrb</name> <op:operator pos:line="62" pos:column="13">=</op:operator> <call><name><name pos:line="62" pos:column="15">ResourceBundle</name><op:operator pos:line="62" pos:column="29">.</op:operator><name pos:line="62" pos:column="30">getBundle</name></name><argument_list pos:line="62" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="40">"com.bluecubs.xinco.messages.XincoMessages"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="63" pos:column="9">//load compiled configuartion</comment>
        <expr_stmt><expr><name pos:line="64" pos:column="9">config</name> <op:operator pos:line="64" pos:column="16">=</op:operator> <call><name><name pos:line="64" pos:column="18">XincoConfigSingletonServer</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">getInstance</name></name><argument_list pos:line="64" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="65" pos:column="9">DataSource</name></type> <name pos:line="65" pos:column="20">datasource</name> <init pos:line="65" pos:column="31">= <expr><call pos:line="65" pos:column="33">(<name pos:line="65" pos:column="34">DataSource</name>) <argument_list pos:line="65" pos:column="46">(<argument><expr><op:operator pos:line="65" pos:column="47">new</op:operator> <call><name pos:line="65" pos:column="51">InitialContext</name><argument_list pos:line="65" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="65" pos:column="68">.</op:operator><call><name pos:line="65" pos:column="69">lookup</name><argument_list pos:line="65" pos:column="75">(<argument><expr><name><name pos:line="65" pos:column="76">config</name><op:operator pos:line="65" pos:column="82">.</op:operator><name pos:line="65" pos:column="83">JNDIDB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="66" pos:column="9">con</name> <op:operator pos:line="66" pos:column="13">=</op:operator> <call><name><name pos:line="66" pos:column="15">datasource</name><op:operator pos:line="66" pos:column="25">.</op:operator><name pos:line="66" pos:column="26">getConnection</name></name><argument_list pos:line="66" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="67" pos:column="9">con</name><op:operator pos:line="67" pos:column="12">.</op:operator><name pos:line="67" pos:column="13">setAutoCommit</name></name><argument_list pos:line="67" pos:column="26">(<argument><expr><lit:literal type="boolean" pos:line="67" pos:column="27">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="68" pos:column="9">count</name><op:operator pos:line="68" pos:column="14">++</op:operator></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier pos:line="71" pos:column="5">public</specifier> <name pos:line="71" pos:column="12">int</name></type> <name pos:line="71" pos:column="16">getNewID</name><parameter_list pos:line="71" pos:column="24">(<param><decl><type><name pos:line="71" pos:column="25">String</name></type> <name pos:line="71" pos:column="32">attrTN</name></decl></param>)</parameter_list> <throws pos:line="71" pos:column="40">throws <argument><expr><name pos:line="71" pos:column="47">Exception</name></expr></argument></throws> <block pos:line="71" pos:column="57">{

        <decl_stmt><decl><type><name pos:line="73" pos:column="9">int</name></type> <name pos:line="73" pos:column="13">newID</name> <init pos:line="73" pos:column="19">= <expr><lit:literal type="number" pos:line="73" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="74" pos:column="9">Statement</name></type> <name pos:line="74" pos:column="19">stmt</name></decl>;</decl_stmt>

        <expr_stmt><expr><name pos:line="76" pos:column="9">stmt</name> <op:operator pos:line="76" pos:column="14">=</op:operator> <call><name><name pos:line="76" pos:column="16">con</name><op:operator pos:line="76" pos:column="19">.</op:operator><name pos:line="76" pos:column="20">createStatement</name></name><argument_list pos:line="76" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="77" pos:column="9">ResultSet</name></type> <name pos:line="77" pos:column="19">rs</name> <init pos:line="77" pos:column="22">= <expr><call><name><name pos:line="77" pos:column="24">stmt</name><op:operator pos:line="77" pos:column="28">.</op:operator><name pos:line="77" pos:column="29">executeQuery</name></name><argument_list pos:line="77" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="42">"SELECT * FROM xinco_id WHERE tablename='"</lit:literal> <op:operator pos:line="77" pos:column="85">+</op:operator> <name pos:line="77" pos:column="87">attrTN</name> <op:operator pos:line="77" pos:column="94">+</op:operator> <lit:literal type="string" pos:line="77" pos:column="96">"'"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while pos:line="78" pos:column="9">while <condition pos:line="78" pos:column="15">(<expr><call><name><name pos:line="78" pos:column="16">rs</name><op:operator pos:line="78" pos:column="18">.</op:operator><name pos:line="78" pos:column="19">next</name></name><argument_list pos:line="78" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="78" pos:column="27">{
            <expr_stmt><expr><name pos:line="79" pos:column="13">newID</name> <op:operator pos:line="79" pos:column="19">=</op:operator> <call><name><name pos:line="79" pos:column="21">rs</name><op:operator pos:line="79" pos:column="23">.</op:operator><name pos:line="79" pos:column="24">getInt</name></name><argument_list pos:line="79" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="31">"last_id"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="79" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="79" pos:column="44">1</lit:literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name pos:line="81" pos:column="9">stmt</name><op:operator pos:line="81" pos:column="13">.</op:operator><name pos:line="81" pos:column="14">close</name></name><argument_list pos:line="81" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="83" pos:column="9">stmt</name> <op:operator pos:line="83" pos:column="14">=</op:operator> <call><name><name pos:line="83" pos:column="16">con</name><op:operator pos:line="83" pos:column="19">.</op:operator><name pos:line="83" pos:column="20">createStatement</name></name><argument_list pos:line="83" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="84" pos:column="9">stmt</name><op:operator pos:line="84" pos:column="13">.</op:operator><name pos:line="84" pos:column="14">executeUpdate</name></name><argument_list pos:line="84" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="28">"UPDATE xinco_id SET last_id=last_id+1 WHERE tablename='"</lit:literal> <op:operator pos:line="84" pos:column="86">+</op:operator> <name pos:line="84" pos:column="88">attrTN</name> <op:operator pos:line="84" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="84" pos:column="97">"'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="85" pos:column="9">stmt</name><op:operator pos:line="85" pos:column="13">.</op:operator><name pos:line="85" pos:column="14">close</name></name><argument_list pos:line="85" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

        <return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">newID</name></expr>;</return>

    }</block></function>

    <function><type><annotation pos:line="91" pos:column="5">@<name pos:line="91" pos:column="6">Override</name></annotation>
    <specifier pos:line="92" pos:column="5">protected</specifier> <name pos:line="92" pos:column="15">void</name></type> <name pos:line="92" pos:column="20">finalize</name><parameter_list pos:line="92" pos:column="28">()</parameter_list> <throws pos:line="92" pos:column="31">throws <argument><expr><name pos:line="92" pos:column="38">Throwable</name></expr></argument></throws> <block pos:line="92" pos:column="48">{
        <try pos:line="93" pos:column="9">try <block pos:line="93" pos:column="13">{
            <expr_stmt><expr><name pos:line="94" pos:column="13">count</name><op:operator pos:line="94" pos:column="18">--</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">con</name><op:operator pos:line="95" pos:column="16">.</op:operator><name pos:line="95" pos:column="17">close</name></name><argument_list pos:line="95" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally pos:line="96" pos:column="11">finally <block pos:line="96" pos:column="19">{
            <if pos:line="97" pos:column="13">if <condition pos:line="97" pos:column="16">(<expr><op:operator pos:line="97" pos:column="17">!</op:operator><call><name><name pos:line="97" pos:column="18">con</name><op:operator pos:line="97" pos:column="21">.</op:operator><name pos:line="97" pos:column="22">isClosed</name></name><argument_list pos:line="97" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="97" pos:column="33"> <block pos:line="97" pos:column="34">{
                <expr_stmt><expr><name pos:line="98" pos:column="17">count</name><op:operator pos:line="98" pos:column="22">++</op:operator></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">super</name><op:operator pos:line="100" pos:column="18">.</op:operator><name pos:line="100" pos:column="19">finalize</name></name><argument_list pos:line="100" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
<comment type="line" pos:line="103" pos:column="1">//TODO: Replace with a report</comment>

    <comment type="block" format="javadoc" pos:line="105" pos:column="5">/**
     * Draws a table with results of the query stored in the ResultSet rs in the PrintWriter out
     * @param rs
     * @param out
     * @param header
     * @param title
     * @param columnAsLink
     * @param details
     * @param linkType
     */</comment>
    <function><type><specifier pos:line="115" pos:column="5">public</specifier> <name pos:line="115" pos:column="12">void</name></type> <name pos:line="115" pos:column="17">drawTable</name><parameter_list pos:line="115" pos:column="26">(<param><decl><type><name pos:line="115" pos:column="27">ResultSet</name></type> <name pos:line="115" pos:column="37">rs</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="41">PrintWriter</name></type> <name pos:line="115" pos:column="53">out</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="58">String</name></type> <name pos:line="115" pos:column="65">header</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="73">String</name></type> <name pos:line="115" pos:column="80">title</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="87">int</name></type> <name pos:line="115" pos:column="91">columnAsLink</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="105">boolean</name></type> <name pos:line="115" pos:column="113">details</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="122">int</name></type> <name pos:line="115" pos:column="126">linkType</name></decl></param>)</parameter_list> <block pos:line="115" pos:column="136">{
        <try pos:line="116" pos:column="9">try <block pos:line="116" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="117" pos:column="13">int</name></type> <name pos:line="117" pos:column="17">size</name> <init pos:line="117" pos:column="22">= <expr><call><name><name pos:line="117" pos:column="24">rs</name><op:operator pos:line="117" pos:column="26">.</op:operator><name pos:line="117" pos:column="27">getMetaData</name></name><argument_list pos:line="117" pos:column="38">()</argument_list></call><op:operator pos:line="117" pos:column="40">.</op:operator><call><name pos:line="117" pos:column="41">getColumnCount</name><argument_list pos:line="117" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="118" pos:column="13">out</name><op:operator pos:line="118" pos:column="16">.</op:operator><name pos:line="118" pos:column="17">println</name></name><argument_list pos:line="118" pos:column="24">(<argument><expr><name pos:line="118" pos:column="25">title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="119" pos:column="13">out</name><op:operator pos:line="119" pos:column="16">.</op:operator><name pos:line="119" pos:column="17">println</name></name><argument_list pos:line="119" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="25">"&lt;center&gt;&lt;table border =1 &gt;&lt;tr&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">out</name><op:operator pos:line="120" pos:column="16">.</op:operator><name pos:line="120" pos:column="17">println</name></name><argument_list pos:line="120" pos:column="24">(<argument><expr><name pos:line="120" pos:column="25">header</name> <op:operator pos:line="120" pos:column="32">+</op:operator> <lit:literal type="string" pos:line="120" pos:column="34">"&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="121" pos:column="13">while <condition pos:line="121" pos:column="19">(<expr><call><name><name pos:line="121" pos:column="20">rs</name><op:operator pos:line="121" pos:column="22">.</op:operator><name pos:line="121" pos:column="23">next</name></name><argument_list pos:line="121" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="121" pos:column="31">{
                <for pos:line="122" pos:column="17">for (<init><decl><type><name pos:line="122" pos:column="22">int</name></type> <name pos:line="122" pos:column="26">i</name> <init pos:line="122" pos:column="28">= <expr><lit:literal type="number" pos:line="122" pos:column="30">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="122" pos:column="33">i</name> <op:operator pos:line="122" pos:column="35">&lt;=</op:operator> <name pos:line="122" pos:column="38">size</name></expr>;</condition> <incr><expr><name pos:line="122" pos:column="44">i</name><op:operator pos:line="122" pos:column="45">++</op:operator></expr></incr>) <block pos:line="122" pos:column="49">{
                    <decl_stmt><decl><type><name pos:line="123" pos:column="21">String</name></type> <name pos:line="123" pos:column="28">value</name> <init pos:line="123" pos:column="34">= <expr><call><name pos:line="123" pos:column="36">canReplace</name><argument_list pos:line="123" pos:column="46">(<argument><expr><call><name><name pos:line="123" pos:column="47">rs</name><op:operator pos:line="123" pos:column="49">.</op:operator><name pos:line="123" pos:column="50">getString</name></name><argument_list pos:line="123" pos:column="59">(<argument><expr><name pos:line="123" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="124" pos:column="21">if <condition pos:line="124" pos:column="24">(<expr><call><name><name pos:line="124" pos:column="25">rs</name><op:operator pos:line="124" pos:column="27">.</op:operator><name pos:line="124" pos:column="28">getMetaData</name></name><argument_list pos:line="124" pos:column="39">()</argument_list></call><op:operator pos:line="124" pos:column="41">.</op:operator><call><name pos:line="124" pos:column="42">getColumnName</name><argument_list pos:line="124" pos:column="55">(<argument><expr><name pos:line="124" pos:column="56">i</name></expr></argument>)</argument_list></call><op:operator pos:line="124" pos:column="58">.</op:operator><call><name pos:line="124" pos:column="59">contains</name><argument_list pos:line="124" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="68">"password"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="80"> <block pos:line="124" pos:column="81">{
                        <expr_stmt><expr><name pos:line="125" pos:column="25">value</name> <op:operator pos:line="125" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="125" pos:column="33">"******************************"</lit:literal></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="127" pos:column="21">if <condition pos:line="127" pos:column="24">(<expr><name pos:line="127" pos:column="25">i</name> <op:operator pos:line="127" pos:column="27">==</op:operator> <name pos:line="127" pos:column="30">size</name> <op:operator pos:line="127" pos:column="35">&amp;&amp;</op:operator> <name pos:line="127" pos:column="38">details</name></expr>)</condition><then pos:line="127" pos:column="46"> <block pos:line="127" pos:column="47">{
                        <expr_stmt><expr><call><name><name pos:line="128" pos:column="25">out</name><op:operator pos:line="128" pos:column="28">.</op:operator><name pos:line="128" pos:column="29">println</name></name><argument_list pos:line="128" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="37">"&lt;td&gt;&lt;form action='Detail.jsp' method='post'&gt;&lt;input type='submit' value='Get Details' onclick='Detail.jsp'&gt;&lt;input type='hidden' name = 'key' value='"</lit:literal> <op:operator pos:line="128" pos:column="187">+</op:operator>
                                <name pos:line="129" pos:column="33">value</name> <op:operator pos:line="129" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="129" pos:column="41">"'&gt;&lt;input type='hidden' name='Page' value='ProcessData.jsp'&gt;&lt;/form&gt;&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="130" pos:column="23">else <block pos:line="130" pos:column="28">{
                        <if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><name pos:line="131" pos:column="29">i</name> <op:operator pos:line="131" pos:column="31">==</op:operator> <name pos:line="131" pos:column="34">columnAsLink</name> <op:operator pos:line="131" pos:column="47">&amp;&amp;</op:operator> <name pos:line="131" pos:column="50">linkType</name> <op:operator pos:line="131" pos:column="59">==</op:operator> <name><name pos:line="131" pos:column="62">this</name><op:operator pos:line="131" pos:column="66">.</op:operator><name pos:line="131" pos:column="67">EmailLink</name></name></expr>)</condition><then pos:line="131" pos:column="77"> <block pos:line="131" pos:column="78">{
                            <if pos:line="132" pos:column="29">if <condition pos:line="132" pos:column="32">(<expr><name pos:line="132" pos:column="33">value</name> <op:operator pos:line="132" pos:column="39">==</op:operator> <lit:literal type="null" pos:line="132" pos:column="42">null</lit:literal></expr>)</condition><then pos:line="132" pos:column="47"> <block pos:line="132" pos:column="48">{
                                <expr_stmt><expr><call><name><name pos:line="133" pos:column="33">out</name><op:operator pos:line="133" pos:column="36">.</op:operator><name pos:line="133" pos:column="37">println</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="45">"&lt;td&gt;No email address available&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="134" pos:column="31">else <block pos:line="134" pos:column="36">{
                                <expr_stmt><expr><call><name><name pos:line="135" pos:column="33">out</name><op:operator pos:line="135" pos:column="36">.</op:operator><name pos:line="135" pos:column="37">println</name></name><argument_list pos:line="135" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="45">"&lt;td&gt;&lt;a href= mailto:"</lit:literal> <op:operator pos:line="135" pos:column="68">+</op:operator> <name pos:line="135" pos:column="70">value</name> <op:operator pos:line="135" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="135" pos:column="78">"&gt;Email this person&lt;/a&gt;&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then></if>
                        <if pos:line="138" pos:column="25">if <condition pos:line="138" pos:column="28">(<expr><name pos:line="138" pos:column="29">i</name> <op:operator pos:line="138" pos:column="31">==</op:operator> <name pos:line="138" pos:column="34">columnAsLink</name> <op:operator pos:line="138" pos:column="47">&amp;&amp;</op:operator> <name pos:line="138" pos:column="50">linkType</name> <op:operator pos:line="138" pos:column="59">==</op:operator> <name><name pos:line="138" pos:column="62">this</name><op:operator pos:line="138" pos:column="66">.</op:operator><name pos:line="138" pos:column="67">DataLink</name></name></expr>)</condition><then pos:line="138" pos:column="76"> <block pos:line="138" pos:column="77">{
                            <if pos:line="139" pos:column="29">if <condition pos:line="139" pos:column="32">(<expr><name pos:line="139" pos:column="33">value</name> <op:operator pos:line="139" pos:column="39">==</op:operator> <lit:literal type="null" pos:line="139" pos:column="42">null</lit:literal></expr>)</condition><then pos:line="139" pos:column="47"> <block pos:line="139" pos:column="48">{
                                <expr_stmt><expr><call><name><name pos:line="140" pos:column="33">out</name><op:operator pos:line="140" pos:column="36">.</op:operator><name pos:line="140" pos:column="37">println</name></name><argument_list pos:line="140" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="45">"&lt;td&gt;No code available&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="141" pos:column="31">else <block pos:line="141" pos:column="36">{
                                <expr_stmt><expr><call><name><name pos:line="142" pos:column="33">out</name><op:operator pos:line="142" pos:column="36">.</op:operator><name pos:line="142" pos:column="37">println</name></name><argument_list pos:line="142" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="45">"&lt;td&gt;"</lit:literal> <op:operator pos:line="142" pos:column="52">+</op:operator> <name pos:line="142" pos:column="54">value</name> <op:operator pos:line="142" pos:column="60">+</op:operator> <lit:literal type="string" pos:line="142" pos:column="62">"&lt;/td&gt;&lt;td&gt;&lt;form action='Detail.jsp' method='post'&gt;&lt;input type='submit' value='Get Details' onclick='Detail.jsp'&gt;&lt;input type='hidden' name = 'key' value='"</lit:literal> <op:operator pos:line="142" pos:column="217">+</op:operator>
                                        <name pos:line="143" pos:column="41">value</name> <op:operator pos:line="143" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="143" pos:column="49">"'&gt;&lt;input type='hidden' name='Page' value='Codes.jsp'&gt;&lt;/form&gt;&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then> <else pos:line="145" pos:column="27">else <block pos:line="145" pos:column="32">{
                            <if pos:line="146" pos:column="29">if <condition pos:line="146" pos:column="32">(<expr><name pos:line="146" pos:column="33">value</name> <op:operator pos:line="146" pos:column="39">==</op:operator> <lit:literal type="null" pos:line="146" pos:column="42">null</lit:literal></expr>)</condition><then pos:line="146" pos:column="47"> <block pos:line="146" pos:column="48">{
                                <expr_stmt><expr><call><name><name pos:line="147" pos:column="33">out</name><op:operator pos:line="147" pos:column="36">.</op:operator><name pos:line="147" pos:column="37">println</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="45">"&lt;td&gt;"</lit:literal> <op:operator pos:line="147" pos:column="52">+</op:operator> <call><name><name pos:line="147" pos:column="54">lrb</name><op:operator pos:line="147" pos:column="57">.</op:operator><name pos:line="147" pos:column="58">getString</name></name><argument_list pos:line="147" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="68">"general.nodata"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="147" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="147" pos:column="88">"&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="148" pos:column="31">else <block pos:line="148" pos:column="36">{
                                <expr_stmt><expr><call><name><name pos:line="149" pos:column="33">out</name><op:operator pos:line="149" pos:column="36">.</op:operator><name pos:line="149" pos:column="37">println</name></name><argument_list pos:line="149" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="45">"&lt;td&gt;"</lit:literal> <op:operator pos:line="149" pos:column="52">+</op:operator> <name pos:line="149" pos:column="54">value</name> <op:operator pos:line="149" pos:column="60">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="62">"&lt;/td&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></else></if>
                    }</block></else></if>
                }</block></for>
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">out</name><op:operator pos:line="154" pos:column="20">.</op:operator><name pos:line="154" pos:column="21">println</name></name><argument_list pos:line="154" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="29">"&lt;/tr&gt;&lt;tr&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">out</name><op:operator pos:line="156" pos:column="16">.</op:operator><name pos:line="156" pos:column="17">println</name></name><argument_list pos:line="156" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="25">"&lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="157" pos:column="11">catch <parameter_list pos:line="157" pos:column="17">(<param><decl><type><name pos:line="157" pos:column="18">Exception</name></type> <name pos:line="157" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">out</name><op:operator pos:line="158" pos:column="16">.</op:operator><name pos:line="158" pos:column="17">println</name></name><argument_list pos:line="158" pos:column="24">(<argument><expr><call><name><name pos:line="158" pos:column="25">lrb</name><op:operator pos:line="158" pos:column="28">.</op:operator><name pos:line="158" pos:column="29">getString</name></name><argument_list pos:line="158" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="39">"general.nodata"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="159" pos:column="13">System</name><op:operator pos:line="159" pos:column="19">.</op:operator><name pos:line="159" pos:column="20">out</name><op:operator pos:line="159" pos:column="23">.</op:operator><name pos:line="159" pos:column="24">println</name></name><argument_list pos:line="159" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="32">"Exception drawing table: "</lit:literal> <op:operator pos:line="159" pos:column="60">+</op:operator> <call><name><name pos:line="159" pos:column="62">e</name><op:operator pos:line="159" pos:column="63">.</op:operator><name pos:line="159" pos:column="64">getMessage</name></name><argument_list pos:line="159" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="163" pos:column="5">/** Returns the column names of the query in an HTML table format for use
     * as header for a table produced by the drawTable method.
     * @param rs
     * @return 
     */</comment>
    <function><type><specifier pos:line="168" pos:column="5">public</specifier> <name pos:line="168" pos:column="12">StringTokenizer</name></type> <name pos:line="168" pos:column="28">getColumnNamesList</name><parameter_list pos:line="168" pos:column="46">(<param><decl><type><name pos:line="168" pos:column="47">ResultSet</name></type> <name pos:line="168" pos:column="57">rs</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="169" pos:column="9">String</name></type> <name pos:line="169" pos:column="16">list</name> <init pos:line="169" pos:column="21">= <expr><lit:literal type="string" pos:line="169" pos:column="23">""</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="170" pos:column="9">StringTokenizer</name></type> <name pos:line="170" pos:column="25">t</name></decl>;</decl_stmt>
        <try pos:line="171" pos:column="9">try <block pos:line="171" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="172" pos:column="13">ResultSetMetaData</name></type> <name pos:line="172" pos:column="31">rsmd</name> <init pos:line="172" pos:column="36">= <expr><call><name><name pos:line="172" pos:column="38">rs</name><op:operator pos:line="172" pos:column="40">.</op:operator><name pos:line="172" pos:column="41">getMetaData</name></name><argument_list pos:line="172" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="173" pos:column="13">int</name></type> <name pos:line="173" pos:column="17">numColumns</name> <init pos:line="173" pos:column="28">= <expr><call><name><name pos:line="173" pos:column="30">rsmd</name><op:operator pos:line="173" pos:column="34">.</op:operator><name pos:line="173" pos:column="35">getColumnCount</name></name><argument_list pos:line="173" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="175" pos:column="13">// Get the column names; column indices start from 1</comment>
            <for pos:line="176" pos:column="13">for (<init><decl><type><name pos:line="176" pos:column="18">int</name></type> <name pos:line="176" pos:column="22">i</name> <init pos:line="176" pos:column="24">= <expr><lit:literal type="number" pos:line="176" pos:column="26">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="176" pos:column="29">i</name> <op:operator pos:line="176" pos:column="31">&lt;</op:operator> <name pos:line="176" pos:column="33">numColumns</name> <op:operator pos:line="176" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="176" pos:column="46">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="176" pos:column="49">i</name><op:operator pos:line="176" pos:column="50">++</op:operator></expr></incr>) <block pos:line="176" pos:column="54">{
                <expr_stmt><expr><name pos:line="177" pos:column="17">list</name> <op:operator pos:line="177" pos:column="22">+=</op:operator> <call><name><name pos:line="177" pos:column="25">rsmd</name><op:operator pos:line="177" pos:column="29">.</op:operator><name pos:line="177" pos:column="30">getColumnName</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><name pos:line="177" pos:column="44">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="177" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="177" pos:column="49">","</lit:literal></expr>;</expr_stmt>
            }</block></for>
        }</block> <catch pos:line="179" pos:column="11">catch <parameter_list pos:line="179" pos:column="17">(<param><decl><type><name pos:line="179" pos:column="18">SQLException</name></type> <name pos:line="179" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="179" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">System</name><op:operator pos:line="180" pos:column="19">.</op:operator><name pos:line="180" pos:column="20">err</name><op:operator pos:line="180" pos:column="23">.</op:operator><name pos:line="180" pos:column="24">println</name></name><argument_list pos:line="180" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="32">"Error getting names from result set. "</lit:literal> <op:operator pos:line="180" pos:column="72">+</op:operator> <name pos:line="180" pos:column="74">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><name pos:line="182" pos:column="9">t</name> <op:operator pos:line="182" pos:column="11">=</op:operator> <op:operator pos:line="182" pos:column="13">new</op:operator> <call><name pos:line="182" pos:column="17">StringTokenizer</name><argument_list pos:line="182" pos:column="32">(<argument><expr><name pos:line="182" pos:column="33">list</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="39">","</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="183" pos:column="9">return <expr><name pos:line="183" pos:column="16">t</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="186" pos:column="5">/**
     * Returns the column names of the query in an HTML table format for use
     * as header for a table produced by the drawTable method.
     * @param rs
     * @return
     */</comment>
    <function><type><specifier pos:line="192" pos:column="5">public</specifier> <name pos:line="192" pos:column="12">String</name></type> <name pos:line="192" pos:column="19">getColumnNames</name><parameter_list pos:line="192" pos:column="33">(<param><decl><type><name pos:line="192" pos:column="34">ResultSet</name></type> <name pos:line="192" pos:column="44">rs</name></decl></param>)</parameter_list> <block pos:line="192" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="193" pos:column="9">String</name></type> <name pos:line="193" pos:column="16">header</name> <init pos:line="193" pos:column="23">= <expr><lit:literal type="string" pos:line="193" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>
        <try pos:line="194" pos:column="9">try <block pos:line="194" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="195" pos:column="13">ResultSetMetaData</name></type> <name pos:line="195" pos:column="31">rsmd</name> <init pos:line="195" pos:column="36">= <expr><call><name><name pos:line="195" pos:column="38">rs</name><op:operator pos:line="195" pos:column="40">.</op:operator><name pos:line="195" pos:column="41">getMetaData</name></name><argument_list pos:line="195" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">int</name></type> <name pos:line="196" pos:column="17">numColumns</name> <init pos:line="196" pos:column="28">= <expr><call><name><name pos:line="196" pos:column="30">rsmd</name><op:operator pos:line="196" pos:column="34">.</op:operator><name pos:line="196" pos:column="35">getColumnCount</name></name><argument_list pos:line="196" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="198" pos:column="13">// Get the column names; column indices start from 1</comment>
            <for pos:line="199" pos:column="13">for (<init><decl><type><name pos:line="199" pos:column="18">int</name></type> <name pos:line="199" pos:column="22">i</name> <init pos:line="199" pos:column="24">= <expr><lit:literal type="number" pos:line="199" pos:column="26">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="199" pos:column="29">i</name> <op:operator pos:line="199" pos:column="31">&lt;</op:operator> <name pos:line="199" pos:column="33">numColumns</name> <op:operator pos:line="199" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="199" pos:column="46">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="199" pos:column="49">i</name><op:operator pos:line="199" pos:column="50">++</op:operator></expr></incr>) <block pos:line="199" pos:column="54">{
                <expr_stmt><expr><name pos:line="200" pos:column="17">header</name> <op:operator pos:line="200" pos:column="24">+=</op:operator> <lit:literal type="string" pos:line="200" pos:column="27">"&lt;td&gt;&lt;b&gt;"</lit:literal> <op:operator pos:line="200" pos:column="37">+</op:operator> <call><name><name pos:line="200" pos:column="39">rsmd</name><op:operator pos:line="200" pos:column="43">.</op:operator><name pos:line="200" pos:column="44">getColumnName</name></name><argument_list pos:line="200" pos:column="57">(<argument><expr><name pos:line="200" pos:column="58">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="61">+</op:operator> <lit:literal type="string" pos:line="200" pos:column="63">"&lt;/b&gt;"</lit:literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name pos:line="202" pos:column="13">header</name> <op:operator pos:line="202" pos:column="20">+=</op:operator> <lit:literal type="string" pos:line="202" pos:column="23">"&lt;/td&gt;"</lit:literal></expr>;</expr_stmt>
        }</block> <catch pos:line="203" pos:column="11">catch <parameter_list pos:line="203" pos:column="17">(<param><decl><type><name pos:line="203" pos:column="18">SQLException</name></type> <name pos:line="203" pos:column="31">e</name></decl></param>)</parameter_list> <block pos:line="203" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">System</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">err</name><op:operator pos:line="204" pos:column="23">.</op:operator><name pos:line="204" pos:column="24">println</name></name><argument_list pos:line="204" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="32">"Error getting names from result set. "</lit:literal> <op:operator pos:line="204" pos:column="72">+</op:operator> <name pos:line="204" pos:column="74">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="206" pos:column="9">return <expr><name pos:line="206" pos:column="16">header</name></expr>;</return>
    }</block></function>

    <comment type="block" pos:line="209" pos:column="5">/*Replace a string with contents of resource bundle is applicable
     *Used to transform db contents to human readable form.
     */</comment>
    <function><type><specifier pos:line="212" pos:column="5">private</specifier> <name pos:line="212" pos:column="13">String</name></type> <name pos:line="212" pos:column="20">canReplace</name><parameter_list pos:line="212" pos:column="30">(<param><decl><type><name pos:line="212" pos:column="31">String</name></type> <name pos:line="212" pos:column="38">s</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="41">{
        <if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name pos:line="213" pos:column="13">s</name> <op:operator pos:line="213" pos:column="15">==</op:operator> <lit:literal type="null" pos:line="213" pos:column="18">null</lit:literal></expr>)</condition><then pos:line="213" pos:column="23"> <block pos:line="213" pos:column="24">{
            <return pos:line="214" pos:column="13">return <expr><lit:literal type="null" pos:line="214" pos:column="20">null</lit:literal></expr>;</return>
        }</block></then></if>
        <try pos:line="216" pos:column="9">try <block pos:line="216" pos:column="13">{
            <expr_stmt><expr><call><name><name pos:line="217" pos:column="13">lrb</name><op:operator pos:line="217" pos:column="16">.</op:operator><name pos:line="217" pos:column="17">getString</name></name><argument_list pos:line="217" pos:column="26">(<argument><expr><name pos:line="217" pos:column="27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="218" pos:column="11">catch <parameter_list pos:line="218" pos:column="17">(<param><decl><type><name pos:line="218" pos:column="18">MissingResourceException</name></type> <name pos:line="218" pos:column="43">e</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="46">{
            <return pos:line="219" pos:column="13">return <expr><name pos:line="219" pos:column="20">s</name></expr>;</return>
        }</block></catch></try>
        <return pos:line="221" pos:column="9">return <expr><call><name><name pos:line="221" pos:column="16">lrb</name><op:operator pos:line="221" pos:column="19">.</op:operator><name pos:line="221" pos:column="20">getString</name></name><argument_list pos:line="221" pos:column="29">(<argument><expr><name pos:line="221" pos:column="30">s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="224" pos:column="5">public</specifier> <name pos:line="224" pos:column="12">void</name></type> <name pos:line="224" pos:column="17">setLoc</name><parameter_list pos:line="224" pos:column="23">(<param><decl><type><name pos:line="224" pos:column="24">Locale</name></type> <name pos:line="224" pos:column="31">loc</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="36">{
        <expr_stmt><expr><name><name pos:line="225" pos:column="9">this</name><op:operator pos:line="225" pos:column="13">.</op:operator><name pos:line="225" pos:column="14">loc</name></name> <op:operator pos:line="225" pos:column="18">=</op:operator> <name pos:line="225" pos:column="20">loc</name></expr>;</expr_stmt>
        <if pos:line="226" pos:column="9">if <condition pos:line="226" pos:column="12">(<expr><name pos:line="226" pos:column="13">loc</name> <op:operator pos:line="226" pos:column="17">==</op:operator> <lit:literal type="null" pos:line="226" pos:column="20">null</lit:literal></expr>)</condition><then pos:line="226" pos:column="25"> <block pos:line="226" pos:column="26">{
            <expr_stmt><expr><name pos:line="227" pos:column="13">loc</name> <op:operator pos:line="227" pos:column="17">=</op:operator> <call><name><name pos:line="227" pos:column="19">Locale</name><op:operator pos:line="227" pos:column="25">.</op:operator><name pos:line="227" pos:column="26">getDefault</name></name><argument_list pos:line="227" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else pos:line="228" pos:column="11">else <block pos:line="228" pos:column="16">{
            <try pos:line="229" pos:column="13">try <block pos:line="229" pos:column="17">{
                <expr_stmt><expr><name pos:line="230" pos:column="17">lrb</name> <op:operator pos:line="230" pos:column="21">=</op:operator> <call><name><name pos:line="230" pos:column="23">ResourceBundle</name><op:operator pos:line="230" pos:column="37">.</op:operator><name pos:line="230" pos:column="38">getBundle</name></name><argument_list pos:line="230" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="48">"com.bluecubs.xinco.messages.XincoMessages"</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="93">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="231" pos:column="15">catch <parameter_list pos:line="231" pos:column="21">(<param><decl><type><name pos:line="231" pos:column="22">Exception</name></type> <name pos:line="231" pos:column="32">e</name></decl></param>)</parameter_list> <block pos:line="231" pos:column="35">{
                <expr_stmt><expr><call><name><name pos:line="232" pos:column="17">e</name><op:operator pos:line="232" pos:column="18">.</op:operator><name pos:line="232" pos:column="19">printStackTrace</name></name><argument_list pos:line="232" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
