<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\core\server\filter\SetCharacterEncodingFilter.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright February 20, 2007
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            SetCharacterEncodingFilter
 *
 * Description:     SetCharacterEncodingFilter
 *
 * Original Author: Leo-Fan.aq
 * Date:            February 20, 2007, 1:35
 *
 * Modifications:
 *
 * Who?             When?             What?
 *
 *
 *************************************************************
 */</comment>

<package pos:line="37" pos:column="1">package <name><name pos:line="37" pos:column="9">com</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">bluecubs</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">xinco</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">core</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">server</name><op:operator pos:line="37" pos:column="39">.</op:operator><name pos:line="37" pos:column="40">filter</name></name>;</package>

<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">io</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">IOException</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">javax</name><op:operator pos:line="40" pos:column="13">.</op:operator><name pos:line="40" pos:column="14">servlet</name><op:operator pos:line="40" pos:column="21">.</op:operator><name pos:line="40" pos:column="22">Filter</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">javax</name><op:operator pos:line="41" pos:column="13">.</op:operator><name pos:line="41" pos:column="14">servlet</name><op:operator pos:line="41" pos:column="21">.</op:operator><name pos:line="41" pos:column="22">FilterChain</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">javax</name><op:operator pos:line="42" pos:column="13">.</op:operator><name pos:line="42" pos:column="14">servlet</name><op:operator pos:line="42" pos:column="21">.</op:operator><name pos:line="42" pos:column="22">FilterConfig</name></name>;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">javax</name><op:operator pos:line="43" pos:column="13">.</op:operator><name pos:line="43" pos:column="14">servlet</name><op:operator pos:line="43" pos:column="21">.</op:operator><name pos:line="43" pos:column="22">ServletException</name></name>;</import>
<import pos:line="44" pos:column="1">import <name><name pos:line="44" pos:column="8">javax</name><op:operator pos:line="44" pos:column="13">.</op:operator><name pos:line="44" pos:column="14">servlet</name><op:operator pos:line="44" pos:column="21">.</op:operator><name pos:line="44" pos:column="22">ServletRequest</name></name>;</import>
<import pos:line="45" pos:column="1">import <name><name pos:line="45" pos:column="8">javax</name><op:operator pos:line="45" pos:column="13">.</op:operator><name pos:line="45" pos:column="14">servlet</name><op:operator pos:line="45" pos:column="21">.</op:operator><name pos:line="45" pos:column="22">ServletResponse</name></name>;</import>

<comment type="block" format="javadoc" pos:line="47" pos:column="1">/**
 *
 * @author Leo-Fan.aq
 */</comment>
<class><specifier pos:line="51" pos:column="1">public</specifier> class <name pos:line="51" pos:column="14">SetCharacterEncodingFilter</name> <super><implements pos:line="51" pos:column="41">implements <name pos:line="51" pos:column="52">Filter</name></implements></super> <block pos:line="51" pos:column="59">{
    <comment type="line" pos:line="52" pos:column="5">// ----------------------------------------------------- Instance Variables</comment>
    
    
    <comment type="block" format="javadoc" pos:line="55" pos:column="5">/**
     * The default character encoding to set for requests that pass through
     * this filter.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="59" pos:column="5">protected</specifier> <name pos:line="59" pos:column="15">String</name></type> <name pos:line="59" pos:column="22">encoding</name> <init pos:line="59" pos:column="31">= <expr><lit:literal type="null" pos:line="59" pos:column="33">null</lit:literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc" pos:line="62" pos:column="5">/**
     * The filter configuration object we are associated with.  If this value
     * is null, this filter instance is not currently configured.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="66" pos:column="5">protected</specifier> <name pos:line="66" pos:column="15">FilterConfig</name></type> <name pos:line="66" pos:column="28">filterConfig</name> <init pos:line="66" pos:column="41">= <expr><lit:literal type="null" pos:line="66" pos:column="43">null</lit:literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc" pos:line="69" pos:column="5">/**
     * Should a character encoding specified by the client be ignored?
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="72" pos:column="5">protected</specifier> <name pos:line="72" pos:column="15">boolean</name></type> <name pos:line="72" pos:column="23">ignore</name> <init pos:line="72" pos:column="30">= <expr><lit:literal type="boolean" pos:line="72" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="line" pos:line="75" pos:column="5">// --------------------------------------------------------- Public Methods</comment>
    
    
    <comment type="block" format="javadoc" pos:line="78" pos:column="5">/**
     * Take this filter out of service.
     */</comment>
    <function><type><specifier pos:line="81" pos:column="5">public</specifier> <name pos:line="81" pos:column="12">void</name></type> <name pos:line="81" pos:column="17">destroy</name><parameter_list pos:line="81" pos:column="24">()</parameter_list> <block pos:line="81" pos:column="27">{
        
        <expr_stmt><expr><name><name pos:line="83" pos:column="9">this</name><op:operator pos:line="83" pos:column="13">.</op:operator><name pos:line="83" pos:column="14">encoding</name></name> <op:operator pos:line="83" pos:column="23">=</op:operator> <lit:literal type="null" pos:line="83" pos:column="25">null</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">this</name><op:operator pos:line="84" pos:column="13">.</op:operator><name pos:line="84" pos:column="14">filterConfig</name></name> <op:operator pos:line="84" pos:column="27">=</op:operator> <lit:literal type="null" pos:line="84" pos:column="29">null</lit:literal></expr>;</expr_stmt>
        
    }</block></function>
    
    
    <comment type="block" format="javadoc" pos:line="89" pos:column="5">/**
     * Select and set (if specified) the character encoding to be used to
     * interpret request parameters for this request.
     *
     * @param request The servlet request we are processing
     * @param result The servlet response we are creating
     * @param chain The filter chain we are processing
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet error occurs
     */</comment>
    <function><type><specifier pos:line="100" pos:column="5">public</specifier> <name pos:line="100" pos:column="12">void</name></type> <name pos:line="100" pos:column="17">doFilter</name><parameter_list pos:line="100" pos:column="25">(<param><decl><type><name pos:line="100" pos:column="26">ServletRequest</name></type> <name pos:line="100" pos:column="41">request</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="50">ServletResponse</name></type> <name pos:line="100" pos:column="66">response</name></decl></param>,
            <param><decl><type><name pos:line="101" pos:column="13">FilterChain</name></type> <name pos:line="101" pos:column="25">chain</name></decl></param>)</parameter_list>
            <throws pos:line="102" pos:column="13">throws <argument><expr><name pos:line="102" pos:column="20">IOException</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="33">ServletException</name></expr></argument></throws> <block pos:line="102" pos:column="50">{
        
        <comment type="line" pos:line="104" pos:column="9">// Conditionally select and set the character encoding to be used</comment>
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">ignore</name> <op:operator pos:line="105" pos:column="20">||</op:operator> <op:operator pos:line="105" pos:column="23">(</op:operator><call><name><name pos:line="105" pos:column="24">request</name><op:operator pos:line="105" pos:column="31">.</op:operator><name pos:line="105" pos:column="32">getCharacterEncoding</name></name><argument_list pos:line="105" pos:column="52">()</argument_list></call> <op:operator pos:line="105" pos:column="55">==</op:operator> <lit:literal type="null" pos:line="105" pos:column="58">null</lit:literal><op:operator pos:line="105" pos:column="62">)</op:operator></expr>)</condition><then pos:line="105" pos:column="64"> <block pos:line="105" pos:column="65">{
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">String</name></type> <name pos:line="106" pos:column="20">encoding</name> <init pos:line="106" pos:column="29">= <expr><call><name pos:line="106" pos:column="31">selectEncoding</name><argument_list pos:line="106" pos:column="45">(<argument><expr><name pos:line="106" pos:column="46">request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><name pos:line="107" pos:column="17">encoding</name> <op:operator pos:line="107" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="107" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="107" pos:column="34">
                <expr_stmt><expr><call><name><name pos:line="108" pos:column="17">request</name><op:operator pos:line="108" pos:column="24">.</op:operator><name pos:line="108" pos:column="25">setCharacterEncoding</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><name pos:line="108" pos:column="46">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
        
        <comment type="line" pos:line="111" pos:column="9">// Pass control on to the next filter</comment>
        <expr_stmt><expr><call><name><name pos:line="112" pos:column="9">chain</name><op:operator pos:line="112" pos:column="14">.</op:operator><name pos:line="112" pos:column="15">doFilter</name></name><argument_list pos:line="112" pos:column="23">(<argument><expr><name pos:line="112" pos:column="24">request</name></expr></argument>, <argument><expr><name pos:line="112" pos:column="33">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>
    
    
    <comment type="block" format="javadoc" pos:line="117" pos:column="5">/**
     * Place this filter into service.
     *
     * @param filterConfig The filter configuration object
     */</comment>
    <function><type><specifier pos:line="122" pos:column="5">public</specifier> <name pos:line="122" pos:column="12">void</name></type> <name pos:line="122" pos:column="17">init</name><parameter_list pos:line="122" pos:column="21">(<param><decl><type><name pos:line="122" pos:column="22">FilterConfig</name></type> <name pos:line="122" pos:column="35">filterConfig</name></decl></param>)</parameter_list> <throws pos:line="122" pos:column="49">throws <argument><expr><name pos:line="122" pos:column="56">ServletException</name></expr></argument></throws> <block pos:line="122" pos:column="73">{
        
        <expr_stmt><expr><name><name pos:line="124" pos:column="9">this</name><op:operator pos:line="124" pos:column="13">.</op:operator><name pos:line="124" pos:column="14">filterConfig</name></name> <op:operator pos:line="124" pos:column="27">=</op:operator> <name pos:line="124" pos:column="29">filterConfig</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="125" pos:column="9">this</name><op:operator pos:line="125" pos:column="13">.</op:operator><name pos:line="125" pos:column="14">encoding</name></name> <op:operator pos:line="125" pos:column="23">=</op:operator> <call><name><name pos:line="125" pos:column="25">filterConfig</name><op:operator pos:line="125" pos:column="37">.</op:operator><name pos:line="125" pos:column="38">getInitParameter</name></name><argument_list pos:line="125" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="55">"encoding"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="126" pos:column="9">String</name></type> <name pos:line="126" pos:column="16">value</name> <init pos:line="126" pos:column="22">= <expr><call><name><name pos:line="126" pos:column="24">filterConfig</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">getInitParameter</name></name><argument_list pos:line="126" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="54">"ignore"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><name pos:line="127" pos:column="13">value</name> <op:operator pos:line="127" pos:column="19">==</op:operator> <lit:literal type="null" pos:line="127" pos:column="22">null</lit:literal></expr>)</condition><then pos:line="127" pos:column="27">
            <expr_stmt><expr><name><name pos:line="128" pos:column="13">this</name><op:operator pos:line="128" pos:column="17">.</op:operator><name pos:line="128" pos:column="18">ignore</name></name> <op:operator pos:line="128" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="128" pos:column="27">true</lit:literal></expr>;</expr_stmt></then>
        <else pos:line="129" pos:column="9">else <if pos:line="129" pos:column="14">if <condition pos:line="129" pos:column="17">(<expr><call><name><name pos:line="129" pos:column="18">value</name><op:operator pos:line="129" pos:column="23">.</op:operator><name pos:line="129" pos:column="24">equalsIgnoreCase</name></name><argument_list pos:line="129" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="41">"true"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="49">
            <expr_stmt><expr><name><name pos:line="130" pos:column="13">this</name><op:operator pos:line="130" pos:column="17">.</op:operator><name pos:line="130" pos:column="18">ignore</name></name> <op:operator pos:line="130" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="130" pos:column="27">true</lit:literal></expr>;</expr_stmt></then>
        <else pos:line="131" pos:column="9">else <if pos:line="131" pos:column="14">if <condition pos:line="131" pos:column="17">(<expr><call><name><name pos:line="131" pos:column="18">value</name><op:operator pos:line="131" pos:column="23">.</op:operator><name pos:line="131" pos:column="24">equalsIgnoreCase</name></name><argument_list pos:line="131" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="41">"yes"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="131" pos:column="48">
            <expr_stmt><expr><name><name pos:line="132" pos:column="13">this</name><op:operator pos:line="132" pos:column="17">.</op:operator><name pos:line="132" pos:column="18">ignore</name></name> <op:operator pos:line="132" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="132" pos:column="27">true</lit:literal></expr>;</expr_stmt></then>
        <else pos:line="133" pos:column="9">else
            <expr_stmt><expr><name><name pos:line="134" pos:column="13">this</name><op:operator pos:line="134" pos:column="17">.</op:operator><name pos:line="134" pos:column="18">ignore</name></name> <op:operator pos:line="134" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="134" pos:column="27">false</lit:literal></expr>;</expr_stmt></else></if></else></if></else></if>
        
    }</block></function>
    
    
    <comment type="line" pos:line="139" pos:column="5">// ------------------------------------------------------ Protected Methods</comment>
    
    
    <comment type="block" format="javadoc" pos:line="142" pos:column="5">/**
     * Select an appropriate character encoding to be used, based on the
     * characteristics of the current request and/or filter initialization
     * parameters.  If no character encoding should be set, return
     * &lt;code&gt;null&lt;/code&gt;.
     * &lt;p&gt;
     * The default implementation unconditionally returns the value configured
     * by the &lt;strong&gt;encoding&lt;/strong&gt; initialization parameter for this
     * filter.
     *
     * @param request The servlet request we are processing
     */</comment>
    <function><type><specifier pos:line="154" pos:column="5">protected</specifier> <name pos:line="154" pos:column="15">String</name></type> <name pos:line="154" pos:column="22">selectEncoding</name><parameter_list pos:line="154" pos:column="36">(<param><decl><type><name pos:line="154" pos:column="37">ServletRequest</name></type> <name pos:line="154" pos:column="52">request</name></decl></param>)</parameter_list> <block pos:line="154" pos:column="61">{
        
        <return pos:line="156" pos:column="9">return <expr><op:operator pos:line="156" pos:column="16">(</op:operator><name><name pos:line="156" pos:column="17">this</name><op:operator pos:line="156" pos:column="21">.</op:operator><name pos:line="156" pos:column="22">encoding</name></name><op:operator pos:line="156" pos:column="30">)</op:operator></expr>;</return>
        
    }</block></function>
    
    
}</block></class>

</unit>
