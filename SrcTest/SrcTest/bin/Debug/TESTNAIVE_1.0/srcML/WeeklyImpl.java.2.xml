<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\implObjects\WeeklyImpl.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">implObjects</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">com</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">riskIt</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">interfaces</name><op:operator pos:line="5" pos:column="29">.</op:operator><name pos:line="5" pos:column="30">CalcImplInterface</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">riskIt</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">interfaces</name><op:operator pos:line="6" pos:column="29">.</op:operator><name pos:line="6" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">util</name><op:operator pos:line="7" pos:column="23">.</op:operator><name pos:line="7" pos:column="24">Factory</name></name>;</import>

<comment type="block" format="javadoc" pos:line="9" pos:column="1">/**
 * WeeklyImpl.java
 * Purpose: Implementation class to allow calculation class
 * 	to introduce late binding and state to calculate values
 * 	based on Weekly Wage for a given value in the database.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="19" pos:column="1">public</specifier> class <name pos:line="19" pos:column="14">WeeklyImpl</name> <super><implements pos:line="19" pos:column="25">implements <name pos:line="19" pos:column="36">CalcImplInterface</name></implements></super> <block pos:line="19" pos:column="54">{

	<function><type><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">addToArrayList</name><parameter_list pos:line="21" pos:column="35">(<param><decl><type><name><name pos:line="21" pos:column="36">ArrayList</name><argument_list pos:line="21" pos:column="45">&lt;<argument><name pos:line="21" pos:column="46">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="78">typeWageAL</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="90">String</name></type> <name pos:line="21" pos:column="97">type</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="103">int</name></type> <name pos:line="21" pos:column="107">weekWage</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="117">int</name></type> <name pos:line="21" pos:column="121">workWeeks</name></decl></param>)</parameter_list><block pos:line="21" pos:column="131">{
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">type</name> <op:operator pos:line="22" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="22" pos:column="29">null</lit:literal> <op:operator pos:line="22" pos:column="34">&amp;&amp;</op:operator> <name pos:line="22" pos:column="37">weekWage</name> <op:operator pos:line="22" pos:column="46">&gt;</op:operator> <lit:literal type="number" pos:line="22" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="22" pos:column="50"> <block pos:line="22" pos:column="51">{
			<expr_stmt><expr><call><name><name pos:line="23" pos:column="25">typeWageAL</name><op:operator pos:line="23" pos:column="35">.</op:operator><name pos:line="23" pos:column="36">add</name></name><argument_list pos:line="23" pos:column="39">(<argument><expr><call><name><name pos:line="23" pos:column="40">Factory</name><op:operator pos:line="23" pos:column="47">.</op:operator><name pos:line="23" pos:column="48">getTypeWageDataStructure</name></name><argument_list pos:line="23" pos:column="72">(<argument><expr><name pos:line="23" pos:column="73">type</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="79">weekWage</name></expr></argument>, <argument><expr><name pos:line="23" pos:column="89">workWeeks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	
	<function><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">double</name></type> <name pos:line="27" pos:column="23">calculateAverage</name><parameter_list pos:line="27" pos:column="39">(<param><decl><type><name pos:line="27" pos:column="40">String</name></type> <name pos:line="27" pos:column="47">type</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="53">TypeWageDataStructureInterface</name></type> <name pos:line="27" pos:column="84">i</name></decl></param>)</parameter_list><block pos:line="27" pos:column="86">{
		<if pos:line="28" pos:column="17">if<condition pos:line="28" pos:column="19">(<expr><name pos:line="28" pos:column="20">type</name> <op:operator pos:line="28" pos:column="25">!=</op:operator> <lit:literal type="null" pos:line="28" pos:column="28">null</lit:literal> <op:operator pos:line="28" pos:column="33">&amp;&amp;</op:operator> <call><name><name pos:line="28" pos:column="36">type</name><op:operator pos:line="28" pos:column="40">.</op:operator><name pos:line="28" pos:column="41">equalsIgnoreCase</name></name><argument_list pos:line="28" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="28" pos:column="58">"all"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="28" pos:column="65">{
			<return pos:line="29" pos:column="25">return <expr><call><name><name pos:line="29" pos:column="32">i</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">getWeekWage</name></name><argument_list pos:line="29" pos:column="45">()</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="30" pos:column="19">else <if pos:line="30" pos:column="24">if <condition pos:line="30" pos:column="27">(<expr><call><name><name pos:line="30" pos:column="28">i</name><op:operator pos:line="30" pos:column="29">.</op:operator><name pos:line="30" pos:column="30">getType</name></name><argument_list pos:line="30" pos:column="37">()</argument_list></call> <op:operator pos:line="30" pos:column="40">!=</op:operator> <lit:literal type="null" pos:line="30" pos:column="43">null</lit:literal> <op:operator pos:line="30" pos:column="48">&amp;&amp;</op:operator> <name pos:line="30" pos:column="51">type</name> <op:operator pos:line="30" pos:column="56">!=</op:operator> <lit:literal type="null" pos:line="30" pos:column="59">null</lit:literal> <op:operator pos:line="30" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="30" pos:column="67">i</name><op:operator pos:line="30" pos:column="68">.</op:operator><name pos:line="30" pos:column="69">getType</name></name><argument_list pos:line="30" pos:column="76">()</argument_list></call><op:operator pos:line="30" pos:column="78">.</op:operator><call><name pos:line="30" pos:column="79">trim</name><argument_list pos:line="30" pos:column="83">()</argument_list></call><op:operator pos:line="30" pos:column="85">.</op:operator><call><name pos:line="30" pos:column="86">equalsIgnoreCase</name><argument_list pos:line="30" pos:column="102">(<argument><expr><name pos:line="30" pos:column="103">type</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="30" pos:column="109">{
			<return pos:line="31" pos:column="25">return <expr><call><name><name pos:line="31" pos:column="32">i</name><op:operator pos:line="31" pos:column="33">.</op:operator><name pos:line="31" pos:column="34">getWeekWage</name></name><argument_list pos:line="31" pos:column="45">()</argument_list></call></expr>;</return>
		}</block></then> <else pos:line="32" pos:column="19">else <block pos:line="32" pos:column="24">{
			<return pos:line="33" pos:column="25">return <expr><lit:literal type="number" pos:line="33" pos:column="32">0</lit:literal></expr>;</return>
		}</block></else></if></else></if>
	}</block></function>
	
}</block></class>
</unit>
