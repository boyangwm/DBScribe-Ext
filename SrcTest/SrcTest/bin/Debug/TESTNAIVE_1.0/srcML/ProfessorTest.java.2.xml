<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\ProfessorTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">org</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">junit</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Test</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">umas</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">code</name></name>.*;</import>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">ProfessorTest</name> <block pos:line="10" pos:column="28">{

	<function><type><annotation pos:line="12" pos:column="9">@<name pos:line="12" pos:column="10">Test</name></annotation>
	<specifier pos:line="13" pos:column="9">public</specifier> <name pos:line="13" pos:column="16">void</name></type> <name pos:line="13" pos:column="21">testProfessorInt</name><parameter_list pos:line="13" pos:column="37">()</parameter_list> <block pos:line="13" pos:column="40">{
		
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">Professor</name></type> <name pos:line="15" pos:column="27">prof</name></decl>;</decl_stmt>
		<try pos:line="16" pos:column="17">try <block pos:line="16" pos:column="21">{
			<expr_stmt><expr><name pos:line="17" pos:column="25">prof</name> <op:operator pos:line="17" pos:column="30">=</op:operator> <op:operator pos:line="17" pos:column="32">new</op:operator> <call><name pos:line="17" pos:column="36">Professor</name><argument_list pos:line="17" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="17" pos:column="46">582</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">assertEquals</name><argument_list pos:line="18" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="18" pos:column="38">582</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="18" pos:column="43">prof</name><op:operator pos:line="18" pos:column="47">.</op:operator><name pos:line="18" pos:column="48">getUIN</name></name><argument_list pos:line="18" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="19" pos:column="19">catch <parameter_list pos:line="19" pos:column="25">(<param><decl><type><name><name pos:line="19" pos:column="26">Student</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="19" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="19" pos:column="59">{
			<comment type="line" pos:line="20" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="21" pos:column="25">e</name><op:operator pos:line="21" pos:column="26">.</op:operator><name pos:line="21" pos:column="27">printStackTrace</name></name><argument_list pos:line="21" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		<catch pos:line="23" pos:column="17">catch <parameter_list pos:line="23" pos:column="23">(<param><decl><type><name><name pos:line="23" pos:column="24">People</name><op:operator pos:line="23" pos:column="30">.</op:operator><name pos:line="23" pos:column="31">PersonDoesNotExistException</name></name></type> <name pos:line="23" pos:column="59">e</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="62">{
			<comment type="line" pos:line="24" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">e</name><op:operator pos:line="25" pos:column="26">.</op:operator><name pos:line="25" pos:column="27">printStackTrace</name></name><argument_list pos:line="25" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	
	<function><type><annotation pos:line="31" pos:column="9">@<name pos:line="31" pos:column="10">Test</name></annotation>
	<specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">testProfessorInt2</name><parameter_list pos:line="32" pos:column="38">()</parameter_list> <block pos:line="32" pos:column="41">{
		
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">Professor</name></type> <name pos:line="34" pos:column="27">prof</name></decl>;</decl_stmt>
		<try pos:line="35" pos:column="17">try <block pos:line="35" pos:column="21">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">prof</name> <op:operator pos:line="36" pos:column="30">=</op:operator> <op:operator pos:line="36" pos:column="32">new</op:operator> <call><name pos:line="36" pos:column="36">Professor</name><argument_list pos:line="36" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="46">451</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">assertEquals</name><argument_list pos:line="37" pos:column="37">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="38">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="37" pos:column="41">prof</name><op:operator pos:line="37" pos:column="45">.</op:operator><name pos:line="37" pos:column="46">getUIN</name></name><argument_list pos:line="37" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="38" pos:column="19">catch <parameter_list pos:line="38" pos:column="25">(<param><decl><type><name><name pos:line="38" pos:column="26">Student</name><op:operator pos:line="38" pos:column="33">.</op:operator><name pos:line="38" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="38" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="59">{
			<comment type="line" pos:line="39" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">e</name><op:operator pos:line="40" pos:column="26">.</op:operator><name pos:line="40" pos:column="27">printStackTrace</name></name><argument_list pos:line="40" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch>
		<catch pos:line="42" pos:column="17">catch <parameter_list pos:line="42" pos:column="23">(<param><decl><type><name><name pos:line="42" pos:column="24">People</name><op:operator pos:line="42" pos:column="30">.</op:operator><name pos:line="42" pos:column="31">PersonDoesNotExistException</name></name></type> <name pos:line="42" pos:column="59">e</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="62">{
			<comment type="line" pos:line="43" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="44" pos:column="25">e</name><op:operator pos:line="44" pos:column="26">.</op:operator><name pos:line="44" pos:column="27">printStackTrace</name></name><argument_list pos:line="44" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		
	}</block></function>
	

	<function><type><annotation pos:line="51" pos:column="9">@<name pos:line="51" pos:column="10">Test</name></annotation>
	<specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">testProfessorString</name><parameter_list pos:line="52" pos:column="40">()</parameter_list> <block pos:line="52" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">Professor</name></type> <name pos:line="54" pos:column="27">prof</name><init pos:line="54" pos:column="31">=<expr><op:operator pos:line="54" pos:column="32">new</op:operator> <call><name pos:line="54" pos:column="36">Professor</name><argument_list pos:line="54" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="46">"camer"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">assertEquals</name><argument_list pos:line="55" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="30">582</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="55" pos:column="35">prof</name><op:operator pos:line="55" pos:column="39">.</op:operator><name pos:line="55" pos:column="40">getUIN</name></name><argument_list pos:line="55" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="58" pos:column="9">@<name pos:line="58" pos:column="10">Test</name></annotation>
	<specifier pos:line="59" pos:column="9">public</specifier> <name pos:line="59" pos:column="16">void</name></type> <name pos:line="59" pos:column="21">testProfessorString2</name><parameter_list pos:line="59" pos:column="41">()</parameter_list> <block pos:line="59" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">Professor</name></type> <name pos:line="61" pos:column="27">prof</name><init pos:line="61" pos:column="31">=<expr><op:operator pos:line="61" pos:column="32">new</op:operator> <call><name pos:line="61" pos:column="36">Professor</name><argument_list pos:line="61" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="46">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assertEquals</name><argument_list pos:line="62" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="62" pos:column="33">prof</name><op:operator pos:line="62" pos:column="37">.</op:operator><name pos:line="62" pos:column="38">getUIN</name></name><argument_list pos:line="62" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="65" pos:column="9">@<name pos:line="65" pos:column="10">Test</name></annotation>
	<specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">testProfessorString3</name><parameter_list pos:line="66" pos:column="41">()</parameter_list> <block pos:line="66" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">Professor</name></type> <name pos:line="68" pos:column="27">prof</name><init pos:line="68" pos:column="31">=<expr><op:operator pos:line="68" pos:column="32">new</op:operator> <call><name pos:line="68" pos:column="36">Professor</name><argument_list pos:line="68" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="46">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="69" pos:column="17">System</name><op:operator pos:line="69" pos:column="23">.</op:operator><name pos:line="69" pos:column="24">out</name><op:operator pos:line="69" pos:column="27">.</op:operator><name pos:line="69" pos:column="28">println</name></name><argument_list pos:line="69" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="36">"================================="</lit:literal><op:operator pos:line="69" pos:column="71">+</op:operator><call><name><name pos:line="69" pos:column="72">prof</name><op:operator pos:line="69" pos:column="76">.</op:operator><name pos:line="69" pos:column="77">getName</name></name><argument_list pos:line="69" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">assertEquals</name><argument_list pos:line="70" pos:column="29">(<argument><expr><lit:literal type="null" pos:line="70" pos:column="30">null</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="70" pos:column="35">prof</name><op:operator pos:line="70" pos:column="39">.</op:operator><name pos:line="70" pos:column="40">getName</name></name><argument_list pos:line="70" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="73" pos:column="9">@<name pos:line="73" pos:column="10">Test</name></annotation>
	<specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">testProfessorString4</name><parameter_list pos:line="74" pos:column="41">()</parameter_list> <block pos:line="74" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">Professor</name></type> <name pos:line="76" pos:column="27">prof</name><init pos:line="76" pos:column="31">=<expr><op:operator pos:line="76" pos:column="32">new</op:operator> <call><name pos:line="76" pos:column="36">Professor</name><argument_list pos:line="76" pos:column="45">(<argument><expr><lit:literal type="null" pos:line="76" pos:column="46">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">assertEquals</name><argument_list pos:line="77" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="33">prof</name><op:operator pos:line="77" pos:column="37">.</op:operator><name pos:line="77" pos:column="38">getUIN</name></name><argument_list pos:line="77" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="80" pos:column="9">@<name pos:line="80" pos:column="10">Test</name></annotation>
	<specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">testAddProfToDb</name><parameter_list pos:line="81" pos:column="36">()</parameter_list> <block pos:line="81" pos:column="39">{
		
		<comment type="line" pos:line="83" pos:column="17">//this function cannot be tested now here as this would cause inconsistency in the database</comment>
		
	}</block></function>

	<function><type><annotation pos:line="87" pos:column="9">@<name pos:line="87" pos:column="10">Test</name></annotation>
	<specifier pos:line="88" pos:column="9">public</specifier> <name pos:line="88" pos:column="16">void</name></type> <name pos:line="88" pos:column="21">testCheckIfProfessorInt1</name><parameter_list pos:line="88" pos:column="45">()</parameter_list> <block pos:line="88" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">Boolean</name></type> <name pos:line="90" pos:column="25">check</name><init pos:line="90" pos:column="30">=<expr><call><name><name pos:line="90" pos:column="31">Professor</name><op:operator pos:line="90" pos:column="40">.</op:operator><name pos:line="90" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="90" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="90" pos:column="58">582</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">assertTrue</name><argument_list pos:line="91" pos:column="27">(<argument><expr><name pos:line="91" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="94" pos:column="9">@<name pos:line="94" pos:column="10">Test</name></annotation>
	<specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">testCheckIfProfessorInt2</name><parameter_list pos:line="95" pos:column="45">()</parameter_list> <block pos:line="95" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">Boolean</name></type> <name pos:line="97" pos:column="25">check</name><init pos:line="97" pos:column="30">=<expr><call><name><name pos:line="97" pos:column="31">Professor</name><op:operator pos:line="97" pos:column="40">.</op:operator><name pos:line="97" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="97" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="58">272</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="98" pos:column="17">assertFalse</name><argument_list pos:line="98" pos:column="28">(<argument><expr><name pos:line="98" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="101" pos:column="9">@<name pos:line="101" pos:column="10">Test</name></annotation>
	<specifier pos:line="102" pos:column="9">public</specifier> <name pos:line="102" pos:column="16">void</name></type> <name pos:line="102" pos:column="21">testCheckIfProfessorInt3</name><parameter_list pos:line="102" pos:column="45">()</parameter_list> <block pos:line="102" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">Boolean</name></type> <name pos:line="104" pos:column="25">check</name><init pos:line="104" pos:column="30">=<expr><call><name><name pos:line="104" pos:column="31">Professor</name><op:operator pos:line="104" pos:column="40">.</op:operator><name pos:line="104" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="104" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="104" pos:column="58">10000</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">assertFalse</name><argument_list pos:line="105" pos:column="28">(<argument><expr><name pos:line="105" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><type><annotation pos:line="109" pos:column="9">@<name pos:line="109" pos:column="10">Test</name></annotation>
	<specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">testCheckIfProfessorString</name><parameter_list pos:line="110" pos:column="47">()</parameter_list> <block pos:line="110" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">boolean</name></type> <name pos:line="112" pos:column="25">check</name><init pos:line="112" pos:column="30">=<expr><call><name><name pos:line="112" pos:column="31">Professor</name><op:operator pos:line="112" pos:column="40">.</op:operator><name pos:line="112" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="112" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="58">"camer"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">assertTrue</name><argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="116" pos:column="9">@<name pos:line="116" pos:column="10">Test</name></annotation>
	<specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">testCheckIfProfessorString2</name><parameter_list pos:line="117" pos:column="48">()</parameter_list> <block pos:line="117" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">boolean</name></type> <name pos:line="119" pos:column="25">check</name><init pos:line="119" pos:column="30">=<expr><call><name><name pos:line="119" pos:column="31">Professor</name><op:operator pos:line="119" pos:column="40">.</op:operator><name pos:line="119" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="119" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="58">"japoo"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">assertFalse</name><argument_list pos:line="120" pos:column="28">(<argument><expr><name pos:line="120" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="123" pos:column="9">@<name pos:line="123" pos:column="10">Test</name></annotation>
	<specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">testCheckIfProfessorString3</name><parameter_list pos:line="124" pos:column="48">()</parameter_list> <block pos:line="124" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="126" pos:column="17">boolean</name></type> <name pos:line="126" pos:column="25">check</name><init pos:line="126" pos:column="30">=<expr><call><name><name pos:line="126" pos:column="31">Professor</name><op:operator pos:line="126" pos:column="40">.</op:operator><name pos:line="126" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="126" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="58">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="127" pos:column="17">assertFalse</name><argument_list pos:line="127" pos:column="28">(<argument><expr><name pos:line="127" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="130" pos:column="9">@<name pos:line="130" pos:column="10">Test</name></annotation>
	<specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">testCheckIfProfessorString4</name><parameter_list pos:line="131" pos:column="48">()</parameter_list> <block pos:line="131" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">boolean</name></type> <name pos:line="133" pos:column="25">check</name><init pos:line="133" pos:column="30">=<expr><call><name><name pos:line="133" pos:column="31">Professor</name><op:operator pos:line="133" pos:column="40">.</op:operator><name pos:line="133" pos:column="41">checkIfProfessor</name></name><argument_list pos:line="133" pos:column="57">(<argument><expr><lit:literal type="null" pos:line="133" pos:column="58">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">assertFalse</name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="137" pos:column="9">@<name pos:line="137" pos:column="10">Test</name></annotation>
	<specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">void</name></type> <name pos:line="138" pos:column="21">testRetrieveProfDetailsByUIN1</name><parameter_list pos:line="138" pos:column="50">()</parameter_list> <block pos:line="138" pos:column="53">{
		
		<decl_stmt><decl><type><name pos:line="140" pos:column="17">Professor</name></type> <name pos:line="140" pos:column="27">check</name><init pos:line="140" pos:column="32">=<expr><call><name><name pos:line="140" pos:column="33">Professor</name><op:operator pos:line="140" pos:column="42">.</op:operator><name pos:line="140" pos:column="43">retrieveProfDetailsByUIN</name></name><argument_list pos:line="140" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="140" pos:column="68">582</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="141" pos:column="17">assertEquals</name><argument_list pos:line="141" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="30">582</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="35">check</name><op:operator pos:line="141" pos:column="40">.</op:operator><name pos:line="141" pos:column="41">getUIN</name></name><argument_list pos:line="141" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="144" pos:column="9">@<name pos:line="144" pos:column="10">Test</name></annotation>
	<specifier pos:line="145" pos:column="9">public</specifier> <name pos:line="145" pos:column="16">void</name></type> <name pos:line="145" pos:column="21">testRetrieveProfDetailsByUIN2</name><parameter_list pos:line="145" pos:column="50">()</parameter_list> <block pos:line="145" pos:column="53">{
		
		<decl_stmt><decl><type><name pos:line="147" pos:column="17">Professor</name></type> <name pos:line="147" pos:column="27">check</name><init pos:line="147" pos:column="32">=<expr><call><name><name pos:line="147" pos:column="33">Professor</name><op:operator pos:line="147" pos:column="42">.</op:operator><name pos:line="147" pos:column="43">retrieveProfDetailsByUIN</name></name><argument_list pos:line="147" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="147" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="148" pos:column="17">System</name><op:operator pos:line="148" pos:column="23">.</op:operator><name pos:line="148" pos:column="24">out</name><op:operator pos:line="148" pos:column="27">.</op:operator><name pos:line="148" pos:column="28">println</name></name><argument_list pos:line="148" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="36">"------///------------------------"</lit:literal><op:operator pos:line="148" pos:column="71">+</op:operator><name pos:line="148" pos:column="72">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="149" pos:column="17">assertEquals</name><argument_list pos:line="149" pos:column="29">(<argument><expr><lit:literal type="null" pos:line="149" pos:column="30">null</lit:literal></expr></argument>,<argument><expr><name pos:line="149" pos:column="35">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="152" pos:column="9">@<name pos:line="152" pos:column="10">Test</name></annotation>
	<specifier pos:line="153" pos:column="9">public</specifier> <name pos:line="153" pos:column="16">void</name></type> <name pos:line="153" pos:column="21">testRetrieveProfDetailsByUIN3</name><parameter_list pos:line="153" pos:column="50">()</parameter_list> <block pos:line="153" pos:column="53">{
		
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">Professor</name></type> <name pos:line="155" pos:column="27">check</name><init pos:line="155" pos:column="32">=<expr><call><name><name pos:line="155" pos:column="33">Professor</name><op:operator pos:line="155" pos:column="42">.</op:operator><name pos:line="155" pos:column="43">retrieveProfDetailsByUIN</name></name><argument_list pos:line="155" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="155" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="156" pos:column="17">System</name><op:operator pos:line="156" pos:column="23">.</op:operator><name pos:line="156" pos:column="24">out</name><op:operator pos:line="156" pos:column="27">.</op:operator><name pos:line="156" pos:column="28">println</name></name><argument_list pos:line="156" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="36">"------------------------------"</lit:literal><op:operator pos:line="156" pos:column="68">+</op:operator><name pos:line="156" pos:column="69">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="157" pos:column="17">assertEquals</name><argument_list pos:line="157" pos:column="29">(<argument><expr><lit:literal type="null" pos:line="157" pos:column="30">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="157" pos:column="36">null</lit:literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="42">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="160" pos:column="9">@<name pos:line="160" pos:column="10">Test</name></annotation>
	<specifier pos:line="161" pos:column="9">public</specifier> <name pos:line="161" pos:column="16">void</name></type> <name pos:line="161" pos:column="21">testRetrieveProfDetailsByUserName1</name><parameter_list pos:line="161" pos:column="55">()</parameter_list> <block pos:line="161" pos:column="58">{
		
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">Professor</name></type> <name pos:line="163" pos:column="27">check</name><init pos:line="163" pos:column="32">=<expr><call><name><name pos:line="163" pos:column="33">Professor</name><op:operator pos:line="163" pos:column="42">.</op:operator><name pos:line="163" pos:column="43">retrieveProfDetailsByUserName</name></name><argument_list pos:line="163" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="73">"camer"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="164" pos:column="17">assertEquals</name><argument_list pos:line="164" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="164" pos:column="30">582</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="164" pos:column="35">check</name><op:operator pos:line="164" pos:column="40">.</op:operator><name pos:line="164" pos:column="41">getUIN</name></name><argument_list pos:line="164" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="167" pos:column="9">@<name pos:line="167" pos:column="10">Test</name></annotation>
	<specifier pos:line="168" pos:column="9">public</specifier> <name pos:line="168" pos:column="16">void</name></type> <name pos:line="168" pos:column="21">testRetrieveProfDetailsByUserName2</name><parameter_list pos:line="168" pos:column="55">()</parameter_list> <block pos:line="168" pos:column="58">{
		
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">Professor</name></type> <name pos:line="170" pos:column="27">check</name><init pos:line="170" pos:column="32">=<expr><call><name><name pos:line="170" pos:column="33">Professor</name><op:operator pos:line="170" pos:column="42">.</op:operator><name pos:line="170" pos:column="43">retrieveProfDetailsByUserName</name></name><argument_list pos:line="170" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="73">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="171" pos:column="17">System</name><op:operator pos:line="171" pos:column="23">.</op:operator><name pos:line="171" pos:column="24">out</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">println</name></name><argument_list pos:line="171" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="36">"------------------------------"</lit:literal><op:operator pos:line="171" pos:column="68">+</op:operator><name pos:line="171" pos:column="69">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="172" pos:column="17">assertEquals</name><argument_list pos:line="172" pos:column="29">(<argument><expr><lit:literal type="null" pos:line="172" pos:column="30">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="36">null</lit:literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="42">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="175" pos:column="9">@<name pos:line="175" pos:column="10">Test</name></annotation>
	<specifier pos:line="176" pos:column="9">public</specifier> <name pos:line="176" pos:column="16">void</name></type> <name pos:line="176" pos:column="21">testDeleteProfFromDbUsingUIN</name><parameter_list pos:line="176" pos:column="49">()</parameter_list> <block pos:line="176" pos:column="52">{
		<comment type="line" pos:line="177" pos:column="17">//this function is not tested in here as it would cause inconsistency in the database.</comment>
	}</block></function>

	<function><type><annotation pos:line="180" pos:column="9">@<name pos:line="180" pos:column="10">Test</name></annotation>
	<specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">testDeleteProfFromDbUsingUserName</name><parameter_list pos:line="181" pos:column="54">()</parameter_list> <block pos:line="181" pos:column="57">{
		<comment type="line" pos:line="182" pos:column="17">//this function is not tested in here as it would cause inconsistency in the database.</comment>
	}</block></function>


	<function><type><annotation pos:line="186" pos:column="9">@<name pos:line="186" pos:column="10">Test</name></annotation>
	<specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">testGetAllProfInADeptInt</name><parameter_list pos:line="187" pos:column="45">()</parameter_list> <throws pos:line="187" pos:column="48">throws <argument><expr><name><name pos:line="187" pos:column="55">Professor</name><op:operator pos:line="187" pos:column="64">.</op:operator><name pos:line="187" pos:column="65">ProfessorDoesNotExistException</name></name></expr></argument></throws> <block pos:line="187" pos:column="96">{
		
		<decl_stmt><decl><type><name><name pos:line="189" pos:column="17">ArrayList</name><argument_list pos:line="189" pos:column="26">&lt;<argument><name pos:line="189" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="189" pos:column="38">check</name><init pos:line="189" pos:column="43">=<expr><call><name><name pos:line="189" pos:column="44">Professor</name><op:operator pos:line="189" pos:column="53">.</op:operator><name pos:line="189" pos:column="54">getAllProfInADept</name></name><argument_list pos:line="189" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="189" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="190" pos:column="17">assertNotNull</name><argument_list pos:line="190" pos:column="30">(<argument><expr><name pos:line="190" pos:column="31">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="193" pos:column="9">@<name pos:line="193" pos:column="10">Test</name><argument_list pos:line="193" pos:column="14">(<argument><expr><name pos:line="193" pos:column="15">expected</name><op:operator pos:line="193" pos:column="23">=</op:operator><name><name pos:line="193" pos:column="24">Department</name><op:operator pos:line="193" pos:column="34">.</op:operator><name pos:line="193" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="193" pos:column="66">.</op:operator><name pos:line="193" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="194" pos:column="9">public</specifier> <name pos:line="194" pos:column="16">void</name></type> <name pos:line="194" pos:column="21">testGetAllProfInADeptInt2</name><parameter_list pos:line="194" pos:column="46">()</parameter_list> <throws pos:line="194" pos:column="49">throws <argument><expr><name><name pos:line="194" pos:column="56">Professor</name><op:operator pos:line="194" pos:column="65">.</op:operator><name pos:line="194" pos:column="66">ProfessorDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="98">Department</name><op:operator pos:line="194" pos:column="108">.</op:operator><name pos:line="194" pos:column="109">DepartmentDoesNotExistException</name></name></expr></argument></throws><block pos:line="194" pos:column="140">{
		
		<decl_stmt><decl><type><name><name pos:line="196" pos:column="17">ArrayList</name><argument_list pos:line="196" pos:column="26">&lt;<argument><name pos:line="196" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="196" pos:column="38">check</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="197" pos:column="17">Department</name></type> <name pos:line="197" pos:column="28">d</name><init pos:line="197" pos:column="29">=<expr><op:operator pos:line="197" pos:column="30">new</op:operator> <call><name pos:line="197" pos:column="34">Department</name><argument_list pos:line="197" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="45">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="198" pos:column="25">check</name> <op:operator pos:line="198" pos:column="31">=</op:operator> <call><name><name pos:line="198" pos:column="33">Professor</name><op:operator pos:line="198" pos:column="42">.</op:operator><name pos:line="198" pos:column="43">getAllProfInADept</name></name><argument_list pos:line="198" pos:column="60">(<argument><expr><call><name><name pos:line="198" pos:column="61">d</name><op:operator pos:line="198" pos:column="62">.</op:operator><name pos:line="198" pos:column="63">getDepartmentID</name></name><argument_list pos:line="198" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt pos:line="198" pos:column="82">;</empty_stmt>
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">System</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">out</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">println</name></name><argument_list pos:line="199" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="44">"---------------------------------------------"</lit:literal><op:operator pos:line="199" pos:column="91">+</op:operator><call><name><name pos:line="199" pos:column="92">check</name><op:operator pos:line="199" pos:column="97">.</op:operator><name pos:line="199" pos:column="98">get</name></name><argument_list pos:line="199" pos:column="101">(<argument><expr><lit:literal type="number" pos:line="199" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="200" pos:column="25">//assertNotNull(check);</comment>

		
	}</block></function>

	<function><type><annotation pos:line="205" pos:column="9">@<name pos:line="205" pos:column="10">Test</name></annotation>
	<specifier pos:line="206" pos:column="9">public</specifier> <name pos:line="206" pos:column="16">void</name></type> <name pos:line="206" pos:column="21">testGetAllProfInADeptString1</name><parameter_list pos:line="206" pos:column="49">()</parameter_list> <throws pos:line="206" pos:column="52">throws <argument><expr><name><name pos:line="206" pos:column="59">Professor</name><op:operator pos:line="206" pos:column="68">.</op:operator><name pos:line="206" pos:column="69">ProfessorDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="101">Department</name><op:operator pos:line="206" pos:column="111">.</op:operator><name pos:line="206" pos:column="112">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="206" pos:column="144">{
		
		<decl_stmt><decl><type><name pos:line="208" pos:column="17">Department</name></type> <name pos:line="208" pos:column="28">d</name><init pos:line="208" pos:column="29">=<expr><op:operator pos:line="208" pos:column="30">new</op:operator> <call><name pos:line="208" pos:column="34">Department</name><argument_list pos:line="208" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="45">"computer Science"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="209" pos:column="17">ArrayList</name><argument_list pos:line="209" pos:column="26">&lt;<argument><name pos:line="209" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="38">check</name><init pos:line="209" pos:column="43">=<expr><call><name><name pos:line="209" pos:column="44">Professor</name><op:operator pos:line="209" pos:column="53">.</op:operator><name pos:line="209" pos:column="54">getAllProfInADept</name></name><argument_list pos:line="209" pos:column="71">(<argument><expr><call><name><name pos:line="209" pos:column="72">d</name><op:operator pos:line="209" pos:column="73">.</op:operator><name pos:line="209" pos:column="74">getDepartmentName</name></name><argument_list pos:line="209" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="210" pos:column="17">assertNotNull</name><argument_list pos:line="210" pos:column="30">(<argument><expr><name pos:line="210" pos:column="31">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="213" pos:column="9">@<name pos:line="213" pos:column="10">Test</name><argument_list pos:line="213" pos:column="14">(<argument><expr><name pos:line="213" pos:column="15">expected</name><op:operator pos:line="213" pos:column="23">=</op:operator><name><name pos:line="213" pos:column="24">Department</name><op:operator pos:line="213" pos:column="34">.</op:operator><name pos:line="213" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="213" pos:column="66">.</op:operator><name pos:line="213" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="214" pos:column="9">public</specifier> <name pos:line="214" pos:column="16">void</name></type> <name pos:line="214" pos:column="21">testGetAllProfInADeptString2</name><parameter_list pos:line="214" pos:column="49">()</parameter_list> <throws pos:line="214" pos:column="52">throws <argument><expr><name><name pos:line="214" pos:column="59">Professor</name><op:operator pos:line="214" pos:column="68">.</op:operator><name pos:line="214" pos:column="69">ProfessorDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="214" pos:column="101">Department</name><op:operator pos:line="214" pos:column="111">.</op:operator><name pos:line="214" pos:column="112">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="214" pos:column="144">{
		
		<decl_stmt><decl><type><name pos:line="216" pos:column="17">Department</name></type> <name pos:line="216" pos:column="28">d</name><init pos:line="216" pos:column="29">=<expr><op:operator pos:line="216" pos:column="30">new</op:operator> <call><name pos:line="216" pos:column="34">Department</name><argument_list pos:line="216" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="45">"xyz"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="217" pos:column="17">ArrayList</name><argument_list pos:line="217" pos:column="26">&lt;<argument><name pos:line="217" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="217" pos:column="38">check</name><init pos:line="217" pos:column="43">=<expr><call><name><name pos:line="217" pos:column="44">Professor</name><op:operator pos:line="217" pos:column="53">.</op:operator><name pos:line="217" pos:column="54">getAllProfInADept</name></name><argument_list pos:line="217" pos:column="71">(<argument><expr><call><name><name pos:line="217" pos:column="72">d</name><op:operator pos:line="217" pos:column="73">.</op:operator><name pos:line="217" pos:column="74">getDepartmentName</name></name><argument_list pos:line="217" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="218" pos:column="17">assertNull</name><argument_list pos:line="218" pos:column="27">(<argument><expr><name pos:line="218" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="221" pos:column="9">@<name pos:line="221" pos:column="10">Test</name><argument_list pos:line="221" pos:column="14">(<argument><expr><name pos:line="221" pos:column="15">expected</name><op:operator pos:line="221" pos:column="23">=</op:operator><name><name pos:line="221" pos:column="24">Department</name><op:operator pos:line="221" pos:column="34">.</op:operator><name pos:line="221" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="221" pos:column="66">.</op:operator><name pos:line="221" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="222" pos:column="9">public</specifier> <name pos:line="222" pos:column="16">void</name></type> <name pos:line="222" pos:column="21">testGetAllProfInADeptString3</name><parameter_list pos:line="222" pos:column="49">()</parameter_list> <throws pos:line="222" pos:column="52">throws <argument><expr><name><name pos:line="222" pos:column="59">Professor</name><op:operator pos:line="222" pos:column="68">.</op:operator><name pos:line="222" pos:column="69">ProfessorDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="101">Department</name><op:operator pos:line="222" pos:column="111">.</op:operator><name pos:line="222" pos:column="112">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="222" pos:column="144">{
		
		<decl_stmt><decl><type><name pos:line="224" pos:column="17">Department</name></type> <name pos:line="224" pos:column="28">d</name><init pos:line="224" pos:column="29">=<expr><op:operator pos:line="224" pos:column="30">new</op:operator> <call><name pos:line="224" pos:column="34">Department</name><argument_list pos:line="224" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="225" pos:column="17">ArrayList</name><argument_list pos:line="225" pos:column="26">&lt;<argument><name pos:line="225" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="225" pos:column="38">check</name><init pos:line="225" pos:column="43">=<expr><call><name><name pos:line="225" pos:column="44">Professor</name><op:operator pos:line="225" pos:column="53">.</op:operator><name pos:line="225" pos:column="54">getAllProfInADept</name></name><argument_list pos:line="225" pos:column="71">(<argument><expr><call><name><name pos:line="225" pos:column="72">d</name><op:operator pos:line="225" pos:column="73">.</op:operator><name pos:line="225" pos:column="74">getDepartmentName</name></name><argument_list pos:line="225" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="226" pos:column="17">assertNull</name><argument_list pos:line="226" pos:column="27">(<argument><expr><name pos:line="226" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="229" pos:column="9">@<name pos:line="229" pos:column="10">Test</name><argument_list pos:line="229" pos:column="14">(<argument><expr><name pos:line="229" pos:column="15">expected</name><op:operator pos:line="229" pos:column="23">=</op:operator><name><name pos:line="229" pos:column="24">Department</name><op:operator pos:line="229" pos:column="34">.</op:operator><name pos:line="229" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="229" pos:column="66">.</op:operator><name pos:line="229" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="230" pos:column="9">public</specifier> <name pos:line="230" pos:column="16">void</name></type> <name pos:line="230" pos:column="21">testGetAllProfInADeptString4</name><parameter_list pos:line="230" pos:column="49">()</parameter_list> <throws pos:line="230" pos:column="52">throws <argument><expr><name><name pos:line="230" pos:column="59">Professor</name><op:operator pos:line="230" pos:column="68">.</op:operator><name pos:line="230" pos:column="69">ProfessorDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="101">Department</name><op:operator pos:line="230" pos:column="111">.</op:operator><name pos:line="230" pos:column="112">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="230" pos:column="144">{
		
		<decl_stmt><decl><type><name pos:line="232" pos:column="17">Department</name></type> <name pos:line="232" pos:column="28">d</name><init pos:line="232" pos:column="29">=<expr><op:operator pos:line="232" pos:column="30">new</op:operator> <call><name pos:line="232" pos:column="34">Department</name><argument_list pos:line="232" pos:column="44">(<argument><expr><lit:literal type="null" pos:line="232" pos:column="45">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="233" pos:column="17">ArrayList</name><argument_list pos:line="233" pos:column="26">&lt;<argument><name pos:line="233" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="233" pos:column="38">check</name><init pos:line="233" pos:column="43">=<expr><call><name><name pos:line="233" pos:column="44">Professor</name><op:operator pos:line="233" pos:column="53">.</op:operator><name pos:line="233" pos:column="54">getAllProfInADept</name></name><argument_list pos:line="233" pos:column="71">(<argument><expr><call><name><name pos:line="233" pos:column="72">d</name><op:operator pos:line="233" pos:column="73">.</op:operator><name pos:line="233" pos:column="74">getDepartmentName</name></name><argument_list pos:line="233" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="234" pos:column="17">assertNull</name><argument_list pos:line="234" pos:column="27">(<argument><expr><name pos:line="234" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="237" pos:column="9">@<name pos:line="237" pos:column="10">Test</name></annotation>
	<specifier pos:line="238" pos:column="9">public</specifier> <name pos:line="238" pos:column="16">void</name></type> <name pos:line="238" pos:column="21">testGetAllProf</name><parameter_list pos:line="238" pos:column="35">()</parameter_list> <block pos:line="238" pos:column="38">{
		
		<decl_stmt><decl><type><name><name pos:line="240" pos:column="17">ArrayList</name><argument_list pos:line="240" pos:column="26">&lt;<argument><name pos:line="240" pos:column="27">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="240" pos:column="38">check</name><init pos:line="240" pos:column="43">=<expr><call><name><name pos:line="240" pos:column="44">Professor</name><op:operator pos:line="240" pos:column="53">.</op:operator><name pos:line="240" pos:column="54">getAllProf</name></name><argument_list pos:line="240" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="241" pos:column="17">assertNotNull</name><argument_list pos:line="241" pos:column="30">(<argument><expr><name pos:line="241" pos:column="31">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="244" pos:column="9">@<name pos:line="244" pos:column="10">Test</name></annotation>
	<specifier pos:line="245" pos:column="9">public</specifier> <name pos:line="245" pos:column="16">void</name></type> <name pos:line="245" pos:column="21">testUpdateProfUserName1</name><parameter_list pos:line="245" pos:column="44">()</parameter_list> <block pos:line="245" pos:column="47">{
		
		
		<decl_stmt><decl><type><name pos:line="248" pos:column="17">Professor</name></type> <name pos:line="248" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="249" pos:column="17">try <block pos:line="249" pos:column="21">{
			<expr_stmt><expr><name pos:line="250" pos:column="25">p</name> <op:operator pos:line="250" pos:column="27">=</op:operator> <op:operator pos:line="250" pos:column="29">new</op:operator> <call><name pos:line="250" pos:column="33">Professor</name><argument_list pos:line="250" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="43">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="251" pos:column="25">boolean</name></type> <name pos:line="251" pos:column="33">check</name><init pos:line="251" pos:column="38">=<expr><call><name><name pos:line="251" pos:column="39">p</name><op:operator pos:line="251" pos:column="40">.</op:operator><name pos:line="251" pos:column="41">updateProfUserName</name></name><argument_list pos:line="251" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="251" pos:column="60">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="252" pos:column="25">assertTrue</name><argument_list pos:line="252" pos:column="35">(<argument><expr><name pos:line="252" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="253" pos:column="19">catch <parameter_list pos:line="253" pos:column="25">(<param><decl><type><name><name pos:line="253" pos:column="26">Student</name><op:operator pos:line="253" pos:column="33">.</op:operator><name pos:line="253" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="253" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="253" pos:column="59">{
			<comment type="line" pos:line="254" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="255" pos:column="25">e</name><op:operator pos:line="255" pos:column="26">.</op:operator><name pos:line="255" pos:column="27">printStackTrace</name></name><argument_list pos:line="255" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="256" pos:column="19">catch <parameter_list pos:line="256" pos:column="25">(<param><decl><type><name><name pos:line="256" pos:column="26">People</name><op:operator pos:line="256" pos:column="32">.</op:operator><name pos:line="256" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="256" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="256" pos:column="64">{
			<comment type="line" pos:line="257" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="258" pos:column="25">e</name><op:operator pos:line="258" pos:column="26">.</op:operator><name pos:line="258" pos:column="27">printStackTrace</name></name><argument_list pos:line="258" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="263" pos:column="9">@<name pos:line="263" pos:column="10">Test</name></annotation>
	<specifier pos:line="264" pos:column="9">public</specifier> <name pos:line="264" pos:column="16">void</name></type> <name pos:line="264" pos:column="21">testUpdateProfUserName2</name><parameter_list pos:line="264" pos:column="44">()</parameter_list> <block pos:line="264" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="266" pos:column="17">Professor</name></type> <name pos:line="266" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="267" pos:column="17">try <block pos:line="267" pos:column="21">{
			<expr_stmt><expr><name pos:line="268" pos:column="25">p</name> <op:operator pos:line="268" pos:column="27">=</op:operator> <op:operator pos:line="268" pos:column="29">new</op:operator> <call><name pos:line="268" pos:column="33">Professor</name><argument_list pos:line="268" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="268" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="269" pos:column="25">boolean</name></type> <name pos:line="269" pos:column="33">check</name><init pos:line="269" pos:column="38">=<expr><call><name><name pos:line="269" pos:column="39">p</name><op:operator pos:line="269" pos:column="40">.</op:operator><name pos:line="269" pos:column="41">updateProfUserName</name></name><argument_list pos:line="269" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="60">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="270" pos:column="25">assertFalse</name><argument_list pos:line="270" pos:column="36">(<argument><expr><name pos:line="270" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="271" pos:column="19">catch <parameter_list pos:line="271" pos:column="25">(<param><decl><type><name><name pos:line="271" pos:column="26">Student</name><op:operator pos:line="271" pos:column="33">.</op:operator><name pos:line="271" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="271" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="59">{
			<comment type="line" pos:line="272" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="273" pos:column="25">e</name><op:operator pos:line="273" pos:column="26">.</op:operator><name pos:line="273" pos:column="27">printStackTrace</name></name><argument_list pos:line="273" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="274" pos:column="19">catch <parameter_list pos:line="274" pos:column="25">(<param><decl><type><name><name pos:line="274" pos:column="26">People</name><op:operator pos:line="274" pos:column="32">.</op:operator><name pos:line="274" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="274" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="274" pos:column="64">{
			<comment type="line" pos:line="275" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="276" pos:column="25">e</name><op:operator pos:line="276" pos:column="26">.</op:operator><name pos:line="276" pos:column="27">printStackTrace</name></name><argument_list pos:line="276" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="280" pos:column="9">@<name pos:line="280" pos:column="10">Test</name></annotation>
	<specifier pos:line="281" pos:column="9">public</specifier> <name pos:line="281" pos:column="16">void</name></type> <name pos:line="281" pos:column="21">testUpdateProfUserName3</name><parameter_list pos:line="281" pos:column="44">()</parameter_list> <block pos:line="281" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="283" pos:column="17">Professor</name></type> <name pos:line="283" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="284" pos:column="17">try <block pos:line="284" pos:column="21">{
			<expr_stmt><expr><name pos:line="285" pos:column="25">p</name> <op:operator pos:line="285" pos:column="27">=</op:operator> <op:operator pos:line="285" pos:column="29">new</op:operator> <call><name pos:line="285" pos:column="33">Professor</name><argument_list pos:line="285" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="285" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="286" pos:column="25">boolean</name></type> <name pos:line="286" pos:column="33">check</name><init pos:line="286" pos:column="38">=<expr><call><name><name pos:line="286" pos:column="39">p</name><op:operator pos:line="286" pos:column="40">.</op:operator><name pos:line="286" pos:column="41">updateProfUserName</name></name><argument_list pos:line="286" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="286" pos:column="60">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="287" pos:column="25">assertFalse</name><argument_list pos:line="287" pos:column="36">(<argument><expr><name pos:line="287" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="288" pos:column="19">catch <parameter_list pos:line="288" pos:column="25">(<param><decl><type><name><name pos:line="288" pos:column="26">Student</name><op:operator pos:line="288" pos:column="33">.</op:operator><name pos:line="288" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="288" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="288" pos:column="59">{
			<comment type="line" pos:line="289" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="290" pos:column="25">e</name><op:operator pos:line="290" pos:column="26">.</op:operator><name pos:line="290" pos:column="27">printStackTrace</name></name><argument_list pos:line="290" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="291" pos:column="19">catch <parameter_list pos:line="291" pos:column="25">(<param><decl><type><name><name pos:line="291" pos:column="26">People</name><op:operator pos:line="291" pos:column="32">.</op:operator><name pos:line="291" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="291" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="291" pos:column="64">{
			<comment type="line" pos:line="292" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="293" pos:column="25">e</name><op:operator pos:line="293" pos:column="26">.</op:operator><name pos:line="293" pos:column="27">printStackTrace</name></name><argument_list pos:line="293" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="297" pos:column="9">@<name pos:line="297" pos:column="10">Test</name></annotation>
	<specifier pos:line="298" pos:column="9">public</specifier> <name pos:line="298" pos:column="16">void</name></type> <name pos:line="298" pos:column="21">testUpdateProfUserName4</name><parameter_list pos:line="298" pos:column="44">()</parameter_list> <block pos:line="298" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="300" pos:column="17">Professor</name></type> <name pos:line="300" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="301" pos:column="17">try <block pos:line="301" pos:column="21">{
			<expr_stmt><expr><name pos:line="302" pos:column="25">p</name> <op:operator pos:line="302" pos:column="27">=</op:operator> <op:operator pos:line="302" pos:column="29">new</op:operator> <call><name pos:line="302" pos:column="33">Professor</name><argument_list pos:line="302" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="302" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="303" pos:column="25">boolean</name></type> <name pos:line="303" pos:column="33">check</name><init pos:line="303" pos:column="38">=<expr><call><name><name pos:line="303" pos:column="39">p</name><op:operator pos:line="303" pos:column="40">.</op:operator><name pos:line="303" pos:column="41">updateProfUserName</name></name><argument_list pos:line="303" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="303" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="304" pos:column="25">assertFalse</name><argument_list pos:line="304" pos:column="36">(<argument><expr><name pos:line="304" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="305" pos:column="19">catch <parameter_list pos:line="305" pos:column="25">(<param><decl><type><name><name pos:line="305" pos:column="26">Student</name><op:operator pos:line="305" pos:column="33">.</op:operator><name pos:line="305" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="305" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="59">{
			<comment type="line" pos:line="306" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="307" pos:column="25">e</name><op:operator pos:line="307" pos:column="26">.</op:operator><name pos:line="307" pos:column="27">printStackTrace</name></name><argument_list pos:line="307" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="308" pos:column="19">catch <parameter_list pos:line="308" pos:column="25">(<param><decl><type><name><name pos:line="308" pos:column="26">People</name><op:operator pos:line="308" pos:column="32">.</op:operator><name pos:line="308" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="308" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="308" pos:column="64">{
			<comment type="line" pos:line="309" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="310" pos:column="25">e</name><op:operator pos:line="310" pos:column="26">.</op:operator><name pos:line="310" pos:column="27">printStackTrace</name></name><argument_list pos:line="310" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="315" pos:column="9">@<name pos:line="315" pos:column="10">Test</name></annotation>
	<specifier pos:line="316" pos:column="9">public</specifier> <name pos:line="316" pos:column="16">void</name></type> <name pos:line="316" pos:column="21">testUpdateProfUserName5</name><parameter_list pos:line="316" pos:column="44">()</parameter_list> <block pos:line="316" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="318" pos:column="17">Professor</name></type> <name pos:line="318" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="319" pos:column="17">try <block pos:line="319" pos:column="21">{
			<expr_stmt><expr><name pos:line="320" pos:column="25">p</name> <op:operator pos:line="320" pos:column="27">=</op:operator> <op:operator pos:line="320" pos:column="29">new</op:operator> <call><name pos:line="320" pos:column="33">Professor</name><argument_list pos:line="320" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="320" pos:column="43">582</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="321" pos:column="25">boolean</name></type> <name pos:line="321" pos:column="33">check</name><init pos:line="321" pos:column="38">=<expr><call><name><name pos:line="321" pos:column="39">p</name><op:operator pos:line="321" pos:column="40">.</op:operator><name pos:line="321" pos:column="41">updateProfUserName</name></name><argument_list pos:line="321" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="322" pos:column="25">assertFalse</name><argument_list pos:line="322" pos:column="36">(<argument><expr><name pos:line="322" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="323" pos:column="19">catch <parameter_list pos:line="323" pos:column="25">(<param><decl><type><name><name pos:line="323" pos:column="26">Student</name><op:operator pos:line="323" pos:column="33">.</op:operator><name pos:line="323" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="323" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="323" pos:column="59">{
			<comment type="line" pos:line="324" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="325" pos:column="25">e</name><op:operator pos:line="325" pos:column="26">.</op:operator><name pos:line="325" pos:column="27">printStackTrace</name></name><argument_list pos:line="325" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="326" pos:column="19">catch <parameter_list pos:line="326" pos:column="25">(<param><decl><type><name><name pos:line="326" pos:column="26">People</name><op:operator pos:line="326" pos:column="32">.</op:operator><name pos:line="326" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="326" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="326" pos:column="64">{
			<comment type="line" pos:line="327" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="328" pos:column="25">e</name><op:operator pos:line="328" pos:column="26">.</op:operator><name pos:line="328" pos:column="27">printStackTrace</name></name><argument_list pos:line="328" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="332" pos:column="9">@<name pos:line="332" pos:column="10">Test</name></annotation>
	<specifier pos:line="333" pos:column="9">public</specifier> <name pos:line="333" pos:column="16">void</name></type> <name pos:line="333" pos:column="21">testUpdateProfUserName6</name><parameter_list pos:line="333" pos:column="44">()</parameter_list> <block pos:line="333" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="335" pos:column="17">Professor</name></type> <name pos:line="335" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="336" pos:column="17">try <block pos:line="336" pos:column="21">{
			<expr_stmt><expr><name pos:line="337" pos:column="25">p</name> <op:operator pos:line="337" pos:column="27">=</op:operator> <op:operator pos:line="337" pos:column="29">new</op:operator> <call><name pos:line="337" pos:column="33">Professor</name><argument_list pos:line="337" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="337" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="338" pos:column="25">boolean</name></type> <name pos:line="338" pos:column="33">check</name><init pos:line="338" pos:column="38">=<expr><call><name><name pos:line="338" pos:column="39">p</name><op:operator pos:line="338" pos:column="40">.</op:operator><name pos:line="338" pos:column="41">updateProfUserName</name></name><argument_list pos:line="338" pos:column="59">(<argument><expr><lit:literal type="null" pos:line="338" pos:column="60">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="339" pos:column="25">assertFalse</name><argument_list pos:line="339" pos:column="36">(<argument><expr><name pos:line="339" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="340" pos:column="19">catch <parameter_list pos:line="340" pos:column="25">(<param><decl><type><name><name pos:line="340" pos:column="26">Student</name><op:operator pos:line="340" pos:column="33">.</op:operator><name pos:line="340" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="340" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="340" pos:column="59">{
			<comment type="line" pos:line="341" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="342" pos:column="25">e</name><op:operator pos:line="342" pos:column="26">.</op:operator><name pos:line="342" pos:column="27">printStackTrace</name></name><argument_list pos:line="342" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="343" pos:column="19">catch <parameter_list pos:line="343" pos:column="25">(<param><decl><type><name><name pos:line="343" pos:column="26">People</name><op:operator pos:line="343" pos:column="32">.</op:operator><name pos:line="343" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="343" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="343" pos:column="64">{
			<comment type="line" pos:line="344" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="345" pos:column="25">e</name><op:operator pos:line="345" pos:column="26">.</op:operator><name pos:line="345" pos:column="27">printStackTrace</name></name><argument_list pos:line="345" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="349" pos:column="9">@<name pos:line="349" pos:column="10">Test</name></annotation>
	<specifier pos:line="350" pos:column="9">public</specifier> <name pos:line="350" pos:column="16">void</name></type> <name pos:line="350" pos:column="21">testUpdateProfUserName7</name><parameter_list pos:line="350" pos:column="44">()</parameter_list> <block pos:line="350" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="352" pos:column="17">Professor</name></type> <name pos:line="352" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="353" pos:column="17">try <block pos:line="353" pos:column="21">{
			<expr_stmt><expr><name pos:line="354" pos:column="25">p</name> <op:operator pos:line="354" pos:column="27">=</op:operator> <op:operator pos:line="354" pos:column="29">new</op:operator> <call><name pos:line="354" pos:column="33">Professor</name><argument_list pos:line="354" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="354" pos:column="43">582</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="355" pos:column="25">boolean</name></type> <name pos:line="355" pos:column="33">check</name><init pos:line="355" pos:column="38">=<expr><call><name><name pos:line="355" pos:column="39">p</name><op:operator pos:line="355" pos:column="40">.</op:operator><name pos:line="355" pos:column="41">updateProfUserName</name></name><argument_list pos:line="355" pos:column="59">(<argument><expr><lit:literal type="null" pos:line="355" pos:column="60">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="356" pos:column="25">assertFalse</name><argument_list pos:line="356" pos:column="36">(<argument><expr><name pos:line="356" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="357" pos:column="19">catch <parameter_list pos:line="357" pos:column="25">(<param><decl><type><name><name pos:line="357" pos:column="26">Student</name><op:operator pos:line="357" pos:column="33">.</op:operator><name pos:line="357" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="357" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="357" pos:column="59">{
			<comment type="line" pos:line="358" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="359" pos:column="25">e</name><op:operator pos:line="359" pos:column="26">.</op:operator><name pos:line="359" pos:column="27">printStackTrace</name></name><argument_list pos:line="359" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="360" pos:column="19">catch <parameter_list pos:line="360" pos:column="25">(<param><decl><type><name><name pos:line="360" pos:column="26">People</name><op:operator pos:line="360" pos:column="32">.</op:operator><name pos:line="360" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="360" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="360" pos:column="64">{
			<comment type="line" pos:line="361" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="362" pos:column="25">e</name><op:operator pos:line="362" pos:column="26">.</op:operator><name pos:line="362" pos:column="27">printStackTrace</name></name><argument_list pos:line="362" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="366" pos:column="9">@<name pos:line="366" pos:column="10">Test</name></annotation>
	<specifier pos:line="367" pos:column="9">public</specifier> <name pos:line="367" pos:column="16">void</name></type> <name pos:line="367" pos:column="21">testUpdateProfUserName8</name><parameter_list pos:line="367" pos:column="44">()</parameter_list> <block pos:line="367" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="369" pos:column="17">Professor</name></type> <name pos:line="369" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="370" pos:column="17">try <block pos:line="370" pos:column="21">{
			<expr_stmt><expr><name pos:line="371" pos:column="25">p</name> <op:operator pos:line="371" pos:column="27">=</op:operator> <op:operator pos:line="371" pos:column="29">new</op:operator> <call><name pos:line="371" pos:column="33">Professor</name><argument_list pos:line="371" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="371" pos:column="43">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="372" pos:column="25">boolean</name></type> <name pos:line="372" pos:column="33">check</name><init pos:line="372" pos:column="38">=<expr><call><name><name pos:line="372" pos:column="39">p</name><op:operator pos:line="372" pos:column="40">.</op:operator><name pos:line="372" pos:column="41">updateProfUserName</name></name><argument_list pos:line="372" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="60">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="373" pos:column="25">assertFalse</name><argument_list pos:line="373" pos:column="36">(<argument><expr><name pos:line="373" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="374" pos:column="19">catch <parameter_list pos:line="374" pos:column="25">(<param><decl><type><name><name pos:line="374" pos:column="26">Student</name><op:operator pos:line="374" pos:column="33">.</op:operator><name pos:line="374" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="374" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="374" pos:column="59">{
			<comment type="line" pos:line="375" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="376" pos:column="25">e</name><op:operator pos:line="376" pos:column="26">.</op:operator><name pos:line="376" pos:column="27">printStackTrace</name></name><argument_list pos:line="376" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="377" pos:column="19">catch <parameter_list pos:line="377" pos:column="25">(<param><decl><type><name><name pos:line="377" pos:column="26">People</name><op:operator pos:line="377" pos:column="32">.</op:operator><name pos:line="377" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="377" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="377" pos:column="64">{
			<comment type="line" pos:line="378" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="379" pos:column="25">e</name><op:operator pos:line="379" pos:column="26">.</op:operator><name pos:line="379" pos:column="27">printStackTrace</name></name><argument_list pos:line="379" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="383" pos:column="9">@<name pos:line="383" pos:column="10">Test</name></annotation>
	<specifier pos:line="384" pos:column="9">public</specifier> <name pos:line="384" pos:column="16">void</name></type> <name pos:line="384" pos:column="21">testUpdateProfUserName9</name><parameter_list pos:line="384" pos:column="44">()</parameter_list> <block pos:line="384" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="386" pos:column="17">Professor</name></type> <name pos:line="386" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="387" pos:column="17">try <block pos:line="387" pos:column="21">{
			<expr_stmt><expr><name pos:line="388" pos:column="25">p</name> <op:operator pos:line="388" pos:column="27">=</op:operator> <op:operator pos:line="388" pos:column="29">new</op:operator> <call><name pos:line="388" pos:column="33">Professor</name><argument_list pos:line="388" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="388" pos:column="43">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="389" pos:column="25">boolean</name></type> <name pos:line="389" pos:column="33">check</name><init pos:line="389" pos:column="38">=<expr><call><name><name pos:line="389" pos:column="39">p</name><op:operator pos:line="389" pos:column="40">.</op:operator><name pos:line="389" pos:column="41">updateProfUserName</name></name><argument_list pos:line="389" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="389" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="390" pos:column="25">assertFalse</name><argument_list pos:line="390" pos:column="36">(<argument><expr><name pos:line="390" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="391" pos:column="19">catch <parameter_list pos:line="391" pos:column="25">(<param><decl><type><name><name pos:line="391" pos:column="26">Student</name><op:operator pos:line="391" pos:column="33">.</op:operator><name pos:line="391" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="391" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="391" pos:column="59">{
			<comment type="line" pos:line="392" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="393" pos:column="25">e</name><op:operator pos:line="393" pos:column="26">.</op:operator><name pos:line="393" pos:column="27">printStackTrace</name></name><argument_list pos:line="393" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="394" pos:column="19">catch <parameter_list pos:line="394" pos:column="25">(<param><decl><type><name><name pos:line="394" pos:column="26">People</name><op:operator pos:line="394" pos:column="32">.</op:operator><name pos:line="394" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="394" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="394" pos:column="64">{
			<comment type="line" pos:line="395" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="396" pos:column="25">e</name><op:operator pos:line="396" pos:column="26">.</op:operator><name pos:line="396" pos:column="27">printStackTrace</name></name><argument_list pos:line="396" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="400" pos:column="9">@<name pos:line="400" pos:column="10">Test</name></annotation>
	<specifier pos:line="401" pos:column="9">public</specifier> <name pos:line="401" pos:column="16">void</name></type> <name pos:line="401" pos:column="21">testUpdateProfUserName10</name><parameter_list pos:line="401" pos:column="45">()</parameter_list> <block pos:line="401" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="403" pos:column="17">Professor</name></type> <name pos:line="403" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="404" pos:column="17">try <block pos:line="404" pos:column="21">{
			<expr_stmt><expr><name pos:line="405" pos:column="25">p</name> <op:operator pos:line="405" pos:column="27">=</op:operator> <op:operator pos:line="405" pos:column="29">new</op:operator> <call><name pos:line="405" pos:column="33">Professor</name><argument_list pos:line="405" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="405" pos:column="43">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="406" pos:column="25">boolean</name></type> <name pos:line="406" pos:column="33">check</name><init pos:line="406" pos:column="38">=<expr><call><name><name pos:line="406" pos:column="39">p</name><op:operator pos:line="406" pos:column="40">.</op:operator><name pos:line="406" pos:column="41">updateProfUserName</name></name><argument_list pos:line="406" pos:column="59">(<argument><expr><lit:literal type="null" pos:line="406" pos:column="60">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="407" pos:column="25">assertFalse</name><argument_list pos:line="407" pos:column="36">(<argument><expr><name pos:line="407" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="408" pos:column="19">catch <parameter_list pos:line="408" pos:column="25">(<param><decl><type><name><name pos:line="408" pos:column="26">Student</name><op:operator pos:line="408" pos:column="33">.</op:operator><name pos:line="408" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="408" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="408" pos:column="59">{
			<comment type="line" pos:line="409" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="410" pos:column="25">e</name><op:operator pos:line="410" pos:column="26">.</op:operator><name pos:line="410" pos:column="27">printStackTrace</name></name><argument_list pos:line="410" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="411" pos:column="19">catch <parameter_list pos:line="411" pos:column="25">(<param><decl><type><name><name pos:line="411" pos:column="26">People</name><op:operator pos:line="411" pos:column="32">.</op:operator><name pos:line="411" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="411" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="411" pos:column="64">{
			<comment type="line" pos:line="412" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="413" pos:column="25">e</name><op:operator pos:line="413" pos:column="26">.</op:operator><name pos:line="413" pos:column="27">printStackTrace</name></name><argument_list pos:line="413" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	
	<function><type><annotation pos:line="418" pos:column="9">@<name pos:line="418" pos:column="10">Test</name></annotation>
	<specifier pos:line="419" pos:column="9">public</specifier> <name pos:line="419" pos:column="16">void</name></type> <name pos:line="419" pos:column="21">testUpdateProfName1</name><parameter_list pos:line="419" pos:column="40">()</parameter_list> <block pos:line="419" pos:column="43">{
		
		
		<decl_stmt><decl><type><name pos:line="422" pos:column="17">Professor</name></type> <name pos:line="422" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="423" pos:column="17">try <block pos:line="423" pos:column="21">{
			<expr_stmt><expr><name pos:line="424" pos:column="25">p</name> <op:operator pos:line="424" pos:column="27">=</op:operator> <op:operator pos:line="424" pos:column="29">new</op:operator> <call><name pos:line="424" pos:column="33">Professor</name><argument_list pos:line="424" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="424" pos:column="43">592</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="425" pos:column="25">boolean</name></type> <name pos:line="425" pos:column="33">check</name><init pos:line="425" pos:column="38">=<expr><call><name><name pos:line="425" pos:column="39">p</name><op:operator pos:line="425" pos:column="40">.</op:operator><name pos:line="425" pos:column="41">updateProfName</name></name><argument_list pos:line="425" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="425" pos:column="56">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="426" pos:column="25">assertTrue</name><argument_list pos:line="426" pos:column="35">(<argument><expr><name pos:line="426" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="427" pos:column="19">catch <parameter_list pos:line="427" pos:column="25">(<param><decl><type><name><name pos:line="427" pos:column="26">Student</name><op:operator pos:line="427" pos:column="33">.</op:operator><name pos:line="427" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="427" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="427" pos:column="59">{
			<comment type="line" pos:line="428" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="429" pos:column="25">e</name><op:operator pos:line="429" pos:column="26">.</op:operator><name pos:line="429" pos:column="27">printStackTrace</name></name><argument_list pos:line="429" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="430" pos:column="19">catch <parameter_list pos:line="430" pos:column="25">(<param><decl><type><name><name pos:line="430" pos:column="26">People</name><op:operator pos:line="430" pos:column="32">.</op:operator><name pos:line="430" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="430" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="64">{
			<comment type="line" pos:line="431" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="432" pos:column="25">e</name><op:operator pos:line="432" pos:column="26">.</op:operator><name pos:line="432" pos:column="27">printStackTrace</name></name><argument_list pos:line="432" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="437" pos:column="9">@<name pos:line="437" pos:column="10">Test</name></annotation>
	<specifier pos:line="438" pos:column="9">public</specifier> <name pos:line="438" pos:column="16">void</name></type> <name pos:line="438" pos:column="21">testUpdateProfName2</name><parameter_list pos:line="438" pos:column="40">()</parameter_list> <block pos:line="438" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="440" pos:column="17">Professor</name></type> <name pos:line="440" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="441" pos:column="17">try <block pos:line="441" pos:column="21">{
			<expr_stmt><expr><name pos:line="442" pos:column="25">p</name> <op:operator pos:line="442" pos:column="27">=</op:operator> <op:operator pos:line="442" pos:column="29">new</op:operator> <call><name pos:line="442" pos:column="33">Professor</name><argument_list pos:line="442" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="442" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="443" pos:column="25">boolean</name></type> <name pos:line="443" pos:column="33">check</name><init pos:line="443" pos:column="38">=<expr><call><name><name pos:line="443" pos:column="39">p</name><op:operator pos:line="443" pos:column="40">.</op:operator><name pos:line="443" pos:column="41">updateProfName</name></name><argument_list pos:line="443" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="56">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="444" pos:column="25">assertFalse</name><argument_list pos:line="444" pos:column="36">(<argument><expr><name pos:line="444" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="445" pos:column="19">catch <parameter_list pos:line="445" pos:column="25">(<param><decl><type><name><name pos:line="445" pos:column="26">Student</name><op:operator pos:line="445" pos:column="33">.</op:operator><name pos:line="445" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="445" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="445" pos:column="59">{
			<comment type="line" pos:line="446" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="447" pos:column="25">e</name><op:operator pos:line="447" pos:column="26">.</op:operator><name pos:line="447" pos:column="27">printStackTrace</name></name><argument_list pos:line="447" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="448" pos:column="19">catch <parameter_list pos:line="448" pos:column="25">(<param><decl><type><name><name pos:line="448" pos:column="26">People</name><op:operator pos:line="448" pos:column="32">.</op:operator><name pos:line="448" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="448" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="448" pos:column="64">{
			<comment type="line" pos:line="449" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="450" pos:column="25">e</name><op:operator pos:line="450" pos:column="26">.</op:operator><name pos:line="450" pos:column="27">printStackTrace</name></name><argument_list pos:line="450" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="454" pos:column="9">@<name pos:line="454" pos:column="10">Test</name></annotation>
	<specifier pos:line="455" pos:column="9">public</specifier> <name pos:line="455" pos:column="16">void</name></type> <name pos:line="455" pos:column="21">testUpdateProfName3</name><parameter_list pos:line="455" pos:column="40">()</parameter_list> <block pos:line="455" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="457" pos:column="17">Professor</name></type> <name pos:line="457" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="458" pos:column="17">try <block pos:line="458" pos:column="21">{
			<expr_stmt><expr><name pos:line="459" pos:column="25">p</name> <op:operator pos:line="459" pos:column="27">=</op:operator> <op:operator pos:line="459" pos:column="29">new</op:operator> <call><name pos:line="459" pos:column="33">Professor</name><argument_list pos:line="459" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="459" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="460" pos:column="25">boolean</name></type> <name pos:line="460" pos:column="33">check</name><init pos:line="460" pos:column="38">=<expr><call><name><name pos:line="460" pos:column="39">p</name><op:operator pos:line="460" pos:column="40">.</op:operator><name pos:line="460" pos:column="41">updateProfName</name></name><argument_list pos:line="460" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="460" pos:column="56">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="461" pos:column="25">assertFalse</name><argument_list pos:line="461" pos:column="36">(<argument><expr><name pos:line="461" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="462" pos:column="19">catch <parameter_list pos:line="462" pos:column="25">(<param><decl><type><name><name pos:line="462" pos:column="26">Student</name><op:operator pos:line="462" pos:column="33">.</op:operator><name pos:line="462" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="462" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="462" pos:column="59">{
			<comment type="line" pos:line="463" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="464" pos:column="25">e</name><op:operator pos:line="464" pos:column="26">.</op:operator><name pos:line="464" pos:column="27">printStackTrace</name></name><argument_list pos:line="464" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="465" pos:column="19">catch <parameter_list pos:line="465" pos:column="25">(<param><decl><type><name><name pos:line="465" pos:column="26">People</name><op:operator pos:line="465" pos:column="32">.</op:operator><name pos:line="465" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="465" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="465" pos:column="64">{
			<comment type="line" pos:line="466" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="467" pos:column="25">e</name><op:operator pos:line="467" pos:column="26">.</op:operator><name pos:line="467" pos:column="27">printStackTrace</name></name><argument_list pos:line="467" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="471" pos:column="9">@<name pos:line="471" pos:column="10">Test</name></annotation>
	<specifier pos:line="472" pos:column="9">public</specifier> <name pos:line="472" pos:column="16">void</name></type> <name pos:line="472" pos:column="21">testUpdateProfName4</name><parameter_list pos:line="472" pos:column="40">()</parameter_list> <block pos:line="472" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="474" pos:column="17">Professor</name></type> <name pos:line="474" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="475" pos:column="17">try <block pos:line="475" pos:column="21">{
			<expr_stmt><expr><name pos:line="476" pos:column="25">p</name> <op:operator pos:line="476" pos:column="27">=</op:operator> <op:operator pos:line="476" pos:column="29">new</op:operator> <call><name pos:line="476" pos:column="33">Professor</name><argument_list pos:line="476" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="476" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="477" pos:column="25">boolean</name></type> <name pos:line="477" pos:column="33">check</name><init pos:line="477" pos:column="38">=<expr><call><name><name pos:line="477" pos:column="39">p</name><op:operator pos:line="477" pos:column="40">.</op:operator><name pos:line="477" pos:column="41">updateProfName</name></name><argument_list pos:line="477" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="477" pos:column="56">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="478" pos:column="25">assertFalse</name><argument_list pos:line="478" pos:column="36">(<argument><expr><name pos:line="478" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="479" pos:column="19">catch <parameter_list pos:line="479" pos:column="25">(<param><decl><type><name><name pos:line="479" pos:column="26">Student</name><op:operator pos:line="479" pos:column="33">.</op:operator><name pos:line="479" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="479" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="479" pos:column="59">{
			<comment type="line" pos:line="480" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="481" pos:column="25">e</name><op:operator pos:line="481" pos:column="26">.</op:operator><name pos:line="481" pos:column="27">printStackTrace</name></name><argument_list pos:line="481" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="482" pos:column="19">catch <parameter_list pos:line="482" pos:column="25">(<param><decl><type><name><name pos:line="482" pos:column="26">People</name><op:operator pos:line="482" pos:column="32">.</op:operator><name pos:line="482" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="482" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="482" pos:column="64">{
			<comment type="line" pos:line="483" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="484" pos:column="25">e</name><op:operator pos:line="484" pos:column="26">.</op:operator><name pos:line="484" pos:column="27">printStackTrace</name></name><argument_list pos:line="484" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	
	<function><type><annotation pos:line="489" pos:column="9">@<name pos:line="489" pos:column="10">Test</name></annotation>
	<specifier pos:line="490" pos:column="9">public</specifier> <name pos:line="490" pos:column="16">void</name></type> <name pos:line="490" pos:column="21">testUpdateProfName5</name><parameter_list pos:line="490" pos:column="40">()</parameter_list> <block pos:line="490" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="492" pos:column="17">Professor</name></type> <name pos:line="492" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="493" pos:column="17">try <block pos:line="493" pos:column="21">{
			<expr_stmt><expr><name pos:line="494" pos:column="25">p</name> <op:operator pos:line="494" pos:column="27">=</op:operator> <op:operator pos:line="494" pos:column="29">new</op:operator> <call><name pos:line="494" pos:column="33">Professor</name><argument_list pos:line="494" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="494" pos:column="43">582</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="495" pos:column="25">boolean</name></type> <name pos:line="495" pos:column="33">check</name><init pos:line="495" pos:column="38">=<expr><call><name><name pos:line="495" pos:column="39">p</name><op:operator pos:line="495" pos:column="40">.</op:operator><name pos:line="495" pos:column="41">updateProfName</name></name><argument_list pos:line="495" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="56">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="496" pos:column="25">assertFalse</name><argument_list pos:line="496" pos:column="36">(<argument><expr><name pos:line="496" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="497" pos:column="19">catch <parameter_list pos:line="497" pos:column="25">(<param><decl><type><name><name pos:line="497" pos:column="26">Student</name><op:operator pos:line="497" pos:column="33">.</op:operator><name pos:line="497" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="497" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="497" pos:column="59">{
			<comment type="line" pos:line="498" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="499" pos:column="25">e</name><op:operator pos:line="499" pos:column="26">.</op:operator><name pos:line="499" pos:column="27">printStackTrace</name></name><argument_list pos:line="499" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="500" pos:column="19">catch <parameter_list pos:line="500" pos:column="25">(<param><decl><type><name><name pos:line="500" pos:column="26">People</name><op:operator pos:line="500" pos:column="32">.</op:operator><name pos:line="500" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="500" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="500" pos:column="64">{
			<comment type="line" pos:line="501" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="502" pos:column="25">e</name><op:operator pos:line="502" pos:column="26">.</op:operator><name pos:line="502" pos:column="27">printStackTrace</name></name><argument_list pos:line="502" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="506" pos:column="9">@<name pos:line="506" pos:column="10">Test</name></annotation>
	<specifier pos:line="507" pos:column="9">public</specifier> <name pos:line="507" pos:column="16">void</name></type> <name pos:line="507" pos:column="21">testUpdateProfName6</name><parameter_list pos:line="507" pos:column="40">()</parameter_list> <block pos:line="507" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="509" pos:column="17">Professor</name></type> <name pos:line="509" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="510" pos:column="17">try <block pos:line="510" pos:column="21">{
			<expr_stmt><expr><name pos:line="511" pos:column="25">p</name> <op:operator pos:line="511" pos:column="27">=</op:operator> <op:operator pos:line="511" pos:column="29">new</op:operator> <call><name pos:line="511" pos:column="33">Professor</name><argument_list pos:line="511" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="511" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="512" pos:column="25">boolean</name></type> <name pos:line="512" pos:column="33">check</name><init pos:line="512" pos:column="38">=<expr><call><name><name pos:line="512" pos:column="39">p</name><op:operator pos:line="512" pos:column="40">.</op:operator><name pos:line="512" pos:column="41">updateProfName</name></name><argument_list pos:line="512" pos:column="55">(<argument><expr><lit:literal type="null" pos:line="512" pos:column="56">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="513" pos:column="25">assertFalse</name><argument_list pos:line="513" pos:column="36">(<argument><expr><name pos:line="513" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="514" pos:column="19">catch <parameter_list pos:line="514" pos:column="25">(<param><decl><type><name><name pos:line="514" pos:column="26">Student</name><op:operator pos:line="514" pos:column="33">.</op:operator><name pos:line="514" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="514" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="514" pos:column="59">{
			<comment type="line" pos:line="515" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="516" pos:column="25">e</name><op:operator pos:line="516" pos:column="26">.</op:operator><name pos:line="516" pos:column="27">printStackTrace</name></name><argument_list pos:line="516" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="517" pos:column="19">catch <parameter_list pos:line="517" pos:column="25">(<param><decl><type><name><name pos:line="517" pos:column="26">People</name><op:operator pos:line="517" pos:column="32">.</op:operator><name pos:line="517" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="517" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="517" pos:column="64">{
			<comment type="line" pos:line="518" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="519" pos:column="25">e</name><op:operator pos:line="519" pos:column="26">.</op:operator><name pos:line="519" pos:column="27">printStackTrace</name></name><argument_list pos:line="519" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="523" pos:column="9">@<name pos:line="523" pos:column="10">Test</name></annotation>
	<specifier pos:line="524" pos:column="9">public</specifier> <name pos:line="524" pos:column="16">void</name></type> <name pos:line="524" pos:column="21">testUpdateProfName7</name><parameter_list pos:line="524" pos:column="40">()</parameter_list> <block pos:line="524" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="526" pos:column="17">Professor</name></type> <name pos:line="526" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="527" pos:column="17">try <block pos:line="527" pos:column="21">{
			<expr_stmt><expr><name pos:line="528" pos:column="25">p</name> <op:operator pos:line="528" pos:column="27">=</op:operator> <op:operator pos:line="528" pos:column="29">new</op:operator> <call><name pos:line="528" pos:column="33">Professor</name><argument_list pos:line="528" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="528" pos:column="43">582</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="529" pos:column="25">boolean</name></type> <name pos:line="529" pos:column="33">check</name><init pos:line="529" pos:column="38">=<expr><call><name><name pos:line="529" pos:column="39">p</name><op:operator pos:line="529" pos:column="40">.</op:operator><name pos:line="529" pos:column="41">updateProfName</name></name><argument_list pos:line="529" pos:column="55">(<argument><expr><lit:literal type="null" pos:line="529" pos:column="56">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="530" pos:column="25">assertFalse</name><argument_list pos:line="530" pos:column="36">(<argument><expr><name pos:line="530" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="531" pos:column="19">catch <parameter_list pos:line="531" pos:column="25">(<param><decl><type><name><name pos:line="531" pos:column="26">Student</name><op:operator pos:line="531" pos:column="33">.</op:operator><name pos:line="531" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="531" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="531" pos:column="59">{
			<comment type="line" pos:line="532" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="533" pos:column="25">e</name><op:operator pos:line="533" pos:column="26">.</op:operator><name pos:line="533" pos:column="27">printStackTrace</name></name><argument_list pos:line="533" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="534" pos:column="19">catch <parameter_list pos:line="534" pos:column="25">(<param><decl><type><name><name pos:line="534" pos:column="26">People</name><op:operator pos:line="534" pos:column="32">.</op:operator><name pos:line="534" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="534" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="534" pos:column="64">{
			<comment type="line" pos:line="535" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="536" pos:column="25">e</name><op:operator pos:line="536" pos:column="26">.</op:operator><name pos:line="536" pos:column="27">printStackTrace</name></name><argument_list pos:line="536" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="540" pos:column="9">@<name pos:line="540" pos:column="10">Test</name></annotation>
	<specifier pos:line="541" pos:column="9">public</specifier> <name pos:line="541" pos:column="16">void</name></type> <name pos:line="541" pos:column="21">testUpdateProfName8</name><parameter_list pos:line="541" pos:column="40">()</parameter_list> <block pos:line="541" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="543" pos:column="17">Professor</name></type> <name pos:line="543" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="544" pos:column="17">try <block pos:line="544" pos:column="21">{
			<expr_stmt><expr><name pos:line="545" pos:column="25">p</name> <op:operator pos:line="545" pos:column="27">=</op:operator> <op:operator pos:line="545" pos:column="29">new</op:operator> <call><name pos:line="545" pos:column="33">Professor</name><argument_list pos:line="545" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="545" pos:column="43">10000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="546" pos:column="25">boolean</name></type> <name pos:line="546" pos:column="33">check</name><init pos:line="546" pos:column="38">=<expr><call><name><name pos:line="546" pos:column="39">p</name><op:operator pos:line="546" pos:column="40">.</op:operator><name pos:line="546" pos:column="41">updateProfName</name></name><argument_list pos:line="546" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="546" pos:column="56">"borri"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="547" pos:column="25">assertFalse</name><argument_list pos:line="547" pos:column="36">(<argument><expr><name pos:line="547" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="548" pos:column="19">catch <parameter_list pos:line="548" pos:column="25">(<param><decl><type><name><name pos:line="548" pos:column="26">Student</name><op:operator pos:line="548" pos:column="33">.</op:operator><name pos:line="548" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="548" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="548" pos:column="59">{
			<comment type="line" pos:line="549" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="550" pos:column="25">e</name><op:operator pos:line="550" pos:column="26">.</op:operator><name pos:line="550" pos:column="27">printStackTrace</name></name><argument_list pos:line="550" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="551" pos:column="19">catch <parameter_list pos:line="551" pos:column="25">(<param><decl><type><name><name pos:line="551" pos:column="26">People</name><op:operator pos:line="551" pos:column="32">.</op:operator><name pos:line="551" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="551" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="551" pos:column="64">{
			<comment type="line" pos:line="552" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="553" pos:column="25">e</name><op:operator pos:line="553" pos:column="26">.</op:operator><name pos:line="553" pos:column="27">printStackTrace</name></name><argument_list pos:line="553" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="557" pos:column="9">@<name pos:line="557" pos:column="10">Test</name></annotation>
	<specifier pos:line="558" pos:column="9">public</specifier> <name pos:line="558" pos:column="16">void</name></type> <name pos:line="558" pos:column="21">testUpdateProfName9</name><parameter_list pos:line="558" pos:column="40">()</parameter_list> <block pos:line="558" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="560" pos:column="17">Professor</name></type> <name pos:line="560" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="561" pos:column="17">try <block pos:line="561" pos:column="21">{
			<expr_stmt><expr><name pos:line="562" pos:column="25">p</name> <op:operator pos:line="562" pos:column="27">=</op:operator> <op:operator pos:line="562" pos:column="29">new</op:operator> <call><name pos:line="562" pos:column="33">Professor</name><argument_list pos:line="562" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="562" pos:column="43">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="563" pos:column="25">boolean</name></type> <name pos:line="563" pos:column="33">check</name><init pos:line="563" pos:column="38">=<expr><call><name><name pos:line="563" pos:column="39">p</name><op:operator pos:line="563" pos:column="40">.</op:operator><name pos:line="563" pos:column="41">updateProfName</name></name><argument_list pos:line="563" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="563" pos:column="56">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="564" pos:column="25">assertFalse</name><argument_list pos:line="564" pos:column="36">(<argument><expr><name pos:line="564" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="565" pos:column="19">catch <parameter_list pos:line="565" pos:column="25">(<param><decl><type><name><name pos:line="565" pos:column="26">Student</name><op:operator pos:line="565" pos:column="33">.</op:operator><name pos:line="565" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="565" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="565" pos:column="59">{
			<comment type="line" pos:line="566" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="567" pos:column="25">e</name><op:operator pos:line="567" pos:column="26">.</op:operator><name pos:line="567" pos:column="27">printStackTrace</name></name><argument_list pos:line="567" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="568" pos:column="19">catch <parameter_list pos:line="568" pos:column="25">(<param><decl><type><name><name pos:line="568" pos:column="26">People</name><op:operator pos:line="568" pos:column="32">.</op:operator><name pos:line="568" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="568" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="568" pos:column="64">{
			<comment type="line" pos:line="569" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="570" pos:column="25">e</name><op:operator pos:line="570" pos:column="26">.</op:operator><name pos:line="570" pos:column="27">printStackTrace</name></name><argument_list pos:line="570" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="574" pos:column="9">@<name pos:line="574" pos:column="10">Test</name></annotation>
	<specifier pos:line="575" pos:column="9">public</specifier> <name pos:line="575" pos:column="16">void</name></type> <name pos:line="575" pos:column="21">testUpdateProfName10</name><parameter_list pos:line="575" pos:column="41">()</parameter_list> <block pos:line="575" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="577" pos:column="17">Professor</name></type> <name pos:line="577" pos:column="27">p</name></decl>;</decl_stmt>
		<try pos:line="578" pos:column="17">try <block pos:line="578" pos:column="21">{
			<expr_stmt><expr><name pos:line="579" pos:column="25">p</name> <op:operator pos:line="579" pos:column="27">=</op:operator> <op:operator pos:line="579" pos:column="29">new</op:operator> <call><name pos:line="579" pos:column="33">Professor</name><argument_list pos:line="579" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="579" pos:column="43">272</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="580" pos:column="25">boolean</name></type> <name pos:line="580" pos:column="33">check</name><init pos:line="580" pos:column="38">=<expr><call><name><name pos:line="580" pos:column="39">p</name><op:operator pos:line="580" pos:column="40">.</op:operator><name pos:line="580" pos:column="41">updateProfName</name></name><argument_list pos:line="580" pos:column="55">(<argument><expr><lit:literal type="null" pos:line="580" pos:column="56">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="581" pos:column="25">assertFalse</name><argument_list pos:line="581" pos:column="36">(<argument><expr><name pos:line="581" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="582" pos:column="19">catch <parameter_list pos:line="582" pos:column="25">(<param><decl><type><name><name pos:line="582" pos:column="26">Student</name><op:operator pos:line="582" pos:column="33">.</op:operator><name pos:line="582" pos:column="34">AccessDeniedException</name></name></type> <name pos:line="582" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="582" pos:column="59">{
			<comment type="line" pos:line="583" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="584" pos:column="25">e</name><op:operator pos:line="584" pos:column="26">.</op:operator><name pos:line="584" pos:column="27">printStackTrace</name></name><argument_list pos:line="584" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="585" pos:column="19">catch <parameter_list pos:line="585" pos:column="25">(<param><decl><type><name><name pos:line="585" pos:column="26">People</name><op:operator pos:line="585" pos:column="32">.</op:operator><name pos:line="585" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="585" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="585" pos:column="64">{
			<comment type="line" pos:line="586" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="587" pos:column="25">e</name><op:operator pos:line="587" pos:column="26">.</op:operator><name pos:line="587" pos:column="27">printStackTrace</name></name><argument_list pos:line="587" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>


	<function><type><annotation pos:line="592" pos:column="9">@<name pos:line="592" pos:column="10">Test</name></annotation>
	<specifier pos:line="593" pos:column="9">public</specifier> <name pos:line="593" pos:column="16">void</name></type> <name pos:line="593" pos:column="21">testUpdateProfDept</name><parameter_list pos:line="593" pos:column="39">()</parameter_list> <throws pos:line="593" pos:column="42">throws <argument><expr><name><name pos:line="593" pos:column="49">Department</name><op:operator pos:line="593" pos:column="59">.</op:operator><name pos:line="593" pos:column="60">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="593" pos:column="93">Student</name><op:operator pos:line="593" pos:column="100">.</op:operator><name pos:line="593" pos:column="101">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="593" pos:column="124">People</name><op:operator pos:line="593" pos:column="130">.</op:operator><name pos:line="593" pos:column="131">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="593" pos:column="159">{
		
		<decl_stmt><decl><type><name pos:line="595" pos:column="17">Department</name></type> <name pos:line="595" pos:column="28">d</name><init pos:line="595" pos:column="29">=<expr><op:operator pos:line="595" pos:column="30">new</op:operator> <call><name pos:line="595" pos:column="34">Department</name><argument_list pos:line="595" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="595" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="596" pos:column="17">Professor</name></type> <name pos:line="596" pos:column="27">p</name><init pos:line="596" pos:column="28">=<expr><op:operator pos:line="596" pos:column="29">new</op:operator> <call><name pos:line="596" pos:column="33">Professor</name><argument_list pos:line="596" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="596" pos:column="43">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="597" pos:column="17">boolean</name></type> <name pos:line="597" pos:column="25">check</name><init pos:line="597" pos:column="30">=<expr><call><name><name pos:line="597" pos:column="31">p</name><op:operator pos:line="597" pos:column="32">.</op:operator><name pos:line="597" pos:column="33">updateProfDept</name></name><argument_list pos:line="597" pos:column="47">(<argument><expr><call><name><name pos:line="597" pos:column="48">d</name><op:operator pos:line="597" pos:column="49">.</op:operator><name pos:line="597" pos:column="50">getDepartmentID</name></name><argument_list pos:line="597" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="598" pos:column="17">assertTrue</name><argument_list pos:line="598" pos:column="27">(<argument><expr><name pos:line="598" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="601" pos:column="9">@<name pos:line="601" pos:column="10">Test</name><argument_list pos:line="601" pos:column="14">(<argument><expr><name pos:line="601" pos:column="15">expected</name><op:operator pos:line="601" pos:column="23">=</op:operator><name><name pos:line="601" pos:column="24">Department</name><op:operator pos:line="601" pos:column="34">.</op:operator><name pos:line="601" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="601" pos:column="66">.</op:operator><name pos:line="601" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="602" pos:column="9">public</specifier> <name pos:line="602" pos:column="16">void</name></type> <name pos:line="602" pos:column="21">testUpdateProfDept2</name><parameter_list pos:line="602" pos:column="40">()</parameter_list> <throws pos:line="602" pos:column="43">throws <argument><expr><name><name pos:line="602" pos:column="50">Department</name><op:operator pos:line="602" pos:column="60">.</op:operator><name pos:line="602" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="602" pos:column="94">Student</name><op:operator pos:line="602" pos:column="101">.</op:operator><name pos:line="602" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="602" pos:column="125">People</name><op:operator pos:line="602" pos:column="131">.</op:operator><name pos:line="602" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="602" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="604" pos:column="17">Department</name></type> <name pos:line="604" pos:column="28">d</name><init pos:line="604" pos:column="29">=<expr><op:operator pos:line="604" pos:column="30">new</op:operator> <call><name pos:line="604" pos:column="34">Department</name><argument_list pos:line="604" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="604" pos:column="45">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="605" pos:column="17">Professor</name></type> <name pos:line="605" pos:column="27">p</name><init pos:line="605" pos:column="28">=<expr><op:operator pos:line="605" pos:column="29">new</op:operator> <call><name pos:line="605" pos:column="33">Professor</name><argument_list pos:line="605" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="605" pos:column="43">592</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="606" pos:column="17">boolean</name></type> <name pos:line="606" pos:column="25">check</name><init pos:line="606" pos:column="30">=<expr><call><name><name pos:line="606" pos:column="31">p</name><op:operator pos:line="606" pos:column="32">.</op:operator><name pos:line="606" pos:column="33">updateProfDept</name></name><argument_list pos:line="606" pos:column="47">(<argument><expr><call><name><name pos:line="606" pos:column="48">d</name><op:operator pos:line="606" pos:column="49">.</op:operator><name pos:line="606" pos:column="50">getDepartmentID</name></name><argument_list pos:line="606" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="609" pos:column="9">@<name pos:line="609" pos:column="10">Test</name><argument_list pos:line="609" pos:column="14">(<argument><expr><name pos:line="609" pos:column="15">expected</name><op:operator pos:line="609" pos:column="23">=</op:operator><name><name pos:line="609" pos:column="24">People</name><op:operator pos:line="609" pos:column="30">.</op:operator><name pos:line="609" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="609" pos:column="58">.</op:operator><name pos:line="609" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="610" pos:column="9">public</specifier> <name pos:line="610" pos:column="16">void</name></type> <name pos:line="610" pos:column="21">testUpdateProfDept3</name><parameter_list pos:line="610" pos:column="40">()</parameter_list> <throws pos:line="610" pos:column="43">throws <argument><expr><name><name pos:line="610" pos:column="50">Department</name><op:operator pos:line="610" pos:column="60">.</op:operator><name pos:line="610" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="610" pos:column="94">Student</name><op:operator pos:line="610" pos:column="101">.</op:operator><name pos:line="610" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="610" pos:column="125">People</name><op:operator pos:line="610" pos:column="131">.</op:operator><name pos:line="610" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="610" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="612" pos:column="17">Department</name></type> <name pos:line="612" pos:column="28">d</name><init pos:line="612" pos:column="29">=<expr><op:operator pos:line="612" pos:column="30">new</op:operator> <call><name pos:line="612" pos:column="34">Department</name><argument_list pos:line="612" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="612" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="613" pos:column="17">Professor</name></type> <name pos:line="613" pos:column="27">p</name><init pos:line="613" pos:column="28">=<expr><op:operator pos:line="613" pos:column="29">new</op:operator> <call><name pos:line="613" pos:column="33">Professor</name><argument_list pos:line="613" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="613" pos:column="43">272</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="614" pos:column="17">boolean</name></type> <name pos:line="614" pos:column="25">check</name><init pos:line="614" pos:column="30">=<expr><call><name><name pos:line="614" pos:column="31">p</name><op:operator pos:line="614" pos:column="32">.</op:operator><name pos:line="614" pos:column="33">updateProfDept</name></name><argument_list pos:line="614" pos:column="47">(<argument><expr><call><name><name pos:line="614" pos:column="48">d</name><op:operator pos:line="614" pos:column="49">.</op:operator><name pos:line="614" pos:column="50">getDepartmentID</name></name><argument_list pos:line="614" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="617" pos:column="9">@<name pos:line="617" pos:column="10">Test</name><argument_list pos:line="617" pos:column="14">(<argument><expr><name pos:line="617" pos:column="15">expected</name><op:operator pos:line="617" pos:column="23">=</op:operator><name><name pos:line="617" pos:column="24">People</name><op:operator pos:line="617" pos:column="30">.</op:operator><name pos:line="617" pos:column="31">PersonDoesNotExistException</name><op:operator pos:line="617" pos:column="58">.</op:operator><name pos:line="617" pos:column="59">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="618" pos:column="9">public</specifier> <name pos:line="618" pos:column="16">void</name></type> <name pos:line="618" pos:column="21">testUpdateProfDept4</name><parameter_list pos:line="618" pos:column="40">()</parameter_list> <throws pos:line="618" pos:column="43">throws <argument><expr><name><name pos:line="618" pos:column="50">Department</name><op:operator pos:line="618" pos:column="60">.</op:operator><name pos:line="618" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="618" pos:column="94">Student</name><op:operator pos:line="618" pos:column="101">.</op:operator><name pos:line="618" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="618" pos:column="125">People</name><op:operator pos:line="618" pos:column="131">.</op:operator><name pos:line="618" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="618" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="620" pos:column="17">Department</name></type> <name pos:line="620" pos:column="28">d</name><init pos:line="620" pos:column="29">=<expr><op:operator pos:line="620" pos:column="30">new</op:operator> <call><name pos:line="620" pos:column="34">Department</name><argument_list pos:line="620" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="620" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="621" pos:column="17">Professor</name></type> <name pos:line="621" pos:column="27">p</name><init pos:line="621" pos:column="28">=<expr><op:operator pos:line="621" pos:column="29">new</op:operator> <call><name pos:line="621" pos:column="33">Professor</name><argument_list pos:line="621" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="621" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="622" pos:column="17">boolean</name></type> <name pos:line="622" pos:column="25">check</name><init pos:line="622" pos:column="30">=<expr><call><name><name pos:line="622" pos:column="31">p</name><op:operator pos:line="622" pos:column="32">.</op:operator><name pos:line="622" pos:column="33">updateProfDept</name></name><argument_list pos:line="622" pos:column="47">(<argument><expr><call><name><name pos:line="622" pos:column="48">d</name><op:operator pos:line="622" pos:column="49">.</op:operator><name pos:line="622" pos:column="50">getDepartmentID</name></name><argument_list pos:line="622" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="625" pos:column="9">@<name pos:line="625" pos:column="10">Test</name><argument_list pos:line="625" pos:column="14">(<argument><expr><name pos:line="625" pos:column="15">expected</name><op:operator pos:line="625" pos:column="23">=</op:operator><name><name pos:line="625" pos:column="24">Department</name><op:operator pos:line="625" pos:column="34">.</op:operator><name pos:line="625" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="625" pos:column="66">.</op:operator><name pos:line="625" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="626" pos:column="9">public</specifier> <name pos:line="626" pos:column="16">void</name></type> <name pos:line="626" pos:column="21">testUpdateProfDept5</name><parameter_list pos:line="626" pos:column="40">()</parameter_list> <throws pos:line="626" pos:column="43">throws <argument><expr><name><name pos:line="626" pos:column="50">Department</name><op:operator pos:line="626" pos:column="60">.</op:operator><name pos:line="626" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="626" pos:column="94">Student</name><op:operator pos:line="626" pos:column="101">.</op:operator><name pos:line="626" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="626" pos:column="125">People</name><op:operator pos:line="626" pos:column="131">.</op:operator><name pos:line="626" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="626" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="628" pos:column="17">Department</name></type> <name pos:line="628" pos:column="28">d</name><init pos:line="628" pos:column="29">=<expr><op:operator pos:line="628" pos:column="30">new</op:operator> <call><name pos:line="628" pos:column="34">Department</name><argument_list pos:line="628" pos:column="44">(<argument><expr><lit:literal type="null" pos:line="628" pos:column="45">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="629" pos:column="17">Professor</name></type> <name pos:line="629" pos:column="27">p</name><init pos:line="629" pos:column="28">=<expr><op:operator pos:line="629" pos:column="29">new</op:operator> <call><name pos:line="629" pos:column="33">Professor</name><argument_list pos:line="629" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="629" pos:column="43">582</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="630" pos:column="17">boolean</name></type> <name pos:line="630" pos:column="25">check</name><init pos:line="630" pos:column="30">=<expr><call><name><name pos:line="630" pos:column="31">p</name><op:operator pos:line="630" pos:column="32">.</op:operator><name pos:line="630" pos:column="33">updateProfDept</name></name><argument_list pos:line="630" pos:column="47">(<argument><expr><call><name><name pos:line="630" pos:column="48">d</name><op:operator pos:line="630" pos:column="49">.</op:operator><name pos:line="630" pos:column="50">getDepartmentID</name></name><argument_list pos:line="630" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="633" pos:column="9">@<name pos:line="633" pos:column="10">Test</name><argument_list pos:line="633" pos:column="14">(<argument><expr><name pos:line="633" pos:column="15">expected</name><op:operator pos:line="633" pos:column="23">=</op:operator><name><name pos:line="633" pos:column="24">Department</name><op:operator pos:line="633" pos:column="34">.</op:operator><name pos:line="633" pos:column="35">DepartmentDoesNotExistException</name><op:operator pos:line="633" pos:column="66">.</op:operator><name pos:line="633" pos:column="67">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="634" pos:column="9">public</specifier> <name pos:line="634" pos:column="16">void</name></type> <name pos:line="634" pos:column="21">testUpdateProfDept6</name><parameter_list pos:line="634" pos:column="40">()</parameter_list> <throws pos:line="634" pos:column="43">throws <argument><expr><name><name pos:line="634" pos:column="50">Department</name><op:operator pos:line="634" pos:column="60">.</op:operator><name pos:line="634" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="634" pos:column="94">Student</name><op:operator pos:line="634" pos:column="101">.</op:operator><name pos:line="634" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="634" pos:column="125">People</name><op:operator pos:line="634" pos:column="131">.</op:operator><name pos:line="634" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="634" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="636" pos:column="17">Department</name></type> <name pos:line="636" pos:column="28">d</name><init pos:line="636" pos:column="29">=<expr><op:operator pos:line="636" pos:column="30">new</op:operator> <call><name pos:line="636" pos:column="34">Department</name><argument_list pos:line="636" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="636" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="637" pos:column="17">Professor</name></type> <name pos:line="637" pos:column="27">p</name><init pos:line="637" pos:column="28">=<expr><op:operator pos:line="637" pos:column="29">new</op:operator> <call><name pos:line="637" pos:column="33">Professor</name><argument_list pos:line="637" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="637" pos:column="43">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="638" pos:column="17">boolean</name></type> <name pos:line="638" pos:column="25">check</name><init pos:line="638" pos:column="30">=<expr><call><name><name pos:line="638" pos:column="31">p</name><op:operator pos:line="638" pos:column="32">.</op:operator><name pos:line="638" pos:column="33">updateProfDept</name></name><argument_list pos:line="638" pos:column="47">(<argument><expr><call><name><name pos:line="638" pos:column="48">d</name><op:operator pos:line="638" pos:column="49">.</op:operator><name pos:line="638" pos:column="50">getDepartmentID</name></name><argument_list pos:line="638" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="641" pos:column="9">@<name pos:line="641" pos:column="10">Test</name></annotation>
	<specifier pos:line="642" pos:column="9">public</specifier> <name pos:line="642" pos:column="16">void</name></type> <name pos:line="642" pos:column="21">testUpdateProfDept7</name><parameter_list pos:line="642" pos:column="40">()</parameter_list> <throws pos:line="642" pos:column="43">throws <argument><expr><name><name pos:line="642" pos:column="50">Department</name><op:operator pos:line="642" pos:column="60">.</op:operator><name pos:line="642" pos:column="61">DepartmentDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="94">Student</name><op:operator pos:line="642" pos:column="101">.</op:operator><name pos:line="642" pos:column="102">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="125">People</name><op:operator pos:line="642" pos:column="131">.</op:operator><name pos:line="642" pos:column="132">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="642" pos:column="160">{
		
		<decl_stmt><decl><type><name pos:line="644" pos:column="17">Department</name></type> <name pos:line="644" pos:column="28">d</name><init pos:line="644" pos:column="29">=<expr><op:operator pos:line="644" pos:column="30">new</op:operator> <call><name pos:line="644" pos:column="34">Department</name><argument_list pos:line="644" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="644" pos:column="45">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="645" pos:column="17">Professor</name></type> <name pos:line="645" pos:column="27">p</name><init pos:line="645" pos:column="28">=<expr><op:operator pos:line="645" pos:column="29">new</op:operator> <call><name pos:line="645" pos:column="33">Professor</name><argument_list pos:line="645" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="645" pos:column="43">583</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="646" pos:column="17">boolean</name></type> <name pos:line="646" pos:column="25">check</name><init pos:line="646" pos:column="30">=<expr><call><name><name pos:line="646" pos:column="31">p</name><op:operator pos:line="646" pos:column="32">.</op:operator><name pos:line="646" pos:column="33">updateProfDept</name></name><argument_list pos:line="646" pos:column="47">(<argument><expr><call><name><name pos:line="646" pos:column="48">d</name><op:operator pos:line="646" pos:column="49">.</op:operator><name pos:line="646" pos:column="50">getDepartmentID</name></name><argument_list pos:line="646" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

}</block></class>
</unit>
