<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\People.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">SQLException</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Random</name></name>;</import>

<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">mysql</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">jdbc</name><op:operator pos:line="9" pos:column="22">.</op:operator><name pos:line="9" pos:column="23">Statement</name></name>;</import>

<comment type="block" format="javadoc" pos:line="11" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="16" pos:column="1">/*************** PEOPLE.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>


<class><specifier pos:line="19" pos:column="1">public</specifier> class <name pos:line="19" pos:column="14">People</name> <block pos:line="19" pos:column="21">{

	<comment type="line" pos:line="21" pos:column="9">// class variables mainly uses by the people class</comment>
	<decl_stmt><decl><type><specifier pos:line="22" pos:column="9">protected</specifier> <name pos:line="22" pos:column="19">int</name></type> <name pos:line="22" pos:column="23">UIN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="23" pos:column="9">protected</specifier> <name pos:line="23" pos:column="19">String</name></type> <name pos:line="23" pos:column="26">name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="24" pos:column="9">protected</specifier> <name pos:line="24" pos:column="19">String</name></type> <name pos:line="24" pos:column="26">userName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="25" pos:column="9">protected</specifier> <name pos:line="25" pos:column="19">int</name></type> <name pos:line="25" pos:column="23">deptID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="26" pos:column="9">protected</specifier> <name pos:line="26" pos:column="19">int</name></type> <name pos:line="26" pos:column="23">positionID</name></decl>;</decl_stmt>

	<comment type="block" pos:line="28" pos:column="9">/*constructor for people class with name, username, dept ID and positionID*/</comment>
	<constructor><specifier pos:line="29" pos:column="9">public</specifier> <name pos:line="29" pos:column="16">People</name><parameter_list pos:line="29" pos:column="22">(<param><decl><type><name pos:line="29" pos:column="23">String</name></type> <name pos:line="29" pos:column="30">name</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="36">String</name></type> <name pos:line="29" pos:column="43">userName</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="53">int</name></type> <name pos:line="29" pos:column="57">deptID</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="65">int</name></type> <name pos:line="29" pos:column="69">positionID</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="81">{
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">this</name><op:operator pos:line="30" pos:column="21">.</op:operator><name pos:line="30" pos:column="22">name</name></name> <op:operator pos:line="30" pos:column="27">=</op:operator> <name pos:line="30" pos:column="29">name</name></expr>;</expr_stmt><comment type="line" pos:line="30" pos:column="34">//---------initializing People class variable "Name"</comment>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">this</name><op:operator pos:line="31" pos:column="21">.</op:operator><name pos:line="31" pos:column="22">userName</name></name> <op:operator pos:line="31" pos:column="31">=</op:operator> <name pos:line="31" pos:column="33">userName</name></expr>;</expr_stmt><comment type="line" pos:line="31" pos:column="42">//---------initializing People class variable "username"</comment>
		<expr_stmt><expr><name><name pos:line="32" pos:column="17">this</name><op:operator pos:line="32" pos:column="21">.</op:operator><name pos:line="32" pos:column="22">deptID</name></name> <op:operator pos:line="32" pos:column="29">=</op:operator> <name pos:line="32" pos:column="31">deptID</name></expr>;</expr_stmt><comment type="line" pos:line="32" pos:column="38">//---------initializing People class variable "Dept ID"</comment>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">this</name><op:operator pos:line="33" pos:column="21">.</op:operator><name pos:line="33" pos:column="22">positionID</name></name> <op:operator pos:line="33" pos:column="33">=</op:operator> <name pos:line="33" pos:column="35">positionID</name></expr>;</expr_stmt><comment type="line" pos:line="33" pos:column="46">//---------initializing People class variable "position ID"</comment>

	}</block></constructor>

	<comment type="block" pos:line="37" pos:column="9">/*This constructor for the people class uses only the UIN to initialize the people object*/</comment>
	<constructor><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">People</name><parameter_list pos:line="38" pos:column="22">(<param><decl><type><name pos:line="38" pos:column="23">int</name></type> <name pos:line="38" pos:column="27">UIN</name></decl></param>)</parameter_list> <throws pos:line="38" pos:column="32">throws <argument><expr><name pos:line="38" pos:column="39">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="38" pos:column="67">{

		<try pos:line="40" pos:column="17">try <block pos:line="40" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="41" pos:column="25">Connection</name></type> <name pos:line="41" pos:column="36">conn</name> <init pos:line="41" pos:column="41">= <expr><call><name><name pos:line="41" pos:column="43">Database</name><op:operator pos:line="41" pos:column="51">.</op:operator><name pos:line="41" pos:column="52">getConnection</name></name><argument_list pos:line="41" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="41" pos:column="68">// make a connection to the database.</comment>
			<comment type="block" pos:line="42" pos:column="25">/*calling the function in the database class to make the connection to the database*/</comment>
			
			<decl_stmt><decl><type><name pos:line="44" pos:column="25">String</name></type> <name pos:line="44" pos:column="32">SQLPeopleSelect</name> <init pos:line="44" pos:column="48">= <expr><lit:literal type="string" pos:line="44" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="45" pos:column="25">try <block pos:line="45" pos:column="29">{
				<comment type="block" pos:line="46" pos:column="33">/*check if the conn is  successful then run the query*/</comment>
				<if pos:line="47" pos:column="33">if <condition pos:line="47" pos:column="36">(<expr><name pos:line="47" pos:column="37">conn</name> <op:operator pos:line="47" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="47" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="47" pos:column="50"> <block pos:line="47" pos:column="51">{
					<comment type="block" pos:line="48" pos:column="41">/*Query to select all the details from the people table for a particular UIN*/</comment>
					<expr_stmt><expr><name pos:line="49" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="49" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="49" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="block" pos:line="51" pos:column="33">/*Creating a prepared statement for executing the query*/</comment>
				<decl_stmt><decl><type><name pos:line="52" pos:column="33">PreparedStatement</name></type> <name pos:line="52" pos:column="51">stmtForSelect</name> <init pos:line="52" pos:column="65">= <expr><call><name><name pos:line="52" pos:column="67">conn</name><op:operator pos:line="52" pos:column="71">.</op:operator><name pos:line="52" pos:column="72">prepareStatement</name></name><argument_list pos:line="52" pos:column="88">(<argument><expr><name pos:line="52" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="53" pos:column="33">//Insert the passed UIN.</comment>
				<expr_stmt><expr><call><name><name pos:line="54" pos:column="33">stmtForSelect</name><op:operator pos:line="54" pos:column="46">.</op:operator><name pos:line="54" pos:column="47">setInt</name></name><argument_list pos:line="54" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="56" pos:column="33">ResultSet</name></type> <name pos:line="56" pos:column="43">rs</name> <init pos:line="56" pos:column="46">= <expr><call><name><name pos:line="56" pos:column="48">stmtForSelect</name><op:operator pos:line="56" pos:column="61">.</op:operator><name pos:line="56" pos:column="62">executeQuery</name></name><argument_list pos:line="56" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="56" pos:column="77">// Execute the query.</comment>

				<comment type="line" pos:line="58" pos:column="33">//if rs.first means that there is a resultset that exists.</comment>
				<if pos:line="59" pos:column="33">if <condition pos:line="59" pos:column="36">(<expr><call><name><name pos:line="59" pos:column="37">rs</name><op:operator pos:line="59" pos:column="39">.</op:operator><name pos:line="59" pos:column="40">first</name></name><argument_list pos:line="59" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="59" pos:column="48"> <block pos:line="59" pos:column="49">{

					<comment type="line" pos:line="61" pos:column="41">//DB annotation</comment>
					<comment type="line" pos:line="62" pos:column="41">//For a selected resultset we store the retrieved details in these local variables</comment>
					
					<expr_stmt><expr><call><name><name pos:line="64" pos:column="41">DBAnnotation</name><op:operator pos:line="64" pos:column="53">.</op:operator><name pos:line="64" pos:column="54">annoate</name></name><argument_list pos:line="64" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="62">"peopleRetrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="84">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="94">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="64" pos:column="101">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="65" pos:column="41">int</name></type> <name pos:line="65" pos:column="45">peopleRetrievedUIN</name> <init pos:line="65" pos:column="64">= <expr><call><name><name pos:line="65" pos:column="66">rs</name><op:operator pos:line="65" pos:column="68">.</op:operator><name pos:line="65" pos:column="69">getInt</name></name><argument_list pos:line="65" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="76">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="65" pos:column="83">//--------&gt; get UIN from UIN column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="67" pos:column="41">DBAnnotation</name><op:operator pos:line="67" pos:column="53">.</op:operator><name pos:line="67" pos:column="54">annoate</name></name><argument_list pos:line="67" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="62">"peopleRetrievedName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="85">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="95">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="67" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="68" pos:column="41">String</name></type> <name pos:line="68" pos:column="48">peopleRetrievedName</name> <init pos:line="68" pos:column="68">= <expr><call><name><name pos:line="68" pos:column="70">rs</name><op:operator pos:line="68" pos:column="72">.</op:operator><name pos:line="68" pos:column="73">getString</name></name><argument_list pos:line="68" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="83">"Name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="68" pos:column="91">//--------&gt; get name from name column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="70" pos:column="41">DBAnnotation</name><op:operator pos:line="70" pos:column="53">.</op:operator><name pos:line="70" pos:column="54">annoate</name></name><argument_list pos:line="70" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="62">"peopleRetrieveduserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="89">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="99">"UserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="70" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="71" pos:column="41">String</name></type> <name pos:line="71" pos:column="48">peopleRetrieveduserName</name> <init pos:line="71" pos:column="72">= <expr><call><name><name pos:line="71" pos:column="74">rs</name><op:operator pos:line="71" pos:column="76">.</op:operator><name pos:line="71" pos:column="77">getString</name></name><argument_list pos:line="71" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="87">"UserName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="71" pos:column="99">//--------&gt; get username from username column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="73" pos:column="41">DBAnnotation</name><op:operator pos:line="73" pos:column="53">.</op:operator><name pos:line="73" pos:column="54">annoate</name></name><argument_list pos:line="73" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="62">"peopleRetrievedDeptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="87">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="97">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="73" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="74" pos:column="41">int</name></type> <name pos:line="74" pos:column="45">peopleRetrievedDeptID</name> <init pos:line="74" pos:column="67">= <expr><call><name><name pos:line="74" pos:column="69">rs</name><op:operator pos:line="74" pos:column="71">.</op:operator><name pos:line="74" pos:column="72">getInt</name></name><argument_list pos:line="74" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="74" pos:column="79">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="74" pos:column="95">//--------&gt; get dept ID from dept ID UIN column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="76" pos:column="41">DBAnnotation</name><op:operator pos:line="76" pos:column="53">.</op:operator><name pos:line="76" pos:column="54">annoate</name></name><argument_list pos:line="76" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="76" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="77" pos:column="41">int</name></type> <name pos:line="77" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="77" pos:column="71">= <expr><call><name><name pos:line="77" pos:column="73">rs</name><op:operator pos:line="77" pos:column="75">.</op:operator><name pos:line="77" pos:column="76">getInt</name></name><argument_list pos:line="77" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="77" pos:column="97">//--------&gt; get position ID from position ID column from database</comment>

					<comment type="line" pos:line="79" pos:column="41">// initializing the class variables with the retrieved values</comment>
					<expr_stmt><expr><name><name pos:line="80" pos:column="41">this</name><op:operator pos:line="80" pos:column="45">.</op:operator><name pos:line="80" pos:column="46">UIN</name></name> <op:operator pos:line="80" pos:column="50">=</op:operator> <name pos:line="80" pos:column="52">peopleRetrievedUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="81" pos:column="41">this</name><op:operator pos:line="81" pos:column="45">.</op:operator><name pos:line="81" pos:column="46">name</name></name> <op:operator pos:line="81" pos:column="51">=</op:operator> <name pos:line="81" pos:column="53">peopleRetrievedName</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="82" pos:column="41">this</name><op:operator pos:line="82" pos:column="45">.</op:operator><name pos:line="82" pos:column="46">userName</name></name> <op:operator pos:line="82" pos:column="55">=</op:operator> <name pos:line="82" pos:column="57">peopleRetrieveduserName</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="83" pos:column="41">this</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">deptID</name></name> <op:operator pos:line="83" pos:column="53">=</op:operator> <name pos:line="83" pos:column="55">peopleRetrievedDeptID</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="84" pos:column="41">this</name><op:operator pos:line="84" pos:column="45">.</op:operator><name pos:line="84" pos:column="46">positionID</name></name> <op:operator pos:line="84" pos:column="57">=</op:operator> <name pos:line="84" pos:column="59">peopleRetrievedPositionID</name></expr>;</expr_stmt>

					<comment type="line" pos:line="86" pos:column="41">//This sets the class variables to the details of the UIN specific person. This can be used by all the class methods.</comment>
				}</block></then>

				<else pos:line="89" pos:column="33">else <block pos:line="89" pos:column="38">{
					<comment type="block" pos:line="90" pos:column="41">/*This means that there exists no person in the database for the passed UIN*/</comment>
					<expr_stmt><expr><call><name><name pos:line="91" pos:column="41">System</name><op:operator pos:line="91" pos:column="47">.</op:operator><name pos:line="91" pos:column="48">out</name><op:operator pos:line="91" pos:column="51">.</op:operator><name pos:line="91" pos:column="52">println</name></name><argument_list pos:line="91" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="60">"UIN does not exist in the people table"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block" pos:line="92" pos:column="41">/*Here we throw a person does not exist exception for anyone who's using this constructor to catch*/</comment>
					<throw pos:line="93" pos:column="41">throw <expr><op:operator pos:line="93" pos:column="47">new</op:operator> <call><name pos:line="93" pos:column="51">PersonDoesNotExistException</name><argument_list pos:line="93" pos:column="78">()</argument_list></call></expr>;</throw>

				}</block></else></if>

			}</block>
			<comment type="block" pos:line="98" pos:column="25">/*Catches the inner try blocks SQL exception*/</comment>
			<catch pos:line="99" pos:column="25">catch <parameter_list pos:line="99" pos:column="31">(<param><decl><type><name pos:line="99" pos:column="32">SQLException</name></type> <name pos:line="99" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="100" pos:column="33">System</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">out</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">println</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><name pos:line="100" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="103" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
			<finally pos:line="105" pos:column="25">finally <block pos:line="105" pos:column="33">{

				<comment type="line" pos:line="107" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="block" pos:line="110" pos:column="17">/*Catches the outer try blocks general exception*/</comment>
		<catch pos:line="111" pos:column="17">catch <parameter_list pos:line="111" pos:column="23">(<param><decl><type><name pos:line="111" pos:column="24">Exception</name></type> <name pos:line="111" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="112" pos:column="25">System</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">out</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">println</name></name><argument_list pos:line="112" pos:column="43">(<argument><expr><name pos:line="112" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="115" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="117" pos:column="17">finally <block pos:line="117" pos:column="25">{

			<comment type="line" pos:line="119" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>
	<comment type="block" pos:line="123" pos:column="9">/*This constructor for the people class uses only the username to initialize the people object*/</comment>
	<constructor><specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">People</name><parameter_list pos:line="124" pos:column="22">(<param><decl><type><name pos:line="124" pos:column="23">String</name></type> <name pos:line="124" pos:column="30">userName</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="40">{

		<try pos:line="126" pos:column="17">try <block pos:line="126" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="127" pos:column="25">Connection</name></type> <name pos:line="127" pos:column="36">conn</name> <init pos:line="127" pos:column="41">= <expr><call><name><name pos:line="127" pos:column="43">Database</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">getConnection</name></name><argument_list pos:line="127" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="127" pos:column="68">// make a connection to the database.</comment>
			<comment type="block" pos:line="128" pos:column="25">/*calling the function in the database class to make the connection to the database*/</comment>
			<decl_stmt><decl><type><name pos:line="129" pos:column="25">String</name></type> <name pos:line="129" pos:column="32">SQLPeopleSelect</name> <init pos:line="129" pos:column="48">= <expr><lit:literal type="string" pos:line="129" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="130" pos:column="25">try <block pos:line="130" pos:column="29">{
				<comment type="line" pos:line="131" pos:column="33">//If the connection is successful</comment>
				<if pos:line="132" pos:column="33">if <condition pos:line="132" pos:column="36">(<expr><name pos:line="132" pos:column="37">conn</name> <op:operator pos:line="132" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="132" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="132" pos:column="50"> <block pos:line="132" pos:column="51">{

					<comment type="block" pos:line="134" pos:column="41">/*Query to select all the details from the people table for the passed username*/</comment>
					<expr_stmt><expr><name pos:line="135" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="135" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="135" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<comment type="block" pos:line="138" pos:column="33">/*Creating a prepared statement for executing the query*/</comment>
				<decl_stmt><decl><type><name pos:line="139" pos:column="33">PreparedStatement</name></type> <name pos:line="139" pos:column="51">stmtForSelect</name> <init pos:line="139" pos:column="65">= <expr><call><name><name pos:line="139" pos:column="67">conn</name><op:operator pos:line="139" pos:column="71">.</op:operator><name pos:line="139" pos:column="72">prepareStatement</name></name><argument_list pos:line="139" pos:column="88">(<argument><expr><name pos:line="139" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="140" pos:column="33">//set the username in the where clause</comment>
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">stmtForSelect</name><op:operator pos:line="141" pos:column="46">.</op:operator><name pos:line="141" pos:column="47">setString</name></name><argument_list pos:line="141" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="141" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="60">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="143" pos:column="33">ResultSet</name></type> <name pos:line="143" pos:column="43">rs</name> <init pos:line="143" pos:column="46">= <expr><call><name><name pos:line="143" pos:column="48">stmtForSelect</name><op:operator pos:line="143" pos:column="61">.</op:operator><name pos:line="143" pos:column="62">executeQuery</name></name><argument_list pos:line="143" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="143" pos:column="77">// Execute the query using the resultset</comment>

				<if pos:line="145" pos:column="33">if <condition pos:line="145" pos:column="36">(<expr><call><name><name pos:line="145" pos:column="37">rs</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">first</name></name><argument_list pos:line="145" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="145" pos:column="48"> <block pos:line="145" pos:column="49">{

					<comment type="line" pos:line="147" pos:column="41">// if the query is successful and returns an row, the details are then retrieved and stored in variables</comment>
					
					<expr_stmt><expr><call><name><name pos:line="149" pos:column="41">DBAnnotation</name><op:operator pos:line="149" pos:column="53">.</op:operator><name pos:line="149" pos:column="54">annoate</name></name><argument_list pos:line="149" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="62">"peopleRetrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="84">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="94">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="149" pos:column="101">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="150" pos:column="41">int</name></type> <name pos:line="150" pos:column="45">peopleRetrievedUIN</name> <init pos:line="150" pos:column="64">= <expr><call><name><name pos:line="150" pos:column="66">rs</name><op:operator pos:line="150" pos:column="68">.</op:operator><name pos:line="150" pos:column="69">getInt</name></name><argument_list pos:line="150" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="150" pos:column="76">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="150" pos:column="83">//--------&gt; get UIN from UIN column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="152" pos:column="41">DBAnnotation</name><op:operator pos:line="152" pos:column="53">.</op:operator><name pos:line="152" pos:column="54">annoate</name></name><argument_list pos:line="152" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="62">"peopleRetrievedName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="85">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="152" pos:column="95">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="152" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="153" pos:column="41">String</name></type> <name pos:line="153" pos:column="48">peopleRetrievedName</name> <init pos:line="153" pos:column="68">= <expr><call><name><name pos:line="153" pos:column="70">rs</name><op:operator pos:line="153" pos:column="72">.</op:operator><name pos:line="153" pos:column="73">getString</name></name><argument_list pos:line="153" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="83">"Name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="153" pos:column="91">//--------&gt; get name from name column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="155" pos:column="41">DBAnnotation</name><op:operator pos:line="155" pos:column="53">.</op:operator><name pos:line="155" pos:column="54">annoate</name></name><argument_list pos:line="155" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="62">"peopleRetrieveduserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="89">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="99">"UserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="155" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="156" pos:column="41">String</name></type> <name pos:line="156" pos:column="48">peopleRetrieveduserName</name> <init pos:line="156" pos:column="72">= <expr><call><name><name pos:line="156" pos:column="74">rs</name><op:operator pos:line="156" pos:column="76">.</op:operator><name pos:line="156" pos:column="77">getString</name></name><argument_list pos:line="156" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="87">"UserName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="156" pos:column="99">//--------&gt; get username from username column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="158" pos:column="41">DBAnnotation</name><op:operator pos:line="158" pos:column="53">.</op:operator><name pos:line="158" pos:column="54">annoate</name></name><argument_list pos:line="158" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="62">"peopleRetrievedDeptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="87">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="158" pos:column="97">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="158" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="159" pos:column="41">int</name></type> <name pos:line="159" pos:column="45">peopleRetrievedDeptID</name> <init pos:line="159" pos:column="67">= <expr><call><name><name pos:line="159" pos:column="69">rs</name><op:operator pos:line="159" pos:column="71">.</op:operator><name pos:line="159" pos:column="72">getInt</name></name><argument_list pos:line="159" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="79">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="159" pos:column="95">//--------&gt; get dept ID from dept ID column from database</comment>
					
					<expr_stmt><expr><call><name><name pos:line="161" pos:column="41">DBAnnotation</name><op:operator pos:line="161" pos:column="53">.</op:operator><name pos:line="161" pos:column="54">annoate</name></name><argument_list pos:line="161" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="161" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="162" pos:column="41">int</name></type> <name pos:line="162" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="162" pos:column="71">= <expr><call><name><name pos:line="162" pos:column="73">rs</name><op:operator pos:line="162" pos:column="75">.</op:operator><name pos:line="162" pos:column="76">getInt</name></name><argument_list pos:line="162" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="162" pos:column="97">//--------&gt; get positionID from positionID column from database</comment>

					<comment type="line" pos:line="164" pos:column="41">// initializing the class variables with the retrieved values</comment>
					
					<expr_stmt><expr><name><name pos:line="166" pos:column="41">this</name><op:operator pos:line="166" pos:column="45">.</op:operator><name pos:line="166" pos:column="46">UIN</name></name> <op:operator pos:line="166" pos:column="50">=</op:operator> <name pos:line="166" pos:column="52">peopleRetrievedUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="167" pos:column="41">this</name><op:operator pos:line="167" pos:column="45">.</op:operator><name pos:line="167" pos:column="46">name</name></name> <op:operator pos:line="167" pos:column="51">=</op:operator> <name pos:line="167" pos:column="53">peopleRetrievedName</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="168" pos:column="41">this</name><op:operator pos:line="168" pos:column="45">.</op:operator><name pos:line="168" pos:column="46">userName</name></name> <op:operator pos:line="168" pos:column="55">=</op:operator> <name pos:line="168" pos:column="57">peopleRetrieveduserName</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="169" pos:column="41">this</name><op:operator pos:line="169" pos:column="45">.</op:operator><name pos:line="169" pos:column="46">deptID</name></name> <op:operator pos:line="169" pos:column="53">=</op:operator> <name pos:line="169" pos:column="55">peopleRetrievedDeptID</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="170" pos:column="41">this</name><op:operator pos:line="170" pos:column="45">.</op:operator><name pos:line="170" pos:column="46">positionID</name></name> <op:operator pos:line="170" pos:column="57">=</op:operator> <name pos:line="170" pos:column="59">peopleRetrievedPositionID</name></expr>;</expr_stmt>

					<comment type="block" pos:line="172" pos:column="41">/*This sets the class variables to the details of the UIN specific person. This can be used by all the class methods.*/</comment>
					
				}</block></then>

				<else pos:line="176" pos:column="33">else <block pos:line="176" pos:column="38">{
					<comment type="block" pos:line="177" pos:column="41">/*if the query does not return any row then the else clause throws a person does not exist exception.*/</comment>
					<expr_stmt><expr><call><name><name pos:line="178" pos:column="41">System</name><op:operator pos:line="178" pos:column="47">.</op:operator><name pos:line="178" pos:column="48">out</name><op:operator pos:line="178" pos:column="51">.</op:operator><name pos:line="178" pos:column="52">println</name></name><argument_list pos:line="178" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="179" pos:column="41">// throw the person does not exist exception</comment>
					<throw pos:line="180" pos:column="41">throw <expr><op:operator pos:line="180" pos:column="47">new</op:operator> <call><name pos:line="180" pos:column="51">PersonDoesNotExistException</name><argument_list pos:line="180" pos:column="78">()</argument_list></call></expr>;</throw>

				}</block></else></if>

			}</block>
			<comment type="block" pos:line="185" pos:column="25">/*Catches the inner try block SQL exception*/</comment>
			<catch pos:line="186" pos:column="25">catch <parameter_list pos:line="186" pos:column="31">(<param><decl><type><name pos:line="186" pos:column="32">SQLException</name></type> <name pos:line="186" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="186" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="187" pos:column="33">System</name><op:operator pos:line="187" pos:column="39">.</op:operator><name pos:line="187" pos:column="40">out</name><op:operator pos:line="187" pos:column="43">.</op:operator><name pos:line="187" pos:column="44">println</name></name><argument_list pos:line="187" pos:column="51">(<argument><expr><name pos:line="187" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="190" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
			<finally pos:line="192" pos:column="25">finally <block pos:line="192" pos:column="33">{

				<comment type="line" pos:line="194" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="block" pos:line="197" pos:column="17">/*Catches the outer try blocks general exception*/</comment>
		<catch pos:line="198" pos:column="17">catch <parameter_list pos:line="198" pos:column="23">(<param><decl><type><name pos:line="198" pos:column="24">Exception</name></type> <name pos:line="198" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="198" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">System</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">out</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">println</name></name><argument_list pos:line="199" pos:column="43">(<argument><expr><name pos:line="199" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="202" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally pos:line="204" pos:column="17">finally <block pos:line="204" pos:column="25">{

			<comment type="line" pos:line="206" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>

	<comment type="block" pos:line="211" pos:column="9">/*getter and setter for UIN*/</comment>
	<function><type><specifier pos:line="212" pos:column="9">public</specifier> <name pos:line="212" pos:column="16">int</name></type> <name pos:line="212" pos:column="20">getUIN</name><parameter_list pos:line="212" pos:column="26">()</parameter_list> <block pos:line="212" pos:column="29">{
		<return pos:line="213" pos:column="17">return <expr><name pos:line="213" pos:column="24">UIN</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="216" pos:column="9">public</specifier> <name pos:line="216" pos:column="16">void</name></type> <name pos:line="216" pos:column="21">setUIN</name><parameter_list pos:line="216" pos:column="27">(<param><decl><type><name pos:line="216" pos:column="28">int</name></type> <name pos:line="216" pos:column="32">uIN</name></decl></param>)</parameter_list> <block pos:line="216" pos:column="37">{
		<expr_stmt><expr><name pos:line="217" pos:column="17">UIN</name> <op:operator pos:line="217" pos:column="21">=</op:operator> <name pos:line="217" pos:column="23">uIN</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block" pos:line="220" pos:column="9">/*getter and setter for name*/</comment>
	<function><type><specifier pos:line="221" pos:column="9">public</specifier> <name pos:line="221" pos:column="16">String</name></type> <name pos:line="221" pos:column="23">getName</name><parameter_list pos:line="221" pos:column="30">()</parameter_list> <block pos:line="221" pos:column="33">{
		<return pos:line="222" pos:column="17">return <expr><name pos:line="222" pos:column="24">name</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="225" pos:column="9">public</specifier> <name pos:line="225" pos:column="16">void</name></type> <name pos:line="225" pos:column="21">setName</name><parameter_list pos:line="225" pos:column="28">(<param><decl><type><name pos:line="225" pos:column="29">String</name></type> <name pos:line="225" pos:column="36">name</name></decl></param>)</parameter_list> <block pos:line="225" pos:column="42">{
		<expr_stmt><expr><name><name pos:line="226" pos:column="17">this</name><op:operator pos:line="226" pos:column="21">.</op:operator><name pos:line="226" pos:column="22">name</name></name> <op:operator pos:line="226" pos:column="27">=</op:operator> <name pos:line="226" pos:column="29">name</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="229" pos:column="9">/*getter and setter for username*/</comment>
	<function><type><specifier pos:line="230" pos:column="9">public</specifier> <name pos:line="230" pos:column="16">String</name></type> <name pos:line="230" pos:column="23">getUserName</name><parameter_list pos:line="230" pos:column="34">()</parameter_list> <block pos:line="230" pos:column="37">{
		<return pos:line="231" pos:column="17">return <expr><name pos:line="231" pos:column="24">userName</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="234" pos:column="9">public</specifier> <name pos:line="234" pos:column="16">void</name></type> <name pos:line="234" pos:column="21">setUserName</name><parameter_list pos:line="234" pos:column="32">(<param><decl><type><name pos:line="234" pos:column="33">String</name></type> <name pos:line="234" pos:column="40">userName</name></decl></param>)</parameter_list> <block pos:line="234" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="235" pos:column="17">this</name><op:operator pos:line="235" pos:column="21">.</op:operator><name pos:line="235" pos:column="22">userName</name></name> <op:operator pos:line="235" pos:column="31">=</op:operator> <name pos:line="235" pos:column="33">userName</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="238" pos:column="9">/*getter and setter for dept ID*/</comment>
	<function><type><specifier pos:line="239" pos:column="9">public</specifier> <name pos:line="239" pos:column="16">int</name></type> <name pos:line="239" pos:column="20">getDeptID</name><parameter_list pos:line="239" pos:column="29">()</parameter_list> <block pos:line="239" pos:column="32">{
		<return pos:line="240" pos:column="17">return <expr><name pos:line="240" pos:column="24">deptID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="243" pos:column="9">public</specifier> <name pos:line="243" pos:column="16">void</name></type> <name pos:line="243" pos:column="21">setDeptID</name><parameter_list pos:line="243" pos:column="30">(<param><decl><type><name pos:line="243" pos:column="31">int</name></type> <name pos:line="243" pos:column="35">deptID</name></decl></param>)</parameter_list> <block pos:line="243" pos:column="43">{
		<expr_stmt><expr><name><name pos:line="244" pos:column="17">this</name><op:operator pos:line="244" pos:column="21">.</op:operator><name pos:line="244" pos:column="22">deptID</name></name> <op:operator pos:line="244" pos:column="29">=</op:operator> <name pos:line="244" pos:column="31">deptID</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="247" pos:column="9">/*getter and setter for position ID*/</comment>
	<function><type><specifier pos:line="248" pos:column="9">public</specifier> <name pos:line="248" pos:column="16">int</name></type> <name pos:line="248" pos:column="20">getPositionID</name><parameter_list pos:line="248" pos:column="33">()</parameter_list> <block pos:line="248" pos:column="36">{
		<return pos:line="249" pos:column="17">return <expr><name pos:line="249" pos:column="24">positionID</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="252" pos:column="9">public</specifier> <name pos:line="252" pos:column="16">void</name></type> <name pos:line="252" pos:column="21">setPositionID</name><parameter_list pos:line="252" pos:column="34">(<param><decl><type><name pos:line="252" pos:column="35">int</name></type> <name pos:line="252" pos:column="39">positionID</name></decl></param>)</parameter_list> <block pos:line="252" pos:column="51">{
		<expr_stmt><expr><name><name pos:line="253" pos:column="17">this</name><op:operator pos:line="253" pos:column="21">.</op:operator><name pos:line="253" pos:column="22">positionID</name></name> <op:operator pos:line="253" pos:column="33">=</op:operator> <name pos:line="253" pos:column="35">positionID</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="256" pos:column="9">/*This function is to generate a random password of the required passed length. This function 
	  														*returns the generated password as a string */</comment>
	<function><type><specifier pos:line="258" pos:column="9">public</specifier> <specifier pos:line="258" pos:column="16">static</specifier> <name pos:line="258" pos:column="23">String</name></type> <name pos:line="258" pos:column="30">generatePassword</name><parameter_list pos:line="258" pos:column="46">(<param><decl><type><name pos:line="258" pos:column="47">int</name></type> <name pos:line="258" pos:column="51">length</name></decl></param>)</parameter_list> <block pos:line="258" pos:column="59">{
		
		<comment type="line" pos:line="260" pos:column="17">//make a new sriung that takes in all the digits, alphabets(upper case and lower case)</comment>
		<decl_stmt><decl><type><name pos:line="261" pos:column="17">String</name></type> <name pos:line="261" pos:column="24">alphabet</name> <init pos:line="261" pos:column="33">= <expr><op:operator pos:line="261" pos:column="35">new</op:operator> <call><name pos:line="261" pos:column="39">String</name><argument_list pos:line="261" pos:column="45">(
				<argument><expr><lit:literal type="string" pos:line="262" pos:column="33">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="262" pos:column="100">// all the possible characters and numbers</comment>
		<decl_stmt><decl><type><name pos:line="263" pos:column="17">int</name></type> <name pos:line="263" pos:column="21">n</name> <init pos:line="263" pos:column="23">= <expr><call><name><name pos:line="263" pos:column="25">alphabet</name><op:operator pos:line="263" pos:column="33">.</op:operator><name pos:line="263" pos:column="34">length</name></name><argument_list pos:line="263" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="263" pos:column="44">// get its length</comment>

		<decl_stmt><decl><type><name pos:line="265" pos:column="17">String</name></type> <name pos:line="265" pos:column="24">result</name> <init pos:line="265" pos:column="31">= <expr><op:operator pos:line="265" pos:column="33">new</op:operator> <call><name pos:line="265" pos:column="37">String</name><argument_list pos:line="265" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="265" pos:column="47">// result is the string that needs to be returned, containing password.</comment>
		<decl_stmt><decl><type><name pos:line="266" pos:column="17">Random</name></type> <name pos:line="266" pos:column="24">r</name> <init pos:line="266" pos:column="26">= <expr><op:operator pos:line="266" pos:column="28">new</op:operator> <call><name pos:line="266" pos:column="32">Random</name><argument_list pos:line="266" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="266" pos:column="42">// r takes in a random number</comment>

		<comment type="block" pos:line="268" pos:column="17">/*the for loop runs for the number of times a specified no of times we say the length should be */</comment>
		<for pos:line="269" pos:column="17">for (<init><decl><type><name pos:line="269" pos:column="22">int</name></type> <name pos:line="269" pos:column="26">i</name> <init pos:line="269" pos:column="28">= <expr><lit:literal type="number" pos:line="269" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="269" pos:column="33">i</name> <op:operator pos:line="269" pos:column="35">&lt;</op:operator> <name pos:line="269" pos:column="37">length</name></expr>;</condition> <incr><expr><name pos:line="269" pos:column="45">i</name><op:operator pos:line="269" pos:column="46">++</op:operator></expr></incr>)
			<comment type="line" pos:line="270" pos:column="25">// 12</comment>
			<expr_stmt><expr><name pos:line="271" pos:column="25">result</name> <op:operator pos:line="271" pos:column="32">=</op:operator> <name pos:line="271" pos:column="34">result</name> <op:operator pos:line="271" pos:column="41">+</op:operator> <call><name><name pos:line="271" pos:column="43">alphabet</name><op:operator pos:line="271" pos:column="51">.</op:operator><name pos:line="271" pos:column="52">charAt</name></name><argument_list pos:line="271" pos:column="58">(<argument><expr><call><name><name pos:line="271" pos:column="59">r</name><op:operator pos:line="271" pos:column="60">.</op:operator><name pos:line="271" pos:column="61">nextInt</name></name><argument_list pos:line="271" pos:column="68">(<argument><expr><name pos:line="271" pos:column="69">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for> <comment type="line" pos:line="271" pos:column="74">// append the random character to the result string.</comment>

		<return pos:line="273" pos:column="17">return <expr><name pos:line="273" pos:column="24">result</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="276" pos:column="9">/* checking if auto generated user name already exists in the people table in the database when a username is passed.
	 												* The return type is boolean */</comment>
	<function><type><specifier pos:line="278" pos:column="9">public</specifier> <specifier pos:line="278" pos:column="16">static</specifier> <name pos:line="278" pos:column="23">boolean</name></type> <name pos:line="278" pos:column="31">checkIfUserNameExists</name><parameter_list pos:line="278" pos:column="52">(<param><decl><type><name pos:line="278" pos:column="53">String</name></type> <name pos:line="278" pos:column="60">userName</name></decl></param>)</parameter_list> <block pos:line="278" pos:column="70">{

		<try pos:line="280" pos:column="17">try <block pos:line="280" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="281" pos:column="25">Connection</name></type> <name pos:line="281" pos:column="36">conn</name> <init pos:line="281" pos:column="41">= <expr><call><name><name pos:line="281" pos:column="43">Database</name><op:operator pos:line="281" pos:column="51">.</op:operator><name pos:line="281" pos:column="52">getConnection</name></name><argument_list pos:line="281" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="281" pos:column="68">// get a connection to the database.</comment>
			<decl_stmt><decl><type><name pos:line="282" pos:column="25">String</name></type> <name pos:line="282" pos:column="32">SQLPeopleSelect</name> <init pos:line="282" pos:column="48">= <expr><lit:literal type="string" pos:line="282" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="283" pos:column="25">try <block pos:line="283" pos:column="29">{
				<if pos:line="284" pos:column="33">if <condition pos:line="284" pos:column="36">(<expr><name pos:line="284" pos:column="37">conn</name> <op:operator pos:line="284" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="284" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="284" pos:column="50"> <block pos:line="284" pos:column="51">{<comment type="line" pos:line="284" pos:column="52">//if the connection is successful</comment>
					
					<comment type="block" pos:line="286" pos:column="41">/*select the username from people table where the username is passed*/</comment>
					<expr_stmt><expr><name pos:line="287" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="287" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="287" pos:column="59">"Select Username From People where Username=?;"</lit:literal></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="289" pos:column="41">PreparedStatement</name></type> <name pos:line="289" pos:column="59">stmt</name> <init pos:line="289" pos:column="64">= <expr><call><name><name pos:line="289" pos:column="66">conn</name><op:operator pos:line="289" pos:column="70">.</op:operator><name pos:line="289" pos:column="71">prepareStatement</name></name><argument_list pos:line="289" pos:column="87">(<argument><expr><name pos:line="289" pos:column="88">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="290" pos:column="41">stmt</name><op:operator pos:line="290" pos:column="45">.</op:operator><name pos:line="290" pos:column="46">setString</name></name><argument_list pos:line="290" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="290" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="290" pos:column="69">// set the passed username in the where clause</comment>
					<decl_stmt><decl><type><name pos:line="291" pos:column="41">ResultSet</name></type> <name pos:line="291" pos:column="51">rs</name> <init pos:line="291" pos:column="54">= <expr><call><name><name pos:line="291" pos:column="56">stmt</name><op:operator pos:line="291" pos:column="60">.</op:operator><name pos:line="291" pos:column="61">executeQuery</name></name><argument_list pos:line="291" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="line" pos:line="293" pos:column="41">//if the query returns a successful resultset</comment>
					<if pos:line="294" pos:column="41">if <condition pos:line="294" pos:column="44">(<expr><call><name><name pos:line="294" pos:column="45">rs</name><op:operator pos:line="294" pos:column="47">.</op:operator><name pos:line="294" pos:column="48">first</name></name><argument_list pos:line="294" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="294" pos:column="56"> <block pos:line="294" pos:column="57">{

						<expr_stmt><expr><call><name><name pos:line="296" pos:column="49">DBAnnotation</name><op:operator pos:line="296" pos:column="61">.</op:operator><name pos:line="296" pos:column="62">annoate</name></name><argument_list pos:line="296" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="70">"peopleRetrieveduserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="296" pos:column="97">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="296" pos:column="107">"UserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="296" pos:column="119">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="297" pos:column="49">String</name></type> <name pos:line="297" pos:column="56">peopleRetrieveduserName</name> <init pos:line="297" pos:column="80">= <expr><call><name><name pos:line="297" pos:column="82">rs</name><op:operator pos:line="297" pos:column="84">.</op:operator><name pos:line="297" pos:column="85">getString</name></name><argument_list pos:line="297" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="297" pos:column="95">"UserName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="297" pos:column="107">//get the username from the username column in the database</comment>
						<expr_stmt><expr><call><name><name pos:line="298" pos:column="49">System</name><op:operator pos:line="298" pos:column="55">.</op:operator><name pos:line="298" pos:column="56">out</name><op:operator pos:line="298" pos:column="59">.</op:operator><name pos:line="298" pos:column="60">println</name></name><argument_list pos:line="298" pos:column="67">(<argument><expr><name pos:line="298" pos:column="68">peopleRetrieveduserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="299" pos:column="49">return <expr><lit:literal type="boolean" pos:line="299" pos:column="56">true</lit:literal></expr>;</return>

					}</block></then>

					<else pos:line="303" pos:column="41">else <block pos:line="303" pos:column="46">{
						<comment type="line" pos:line="304" pos:column="49">//if the query does not return a resultset </comment>
						<expr_stmt><expr><call><name><name pos:line="305" pos:column="49">System</name><op:operator pos:line="305" pos:column="55">.</op:operator><name pos:line="305" pos:column="56">out</name><op:operator pos:line="305" pos:column="59">.</op:operator><name pos:line="305" pos:column="60">println</name></name><argument_list pos:line="305" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="68">"Username does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="306" pos:column="49">return <expr><lit:literal type="boolean" pos:line="306" pos:column="56">false</lit:literal></expr>;</return>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="block" pos:line="312" pos:column="25">/*The inner catch clause catches the SQL exception*/</comment>
			<catch pos:line="313" pos:column="25">catch <parameter_list pos:line="313" pos:column="31">(<param><decl><type><name pos:line="313" pos:column="32">SQLException</name></type> <name pos:line="313" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="313" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="314" pos:column="33">System</name><op:operator pos:line="314" pos:column="39">.</op:operator><name pos:line="314" pos:column="40">out</name><op:operator pos:line="314" pos:column="43">.</op:operator><name pos:line="314" pos:column="44">println</name></name><argument_list pos:line="314" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="314" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="315" pos:column="33">System</name><op:operator pos:line="315" pos:column="39">.</op:operator><name pos:line="315" pos:column="40">out</name><op:operator pos:line="315" pos:column="43">.</op:operator><name pos:line="315" pos:column="44">println</name></name><argument_list pos:line="315" pos:column="51">(<argument><expr><name pos:line="315" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<comment type="block" pos:line="318" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
			<finally pos:line="320" pos:column="25">finally <block pos:line="320" pos:column="33">{
				<comment type="line" pos:line="321" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="block" pos:line="324" pos:column="17">/*The outer catch clause catches the general exception*/</comment>
		<catch pos:line="325" pos:column="17">catch <parameter_list pos:line="325" pos:column="23">(<param><decl><type><name pos:line="325" pos:column="24">Exception</name></type> <name pos:line="325" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="325" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="326" pos:column="25">System</name><op:operator pos:line="326" pos:column="31">.</op:operator><name pos:line="326" pos:column="32">out</name><op:operator pos:line="326" pos:column="35">.</op:operator><name pos:line="326" pos:column="36">println</name></name><argument_list pos:line="326" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="327" pos:column="25">System</name><op:operator pos:line="327" pos:column="31">.</op:operator><name pos:line="327" pos:column="32">out</name><op:operator pos:line="327" pos:column="35">.</op:operator><name pos:line="327" pos:column="36">println</name></name><argument_list pos:line="327" pos:column="43">(<argument><expr><name pos:line="327" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="331" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>
		<finally pos:line="333" pos:column="17">finally <block pos:line="333" pos:column="25">{

			<comment type="line" pos:line="335" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="338" pos:column="17">return <expr><lit:literal type="boolean" pos:line="338" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="341" pos:column="9">/*Adding the user to the login table with auto generated username and password*/</comment>
	<function><type><specifier pos:line="342" pos:column="9">public</specifier> <specifier pos:line="342" pos:column="16">static</specifier> <name pos:line="342" pos:column="23">boolean</name></type> <name pos:line="342" pos:column="31">addUserDetailsIntoLoginTable</name><parameter_list pos:line="342" pos:column="59">(<param><decl><type><name pos:line="342" pos:column="60">String</name></type> <name pos:line="342" pos:column="67">userName</name></decl></param>,<param><decl><type><name pos:line="342" pos:column="76">String</name></type> <name pos:line="342" pos:column="83">Password</name></decl></param>)</parameter_list> <block pos:line="342" pos:column="93">{

		<decl_stmt><decl><type><name pos:line="344" pos:column="17">boolean</name></type> <name pos:line="344" pos:column="25">isAdded</name> <init pos:line="344" pos:column="33">= <expr><lit:literal type="boolean" pos:line="344" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="344" pos:column="41">// create a boolean variable for reference and returning</comment>

		<try pos:line="346" pos:column="17">try <block pos:line="346" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="347" pos:column="25">Connection</name></type> <name pos:line="347" pos:column="36">conn</name> <init pos:line="347" pos:column="41">= <expr><call><name><name pos:line="347" pos:column="43">Database</name><op:operator pos:line="347" pos:column="51">.</op:operator><name pos:line="347" pos:column="52">getConnection</name></name><argument_list pos:line="347" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="347" pos:column="68">//establish a connection to the database</comment>

			<try pos:line="349" pos:column="25">try <block pos:line="349" pos:column="29">{
				
				<comment type="block" pos:line="351" pos:column="33">/*before adding call the function that checks if the username already exists in the database. 
				 * if its exists it returns true*/</comment>
				<decl_stmt><decl><type><name pos:line="353" pos:column="33">boolean</name></type> <name pos:line="353" pos:column="41">ifExists</name> <init pos:line="353" pos:column="50">= <expr><call><name pos:line="353" pos:column="52">addUserDetailsIntoLoginTableCheck</name><argument_list pos:line="353" pos:column="85">(<argument><expr><name pos:line="353" pos:column="86">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="355" pos:column="33">if <condition pos:line="355" pos:column="36">(<expr><name pos:line="355" pos:column="37">ifExists</name></expr>)</condition><then pos:line="355" pos:column="46"> <block pos:line="355" pos:column="47">{
					<return pos:line="356" pos:column="41">return <expr><lit:literal type="boolean" pos:line="356" pos:column="48">false</lit:literal></expr>;</return><comment type="line" pos:line="356" pos:column="54">// return false if the username already exists.</comment>
				}</block></then>

				<else pos:line="359" pos:column="33">else <block pos:line="359" pos:column="38">{
					<comment type="line" pos:line="360" pos:column="41">//if the username does not exist add the username and password to the login details table</comment>
					<expr_stmt><expr><call><name><name pos:line="361" pos:column="41">System</name><op:operator pos:line="361" pos:column="47">.</op:operator><name pos:line="361" pos:column="48">out</name><op:operator pos:line="361" pos:column="51">.</op:operator><name pos:line="361" pos:column="52">println</name></name><argument_list pos:line="361" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="361" pos:column="60">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="362" pos:column="41">String</name></type> <name pos:line="362" pos:column="48">SQLPeopleInsert</name> <init pos:line="362" pos:column="64">= <expr><lit:literal type="string" pos:line="362" pos:column="66">"Insert into logindetails (Username, Password) Values (?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="363" pos:column="41">PreparedStatement</name></type> <name pos:line="363" pos:column="59">stmt</name> <init pos:line="363" pos:column="64">= <expr><call><name><name pos:line="363" pos:column="66">conn</name><op:operator pos:line="363" pos:column="70">.</op:operator><name pos:line="363" pos:column="71">prepareStatement</name></name><argument_list pos:line="363" pos:column="87">(<argument><expr><name pos:line="363" pos:column="88">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="364" pos:column="41">stmt</name><op:operator pos:line="364" pos:column="45">.</op:operator><name pos:line="364" pos:column="46">setString</name></name><argument_list pos:line="364" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="364" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="364" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="364" pos:column="69">//set the username </comment>
					<expr_stmt><expr><call><name><name pos:line="365" pos:column="41">stmt</name><op:operator pos:line="365" pos:column="45">.</op:operator><name pos:line="365" pos:column="46">setString</name></name><argument_list pos:line="365" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="365" pos:column="56">2</lit:literal></expr></argument>, <argument><expr><name pos:line="365" pos:column="59">Password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="365" pos:column="69">//set the password</comment>
					<expr_stmt><expr><call><name><name pos:line="366" pos:column="41">System</name><op:operator pos:line="366" pos:column="47">.</op:operator><name pos:line="366" pos:column="48">out</name><op:operator pos:line="366" pos:column="51">.</op:operator><name pos:line="366" pos:column="52">println</name></name><argument_list pos:line="366" pos:column="59">(<argument><expr><name pos:line="366" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="367" pos:column="41">int</name></type> <name pos:line="367" pos:column="45">i</name> <init pos:line="367" pos:column="47">= <expr><call><name><name pos:line="367" pos:column="49">stmt</name><op:operator pos:line="367" pos:column="53">.</op:operator><name pos:line="367" pos:column="54">executeUpdate</name></name><argument_list pos:line="367" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="367" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="369" pos:column="41">DBAnnotation</name><op:operator pos:line="369" pos:column="53">.</op:operator><name pos:line="369" pos:column="54">annoate</name></name><argument_list pos:line="369" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="62">"userName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="74">"logindetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="90">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="369" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="370" pos:column="41">DBAnnotation</name><op:operator pos:line="370" pos:column="53">.</op:operator><name pos:line="370" pos:column="54">annoate</name></name><argument_list pos:line="370" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="370" pos:column="62">"Password"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="74">"logindetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="90">"Password"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="370" pos:column="102">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="372" pos:column="41">System</name><op:operator pos:line="372" pos:column="47">.</op:operator><name pos:line="372" pos:column="48">out</name><op:operator pos:line="372" pos:column="51">.</op:operator><name pos:line="372" pos:column="52">println</name></name><argument_list pos:line="372" pos:column="59">(<argument><expr><name pos:line="372" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="373" pos:column="41">System</name><op:operator pos:line="373" pos:column="47">.</op:operator><name pos:line="373" pos:column="48">out</name><op:operator pos:line="373" pos:column="51">.</op:operator><name pos:line="373" pos:column="52">println</name></name><argument_list pos:line="373" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="374" pos:column="41">isAdded</name> <op:operator pos:line="374" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="374" pos:column="51">true</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="375" pos:column="41">//set the boolean variable to true</comment>
				}</block></else></if>

			}</block>

			<comment type="line" pos:line="380" pos:column="25">//the inner catch block catches the sql exception</comment>
			<catch pos:line="381" pos:column="25">catch <parameter_list pos:line="381" pos:column="31">(<param><decl><type><name pos:line="381" pos:column="32">SQLException</name></type> <name pos:line="381" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="381" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="382" pos:column="33">System</name><op:operator pos:line="382" pos:column="39">.</op:operator><name pos:line="382" pos:column="40">out</name><op:operator pos:line="382" pos:column="43">.</op:operator><name pos:line="382" pos:column="44">println</name></name><argument_list pos:line="382" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="383" pos:column="33">System</name><op:operator pos:line="383" pos:column="39">.</op:operator><name pos:line="383" pos:column="40">out</name><op:operator pos:line="383" pos:column="43">.</op:operator><name pos:line="383" pos:column="44">println</name></name><argument_list pos:line="383" pos:column="51">(<argument><expr><name pos:line="383" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<comment type="block" pos:line="386" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
			<finally pos:line="388" pos:column="25">finally <block pos:line="388" pos:column="33">{
				<comment type="line" pos:line="389" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="390" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="393" pos:column="17">//the outer catch block catch the general exception</comment>
		<catch pos:line="394" pos:column="17">catch <parameter_list pos:line="394" pos:column="23">(<param><decl><type><name pos:line="394" pos:column="24">Exception</name></type> <name pos:line="394" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="394" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="395" pos:column="25">System</name><op:operator pos:line="395" pos:column="31">.</op:operator><name pos:line="395" pos:column="32">out</name><op:operator pos:line="395" pos:column="35">.</op:operator><name pos:line="395" pos:column="36">println</name></name><argument_list pos:line="395" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="395" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="396" pos:column="25">System</name><op:operator pos:line="396" pos:column="31">.</op:operator><name pos:line="396" pos:column="32">out</name><op:operator pos:line="396" pos:column="35">.</op:operator><name pos:line="396" pos:column="36">println</name></name><argument_list pos:line="396" pos:column="43">(<argument><expr><name pos:line="396" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="400" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>
		<finally pos:line="402" pos:column="17">finally <block pos:line="402" pos:column="25">{

			<comment type="line" pos:line="404" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="407" pos:column="17">return <expr><name pos:line="407" pos:column="24">isAdded</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="410" pos:column="9">/*Updating the user name in the login details table
	 * The parameters passed are the old username and the new username
	 * The return type is boolean 
	 * */</comment>
	<function><type><specifier pos:line="414" pos:column="9">public</specifier> <specifier pos:line="414" pos:column="16">static</specifier> <name pos:line="414" pos:column="23">boolean</name></type> <name pos:line="414" pos:column="31">updateUserNameIntoLoginTable</name><parameter_list pos:line="414" pos:column="59">(<param><decl><type><name pos:line="414" pos:column="60">String</name></type> <name pos:line="414" pos:column="67">newUserName</name></decl></param>,<param><decl><type><name pos:line="414" pos:column="79">String</name></type> <name pos:line="414" pos:column="86">oldUserName</name></decl></param>)</parameter_list> <block pos:line="414" pos:column="99">{

		<decl_stmt><decl><type><name pos:line="416" pos:column="17">boolean</name></type> <name pos:line="416" pos:column="25">isUpdated</name> <init pos:line="416" pos:column="35">= <expr><lit:literal type="boolean" pos:line="416" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="416" pos:column="43">//create a boolean value for returning. set it to false</comment>

		<try pos:line="418" pos:column="17">try <block pos:line="418" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="419" pos:column="25">Connection</name></type> <name pos:line="419" pos:column="36">conn</name> <init pos:line="419" pos:column="41">= <expr><call><name><name pos:line="419" pos:column="43">Database</name><op:operator pos:line="419" pos:column="51">.</op:operator><name pos:line="419" pos:column="52">getConnection</name></name><argument_list pos:line="419" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="419" pos:column="68">//establish a connection to the database</comment>

			<try pos:line="421" pos:column="25">try <block pos:line="421" pos:column="29">{
				<comment type="line" pos:line="422" pos:column="33">//query to update the old username to the new username .</comment>
				<expr_stmt><expr><call><name><name pos:line="423" pos:column="33">System</name><op:operator pos:line="423" pos:column="39">.</op:operator><name pos:line="423" pos:column="40">out</name><op:operator pos:line="423" pos:column="43">.</op:operator><name pos:line="423" pos:column="44">println</name></name><argument_list pos:line="423" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="423" pos:column="52">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="424" pos:column="33">String</name></type> <name pos:line="424" pos:column="40">SQLPeopleInsert</name> <init pos:line="424" pos:column="56">= <expr><lit:literal type="string" pos:line="424" pos:column="58">"UPDATE logindetails SET Username= ? where Username=?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="425" pos:column="33">PreparedStatement</name></type> <name pos:line="425" pos:column="51">stmt</name> <init pos:line="425" pos:column="56">= <expr><call><name><name pos:line="425" pos:column="58">conn</name><op:operator pos:line="425" pos:column="62">.</op:operator><name pos:line="425" pos:column="63">prepareStatement</name></name><argument_list pos:line="425" pos:column="79">(<argument><expr><name pos:line="425" pos:column="80">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="426" pos:column="33">stmt</name><op:operator pos:line="426" pos:column="37">.</op:operator><name pos:line="426" pos:column="38">setString</name></name><argument_list pos:line="426" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="426" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="426" pos:column="51">newUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="426" pos:column="64">//set the new user name</comment>
				<expr_stmt><expr><call><name><name pos:line="427" pos:column="33">stmt</name><op:operator pos:line="427" pos:column="37">.</op:operator><name pos:line="427" pos:column="38">setString</name></name><argument_list pos:line="427" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="427" pos:column="48">2</lit:literal></expr></argument>, <argument><expr><name pos:line="427" pos:column="51">oldUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="427" pos:column="64">//where the old user name is </comment>
				<expr_stmt><expr><call><name><name pos:line="428" pos:column="33">System</name><op:operator pos:line="428" pos:column="39">.</op:operator><name pos:line="428" pos:column="40">out</name><op:operator pos:line="428" pos:column="43">.</op:operator><name pos:line="428" pos:column="44">println</name></name><argument_list pos:line="428" pos:column="51">(<argument><expr><name pos:line="428" pos:column="52">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="429" pos:column="33">int</name></type> <name pos:line="429" pos:column="37">i</name> <init pos:line="429" pos:column="39">= <expr><call><name><name pos:line="429" pos:column="41">stmt</name><op:operator pos:line="429" pos:column="45">.</op:operator><name pos:line="429" pos:column="46">executeUpdate</name></name><argument_list pos:line="429" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="429" pos:column="62">//execute the query</comment>
				
				<expr_stmt><expr><call><name><name pos:line="431" pos:column="33">DBAnnotation</name><op:operator pos:line="431" pos:column="45">.</op:operator><name pos:line="431" pos:column="46">annoate</name></name><argument_list pos:line="431" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="431" pos:column="54">"newUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="431" pos:column="69">"logindetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="431" pos:column="85">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="431" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="432" pos:column="33">DBAnnotation</name><op:operator pos:line="432" pos:column="45">.</op:operator><name pos:line="432" pos:column="46">annoate</name></name><argument_list pos:line="432" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="432" pos:column="54">"oldUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="69">"logindetails"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="85">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="432" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="434" pos:column="33">System</name><op:operator pos:line="434" pos:column="39">.</op:operator><name pos:line="434" pos:column="40">out</name><op:operator pos:line="434" pos:column="43">.</op:operator><name pos:line="434" pos:column="44">println</name></name><argument_list pos:line="434" pos:column="51">(<argument><expr><name pos:line="434" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="435" pos:column="33">System</name><op:operator pos:line="435" pos:column="39">.</op:operator><name pos:line="435" pos:column="40">out</name><op:operator pos:line="435" pos:column="43">.</op:operator><name pos:line="435" pos:column="44">println</name></name><argument_list pos:line="435" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="435" pos:column="52">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="436" pos:column="33">isUpdated</name> <op:operator pos:line="436" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="436" pos:column="45">true</lit:literal></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name pos:line="438" pos:column="33">Database</name><op:operator pos:line="438" pos:column="41">.</op:operator><name pos:line="438" pos:column="42">commitTransaction</name></name><argument_list pos:line="438" pos:column="59">(<argument><expr><name pos:line="438" pos:column="60">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="438" pos:column="66">//the transaction is committed.</comment>

			}</block>
			<comment type="line" pos:line="441" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="442" pos:column="25">catch <parameter_list pos:line="442" pos:column="31">(<param><decl><type><name pos:line="442" pos:column="32">SQLException</name></type> <name pos:line="442" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="442" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="443" pos:column="33">System</name><op:operator pos:line="443" pos:column="39">.</op:operator><name pos:line="443" pos:column="40">out</name><op:operator pos:line="443" pos:column="43">.</op:operator><name pos:line="443" pos:column="44">println</name></name><argument_list pos:line="443" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="443" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="444" pos:column="33">System</name><op:operator pos:line="444" pos:column="39">.</op:operator><name pos:line="444" pos:column="40">out</name><op:operator pos:line="444" pos:column="43">.</op:operator><name pos:line="444" pos:column="44">println</name></name><argument_list pos:line="444" pos:column="51">(<argument><expr><name pos:line="444" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<comment type="block" pos:line="447" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
			<finally pos:line="449" pos:column="25">finally <block pos:line="449" pos:column="33">{
				<comment type="line" pos:line="450" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="451" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="454" pos:column="17">//the outer catch block catches the general exception</comment>
		<catch pos:line="455" pos:column="17">catch <parameter_list pos:line="455" pos:column="23">(<param><decl><type><name pos:line="455" pos:column="24">Exception</name></type> <name pos:line="455" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="455" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="456" pos:column="25">System</name><op:operator pos:line="456" pos:column="31">.</op:operator><name pos:line="456" pos:column="32">out</name><op:operator pos:line="456" pos:column="35">.</op:operator><name pos:line="456" pos:column="36">println</name></name><argument_list pos:line="456" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="456" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="457" pos:column="25">System</name><op:operator pos:line="457" pos:column="31">.</op:operator><name pos:line="457" pos:column="32">out</name><op:operator pos:line="457" pos:column="35">.</op:operator><name pos:line="457" pos:column="36">println</name></name><argument_list pos:line="457" pos:column="43">(<argument><expr><name pos:line="457" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="461" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally pos:line="463" pos:column="17">finally <block pos:line="463" pos:column="25">{

			<comment type="line" pos:line="465" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="468" pos:column="17">return <expr><name pos:line="468" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="471" pos:column="9">/*Updating the name in the people table
	 * The parameters passed are the new username and the UIN
	 * The return type is boolean 
	 * */</comment> 
	<function><type><specifier pos:line="475" pos:column="9">public</specifier> <specifier pos:line="475" pos:column="16">static</specifier> <name pos:line="475" pos:column="23">boolean</name></type> <name pos:line="475" pos:column="31">updateNameIntoPeopleTable</name><parameter_list pos:line="475" pos:column="56">(<param><decl><type><name pos:line="475" pos:column="57">String</name></type> <name pos:line="475" pos:column="64">newName</name></decl></param>, <param><decl><type><name pos:line="475" pos:column="73">int</name></type> <name pos:line="475" pos:column="77">UIN</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="82">{

		<decl_stmt><decl><type><name pos:line="477" pos:column="17">boolean</name></type> <name pos:line="477" pos:column="25">isUpdated</name> <init pos:line="477" pos:column="35">= <expr><lit:literal type="boolean" pos:line="477" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="477" pos:column="43">//create a boolean value for returning. set it to false</comment>

		<try pos:line="479" pos:column="17">try <block pos:line="479" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="480" pos:column="25">Connection</name></type> <name pos:line="480" pos:column="36">conn</name> <init pos:line="480" pos:column="41">= <expr><call><name><name pos:line="480" pos:column="43">Database</name><op:operator pos:line="480" pos:column="51">.</op:operator><name pos:line="480" pos:column="52">getConnection</name></name><argument_list pos:line="480" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="480" pos:column="68">//establish a connection </comment>

			<try pos:line="482" pos:column="25">try <block pos:line="482" pos:column="29">{
				<comment type="line" pos:line="483" pos:column="33">//updating the name to the new name for the specfic UIN</comment>
				<expr_stmt><expr><call><name><name pos:line="484" pos:column="33">System</name><op:operator pos:line="484" pos:column="39">.</op:operator><name pos:line="484" pos:column="40">out</name><op:operator pos:line="484" pos:column="43">.</op:operator><name pos:line="484" pos:column="44">println</name></name><argument_list pos:line="484" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="484" pos:column="52">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="485" pos:column="33">String</name></type> <name pos:line="485" pos:column="40">SQLPeopleInsert</name> <init pos:line="485" pos:column="56">= <expr><lit:literal type="string" pos:line="485" pos:column="58">"UPDATE people SET Name= ? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="486" pos:column="33">PreparedStatement</name></type> <name pos:line="486" pos:column="51">stmt</name> <init pos:line="486" pos:column="56">= <expr><call><name><name pos:line="486" pos:column="58">conn</name><op:operator pos:line="486" pos:column="62">.</op:operator><name pos:line="486" pos:column="63">prepareStatement</name></name><argument_list pos:line="486" pos:column="79">(<argument><expr><name pos:line="486" pos:column="80">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="487" pos:column="33">stmt</name><op:operator pos:line="487" pos:column="37">.</op:operator><name pos:line="487" pos:column="38">setString</name></name><argument_list pos:line="487" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="487" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="487" pos:column="51">newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="487" pos:column="60">//setting the new name</comment>
				<expr_stmt><expr><call><name><name pos:line="488" pos:column="33">stmt</name><op:operator pos:line="488" pos:column="37">.</op:operator><name pos:line="488" pos:column="38">setInt</name></name><argument_list pos:line="488" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="488" pos:column="45">2</lit:literal></expr></argument>, <argument><expr><name pos:line="488" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="488" pos:column="53">//for the given UIN</comment>
				<expr_stmt><expr><call><name><name pos:line="489" pos:column="33">System</name><op:operator pos:line="489" pos:column="39">.</op:operator><name pos:line="489" pos:column="40">out</name><op:operator pos:line="489" pos:column="43">.</op:operator><name pos:line="489" pos:column="44">println</name></name><argument_list pos:line="489" pos:column="51">(<argument><expr><name pos:line="489" pos:column="52">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="490" pos:column="33">int</name></type> <name pos:line="490" pos:column="37">i</name> <init pos:line="490" pos:column="39">= <expr><call><name><name pos:line="490" pos:column="41">stmt</name><op:operator pos:line="490" pos:column="45">.</op:operator><name pos:line="490" pos:column="46">executeUpdate</name></name><argument_list pos:line="490" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="490" pos:column="62">//execute the query</comment>
				
				<expr_stmt><expr><call><name><name pos:line="492" pos:column="33">DBAnnotation</name><op:operator pos:line="492" pos:column="45">.</op:operator><name pos:line="492" pos:column="46">annoate</name></name><argument_list pos:line="492" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="492" pos:column="54">"newName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="65">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="75">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="492" pos:column="83">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="493" pos:column="33">DBAnnotation</name><op:operator pos:line="493" pos:column="45">.</op:operator><name pos:line="493" pos:column="46">annoate</name></name><argument_list pos:line="493" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="493" pos:column="54">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="493" pos:column="61">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="493" pos:column="71">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="493" pos:column="78">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="495" pos:column="33">System</name><op:operator pos:line="495" pos:column="39">.</op:operator><name pos:line="495" pos:column="40">out</name><op:operator pos:line="495" pos:column="43">.</op:operator><name pos:line="495" pos:column="44">println</name></name><argument_list pos:line="495" pos:column="51">(<argument><expr><name pos:line="495" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">System</name><op:operator pos:line="496" pos:column="39">.</op:operator><name pos:line="496" pos:column="40">out</name><op:operator pos:line="496" pos:column="43">.</op:operator><name pos:line="496" pos:column="44">println</name></name><argument_list pos:line="496" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="496" pos:column="52">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="497" pos:column="33">isUpdated</name> <op:operator pos:line="497" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="497" pos:column="45">true</lit:literal></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name pos:line="499" pos:column="33">Database</name><op:operator pos:line="499" pos:column="41">.</op:operator><name pos:line="499" pos:column="42">commitTransaction</name></name><argument_list pos:line="499" pos:column="59">(<argument><expr><name pos:line="499" pos:column="60">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="499" pos:column="66">//commit the transaction</comment>

			}</block>

			<comment type="line" pos:line="503" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="504" pos:column="25">catch <parameter_list pos:line="504" pos:column="31">(<param><decl><type><name pos:line="504" pos:column="32">SQLException</name></type> <name pos:line="504" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="504" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="505" pos:column="33">System</name><op:operator pos:line="505" pos:column="39">.</op:operator><name pos:line="505" pos:column="40">out</name><op:operator pos:line="505" pos:column="43">.</op:operator><name pos:line="505" pos:column="44">println</name></name><argument_list pos:line="505" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="505" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="506" pos:column="33">System</name><op:operator pos:line="506" pos:column="39">.</op:operator><name pos:line="506" pos:column="40">out</name><op:operator pos:line="506" pos:column="43">.</op:operator><name pos:line="506" pos:column="44">println</name></name><argument_list pos:line="506" pos:column="51">(<argument><expr><name pos:line="506" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<comment type="block" pos:line="509" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
			<finally pos:line="511" pos:column="25">finally <block pos:line="511" pos:column="33">{
				<comment type="line" pos:line="512" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="513" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>

		<comment type="line" pos:line="517" pos:column="17">//the outer catch block catches the generla exception</comment>
		<catch pos:line="518" pos:column="17">catch <parameter_list pos:line="518" pos:column="23">(<param><decl><type><name pos:line="518" pos:column="24">Exception</name></type> <name pos:line="518" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="518" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="519" pos:column="25">System</name><op:operator pos:line="519" pos:column="31">.</op:operator><name pos:line="519" pos:column="32">out</name><op:operator pos:line="519" pos:column="35">.</op:operator><name pos:line="519" pos:column="36">println</name></name><argument_list pos:line="519" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="519" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="520" pos:column="25">System</name><op:operator pos:line="520" pos:column="31">.</op:operator><name pos:line="520" pos:column="32">out</name><op:operator pos:line="520" pos:column="35">.</op:operator><name pos:line="520" pos:column="36">println</name></name><argument_list pos:line="520" pos:column="43">(<argument><expr><name pos:line="520" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="523" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally pos:line="525" pos:column="17">finally <block pos:line="525" pos:column="25">{

			<comment type="line" pos:line="527" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="530" pos:column="17">return <expr><name pos:line="530" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="533" pos:column="9">/*Updating the department in the people table
	 * The parameters passed are the department ID and the UIN
	 * The return type is boolean 
	 * */</comment>

	<function><type><specifier pos:line="538" pos:column="9">public</specifier> <specifier pos:line="538" pos:column="16">static</specifier> <name pos:line="538" pos:column="23">boolean</name></type> <name pos:line="538" pos:column="31">updateDeptIntoPeopleTable</name><parameter_list pos:line="538" pos:column="56">(<param><decl><type><name pos:line="538" pos:column="57">int</name></type> <name pos:line="538" pos:column="61">deptID</name></decl></param>, <param><decl><type><name pos:line="538" pos:column="69">int</name></type> <name pos:line="538" pos:column="73">UIN</name></decl></param>)</parameter_list> <block pos:line="538" pos:column="78">{

		<decl_stmt><decl><type><name pos:line="540" pos:column="17">boolean</name></type> <name pos:line="540" pos:column="25">isUpdated</name> <init pos:line="540" pos:column="35">= <expr><lit:literal type="boolean" pos:line="540" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="540" pos:column="43">//create a boolean value for returning. set it to false</comment>

		<try pos:line="542" pos:column="17">try <block pos:line="542" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="543" pos:column="25">Connection</name></type> <name pos:line="543" pos:column="36">conn</name> <init pos:line="543" pos:column="41">= <expr><call><name><name pos:line="543" pos:column="43">Database</name><op:operator pos:line="543" pos:column="51">.</op:operator><name pos:line="543" pos:column="52">getConnection</name></name><argument_list pos:line="543" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="543" pos:column="68">//get the connection</comment>

			<try pos:line="545" pos:column="25">try <block pos:line="545" pos:column="29">{
				<comment type="line" pos:line="546" pos:column="33">//update the department of the passed UIN in the people table</comment>
				<expr_stmt><expr><call><name><name pos:line="547" pos:column="33">System</name><op:operator pos:line="547" pos:column="39">.</op:operator><name pos:line="547" pos:column="40">out</name><op:operator pos:line="547" pos:column="43">.</op:operator><name pos:line="547" pos:column="44">println</name></name><argument_list pos:line="547" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="547" pos:column="52">"Updating data in the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="548" pos:column="33">String</name></type> <name pos:line="548" pos:column="40">SQLDeptUpdate</name> <init pos:line="548" pos:column="54">= <expr><lit:literal type="string" pos:line="548" pos:column="56">"UPDATE people SET DepartmentID= ? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="549" pos:column="33">PreparedStatement</name></type> <name pos:line="549" pos:column="51">stmt</name> <init pos:line="549" pos:column="56">= <expr><call><name><name pos:line="549" pos:column="58">conn</name><op:operator pos:line="549" pos:column="62">.</op:operator><name pos:line="549" pos:column="63">prepareStatement</name></name><argument_list pos:line="549" pos:column="79">(<argument><expr><name pos:line="549" pos:column="80">SQLDeptUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="550" pos:column="33">stmt</name><op:operator pos:line="550" pos:column="37">.</op:operator><name pos:line="550" pos:column="38">setInt</name></name><argument_list pos:line="550" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="550" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="550" pos:column="48">deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="550" pos:column="56">//set the new Dept</comment>
				<expr_stmt><expr><call><name><name pos:line="551" pos:column="33">stmt</name><op:operator pos:line="551" pos:column="37">.</op:operator><name pos:line="551" pos:column="38">setInt</name></name><argument_list pos:line="551" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="551" pos:column="45">2</lit:literal></expr></argument>, <argument><expr><name pos:line="551" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="551" pos:column="53">//for this UIN</comment>
				<expr_stmt><expr><call><name><name pos:line="552" pos:column="33">System</name><op:operator pos:line="552" pos:column="39">.</op:operator><name pos:line="552" pos:column="40">out</name><op:operator pos:line="552" pos:column="43">.</op:operator><name pos:line="552" pos:column="44">println</name></name><argument_list pos:line="552" pos:column="51">(<argument><expr><name pos:line="552" pos:column="52">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="553" pos:column="33">int</name></type> <name pos:line="553" pos:column="37">i</name> <init pos:line="553" pos:column="39">= <expr><call><name><name pos:line="553" pos:column="41">stmt</name><op:operator pos:line="553" pos:column="45">.</op:operator><name pos:line="553" pos:column="46">executeUpdate</name></name><argument_list pos:line="553" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="553" pos:column="62">//execute the query.</comment>
				
				<expr_stmt><expr><call><name><name pos:line="555" pos:column="33">DBAnnotation</name><op:operator pos:line="555" pos:column="45">.</op:operator><name pos:line="555" pos:column="46">annoate</name></name><argument_list pos:line="555" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="555" pos:column="54">"deptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="555" pos:column="64">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="555" pos:column="74">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="555" pos:column="90">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="556" pos:column="33">DBAnnotation</name><op:operator pos:line="556" pos:column="45">.</op:operator><name pos:line="556" pos:column="46">annoate</name></name><argument_list pos:line="556" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="556" pos:column="54">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="556" pos:column="61">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="556" pos:column="71">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="556" pos:column="78">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="558" pos:column="33">System</name><op:operator pos:line="558" pos:column="39">.</op:operator><name pos:line="558" pos:column="40">out</name><op:operator pos:line="558" pos:column="43">.</op:operator><name pos:line="558" pos:column="44">println</name></name><argument_list pos:line="558" pos:column="51">(<argument><expr><name pos:line="558" pos:column="52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="559" pos:column="33">System</name><op:operator pos:line="559" pos:column="39">.</op:operator><name pos:line="559" pos:column="40">out</name><op:operator pos:line="559" pos:column="43">.</op:operator><name pos:line="559" pos:column="44">println</name></name><argument_list pos:line="559" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="52">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="560" pos:column="33">isUpdated</name> <op:operator pos:line="560" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="560" pos:column="45">true</lit:literal></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name pos:line="562" pos:column="33">Database</name><op:operator pos:line="562" pos:column="41">.</op:operator><name pos:line="562" pos:column="42">commitTransaction</name></name><argument_list pos:line="562" pos:column="59">(<argument><expr><name pos:line="562" pos:column="60">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="562" pos:column="66">//commit the transaction </comment>

			}</block>

			<comment type="line" pos:line="566" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="567" pos:column="25">catch <parameter_list pos:line="567" pos:column="31">(<param><decl><type><name pos:line="567" pos:column="32">SQLException</name></type> <name pos:line="567" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="567" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="568" pos:column="33">System</name><op:operator pos:line="568" pos:column="39">.</op:operator><name pos:line="568" pos:column="40">out</name><op:operator pos:line="568" pos:column="43">.</op:operator><name pos:line="568" pos:column="44">println</name></name><argument_list pos:line="568" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="568" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="569" pos:column="33">System</name><op:operator pos:line="569" pos:column="39">.</op:operator><name pos:line="569" pos:column="40">out</name><op:operator pos:line="569" pos:column="43">.</op:operator><name pos:line="569" pos:column="44">println</name></name><argument_list pos:line="569" pos:column="51">(<argument><expr><name pos:line="569" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>


			<comment type="block" pos:line="573" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>
			<finally pos:line="575" pos:column="25">finally <block pos:line="575" pos:column="33">{
				<comment type="line" pos:line="576" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="577" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="580" pos:column="17">//the outer catch block catches the generla exception</comment>
		<catch pos:line="581" pos:column="17">catch <parameter_list pos:line="581" pos:column="23">(<param><decl><type><name pos:line="581" pos:column="24">Exception</name></type> <name pos:line="581" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="581" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="582" pos:column="25">System</name><op:operator pos:line="582" pos:column="31">.</op:operator><name pos:line="582" pos:column="32">out</name><op:operator pos:line="582" pos:column="35">.</op:operator><name pos:line="582" pos:column="36">println</name></name><argument_list pos:line="582" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="582" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="583" pos:column="25">System</name><op:operator pos:line="583" pos:column="31">.</op:operator><name pos:line="583" pos:column="32">out</name><op:operator pos:line="583" pos:column="35">.</op:operator><name pos:line="583" pos:column="36">println</name></name><argument_list pos:line="583" pos:column="43">(<argument><expr><name pos:line="583" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="587" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>

		<finally pos:line="590" pos:column="17">finally <block pos:line="590" pos:column="25">{

			<comment type="line" pos:line="592" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="595" pos:column="17">return <expr><name pos:line="595" pos:column="24">isUpdated</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="598" pos:column="9">/*The function is mainly used for checking if the user name exists in the login details table
	 * The parameter passed is the username that is to be checked
	 * The return type is boolean 
	 * */</comment>
	<function><type><specifier pos:line="602" pos:column="9">public</specifier> <specifier pos:line="602" pos:column="16">static</specifier> <name pos:line="602" pos:column="23">boolean</name></type> <name pos:line="602" pos:column="31">addUserDetailsIntoLoginTableCheck</name><parameter_list pos:line="602" pos:column="64">(<param><decl><type><name pos:line="602" pos:column="65">String</name></type> <name pos:line="602" pos:column="72">userName</name></decl></param>)</parameter_list> <block pos:line="602" pos:column="82">{

		<decl_stmt><decl><type><name pos:line="604" pos:column="17">boolean</name></type> <name pos:line="604" pos:column="25">isExisting</name> <init pos:line="604" pos:column="36">= <expr><lit:literal type="boolean" pos:line="604" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="604" pos:column="44">//create a boolean value for returning. set it to false</comment>

		<try pos:line="606" pos:column="17">try <block pos:line="606" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="607" pos:column="25">Connection</name></type> <name pos:line="607" pos:column="36">conn</name> <init pos:line="607" pos:column="41">= <expr><call><name><name pos:line="607" pos:column="43">Database</name><op:operator pos:line="607" pos:column="51">.</op:operator><name pos:line="607" pos:column="52">getConnection</name></name><argument_list pos:line="607" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="607" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="608" pos:column="25">String</name></type> <name pos:line="608" pos:column="32">SQLPeopleSelect</name> <init pos:line="608" pos:column="48">= <expr><lit:literal type="string" pos:line="608" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="610" pos:column="25">try <block pos:line="610" pos:column="29">{

				<comment type="line" pos:line="612" pos:column="33">//select the username from the login table where the passed username is the new username</comment>
				<expr_stmt><expr><name pos:line="613" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="613" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="613" pos:column="51">"Select Username From logindetails where Username=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="614" pos:column="33">PreparedStatement</name></type> <name pos:line="614" pos:column="51">stmt</name> <init pos:line="614" pos:column="56">= <expr><call><name><name pos:line="614" pos:column="58">conn</name><op:operator pos:line="614" pos:column="62">.</op:operator><name pos:line="614" pos:column="63">prepareStatement</name></name><argument_list pos:line="614" pos:column="79">(<argument><expr><name pos:line="614" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="615" pos:column="33">stmt</name><op:operator pos:line="615" pos:column="37">.</op:operator><name pos:line="615" pos:column="38">setString</name></name><argument_list pos:line="615" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="615" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="615" pos:column="51">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="616" pos:column="33">ResultSet</name></type> <name pos:line="616" pos:column="43">rs</name> <init pos:line="616" pos:column="46">= <expr><call><name><name pos:line="616" pos:column="48">stmt</name><op:operator pos:line="616" pos:column="52">.</op:operator><name pos:line="616" pos:column="53">executeQuery</name></name><argument_list pos:line="616" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="616" pos:column="68">//execute the query.</comment>

				<if pos:line="618" pos:column="33">if <condition pos:line="618" pos:column="36">(<expr><call><name><name pos:line="618" pos:column="37">rs</name><op:operator pos:line="618" pos:column="39">.</op:operator><name pos:line="618" pos:column="40">first</name></name><argument_list pos:line="618" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="618" pos:column="48"> <block pos:line="618" pos:column="49">{
					<comment type="line" pos:line="619" pos:column="41">//if there exists a successful resultset then return true</comment>
					<return pos:line="620" pos:column="41">return <expr><lit:literal type="boolean" pos:line="620" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="624" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="625" pos:column="25">catch <parameter_list pos:line="625" pos:column="31">(<param><decl><type><name pos:line="625" pos:column="32">SQLException</name></type> <name pos:line="625" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="625" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="626" pos:column="33">System</name><op:operator pos:line="626" pos:column="39">.</op:operator><name pos:line="626" pos:column="40">out</name><op:operator pos:line="626" pos:column="43">.</op:operator><name pos:line="626" pos:column="44">println</name></name><argument_list pos:line="626" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="626" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="627" pos:column="33">System</name><op:operator pos:line="627" pos:column="39">.</op:operator><name pos:line="627" pos:column="40">out</name><op:operator pos:line="627" pos:column="43">.</op:operator><name pos:line="627" pos:column="44">println</name></name><argument_list pos:line="627" pos:column="51">(<argument><expr><name pos:line="627" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			<comment type="block" pos:line="629" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
			<finally pos:line="631" pos:column="25">finally <block pos:line="631" pos:column="33">{
				<comment type="line" pos:line="632" pos:column="33">// System.out.println("retrieved");</comment>
				<comment type="line" pos:line="633" pos:column="33">// Database.closeConnection(conn);</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="636" pos:column="17">//The outer catch block catches the general  exception.</comment>
		<catch pos:line="637" pos:column="17">catch <parameter_list pos:line="637" pos:column="23">(<param><decl><type><name pos:line="637" pos:column="24">Exception</name></type> <name pos:line="637" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="637" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="638" pos:column="25">System</name><op:operator pos:line="638" pos:column="31">.</op:operator><name pos:line="638" pos:column="32">out</name><op:operator pos:line="638" pos:column="35">.</op:operator><name pos:line="638" pos:column="36">println</name></name><argument_list pos:line="638" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="638" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="639" pos:column="25">System</name><op:operator pos:line="639" pos:column="31">.</op:operator><name pos:line="639" pos:column="32">out</name><op:operator pos:line="639" pos:column="35">.</op:operator><name pos:line="639" pos:column="36">println</name></name><argument_list pos:line="639" pos:column="43">(<argument><expr><name pos:line="639" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="642" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally pos:line="644" pos:column="17">finally <block pos:line="644" pos:column="25">{

			<comment type="line" pos:line="646" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="649" pos:column="17">return <expr><name pos:line="649" pos:column="24">isExisting</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="652" pos:column="9">/*add the user into database which generates username and password and adds into people table
	 * for the name passed generate a unique username
	 * generate a random password
	 * then add into the login table and then add into the people table
	 * return the UIN of the added person
	*/</comment>
	<function><type><specifier pos:line="658" pos:column="9">public</specifier> <specifier pos:line="658" pos:column="16">static</specifier> <name pos:line="658" pos:column="23">int</name></type> <name pos:line="658" pos:column="27">addIntoDatabase</name><parameter_list pos:line="658" pos:column="42">(<param><decl><type><name pos:line="658" pos:column="43">String</name></type> <name pos:line="658" pos:column="50">name</name></decl></param>, <param><decl><type><name pos:line="658" pos:column="56">Department</name></type> <name pos:line="658" pos:column="67">dept</name></decl></param>,<param><decl><type><name pos:line="658" pos:column="72">int</name></type> <name pos:line="658" pos:column="76">positionId</name></decl></param>)</parameter_list> <throws pos:line="658" pos:column="88">throws <argument><expr><name pos:line="658" pos:column="95">loginDetailsnotAdded</name></expr></argument></throws> <block pos:line="658" pos:column="116">{

		<comment type="line" pos:line="660" pos:column="17">// generate a user name from name</comment>
		<decl_stmt><decl><type><name pos:line="661" pos:column="17">String</name></type> <name pos:line="661" pos:column="24">userName</name> <init pos:line="661" pos:column="33">= <expr><lit:literal type="string" pos:line="661" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="662" pos:column="17">int</name></type> <name pos:line="662" pos:column="21">addedUIN</name> <init pos:line="662" pos:column="30">= <expr><op:operator pos:line="662" pos:column="32">-</op:operator><lit:literal type="number" pos:line="662" pos:column="33">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="663" pos:column="17">int</name></type> <name pos:line="663" pos:column="21">lengthOfName</name> <init pos:line="663" pos:column="34">= <expr><call><name><name pos:line="663" pos:column="36">name</name><op:operator pos:line="663" pos:column="40">.</op:operator><name pos:line="663" pos:column="41">length</name></name><argument_list pos:line="663" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="663" pos:column="50">//get the length of the name</comment>
		<if pos:line="664" pos:column="17">if <condition pos:line="664" pos:column="20">(<expr><name pos:line="664" pos:column="21">lengthOfName</name> <op:operator pos:line="664" pos:column="34">&lt;=</op:operator> <lit:literal type="number" pos:line="664" pos:column="37">5</lit:literal></expr>)</condition><then pos:line="664" pos:column="39"> <block pos:line="664" pos:column="40">{
			<expr_stmt><expr><name pos:line="665" pos:column="25">userName</name> <op:operator pos:line="665" pos:column="34">=</op:operator> <name pos:line="665" pos:column="36">name</name></expr>;</expr_stmt><comment type="line" pos:line="665" pos:column="41">// if the length of the name is &lt;=5 then name is the same as username</comment>

		}</block></then> <else pos:line="667" pos:column="19">else <block pos:line="667" pos:column="24">{
			<expr_stmt><expr><name pos:line="668" pos:column="25">userName</name> <op:operator pos:line="668" pos:column="34">=</op:operator> <call><name><name pos:line="668" pos:column="36">name</name><op:operator pos:line="668" pos:column="40">.</op:operator><name pos:line="668" pos:column="41">substring</name></name><argument_list pos:line="668" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="668" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="668" pos:column="54">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="668" pos:column="57">//else get a substring </comment>
		}</block></else></if>

		<comment type="line" pos:line="671" pos:column="17">// check if it already exists</comment>

		<comment type="line" pos:line="673" pos:column="17">// put in a while loop and generate new</comment>

		<while pos:line="675" pos:column="17">while <condition pos:line="675" pos:column="23">(<expr><call><name pos:line="675" pos:column="24">checkIfUserNameExists</name><argument_list pos:line="675" pos:column="45">(<argument><expr><name pos:line="675" pos:column="46">userName</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="675" pos:column="57">{<comment type="line" pos:line="675" pos:column="58">// the while loop checks if the username exists already</comment>
			<decl_stmt><decl><type><name pos:line="676" pos:column="25">Random</name></type> <name pos:line="676" pos:column="32">randomNumber</name> <init pos:line="676" pos:column="45">= <expr><op:operator pos:line="676" pos:column="47">new</op:operator> <call><name pos:line="676" pos:column="51">Random</name><argument_list pos:line="676" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="677" pos:column="25">userName</name> <op:operator pos:line="677" pos:column="34">=</op:operator> <op:operator pos:line="677" pos:column="36">(</op:operator><name pos:line="677" pos:column="37">userName</name> <op:operator pos:line="677" pos:column="46">+</op:operator> <call><name><name pos:line="677" pos:column="48">randomNumber</name><op:operator pos:line="677" pos:column="60">.</op:operator><name pos:line="677" pos:column="61">nextInt</name></name><argument_list pos:line="677" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="677" pos:column="69">99</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="677" pos:column="72">)</op:operator></expr>;</expr_stmt><comment type="line" pos:line="677" pos:column="74">//append a random number to the username</comment>

		}</block></while>

		<comment type="line" pos:line="681" pos:column="17">// generate a random password</comment>
		<decl_stmt><decl><type><name pos:line="682" pos:column="17">String</name></type> <name pos:line="682" pos:column="24">randomPassword</name> <init pos:line="682" pos:column="39">= <expr><call><name pos:line="682" pos:column="41">generatePassword</name><argument_list pos:line="682" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="682" pos:column="58">8</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="682" pos:column="61">//returns a random password</comment>

		<comment type="line" pos:line="684" pos:column="17">// add into login details</comment>
		<expr_stmt><expr><name pos:line="685" pos:column="17">userName</name> <op:operator pos:line="685" pos:column="26">=</op:operator> <call><name><name pos:line="685" pos:column="28">userName</name><op:operator pos:line="685" pos:column="36">.</op:operator><name pos:line="685" pos:column="37">toLowerCase</name></name><argument_list pos:line="685" pos:column="48">()</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="685" pos:column="51">//converting the username to lower case</comment>
		<decl_stmt><decl><type><name pos:line="686" pos:column="17">boolean</name></type> <name pos:line="686" pos:column="25">isAdded</name> <init pos:line="686" pos:column="33">= <expr><call><name pos:line="686" pos:column="35">addUserDetailsIntoLoginTable</name><argument_list pos:line="686" pos:column="63">(<argument><expr><name pos:line="686" pos:column="64">userName</name></expr></argument>, <argument><expr><name pos:line="686" pos:column="74">randomPassword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="686" pos:column="90">//returns a boolean true if added to the login table</comment>

		<if pos:line="688" pos:column="17">if <condition pos:line="688" pos:column="20">(<expr><name pos:line="688" pos:column="21">isAdded</name></expr>)</condition><then pos:line="688" pos:column="29"> <block pos:line="688" pos:column="30">{<comment type="line" pos:line="688" pos:column="31">// add into people table</comment>


			<try pos:line="691" pos:column="25">try <block pos:line="691" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="692" pos:column="33">Connection</name></type> <name pos:line="692" pos:column="44">conn</name> <init pos:line="692" pos:column="49">= <expr><call><name><name pos:line="692" pos:column="51">Database</name><op:operator pos:line="692" pos:column="59">.</op:operator><name pos:line="692" pos:column="60">getConnection</name></name><argument_list pos:line="692" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="692" pos:column="76">//get a connection</comment>

				<try pos:line="694" pos:column="33">try <block pos:line="694" pos:column="37">{

					<decl_stmt><decl><type><name pos:line="696" pos:column="41">boolean</name></type> <name pos:line="696" pos:column="49">isExisting</name> <init pos:line="696" pos:column="60">= <expr><call><name pos:line="696" pos:column="62">addIntoDatabaseCheck</name><argument_list pos:line="696" pos:column="82">(<argument><expr><name pos:line="696" pos:column="83">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="696" pos:column="93">//check if the username already exists in the people table</comment>

					<if pos:line="698" pos:column="41">if <condition pos:line="698" pos:column="44">(<expr><name pos:line="698" pos:column="45">isExisting</name></expr>)</condition><then pos:line="698" pos:column="56"> <block pos:line="698" pos:column="57">{
						<return pos:line="699" pos:column="49">return <expr><op:operator pos:line="699" pos:column="56">-</op:operator><lit:literal type="number" pos:line="699" pos:column="57">1</lit:literal></expr>;</return><comment type="line" pos:line="699" pos:column="59">// this returns a -1, that indicates that the person was not added</comment>
					}</block></then>

					<else pos:line="702" pos:column="41">else <block pos:line="702" pos:column="46">{
						<comment type="line" pos:line="703" pos:column="49">//add the new person into the people table</comment>
						<decl_stmt><decl><type><name pos:line="704" pos:column="49">int</name></type> <name pos:line="704" pos:column="53">getDeptID</name><init pos:line="704" pos:column="62">=<expr><call><name><name pos:line="704" pos:column="63">dept</name><op:operator pos:line="704" pos:column="67">.</op:operator><name pos:line="704" pos:column="68">getDepartmentID</name></name><argument_list pos:line="704" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="705" pos:column="49">System</name><op:operator pos:line="705" pos:column="55">.</op:operator><name pos:line="705" pos:column="56">out</name><op:operator pos:line="705" pos:column="59">.</op:operator><name pos:line="705" pos:column="60">println</name></name><argument_list pos:line="705" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="705" pos:column="68">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name pos:line="707" pos:column="49">String</name></type> <name pos:line="707" pos:column="56">SQLPeopleInsert</name> <init pos:line="707" pos:column="72">= <expr><lit:literal type="string" pos:line="707" pos:column="74">"Insert into People (Name, Username, DepartmentID, PositionID) Values (?,?,?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="708" pos:column="49">PreparedStatement</name></type> <name pos:line="708" pos:column="67">stmt</name> <init pos:line="708" pos:column="72">= <expr><call><name><name pos:line="708" pos:column="74">conn</name><op:operator pos:line="708" pos:column="78">.</op:operator><name pos:line="708" pos:column="79">prepareStatement</name></name><argument_list pos:line="708" pos:column="95">(<argument><expr><name pos:line="708" pos:column="96">SQLPeopleInsert</name></expr></argument>,<argument><expr><name><name pos:line="708" pos:column="112">Statement</name><op:operator pos:line="708" pos:column="121">.</op:operator><name pos:line="708" pos:column="122">RETURN_GENERATED_KEYS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="709" pos:column="49">stmt</name><op:operator pos:line="709" pos:column="53">.</op:operator><name pos:line="709" pos:column="54">setString</name></name><argument_list pos:line="709" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="709" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="709" pos:column="67">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="709" pos:column="73">//set the name </comment>
						<expr_stmt><expr><call><name><name pos:line="710" pos:column="49">stmt</name><op:operator pos:line="710" pos:column="53">.</op:operator><name pos:line="710" pos:column="54">setString</name></name><argument_list pos:line="710" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="710" pos:column="64">2</lit:literal></expr></argument>, <argument><expr><name pos:line="710" pos:column="67">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="710" pos:column="77">//set the username</comment>
						<expr_stmt><expr><call><name><name pos:line="711" pos:column="49">stmt</name><op:operator pos:line="711" pos:column="53">.</op:operator><name pos:line="711" pos:column="54">setInt</name></name><argument_list pos:line="711" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="711" pos:column="61">3</lit:literal></expr></argument>, <argument><expr><name pos:line="711" pos:column="64">getDeptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="711" pos:column="75">//set the department</comment>
						<expr_stmt><expr><call><name><name pos:line="712" pos:column="49">stmt</name><op:operator pos:line="712" pos:column="53">.</op:operator><name pos:line="712" pos:column="54">setInt</name></name><argument_list pos:line="712" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="712" pos:column="61">4</lit:literal></expr></argument>, <argument><expr><name pos:line="712" pos:column="64">positionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="712" pos:column="76">//set the position ID</comment>
						<expr_stmt><expr><call><name><name pos:line="713" pos:column="49">System</name><op:operator pos:line="713" pos:column="55">.</op:operator><name pos:line="713" pos:column="56">out</name><op:operator pos:line="713" pos:column="59">.</op:operator><name pos:line="713" pos:column="60">println</name></name><argument_list pos:line="713" pos:column="67">(<argument><expr><name pos:line="713" pos:column="68">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="714" pos:column="49">int</name></type> <name pos:line="714" pos:column="53">i</name> <init pos:line="714" pos:column="55">= <expr><call><name><name pos:line="714" pos:column="57">stmt</name><op:operator pos:line="714" pos:column="61">.</op:operator><name pos:line="714" pos:column="62">executeUpdate</name></name><argument_list pos:line="714" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="714" pos:column="78">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="716" pos:column="49">DBAnnotation</name><op:operator pos:line="716" pos:column="61">.</op:operator><name pos:line="716" pos:column="62">annoate</name></name><argument_list pos:line="716" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="716" pos:column="70">"name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="716" pos:column="78">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="716" pos:column="88">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="716" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="717" pos:column="49">DBAnnotation</name><op:operator pos:line="717" pos:column="61">.</op:operator><name pos:line="717" pos:column="62">annoate</name></name><argument_list pos:line="717" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="717" pos:column="70">"userName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="717" pos:column="82">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="717" pos:column="92">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="717" pos:column="104">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="718" pos:column="49">DBAnnotation</name><op:operator pos:line="718" pos:column="61">.</op:operator><name pos:line="718" pos:column="62">annoate</name></name><argument_list pos:line="718" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="718" pos:column="70">"getDeptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="718" pos:column="83">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="718" pos:column="93">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="718" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="719" pos:column="49">DBAnnotation</name><op:operator pos:line="719" pos:column="61">.</op:operator><name pos:line="719" pos:column="62">annoate</name></name><argument_list pos:line="719" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="719" pos:column="70">"positionId"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="719" pos:column="84">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="719" pos:column="94">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="719" pos:column="108">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name pos:line="721" pos:column="49">ResultSet</name></type> <name pos:line="721" pos:column="59">rs</name> <init pos:line="721" pos:column="62">= <expr><call><name><name pos:line="721" pos:column="64">stmt</name><op:operator pos:line="721" pos:column="68">.</op:operator><name pos:line="721" pos:column="69">getGeneratedKeys</name></name><argument_list pos:line="721" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="722" pos:column="49">if <condition pos:line="722" pos:column="52">(<expr><call><name><name pos:line="722" pos:column="53">rs</name><op:operator pos:line="722" pos:column="55">.</op:operator><name pos:line="722" pos:column="56">first</name></name><argument_list pos:line="722" pos:column="61">()</argument_list></call></expr>)</condition><then pos:line="722" pos:column="64">
							<expr_stmt><expr><name pos:line="723" pos:column="57">addedUIN</name> <op:operator pos:line="723" pos:column="66">=</op:operator> <call><name><name pos:line="723" pos:column="68">rs</name><op:operator pos:line="723" pos:column="70">.</op:operator><name pos:line="723" pos:column="71">getInt</name></name><argument_list pos:line="723" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="723" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if><comment type="line" pos:line="723" pos:column="81">// this is to retrieve the latest added UIN</comment>
						<expr_stmt><expr><call><name><name pos:line="724" pos:column="49">System</name><op:operator pos:line="724" pos:column="55">.</op:operator><name pos:line="724" pos:column="56">out</name><op:operator pos:line="724" pos:column="59">.</op:operator><name pos:line="724" pos:column="60">println</name></name><argument_list pos:line="724" pos:column="67">(<argument><expr><call><name><name pos:line="724" pos:column="68">rs</name><op:operator pos:line="724" pos:column="70">.</op:operator><name pos:line="724" pos:column="71">getInt</name></name><argument_list pos:line="724" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="724" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="725" pos:column="49">System</name><op:operator pos:line="725" pos:column="55">.</op:operator><name pos:line="725" pos:column="56">out</name><op:operator pos:line="725" pos:column="59">.</op:operator><name pos:line="725" pos:column="60">println</name></name><argument_list pos:line="725" pos:column="67">(<argument><expr><name pos:line="725" pos:column="68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="line" pos:line="726" pos:column="49">// Database.commitTransaction(conn);</comment>
					}</block></else></if>

				}</block>

				<comment type="line" pos:line="731" pos:column="33">//The inner catch block catches the SQL exception.</comment>
				<catch pos:line="732" pos:column="33">catch <parameter_list pos:line="732" pos:column="39">(<param><decl><type><name pos:line="732" pos:column="40">SQLException</name></type> <name pos:line="732" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="732" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="733" pos:column="41">System</name><op:operator pos:line="733" pos:column="47">.</op:operator><name pos:line="733" pos:column="48">out</name><op:operator pos:line="733" pos:column="51">.</op:operator><name pos:line="733" pos:column="52">println</name></name><argument_list pos:line="733" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="733" pos:column="60">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="734" pos:column="41">e</name><op:operator pos:line="734" pos:column="42">.</op:operator><name pos:line="734" pos:column="43">printStackTrace</name></name><argument_list pos:line="734" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="735" pos:column="41">System</name><op:operator pos:line="735" pos:column="47">.</op:operator><name pos:line="735" pos:column="48">out</name><op:operator pos:line="735" pos:column="51">.</op:operator><name pos:line="735" pos:column="52">println</name></name><argument_list pos:line="735" pos:column="59">(<argument><expr><name pos:line="735" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch>
				<comment type="block" pos:line="737" pos:column="33">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
				<finally pos:line="739" pos:column="33">finally <block pos:line="739" pos:column="41">{
					<comment type="line" pos:line="740" pos:column="41">// System.out.println("retrieved");</comment>
				}</block></finally></try>
			}</block>
			<comment type="line" pos:line="743" pos:column="25">//the outer catch block catches the generla exception</comment>
			<catch pos:line="744" pos:column="25">catch <parameter_list pos:line="744" pos:column="31">(<param><decl><type><name pos:line="744" pos:column="32">Exception</name></type> <name pos:line="744" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="744" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="745" pos:column="33">System</name><op:operator pos:line="745" pos:column="39">.</op:operator><name pos:line="745" pos:column="40">out</name><op:operator pos:line="745" pos:column="43">.</op:operator><name pos:line="745" pos:column="44">println</name></name><argument_list pos:line="745" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="745" pos:column="52">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="746" pos:column="33">System</name><op:operator pos:line="746" pos:column="39">.</op:operator><name pos:line="746" pos:column="40">out</name><op:operator pos:line="746" pos:column="43">.</op:operator><name pos:line="746" pos:column="44">println</name></name><argument_list pos:line="746" pos:column="51">(<argument><expr><name pos:line="746" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="749" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
			<finally pos:line="751" pos:column="25">finally <block pos:line="751" pos:column="33">{

				<comment type="line" pos:line="753" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>

			<return pos:line="756" pos:column="25">return <expr><name pos:line="756" pos:column="32">addedUIN</name></expr>;</return>

		}</block></then>

		<else pos:line="760" pos:column="17">else <block pos:line="760" pos:column="22">{
			<comment type="line" pos:line="761" pos:column="25">//if the login is not added then login not added exception is thrown. </comment>
			<throw pos:line="762" pos:column="25">throw <expr><op:operator pos:line="762" pos:column="31">new</op:operator> <call><name pos:line="762" pos:column="35">loginDetailsnotAdded</name><argument_list pos:line="762" pos:column="55">()</argument_list></call></expr>;</throw>
		}</block></else></if>

	}</block></function>
	<comment type="line" pos:line="766" pos:column="9">//this function is to mainly check if the passed username exists in the table or not</comment>
	<function><type><specifier pos:line="767" pos:column="9">public</specifier> <specifier pos:line="767" pos:column="16">static</specifier> <name pos:line="767" pos:column="23">boolean</name></type> <name pos:line="767" pos:column="31">addIntoDatabaseCheck</name><parameter_list pos:line="767" pos:column="51">(<param><decl><type><name pos:line="767" pos:column="52">String</name></type> <name pos:line="767" pos:column="59">userName</name></decl></param>)</parameter_list> <throws pos:line="767" pos:column="69">throws <argument><expr><name pos:line="767" pos:column="76">loginDetailsnotAdded</name></expr></argument></throws> <block pos:line="767" pos:column="97">{
		
		<decl_stmt><decl><type><name pos:line="769" pos:column="17">boolean</name></type> <name pos:line="769" pos:column="25">isExisting</name> <init pos:line="769" pos:column="36">= <expr><lit:literal type="boolean" pos:line="769" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="769" pos:column="44">//create a boolean value for returning. set it to false</comment>

		<try pos:line="771" pos:column="17">try <block pos:line="771" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="772" pos:column="25">Connection</name></type> <name pos:line="772" pos:column="36">conn</name> <init pos:line="772" pos:column="41">= <expr><call><name><name pos:line="772" pos:column="43">Database</name><op:operator pos:line="772" pos:column="51">.</op:operator><name pos:line="772" pos:column="52">getConnection</name></name><argument_list pos:line="772" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="772" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="773" pos:column="25">String</name></type> <name pos:line="773" pos:column="32">SQLPeopleSelect</name> <init pos:line="773" pos:column="48">= <expr><lit:literal type="string" pos:line="773" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="775" pos:column="25">try <block pos:line="775" pos:column="29">{
				<comment type="line" pos:line="776" pos:column="33">//select the person with the username passed</comment>
				<expr_stmt><expr><name pos:line="777" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="777" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="777" pos:column="51">"Select UIN, Name, Username, DepartmentID, PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="778" pos:column="33">PreparedStatement</name></type> <name pos:line="778" pos:column="51">stmt</name> <init pos:line="778" pos:column="56">= <expr><call><name><name pos:line="778" pos:column="58">conn</name><op:operator pos:line="778" pos:column="62">.</op:operator><name pos:line="778" pos:column="63">prepareStatement</name></name><argument_list pos:line="778" pos:column="79">(<argument><expr><name pos:line="778" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="779" pos:column="33">stmt</name><op:operator pos:line="779" pos:column="37">.</op:operator><name pos:line="779" pos:column="38">setString</name></name><argument_list pos:line="779" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="779" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="779" pos:column="51">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="780" pos:column="33">ResultSet</name></type> <name pos:line="780" pos:column="43">rs</name> <init pos:line="780" pos:column="46">= <expr><call><name><name pos:line="780" pos:column="48">stmt</name><op:operator pos:line="780" pos:column="52">.</op:operator><name pos:line="780" pos:column="53">executeQuery</name></name><argument_list pos:line="780" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="780" pos:column="68">//execute the query</comment>

				<if pos:line="782" pos:column="33">if <condition pos:line="782" pos:column="36">(<expr><call><name><name pos:line="782" pos:column="37">rs</name><op:operator pos:line="782" pos:column="39">.</op:operator><name pos:line="782" pos:column="40">first</name></name><argument_list pos:line="782" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="782" pos:column="48"> <block pos:line="782" pos:column="49">{
					<comment type="line" pos:line="783" pos:column="41">//if the resultset exists then return true</comment>
					<return pos:line="784" pos:column="41">return <expr><lit:literal type="boolean" pos:line="784" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="788" pos:column="25">//catch the SQl exception</comment>
			<catch pos:line="789" pos:column="25">catch <parameter_list pos:line="789" pos:column="31">(<param><decl><type><name pos:line="789" pos:column="32">SQLException</name></type> <name pos:line="789" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="789" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="790" pos:column="33">System</name><op:operator pos:line="790" pos:column="39">.</op:operator><name pos:line="790" pos:column="40">out</name><op:operator pos:line="790" pos:column="43">.</op:operator><name pos:line="790" pos:column="44">println</name></name><argument_list pos:line="790" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="790" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="791" pos:column="33">e</name><op:operator pos:line="791" pos:column="34">.</op:operator><name pos:line="791" pos:column="35">printStackTrace</name></name><argument_list pos:line="791" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="792" pos:column="33">System</name><op:operator pos:line="792" pos:column="39">.</op:operator><name pos:line="792" pos:column="40">out</name><op:operator pos:line="792" pos:column="43">.</op:operator><name pos:line="792" pos:column="44">println</name></name><argument_list pos:line="792" pos:column="51">(<argument><expr><name pos:line="792" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="795" pos:column="25">finally <block pos:line="795" pos:column="33">{
				<comment type="line" pos:line="796" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="799" pos:column="17">//catch the exception</comment>
		<catch pos:line="800" pos:column="17">catch <parameter_list pos:line="800" pos:column="23">(<param><decl><type><name pos:line="800" pos:column="24">Exception</name></type> <name pos:line="800" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="800" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="801" pos:column="25">System</name><op:operator pos:line="801" pos:column="31">.</op:operator><name pos:line="801" pos:column="32">out</name><op:operator pos:line="801" pos:column="35">.</op:operator><name pos:line="801" pos:column="36">println</name></name><argument_list pos:line="801" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="801" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="802" pos:column="25">System</name><op:operator pos:line="802" pos:column="31">.</op:operator><name pos:line="802" pos:column="32">out</name><op:operator pos:line="802" pos:column="35">.</op:operator><name pos:line="802" pos:column="36">println</name></name><argument_list pos:line="802" pos:column="43">(<argument><expr><name pos:line="802" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<comment type="block" pos:line="806" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally pos:line="808" pos:column="17">finally <block pos:line="808" pos:column="25">{

			<comment type="line" pos:line="810" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="813" pos:column="17">return <expr><name pos:line="813" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="817" pos:column="9">/*The delete function takes in the UIN of the user
	The return type is boolean*/</comment>
	<function><type><specifier pos:line="819" pos:column="9">public</specifier> <specifier pos:line="819" pos:column="16">static</specifier> <name pos:line="819" pos:column="23">boolean</name></type> <name pos:line="819" pos:column="31">deleteFromDatabaseByUIN</name><parameter_list pos:line="819" pos:column="54">(<param><decl><type><name pos:line="819" pos:column="55">int</name></type> <name pos:line="819" pos:column="59">UIN</name></decl></param>)</parameter_list> <block pos:line="819" pos:column="64">{

		<decl_stmt><decl><type><name pos:line="821" pos:column="17">boolean</name></type> <name pos:line="821" pos:column="25">isDeleted</name> <init pos:line="821" pos:column="35">= <expr><lit:literal type="boolean" pos:line="821" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt><comment type="line" pos:line="821" pos:column="43">//create a boolean value for returning. set it to false</comment>
		<try pos:line="822" pos:column="17">try <block pos:line="822" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="823" pos:column="25">Connection</name></type> <name pos:line="823" pos:column="36">conn</name> <init pos:line="823" pos:column="41">= <expr><call><name><name pos:line="823" pos:column="43">Database</name><op:operator pos:line="823" pos:column="51">.</op:operator><name pos:line="823" pos:column="52">getConnection</name></name><argument_list pos:line="823" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="823" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="824" pos:column="25">String</name></type> <name pos:line="824" pos:column="32">SQLPeopleSelect</name> <init pos:line="824" pos:column="48">= <expr><lit:literal type="string" pos:line="824" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="825" pos:column="25">String</name></type> <name pos:line="825" pos:column="32">SQLPeopleDelete</name> <init pos:line="825" pos:column="48">= <expr><lit:literal type="string" pos:line="825" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="826" pos:column="25">try <block pos:line="826" pos:column="29">{
				<if pos:line="827" pos:column="33">if <condition pos:line="827" pos:column="36">(<expr><name pos:line="827" pos:column="37">conn</name> <op:operator pos:line="827" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="827" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="827" pos:column="50"> <block pos:line="827" pos:column="51">{
					<comment type="line" pos:line="828" pos:column="41">//select the details where the UIN is the passed UIN specific</comment>
					<expr_stmt><expr><name pos:line="829" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="829" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="829" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="830" pos:column="41">PreparedStatement</name></type> <name pos:line="830" pos:column="59">stmt</name> <init pos:line="830" pos:column="64">= <expr><call><name><name pos:line="830" pos:column="66">conn</name><op:operator pos:line="830" pos:column="70">.</op:operator><name pos:line="830" pos:column="71">prepareStatement</name></name><argument_list pos:line="830" pos:column="87">(<argument><expr><name pos:line="830" pos:column="88">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="831" pos:column="41">stmt</name><op:operator pos:line="831" pos:column="45">.</op:operator><name pos:line="831" pos:column="46">setInt</name></name><argument_list pos:line="831" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="831" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="831" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="831" pos:column="61">//set the UIN</comment>
					<decl_stmt><decl><type><name pos:line="832" pos:column="41">ResultSet</name></type> <name pos:line="832" pos:column="51">rs</name> <init pos:line="832" pos:column="54">= <expr><call><name><name pos:line="832" pos:column="56">stmt</name><op:operator pos:line="832" pos:column="60">.</op:operator><name pos:line="832" pos:column="61">executeQuery</name></name><argument_list pos:line="832" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="832" pos:column="76">//execute the query</comment>

					<if pos:line="834" pos:column="41">if <condition pos:line="834" pos:column="44">(<expr><call><name><name pos:line="834" pos:column="45">rs</name><op:operator pos:line="834" pos:column="47">.</op:operator><name pos:line="834" pos:column="48">first</name></name><argument_list pos:line="834" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="834" pos:column="56"> <block pos:line="834" pos:column="57">{

						<expr_stmt><expr><call><name><name pos:line="836" pos:column="49">DBAnnotation</name><op:operator pos:line="836" pos:column="61">.</op:operator><name pos:line="836" pos:column="62">annoate</name></name><argument_list pos:line="836" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="836" pos:column="70">"peopleRetrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="836" pos:column="92">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="836" pos:column="102">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="836" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="837" pos:column="49">int</name></type> <name pos:line="837" pos:column="53">peopleRetrievedUIN</name> <init pos:line="837" pos:column="72">= <expr><call><name><name pos:line="837" pos:column="74">rs</name><op:operator pos:line="837" pos:column="76">.</op:operator><name pos:line="837" pos:column="77">getInt</name></name><argument_list pos:line="837" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="837" pos:column="84">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="837" pos:column="91">//get the UIN and use this to delete</comment>
						
						<expr_stmt><expr><call><name><name pos:line="839" pos:column="49">DBAnnotation</name><op:operator pos:line="839" pos:column="61">.</op:operator><name pos:line="839" pos:column="62">annoate</name></name><argument_list pos:line="839" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="839" pos:column="70">"peopleRetrievedName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="839" pos:column="93">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="839" pos:column="103">"Name"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="839" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="840" pos:column="49">String</name></type> <name pos:line="840" pos:column="56">peopleRetrievedName</name> <init pos:line="840" pos:column="76">= <expr><call><name><name pos:line="840" pos:column="78">rs</name><op:operator pos:line="840" pos:column="80">.</op:operator><name pos:line="840" pos:column="81">getString</name></name><argument_list pos:line="840" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="840" pos:column="91">"Name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="842" pos:column="49">DBAnnotation</name><op:operator pos:line="842" pos:column="61">.</op:operator><name pos:line="842" pos:column="62">annoate</name></name><argument_list pos:line="842" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="842" pos:column="70">"peopleRetrieveduserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="842" pos:column="97">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="842" pos:column="107">"UserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="842" pos:column="119">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="843" pos:column="49">String</name></type> <name pos:line="843" pos:column="56">peopleRetrieveduserName</name> <init pos:line="843" pos:column="80">= <expr><call><name><name pos:line="843" pos:column="82">rs</name><op:operator pos:line="843" pos:column="84">.</op:operator><name pos:line="843" pos:column="85">getString</name></name><argument_list pos:line="843" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="843" pos:column="95">"UserName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="845" pos:column="49">DBAnnotation</name><op:operator pos:line="845" pos:column="61">.</op:operator><name pos:line="845" pos:column="62">annoate</name></name><argument_list pos:line="845" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="845" pos:column="70">"peopleRetrievedDeptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="845" pos:column="95">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="845" pos:column="105">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="845" pos:column="121">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="846" pos:column="49">int</name></type> <name pos:line="846" pos:column="53">peopleRetrievedDeptID</name> <init pos:line="846" pos:column="75">= <expr><call><name><name pos:line="846" pos:column="77">rs</name><op:operator pos:line="846" pos:column="79">.</op:operator><name pos:line="846" pos:column="80">getInt</name></name><argument_list pos:line="846" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="846" pos:column="87">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="848" pos:column="49">DBAnnotation</name><op:operator pos:line="848" pos:column="61">.</op:operator><name pos:line="848" pos:column="62">annoate</name></name><argument_list pos:line="848" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="848" pos:column="70">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="848" pos:column="99">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="848" pos:column="109">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="848" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="849" pos:column="49">int</name></type> <name pos:line="849" pos:column="53">peopleRetrievedPositionID</name> <init pos:line="849" pos:column="79">= <expr><call><name><name pos:line="849" pos:column="81">rs</name><op:operator pos:line="849" pos:column="83">.</op:operator><name pos:line="849" pos:column="84">getInt</name></name><argument_list pos:line="849" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="849" pos:column="91">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<comment type="line" pos:line="851" pos:column="49">//Delete function to delete it from the people table</comment>
						<expr_stmt><expr><name pos:line="852" pos:column="49">SQLPeopleDelete</name> <op:operator pos:line="852" pos:column="65">=</op:operator> <lit:literal type="string" pos:line="852" pos:column="67">"Delete From People where UIN=?;"</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="853" pos:column="49">stmt</name> <op:operator pos:line="853" pos:column="54">=</op:operator> <call><name><name pos:line="853" pos:column="56">conn</name><op:operator pos:line="853" pos:column="60">.</op:operator><name pos:line="853" pos:column="61">prepareStatement</name></name><argument_list pos:line="853" pos:column="77">(<argument><expr><name pos:line="853" pos:column="78">SQLPeopleDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="854" pos:column="49">stmt</name><op:operator pos:line="854" pos:column="53">.</op:operator><name pos:line="854" pos:column="54">setInt</name></name><argument_list pos:line="854" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="854" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="854" pos:column="64">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="855" pos:column="49">int</name></type> <name pos:line="855" pos:column="53">rs1</name> <init pos:line="855" pos:column="57">= <expr><call><name><name pos:line="855" pos:column="59">stmt</name><op:operator pos:line="855" pos:column="63">.</op:operator><name pos:line="855" pos:column="64">executeUpdate</name></name><argument_list pos:line="855" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="855" pos:column="80">//execute the query</comment>
						
						<expr_stmt><expr><call><name><name pos:line="857" pos:column="49">DBAnnotation</name><op:operator pos:line="857" pos:column="61">.</op:operator><name pos:line="857" pos:column="62">annoate</name></name><argument_list pos:line="857" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="857" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="857" pos:column="77">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="857" pos:column="87">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="857" pos:column="94">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="859" pos:column="49">System</name><op:operator pos:line="859" pos:column="55">.</op:operator><name pos:line="859" pos:column="56">out</name><op:operator pos:line="859" pos:column="59">.</op:operator><name pos:line="859" pos:column="60">println</name></name><argument_list pos:line="859" pos:column="67">(<argument><expr><name pos:line="859" pos:column="68">peopleRetrievedUIN</name> <op:operator pos:line="859" pos:column="87">+</op:operator> <lit:literal type="string" pos:line="859" pos:column="89">" is deleted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="860" pos:column="49">isDeleted</name> <op:operator pos:line="860" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="860" pos:column="61">true</lit:literal></expr>;</expr_stmt>


					}</block></then>

					<else pos:line="865" pos:column="41">else <block pos:line="865" pos:column="46">{
						<comment type="line" pos:line="866" pos:column="49">//if the UIN is not found then UIN does not exist in the table</comment>
						<expr_stmt><expr><call><name><name pos:line="867" pos:column="49">System</name><op:operator pos:line="867" pos:column="55">.</op:operator><name pos:line="867" pos:column="56">out</name><op:operator pos:line="867" pos:column="59">.</op:operator><name pos:line="867" pos:column="60">println</name></name><argument_list pos:line="867" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="867" pos:column="68">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="873" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="874" pos:column="25">catch <parameter_list pos:line="874" pos:column="31">(<param><decl><type><name pos:line="874" pos:column="32">SQLException</name></type> <name pos:line="874" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="874" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="875" pos:column="33">System</name><op:operator pos:line="875" pos:column="39">.</op:operator><name pos:line="875" pos:column="40">out</name><op:operator pos:line="875" pos:column="43">.</op:operator><name pos:line="875" pos:column="44">println</name></name><argument_list pos:line="875" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="875" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="876" pos:column="33">System</name><op:operator pos:line="876" pos:column="39">.</op:operator><name pos:line="876" pos:column="40">out</name><op:operator pos:line="876" pos:column="43">.</op:operator><name pos:line="876" pos:column="44">println</name></name><argument_list pos:line="876" pos:column="51">(<argument><expr><name pos:line="876" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="879" pos:column="25">finally <block pos:line="879" pos:column="33">{
				<comment type="line" pos:line="880" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="883" pos:column="17">//catch block</comment>
		<catch pos:line="884" pos:column="17">catch <parameter_list pos:line="884" pos:column="23">(<param><decl><type><name pos:line="884" pos:column="24">Exception</name></type> <name pos:line="884" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="884" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="885" pos:column="25">System</name><op:operator pos:line="885" pos:column="31">.</op:operator><name pos:line="885" pos:column="32">out</name><op:operator pos:line="885" pos:column="35">.</op:operator><name pos:line="885" pos:column="36">println</name></name><argument_list pos:line="885" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="885" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="886" pos:column="25">System</name><op:operator pos:line="886" pos:column="31">.</op:operator><name pos:line="886" pos:column="32">out</name><op:operator pos:line="886" pos:column="35">.</op:operator><name pos:line="886" pos:column="36">println</name></name><argument_list pos:line="886" pos:column="43">(<argument><expr><name pos:line="886" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="889" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="891" pos:column="17">finally <block pos:line="891" pos:column="25">{

			<comment type="line" pos:line="893" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="896" pos:column="17">return <expr><name pos:line="896" pos:column="24">isDeleted</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="900" pos:column="9">/*The delete function takes in the username of the person when passed a username
	The return type is boolean*/</comment>
	<function><type><specifier pos:line="902" pos:column="9">public</specifier> <specifier pos:line="902" pos:column="16">static</specifier> <name pos:line="902" pos:column="23">boolean</name></type> <name pos:line="902" pos:column="31">deleteFromDatabaseByUserName</name><parameter_list pos:line="902" pos:column="59">(<param><decl><type><name pos:line="902" pos:column="60">String</name></type> <name pos:line="902" pos:column="67">userName</name></decl></param>)</parameter_list> <block pos:line="902" pos:column="77">{

		<decl_stmt><decl><type><name pos:line="904" pos:column="17">boolean</name></type> <name pos:line="904" pos:column="25">isDeleted</name> <init pos:line="904" pos:column="35">= <expr><lit:literal type="boolean" pos:line="904" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="906" pos:column="17">try <block pos:line="906" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="907" pos:column="25">Connection</name></type> <name pos:line="907" pos:column="36">conn</name> <init pos:line="907" pos:column="41">= <expr><call><name><name pos:line="907" pos:column="43">Database</name><op:operator pos:line="907" pos:column="51">.</op:operator><name pos:line="907" pos:column="52">getConnection</name></name><argument_list pos:line="907" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="907" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="908" pos:column="25">String</name></type> <name pos:line="908" pos:column="32">SQLPeopleDelete</name> <init pos:line="908" pos:column="48">= <expr><lit:literal type="string" pos:line="908" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="909" pos:column="25">ResultSet</name></type> <name pos:line="909" pos:column="35">rs</name></decl>;</decl_stmt>
			<try pos:line="910" pos:column="25">try <block pos:line="910" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="912" pos:column="33">boolean</name></type> <name pos:line="912" pos:column="41">ifExisting</name> <init pos:line="912" pos:column="52">= <expr><call><name pos:line="912" pos:column="54">deleteFromDatabaseByUserNameCheck</name><argument_list pos:line="912" pos:column="87">(<argument><expr><name pos:line="912" pos:column="88">userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="914" pos:column="33">if <condition pos:line="914" pos:column="36">(<expr><name pos:line="914" pos:column="37">ifExisting</name></expr>)</condition><then pos:line="914" pos:column="48"> <block pos:line="914" pos:column="49">{
					<comment type="line" pos:line="915" pos:column="41">//it the name exists then only delete</comment>
					<expr_stmt><expr><name pos:line="916" pos:column="41">SQLPeopleDelete</name> <op:operator pos:line="916" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="916" pos:column="59">"Delete From People where Username=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="917" pos:column="41">PreparedStatement</name></type> <name pos:line="917" pos:column="59">stmt</name> <init pos:line="917" pos:column="64">= <expr><call><name><name pos:line="917" pos:column="66">conn</name><op:operator pos:line="917" pos:column="70">.</op:operator><name pos:line="917" pos:column="71">prepareStatement</name></name><argument_list pos:line="917" pos:column="87">(<argument><expr><name pos:line="917" pos:column="88">SQLPeopleDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="918" pos:column="41">stmt</name><op:operator pos:line="918" pos:column="45">.</op:operator><name pos:line="918" pos:column="46">setString</name></name><argument_list pos:line="918" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="918" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="918" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="918" pos:column="69">//set the username</comment>
					<decl_stmt><decl><type><name pos:line="919" pos:column="41">int</name></type> <name pos:line="919" pos:column="45">rs1</name> <init pos:line="919" pos:column="49">= <expr><call><name><name pos:line="919" pos:column="51">stmt</name><op:operator pos:line="919" pos:column="55">.</op:operator><name pos:line="919" pos:column="56">executeUpdate</name></name><argument_list pos:line="919" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="919" pos:column="72">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="921" pos:column="41">DBAnnotation</name><op:operator pos:line="921" pos:column="53">.</op:operator><name pos:line="921" pos:column="54">annoate</name></name><argument_list pos:line="921" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="921" pos:column="62">"userName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="921" pos:column="74">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="921" pos:column="84">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="921" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="923" pos:column="41">System</name><op:operator pos:line="923" pos:column="47">.</op:operator><name pos:line="923" pos:column="48">out</name><op:operator pos:line="923" pos:column="51">.</op:operator><name pos:line="923" pos:column="52">println</name></name><argument_list pos:line="923" pos:column="59">(<argument><expr><name pos:line="923" pos:column="60">userName</name> <op:operator pos:line="923" pos:column="69">+</op:operator> <lit:literal type="string" pos:line="923" pos:column="71">" is deleted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="924" pos:column="41">isDeleted</name> <op:operator pos:line="924" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="924" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then>

				<else pos:line="927" pos:column="33">else <block pos:line="927" pos:column="38">{
					<comment type="line" pos:line="928" pos:column="41">//else the UIN does not exist</comment>
					<expr_stmt><expr><call><name><name pos:line="929" pos:column="41">System</name><op:operator pos:line="929" pos:column="47">.</op:operator><name pos:line="929" pos:column="48">out</name><op:operator pos:line="929" pos:column="51">.</op:operator><name pos:line="929" pos:column="52">println</name></name><argument_list pos:line="929" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="929" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>

			<catch pos:line="935" pos:column="25">catch <parameter_list pos:line="935" pos:column="31">(<param><decl><type><name pos:line="935" pos:column="32">SQLException</name></type> <name pos:line="935" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="935" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="936" pos:column="33">System</name><op:operator pos:line="936" pos:column="39">.</op:operator><name pos:line="936" pos:column="40">out</name><op:operator pos:line="936" pos:column="43">.</op:operator><name pos:line="936" pos:column="44">println</name></name><argument_list pos:line="936" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="936" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="937" pos:column="33">System</name><op:operator pos:line="937" pos:column="39">.</op:operator><name pos:line="937" pos:column="40">out</name><op:operator pos:line="937" pos:column="43">.</op:operator><name pos:line="937" pos:column="44">println</name></name><argument_list pos:line="937" pos:column="51">(<argument><expr><name pos:line="937" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="940" pos:column="25">finally <block pos:line="940" pos:column="33">{
				<comment type="line" pos:line="941" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>

		<catch pos:line="945" pos:column="17">catch <parameter_list pos:line="945" pos:column="23">(<param><decl><type><name pos:line="945" pos:column="24">Exception</name></type> <name pos:line="945" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="945" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="946" pos:column="25">System</name><op:operator pos:line="946" pos:column="31">.</op:operator><name pos:line="946" pos:column="32">out</name><op:operator pos:line="946" pos:column="35">.</op:operator><name pos:line="946" pos:column="36">println</name></name><argument_list pos:line="946" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="946" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="947" pos:column="25">System</name><op:operator pos:line="947" pos:column="31">.</op:operator><name pos:line="947" pos:column="32">out</name><op:operator pos:line="947" pos:column="35">.</op:operator><name pos:line="947" pos:column="36">println</name></name><argument_list pos:line="947" pos:column="43">(<argument><expr><name pos:line="947" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally pos:line="951" pos:column="17">finally <block pos:line="951" pos:column="25">{

			<comment type="line" pos:line="953" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="956" pos:column="17">return <expr><name pos:line="956" pos:column="24">isDeleted</name></expr>;</return>

	}</block></function>
	<comment type="block" pos:line="959" pos:column="9">/*The function is mainly check if the username passed exists in the talbe or not
	 * 
	 * the return type is boolean
	 * */</comment>
	<function><type><specifier pos:line="963" pos:column="9">public</specifier> <specifier pos:line="963" pos:column="16">static</specifier> <name pos:line="963" pos:column="23">boolean</name></type> <name pos:line="963" pos:column="31">deleteFromDatabaseByUserNameCheck</name><parameter_list pos:line="963" pos:column="64">(<param><decl><type><name pos:line="963" pos:column="65">String</name></type> <name pos:line="963" pos:column="72">userName</name></decl></param>)</parameter_list> <block pos:line="963" pos:column="82">{

		<decl_stmt><decl><type><name pos:line="965" pos:column="17">boolean</name></type> <name pos:line="965" pos:column="25">isExisting</name> <init pos:line="965" pos:column="36">= <expr><lit:literal type="boolean" pos:line="965" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="967" pos:column="17">try <block pos:line="967" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="968" pos:column="25">Connection</name></type> <name pos:line="968" pos:column="36">conn</name> <init pos:line="968" pos:column="41">= <expr><call><name><name pos:line="968" pos:column="43">Database</name><op:operator pos:line="968" pos:column="51">.</op:operator><name pos:line="968" pos:column="52">getConnection</name></name><argument_list pos:line="968" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="968" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="969" pos:column="25">String</name></type> <name pos:line="969" pos:column="32">SQLPeopleSelect</name> <init pos:line="969" pos:column="48">= <expr><lit:literal type="string" pos:line="969" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="970" pos:column="25">try <block pos:line="970" pos:column="29">{
				<if pos:line="971" pos:column="33">if <condition pos:line="971" pos:column="36">(<expr><name pos:line="971" pos:column="37">conn</name> <op:operator pos:line="971" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="971" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="971" pos:column="50"> <block pos:line="971" pos:column="51">{
					<comment type="line" pos:line="972" pos:column="41">//select query to check if it exists in the table</comment>
					<expr_stmt><expr><name pos:line="973" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="973" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="973" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="974" pos:column="41">PreparedStatement</name></type> <name pos:line="974" pos:column="59">stmt</name> <init pos:line="974" pos:column="64">= <expr><call><name><name pos:line="974" pos:column="66">conn</name><op:operator pos:line="974" pos:column="70">.</op:operator><name pos:line="974" pos:column="71">prepareStatement</name></name><argument_list pos:line="974" pos:column="87">(<argument><expr><name pos:line="974" pos:column="88">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="975" pos:column="41">stmt</name><op:operator pos:line="975" pos:column="45">.</op:operator><name pos:line="975" pos:column="46">setString</name></name><argument_list pos:line="975" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="975" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="975" pos:column="59">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="976" pos:column="41">ResultSet</name></type> <name pos:line="976" pos:column="51">rs</name> <init pos:line="976" pos:column="54">= <expr><call><name><name pos:line="976" pos:column="56">stmt</name><op:operator pos:line="976" pos:column="60">.</op:operator><name pos:line="976" pos:column="61">executeQuery</name></name><argument_list pos:line="976" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="976" pos:column="76">//execute the query</comment>

					<if pos:line="978" pos:column="41">if <condition pos:line="978" pos:column="44">(<expr><call><name><name pos:line="978" pos:column="45">rs</name><op:operator pos:line="978" pos:column="47">.</op:operator><name pos:line="978" pos:column="48">first</name></name><argument_list pos:line="978" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="978" pos:column="56"> <block pos:line="978" pos:column="57">{
						<comment type="line" pos:line="979" pos:column="49">//if thw resultset exists then return true</comment>
						<return pos:line="980" pos:column="49">return <expr><lit:literal type="boolean" pos:line="980" pos:column="56">true</lit:literal></expr>;</return>

					}</block></then>

					<else pos:line="984" pos:column="41">else <block pos:line="984" pos:column="46">{
						<comment type="line" pos:line="985" pos:column="49">//if the resultset does not return anything then it does not exist</comment>
						<expr_stmt><expr><call><name><name pos:line="986" pos:column="49">System</name><op:operator pos:line="986" pos:column="55">.</op:operator><name pos:line="986" pos:column="56">out</name><op:operator pos:line="986" pos:column="59">.</op:operator><name pos:line="986" pos:column="60">println</name></name><argument_list pos:line="986" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="986" pos:column="68">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="992" pos:column="25">//catch the SQL exception</comment>
			<catch pos:line="993" pos:column="25">catch <parameter_list pos:line="993" pos:column="31">(<param><decl><type><name pos:line="993" pos:column="32">SQLException</name></type> <name pos:line="993" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="993" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="994" pos:column="33">System</name><op:operator pos:line="994" pos:column="39">.</op:operator><name pos:line="994" pos:column="40">out</name><op:operator pos:line="994" pos:column="43">.</op:operator><name pos:line="994" pos:column="44">println</name></name><argument_list pos:line="994" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="994" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="995" pos:column="33">System</name><op:operator pos:line="995" pos:column="39">.</op:operator><name pos:line="995" pos:column="40">out</name><op:operator pos:line="995" pos:column="43">.</op:operator><name pos:line="995" pos:column="44">println</name></name><argument_list pos:line="995" pos:column="51">(<argument><expr><name pos:line="995" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>

			<finally pos:line="998" pos:column="25">finally <block pos:line="998" pos:column="33">{
				<comment type="line" pos:line="999" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="1002" pos:column="17">//catch the exception</comment>
		<catch pos:line="1003" pos:column="17">catch <parameter_list pos:line="1003" pos:column="23">(<param><decl><type><name pos:line="1003" pos:column="24">Exception</name></type> <name pos:line="1003" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1003" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1004" pos:column="25">System</name><op:operator pos:line="1004" pos:column="31">.</op:operator><name pos:line="1004" pos:column="32">out</name><op:operator pos:line="1004" pos:column="35">.</op:operator><name pos:line="1004" pos:column="36">println</name></name><argument_list pos:line="1004" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="1004" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1005" pos:column="25">System</name><op:operator pos:line="1005" pos:column="31">.</op:operator><name pos:line="1005" pos:column="32">out</name><op:operator pos:line="1005" pos:column="35">.</op:operator><name pos:line="1005" pos:column="36">println</name></name><argument_list pos:line="1005" pos:column="43">(<argument><expr><name pos:line="1005" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="1009" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally pos:line="1011" pos:column="17">finally <block pos:line="1011" pos:column="25">{

			<comment type="line" pos:line="1013" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1016" pos:column="17">return <expr><name pos:line="1016" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="1020" pos:column="9">/*The function is mainly check if the UIN passed exists in the table or not
	 * 
	 * the return type is boolean
	 * */</comment>
	<function><type><specifier pos:line="1024" pos:column="9">public</specifier> <specifier pos:line="1024" pos:column="16">static</specifier> <name pos:line="1024" pos:column="23">boolean</name></type> <name pos:line="1024" pos:column="31">deleteFromDatabaseByUINCheck</name><parameter_list pos:line="1024" pos:column="59">(<param><decl><type><name pos:line="1024" pos:column="60">int</name></type> <name pos:line="1024" pos:column="64">UIN</name></decl></param>)</parameter_list> <block pos:line="1024" pos:column="69">{

		<decl_stmt><decl><type><name pos:line="1026" pos:column="17">boolean</name></type> <name pos:line="1026" pos:column="25">isExisting</name> <init pos:line="1026" pos:column="36">= <expr><lit:literal type="boolean" pos:line="1026" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="1028" pos:column="17">try <block pos:line="1028" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="1029" pos:column="25">Connection</name></type> <name pos:line="1029" pos:column="36">conn</name> <init pos:line="1029" pos:column="41">= <expr><call><name><name pos:line="1029" pos:column="43">Database</name><op:operator pos:line="1029" pos:column="51">.</op:operator><name pos:line="1029" pos:column="52">getConnection</name></name><argument_list pos:line="1029" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1029" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="1030" pos:column="25">String</name></type> <name pos:line="1030" pos:column="32">SQLPeopleSelect</name> <init pos:line="1030" pos:column="48">= <expr><lit:literal type="string" pos:line="1030" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="1031" pos:column="25">try <block pos:line="1031" pos:column="29">{
				<if pos:line="1032" pos:column="33">if <condition pos:line="1032" pos:column="36">(<expr><name pos:line="1032" pos:column="37">conn</name> <op:operator pos:line="1032" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="1032" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="1032" pos:column="50"> <block pos:line="1032" pos:column="51">{
					<comment type="line" pos:line="1033" pos:column="41">//select the username if it exists in the table</comment>
					<expr_stmt><expr><name pos:line="1034" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="1034" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="1034" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1035" pos:column="41">PreparedStatement</name></type> <name pos:line="1035" pos:column="59">stmt</name> <init pos:line="1035" pos:column="64">= <expr><call><name><name pos:line="1035" pos:column="66">conn</name><op:operator pos:line="1035" pos:column="70">.</op:operator><name pos:line="1035" pos:column="71">prepareStatement</name></name><argument_list pos:line="1035" pos:column="87">(<argument><expr><name pos:line="1035" pos:column="88">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1036" pos:column="41">stmt</name><op:operator pos:line="1036" pos:column="45">.</op:operator><name pos:line="1036" pos:column="46">setInt</name></name><argument_list pos:line="1036" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="1036" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1036" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1037" pos:column="41">ResultSet</name></type> <name pos:line="1037" pos:column="51">rs</name> <init pos:line="1037" pos:column="54">= <expr><call><name><name pos:line="1037" pos:column="56">stmt</name><op:operator pos:line="1037" pos:column="60">.</op:operator><name pos:line="1037" pos:column="61">executeQuery</name></name><argument_list pos:line="1037" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1037" pos:column="76">//execute the query</comment>

					<if pos:line="1039" pos:column="41">if <condition pos:line="1039" pos:column="44">(<expr><call><name><name pos:line="1039" pos:column="45">rs</name><op:operator pos:line="1039" pos:column="47">.</op:operator><name pos:line="1039" pos:column="48">first</name></name><argument_list pos:line="1039" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="1039" pos:column="56"> <block pos:line="1039" pos:column="57">{
						<comment type="line" pos:line="1040" pos:column="49">//if the resultset exists then return true</comment>
						<return pos:line="1041" pos:column="49">return <expr><lit:literal type="boolean" pos:line="1041" pos:column="56">true</lit:literal></expr>;</return>

					}</block></then>

					<else pos:line="1045" pos:column="41">else <block pos:line="1045" pos:column="46">{
						<comment type="line" pos:line="1046" pos:column="49">//else the UIN does not exist</comment>
						<expr_stmt><expr><call><name><name pos:line="1047" pos:column="49">System</name><op:operator pos:line="1047" pos:column="55">.</op:operator><name pos:line="1047" pos:column="56">out</name><op:operator pos:line="1047" pos:column="59">.</op:operator><name pos:line="1047" pos:column="60">println</name></name><argument_list pos:line="1047" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="1047" pos:column="68">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if>

			}</block>
			<comment type="line" pos:line="1053" pos:column="25">//carch the SQL exception</comment>
			<catch pos:line="1054" pos:column="25">catch <parameter_list pos:line="1054" pos:column="31">(<param><decl><type><name pos:line="1054" pos:column="32">SQLException</name></type> <name pos:line="1054" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1054" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1055" pos:column="33">System</name><op:operator pos:line="1055" pos:column="39">.</op:operator><name pos:line="1055" pos:column="40">out</name><op:operator pos:line="1055" pos:column="43">.</op:operator><name pos:line="1055" pos:column="44">println</name></name><argument_list pos:line="1055" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="1055" pos:column="52">"Error trying to access the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1056" pos:column="33">System</name><op:operator pos:line="1056" pos:column="39">.</op:operator><name pos:line="1056" pos:column="40">out</name><op:operator pos:line="1056" pos:column="43">.</op:operator><name pos:line="1056" pos:column="44">println</name></name><argument_list pos:line="1056" pos:column="51">(<argument><expr><name pos:line="1056" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<comment type="line" pos:line="1059" pos:column="25">//finally block</comment>
			<finally pos:line="1060" pos:column="25">finally <block pos:line="1060" pos:column="33">{
				<comment type="line" pos:line="1061" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="1064" pos:column="17">//catch the general exception</comment>
		<catch pos:line="1065" pos:column="17">catch <parameter_list pos:line="1065" pos:column="23">(<param><decl><type><name pos:line="1065" pos:column="24">Exception</name></type> <name pos:line="1065" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1065" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1066" pos:column="25">System</name><op:operator pos:line="1066" pos:column="31">.</op:operator><name pos:line="1066" pos:column="32">out</name><op:operator pos:line="1066" pos:column="35">.</op:operator><name pos:line="1066" pos:column="36">println</name></name><argument_list pos:line="1066" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="1066" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1067" pos:column="25">System</name><op:operator pos:line="1067" pos:column="31">.</op:operator><name pos:line="1067" pos:column="32">out</name><op:operator pos:line="1067" pos:column="35">.</op:operator><name pos:line="1067" pos:column="36">println</name></name><argument_list pos:line="1067" pos:column="43">(<argument><expr><name pos:line="1067" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="1070" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally pos:line="1072" pos:column="17">finally <block pos:line="1072" pos:column="25">{

			<comment type="line" pos:line="1074" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1077" pos:column="17">return <expr><name pos:line="1077" pos:column="24">isExisting</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="1081" pos:column="9">/*retrieving the details of the user and initializing them 
	 * The parameter passed is the UIN 
	 * The return type is the People object
	 * */</comment>
	<function><type><specifier pos:line="1085" pos:column="9">public</specifier> <specifier pos:line="1085" pos:column="16">static</specifier> <name pos:line="1085" pos:column="23">People</name></type> <name pos:line="1085" pos:column="30">retireveDetailsByUIN</name><parameter_list pos:line="1085" pos:column="50">(<param><decl><type><name pos:line="1085" pos:column="51">int</name></type> <name pos:line="1085" pos:column="55">UIN</name></decl></param>)</parameter_list> <throws pos:line="1085" pos:column="60">throws <argument><expr><name pos:line="1085" pos:column="67">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="1085" pos:column="95">{

		<try pos:line="1087" pos:column="17">try <block pos:line="1087" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="1088" pos:column="25">Connection</name></type> <name pos:line="1088" pos:column="36">conn</name> <init pos:line="1088" pos:column="41">= <expr><call><name><name pos:line="1088" pos:column="43">Database</name><op:operator pos:line="1088" pos:column="51">.</op:operator><name pos:line="1088" pos:column="52">getConnection</name></name><argument_list pos:line="1088" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1088" pos:column="68">//establish a connection</comment>
			<decl_stmt><decl><type><name pos:line="1089" pos:column="25">String</name></type> <name pos:line="1089" pos:column="32">SQLPeopleSelect</name> <init pos:line="1089" pos:column="48">= <expr><lit:literal type="string" pos:line="1089" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="1090" pos:column="25">try <block pos:line="1090" pos:column="29">{

				<if pos:line="1092" pos:column="33">if <condition pos:line="1092" pos:column="36">(<expr><name pos:line="1092" pos:column="37">conn</name> <op:operator pos:line="1092" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="1092" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="1092" pos:column="50"> <block pos:line="1092" pos:column="51">{
					<comment type="block" pos:line="1093" pos:column="41">/*query to select all the user details for the passed UIN*/</comment>
					<expr_stmt><expr><name pos:line="1094" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="1094" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="1094" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="1097" pos:column="33">PreparedStatement</name></type> <name pos:line="1097" pos:column="51">stmtForSelect</name> <init pos:line="1097" pos:column="65">= <expr><call><name><name pos:line="1097" pos:column="67">conn</name><op:operator pos:line="1097" pos:column="71">.</op:operator><name pos:line="1097" pos:column="72">prepareStatement</name></name><argument_list pos:line="1097" pos:column="88">(<argument><expr><name pos:line="1097" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1098" pos:column="33">stmtForSelect</name><op:operator pos:line="1098" pos:column="46">.</op:operator><name pos:line="1098" pos:column="47">setInt</name></name><argument_list pos:line="1098" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="1098" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1098" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="1098" pos:column="62">//set the UIN</comment>

				<decl_stmt><decl><type><name pos:line="1100" pos:column="33">ResultSet</name></type> <name pos:line="1100" pos:column="43">rs</name> <init pos:line="1100" pos:column="46">= <expr><call><name><name pos:line="1100" pos:column="48">stmtForSelect</name><op:operator pos:line="1100" pos:column="61">.</op:operator><name pos:line="1100" pos:column="62">executeQuery</name></name><argument_list pos:line="1100" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1100" pos:column="77">//exectute the query</comment>

				<if pos:line="1102" pos:column="33">if <condition pos:line="1102" pos:column="36">(<expr><call><name><name pos:line="1102" pos:column="37">rs</name><op:operator pos:line="1102" pos:column="39">.</op:operator><name pos:line="1102" pos:column="40">first</name></name><argument_list pos:line="1102" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="1102" pos:column="48"> <block pos:line="1102" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="1104" pos:column="41">DBAnnotation</name><op:operator pos:line="1104" pos:column="53">.</op:operator><name pos:line="1104" pos:column="54">annoate</name></name><argument_list pos:line="1104" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="1104" pos:column="62">"retrievedUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1104" pos:column="78">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1104" pos:column="88">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1104" pos:column="95">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1105" pos:column="41">int</name></type> <name pos:line="1105" pos:column="45">retrievedUIN</name><init pos:line="1105" pos:column="57">= <expr><call><name><name pos:line="1105" pos:column="59">rs</name><op:operator pos:line="1105" pos:column="61">.</op:operator><name pos:line="1105" pos:column="62">getInt</name></name><argument_list pos:line="1105" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1105" pos:column="69">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							
					<decl_stmt><decl><type><name pos:line="1107" pos:column="41">People</name></type> <name pos:line="1107" pos:column="48">peopleDetails</name> <init pos:line="1107" pos:column="62">= <expr><op:operator pos:line="1107" pos:column="64">new</op:operator> <call><name pos:line="1107" pos:column="68">People</name><argument_list pos:line="1107" pos:column="74">(<argument><expr><name pos:line="1107" pos:column="75">retrievedUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1107" pos:column="89">//setting the object</comment>
					<return pos:line="1108" pos:column="41">return <expr><name pos:line="1108" pos:column="48">peopleDetails</name></expr>;</return><comment type="line" pos:line="1108" pos:column="62">//return the object</comment>

				}</block></then>

				<else pos:line="1112" pos:column="33">else <block pos:line="1112" pos:column="38">{
					<comment type="line" pos:line="1113" pos:column="41">//If the query does not have anything in the resultset then return null</comment>
					<expr_stmt><expr><call><name><name pos:line="1114" pos:column="41">System</name><op:operator pos:line="1114" pos:column="47">.</op:operator><name pos:line="1114" pos:column="48">out</name><op:operator pos:line="1114" pos:column="51">.</op:operator><name pos:line="1114" pos:column="52">println</name></name><argument_list pos:line="1114" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1114" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="1115" pos:column="41">return <expr><lit:literal type="null" pos:line="1115" pos:column="48">null</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>

			<comment type="line" pos:line="1121" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="1122" pos:column="25">catch <parameter_list pos:line="1122" pos:column="31">(<param><decl><type><name pos:line="1122" pos:column="32">SQLException</name></type> <name pos:line="1122" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1122" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1123" pos:column="33">System</name><op:operator pos:line="1123" pos:column="39">.</op:operator><name pos:line="1123" pos:column="40">out</name><op:operator pos:line="1123" pos:column="43">.</op:operator><name pos:line="1123" pos:column="44">println</name></name><argument_list pos:line="1123" pos:column="51">(<argument><expr><name pos:line="1123" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			
			<finally pos:line="1127" pos:column="25">finally <block pos:line="1127" pos:column="33">{

				<comment type="line" pos:line="1129" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		<comment type="line" pos:line="1132" pos:column="17">//the outer catch block catches the generla exception</comment>
		<catch pos:line="1133" pos:column="17">catch <parameter_list pos:line="1133" pos:column="23">(<param><decl><type><name pos:line="1133" pos:column="24">Exception</name></type> <name pos:line="1133" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1133" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1134" pos:column="25">System</name><op:operator pos:line="1134" pos:column="31">.</op:operator><name pos:line="1134" pos:column="32">out</name><op:operator pos:line="1134" pos:column="35">.</op:operator><name pos:line="1134" pos:column="36">println</name></name><argument_list pos:line="1134" pos:column="43">(<argument><expr><name pos:line="1134" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="1137" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
															here the finally block does not contain any general statements*/</comment>
		<finally pos:line="1139" pos:column="17">finally <block pos:line="1139" pos:column="25">{

			<comment type="line" pos:line="1141" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1144" pos:column="17">return <expr><lit:literal type="null" pos:line="1144" pos:column="24">null</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="1147" pos:column="9">/*retrieving the details of the user and initializing them 
	 * The parameter passed is the username 
	 * The return type is the People object
	 * */</comment>
	<function><type><specifier pos:line="1151" pos:column="9">public</specifier> <specifier pos:line="1151" pos:column="16">static</specifier> <name pos:line="1151" pos:column="23">People</name></type> <name pos:line="1151" pos:column="30">retireveDetailsByuserName</name><parameter_list pos:line="1151" pos:column="55">(<param><decl><type><name pos:line="1151" pos:column="56">String</name></type> <name pos:line="1151" pos:column="63">userName</name></decl></param>)</parameter_list> <block pos:line="1151" pos:column="73">{

		<try pos:line="1153" pos:column="17">try <block pos:line="1153" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="1154" pos:column="25">Connection</name></type> <name pos:line="1154" pos:column="36">conn</name> <init pos:line="1154" pos:column="41">= <expr><call><name><name pos:line="1154" pos:column="43">Database</name><op:operator pos:line="1154" pos:column="51">.</op:operator><name pos:line="1154" pos:column="52">getConnection</name></name><argument_list pos:line="1154" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1154" pos:column="68">//establish the connection</comment>
			<decl_stmt><decl><type><name pos:line="1155" pos:column="25">String</name></type> <name pos:line="1155" pos:column="32">SQLPeopleSelect</name> <init pos:line="1155" pos:column="48">= <expr><lit:literal type="string" pos:line="1155" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="1156" pos:column="25">try <block pos:line="1156" pos:column="29">{

				<if pos:line="1158" pos:column="33">if <condition pos:line="1158" pos:column="36">(<expr><name pos:line="1158" pos:column="37">conn</name> <op:operator pos:line="1158" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="1158" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="1158" pos:column="50"> <block pos:line="1158" pos:column="51">{

					<comment type="block" pos:line="1160" pos:column="41">/*this query selects all the details ofr the passed username*/</comment>
					<expr_stmt><expr><name pos:line="1161" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="1161" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="1161" pos:column="59">"Select UIN, Name, Username, DepartmentID, PositionID From People where Username=?;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="1164" pos:column="33">PreparedStatement</name></type> <name pos:line="1164" pos:column="51">stmtForSelect</name> <init pos:line="1164" pos:column="65">= <expr><call><name><name pos:line="1164" pos:column="67">conn</name><op:operator pos:line="1164" pos:column="71">.</op:operator><name pos:line="1164" pos:column="72">prepareStatement</name></name><argument_list pos:line="1164" pos:column="88">(<argument><expr><name pos:line="1164" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1165" pos:column="33">stmtForSelect</name><op:operator pos:line="1165" pos:column="46">.</op:operator><name pos:line="1165" pos:column="47">setString</name></name><argument_list pos:line="1165" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="1165" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1165" pos:column="60">userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="1167" pos:column="33">ResultSet</name></type> <name pos:line="1167" pos:column="43">rs</name> <init pos:line="1167" pos:column="46">= <expr><call><name><name pos:line="1167" pos:column="48">stmtForSelect</name><op:operator pos:line="1167" pos:column="61">.</op:operator><name pos:line="1167" pos:column="62">executeQuery</name></name><argument_list pos:line="1167" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1167" pos:column="77">//execute the query</comment>

				<if pos:line="1169" pos:column="33">if <condition pos:line="1169" pos:column="36">(<expr><call><name><name pos:line="1169" pos:column="37">rs</name><op:operator pos:line="1169" pos:column="39">.</op:operator><name pos:line="1169" pos:column="40">first</name></name><argument_list pos:line="1169" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="1169" pos:column="48"> <block pos:line="1169" pos:column="49">{

					<comment type="block" pos:line="1171" pos:column="41">/*if the resultset exists then set the People object with the username passed*/</comment>
					<expr_stmt><expr><call><name><name pos:line="1172" pos:column="41">DBAnnotation</name><op:operator pos:line="1172" pos:column="53">.</op:operator><name pos:line="1172" pos:column="54">annoate</name></name><argument_list pos:line="1172" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="1172" pos:column="62">"retrievedUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1172" pos:column="83">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1172" pos:column="93">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1172" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="1173" pos:column="41">String</name></type> <name pos:line="1173" pos:column="48">retrievedUserName</name><init pos:line="1173" pos:column="65">=<expr><call><name><name pos:line="1173" pos:column="66">rs</name><op:operator pos:line="1173" pos:column="68">.</op:operator><name pos:line="1173" pos:column="69">getString</name></name><argument_list pos:line="1173" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="1173" pos:column="79">"Username"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<decl_stmt><decl><type><name pos:line="1175" pos:column="41">People</name></type> <name pos:line="1175" pos:column="48">peopleDetails</name> <init pos:line="1175" pos:column="62">= <expr><op:operator pos:line="1175" pos:column="64">new</op:operator> <call><name pos:line="1175" pos:column="68">People</name><argument_list pos:line="1175" pos:column="74">(<argument><expr><name pos:line="1175" pos:column="75">retrievedUserName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="1176" pos:column="41">return <expr><name pos:line="1176" pos:column="48">peopleDetails</name></expr>;</return>

				}</block></then>

				<else pos:line="1180" pos:column="33">else <block pos:line="1180" pos:column="38">{
					<comment type="line" pos:line="1181" pos:column="41">//if the query does not retreive anything then the null is returned</comment>
					<expr_stmt><expr><call><name><name pos:line="1182" pos:column="41">System</name><op:operator pos:line="1182" pos:column="47">.</op:operator><name pos:line="1182" pos:column="48">out</name><op:operator pos:line="1182" pos:column="51">.</op:operator><name pos:line="1182" pos:column="52">println</name></name><argument_list pos:line="1182" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="1182" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="1183" pos:column="41">return <expr><lit:literal type="null" pos:line="1183" pos:column="48">null</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="1188" pos:column="25">//The inner catch block catches the SQL exception.</comment>
			<catch pos:line="1189" pos:column="25">catch <parameter_list pos:line="1189" pos:column="31">(<param><decl><type><name pos:line="1189" pos:column="32">SQLException</name></type> <name pos:line="1189" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="1189" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1190" pos:column="33">System</name><op:operator pos:line="1190" pos:column="39">.</op:operator><name pos:line="1190" pos:column="40">out</name><op:operator pos:line="1190" pos:column="43">.</op:operator><name pos:line="1190" pos:column="44">println</name></name><argument_list pos:line="1190" pos:column="51">(<argument><expr><name pos:line="1190" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch>
			<comment type="block" pos:line="1193" pos:column="25">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>

			<finally pos:line="1196" pos:column="25">finally <block pos:line="1196" pos:column="33">{

				<comment type="line" pos:line="1198" pos:column="33">// System.out.println("retrieved");</comment>
			}</block></finally></try>
		}</block>
		
		<catch pos:line="1202" pos:column="17">catch <parameter_list pos:line="1202" pos:column="23">(<param><decl><type><name pos:line="1202" pos:column="24">Exception</name></type> <name pos:line="1202" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="1202" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="1203" pos:column="25">System</name><op:operator pos:line="1203" pos:column="31">.</op:operator><name pos:line="1203" pos:column="32">out</name><op:operator pos:line="1203" pos:column="35">.</op:operator><name pos:line="1203" pos:column="36">println</name></name><argument_list pos:line="1203" pos:column="43">(<argument><expr><name pos:line="1203" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="line" pos:line="1206" pos:column="17">//the outer catch block catches the generla exception</comment>
		<finally pos:line="1207" pos:column="17">finally <block pos:line="1207" pos:column="25">{

			<comment type="line" pos:line="1209" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="1212" pos:column="17">return <expr><lit:literal type="null" pos:line="1212" pos:column="24">null</lit:literal></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="1216" pos:column="9">/*creating our own exceptions to be thrown and handled */</comment>
	<class><specifier pos:line="1217" pos:column="9">public</specifier> <specifier pos:line="1217" pos:column="16">static</specifier> class <name pos:line="1217" pos:column="29">PersonDoesNotExistException</name> <super><extends pos:line="1217" pos:column="57">extends <name pos:line="1217" pos:column="65">Exception</name></extends></super> <block pos:line="1217" pos:column="75">{
		<decl_stmt><decl><type><specifier pos:line="1218" pos:column="17">private</specifier> <specifier pos:line="1218" pos:column="25">static</specifier> <specifier pos:line="1218" pos:column="32">final</specifier> <name pos:line="1218" pos:column="38">long</name></type> <name pos:line="1218" pos:column="43">serialVersionUID</name> <init pos:line="1218" pos:column="60">= <expr><lit:literal type="number" pos:line="1218" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1219" pos:column="17">private</specifier> <name pos:line="1219" pos:column="25">String</name></type> <name pos:line="1219" pos:column="32">message</name> <init pos:line="1219" pos:column="40">= <expr><lit:literal type="null" pos:line="1219" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="1221" pos:column="17">public</specifier> <name pos:line="1221" pos:column="24">PersonDoesNotExistException</name><parameter_list pos:line="1221" pos:column="51">()</parameter_list> <block pos:line="1221" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="1222" pos:column="25">super</name><argument_list pos:line="1222" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1223" pos:column="25">this</name><op:operator pos:line="1223" pos:column="29">.</op:operator><name pos:line="1223" pos:column="30">message</name></name> <op:operator pos:line="1223" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="1223" pos:column="40">"Person does not exist"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="1226" pos:column="17">public</specifier> <name pos:line="1226" pos:column="24">PersonDoesNotExistException</name><parameter_list pos:line="1226" pos:column="51">(<param><decl><type><name pos:line="1226" pos:column="52">String</name></type> <name pos:line="1226" pos:column="59">message</name></decl></param>)</parameter_list> <block pos:line="1226" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="1227" pos:column="25">super</name><argument_list pos:line="1227" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1228" pos:column="25">this</name><op:operator pos:line="1228" pos:column="29">.</op:operator><name pos:line="1228" pos:column="30">message</name></name> <op:operator pos:line="1228" pos:column="38">=</op:operator> <name pos:line="1228" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="1231" pos:column="17">@<name pos:line="1231" pos:column="18">Override</name></annotation>
		<specifier pos:line="1232" pos:column="17">public</specifier> <name pos:line="1232" pos:column="24">String</name></type> <name pos:line="1232" pos:column="31">toString</name><parameter_list pos:line="1232" pos:column="39">()</parameter_list> <block pos:line="1232" pos:column="42">{
			<return pos:line="1233" pos:column="25">return <expr><name pos:line="1233" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="1236" pos:column="17">@<name pos:line="1236" pos:column="18">Override</name></annotation>
		<specifier pos:line="1237" pos:column="17">public</specifier> <name pos:line="1237" pos:column="24">String</name></type> <name pos:line="1237" pos:column="31">getMessage</name><parameter_list pos:line="1237" pos:column="41">()</parameter_list> <block pos:line="1237" pos:column="44">{
			<return pos:line="1238" pos:column="25">return <expr><name pos:line="1238" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>
	
	<comment type="block" pos:line="1242" pos:column="9">/*creating our own exceptions to be thrown and handled */</comment>
	<class><specifier pos:line="1243" pos:column="9">public</specifier> <specifier pos:line="1243" pos:column="16">static</specifier> class <name pos:line="1243" pos:column="29">loginDetailsnotAdded</name> <super><extends pos:line="1243" pos:column="50">extends <name pos:line="1243" pos:column="58">Exception</name></extends></super> <block pos:line="1243" pos:column="68">{
		<decl_stmt><decl><type><specifier pos:line="1244" pos:column="17">private</specifier> <specifier pos:line="1244" pos:column="25">static</specifier> <specifier pos:line="1244" pos:column="32">final</specifier> <name pos:line="1244" pos:column="38">long</name></type> <name pos:line="1244" pos:column="43">serialVersionUID</name> <init pos:line="1244" pos:column="60">= <expr><lit:literal type="number" pos:line="1244" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1245" pos:column="17">private</specifier> <name pos:line="1245" pos:column="25">String</name></type> <name pos:line="1245" pos:column="32">message</name> <init pos:line="1245" pos:column="40">= <expr><lit:literal type="null" pos:line="1245" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="1247" pos:column="17">public</specifier> <name pos:line="1247" pos:column="24">loginDetailsnotAdded</name><parameter_list pos:line="1247" pos:column="44">()</parameter_list> <block pos:line="1247" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="1248" pos:column="25">super</name><argument_list pos:line="1248" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1249" pos:column="25">this</name><op:operator pos:line="1249" pos:column="29">.</op:operator><name pos:line="1249" pos:column="30">message</name></name> <op:operator pos:line="1249" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="1249" pos:column="40">"login Details not Added "</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="1252" pos:column="17">public</specifier> <name pos:line="1252" pos:column="24">loginDetailsnotAdded</name><parameter_list pos:line="1252" pos:column="44">(<param><decl><type><name pos:line="1252" pos:column="45">String</name></type> <name pos:line="1252" pos:column="52">message</name></decl></param>)</parameter_list> <block pos:line="1252" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="1253" pos:column="25">super</name><argument_list pos:line="1253" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1254" pos:column="25">this</name><op:operator pos:line="1254" pos:column="29">.</op:operator><name pos:line="1254" pos:column="30">message</name></name> <op:operator pos:line="1254" pos:column="38">=</op:operator> <name pos:line="1254" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="1257" pos:column="17">@<name pos:line="1257" pos:column="18">Override</name></annotation>
		<specifier pos:line="1258" pos:column="17">public</specifier> <name pos:line="1258" pos:column="24">String</name></type> <name pos:line="1258" pos:column="31">toString</name><parameter_list pos:line="1258" pos:column="39">()</parameter_list> <block pos:line="1258" pos:column="42">{
			<return pos:line="1259" pos:column="25">return <expr><name pos:line="1259" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="1262" pos:column="17">@<name pos:line="1262" pos:column="18">Override</name></annotation>
		<specifier pos:line="1263" pos:column="17">public</specifier> <name pos:line="1263" pos:column="24">String</name></type> <name pos:line="1263" pos:column="31">getMessage</name><parameter_list pos:line="1263" pos:column="41">()</parameter_list> <block pos:line="1263" pos:column="44">{
			<return pos:line="1264" pos:column="25">return <expr><name pos:line="1264" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="block" pos:line="1268" pos:column="9">/*creating our own exceptions to be thrown and handled */</comment>
	<class><specifier pos:line="1269" pos:column="9">static</specifier> class <name pos:line="1269" pos:column="22">PersonDoesNotExist</name> <super><extends pos:line="1269" pos:column="41">extends <name pos:line="1269" pos:column="49">Exception</name></extends></super> <block pos:line="1269" pos:column="59">{
		<decl_stmt><decl><type><specifier pos:line="1270" pos:column="17">private</specifier> <specifier pos:line="1270" pos:column="25">static</specifier> <specifier pos:line="1270" pos:column="32">final</specifier> <name pos:line="1270" pos:column="38">long</name></type> <name pos:line="1270" pos:column="43">serialVersionUID</name> <init pos:line="1270" pos:column="60">= <expr><lit:literal type="number" pos:line="1270" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1271" pos:column="17">private</specifier> <name pos:line="1271" pos:column="25">String</name></type> <name pos:line="1271" pos:column="32">message</name> <init pos:line="1271" pos:column="40">= <expr><lit:literal type="null" pos:line="1271" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="1273" pos:column="17">public</specifier> <name pos:line="1273" pos:column="24">PersonDoesNotExist</name><parameter_list pos:line="1273" pos:column="42">()</parameter_list> <block pos:line="1273" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="1274" pos:column="25">super</name><argument_list pos:line="1274" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1275" pos:column="25">this</name><op:operator pos:line="1275" pos:column="29">.</op:operator><name pos:line="1275" pos:column="30">message</name></name> <op:operator pos:line="1275" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="1275" pos:column="40">"Person does not Added "</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="1278" pos:column="17">public</specifier> <name pos:line="1278" pos:column="24">PersonDoesNotExist</name><parameter_list pos:line="1278" pos:column="42">(<param><decl><type><name pos:line="1278" pos:column="43">String</name></type> <name pos:line="1278" pos:column="50">message</name></decl></param>)</parameter_list> <block pos:line="1278" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="1279" pos:column="25">super</name><argument_list pos:line="1279" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1280" pos:column="25">this</name><op:operator pos:line="1280" pos:column="29">.</op:operator><name pos:line="1280" pos:column="30">message</name></name> <op:operator pos:line="1280" pos:column="38">=</op:operator> <name pos:line="1280" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="1283" pos:column="17">@<name pos:line="1283" pos:column="18">Override</name></annotation>
		<specifier pos:line="1284" pos:column="17">public</specifier> <name pos:line="1284" pos:column="24">String</name></type> <name pos:line="1284" pos:column="31">toString</name><parameter_list pos:line="1284" pos:column="39">()</parameter_list> <block pos:line="1284" pos:column="42">{
			<return pos:line="1285" pos:column="25">return <expr><name pos:line="1285" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="1288" pos:column="17">@<name pos:line="1288" pos:column="18">Override</name></annotation>
		<specifier pos:line="1289" pos:column="17">public</specifier> <name pos:line="1289" pos:column="24">String</name></type> <name pos:line="1289" pos:column="31">getMessage</name><parameter_list pos:line="1289" pos:column="41">()</parameter_list> <block pos:line="1289" pos:column="44">{
			<return pos:line="1290" pos:column="25">return <expr><name pos:line="1290" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>
	
	<comment type="block" pos:line="1294" pos:column="9">/*
	 * All people functions are run and tested locally in the main class for specific executions
	 */</comment>
	<function><type><specifier pos:line="1297" pos:column="9">public</specifier> <specifier pos:line="1297" pos:column="16">static</specifier> <name pos:line="1297" pos:column="23">void</name></type> <name pos:line="1297" pos:column="28">main</name><parameter_list pos:line="1297" pos:column="32">(<param><decl><type><name><name pos:line="1297" pos:column="33">String</name><index pos:line="1297" pos:column="39">[]</index></name></type> <name pos:line="1297" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="1297" pos:column="48">{

	}</block></function>

}</block></class>
</unit>
