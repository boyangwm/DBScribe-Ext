<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\CourseExamTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">HashMap</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Iterator</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">util</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Set</name></name>;</import>

<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">org</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">junit</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Test</name></name>;</import>


<class><specifier pos:line="14" pos:column="1">public</specifier> class <name pos:line="14" pos:column="14">CourseExamTest</name> <block pos:line="14" pos:column="29">{

	
<comment type="line" pos:line="17" pos:column="1">//	To add mks for a student</comment>
	<function><type><annotation pos:line="18" pos:column="9">@<name pos:line="18" pos:column="10">Test</name></annotation>
	<specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">testAddStudentMarks</name><parameter_list pos:line="19" pos:column="40">()</parameter_list> <block pos:line="19" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int</name></type> <name pos:line="21" pos:column="21">offerID</name> <init pos:line="21" pos:column="29">= <expr><lit:literal type="number" pos:line="21" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">CourseOffered</name></type> <name pos:line="22" pos:column="31">offeredCourse</name> <init pos:line="22" pos:column="45">= <expr><lit:literal type="null" pos:line="22" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="23" pos:column="17">try <block pos:line="23" pos:column="21">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">offeredCourse</name> <op:operator pos:line="24" pos:column="39">=</op:operator> <op:operator pos:line="24" pos:column="41">new</op:operator> <call><name pos:line="24" pos:column="45">CourseOffered</name><argument_list pos:line="24" pos:column="58">(<argument><expr><name pos:line="24" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="25" pos:column="19">catch <parameter_list pos:line="25" pos:column="25">(<param><decl><type><name><name pos:line="25" pos:column="26">Course</name><op:operator pos:line="25" pos:column="32">.</op:operator><name pos:line="25" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="25" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">e</name><op:operator pos:line="26" pos:column="26">.</op:operator><name pos:line="26" pos:column="27">printStackTrace</name></name><argument_list pos:line="26" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="27" pos:column="19">catch <parameter_list pos:line="27" pos:column="25">(<param><decl><type><name><name pos:line="27" pos:column="26">CourseOffered</name><op:operator pos:line="27" pos:column="39">.</op:operator><name pos:line="27" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="27" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="28" pos:column="25">e</name><op:operator pos:line="28" pos:column="26">.</op:operator><name pos:line="28" pos:column="27">printStackTrace</name></name><argument_list pos:line="28" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">String</name></type> <name pos:line="30" pos:column="24">examName</name> <init pos:line="30" pos:column="33">= <expr><lit:literal type="string" pos:line="30" pos:column="35">"Assgn3"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">int</name></type> <name pos:line="31" pos:column="21">UIN</name> <init pos:line="31" pos:column="25">= <expr><lit:literal type="number" pos:line="31" pos:column="27">584</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">Student</name></type> <name pos:line="32" pos:column="25">student</name><init pos:line="32" pos:column="32">=<expr><lit:literal type="null" pos:line="32" pos:column="33">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="33" pos:column="17">try <block pos:line="33" pos:column="21">{
			<expr_stmt><expr><name pos:line="34" pos:column="25">student</name> <op:operator pos:line="34" pos:column="33">=</op:operator> <op:operator pos:line="34" pos:column="35">new</op:operator> <call><name pos:line="34" pos:column="39">Student</name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="35" pos:column="19">catch <parameter_list pos:line="35" pos:column="25">(<param><decl><type><name><name pos:line="35" pos:column="26">People</name><op:operator pos:line="35" pos:column="32">.</op:operator><name pos:line="35" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="35" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="36" pos:column="25">e</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">printStackTrace</name></name><argument_list pos:line="36" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">double</name></type> <name pos:line="38" pos:column="24">marks</name> <init pos:line="38" pos:column="30">= <expr><lit:literal type="number" pos:line="38" pos:column="32">8.5</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">HashMap</name><argument_list pos:line="39" pos:column="24">&lt;<argument><name pos:line="39" pos:column="25">Student</name></argument>,<argument><name pos:line="39" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="39" pos:column="41">examMarks</name> <init pos:line="39" pos:column="51">= <expr><op:operator pos:line="39" pos:column="53">new</op:operator> <call><name><name pos:line="39" pos:column="57">HashMap</name><argument_list pos:line="39" pos:column="64">&lt;<argument><name pos:line="39" pos:column="65">Student</name></argument>,<argument><name pos:line="39" pos:column="73">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="39" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="40" pos:column="17">examMarks</name><op:operator pos:line="40" pos:column="26">.</op:operator><name pos:line="40" pos:column="27">put</name></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">student</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="40">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">UIN</name> <op:operator pos:line="41" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="23">589</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">marks</name> <op:operator pos:line="42" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="42" pos:column="25">7.5</lit:literal></expr>;</expr_stmt>
		<try pos:line="43" pos:column="17">try <block pos:line="43" pos:column="21">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">student</name> <op:operator pos:line="44" pos:column="33">=</op:operator> <op:operator pos:line="44" pos:column="35">new</op:operator> <call><name pos:line="44" pos:column="39">Student</name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="45" pos:column="19">catch <parameter_list pos:line="45" pos:column="25">(<param><decl><type><name><name pos:line="45" pos:column="26">People</name><op:operator pos:line="45" pos:column="32">.</op:operator><name pos:line="45" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="45" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="46" pos:column="25">e</name><op:operator pos:line="46" pos:column="26">.</op:operator><name pos:line="46" pos:column="27">printStackTrace</name></name><argument_list pos:line="46" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<expr_stmt><expr><call><name><name pos:line="48" pos:column="17">examMarks</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">put</name></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">student</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="40">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">CourseExams</name></type> <name pos:line="49" pos:column="29">exams</name> <init pos:line="49" pos:column="35">= <expr><op:operator pos:line="49" pos:column="37">new</op:operator> <call><name pos:line="49" pos:column="41">CourseExams</name><argument_list pos:line="49" pos:column="52">(<argument><expr><name pos:line="49" pos:column="53">offerID</name></expr></argument>,<argument><expr><name pos:line="49" pos:column="61">examName</name></expr></argument>,<argument><expr><name pos:line="49" pos:column="70">examMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">boolean</name></type> <name pos:line="51" pos:column="25">marksAdded</name> <init pos:line="51" pos:column="36">= <expr><call><name><name pos:line="51" pos:column="38">exams</name><op:operator pos:line="51" pos:column="43">.</op:operator><name pos:line="51" pos:column="44">addStudentMarks</name></name><argument_list pos:line="51" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">assertEquals</name><argument_list pos:line="52" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="52" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="52" pos:column="35">marksAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<function><type><annotation pos:line="56" pos:column="9">@<name pos:line="56" pos:column="10">Test</name></annotation>
	<specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">void</name></type> <name pos:line="57" pos:column="21">testGetStudentMarks</name><parameter_list pos:line="57" pos:column="40">()</parameter_list> <block pos:line="57" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">int</name></type> <name pos:line="58" pos:column="21">offerID</name> <init pos:line="58" pos:column="29">= <expr><lit:literal type="number" pos:line="58" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">CourseOffered</name></type> <name pos:line="59" pos:column="31">offeredCourse</name> <init pos:line="59" pos:column="45">= <expr><lit:literal type="null" pos:line="59" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="60" pos:column="17">try <block pos:line="60" pos:column="21">{
			<expr_stmt><expr><name pos:line="61" pos:column="25">offeredCourse</name> <op:operator pos:line="61" pos:column="39">=</op:operator> <op:operator pos:line="61" pos:column="41">new</op:operator> <call><name pos:line="61" pos:column="45">CourseOffered</name><argument_list pos:line="61" pos:column="58">(<argument><expr><name pos:line="61" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="62" pos:column="19">catch <parameter_list pos:line="62" pos:column="25">(<param><decl><type><name><name pos:line="62" pos:column="26">Course</name><op:operator pos:line="62" pos:column="32">.</op:operator><name pos:line="62" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="62" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">e</name><op:operator pos:line="63" pos:column="26">.</op:operator><name pos:line="63" pos:column="27">printStackTrace</name></name><argument_list pos:line="63" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="64" pos:column="19">catch <parameter_list pos:line="64" pos:column="25">(<param><decl><type><name><name pos:line="64" pos:column="26">CourseOffered</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="64" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="65" pos:column="25">e</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">printStackTrace</name></name><argument_list pos:line="65" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">CourseExams</name></type> <name pos:line="67" pos:column="29">exams</name> <init pos:line="67" pos:column="35">= <expr><op:operator pos:line="67" pos:column="37">new</op:operator> <call><name pos:line="67" pos:column="41">CourseExams</name><argument_list pos:line="67" pos:column="52">(<argument><expr><name pos:line="67" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">CourseExams</name></type> <name pos:line="68" pos:column="29">marks</name> <init pos:line="68" pos:column="35">= <expr><call><name><name pos:line="68" pos:column="37">exams</name><op:operator pos:line="68" pos:column="42">.</op:operator><name pos:line="68" pos:column="43">getStudentMarks</name></name><argument_list pos:line="68" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="69" pos:column="17">HashMap</name><argument_list pos:line="69" pos:column="24">&lt;<argument><name pos:line="69" pos:column="25">Student</name></argument>,<argument><name pos:line="69" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="69" pos:column="41">examMarks</name> <init pos:line="69" pos:column="51">= <expr><call><name><name pos:line="69" pos:column="53">marks</name><op:operator pos:line="69" pos:column="58">.</op:operator><name pos:line="69" pos:column="59">getExamMarks</name></name><argument_list pos:line="69" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="70" pos:column="17">Set</name><argument_list pos:line="70" pos:column="20">&lt;<argument><name pos:line="70" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="30">keys</name> <init pos:line="70" pos:column="35">= <expr><call><name><name pos:line="70" pos:column="37">examMarks</name><op:operator pos:line="70" pos:column="46">.</op:operator><name pos:line="70" pos:column="47">keySet</name></name><argument_list pos:line="70" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="71" pos:column="17">Iterator</name><argument_list pos:line="71" pos:column="25">&lt;<argument><name pos:line="71" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="35">keyIterator</name> <init pos:line="71" pos:column="47">= <expr><call><name><name pos:line="71" pos:column="49">keys</name><op:operator pos:line="71" pos:column="53">.</op:operator><name pos:line="71" pos:column="54">iterator</name></name><argument_list pos:line="71" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="72" pos:column="17">while <condition pos:line="72" pos:column="23">(<expr><call><name><name pos:line="72" pos:column="24">keyIterator</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">hasNext</name></name><argument_list pos:line="72" pos:column="43">()</argument_list></call></expr>)</condition> <block pos:line="72" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">Student</name></type> <name pos:line="73" pos:column="33">student</name> <init pos:line="73" pos:column="41">= <expr><call><name><name pos:line="73" pos:column="43">keyIterator</name><op:operator pos:line="73" pos:column="54">.</op:operator><name pos:line="73" pos:column="55">next</name></name><argument_list pos:line="73" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">int</name></type> <name pos:line="74" pos:column="29">UIN</name> <init pos:line="74" pos:column="33">= <expr><call><name><name pos:line="74" pos:column="35">student</name><op:operator pos:line="74" pos:column="42">.</op:operator><name pos:line="74" pos:column="43">getUIN</name></name><argument_list pos:line="74" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">double</name></type> <name pos:line="75" pos:column="32">studeMarks</name> <init pos:line="75" pos:column="43">= <expr><op:operator pos:line="75" pos:column="45">(</op:operator><name pos:line="75" pos:column="46">double</name><op:operator pos:line="75" pos:column="52">)</op:operator> <call><name><name pos:line="75" pos:column="54">examMarks</name><op:operator pos:line="75" pos:column="63">.</op:operator><name pos:line="75" pos:column="64">get</name></name><argument_list pos:line="75" pos:column="67">(<argument><expr><name pos:line="75" pos:column="68">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">System</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">out</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">println</name></name><argument_list pos:line="76" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="44">"UIN: "</lit:literal> <op:operator pos:line="76" pos:column="52">+</op:operator> <name pos:line="76" pos:column="54">UIN</name> <op:operator pos:line="76" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="76" pos:column="60">" TotalMarks: "</lit:literal> <op:operator pos:line="76" pos:column="76">+</op:operator> <name pos:line="76" pos:column="78">studeMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">assertNotNull</name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">examMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="82" pos:column="9">@<name pos:line="82" pos:column="10">Test</name></annotation>
	<specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">testGetStudentMarksCourseOfferedStudent</name><parameter_list pos:line="83" pos:column="60">()</parameter_list> <block pos:line="83" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">int</name></type> <name pos:line="84" pos:column="21">offerID</name> <init pos:line="84" pos:column="29">= <expr><lit:literal type="number" pos:line="84" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">CourseOffered</name></type> <name pos:line="85" pos:column="31">offeredCourse</name> <init pos:line="85" pos:column="45">= <expr><lit:literal type="null" pos:line="85" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="86" pos:column="17">try <block pos:line="86" pos:column="21">{
			<expr_stmt><expr><name pos:line="87" pos:column="25">offeredCourse</name> <op:operator pos:line="87" pos:column="39">=</op:operator> <op:operator pos:line="87" pos:column="41">new</op:operator> <call><name pos:line="87" pos:column="45">CourseOffered</name><argument_list pos:line="87" pos:column="58">(<argument><expr><name pos:line="87" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="88" pos:column="19">catch <parameter_list pos:line="88" pos:column="25">(<param><decl><type><name><name pos:line="88" pos:column="26">Course</name><op:operator pos:line="88" pos:column="32">.</op:operator><name pos:line="88" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="88" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="88" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="89" pos:column="25">e</name><op:operator pos:line="89" pos:column="26">.</op:operator><name pos:line="89" pos:column="27">printStackTrace</name></name><argument_list pos:line="89" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="90" pos:column="19">catch <parameter_list pos:line="90" pos:column="25">(<param><decl><type><name><name pos:line="90" pos:column="26">CourseOffered</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="90" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="91" pos:column="25">e</name><op:operator pos:line="91" pos:column="26">.</op:operator><name pos:line="91" pos:column="27">printStackTrace</name></name><argument_list pos:line="91" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">int</name></type> <name pos:line="93" pos:column="21">UIN</name> <init pos:line="93" pos:column="25">= <expr><lit:literal type="number" pos:line="93" pos:column="27">584</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="94" pos:column="17">Student</name></type> <name pos:line="94" pos:column="25">student</name><init pos:line="94" pos:column="32">=<expr><lit:literal type="null" pos:line="94" pos:column="33">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="95" pos:column="17">try <block pos:line="95" pos:column="21">{
			<expr_stmt><expr><name pos:line="96" pos:column="25">student</name> <op:operator pos:line="96" pos:column="33">=</op:operator> <op:operator pos:line="96" pos:column="35">new</op:operator> <call><name pos:line="96" pos:column="39">Student</name><argument_list pos:line="96" pos:column="46">(<argument><expr><name pos:line="96" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="97" pos:column="19">catch <parameter_list pos:line="97" pos:column="25">(<param><decl><type><name><name pos:line="97" pos:column="26">People</name><op:operator pos:line="97" pos:column="32">.</op:operator><name pos:line="97" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="97" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">e</name><op:operator pos:line="98" pos:column="26">.</op:operator><name pos:line="98" pos:column="27">printStackTrace</name></name><argument_list pos:line="98" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name><name pos:line="100" pos:column="17">HashMap</name><argument_list pos:line="100" pos:column="24">&lt;<argument><name pos:line="100" pos:column="25">String</name></argument>, <argument><name pos:line="100" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="100" pos:column="41">examMarks</name> <init pos:line="100" pos:column="51">= <expr><call><name><name pos:line="100" pos:column="53">CourseExams</name><op:operator pos:line="100" pos:column="64">.</op:operator><name pos:line="100" pos:column="65">getStudentMarks</name></name><argument_list pos:line="100" pos:column="80">(<argument><expr><name pos:line="100" pos:column="81">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="100" pos:column="95">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="101" pos:column="17">Set</name><argument_list pos:line="101" pos:column="20">&lt;<argument><name pos:line="101" pos:column="21">String</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="29">keys</name> <init pos:line="101" pos:column="34">= <expr><call><name><name pos:line="101" pos:column="36">examMarks</name><op:operator pos:line="101" pos:column="45">.</op:operator><name pos:line="101" pos:column="46">keySet</name></name><argument_list pos:line="101" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="102" pos:column="17">for(<init><decl><type><name pos:line="102" pos:column="21">String</name></type> <name pos:line="102" pos:column="28">exam</name><range pos:line="102" pos:column="32">:<expr><name pos:line="102" pos:column="33">keys</name></expr></range></decl></init>)<block pos:line="102" pos:column="38">{
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">System</name><op:operator pos:line="103" pos:column="31">.</op:operator><name pos:line="103" pos:column="32">out</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">println</name></name><argument_list pos:line="103" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="44">"Exam: "</lit:literal> <op:operator pos:line="103" pos:column="53">+</op:operator> <name pos:line="103" pos:column="55">exam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">System</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">out</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">println</name></name><argument_list pos:line="104" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="44">"Marks: "</lit:literal> <op:operator pos:line="104" pos:column="54">+</op:operator> <call><name><name pos:line="104" pos:column="56">examMarks</name><op:operator pos:line="104" pos:column="65">.</op:operator><name pos:line="104" pos:column="66">get</name></name><argument_list pos:line="104" pos:column="69">(<argument><expr><name pos:line="104" pos:column="70">exam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">assertNotNull</name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">examMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="109" pos:column="9">@<name pos:line="109" pos:column="10">Test</name></annotation>
	<specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">testGetStudents</name><parameter_list pos:line="110" pos:column="36">()</parameter_list> <block pos:line="110" pos:column="39">{
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">int</name></type> <name pos:line="111" pos:column="21">offerID</name> <init pos:line="111" pos:column="29">= <expr><lit:literal type="number" pos:line="111" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">CourseOffered</name></type> <name pos:line="112" pos:column="31">offeredCourse</name> <init pos:line="112" pos:column="45">= <expr><lit:literal type="null" pos:line="112" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="113" pos:column="17">try <block pos:line="113" pos:column="21">{
			<expr_stmt><expr><name pos:line="114" pos:column="25">offeredCourse</name> <op:operator pos:line="114" pos:column="39">=</op:operator> <op:operator pos:line="114" pos:column="41">new</op:operator> <call><name pos:line="114" pos:column="45">CourseOffered</name><argument_list pos:line="114" pos:column="58">(<argument><expr><name pos:line="114" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="115" pos:column="19">catch <parameter_list pos:line="115" pos:column="25">(<param><decl><type><name><name pos:line="115" pos:column="26">Course</name><op:operator pos:line="115" pos:column="32">.</op:operator><name pos:line="115" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="115" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="115" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">e</name><op:operator pos:line="116" pos:column="26">.</op:operator><name pos:line="116" pos:column="27">printStackTrace</name></name><argument_list pos:line="116" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="117" pos:column="19">catch <parameter_list pos:line="117" pos:column="25">(<param><decl><type><name><name pos:line="117" pos:column="26">CourseOffered</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="117" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="118" pos:column="25">e</name><op:operator pos:line="118" pos:column="26">.</op:operator><name pos:line="118" pos:column="27">printStackTrace</name></name><argument_list pos:line="118" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name><name pos:line="121" pos:column="17">HashMap</name><argument_list pos:line="121" pos:column="24">&lt;<argument><name pos:line="121" pos:column="25">Integer</name></argument>, <argument><name pos:line="121" pos:column="34">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="121" pos:column="42">studentMarks</name> <init pos:line="121" pos:column="55">= <expr><call><name><name pos:line="121" pos:column="57">CourseExams</name><op:operator pos:line="121" pos:column="68">.</op:operator><name pos:line="121" pos:column="69">getStudents</name></name><argument_list pos:line="121" pos:column="80">(<argument><expr><name pos:line="121" pos:column="81">offeredCourse</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="121" pos:column="95">"Assign2"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="122" pos:column="17">Set</name><argument_list pos:line="122" pos:column="20">&lt;<argument><name pos:line="122" pos:column="21">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="122" pos:column="30">keys</name> <init pos:line="122" pos:column="35">= <expr><call><name><name pos:line="122" pos:column="37">studentMarks</name><op:operator pos:line="122" pos:column="49">.</op:operator><name pos:line="122" pos:column="50">keySet</name></name><argument_list pos:line="122" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="123" pos:column="17">System</name><op:operator pos:line="123" pos:column="23">.</op:operator><name pos:line="123" pos:column="24">out</name><op:operator pos:line="123" pos:column="27">.</op:operator><name pos:line="123" pos:column="28">println</name></name><argument_list pos:line="123" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="36">"-----------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="124" pos:column="17">for(<init><decl><type><name pos:line="124" pos:column="21">Integer</name></type> <name pos:line="124" pos:column="29">studentUIN</name><range pos:line="124" pos:column="39">:<expr><name pos:line="124" pos:column="40">keys</name></expr></range></decl></init>)<block pos:line="124" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="125" pos:column="25">System</name><op:operator pos:line="125" pos:column="31">.</op:operator><name pos:line="125" pos:column="32">out</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">println</name></name><argument_list pos:line="125" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="44">"UIN: "</lit:literal> <op:operator pos:line="125" pos:column="52">+</op:operator> <name pos:line="125" pos:column="54">studentUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="126" pos:column="25">System</name><op:operator pos:line="126" pos:column="31">.</op:operator><name pos:line="126" pos:column="32">out</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">println</name></name><argument_list pos:line="126" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="44">"Marks: "</lit:literal> <op:operator pos:line="126" pos:column="54">+</op:operator> <call><name><name pos:line="126" pos:column="56">studentMarks</name><op:operator pos:line="126" pos:column="68">.</op:operator><name pos:line="126" pos:column="69">get</name></name><argument_list pos:line="126" pos:column="72">(<argument><expr><name pos:line="126" pos:column="73">studentUIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="128" pos:column="17">assertNotNull</name><argument_list pos:line="128" pos:column="30">(<argument><expr><name pos:line="128" pos:column="31">studentMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="131" pos:column="9">@<name pos:line="131" pos:column="10">Test</name></annotation>
	<specifier pos:line="132" pos:column="9">public</specifier> <name pos:line="132" pos:column="16">void</name></type> <name pos:line="132" pos:column="21">testGetStudentsFail</name><parameter_list pos:line="132" pos:column="40">()</parameter_list> <block pos:line="132" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">int</name></type> <name pos:line="133" pos:column="21">offerID</name> <init pos:line="133" pos:column="29">= <expr><lit:literal type="number" pos:line="133" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">CourseOffered</name></type> <name pos:line="134" pos:column="31">offeredCourse</name> <init pos:line="134" pos:column="45">= <expr><lit:literal type="null" pos:line="134" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="135" pos:column="17">try <block pos:line="135" pos:column="21">{
			<expr_stmt><expr><name pos:line="136" pos:column="25">offeredCourse</name> <op:operator pos:line="136" pos:column="39">=</op:operator> <op:operator pos:line="136" pos:column="41">new</op:operator> <call><name pos:line="136" pos:column="45">CourseOffered</name><argument_list pos:line="136" pos:column="58">(<argument><expr><name pos:line="136" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="137" pos:column="19">catch <parameter_list pos:line="137" pos:column="25">(<param><decl><type><name><name pos:line="137" pos:column="26">Course</name><op:operator pos:line="137" pos:column="32">.</op:operator><name pos:line="137" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="137" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="138" pos:column="25">e</name><op:operator pos:line="138" pos:column="26">.</op:operator><name pos:line="138" pos:column="27">printStackTrace</name></name><argument_list pos:line="138" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="139" pos:column="19">catch <parameter_list pos:line="139" pos:column="25">(<param><decl><type><name><name pos:line="139" pos:column="26">CourseOffered</name><op:operator pos:line="139" pos:column="39">.</op:operator><name pos:line="139" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="139" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="139" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="140" pos:column="25">e</name><op:operator pos:line="140" pos:column="26">.</op:operator><name pos:line="140" pos:column="27">printStackTrace</name></name><argument_list pos:line="140" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name><name pos:line="143" pos:column="17">HashMap</name><argument_list pos:line="143" pos:column="24">&lt;<argument><name pos:line="143" pos:column="25">Integer</name></argument>, <argument><name pos:line="143" pos:column="34">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="42">studentMarks</name> <init pos:line="143" pos:column="55">= <expr><call><name><name pos:line="143" pos:column="57">CourseExams</name><op:operator pos:line="143" pos:column="68">.</op:operator><name pos:line="143" pos:column="69">getStudents</name></name><argument_list pos:line="143" pos:column="80">(<argument><expr><name pos:line="143" pos:column="81">offeredCourse</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="143" pos:column="95">"Assign4"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="144" pos:column="17">Set</name><argument_list pos:line="144" pos:column="20">&lt;<argument><name pos:line="144" pos:column="21">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="144" pos:column="30">keys</name> <init pos:line="144" pos:column="35">= <expr><call><name><name pos:line="144" pos:column="37">studentMarks</name><op:operator pos:line="144" pos:column="49">.</op:operator><name pos:line="144" pos:column="50">keySet</name></name><argument_list pos:line="144" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="145" pos:column="17">System</name><op:operator pos:line="145" pos:column="23">.</op:operator><name pos:line="145" pos:column="24">out</name><op:operator pos:line="145" pos:column="27">.</op:operator><name pos:line="145" pos:column="28">println</name></name><argument_list pos:line="145" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="36">"-----------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="146" pos:column="17">for(<init><decl><type><name pos:line="146" pos:column="21">Integer</name></type> <name pos:line="146" pos:column="29">studentUIN</name><range pos:line="146" pos:column="39">:<expr><name pos:line="146" pos:column="40">keys</name></expr></range></decl></init>)<block pos:line="146" pos:column="45">{
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">System</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">out</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">println</name></name><argument_list pos:line="147" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="44">"UIN: "</lit:literal> <op:operator pos:line="147" pos:column="52">+</op:operator> <name pos:line="147" pos:column="54">studentUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="148" pos:column="25">System</name><op:operator pos:line="148" pos:column="31">.</op:operator><name pos:line="148" pos:column="32">out</name><op:operator pos:line="148" pos:column="35">.</op:operator><name pos:line="148" pos:column="36">println</name></name><argument_list pos:line="148" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="44">"Marks: "</lit:literal> <op:operator pos:line="148" pos:column="54">+</op:operator> <call><name><name pos:line="148" pos:column="56">studentMarks</name><op:operator pos:line="148" pos:column="68">.</op:operator><name pos:line="148" pos:column="69">get</name></name><argument_list pos:line="148" pos:column="72">(<argument><expr><name pos:line="148" pos:column="73">studentUIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="150" pos:column="17">assertEquals</name><argument_list pos:line="150" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="30">0</lit:literal></expr></argument>,<argument><expr><call><name><name pos:line="150" pos:column="32">studentMarks</name><op:operator pos:line="150" pos:column="44">.</op:operator><name pos:line="150" pos:column="45">size</name></name><argument_list pos:line="150" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="153" pos:column="9">@<name pos:line="153" pos:column="10">Test</name></annotation>
	<specifier pos:line="154" pos:column="9">public</specifier> <name pos:line="154" pos:column="16">void</name></type> <name pos:line="154" pos:column="21">testModifyStudentMarks</name><parameter_list pos:line="154" pos:column="43">()</parameter_list> <block pos:line="154" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">int</name></type> <name pos:line="155" pos:column="21">offerID</name> <init pos:line="155" pos:column="29">= <expr><lit:literal type="number" pos:line="155" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="156" pos:column="17">String</name></type> <name pos:line="156" pos:column="24">examName</name> <init pos:line="156" pos:column="33">= <expr><lit:literal type="string" pos:line="156" pos:column="35">"Assgn3"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">int</name></type> <name pos:line="158" pos:column="21">UIN</name> <init pos:line="158" pos:column="25">= <expr><lit:literal type="number" pos:line="158" pos:column="27">584</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="159" pos:column="17">Student</name></type> <name pos:line="159" pos:column="25">student</name><init pos:line="159" pos:column="32">=<expr><lit:literal type="null" pos:line="159" pos:column="33">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="160" pos:column="17">try <block pos:line="160" pos:column="21">{
			<expr_stmt><expr><name pos:line="161" pos:column="25">student</name> <op:operator pos:line="161" pos:column="33">=</op:operator> <op:operator pos:line="161" pos:column="35">new</op:operator> <call><name pos:line="161" pos:column="39">Student</name><argument_list pos:line="161" pos:column="46">(<argument><expr><name pos:line="161" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="162" pos:column="19">catch <parameter_list pos:line="162" pos:column="25">(<param><decl><type><name><name pos:line="162" pos:column="26">People</name><op:operator pos:line="162" pos:column="32">.</op:operator><name pos:line="162" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="162" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="163" pos:column="25">e</name><op:operator pos:line="163" pos:column="26">.</op:operator><name pos:line="163" pos:column="27">printStackTrace</name></name><argument_list pos:line="163" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">double</name></type> <name pos:line="165" pos:column="24">marks</name> <init pos:line="165" pos:column="30">= <expr><lit:literal type="number" pos:line="165" pos:column="32">9</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name><name pos:line="166" pos:column="17">HashMap</name><argument_list pos:line="166" pos:column="24">&lt;<argument><name pos:line="166" pos:column="25">Student</name></argument>,<argument><name pos:line="166" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="166" pos:column="41">examMarks</name> <init pos:line="166" pos:column="51">= <expr><op:operator pos:line="166" pos:column="53">new</op:operator> <call><name><name pos:line="166" pos:column="57">HashMap</name><argument_list pos:line="166" pos:column="64">&lt;<argument><name pos:line="166" pos:column="65">Student</name></argument>,<argument><name pos:line="166" pos:column="73">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="166" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="167" pos:column="17">examMarks</name><op:operator pos:line="167" pos:column="26">.</op:operator><name pos:line="167" pos:column="27">put</name></name><argument_list pos:line="167" pos:column="30">(<argument><expr><name pos:line="167" pos:column="31">student</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="40">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="168" pos:column="17">CourseExams</name></type> <name pos:line="168" pos:column="29">courseExams</name> <init pos:line="168" pos:column="41">= <expr><op:operator pos:line="168" pos:column="43">new</op:operator> <call><name pos:line="168" pos:column="47">CourseExams</name><argument_list pos:line="168" pos:column="58">(<argument><expr><name pos:line="168" pos:column="59">offerID</name></expr></argument>,<argument><expr><name pos:line="168" pos:column="67">examName</name></expr></argument>,<argument><expr><name pos:line="168" pos:column="76">examMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">boolean</name></type> <name pos:line="170" pos:column="25">marksModified</name> <init pos:line="170" pos:column="39">= <expr><call><name><name pos:line="170" pos:column="41">courseExams</name><op:operator pos:line="170" pos:column="52">.</op:operator><name pos:line="170" pos:column="53">modifyStudentMarks</name></name><argument_list pos:line="170" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="171" pos:column="17">assertEquals</name><argument_list pos:line="171" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="171" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="171" pos:column="35">marksModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="174" pos:column="9">@<name pos:line="174" pos:column="10">Test</name></annotation>
	<specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">void</name></type> <name pos:line="175" pos:column="21">testViewAllExams</name><parameter_list pos:line="175" pos:column="37">()</parameter_list> <block pos:line="175" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="176" pos:column="17">int</name></type> <name pos:line="176" pos:column="21">offerID</name> <init pos:line="176" pos:column="29">= <expr><lit:literal type="number" pos:line="176" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">CourseOffered</name></type> <name pos:line="177" pos:column="31">offeredCourse</name> <init pos:line="177" pos:column="45">= <expr><lit:literal type="null" pos:line="177" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="178" pos:column="17">try <block pos:line="178" pos:column="21">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">offeredCourse</name> <op:operator pos:line="179" pos:column="39">=</op:operator> <op:operator pos:line="179" pos:column="41">new</op:operator> <call><name pos:line="179" pos:column="45">CourseOffered</name><argument_list pos:line="179" pos:column="58">(<argument><expr><name pos:line="179" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="180" pos:column="19">catch <parameter_list pos:line="180" pos:column="25">(<param><decl><type><name><name pos:line="180" pos:column="26">Course</name><op:operator pos:line="180" pos:column="32">.</op:operator><name pos:line="180" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="180" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="180" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="181" pos:column="25">e</name><op:operator pos:line="181" pos:column="26">.</op:operator><name pos:line="181" pos:column="27">printStackTrace</name></name><argument_list pos:line="181" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="182" pos:column="19">catch <parameter_list pos:line="182" pos:column="25">(<param><decl><type><name><name pos:line="182" pos:column="26">CourseOffered</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="182" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="182" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="183" pos:column="25">e</name><op:operator pos:line="183" pos:column="26">.</op:operator><name pos:line="183" pos:column="27">printStackTrace</name></name><argument_list pos:line="183" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="185" pos:column="17">CourseExams</name></type> <name pos:line="185" pos:column="29">exams</name> <init pos:line="185" pos:column="35">= <expr><op:operator pos:line="185" pos:column="37">new</op:operator> <call><name pos:line="185" pos:column="41">CourseExams</name><argument_list pos:line="185" pos:column="52">(<argument><expr><name pos:line="185" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="186" pos:column="17">ArrayList</name><argument_list pos:line="186" pos:column="26">&lt;<argument><name pos:line="186" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="186" pos:column="35">allExams</name> <init pos:line="186" pos:column="44">= <expr><call><name><name pos:line="186" pos:column="46">exams</name><op:operator pos:line="186" pos:column="51">.</op:operator><name pos:line="186" pos:column="52">viewAllExams</name></name><argument_list pos:line="186" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="187" pos:column="17">assertNotNull</name><argument_list pos:line="187" pos:column="30">(<argument><expr><name pos:line="187" pos:column="31">allExams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

}</block></class>
</unit>
