<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\app\testCalculateScoreDriver.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">app</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">com</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">riskIt</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">controller</name><op:operator pos:line="5" pos:column="29">.</op:operator><name pos:line="5" pos:column="30">AgentManager</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">com</name><op:operator pos:line="6" pos:column="11">.</op:operator><name pos:line="6" pos:column="12">riskIt</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">controller</name><op:operator pos:line="6" pos:column="29">.</op:operator><name pos:line="6" pos:column="30">Requirements19_24</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">controller</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">UserManager</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">data</name><op:operator pos:line="8" pos:column="23">.</op:operator><name pos:line="8" pos:column="24">Invitation</name></name>;</import>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">testCalculateScoreDriver</name> <block pos:line="10" pos:column="39">{

	<comment type="block" format="javadoc" pos:line="12" pos:column="9">/**
	 * @param args
	 */</comment>
	<function><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">void</name></type> <name pos:line="15" pos:column="28">main</name><parameter_list pos:line="15" pos:column="32">(<param><decl><type><name><name pos:line="15" pos:column="33">String</name><index pos:line="15" pos:column="39">[]</index></name></type> <name pos:line="15" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="15" pos:column="48">{
	<comment type="line" pos:line="16" pos:column="9">//pads the entries by zero to accomodate for copy </comment>
		<try pos:line="17" pos:column="17">try<block pos:line="17" pos:column="20">{
		<expr_stmt><expr><call><name><name pos:line="18" pos:column="17">System</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">out</name><op:operator pos:line="18" pos:column="27">.</op:operator><name pos:line="18" pos:column="28">println</name></name><argument_list pos:line="18" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="36">"TestCase: Calculate Score"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">AgentManager</name></type> <name pos:line="19" pos:column="30">agent</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">agent</name> <op:operator pos:line="20" pos:column="23">=</op:operator> <op:operator pos:line="20" pos:column="25">new</op:operator> <call><name pos:line="20" pos:column="29">AgentManager</name><argument_list pos:line="20" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="21" pos:column="17">agent</name><op:operator pos:line="21" pos:column="22">.</op:operator><name pos:line="21" pos:column="23">calculateScore</name></name><argument_list pos:line="21" pos:column="37">(<argument><expr><call><name><name pos:line="21" pos:column="38">Integer</name><op:operator pos:line="21" pos:column="45">.</op:operator><name pos:line="21" pos:column="46">parseInt</name></name><argument_list pos:line="21" pos:column="54">(<argument><expr><name><name pos:line="21" pos:column="55">args</name><index pos:line="21" pos:column="59">[<expr><lit:literal type="number" pos:line="21" pos:column="60">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block><catch pos:line="22" pos:column="18">catch<parameter_list pos:line="22" pos:column="23">(<param><decl><type><name pos:line="22" pos:column="24">Exception</name></type> <name pos:line="22" pos:column="34">e</name></decl></param>)</parameter_list><block pos:line="22" pos:column="36">{
			<expr_stmt><expr><call><name><name pos:line="23" pos:column="25">System</name><op:operator pos:line="23" pos:column="31">.</op:operator><name pos:line="23" pos:column="32">out</name><op:operator pos:line="23" pos:column="35">.</op:operator><name pos:line="23" pos:column="36">println</name></name><argument_list pos:line="23" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="44">"exception"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<try pos:line="25" pos:column="17">try<block pos:line="25" pos:column="20">{
		<expr_stmt><expr><call><name><name pos:line="26" pos:column="17">System</name><op:operator pos:line="26" pos:column="23">.</op:operator><name pos:line="26" pos:column="24">out</name><op:operator pos:line="26" pos:column="27">.</op:operator><name pos:line="26" pos:column="28">println</name></name><argument_list pos:line="26" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="36">"TestCase: Calculate CustomreQuotes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">UserManager</name></type> <name pos:line="27" pos:column="29">user</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">user</name> <op:operator pos:line="28" pos:column="22">=</op:operator> <op:operator pos:line="28" pos:column="24">new</op:operator> <call><name pos:line="28" pos:column="28">UserManager</name><argument_list pos:line="28" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name pos:line="29" pos:column="17">ArrayList</name><argument_list pos:line="29" pos:column="26">&lt;<argument><name pos:line="29" pos:column="27">Invitation</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="39">inv1</name> <init pos:line="29" pos:column="44">= <expr><op:operator pos:line="29" pos:column="46">new</op:operator> <call><name><name pos:line="29" pos:column="50">ArrayList</name><argument_list pos:line="29" pos:column="59">&lt;<argument><name pos:line="29" pos:column="60">Invitation</name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">Invitation</name></type> <name pos:line="30" pos:column="28">cust1</name> <init pos:line="30" pos:column="34">= <expr><op:operator pos:line="30" pos:column="36">new</op:operator> <call><name pos:line="30" pos:column="40">Invitation</name><argument_list pos:line="30" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">long</name></type> <name pos:line="31" pos:column="22">ssn</name> <init pos:line="31" pos:column="26">= <expr><call><name><name pos:line="31" pos:column="28">Integer</name><op:operator pos:line="31" pos:column="35">.</op:operator><name pos:line="31" pos:column="36">parseInt</name></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name><name pos:line="31" pos:column="45">args</name><index pos:line="31" pos:column="49">[<expr><lit:literal type="number" pos:line="31" pos:column="50">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">double</name></type> <name pos:line="32" pos:column="24">deductible</name> <init pos:line="32" pos:column="35">= <expr><lit:literal type="number" pos:line="32" pos:column="37">50</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">double</name></type> <name pos:line="33" pos:column="24">worth</name> <init pos:line="33" pos:column="30">= <expr><lit:literal type="number" pos:line="33" pos:column="32">10000</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">cust1</name> <op:operator pos:line="34" pos:column="23">=</op:operator> <call><name><name pos:line="34" pos:column="25">user</name><op:operator pos:line="34" pos:column="29">.</op:operator><name pos:line="34" pos:column="30">calculateQuoteForCustomer</name></name><argument_list pos:line="34" pos:column="55">(<argument><expr><name pos:line="34" pos:column="56">ssn</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="61">deductible</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="73">worth</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="80">inv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="35" pos:column="17">cust1</name><op:operator pos:line="35" pos:column="22">.</op:operator><name pos:line="35" pos:column="23">getPremium</name></name><argument_list pos:line="35" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
		
	}</block><catch pos:line="37" pos:column="10">catch<parameter_list pos:line="37" pos:column="15">(<param><decl><type><name pos:line="37" pos:column="16">Exception</name></type> <name pos:line="37" pos:column="26">e</name></decl></param>)</parameter_list><block pos:line="37" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="38" pos:column="17">System</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">out</name><op:operator pos:line="38" pos:column="27">.</op:operator><name pos:line="38" pos:column="28">println</name></name><argument_list pos:line="38" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="36">"exception"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>
		
		
	<try pos:line="42" pos:column="9">try<block pos:line="42" pos:column="12">{
		<expr_stmt><expr><call><name><name pos:line="43" pos:column="17">System</name><op:operator pos:line="43" pos:column="23">.</op:operator><name pos:line="43" pos:column="24">out</name><op:operator pos:line="43" pos:column="27">.</op:operator><name pos:line="43" pos:column="28">println</name></name><argument_list pos:line="43" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="36">"TestCase: Calculate Likeliness To Move Factor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">Requirements19_24</name></type> <name pos:line="44" pos:column="35">requirements</name></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">requirements</name> <op:operator pos:line="45" pos:column="30">=</op:operator> <op:operator pos:line="45" pos:column="32">new</op:operator> <call><name pos:line="45" pos:column="36">Requirements19_24</name><argument_list pos:line="45" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="46" pos:column="17">requirements</name><op:operator pos:line="46" pos:column="29">.</op:operator><name pos:line="46" pos:column="30">CalculateLikelinessToMoveFactor</name></name><argument_list pos:line="46" pos:column="61">(<argument><expr><call><name><name pos:line="46" pos:column="62">Integer</name><op:operator pos:line="46" pos:column="69">.</op:operator><name pos:line="46" pos:column="70">parseInt</name></name><argument_list pos:line="46" pos:column="78">(<argument><expr><name><name pos:line="46" pos:column="79">args</name><index pos:line="46" pos:column="83">[<expr><lit:literal type="number" pos:line="46" pos:column="84">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block><catch pos:line="48" pos:column="10">catch<parameter_list pos:line="48" pos:column="15">(<param><decl><type><name pos:line="48" pos:column="16">Exception</name></type> <name pos:line="48" pos:column="26">e</name></decl></param>)</parameter_list><block pos:line="48" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="49" pos:column="17">System</name><op:operator pos:line="49" pos:column="23">.</op:operator><name pos:line="49" pos:column="24">out</name><op:operator pos:line="49" pos:column="27">.</op:operator><name pos:line="49" pos:column="28">println</name></name><argument_list pos:line="49" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="36">"exception"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></catch></try>
	}</block></function>

}</block></class>
</unit>
