<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\EmployeeTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>
<import pos:line="3" pos:column="1">import static <name><name pos:line="3" pos:column="15">org</name><op:operator pos:line="3" pos:column="18">.</op:operator><name pos:line="3" pos:column="19">junit</name><op:operator pos:line="3" pos:column="24">.</op:operator><name pos:line="3" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Test</name></name>;</import>



<class><specifier pos:line="11" pos:column="1">public</specifier> class <name pos:line="11" pos:column="14">EmployeeTest</name> <block pos:line="11" pos:column="27">{

	<function><type><annotation pos:line="13" pos:column="9">@<name pos:line="13" pos:column="10">Test</name></annotation>
	<specifier pos:line="14" pos:column="9">public</specifier> <name pos:line="14" pos:column="16">void</name></type> <name pos:line="14" pos:column="21">testEmployeeInt1</name><parameter_list pos:line="14" pos:column="37">()</parameter_list> <throws pos:line="14" pos:column="40">throws <argument><expr><name><name pos:line="14" pos:column="47">People</name><op:operator pos:line="14" pos:column="53">.</op:operator><name pos:line="14" pos:column="54">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="14" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">Employee</name></type> <name pos:line="16" pos:column="26">e</name><init pos:line="16" pos:column="27">=<expr><op:operator pos:line="16" pos:column="28">new</op:operator> <call><name pos:line="16" pos:column="32">Employee</name><argument_list pos:line="16" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="16" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">assertNotNull</name><argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="18" pos:column="17">//fail("Not yet implemented");</comment>
	}</block></function>
	
	<function><type><annotation pos:line="21" pos:column="9">@<name pos:line="21" pos:column="10">Test</name></annotation>
	<specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">void</name></type> <name pos:line="22" pos:column="21">testEmployeeInt2</name><parameter_list pos:line="22" pos:column="37">()</parameter_list><block pos:line="22" pos:column="39">{
		
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">Employee</name></type> <name pos:line="24" pos:column="26">e</name></decl>;</decl_stmt>
		<try pos:line="25" pos:column="17">try <block pos:line="25" pos:column="21">{
			<expr_stmt><expr><name pos:line="26" pos:column="25">e</name> <op:operator pos:line="26" pos:column="27">=</op:operator> <op:operator pos:line="26" pos:column="29">new</op:operator> <call><name pos:line="26" pos:column="33">Employee</name><argument_list pos:line="26" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="42">18000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">assertNull</name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="28" pos:column="19">catch <parameter_list pos:line="28" pos:column="25">(<param><decl><type><name><name pos:line="28" pos:column="26">People</name><op:operator pos:line="28" pos:column="32">.</op:operator><name pos:line="28" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="28" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="65">{
			<comment type="line" pos:line="29" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="30" pos:column="25">e1</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">printStackTrace</name></name><argument_list pos:line="30" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<comment type="line" pos:line="33" pos:column="17">//fail("Not yet implemented");</comment>
	}</block></function>
	

	<function><type><annotation pos:line="37" pos:column="9">@<name pos:line="37" pos:column="10">Test</name></annotation>
	<specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">testAddEmployee</name><parameter_list pos:line="38" pos:column="36">()</parameter_list> <block pos:line="38" pos:column="39">{
		
		<comment type="line" pos:line="40" pos:column="17">//cannot test this function as this would create inconsistency in the database</comment>

	}</block></function>

	<function><type><annotation pos:line="44" pos:column="9">@<name pos:line="44" pos:column="10">Test</name></annotation>
	<specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">testAddEmployeeCheck1</name><parameter_list pos:line="45" pos:column="42">()</parameter_list> <block pos:line="45" pos:column="45">{
		
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">boolean</name></type> <name pos:line="47" pos:column="25">check</name><init pos:line="47" pos:column="30">=<expr><call><name><name pos:line="47" pos:column="31">Employee</name><op:operator pos:line="47" pos:column="39">.</op:operator><name pos:line="47" pos:column="40">addEmployeeCheck</name></name><argument_list pos:line="47" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="57">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">assertTrue</name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="51" pos:column="9">@<name pos:line="51" pos:column="10">Test</name></annotation>
	<specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">void</name></type> <name pos:line="52" pos:column="21">testAddEmployeeCheck2</name><parameter_list pos:line="52" pos:column="42">()</parameter_list> <block pos:line="52" pos:column="45">{
		
		<decl_stmt><decl><type><name pos:line="54" pos:column="17">boolean</name></type> <name pos:line="54" pos:column="25">check</name><init pos:line="54" pos:column="30">=<expr><call><name><name pos:line="54" pos:column="31">Employee</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">addEmployeeCheck</name></name><argument_list pos:line="54" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="57">584</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">assertFalse</name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><type><annotation pos:line="59" pos:column="9">@<name pos:line="59" pos:column="10">Test</name></annotation>
	<specifier pos:line="60" pos:column="9">public</specifier> <name pos:line="60" pos:column="16">void</name></type> <name pos:line="60" pos:column="21">testUpdateEmpDetails</name><parameter_list pos:line="60" pos:column="41">()</parameter_list> <throws pos:line="60" pos:column="44">throws <argument><expr><name><name pos:line="60" pos:column="51">Student</name><op:operator pos:line="60" pos:column="58">.</op:operator><name pos:line="60" pos:column="59">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="60" pos:column="81">{
		
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">boolean</name></type> <name pos:line="62" pos:column="25">check</name><init pos:line="62" pos:column="30">=<expr><call><name><name pos:line="62" pos:column="31">Employee</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="62" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="57">581</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="62">"testing"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="73">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">assertTrue</name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="66" pos:column="9">@<name pos:line="66" pos:column="10">Test</name></annotation>
	<specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">void</name></type> <name pos:line="67" pos:column="21">testUpdateEmpDetails1</name><parameter_list pos:line="67" pos:column="42">()</parameter_list> <throws pos:line="67" pos:column="45">throws <argument><expr><name><name pos:line="67" pos:column="52">Student</name><op:operator pos:line="67" pos:column="59">.</op:operator><name pos:line="67" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="67" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">boolean</name></type> <name pos:line="69" pos:column="25">check</name><init pos:line="69" pos:column="30">=<expr><call><name><name pos:line="69" pos:column="31">Employee</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="69" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="69" pos:column="57">581</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="69" pos:column="61">"TBD"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="69" pos:column="67">"TBD"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">assertTrue</name><argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="73" pos:column="9">@<name pos:line="73" pos:column="10">Test</name></annotation>
	<specifier pos:line="74" pos:column="9">public</specifier> <name pos:line="74" pos:column="16">void</name></type> <name pos:line="74" pos:column="21">testUpdateEmpDetails2</name><parameter_list pos:line="74" pos:column="42">()</parameter_list> <throws pos:line="74" pos:column="45">throws <argument><expr><name><name pos:line="74" pos:column="52">Student</name><op:operator pos:line="74" pos:column="59">.</op:operator><name pos:line="74" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="74" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">boolean</name></type> <name pos:line="76" pos:column="25">check</name><init pos:line="76" pos:column="30">=<expr><call><name><name pos:line="76" pos:column="31">Employee</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="76" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="76" pos:column="57">272</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="76" pos:column="62">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="76" pos:column="68">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">assertFalse</name><argument_list pos:line="77" pos:column="28">(<argument><expr><name pos:line="77" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="80" pos:column="9">@<name pos:line="80" pos:column="10">Test</name></annotation>
	<specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">void</name></type> <name pos:line="81" pos:column="21">testUpdateEmpDetails3</name><parameter_list pos:line="81" pos:column="42">()</parameter_list> <throws pos:line="81" pos:column="45">throws <argument><expr><name><name pos:line="81" pos:column="52">Student</name><op:operator pos:line="81" pos:column="59">.</op:operator><name pos:line="81" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="81" pos:column="82">{
		
		
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">boolean</name></type> <name pos:line="84" pos:column="25">check</name><init pos:line="84" pos:column="30">=<expr><call><name><name pos:line="84" pos:column="31">Employee</name><op:operator pos:line="84" pos:column="39">.</op:operator><name pos:line="84" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="84" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="84" pos:column="57">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="84" pos:column="62">"testing"</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="84" pos:column="73">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">assertFalse</name><argument_list pos:line="85" pos:column="28">(<argument><expr><name pos:line="85" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">testUpdateEmpDetails4</name><parameter_list pos:line="89" pos:column="42">()</parameter_list> <throws pos:line="89" pos:column="45">throws <argument><expr><name><name pos:line="89" pos:column="52">Student</name><op:operator pos:line="89" pos:column="59">.</op:operator><name pos:line="89" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="89" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="91" pos:column="17">boolean</name></type> <name pos:line="91" pos:column="25">check</name><init pos:line="91" pos:column="30">=<expr><call><name><name pos:line="91" pos:column="31">Employee</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="91" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="91" pos:column="57">272</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="62">""</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="66">"testing"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">assertFalse</name><argument_list pos:line="92" pos:column="28">(<argument><expr><name pos:line="92" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="95" pos:column="9">@<name pos:line="95" pos:column="10">Test</name></annotation>
	<specifier pos:line="96" pos:column="9">public</specifier> <name pos:line="96" pos:column="16">void</name></type> <name pos:line="96" pos:column="21">testUpdateEmpDetails5</name><parameter_list pos:line="96" pos:column="42">()</parameter_list> <throws pos:line="96" pos:column="45">throws <argument><expr><name><name pos:line="96" pos:column="52">Student</name><op:operator pos:line="96" pos:column="59">.</op:operator><name pos:line="96" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="96" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">boolean</name></type> <name pos:line="98" pos:column="25">check</name><init pos:line="98" pos:column="30">=<expr><call><name><name pos:line="98" pos:column="31">Employee</name><op:operator pos:line="98" pos:column="39">.</op:operator><name pos:line="98" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="98" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="98" pos:column="57">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="62">"testing"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="73">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">assertFalse</name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="102" pos:column="9">@<name pos:line="102" pos:column="10">Test</name></annotation>
	<specifier pos:line="103" pos:column="9">public</specifier> <name pos:line="103" pos:column="16">void</name></type> <name pos:line="103" pos:column="21">testUpdateEmpDetails6</name><parameter_list pos:line="103" pos:column="42">()</parameter_list> <throws pos:line="103" pos:column="45">throws <argument><expr><name><name pos:line="103" pos:column="52">Student</name><op:operator pos:line="103" pos:column="59">.</op:operator><name pos:line="103" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="103" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="105" pos:column="17">boolean</name></type> <name pos:line="105" pos:column="25">check</name><init pos:line="105" pos:column="30">=<expr><call><name><name pos:line="105" pos:column="31">Employee</name><op:operator pos:line="105" pos:column="39">.</op:operator><name pos:line="105" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="105" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="57">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="62">""</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="66">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">assertFalse</name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="109" pos:column="9">@<name pos:line="109" pos:column="10">Test</name></annotation>
	<specifier pos:line="110" pos:column="9">public</specifier> <name pos:line="110" pos:column="16">void</name></type> <name pos:line="110" pos:column="21">testUpdateEmpDetails7</name><parameter_list pos:line="110" pos:column="42">()</parameter_list> <throws pos:line="110" pos:column="45">throws <argument><expr><name><name pos:line="110" pos:column="52">Student</name><op:operator pos:line="110" pos:column="59">.</op:operator><name pos:line="110" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="110" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">boolean</name></type> <name pos:line="112" pos:column="25">check</name><init pos:line="112" pos:column="30">=<expr><call><name><name pos:line="112" pos:column="31">Employee</name><op:operator pos:line="112" pos:column="39">.</op:operator><name pos:line="112" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="112" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="112" pos:column="57">600</lit:literal></expr></argument>,<argument><expr><lit:literal type="null" pos:line="112" pos:column="61">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="112" pos:column="67">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">assertFalse</name><argument_list pos:line="113" pos:column="28">(<argument><expr><name pos:line="113" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="116" pos:column="9">@<name pos:line="116" pos:column="10">Test</name></annotation>
	<specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">testUpdateEmpDetails8</name><parameter_list pos:line="117" pos:column="42">()</parameter_list> <throws pos:line="117" pos:column="45">throws <argument><expr><name><name pos:line="117" pos:column="52">Student</name><op:operator pos:line="117" pos:column="59">.</op:operator><name pos:line="117" pos:column="60">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="117" pos:column="82">{
		
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">boolean</name></type> <name pos:line="119" pos:column="25">check</name><init pos:line="119" pos:column="30">=<expr><call><name><name pos:line="119" pos:column="31">Employee</name><op:operator pos:line="119" pos:column="39">.</op:operator><name pos:line="119" pos:column="40">updateEmpDetails</name></name><argument_list pos:line="119" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="119" pos:column="57">272</lit:literal></expr></argument>,<argument><expr><lit:literal type="null" pos:line="119" pos:column="61">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="119" pos:column="67">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">assertFalse</name><argument_list pos:line="120" pos:column="28">(<argument><expr><name pos:line="120" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="123" pos:column="9">@<name pos:line="123" pos:column="10">Test</name></annotation>
	<specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">testUpdateEmpDetailscheck1</name><parameter_list pos:line="124" pos:column="47">()</parameter_list> <block pos:line="124" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="126" pos:column="17">boolean</name></type> <name pos:line="126" pos:column="25">check</name><init pos:line="126" pos:column="30">=<expr><call><name><name pos:line="126" pos:column="31">Employee</name><op:operator pos:line="126" pos:column="39">.</op:operator><name pos:line="126" pos:column="40">updateEmpDetailscheck</name></name><argument_list pos:line="126" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="126" pos:column="62">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="127" pos:column="17">assertTrue</name><argument_list pos:line="127" pos:column="27">(<argument><expr><name pos:line="127" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="130" pos:column="9">@<name pos:line="130" pos:column="10">Test</name></annotation>
	<specifier pos:line="131" pos:column="9">public</specifier> <name pos:line="131" pos:column="16">void</name></type> <name pos:line="131" pos:column="21">testUpdateEmpDetailscheck2</name><parameter_list pos:line="131" pos:column="47">()</parameter_list> <block pos:line="131" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">boolean</name></type> <name pos:line="133" pos:column="25">check</name><init pos:line="133" pos:column="30">=<expr><call><name><name pos:line="133" pos:column="31">Employee</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">updateEmpDetailscheck</name></name><argument_list pos:line="133" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="62">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">assertFalse</name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="137" pos:column="9">@<name pos:line="137" pos:column="10">Test</name></annotation>
	<specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">void</name></type> <name pos:line="138" pos:column="21">testGiveBonus1</name><parameter_list pos:line="138" pos:column="35">()</parameter_list> <throws pos:line="138" pos:column="38">throws <argument><expr><name><name pos:line="138" pos:column="45">Employee</name><op:operator pos:line="138" pos:column="53">.</op:operator><name pos:line="138" pos:column="54">bonusNotValidException</name></name></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="78">Student</name><op:operator pos:line="138" pos:column="85">.</op:operator><name pos:line="138" pos:column="86">AccessDeniedException</name></name></expr></argument></throws> <block pos:line="138" pos:column="108">{
		
		<decl_stmt><decl><type><name pos:line="140" pos:column="17">boolean</name></type> <name pos:line="140" pos:column="25">check</name><init pos:line="140" pos:column="30">=<expr><call><name><name pos:line="140" pos:column="31">Employee</name><op:operator pos:line="140" pos:column="39">.</op:operator><name pos:line="140" pos:column="40">giveBonus</name></name><argument_list pos:line="140" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="140" pos:column="50">581</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="140" pos:column="55">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="141" pos:column="17">assertTrue</name><argument_list pos:line="141" pos:column="27">(<argument><expr><name pos:line="141" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="144" pos:column="9">@<name pos:line="144" pos:column="10">Test</name></annotation>
	<specifier pos:line="145" pos:column="9">public</specifier> <name pos:line="145" pos:column="16">void</name></type> <name pos:line="145" pos:column="21">testGiveBonus2</name><parameter_list pos:line="145" pos:column="35">()</parameter_list> <block pos:line="145" pos:column="38">{
		
		<try pos:line="147" pos:column="17">try <block pos:line="147" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="148" pos:column="25">boolean</name></type> <name pos:line="148" pos:column="33">check</name><init pos:line="148" pos:column="38">=<expr><call><name><name pos:line="148" pos:column="39">Employee</name><op:operator pos:line="148" pos:column="47">.</op:operator><name pos:line="148" pos:column="48">giveBonus</name></name><argument_list pos:line="148" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="148" pos:column="58">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="148" pos:column="63">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="149" pos:column="25">assertFalse</name><argument_list pos:line="149" pos:column="36">(<argument><expr><name pos:line="149" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="150" pos:column="19">catch <parameter_list pos:line="150" pos:column="25">(<param><decl><type><name><name pos:line="150" pos:column="26">Employee</name><op:operator pos:line="150" pos:column="34">.</op:operator><name pos:line="150" pos:column="35">bonusNotValidException</name></name></type> | <type><name><name pos:line="150" pos:column="60">Student</name><op:operator pos:line="150" pos:column="67">.</op:operator><name pos:line="150" pos:column="68">AccessDeniedException</name></name></type> <name pos:line="150" pos:column="90">e</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="93">{
			<comment type="line" pos:line="151" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="152" pos:column="25">e</name><op:operator pos:line="152" pos:column="26">.</op:operator><name pos:line="152" pos:column="27">printStackTrace</name></name><argument_list pos:line="152" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="156" pos:column="9">@<name pos:line="156" pos:column="10">Test</name></annotation>
	<specifier pos:line="157" pos:column="9">public</specifier> <name pos:line="157" pos:column="16">void</name></type> <name pos:line="157" pos:column="21">testGiveBonus3</name><parameter_list pos:line="157" pos:column="35">()</parameter_list> <block pos:line="157" pos:column="38">{
		
		<try pos:line="159" pos:column="17">try <block pos:line="159" pos:column="21">{
			
			<decl_stmt><decl><type><name pos:line="161" pos:column="25">boolean</name></type> <name pos:line="161" pos:column="33">check</name><init pos:line="161" pos:column="38">=<expr><call><name><name pos:line="161" pos:column="39">Employee</name><op:operator pos:line="161" pos:column="47">.</op:operator><name pos:line="161" pos:column="48">giveBonus</name></name><argument_list pos:line="161" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="161" pos:column="58">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="161" pos:column="63">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="162" pos:column="25">assertFalse</name><argument_list pos:line="162" pos:column="36">(<argument><expr><name pos:line="162" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="163" pos:column="19">catch <parameter_list pos:line="163" pos:column="25">(<param><decl><type><name><name pos:line="163" pos:column="26">Employee</name><op:operator pos:line="163" pos:column="34">.</op:operator><name pos:line="163" pos:column="35">bonusNotValidException</name></name></type> | <type><name><name pos:line="163" pos:column="60">Student</name><op:operator pos:line="163" pos:column="67">.</op:operator><name pos:line="163" pos:column="68">AccessDeniedException</name></name></type> <name pos:line="163" pos:column="90">e</name></decl></param>)</parameter_list> <block pos:line="163" pos:column="93">{
			<comment type="line" pos:line="164" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="165" pos:column="25">e</name><op:operator pos:line="165" pos:column="26">.</op:operator><name pos:line="165" pos:column="27">printStackTrace</name></name><argument_list pos:line="165" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
	
	<function><type><annotation pos:line="169" pos:column="9">@<name pos:line="169" pos:column="10">Test</name></annotation>
	<specifier pos:line="170" pos:column="9">public</specifier> <name pos:line="170" pos:column="16">void</name></type> <name pos:line="170" pos:column="21">testGiveBonus4</name><parameter_list pos:line="170" pos:column="35">()</parameter_list> <block pos:line="170" pos:column="38">{
		
		<try pos:line="172" pos:column="17">try <block pos:line="172" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="173" pos:column="25">boolean</name></type> <name pos:line="173" pos:column="33">check</name><init pos:line="173" pos:column="38">=<expr><call><name><name pos:line="173" pos:column="39">Employee</name><op:operator pos:line="173" pos:column="47">.</op:operator><name pos:line="173" pos:column="48">giveBonus</name></name><argument_list pos:line="173" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="58">600</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="173" pos:column="63">35</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="174" pos:column="25">assertFalse</name><argument_list pos:line="174" pos:column="36">(<argument><expr><name pos:line="174" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="175" pos:column="19">catch <parameter_list pos:line="175" pos:column="25">(<param><decl><type><name><name pos:line="175" pos:column="26">Employee</name><op:operator pos:line="175" pos:column="34">.</op:operator><name pos:line="175" pos:column="35">bonusNotValidException</name></name></type> | <type><name><name pos:line="175" pos:column="60">Student</name><op:operator pos:line="175" pos:column="67">.</op:operator><name pos:line="175" pos:column="68">AccessDeniedException</name></name></type> <name pos:line="175" pos:column="90">e</name></decl></param>)</parameter_list> <block pos:line="175" pos:column="93">{
			<comment type="line" pos:line="176" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="177" pos:column="25">e</name><op:operator pos:line="177" pos:column="26">.</op:operator><name pos:line="177" pos:column="27">printStackTrace</name></name><argument_list pos:line="177" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="181" pos:column="9">@<name pos:line="181" pos:column="10">Test</name></annotation>
	<specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">void</name></type> <name pos:line="182" pos:column="21">testGiveBonus5</name><parameter_list pos:line="182" pos:column="35">()</parameter_list> <block pos:line="182" pos:column="38">{
		
		<try pos:line="184" pos:column="17">try <block pos:line="184" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="185" pos:column="25">boolean</name></type> <name pos:line="185" pos:column="33">check</name><init pos:line="185" pos:column="38">=<expr><call><name><name pos:line="185" pos:column="39">Employee</name><op:operator pos:line="185" pos:column="47">.</op:operator><name pos:line="185" pos:column="48">giveBonus</name></name><argument_list pos:line="185" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="185" pos:column="58">581</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="185" pos:column="63">40</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="186" pos:column="25">assertFalse</name><argument_list pos:line="186" pos:column="36">(<argument><expr><name pos:line="186" pos:column="37">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="187" pos:column="19">catch <parameter_list pos:line="187" pos:column="25">(<param><decl><type><name><name pos:line="187" pos:column="26">Employee</name><op:operator pos:line="187" pos:column="34">.</op:operator><name pos:line="187" pos:column="35">bonusNotValidException</name></name></type> | <type><name><name pos:line="187" pos:column="60">Student</name><op:operator pos:line="187" pos:column="67">.</op:operator><name pos:line="187" pos:column="68">AccessDeniedException</name></name></type> <name pos:line="187" pos:column="90">e</name></decl></param>)</parameter_list> <block pos:line="187" pos:column="93">{
			<comment type="line" pos:line="188" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="189" pos:column="25">e</name><op:operator pos:line="189" pos:column="26">.</op:operator><name pos:line="189" pos:column="27">printStackTrace</name></name><argument_list pos:line="189" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	
	<function><type><annotation pos:line="194" pos:column="9">@<name pos:line="194" pos:column="10">Test</name></annotation>
	<specifier pos:line="195" pos:column="9">public</specifier> <name pos:line="195" pos:column="16">void</name></type> <name pos:line="195" pos:column="21">testGetsalary1</name><parameter_list pos:line="195" pos:column="35">()</parameter_list> <block pos:line="195" pos:column="38">{
		
		<decl_stmt><decl><type><name pos:line="197" pos:column="17">double</name></type> <name pos:line="197" pos:column="24">check</name><init pos:line="197" pos:column="29">=<expr><call><name><name pos:line="197" pos:column="30">Employee</name><op:operator pos:line="197" pos:column="38">.</op:operator><name pos:line="197" pos:column="39">getsalary</name></name><argument_list pos:line="197" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="197" pos:column="49">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="198" pos:column="17">assertEquals</name><argument_list pos:line="198" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="198" pos:column="30">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="198" pos:column="32">77948.68400000001</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="198" pos:column="51">77948.68400000001</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="201" pos:column="9">@<name pos:line="201" pos:column="10">Test</name></annotation>
	<specifier pos:line="202" pos:column="9">public</specifier> <name pos:line="202" pos:column="16">void</name></type> <name pos:line="202" pos:column="21">testGetsalary2</name><parameter_list pos:line="202" pos:column="35">()</parameter_list> <block pos:line="202" pos:column="38">{
		
		<decl_stmt><decl><type><name pos:line="204" pos:column="17">double</name></type> <name pos:line="204" pos:column="24">check</name><init pos:line="204" pos:column="29">=<expr><call><name><name pos:line="204" pos:column="30">Employee</name><op:operator pos:line="204" pos:column="38">.</op:operator><name pos:line="204" pos:column="39">getsalary</name></name><argument_list pos:line="204" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="204" pos:column="49">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="205" pos:column="17">assertEquals</name><argument_list pos:line="205" pos:column="29">(<argument><expr><op:operator pos:line="205" pos:column="30">-</op:operator><lit:literal type="number" pos:line="205" pos:column="31">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="205" pos:column="34">-</op:operator><lit:literal type="number" pos:line="205" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="208" pos:column="9">@<name pos:line="208" pos:column="10">Test</name></annotation>
	<specifier pos:line="209" pos:column="9">public</specifier> <name pos:line="209" pos:column="16">void</name></type> <name pos:line="209" pos:column="21">testGiveBonusCheck</name><parameter_list pos:line="209" pos:column="39">()</parameter_list> <block pos:line="209" pos:column="42">{
		
		<decl_stmt><decl><type><name pos:line="211" pos:column="17">boolean</name></type> <name pos:line="211" pos:column="25">check</name><init pos:line="211" pos:column="30">=<expr><call><name><name pos:line="211" pos:column="31">Employee</name><op:operator pos:line="211" pos:column="39">.</op:operator><name pos:line="211" pos:column="40">giveBonusCheck</name></name><argument_list pos:line="211" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="55">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="212" pos:column="17">assertTrue</name><argument_list pos:line="212" pos:column="27">(<argument><expr><name pos:line="212" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="215" pos:column="9">@<name pos:line="215" pos:column="10">Test</name></annotation>
	<specifier pos:line="216" pos:column="9">public</specifier> <name pos:line="216" pos:column="16">void</name></type> <name pos:line="216" pos:column="21">testGiveBonusCheck2</name><parameter_list pos:line="216" pos:column="40">()</parameter_list> <block pos:line="216" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="218" pos:column="17">boolean</name></type> <name pos:line="218" pos:column="25">check</name><init pos:line="218" pos:column="30">=<expr><call><name><name pos:line="218" pos:column="31">Employee</name><op:operator pos:line="218" pos:column="39">.</op:operator><name pos:line="218" pos:column="40">giveBonusCheck</name></name><argument_list pos:line="218" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="218" pos:column="55">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="219" pos:column="17">assertFalse</name><argument_list pos:line="219" pos:column="28">(<argument><expr><name pos:line="219" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="222" pos:column="9">@<name pos:line="222" pos:column="10">Test</name></annotation>
	<specifier pos:line="223" pos:column="9">public</specifier> <name pos:line="223" pos:column="16">void</name></type> <name pos:line="223" pos:column="21">testDeleteFromEmployeeByUIN</name><parameter_list pos:line="223" pos:column="48">()</parameter_list> <block pos:line="223" pos:column="51">{

		<comment type="line" pos:line="225" pos:column="17">//cannot test this function as this would create inconsistency in the database</comment>

	}</block></function>

	<function><type><annotation pos:line="229" pos:column="9">@<name pos:line="229" pos:column="10">Test</name></annotation>
	<specifier pos:line="230" pos:column="9">public</specifier> <name pos:line="230" pos:column="16">void</name></type> <name pos:line="230" pos:column="21">testDeleteFromEmployeeByUINCheck</name><parameter_list pos:line="230" pos:column="53">()</parameter_list> <block pos:line="230" pos:column="56">{
		
		<decl_stmt><decl><type><name pos:line="232" pos:column="17">boolean</name></type> <name pos:line="232" pos:column="25">check</name><init pos:line="232" pos:column="30">=<expr><call><name><name pos:line="232" pos:column="31">Employee</name><op:operator pos:line="232" pos:column="39">.</op:operator><name pos:line="232" pos:column="40">deleteFromEmployeeByUINCheck</name></name><argument_list pos:line="232" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="232" pos:column="69">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="233" pos:column="17">assertTrue</name><argument_list pos:line="233" pos:column="27">(<argument><expr><name pos:line="233" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="236" pos:column="9">@<name pos:line="236" pos:column="10">Test</name></annotation>
	<specifier pos:line="237" pos:column="9">public</specifier> <name pos:line="237" pos:column="16">void</name></type> <name pos:line="237" pos:column="21">testDeleteFromEmployeeByUINCheck2</name><parameter_list pos:line="237" pos:column="54">()</parameter_list> <block pos:line="237" pos:column="57">{
		
		<decl_stmt><decl><type><name pos:line="239" pos:column="17">boolean</name></type> <name pos:line="239" pos:column="25">check</name><init pos:line="239" pos:column="30">=<expr><call><name><name pos:line="239" pos:column="31">Employee</name><op:operator pos:line="239" pos:column="39">.</op:operator><name pos:line="239" pos:column="40">deleteFromEmployeeByUINCheck</name></name><argument_list pos:line="239" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="239" pos:column="69">600</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="240" pos:column="17">assertFalse</name><argument_list pos:line="240" pos:column="28">(<argument><expr><name pos:line="240" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="243" pos:column="9">@<name pos:line="243" pos:column="10">Test</name></annotation>
	<specifier pos:line="244" pos:column="9">public</specifier> <name pos:line="244" pos:column="16">void</name></type> <name pos:line="244" pos:column="21">testDeleteFromEmployeeByUserName</name><parameter_list pos:line="244" pos:column="53">()</parameter_list> <block pos:line="244" pos:column="56">{

		<comment type="line" pos:line="246" pos:column="17">//cannot test this function as this would create inconsistency in the database</comment>

	}</block></function>

	<function><type><annotation pos:line="250" pos:column="9">@<name pos:line="250" pos:column="10">Test</name></annotation>
	<specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">void</name></type> <name pos:line="251" pos:column="21">testGetEmployeeUIN1</name><parameter_list pos:line="251" pos:column="40">()</parameter_list> <block pos:line="251" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="253" pos:column="17">int</name></type> <name pos:line="253" pos:column="21">check</name><init pos:line="253" pos:column="26">=<expr><call><name><name pos:line="253" pos:column="27">Employee</name><op:operator pos:line="253" pos:column="35">.</op:operator><name pos:line="253" pos:column="36">getEmployeeUIN</name></name><argument_list pos:line="253" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="51">"leona"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="254" pos:column="17">assertEquals</name><argument_list pos:line="254" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="254" pos:column="30">581</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="254" pos:column="35">581</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="257" pos:column="9">@<name pos:line="257" pos:column="10">Test</name></annotation>
	<specifier pos:line="258" pos:column="9">public</specifier> <name pos:line="258" pos:column="16">void</name></type> <name pos:line="258" pos:column="21">testGetEmployeeUIN2</name><parameter_list pos:line="258" pos:column="40">()</parameter_list> <block pos:line="258" pos:column="43">{
		
		<decl_stmt><decl><type><name pos:line="260" pos:column="17">int</name></type> <name pos:line="260" pos:column="21">check</name><init pos:line="260" pos:column="26">=<expr><call><name><name pos:line="260" pos:column="27">Employee</name><op:operator pos:line="260" pos:column="35">.</op:operator><name pos:line="260" pos:column="36">getEmployeeUIN</name></name><argument_list pos:line="260" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="51">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="261" pos:column="17">assertEquals</name><argument_list pos:line="261" pos:column="29">(<argument><expr><op:operator pos:line="261" pos:column="30">-</op:operator><lit:literal type="number" pos:line="261" pos:column="31">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="261" pos:column="34">-</op:operator><lit:literal type="number" pos:line="261" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="264" pos:column="9">@<name pos:line="264" pos:column="10">Test</name></annotation>
	<specifier pos:line="265" pos:column="9">public</specifier> <name pos:line="265" pos:column="16">void</name></type> <name pos:line="265" pos:column="21">testDeleteFromEmployeeByUserNameCheck1</name><parameter_list pos:line="265" pos:column="59">()</parameter_list> <block pos:line="265" pos:column="62">{
		
		<decl_stmt><decl><type><name pos:line="267" pos:column="17">boolean</name></type> <name pos:line="267" pos:column="25">check</name><init pos:line="267" pos:column="30">=<expr><call><name><name pos:line="267" pos:column="31">Employee</name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">deleteFromEmployeeByUserNameCheck</name></name><argument_list pos:line="267" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="74">"leona"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="268" pos:column="17">assertTrue</name><argument_list pos:line="268" pos:column="27">(<argument><expr><name pos:line="268" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="271" pos:column="9">@<name pos:line="271" pos:column="10">Test</name></annotation>
	<specifier pos:line="272" pos:column="9">public</specifier> <name pos:line="272" pos:column="16">void</name></type> <name pos:line="272" pos:column="21">testDeleteFromEmployeeByUserNameCheck2</name><parameter_list pos:line="272" pos:column="59">()</parameter_list> <block pos:line="272" pos:column="62">{
		
		<decl_stmt><decl><type><name pos:line="274" pos:column="17">boolean</name></type> <name pos:line="274" pos:column="25">check</name><init pos:line="274" pos:column="30">=<expr><call><name><name pos:line="274" pos:column="31">Employee</name><op:operator pos:line="274" pos:column="39">.</op:operator><name pos:line="274" pos:column="40">deleteFromEmployeeByUserNameCheck</name></name><argument_list pos:line="274" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="74">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="275" pos:column="17">assertFalse</name><argument_list pos:line="275" pos:column="28">(<argument><expr><name pos:line="275" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="278" pos:column="9">@<name pos:line="278" pos:column="10">Test</name></annotation>
	<specifier pos:line="279" pos:column="9">public</specifier> <name pos:line="279" pos:column="16">void</name></type> <name pos:line="279" pos:column="21">testGetAllEmployeesByDepartment1</name><parameter_list pos:line="279" pos:column="53">()</parameter_list> <block pos:line="279" pos:column="56">{
		
		<try pos:line="281" pos:column="17">try <block pos:line="281" pos:column="21">{
			<decl_stmt><decl><type><name><name pos:line="282" pos:column="25">ArrayList</name><argument_list pos:line="282" pos:column="34">&lt;<argument><name pos:line="282" pos:column="35">Employee</name></argument>&gt;</argument_list></name></type> <name pos:line="282" pos:column="45">getAllEmpsCheck</name><init pos:line="282" pos:column="60">=<expr><call><name><name pos:line="282" pos:column="61">Employee</name><op:operator pos:line="282" pos:column="69">.</op:operator><name pos:line="282" pos:column="70">getAllEmployeesByDepartment</name></name><argument_list pos:line="282" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="98">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="283" pos:column="25">assertNotNull</name><argument_list pos:line="283" pos:column="38">(<argument><expr><name pos:line="283" pos:column="39">getAllEmpsCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="284" pos:column="19">catch <parameter_list pos:line="284" pos:column="25">(<param><decl><type><name><name pos:line="284" pos:column="26">Department</name><op:operator pos:line="284" pos:column="36">.</op:operator><name pos:line="284" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="284" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="284" pos:column="72">{
			<comment type="line" pos:line="285" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="286" pos:column="25">e</name><op:operator pos:line="286" pos:column="26">.</op:operator><name pos:line="286" pos:column="27">printStackTrace</name></name><argument_list pos:line="286" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>
	

	<function><type><annotation pos:line="292" pos:column="9">@<name pos:line="292" pos:column="10">Test</name></annotation>
	<specifier pos:line="293" pos:column="9">public</specifier> <name pos:line="293" pos:column="16">void</name></type> <name pos:line="293" pos:column="21">testGetAllEmployeesByDepartment2</name><parameter_list pos:line="293" pos:column="53">()</parameter_list> <block pos:line="293" pos:column="56">{
		
		<try pos:line="295" pos:column="17">try <block pos:line="295" pos:column="21">{
			<decl_stmt><decl><type><name><name pos:line="296" pos:column="25">ArrayList</name><argument_list pos:line="296" pos:column="34">&lt;<argument><name pos:line="296" pos:column="35">Employee</name></argument>&gt;</argument_list></name></type> <name pos:line="296" pos:column="45">getAllEmpsCheck</name><init pos:line="296" pos:column="60">=<expr><call><name><name pos:line="296" pos:column="61">Employee</name><op:operator pos:line="296" pos:column="69">.</op:operator><name pos:line="296" pos:column="70">getAllEmployeesByDepartment</name></name><argument_list pos:line="296" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="98">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		}</block> <catch pos:line="297" pos:column="19">catch <parameter_list pos:line="297" pos:column="25">(<param><decl><type><name><name pos:line="297" pos:column="26">Department</name><op:operator pos:line="297" pos:column="36">.</op:operator><name pos:line="297" pos:column="37">DepartmentDoesNotExistException</name></name></type> <name pos:line="297" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="297" pos:column="72">{
			<comment type="line" pos:line="298" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="299" pos:column="25">e</name><op:operator pos:line="299" pos:column="26">.</op:operator><name pos:line="299" pos:column="27">printStackTrace</name></name><argument_list pos:line="299" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>

	<function><type><annotation pos:line="304" pos:column="9">@<name pos:line="304" pos:column="10">Test</name></annotation>
	<specifier pos:line="305" pos:column="9">public</specifier> <name pos:line="305" pos:column="16">void</name></type> <name pos:line="305" pos:column="21">testCheckIfEmployeeInt</name><parameter_list pos:line="305" pos:column="43">()</parameter_list> <block pos:line="305" pos:column="46">{
		
		<decl_stmt><decl><type><name pos:line="307" pos:column="17">boolean</name></type> <name pos:line="307" pos:column="25">check</name><init pos:line="307" pos:column="30">=<expr><call><name><name pos:line="307" pos:column="31">Employee</name><op:operator pos:line="307" pos:column="39">.</op:operator><name pos:line="307" pos:column="40">checkIfEmployee</name></name><argument_list pos:line="307" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="307" pos:column="56">581</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="308" pos:column="17">assertTrue</name><argument_list pos:line="308" pos:column="27">(<argument><expr><name pos:line="308" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="311" pos:column="9">@<name pos:line="311" pos:column="10">Test</name></annotation>
	<specifier pos:line="312" pos:column="9">public</specifier> <name pos:line="312" pos:column="16">void</name></type> <name pos:line="312" pos:column="21">testCheckIfEmployeeInt2</name><parameter_list pos:line="312" pos:column="44">()</parameter_list> <block pos:line="312" pos:column="47">{
		
		<decl_stmt><decl><type><name pos:line="314" pos:column="17">boolean</name></type> <name pos:line="314" pos:column="25">check</name><init pos:line="314" pos:column="30">=<expr><call><name><name pos:line="314" pos:column="31">Employee</name><op:operator pos:line="314" pos:column="39">.</op:operator><name pos:line="314" pos:column="40">checkIfEmployee</name></name><argument_list pos:line="314" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="314" pos:column="56">451</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="315" pos:column="17">assertFalse</name><argument_list pos:line="315" pos:column="28">(<argument><expr><name pos:line="315" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="318" pos:column="9">@<name pos:line="318" pos:column="10">Test</name></annotation>
	<specifier pos:line="319" pos:column="9">public</specifier> <name pos:line="319" pos:column="16">void</name></type> <name pos:line="319" pos:column="21">testCheckIfEmployeeString1</name><parameter_list pos:line="319" pos:column="47">()</parameter_list> <block pos:line="319" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="320" pos:column="17">boolean</name></type> <name pos:line="320" pos:column="25">check</name><init pos:line="320" pos:column="30">=<expr><call><name><name pos:line="320" pos:column="31">Employee</name><op:operator pos:line="320" pos:column="39">.</op:operator><name pos:line="320" pos:column="40">checkIfEmployee</name></name><argument_list pos:line="320" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="320" pos:column="56">"leona"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="321" pos:column="17">assertTrue</name><argument_list pos:line="321" pos:column="27">(<argument><expr><name pos:line="321" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="324" pos:column="9">@<name pos:line="324" pos:column="10">Test</name></annotation>
	<specifier pos:line="325" pos:column="9">public</specifier> <name pos:line="325" pos:column="16">void</name></type> <name pos:line="325" pos:column="21">testCheckIfEmployeeString2</name><parameter_list pos:line="325" pos:column="47">()</parameter_list> <block pos:line="325" pos:column="50">{
		
		<decl_stmt><decl><type><name pos:line="327" pos:column="17">boolean</name></type> <name pos:line="327" pos:column="25">check</name><init pos:line="327" pos:column="30">=<expr><call><name><name pos:line="327" pos:column="31">Employee</name><op:operator pos:line="327" pos:column="39">.</op:operator><name pos:line="327" pos:column="40">checkIfEmployee</name></name><argument_list pos:line="327" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="327" pos:column="56">"alibaba"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="328" pos:column="17">assertFalse</name><argument_list pos:line="328" pos:column="28">(<argument><expr><name pos:line="328" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
