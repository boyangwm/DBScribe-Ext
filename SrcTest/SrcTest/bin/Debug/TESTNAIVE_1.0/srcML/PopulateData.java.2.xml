<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\PopulateData.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Collections</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">com</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">umas</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">code</name><op:operator pos:line="10" pos:column="21">.</op:operator><name pos:line="10" pos:column="22">Course</name><op:operator pos:line="10" pos:column="28">.</op:operator><name pos:line="10" pos:column="29">CourseAlreadyExistsException</name></name>;</import>


<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">PopulateData</name> <block pos:line="13" pos:column="27">{

		
	<function><type><specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">boolean</name></type> <name pos:line="16" pos:column="24">populateDepartments</name><parameter_list pos:line="16" pos:column="43">()</parameter_list><block pos:line="16" pos:column="45">{
		
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">boolean</name></type> <name pos:line="18" pos:column="25">done</name><init pos:line="18" pos:column="29">=<expr><lit:literal type="boolean" pos:line="18" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="19" pos:column="17">try<block pos:line="19" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="21" pos:column="25">Connection</name></type> <name pos:line="21" pos:column="36">conn</name><init pos:line="21" pos:column="40">=<expr><call><name><name pos:line="21" pos:column="41">Database</name><op:operator pos:line="21" pos:column="49">.</op:operator><name pos:line="21" pos:column="50">getConnection</name></name><argument_list pos:line="21" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="23" pos:column="25">try<block pos:line="23" pos:column="28">{
				<if pos:line="24" pos:column="33">if<condition pos:line="24" pos:column="35">(<expr><name pos:line="24" pos:column="36">conn</name> <op:operator pos:line="24" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="24" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="24" pos:column="49">{
					
					<comment type="line" pos:line="26" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="27" pos:column="41">String</name></type> <name pos:line="27" pos:column="48">SemesterSelect</name> <init pos:line="27" pos:column="63">= <expr><lit:literal type="string" pos:line="27" pos:column="65">"Select * FROM namesdept"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="28" pos:column="41">PreparedStatement</name></type> <name pos:line="28" pos:column="59">statement</name> <init pos:line="28" pos:column="69">= <expr><call><name><name pos:line="28" pos:column="71">conn</name><op:operator pos:line="28" pos:column="75">.</op:operator><name pos:line="28" pos:column="76">prepareStatement</name></name><argument_list pos:line="28" pos:column="92">(<argument><expr><name pos:line="28" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="29" pos:column="41">ResultSet</name></type> <name pos:line="29" pos:column="51">rs</name> <init pos:line="29" pos:column="54">= <expr><call><name><name pos:line="29" pos:column="56">statement</name><op:operator pos:line="29" pos:column="65">.</op:operator><name pos:line="29" pos:column="66">executeQuery</name></name><argument_list pos:line="29" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="31" pos:column="41">while<condition pos:line="31" pos:column="46">(<expr><call><name><name pos:line="31" pos:column="47">rs</name><op:operator pos:line="31" pos:column="49">.</op:operator><name pos:line="31" pos:column="50">next</name></name><argument_list pos:line="31" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="31" pos:column="57">{
						
						<try pos:line="33" pos:column="49">try<block pos:line="33" pos:column="52">{
							
								<expr_stmt><expr><call><name><name pos:line="35" pos:column="65">System</name><op:operator pos:line="35" pos:column="71">.</op:operator><name pos:line="35" pos:column="72">out</name><op:operator pos:line="35" pos:column="75">.</op:operator><name pos:line="35" pos:column="76">println</name></name><argument_list pos:line="35" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="84">"Adding new dept"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<decl_stmt><decl><type><name pos:line="36" pos:column="65">String</name></type> <name pos:line="36" pos:column="72">deptName</name><init pos:line="36" pos:column="80">=<expr><call><name><name pos:line="36" pos:column="81">rs</name><op:operator pos:line="36" pos:column="83">.</op:operator><name pos:line="36" pos:column="84">getString</name></name><argument_list pos:line="36" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="94">"names"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name><name pos:line="37" pos:column="65">Department</name><op:operator pos:line="37" pos:column="75">.</op:operator><name pos:line="37" pos:column="76">addNewDepartment</name></name><argument_list pos:line="37" pos:column="92">(<argument><expr><name pos:line="37" pos:column="93">deptName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="38" pos:column="65">System</name><op:operator pos:line="38" pos:column="71">.</op:operator><name pos:line="38" pos:column="72">out</name><op:operator pos:line="38" pos:column="75">.</op:operator><name pos:line="38" pos:column="76">println</name></name><argument_list pos:line="38" pos:column="83">(<argument><expr><name pos:line="38" pos:column="84">deptName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="39" pos:column="65">Thread</name><op:operator pos:line="39" pos:column="71">.</op:operator><name pos:line="39" pos:column="72">sleep</name></name><argument_list pos:line="39" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="78">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="40" pos:column="65">done</name><op:operator pos:line="40" pos:column="69">=</op:operator><lit:literal type="boolean" pos:line="40" pos:column="70">true</lit:literal></expr>;</expr_stmt>
								
							
						}</block>
						
						<catch pos:line="45" pos:column="49">catch <parameter_list pos:line="45" pos:column="55">(<param><decl><type><name pos:line="45" pos:column="56">InterruptedException</name></type> <name pos:line="45" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="80">{
							<comment type="line" pos:line="46" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="47" pos:column="57">e</name><op:operator pos:line="47" pos:column="58">.</op:operator><name pos:line="47" pos:column="59">printStackTrace</name></name><argument_list pos:line="47" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch> <catch pos:line="48" pos:column="51">catch <parameter_list pos:line="48" pos:column="57">(<param><decl><type><name><name pos:line="48" pos:column="58">Department</name><op:operator pos:line="48" pos:column="68">.</op:operator><name pos:line="48" pos:column="69">DepartmentAlreadyExistsException</name></name></type> <name pos:line="48" pos:column="102">e</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="105">{
							<comment type="line" pos:line="49" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="50" pos:column="57">e</name><op:operator pos:line="50" pos:column="58">.</op:operator><name pos:line="50" pos:column="59">printStackTrace</name></name><argument_list pos:line="50" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
					}</block></while>
					
				}</block></then></if>
				
			}</block>
			
			<catch pos:line="58" pos:column="25">catch<parameter_list pos:line="58" pos:column="30">(<param><decl><type><name pos:line="58" pos:column="31">SQLException</name></type> <name pos:line="58" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="58" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="59" pos:column="33">System</name><op:operator pos:line="59" pos:column="39">.</op:operator><name pos:line="59" pos:column="40">out</name><op:operator pos:line="59" pos:column="43">.</op:operator><name pos:line="59" pos:column="44">println</name></name><argument_list pos:line="59" pos:column="51">(<argument><expr><call><name><name pos:line="59" pos:column="52">e</name><op:operator pos:line="59" pos:column="53">.</op:operator><name pos:line="59" pos:column="54">getMessage</name></name><argument_list pos:line="59" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="60" pos:column="33">e</name><op:operator pos:line="60" pos:column="34">.</op:operator><name pos:line="60" pos:column="35">printStackTrace</name></name><argument_list pos:line="60" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="63" pos:column="25">finally<block pos:line="63" pos:column="32">{
				<comment type="line" pos:line="64" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="68" pos:column="17">finally<block pos:line="68" pos:column="24">{
		}</block></finally></try>
		<return pos:line="70" pos:column="17">return <expr><name pos:line="70" pos:column="24">done</name></expr>;</return>	
	}</block></function>
		
	
	<comment type="line" pos:line="74" pos:column="9">//50 administrators will be added</comment>
	<function><type><specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">boolean</name></type> <name pos:line="75" pos:column="24">populateAdmins</name><parameter_list pos:line="75" pos:column="38">()</parameter_list><block pos:line="75" pos:column="40">{
		
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">boolean</name></type> <name pos:line="77" pos:column="25">done</name><init pos:line="77" pos:column="29">=<expr><lit:literal type="boolean" pos:line="77" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="78" pos:column="17">try<block pos:line="78" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="80" pos:column="25">Connection</name></type> <name pos:line="80" pos:column="36">conn</name><init pos:line="80" pos:column="40">=<expr><call><name><name pos:line="80" pos:column="41">Database</name><op:operator pos:line="80" pos:column="49">.</op:operator><name pos:line="80" pos:column="50">getConnection</name></name><argument_list pos:line="80" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="82" pos:column="25">try<block pos:line="82" pos:column="28">{
				<if pos:line="83" pos:column="33">if<condition pos:line="83" pos:column="35">(<expr><name pos:line="83" pos:column="36">conn</name> <op:operator pos:line="83" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="83" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="83" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="85" pos:column="41">ArrayList</name><argument_list pos:line="85" pos:column="50">&lt;<argument><name pos:line="85" pos:column="51">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="85" pos:column="63">getAllDepts</name><init pos:line="85" pos:column="74">=<expr><call><name><name pos:line="85" pos:column="75">Department</name><op:operator pos:line="85" pos:column="85">.</op:operator><name pos:line="85" pos:column="86">getAllDepartments</name></name><argument_list pos:line="85" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="86" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="87" pos:column="41">String</name></type> <name pos:line="87" pos:column="48">SemesterSelect</name> <init pos:line="87" pos:column="63">= <expr><lit:literal type="string" pos:line="87" pos:column="65">"Select * FROM names3 order by rand() LIMIT 50"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="88" pos:column="41">PreparedStatement</name></type> <name pos:line="88" pos:column="59">statement</name> <init pos:line="88" pos:column="69">= <expr><call><name><name pos:line="88" pos:column="71">conn</name><op:operator pos:line="88" pos:column="75">.</op:operator><name pos:line="88" pos:column="76">prepareStatement</name></name><argument_list pos:line="88" pos:column="92">(<argument><expr><name pos:line="88" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="89" pos:column="41">ResultSet</name></type> <name pos:line="89" pos:column="51">rs</name> <init pos:line="89" pos:column="54">= <expr><call><name><name pos:line="89" pos:column="56">statement</name><op:operator pos:line="89" pos:column="65">.</op:operator><name pos:line="89" pos:column="66">executeQuery</name></name><argument_list pos:line="89" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
							
					<while pos:line="91" pos:column="41">while<condition pos:line="91" pos:column="46">(<expr><call><name><name pos:line="91" pos:column="47">rs</name><op:operator pos:line="91" pos:column="49">.</op:operator><name pos:line="91" pos:column="50">next</name></name><argument_list pos:line="91" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="91" pos:column="57">{
						<decl_stmt><decl><type><name pos:line="92" pos:column="49">int</name></type> <name pos:line="92" pos:column="53">size</name><init pos:line="92" pos:column="57">=<expr><call><name><name pos:line="92" pos:column="58">getAllDepts</name><op:operator pos:line="92" pos:column="69">.</op:operator><name pos:line="92" pos:column="70">size</name></name><argument_list pos:line="92" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="93" pos:column="49">int</name></type> <name pos:line="93" pos:column="53">rand</name><init pos:line="93" pos:column="57">=<expr><call pos:line="93" pos:column="58">(<name pos:line="93" pos:column="59">int</name>)<argument_list pos:line="93" pos:column="63">(<argument><expr><call><name><name pos:line="93" pos:column="64">Math</name><op:operator pos:line="93" pos:column="68">.</op:operator><name pos:line="93" pos:column="69">random</name></name><argument_list pos:line="93" pos:column="75">()</argument_list></call><op:operator pos:line="93" pos:column="77">*</op:operator><name pos:line="93" pos:column="78">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="94" pos:column="49">Department</name></type> <name pos:line="94" pos:column="60">d</name><init pos:line="94" pos:column="61">=<expr><call><name><name pos:line="94" pos:column="62">getAllDepts</name><op:operator pos:line="94" pos:column="73">.</op:operator><name pos:line="94" pos:column="74">get</name></name><argument_list pos:line="94" pos:column="77">(<argument><expr><name pos:line="94" pos:column="78">rand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="95" pos:column="49">String</name></type> <name pos:line="95" pos:column="56">name</name> <init pos:line="95" pos:column="61">= <expr><call><name><name pos:line="95" pos:column="63">rs</name><op:operator pos:line="95" pos:column="65">.</op:operator><name pos:line="95" pos:column="66">getString</name></name><argument_list pos:line="95" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<try pos:line="97" pos:column="49">try<block pos:line="97" pos:column="52">{
							
								<expr_stmt><expr><call><name><name pos:line="99" pos:column="65">System</name><op:operator pos:line="99" pos:column="71">.</op:operator><name pos:line="99" pos:column="72">out</name><op:operator pos:line="99" pos:column="75">.</op:operator><name pos:line="99" pos:column="76">println</name></name><argument_list pos:line="99" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="84">"Adding new admin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="100" pos:column="65">Admin</name><op:operator pos:line="100" pos:column="70">.</op:operator><name pos:line="100" pos:column="71">addAdmin</name></name><argument_list pos:line="100" pos:column="79">(<argument><expr><name pos:line="100" pos:column="80">name</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="86">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="101" pos:column="65">System</name><op:operator pos:line="101" pos:column="71">.</op:operator><name pos:line="101" pos:column="72">out</name><op:operator pos:line="101" pos:column="75">.</op:operator><name pos:line="101" pos:column="76">println</name></name><argument_list pos:line="101" pos:column="83">(<argument><expr><call><name><name pos:line="101" pos:column="84">d</name><op:operator pos:line="101" pos:column="85">.</op:operator><name pos:line="101" pos:column="86">getDepartmentName</name></name><argument_list pos:line="101" pos:column="103">()</argument_list></call><op:operator pos:line="101" pos:column="105">+</op:operator><lit:literal type="string" pos:line="101" pos:column="106">"-------"</lit:literal><op:operator pos:line="101" pos:column="115">+</op:operator><name pos:line="101" pos:column="116">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="102" pos:column="65">Thread</name><op:operator pos:line="102" pos:column="71">.</op:operator><name pos:line="102" pos:column="72">sleep</name></name><argument_list pos:line="102" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="78">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="103" pos:column="65">done</name><op:operator pos:line="103" pos:column="69">=</op:operator><lit:literal type="boolean" pos:line="103" pos:column="70">true</lit:literal></expr>;</expr_stmt>
							
						}</block>
						
						<catch pos:line="107" pos:column="49">catch <parameter_list pos:line="107" pos:column="55">(<param><decl><type><name pos:line="107" pos:column="56">InterruptedException</name></type> <name pos:line="107" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="80">{
							<comment type="line" pos:line="108" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="109" pos:column="57">e</name><op:operator pos:line="109" pos:column="58">.</op:operator><name pos:line="109" pos:column="59">printStackTrace</name></name><argument_list pos:line="109" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch> <catch pos:line="110" pos:column="51">catch <parameter_list pos:line="110" pos:column="57">(<param><decl><type><name><name pos:line="110" pos:column="58">People</name><op:operator pos:line="110" pos:column="64">.</op:operator><name pos:line="110" pos:column="65">loginDetailsnotAdded</name></name></type> <name pos:line="110" pos:column="86">e</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="89">{
							<comment type="line" pos:line="111" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="112" pos:column="57">e</name><op:operator pos:line="112" pos:column="58">.</op:operator><name pos:line="112" pos:column="59">printStackTrace</name></name><argument_list pos:line="112" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="120" pos:column="25">catch<parameter_list pos:line="120" pos:column="30">(<param><decl><type><name pos:line="120" pos:column="31">SQLException</name></type> <name pos:line="120" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="120" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">System</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">out</name><op:operator pos:line="121" pos:column="43">.</op:operator><name pos:line="121" pos:column="44">println</name></name><argument_list pos:line="121" pos:column="51">(<argument><expr><call><name><name pos:line="121" pos:column="52">e</name><op:operator pos:line="121" pos:column="53">.</op:operator><name pos:line="121" pos:column="54">getMessage</name></name><argument_list pos:line="121" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">e</name><op:operator pos:line="122" pos:column="34">.</op:operator><name pos:line="122" pos:column="35">printStackTrace</name></name><argument_list pos:line="122" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="125" pos:column="25">finally<block pos:line="125" pos:column="32">{
				<comment type="line" pos:line="126" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="130" pos:column="17">finally<block pos:line="130" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="133" pos:column="17">return <expr><name pos:line="133" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="136" pos:column="9">public</specifier> <name pos:line="136" pos:column="16">boolean</name></type> <name pos:line="136" pos:column="24">populateProfessors</name><parameter_list pos:line="136" pos:column="42">()</parameter_list><block pos:line="136" pos:column="44">{
		
		<decl_stmt><decl><type><name pos:line="138" pos:column="17">boolean</name></type> <name pos:line="138" pos:column="25">done</name><init pos:line="138" pos:column="29">=<expr><lit:literal type="boolean" pos:line="138" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="139" pos:column="17">try<block pos:line="139" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="141" pos:column="25">Connection</name></type> <name pos:line="141" pos:column="36">conn</name><init pos:line="141" pos:column="40">=<expr><call><name><name pos:line="141" pos:column="41">Database</name><op:operator pos:line="141" pos:column="49">.</op:operator><name pos:line="141" pos:column="50">getConnection</name></name><argument_list pos:line="141" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="143" pos:column="25">try<block pos:line="143" pos:column="28">{
				<if pos:line="144" pos:column="33">if<condition pos:line="144" pos:column="35">(<expr><name pos:line="144" pos:column="36">conn</name> <op:operator pos:line="144" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="144" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="144" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="146" pos:column="41">ArrayList</name><argument_list pos:line="146" pos:column="50">&lt;<argument><name pos:line="146" pos:column="51">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="146" pos:column="63">getAllDepts</name><init pos:line="146" pos:column="74">=<expr><call><name><name pos:line="146" pos:column="75">Department</name><op:operator pos:line="146" pos:column="85">.</op:operator><name pos:line="146" pos:column="86">getAllDepartments</name></name><argument_list pos:line="146" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="147" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="148" pos:column="41">String</name></type> <name pos:line="148" pos:column="48">SemesterSelect</name> <init pos:line="148" pos:column="63">= <expr><lit:literal type="string" pos:line="148" pos:column="65">"Select * FROM names3"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="149" pos:column="41">PreparedStatement</name></type> <name pos:line="149" pos:column="59">statement</name> <init pos:line="149" pos:column="69">= <expr><call><name><name pos:line="149" pos:column="71">conn</name><op:operator pos:line="149" pos:column="75">.</op:operator><name pos:line="149" pos:column="76">prepareStatement</name></name><argument_list pos:line="149" pos:column="92">(<argument><expr><name pos:line="149" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="150" pos:column="41">ResultSet</name></type> <name pos:line="150" pos:column="51">rs</name> <init pos:line="150" pos:column="54">= <expr><call><name><name pos:line="150" pos:column="56">statement</name><op:operator pos:line="150" pos:column="65">.</op:operator><name pos:line="150" pos:column="66">executeQuery</name></name><argument_list pos:line="150" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="152" pos:column="41">while<condition pos:line="152" pos:column="46">(<expr><call><name><name pos:line="152" pos:column="47">rs</name><op:operator pos:line="152" pos:column="49">.</op:operator><name pos:line="152" pos:column="50">next</name></name><argument_list pos:line="152" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="152" pos:column="57">{
						
						<decl_stmt><decl><type><name pos:line="154" pos:column="49">int</name></type> <name pos:line="154" pos:column="53">size</name><init pos:line="154" pos:column="57">=<expr><call><name><name pos:line="154" pos:column="58">getAllDepts</name><op:operator pos:line="154" pos:column="69">.</op:operator><name pos:line="154" pos:column="70">size</name></name><argument_list pos:line="154" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="155" pos:column="49">int</name></type> <name pos:line="155" pos:column="53">rand</name><init pos:line="155" pos:column="57">=<expr><call pos:line="155" pos:column="58">(<name pos:line="155" pos:column="59">int</name>)<argument_list pos:line="155" pos:column="63">(<argument><expr><call><name><name pos:line="155" pos:column="64">Math</name><op:operator pos:line="155" pos:column="68">.</op:operator><name pos:line="155" pos:column="69">random</name></name><argument_list pos:line="155" pos:column="75">()</argument_list></call><op:operator pos:line="155" pos:column="77">*</op:operator><name pos:line="155" pos:column="78">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="156" pos:column="49">Department</name></type> <name pos:line="156" pos:column="60">d</name><init pos:line="156" pos:column="61">=<expr><call><name><name pos:line="156" pos:column="62">getAllDepts</name><op:operator pos:line="156" pos:column="73">.</op:operator><name pos:line="156" pos:column="74">get</name></name><argument_list pos:line="156" pos:column="77">(<argument><expr><name pos:line="156" pos:column="78">rand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="157" pos:column="49">String</name></type> <name pos:line="157" pos:column="56">name</name> <init pos:line="157" pos:column="61">= <expr><call><name><name pos:line="157" pos:column="63">rs</name><op:operator pos:line="157" pos:column="65">.</op:operator><name pos:line="157" pos:column="66">getString</name></name><argument_list pos:line="157" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="157" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<try pos:line="159" pos:column="49">try<block pos:line="159" pos:column="52">{
								<expr_stmt><expr><call><name><name pos:line="160" pos:column="65">System</name><op:operator pos:line="160" pos:column="71">.</op:operator><name pos:line="160" pos:column="72">out</name><op:operator pos:line="160" pos:column="75">.</op:operator><name pos:line="160" pos:column="76">println</name></name><argument_list pos:line="160" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="84">"Adding new professor"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="161" pos:column="65">Professor</name><op:operator pos:line="161" pos:column="74">.</op:operator><name pos:line="161" pos:column="75">addProfToDb</name></name><argument_list pos:line="161" pos:column="86">(<argument><expr><name pos:line="161" pos:column="87">name</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="93">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="162" pos:column="65">System</name><op:operator pos:line="162" pos:column="71">.</op:operator><name pos:line="162" pos:column="72">out</name><op:operator pos:line="162" pos:column="75">.</op:operator><name pos:line="162" pos:column="76">println</name></name><argument_list pos:line="162" pos:column="83">(<argument><expr><call><name><name pos:line="162" pos:column="84">d</name><op:operator pos:line="162" pos:column="85">.</op:operator><name pos:line="162" pos:column="86">getDepartmentName</name></name><argument_list pos:line="162" pos:column="103">()</argument_list></call><op:operator pos:line="162" pos:column="105">+</op:operator><lit:literal type="string" pos:line="162" pos:column="106">"------"</lit:literal><op:operator pos:line="162" pos:column="114">+</op:operator><name pos:line="162" pos:column="115">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="163" pos:column="65">Thread</name><op:operator pos:line="163" pos:column="71">.</op:operator><name pos:line="163" pos:column="72">sleep</name></name><argument_list pos:line="163" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="78">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
								<expr_stmt><expr><name pos:line="164" pos:column="65">done</name><op:operator pos:line="164" pos:column="69">=</op:operator><lit:literal type="boolean" pos:line="164" pos:column="70">true</lit:literal></expr>;</expr_stmt>
						}</block>
						
						<catch pos:line="167" pos:column="49">catch <parameter_list pos:line="167" pos:column="55">(<param><decl><type><name pos:line="167" pos:column="56">InterruptedException</name></type> <name pos:line="167" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="167" pos:column="80">{
							<comment type="line" pos:line="168" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="169" pos:column="57">e</name><op:operator pos:line="169" pos:column="58">.</op:operator><name pos:line="169" pos:column="59">printStackTrace</name></name><argument_list pos:line="169" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="177" pos:column="25">catch<parameter_list pos:line="177" pos:column="30">(<param><decl><type><name pos:line="177" pos:column="31">SQLException</name></type> <name pos:line="177" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="177" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="178" pos:column="33">System</name><op:operator pos:line="178" pos:column="39">.</op:operator><name pos:line="178" pos:column="40">out</name><op:operator pos:line="178" pos:column="43">.</op:operator><name pos:line="178" pos:column="44">println</name></name><argument_list pos:line="178" pos:column="51">(<argument><expr><call><name><name pos:line="178" pos:column="52">e</name><op:operator pos:line="178" pos:column="53">.</op:operator><name pos:line="178" pos:column="54">getMessage</name></name><argument_list pos:line="178" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="179" pos:column="33">e</name><op:operator pos:line="179" pos:column="34">.</op:operator><name pos:line="179" pos:column="35">printStackTrace</name></name><argument_list pos:line="179" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="182" pos:column="25">finally<block pos:line="182" pos:column="32">{
				<comment type="line" pos:line="183" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="187" pos:column="17">finally<block pos:line="187" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="190" pos:column="17">return <expr><name pos:line="190" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="193" pos:column="9">public</specifier> <name pos:line="193" pos:column="16">boolean</name></type> <name pos:line="193" pos:column="24">populateStudents</name><parameter_list pos:line="193" pos:column="40">()</parameter_list><block pos:line="193" pos:column="42">{
		
		<decl_stmt><decl><type><name pos:line="195" pos:column="17">boolean</name></type> <name pos:line="195" pos:column="25">done</name><init pos:line="195" pos:column="29">=<expr><lit:literal type="boolean" pos:line="195" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="196" pos:column="17">try<block pos:line="196" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="198" pos:column="25">Connection</name></type> <name pos:line="198" pos:column="36">conn</name><init pos:line="198" pos:column="40">=<expr><call><name><name pos:line="198" pos:column="41">Database</name><op:operator pos:line="198" pos:column="49">.</op:operator><name pos:line="198" pos:column="50">getConnection</name></name><argument_list pos:line="198" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="200" pos:column="25">try<block pos:line="200" pos:column="28">{
				<if pos:line="201" pos:column="33">if<condition pos:line="201" pos:column="35">(<expr><name pos:line="201" pos:column="36">conn</name> <op:operator pos:line="201" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="201" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="201" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="203" pos:column="41">ArrayList</name><argument_list pos:line="203" pos:column="50">&lt;<argument><name pos:line="203" pos:column="51">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="63">getAllDepts</name><init pos:line="203" pos:column="74">=<expr><call><name><name pos:line="203" pos:column="75">Department</name><op:operator pos:line="203" pos:column="85">.</op:operator><name pos:line="203" pos:column="86">getAllDepartments</name></name><argument_list pos:line="203" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="204" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="205" pos:column="41">String</name></type> <name pos:line="205" pos:column="48">SemesterSelect</name> <init pos:line="205" pos:column="63">= <expr><lit:literal type="string" pos:line="205" pos:column="65">"Select * FROM names2"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="206" pos:column="41">PreparedStatement</name></type> <name pos:line="206" pos:column="59">statement</name> <init pos:line="206" pos:column="69">= <expr><call><name><name pos:line="206" pos:column="71">conn</name><op:operator pos:line="206" pos:column="75">.</op:operator><name pos:line="206" pos:column="76">prepareStatement</name></name><argument_list pos:line="206" pos:column="92">(<argument><expr><name pos:line="206" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="207" pos:column="41">ResultSet</name></type> <name pos:line="207" pos:column="51">rs</name> <init pos:line="207" pos:column="54">= <expr><call><name><name pos:line="207" pos:column="56">statement</name><op:operator pos:line="207" pos:column="65">.</op:operator><name pos:line="207" pos:column="66">executeQuery</name></name><argument_list pos:line="207" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="209" pos:column="41">while<condition pos:line="209" pos:column="46">(<expr><call><name><name pos:line="209" pos:column="47">rs</name><op:operator pos:line="209" pos:column="49">.</op:operator><name pos:line="209" pos:column="50">next</name></name><argument_list pos:line="209" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="209" pos:column="57">{
						
						<decl_stmt><decl><type><name pos:line="211" pos:column="49">String</name></type> <name pos:line="211" pos:column="56">name</name> <init pos:line="211" pos:column="61">= <expr><call><name><name pos:line="211" pos:column="63">rs</name><op:operator pos:line="211" pos:column="65">.</op:operator><name pos:line="211" pos:column="66">getString</name></name><argument_list pos:line="211" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="212" pos:column="49">int</name></type> <name pos:line="212" pos:column="53">size</name><init pos:line="212" pos:column="57">=<expr><call><name><name pos:line="212" pos:column="58">getAllDepts</name><op:operator pos:line="212" pos:column="69">.</op:operator><name pos:line="212" pos:column="70">size</name></name><argument_list pos:line="212" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="213" pos:column="49">int</name></type> <name pos:line="213" pos:column="53">rand</name><init pos:line="213" pos:column="57">=<expr><call pos:line="213" pos:column="58">(<name pos:line="213" pos:column="59">int</name>)<argument_list pos:line="213" pos:column="63">(<argument><expr><call><name><name pos:line="213" pos:column="64">Math</name><op:operator pos:line="213" pos:column="68">.</op:operator><name pos:line="213" pos:column="69">random</name></name><argument_list pos:line="213" pos:column="75">()</argument_list></call><op:operator pos:line="213" pos:column="77">*</op:operator><name pos:line="213" pos:column="78">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="214" pos:column="49">Department</name></type> <name pos:line="214" pos:column="60">d</name><init pos:line="214" pos:column="61">=<expr><call><name><name pos:line="214" pos:column="62">getAllDepts</name><op:operator pos:line="214" pos:column="73">.</op:operator><name pos:line="214" pos:column="74">get</name></name><argument_list pos:line="214" pos:column="77">(<argument><expr><name pos:line="214" pos:column="78">rand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="215" pos:column="49">int</name></type> <name pos:line="215" pos:column="53">level</name><init pos:line="215" pos:column="58">=<expr><lit:literal type="number" pos:line="215" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
						
						<while pos:line="217" pos:column="49">while<condition pos:line="217" pos:column="54">(<expr><name pos:line="217" pos:column="55">level</name><op:operator pos:line="217" pos:column="60">==</op:operator><lit:literal type="number" pos:line="217" pos:column="62">0</lit:literal> <op:operator pos:line="217" pos:column="64">||</op:operator> <name pos:line="217" pos:column="67">level</name> <op:operator pos:line="217" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="217" pos:column="76">4</lit:literal></expr>)</condition><block pos:line="217" pos:column="78">{
							<expr_stmt><expr><name pos:line="218" pos:column="57">level</name> <op:operator pos:line="218" pos:column="63">=</op:operator> <call pos:line="218" pos:column="65">(<name pos:line="218" pos:column="66">int</name>)<argument_list pos:line="218" pos:column="70">(<argument><expr><call><name><name pos:line="218" pos:column="71">Math</name><op:operator pos:line="218" pos:column="75">.</op:operator><name pos:line="218" pos:column="76">random</name></name><argument_list pos:line="218" pos:column="82">()</argument_list></call><op:operator pos:line="218" pos:column="84">*</op:operator><lit:literal type="number" pos:line="218" pos:column="85">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
						
						
						<try pos:line="222" pos:column="49">try<block pos:line="222" pos:column="52">{
							
								<expr_stmt><expr><call><name><name pos:line="224" pos:column="65">System</name><op:operator pos:line="224" pos:column="71">.</op:operator><name pos:line="224" pos:column="72">out</name><op:operator pos:line="224" pos:column="75">.</op:operator><name pos:line="224" pos:column="76">println</name></name><argument_list pos:line="224" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="84">"Adding new students"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="225" pos:column="65">Student</name><op:operator pos:line="225" pos:column="72">.</op:operator><name pos:line="225" pos:column="73">addStudentToDb</name></name><argument_list pos:line="225" pos:column="87">(<argument><expr><name pos:line="225" pos:column="88">name</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="94">d</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="97">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="226" pos:column="65">System</name><op:operator pos:line="226" pos:column="71">.</op:operator><name pos:line="226" pos:column="72">out</name><op:operator pos:line="226" pos:column="75">.</op:operator><name pos:line="226" pos:column="76">println</name></name><argument_list pos:line="226" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="84">"Level:"</lit:literal><op:operator pos:line="226" pos:column="92">+</op:operator><name pos:line="226" pos:column="93">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="227" pos:column="65">System</name><op:operator pos:line="227" pos:column="71">.</op:operator><name pos:line="227" pos:column="72">out</name><op:operator pos:line="227" pos:column="75">.</op:operator><name pos:line="227" pos:column="76">println</name></name><argument_list pos:line="227" pos:column="83">(<argument><expr><call><name><name pos:line="227" pos:column="84">d</name><op:operator pos:line="227" pos:column="85">.</op:operator><name pos:line="227" pos:column="86">getDepartmentName</name></name><argument_list pos:line="227" pos:column="103">()</argument_list></call><op:operator pos:line="227" pos:column="105">+</op:operator><lit:literal type="string" pos:line="227" pos:column="106">"---------"</lit:literal><op:operator pos:line="227" pos:column="117">+</op:operator><name pos:line="227" pos:column="118">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="228" pos:column="65">System</name><op:operator pos:line="228" pos:column="71">.</op:operator><name pos:line="228" pos:column="72">out</name><op:operator pos:line="228" pos:column="75">.</op:operator><name pos:line="228" pos:column="76">println</name></name><argument_list pos:line="228" pos:column="83">(<argument><expr><name pos:line="228" pos:column="84">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="229" pos:column="65">Thread</name><op:operator pos:line="229" pos:column="71">.</op:operator><name pos:line="229" pos:column="72">sleep</name></name><argument_list pos:line="229" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="229" pos:column="78">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="230" pos:column="65">done</name><op:operator pos:line="230" pos:column="69">=</op:operator><lit:literal type="boolean" pos:line="230" pos:column="70">true</lit:literal></expr>;</expr_stmt>
							
						}</block>
						
						<catch pos:line="234" pos:column="49">catch <parameter_list pos:line="234" pos:column="55">(<param><decl><type><name pos:line="234" pos:column="56">InterruptedException</name></type> <name pos:line="234" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="234" pos:column="80">{
							<comment type="line" pos:line="235" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="236" pos:column="57">e</name><op:operator pos:line="236" pos:column="58">.</op:operator><name pos:line="236" pos:column="59">printStackTrace</name></name><argument_list pos:line="236" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch> 
						<catch pos:line="238" pos:column="49">catch <parameter_list pos:line="238" pos:column="55">(<param><decl><type><name><name pos:line="238" pos:column="56">Student</name><op:operator pos:line="238" pos:column="63">.</op:operator><name pos:line="238" pos:column="64">levelNotExistException</name></name></type> <name pos:line="238" pos:column="87">e</name></decl></param>)</parameter_list> <block pos:line="238" pos:column="90">{
							<comment type="line" pos:line="239" pos:column="57">// TODO Auto-generated catch block</comment>
							<expr_stmt><expr><call><name><name pos:line="240" pos:column="57">e</name><op:operator pos:line="240" pos:column="58">.</op:operator><name pos:line="240" pos:column="59">printStackTrace</name></name><argument_list pos:line="240" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
						}</block></catch></try>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="248" pos:column="25">catch<parameter_list pos:line="248" pos:column="30">(<param><decl><type><name pos:line="248" pos:column="31">SQLException</name></type> <name pos:line="248" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="248" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="249" pos:column="33">System</name><op:operator pos:line="249" pos:column="39">.</op:operator><name pos:line="249" pos:column="40">out</name><op:operator pos:line="249" pos:column="43">.</op:operator><name pos:line="249" pos:column="44">println</name></name><argument_list pos:line="249" pos:column="51">(<argument><expr><call><name><name pos:line="249" pos:column="52">e</name><op:operator pos:line="249" pos:column="53">.</op:operator><name pos:line="249" pos:column="54">getMessage</name></name><argument_list pos:line="249" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="250" pos:column="33">e</name><op:operator pos:line="250" pos:column="34">.</op:operator><name pos:line="250" pos:column="35">printStackTrace</name></name><argument_list pos:line="250" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="253" pos:column="25">finally<block pos:line="253" pos:column="32">{
				<comment type="line" pos:line="254" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="258" pos:column="17">finally<block pos:line="258" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="261" pos:column="17">return <expr><name pos:line="261" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="264" pos:column="9">public</specifier> <name pos:line="264" pos:column="16">boolean</name></type> <name pos:line="264" pos:column="24">populateCourses</name><parameter_list pos:line="264" pos:column="39">()</parameter_list><block pos:line="264" pos:column="41">{
		
		<decl_stmt><decl><type><name pos:line="266" pos:column="17">boolean</name></type> <name pos:line="266" pos:column="25">done</name><init pos:line="266" pos:column="29">=<expr><lit:literal type="boolean" pos:line="266" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="267" pos:column="17">try<block pos:line="267" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="269" pos:column="25">Connection</name></type> <name pos:line="269" pos:column="36">conn</name><init pos:line="269" pos:column="40">=<expr><call><name><name pos:line="269" pos:column="41">Database</name><op:operator pos:line="269" pos:column="49">.</op:operator><name pos:line="269" pos:column="50">getConnection</name></name><argument_list pos:line="269" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="271" pos:column="25">try<block pos:line="271" pos:column="28">{
				<if pos:line="272" pos:column="33">if<condition pos:line="272" pos:column="35">(<expr><name pos:line="272" pos:column="36">conn</name> <op:operator pos:line="272" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="272" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="272" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="274" pos:column="41">ArrayList</name><argument_list pos:line="274" pos:column="50">&lt;<argument><name pos:line="274" pos:column="51">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="274" pos:column="63">departments</name> <init pos:line="274" pos:column="75">= <expr><call><name><name pos:line="274" pos:column="77">Department</name><op:operator pos:line="274" pos:column="87">.</op:operator><name pos:line="274" pos:column="88">getAllDepartments</name></name><argument_list pos:line="274" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="275" pos:column="41">//Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="276" pos:column="41">String</name></type> <name pos:line="276" pos:column="48">SemesterSelect</name> <init pos:line="276" pos:column="63">= <expr><lit:literal type="string" pos:line="276" pos:column="65">"Select * FROM names1"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="277" pos:column="41">PreparedStatement</name></type> <name pos:line="277" pos:column="59">statement</name> <init pos:line="277" pos:column="69">= <expr><call><name><name pos:line="277" pos:column="71">conn</name><op:operator pos:line="277" pos:column="75">.</op:operator><name pos:line="277" pos:column="76">prepareStatement</name></name><argument_list pos:line="277" pos:column="92">(<argument><expr><name pos:line="277" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="278" pos:column="41">ResultSet</name></type> <name pos:line="278" pos:column="51">rs</name> <init pos:line="278" pos:column="54">= <expr><call><name><name pos:line="278" pos:column="56">statement</name><op:operator pos:line="278" pos:column="65">.</op:operator><name pos:line="278" pos:column="66">executeQuery</name></name><argument_list pos:line="278" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="280" pos:column="41">while<condition pos:line="280" pos:column="46">(<expr><call><name><name pos:line="280" pos:column="47">rs</name><op:operator pos:line="280" pos:column="49">.</op:operator><name pos:line="280" pos:column="50">next</name></name><argument_list pos:line="280" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="280" pos:column="57">{
						<decl_stmt><decl><type><name pos:line="281" pos:column="49">String</name></type> <name pos:line="281" pos:column="56">name</name> <init pos:line="281" pos:column="61">= <expr><call><name><name pos:line="281" pos:column="63">rs</name><op:operator pos:line="281" pos:column="65">.</op:operator><name pos:line="281" pos:column="66">getString</name></name><argument_list pos:line="281" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="281" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="282" pos:column="49">Collections</name><op:operator pos:line="282" pos:column="60">.</op:operator><name pos:line="282" pos:column="61">shuffle</name></name><argument_list pos:line="282" pos:column="68">(<argument><expr><name pos:line="282" pos:column="69">departments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="283" pos:column="49">Department</name></type> <name pos:line="283" pos:column="60">d</name> <init pos:line="283" pos:column="62">= <expr><call><name><name pos:line="283" pos:column="64">departments</name><op:operator pos:line="283" pos:column="75">.</op:operator><name pos:line="283" pos:column="76">get</name></name><argument_list pos:line="283" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="283" pos:column="80">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="284" pos:column="49">Course</name><op:operator pos:line="284" pos:column="55">.</op:operator><name pos:line="284" pos:column="56">addCourse</name></name><argument_list pos:line="284" pos:column="65">(<argument><expr><name pos:line="284" pos:column="66">name</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="72">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="285" pos:column="49">Thread</name><op:operator pos:line="285" pos:column="55">.</op:operator><name pos:line="285" pos:column="56">sleep</name></name><argument_list pos:line="285" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="285" pos:column="62">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="286" pos:column="49">done</name><op:operator pos:line="286" pos:column="53">=</op:operator><lit:literal type="boolean" pos:line="286" pos:column="54">true</lit:literal></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
					
			}</block>
			
			<catch pos:line="293" pos:column="25">catch<parameter_list pos:line="293" pos:column="30">(<param><decl><type><name pos:line="293" pos:column="31">SQLException</name></type> <name pos:line="293" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="293" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="294" pos:column="33">System</name><op:operator pos:line="294" pos:column="39">.</op:operator><name pos:line="294" pos:column="40">out</name><op:operator pos:line="294" pos:column="43">.</op:operator><name pos:line="294" pos:column="44">println</name></name><argument_list pos:line="294" pos:column="51">(<argument><expr><call><name><name pos:line="294" pos:column="52">e</name><op:operator pos:line="294" pos:column="53">.</op:operator><name pos:line="294" pos:column="54">getMessage</name></name><argument_list pos:line="294" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="295" pos:column="33">e</name><op:operator pos:line="295" pos:column="34">.</op:operator><name pos:line="295" pos:column="35">printStackTrace</name></name><argument_list pos:line="295" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="296" pos:column="27">catch <parameter_list pos:line="296" pos:column="33">(<param><decl><type><name><name pos:line="296" pos:column="34">Course</name><op:operator pos:line="296" pos:column="40">.</op:operator><name pos:line="296" pos:column="41">CourseAlreadyExistsException</name></name></type> <name pos:line="296" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="296" pos:column="73">{
				<comment type="line" pos:line="297" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="298" pos:column="33">e</name><op:operator pos:line="298" pos:column="34">.</op:operator><name pos:line="298" pos:column="35">printStackTrace</name></name><argument_list pos:line="298" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="299" pos:column="27">catch <parameter_list pos:line="299" pos:column="33">(<param><decl><type><name pos:line="299" pos:column="34">InterruptedException</name></type> <name pos:line="299" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="299" pos:column="58">{
				<comment type="line" pos:line="300" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="301" pos:column="33">e</name><op:operator pos:line="301" pos:column="34">.</op:operator><name pos:line="301" pos:column="35">printStackTrace</name></name><argument_list pos:line="301" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="304" pos:column="25">finally<block pos:line="304" pos:column="32">{
				<comment type="line" pos:line="305" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="309" pos:column="17">finally<block pos:line="309" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="312" pos:column="17">return <expr><name pos:line="312" pos:column="24">done</name></expr>;</return>
	}</block></function>
		
	<function><type><specifier pos:line="315" pos:column="9">public</specifier> <name pos:line="315" pos:column="16">boolean</name></type> <name pos:line="315" pos:column="24">populateCoursesOffered</name><parameter_list pos:line="315" pos:column="46">()</parameter_list><block pos:line="315" pos:column="48">{
		
		<decl_stmt><decl><type><name pos:line="317" pos:column="17">boolean</name></type> <name pos:line="317" pos:column="25">done</name><init pos:line="317" pos:column="29">=<expr><lit:literal type="boolean" pos:line="317" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="318" pos:column="17">try<block pos:line="318" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="320" pos:column="25">Connection</name></type> <name pos:line="320" pos:column="36">conn</name><init pos:line="320" pos:column="40">=<expr><call><name><name pos:line="320" pos:column="41">Database</name><op:operator pos:line="320" pos:column="49">.</op:operator><name pos:line="320" pos:column="50">getConnection</name></name><argument_list pos:line="320" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="322" pos:column="25">try<block pos:line="322" pos:column="28">{
				<if pos:line="323" pos:column="33">if<condition pos:line="323" pos:column="35">(<expr><name pos:line="323" pos:column="36">conn</name> <op:operator pos:line="323" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="323" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="323" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="325" pos:column="41">ArrayList</name><argument_list pos:line="325" pos:column="50">&lt;<argument><name pos:line="325" pos:column="51">Department</name></argument>&gt;</argument_list></name></type> <name pos:line="325" pos:column="63">departments</name> <init pos:line="325" pos:column="75">= <expr><call><name><name pos:line="325" pos:column="77">Department</name><op:operator pos:line="325" pos:column="87">.</op:operator><name pos:line="325" pos:column="88">getAllDepartments</name></name><argument_list pos:line="325" pos:column="105">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="326" pos:column="41">int</name></type> <name pos:line="326" pos:column="45">count</name> <init pos:line="326" pos:column="51">= <expr><lit:literal type="number" pos:line="326" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
					<for pos:line="327" pos:column="41">for(<init><decl><type><name pos:line="327" pos:column="45">Department</name></type> <name pos:line="327" pos:column="56">d</name><range pos:line="327" pos:column="57">:<expr><name pos:line="327" pos:column="58">departments</name></expr></range></decl></init>)<block pos:line="327" pos:column="70">{
						<decl_stmt><decl><type><name><name pos:line="328" pos:column="49">ArrayList</name><argument_list pos:line="328" pos:column="58">&lt;<argument><name pos:line="328" pos:column="59">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="328" pos:column="67">courses</name> <init pos:line="328" pos:column="75">= <expr><call><name><name pos:line="328" pos:column="77">Course</name><op:operator pos:line="328" pos:column="83">.</op:operator><name pos:line="328" pos:column="84">getCoursesOfDepartment</name></name><argument_list pos:line="328" pos:column="106">(<argument><expr><name pos:line="328" pos:column="107">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name pos:line="329" pos:column="49">ArrayList</name><argument_list pos:line="329" pos:column="58">&lt;<argument><name pos:line="329" pos:column="59">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="329" pos:column="70">profs</name> <init pos:line="329" pos:column="76">= <expr><call><name><name pos:line="329" pos:column="78">Professor</name><op:operator pos:line="329" pos:column="87">.</op:operator><name pos:line="329" pos:column="88">getAllProfInADept</name></name><argument_list pos:line="329" pos:column="105">(<argument><expr><call><name><name pos:line="329" pos:column="106">d</name><op:operator pos:line="329" pos:column="107">.</op:operator><name pos:line="329" pos:column="108">getDepartmentID</name></name><argument_list pos:line="329" pos:column="123">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="330" pos:column="49">int</name><index pos:line="330" pos:column="52">[]</index></type> <name pos:line="330" pos:column="55">capacity</name> <init pos:line="330" pos:column="64">= <expr><block pos:line="330" pos:column="66">{<expr><lit:literal type="number" pos:line="330" pos:column="67">5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="330" pos:column="69">8</lit:literal></expr>,<expr><lit:literal type="number" pos:line="330" pos:column="71">10</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
						
						<for pos:line="332" pos:column="49">for(<init><decl><type><name pos:line="332" pos:column="53">Course</name></type> <name pos:line="332" pos:column="60">course</name><range pos:line="332" pos:column="66">:<expr><name pos:line="332" pos:column="67">courses</name></expr></range></decl></init>)<block pos:line="332" pos:column="75">{
							<expr_stmt><expr><call><name><name pos:line="333" pos:column="57">Collections</name><op:operator pos:line="333" pos:column="68">.</op:operator><name pos:line="333" pos:column="69">shuffle</name></name><argument_list pos:line="333" pos:column="76">(<argument><expr><name pos:line="333" pos:column="77">profs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="334" pos:column="57">Professor</name></type> <name pos:line="334" pos:column="67">p</name> <init pos:line="334" pos:column="69">= <expr><call><name><name pos:line="334" pos:column="71">profs</name><op:operator pos:line="334" pos:column="76">.</op:operator><name pos:line="334" pos:column="77">get</name></name><argument_list pos:line="334" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="334" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="335" pos:column="57">int</name></type> <name pos:line="335" pos:column="61">cap</name> <init pos:line="335" pos:column="65">= <expr><call pos:line="335" pos:column="67">(<name pos:line="335" pos:column="68">int</name>)<argument_list pos:line="335" pos:column="72">(<argument><expr><call><name><name pos:line="335" pos:column="73">Math</name><op:operator pos:line="335" pos:column="77">.</op:operator><name pos:line="335" pos:column="78">random</name></name><argument_list pos:line="335" pos:column="84">()</argument_list></call><op:operator pos:line="335" pos:column="86">*</op:operator><lit:literal type="number" pos:line="335" pos:column="87">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="336" pos:column="57">System</name><op:operator pos:line="336" pos:column="63">.</op:operator><name pos:line="336" pos:column="64">out</name><op:operator pos:line="336" pos:column="67">.</op:operator><name pos:line="336" pos:column="68">println</name></name><argument_list pos:line="336" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="336" pos:column="76">"Course:"</lit:literal><op:operator pos:line="336" pos:column="85">+</op:operator><call><name><name pos:line="336" pos:column="86">course</name><op:operator pos:line="336" pos:column="92">.</op:operator><name pos:line="336" pos:column="93">getCourseName</name></name><argument_list pos:line="336" pos:column="106">()</argument_list></call><op:operator pos:line="336" pos:column="108">+</op:operator><lit:literal type="string" pos:line="336" pos:column="109">"--------------"</lit:literal><op:operator pos:line="336" pos:column="125">+</op:operator><call><name><name pos:line="336" pos:column="126">p</name><op:operator pos:line="336" pos:column="127">.</op:operator><name pos:line="336" pos:column="128">getName</name></name><argument_list pos:line="336" pos:column="135">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>							
							<expr_stmt><expr><call><name><name pos:line="337" pos:column="57">CourseOffered</name><op:operator pos:line="337" pos:column="70">.</op:operator><name pos:line="337" pos:column="71">addCourseOfferingToDatabase</name></name><argument_list pos:line="337" pos:column="98">(<argument><expr><name pos:line="337" pos:column="99">course</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="107">p</name></expr></argument>, <argument><expr><name><name pos:line="337" pos:column="110">capacity</name><index pos:line="337" pos:column="118">[<expr><name pos:line="337" pos:column="119">cap</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="338" pos:column="57">Thread</name><op:operator pos:line="338" pos:column="63">.</op:operator><name pos:line="338" pos:column="64">sleep</name></name><argument_list pos:line="338" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="338" pos:column="70">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="339" pos:column="57">done</name> <op:operator pos:line="339" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="339" pos:column="64">true</lit:literal></expr>;</expr_stmt>
						}</block></for>
					}</block></for>
				}</block></then></if>
					
			}</block> <catch pos:line="344" pos:column="27">catch <parameter_list pos:line="344" pos:column="33">(<param><decl><type><name><name pos:line="344" pos:column="34">Professor</name><op:operator pos:line="344" pos:column="43">.</op:operator><name pos:line="344" pos:column="44">ProfessorDoesNotExistException</name></name></type> <name pos:line="344" pos:column="75">e</name></decl></param>)</parameter_list> <block pos:line="344" pos:column="78">{
				<comment type="line" pos:line="345" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">e</name><op:operator pos:line="346" pos:column="34">.</op:operator><name pos:line="346" pos:column="35">printStackTrace</name></name><argument_list pos:line="346" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="347" pos:column="27">catch <parameter_list pos:line="347" pos:column="33">(<param><decl><type><name><name pos:line="347" pos:column="34">CourseOffered</name><op:operator pos:line="347" pos:column="47">.</op:operator><name pos:line="347" pos:column="48">CourseOfferingAlreadyExistsException</name></name></type> <name pos:line="347" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="347" pos:column="88">{
				<expr_stmt><expr><call><name><name pos:line="348" pos:column="33">System</name><op:operator pos:line="348" pos:column="39">.</op:operator><name pos:line="348" pos:column="40">out</name><op:operator pos:line="348" pos:column="43">.</op:operator><name pos:line="348" pos:column="44">println</name></name><argument_list pos:line="348" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="52">"------------------------------Offering already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="349" pos:column="27">catch <parameter_list pos:line="349" pos:column="33">(<param><decl><type><name><name pos:line="349" pos:column="34">CourseOffered</name><op:operator pos:line="349" pos:column="47">.</op:operator><name pos:line="349" pos:column="48">CourseOfferingNotSchedulable</name></name></type> <name pos:line="349" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="349" pos:column="80">{
				<expr_stmt><expr><call><name><name pos:line="350" pos:column="33">System</name><op:operator pos:line="350" pos:column="39">.</op:operator><name pos:line="350" pos:column="40">out</name><op:operator pos:line="350" pos:column="43">.</op:operator><name pos:line="350" pos:column="44">println</name></name><argument_list pos:line="350" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="52">"*******************************Offering not schedulable"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="351" pos:column="27">catch <parameter_list pos:line="351" pos:column="33">(<param><decl><type><name pos:line="351" pos:column="34">InterruptedException</name></type> <name pos:line="351" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="351" pos:column="58">{
				<comment type="line" pos:line="352" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="353" pos:column="33">e</name><op:operator pos:line="353" pos:column="34">.</op:operator><name pos:line="353" pos:column="35">printStackTrace</name></name><argument_list pos:line="353" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="356" pos:column="25">finally<block pos:line="356" pos:column="32">{
				<comment type="line" pos:line="357" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="361" pos:column="17">finally<block pos:line="361" pos:column="24">{
		}</block></finally></try>
		<return pos:line="363" pos:column="17">return <expr><name pos:line="363" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="366" pos:column="9">public</specifier> <name pos:line="366" pos:column="16">boolean</name></type> <name pos:line="366" pos:column="24">populateApplicationDetails</name><parameter_list pos:line="366" pos:column="50">()</parameter_list><block pos:line="366" pos:column="52">{
		
		<decl_stmt><decl><type><name pos:line="368" pos:column="17">boolean</name></type> <name pos:line="368" pos:column="25">done</name><init pos:line="368" pos:column="29">=<expr><lit:literal type="boolean" pos:line="368" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="369" pos:column="17">try<block pos:line="369" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="371" pos:column="25">Connection</name></type> <name pos:line="371" pos:column="36">conn</name><init pos:line="371" pos:column="40">=<expr><call><name><name pos:line="371" pos:column="41">Database</name><op:operator pos:line="371" pos:column="49">.</op:operator><name pos:line="371" pos:column="50">getConnection</name></name><argument_list pos:line="371" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="373" pos:column="25">try<block pos:line="373" pos:column="28">{
				<if pos:line="374" pos:column="33">if<condition pos:line="374" pos:column="35">(<expr><name pos:line="374" pos:column="36">conn</name> <op:operator pos:line="374" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="374" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="374" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="376" pos:column="41">ArrayList</name><argument_list pos:line="376" pos:column="50">&lt;<argument><name pos:line="376" pos:column="51">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="376" pos:column="60">getAllStudents</name><init pos:line="376" pos:column="74">=<expr><call><name><name pos:line="376" pos:column="75">Student</name><op:operator pos:line="376" pos:column="82">.</op:operator><name pos:line="376" pos:column="83">getAllStudents</name></name><argument_list pos:line="376" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					
					<for pos:line="379" pos:column="41">for(<init><decl><type><name pos:line="379" pos:column="45">int</name></type> <name pos:line="379" pos:column="49">i</name><init pos:line="379" pos:column="50">=<expr><lit:literal type="number" pos:line="379" pos:column="51">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="379" pos:column="53">i</name><op:operator pos:line="379" pos:column="54">&lt;</op:operator><lit:literal type="number" pos:line="379" pos:column="55">150</lit:literal></expr>;</condition><incr><expr><name pos:line="379" pos:column="59">i</name><op:operator pos:line="379" pos:column="60">++</op:operator></expr></incr>)<block pos:line="379" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="380" pos:column="49">Collections</name><op:operator pos:line="380" pos:column="60">.</op:operator><name pos:line="380" pos:column="61">shuffle</name></name><argument_list pos:line="380" pos:column="68">(<argument><expr><name pos:line="380" pos:column="69">getAllStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="381" pos:column="49">Student</name></type> <name pos:line="381" pos:column="57">s</name> <init pos:line="381" pos:column="59">= <expr><call><name><name pos:line="381" pos:column="61">getAllStudents</name><op:operator pos:line="381" pos:column="75">.</op:operator><name pos:line="381" pos:column="76">remove</name></name><argument_list pos:line="381" pos:column="82">(<argument><expr><lit:literal type="number" pos:line="381" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="383" pos:column="49">boolean</name><index pos:line="383" pos:column="56">[]</index></type> <name pos:line="383" pos:column="59">skills</name><init pos:line="383" pos:column="65">=<expr><op:operator pos:line="383" pos:column="66">new</op:operator> <name><name pos:line="383" pos:column="70">boolean</name><index pos:line="383" pos:column="77">[<expr><lit:literal type="number" pos:line="383" pos:column="78">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<for pos:line="384" pos:column="49">for(<init><decl><type><name pos:line="384" pos:column="53">int</name></type> <name pos:line="384" pos:column="57">j</name><init pos:line="384" pos:column="58">=<expr><lit:literal type="number" pos:line="384" pos:column="59">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="384" pos:column="61">j</name><op:operator pos:line="384" pos:column="62">&lt;</op:operator><lit:literal type="number" pos:line="384" pos:column="63">5</lit:literal></expr>;</condition><incr><expr><name pos:line="384" pos:column="65">j</name><op:operator pos:line="384" pos:column="66">++</op:operator></expr></incr>)<block pos:line="384" pos:column="69">{
							<decl_stmt><decl><type><name pos:line="385" pos:column="57">int</name></type> <name pos:line="385" pos:column="61">x</name> <init pos:line="385" pos:column="63">= <expr><call pos:line="385" pos:column="65">(<name pos:line="385" pos:column="66">int</name>)<argument_list pos:line="385" pos:column="70">(<argument><expr><call><name><name pos:line="385" pos:column="71">Math</name><op:operator pos:line="385" pos:column="75">.</op:operator><name pos:line="385" pos:column="76">random</name></name><argument_list pos:line="385" pos:column="82">()</argument_list></call><op:operator pos:line="385" pos:column="84">*</op:operator><lit:literal type="number" pos:line="385" pos:column="85">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="386" pos:column="57">if<condition pos:line="386" pos:column="59">(<expr><name pos:line="386" pos:column="60">x</name><op:operator pos:line="386" pos:column="61">==</op:operator><lit:literal type="number" pos:line="386" pos:column="63">0</lit:literal></expr>)</condition><then pos:line="386" pos:column="65">
								<expr_stmt><expr><name><name pos:line="387" pos:column="65">skills</name><index pos:line="387" pos:column="71">[<expr><name pos:line="387" pos:column="72">j</name></expr>]</index></name><op:operator pos:line="387" pos:column="74">=</op:operator><lit:literal type="boolean" pos:line="387" pos:column="75">false</lit:literal></expr>;</expr_stmt></then>
							<else pos:line="388" pos:column="57">else <if pos:line="388" pos:column="62">if<condition pos:line="388" pos:column="64">(<expr><name pos:line="388" pos:column="65">x</name><op:operator pos:line="388" pos:column="66">==</op:operator><lit:literal type="number" pos:line="388" pos:column="68">1</lit:literal></expr>)</condition><then pos:line="388" pos:column="70">
								<expr_stmt><expr><name><name pos:line="389" pos:column="65">skills</name><index pos:line="389" pos:column="71">[<expr><name pos:line="389" pos:column="72">j</name></expr>]</index></name><op:operator pos:line="389" pos:column="74">=</op:operator><lit:literal type="boolean" pos:line="389" pos:column="75">true</lit:literal></expr>;</expr_stmt></then></if></else></if>
						}</block></for>
						
						<decl_stmt><decl><type><name pos:line="392" pos:column="49">double</name><index pos:line="392" pos:column="55">[]</index></type> <name pos:line="392" pos:column="58">workEx</name> <init pos:line="392" pos:column="65">= <expr><block pos:line="392" pos:column="67">{<expr><lit:literal type="number" pos:line="392" pos:column="68">1.0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="72">1.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="76">2.0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="80">2.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="84">3</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="86">3.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="392" pos:column="90">4</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="394" pos:column="49">double</name></type> <name pos:line="394" pos:column="56">workExSelected</name> <init pos:line="394" pos:column="71">= <expr><name><name pos:line="394" pos:column="73">workEx</name><index pos:line="394" pos:column="79">[<expr><call pos:line="394" pos:column="80">(<name pos:line="394" pos:column="81">int</name>)<argument_list pos:line="394" pos:column="85">(<argument><expr><call><name><name pos:line="394" pos:column="86">Math</name><op:operator pos:line="394" pos:column="90">.</op:operator><name pos:line="394" pos:column="91">random</name></name><argument_list pos:line="394" pos:column="97">()</argument_list></call><op:operator pos:line="394" pos:column="99">*</op:operator><lit:literal type="number" pos:line="394" pos:column="100">7</lit:literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="396" pos:column="49">System</name><op:operator pos:line="396" pos:column="55">.</op:operator><name pos:line="396" pos:column="56">out</name><op:operator pos:line="396" pos:column="59">.</op:operator><name pos:line="396" pos:column="60">println</name></name><argument_list pos:line="396" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="396" pos:column="68">" "</lit:literal><op:operator pos:line="396" pos:column="71">+</op:operator><name><name pos:line="396" pos:column="72">skills</name><index pos:line="396" pos:column="78">[<expr><lit:literal type="number" pos:line="396" pos:column="79">0</lit:literal></expr>]</index></name><op:operator pos:line="396" pos:column="81">+</op:operator><name><name pos:line="396" pos:column="82">skills</name><index pos:line="396" pos:column="88">[<expr><lit:literal type="number" pos:line="396" pos:column="89">1</lit:literal></expr>]</index></name><op:operator pos:line="396" pos:column="91">+</op:operator><name><name pos:line="396" pos:column="92">skills</name><index pos:line="396" pos:column="98">[<expr><lit:literal type="number" pos:line="396" pos:column="99">2</lit:literal></expr>]</index></name><op:operator pos:line="396" pos:column="101">+</op:operator><name><name pos:line="396" pos:column="102">skills</name><index pos:line="396" pos:column="108">[<expr><lit:literal type="number" pos:line="396" pos:column="109">3</lit:literal></expr>]</index></name><op:operator pos:line="396" pos:column="111">+</op:operator><name><name pos:line="396" pos:column="112">skills</name><index pos:line="396" pos:column="118">[<expr><lit:literal type="number" pos:line="396" pos:column="119">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="397" pos:column="49">System</name><op:operator pos:line="397" pos:column="55">.</op:operator><name pos:line="397" pos:column="56">out</name><op:operator pos:line="397" pos:column="59">.</op:operator><name pos:line="397" pos:column="60">println</name></name><argument_list pos:line="397" pos:column="67">(<argument><expr><name pos:line="397" pos:column="68">workExSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name pos:line="399" pos:column="49">boolean</name></type> <name pos:line="399" pos:column="57">x</name> <init pos:line="399" pos:column="59">= <expr><call><name><name pos:line="399" pos:column="61">JobApplication</name><op:operator pos:line="399" pos:column="75">.</op:operator><name pos:line="399" pos:column="76">addApplicationDetails</name></name><argument_list pos:line="399" pos:column="97">(<argument><expr><call><name><name pos:line="399" pos:column="98">s</name><op:operator pos:line="399" pos:column="99">.</op:operator><name pos:line="399" pos:column="100">getUIN</name></name><argument_list pos:line="399" pos:column="106">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="399" pos:column="110">workExSelected</name></expr></argument>,<argument><expr><name><name pos:line="399" pos:column="125">skills</name><index pos:line="399" pos:column="131">[<expr><lit:literal type="number" pos:line="399" pos:column="132">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="399" pos:column="136">skills</name><index pos:line="399" pos:column="142">[<expr><lit:literal type="number" pos:line="399" pos:column="143">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="399" pos:column="147">skills</name><index pos:line="399" pos:column="153">[<expr><lit:literal type="number" pos:line="399" pos:column="154">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="399" pos:column="158">skills</name><index pos:line="399" pos:column="164">[<expr><lit:literal type="number" pos:line="399" pos:column="165">3</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="399" pos:column="169">skills</name><index pos:line="399" pos:column="175">[<expr><lit:literal type="number" pos:line="399" pos:column="176">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="400" pos:column="49">if<condition pos:line="400" pos:column="51">(<expr><op:operator pos:line="400" pos:column="52">!</op:operator><name pos:line="400" pos:column="53">x</name></expr>)</condition><then pos:line="400" pos:column="55">
							<expr_stmt><expr><call><name><name pos:line="401" pos:column="57">System</name><op:operator pos:line="401" pos:column="63">.</op:operator><name pos:line="401" pos:column="64">out</name><op:operator pos:line="401" pos:column="67">.</op:operator><name pos:line="401" pos:column="68">println</name></name><argument_list pos:line="401" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="401" pos:column="76">"*****************************Application exists:"</lit:literal><op:operator pos:line="401" pos:column="126">+</op:operator><call><name><name pos:line="401" pos:column="127">s</name><op:operator pos:line="401" pos:column="128">.</op:operator><name pos:line="401" pos:column="129">getUIN</name></name><argument_list pos:line="401" pos:column="135">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						<expr_stmt><expr><call><name><name pos:line="402" pos:column="49">Thread</name><op:operator pos:line="402" pos:column="55">.</op:operator><name pos:line="402" pos:column="56">sleep</name></name><argument_list pos:line="402" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="402" pos:column="62">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="403" pos:column="49">done</name><op:operator pos:line="403" pos:column="53">=</op:operator><lit:literal type="boolean" pos:line="403" pos:column="54">true</lit:literal></expr>;</expr_stmt>
						
					}</block></for>
					
				}</block></then></if>
					
			}</block> 
			<catch pos:line="410" pos:column="25">catch <parameter_list pos:line="410" pos:column="31">(<param><decl><type><name><name pos:line="410" pos:column="32">People</name><op:operator pos:line="410" pos:column="38">.</op:operator><name pos:line="410" pos:column="39">PersonDoesNotExistException</name></name></type> <name pos:line="410" pos:column="67">e</name></decl></param>)</parameter_list> <block pos:line="410" pos:column="70">{
				<comment type="line" pos:line="411" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="412" pos:column="33">e</name><op:operator pos:line="412" pos:column="34">.</op:operator><name pos:line="412" pos:column="35">printStackTrace</name></name><argument_list pos:line="412" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="413" pos:column="27">catch <parameter_list pos:line="413" pos:column="33">(<param><decl><type><name pos:line="413" pos:column="34">InterruptedException</name></type> <name pos:line="413" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="413" pos:column="58">{
				<comment type="line" pos:line="414" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="415" pos:column="33">e</name><op:operator pos:line="415" pos:column="34">.</op:operator><name pos:line="415" pos:column="35">printStackTrace</name></name><argument_list pos:line="415" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="418" pos:column="25">finally<block pos:line="418" pos:column="32">{
				<comment type="line" pos:line="419" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="423" pos:column="17">finally<block pos:line="423" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="426" pos:column="17">return <expr><name pos:line="426" pos:column="24">done</name></expr>;</return>
	}</block></function>
		
	<function><type><specifier pos:line="429" pos:column="9">public</specifier> <name pos:line="429" pos:column="16">boolean</name></type> <name pos:line="429" pos:column="24">populateJobPostings</name><parameter_list pos:line="429" pos:column="43">()</parameter_list><block pos:line="429" pos:column="45">{
		
		<decl_stmt><decl><type><name pos:line="431" pos:column="17">boolean</name></type> <name pos:line="431" pos:column="25">done</name><init pos:line="431" pos:column="29">=<expr><lit:literal type="boolean" pos:line="431" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="432" pos:column="17">try<block pos:line="432" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="434" pos:column="25">Connection</name></type> <name pos:line="434" pos:column="36">conn</name><init pos:line="434" pos:column="40">=<expr><call><name><name pos:line="434" pos:column="41">Database</name><op:operator pos:line="434" pos:column="49">.</op:operator><name pos:line="434" pos:column="50">getConnection</name></name><argument_list pos:line="434" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="436" pos:column="25">try<block pos:line="436" pos:column="28">{
				<if pos:line="437" pos:column="33">if<condition pos:line="437" pos:column="35">(<expr><name pos:line="437" pos:column="36">conn</name> <op:operator pos:line="437" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="437" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="437" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="439" pos:column="41">ArrayList</name><argument_list pos:line="439" pos:column="50">&lt;<argument><name pos:line="439" pos:column="51">Professor</name></argument>&gt;</argument_list></name></type> <name pos:line="439" pos:column="62">getAllProfessors</name><init pos:line="439" pos:column="78">=<expr><call><name><name pos:line="439" pos:column="79">Professor</name><op:operator pos:line="439" pos:column="88">.</op:operator><name pos:line="439" pos:column="89">getAllProf</name></name><argument_list pos:line="439" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					
					<for pos:line="442" pos:column="41">for(<init><decl><type><name pos:line="442" pos:column="45">int</name></type> <name pos:line="442" pos:column="49">i</name><init pos:line="442" pos:column="50">=<expr><lit:literal type="number" pos:line="442" pos:column="51">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="442" pos:column="53">i</name><op:operator pos:line="442" pos:column="54">&lt;</op:operator><lit:literal type="number" pos:line="442" pos:column="55">50</lit:literal></expr>;</condition><incr><expr><name pos:line="442" pos:column="58">i</name><op:operator pos:line="442" pos:column="59">++</op:operator></expr></incr>)<block pos:line="442" pos:column="62">{
						<expr_stmt><expr><call><name><name pos:line="443" pos:column="49">Collections</name><op:operator pos:line="443" pos:column="60">.</op:operator><name pos:line="443" pos:column="61">shuffle</name></name><argument_list pos:line="443" pos:column="68">(<argument><expr><name pos:line="443" pos:column="69">getAllProfessors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="444" pos:column="49">Professor</name></type> <name pos:line="444" pos:column="59">p</name> <init pos:line="444" pos:column="61">= <expr><call><name><name pos:line="444" pos:column="63">getAllProfessors</name><op:operator pos:line="444" pos:column="79">.</op:operator><name pos:line="444" pos:column="80">remove</name></name><argument_list pos:line="444" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="444" pos:column="87">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="446" pos:column="49">boolean</name><index pos:line="446" pos:column="56">[]</index></type> <name pos:line="446" pos:column="59">skills</name><init pos:line="446" pos:column="65">=<expr><op:operator pos:line="446" pos:column="66">new</op:operator> <name><name pos:line="446" pos:column="70">boolean</name><index pos:line="446" pos:column="77">[<expr><lit:literal type="number" pos:line="446" pos:column="78">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<for pos:line="447" pos:column="49">for(<init><decl><type><name pos:line="447" pos:column="53">int</name></type> <name pos:line="447" pos:column="57">j</name><init pos:line="447" pos:column="58">=<expr><lit:literal type="number" pos:line="447" pos:column="59">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="447" pos:column="61">j</name><op:operator pos:line="447" pos:column="62">&lt;</op:operator><lit:literal type="number" pos:line="447" pos:column="63">5</lit:literal></expr>;</condition><incr><expr><name pos:line="447" pos:column="65">j</name><op:operator pos:line="447" pos:column="66">++</op:operator></expr></incr>)<block pos:line="447" pos:column="69">{
							<decl_stmt><decl><type><name pos:line="448" pos:column="57">int</name></type> <name pos:line="448" pos:column="61">x</name> <init pos:line="448" pos:column="63">= <expr><call pos:line="448" pos:column="65">(<name pos:line="448" pos:column="66">int</name>)<argument_list pos:line="448" pos:column="70">(<argument><expr><call><name><name pos:line="448" pos:column="71">Math</name><op:operator pos:line="448" pos:column="75">.</op:operator><name pos:line="448" pos:column="76">random</name></name><argument_list pos:line="448" pos:column="82">()</argument_list></call><op:operator pos:line="448" pos:column="84">*</op:operator><lit:literal type="number" pos:line="448" pos:column="85">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="449" pos:column="57">if<condition pos:line="449" pos:column="59">(<expr><name pos:line="449" pos:column="60">x</name><op:operator pos:line="449" pos:column="61">==</op:operator><lit:literal type="number" pos:line="449" pos:column="63">0</lit:literal></expr>)</condition><then pos:line="449" pos:column="65">
								<expr_stmt><expr><name><name pos:line="450" pos:column="65">skills</name><index pos:line="450" pos:column="71">[<expr><name pos:line="450" pos:column="72">j</name></expr>]</index></name><op:operator pos:line="450" pos:column="74">=</op:operator><lit:literal type="boolean" pos:line="450" pos:column="75">false</lit:literal></expr>;</expr_stmt></then>
							<else pos:line="451" pos:column="57">else <if pos:line="451" pos:column="62">if<condition pos:line="451" pos:column="64">(<expr><name pos:line="451" pos:column="65">x</name><op:operator pos:line="451" pos:column="66">==</op:operator><lit:literal type="number" pos:line="451" pos:column="68">1</lit:literal></expr>)</condition><then pos:line="451" pos:column="70">
								<expr_stmt><expr><name><name pos:line="452" pos:column="65">skills</name><index pos:line="452" pos:column="71">[<expr><name pos:line="452" pos:column="72">j</name></expr>]</index></name><op:operator pos:line="452" pos:column="74">=</op:operator><lit:literal type="boolean" pos:line="452" pos:column="75">true</lit:literal></expr>;</expr_stmt></then></if></else></if>
						}</block></for>
						
						<decl_stmt><decl><type><name pos:line="455" pos:column="49">double</name><index pos:line="455" pos:column="55">[]</index></type> <name pos:line="455" pos:column="58">gPA</name> <init pos:line="455" pos:column="62">= <expr><block pos:line="455" pos:column="64">{<expr><lit:literal type="number" pos:line="455" pos:column="65">2.5</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="70">3</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="73">3.5</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="78">3.6</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="83">3.7</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="88">3.8</lit:literal></expr>, <expr><lit:literal type="number" pos:line="455" pos:column="93">4</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="456" pos:column="49">double</name></type> <name pos:line="456" pos:column="56">gPASelected</name> <init pos:line="456" pos:column="68">= <expr><name><name pos:line="456" pos:column="70">gPA</name><index pos:line="456" pos:column="73">[<expr><call pos:line="456" pos:column="74">(<name pos:line="456" pos:column="75">int</name>)<argument_list pos:line="456" pos:column="79">(<argument><expr><call><name><name pos:line="456" pos:column="80">Math</name><op:operator pos:line="456" pos:column="84">.</op:operator><name pos:line="456" pos:column="85">random</name></name><argument_list pos:line="456" pos:column="91">()</argument_list></call><op:operator pos:line="456" pos:column="93">*</op:operator><lit:literal type="number" pos:line="456" pos:column="94">7</lit:literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="458" pos:column="49">double</name><index pos:line="458" pos:column="55">[]</index></type> <name pos:line="458" pos:column="58">workEx</name> <init pos:line="458" pos:column="65">= <expr><block pos:line="458" pos:column="67">{<expr><lit:literal type="number" pos:line="458" pos:column="68">1.0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="72">1.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="76">2.0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="80">2.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="84">3</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="86">3.5</lit:literal></expr>,<expr><lit:literal type="number" pos:line="458" pos:column="90">4</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="459" pos:column="49">double</name></type> <name pos:line="459" pos:column="56">workExSelected</name> <init pos:line="459" pos:column="71">= <expr><name><name pos:line="459" pos:column="73">workEx</name><index pos:line="459" pos:column="79">[<expr><call pos:line="459" pos:column="80">(<name pos:line="459" pos:column="81">int</name>)<argument_list pos:line="459" pos:column="85">(<argument><expr><call><name><name pos:line="459" pos:column="86">Math</name><op:operator pos:line="459" pos:column="90">.</op:operator><name pos:line="459" pos:column="91">random</name></name><argument_list pos:line="459" pos:column="97">()</argument_list></call><op:operator pos:line="459" pos:column="99">*</op:operator><lit:literal type="number" pos:line="459" pos:column="100">7</lit:literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="461" pos:column="49">System</name><op:operator pos:line="461" pos:column="55">.</op:operator><name pos:line="461" pos:column="56">out</name><op:operator pos:line="461" pos:column="59">.</op:operator><name pos:line="461" pos:column="60">println</name></name><argument_list pos:line="461" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="461" pos:column="68">" "</lit:literal><op:operator pos:line="461" pos:column="71">+</op:operator><name><name pos:line="461" pos:column="72">skills</name><index pos:line="461" pos:column="78">[<expr><lit:literal type="number" pos:line="461" pos:column="79">0</lit:literal></expr>]</index></name><op:operator pos:line="461" pos:column="81">+</op:operator><name><name pos:line="461" pos:column="82">skills</name><index pos:line="461" pos:column="88">[<expr><lit:literal type="number" pos:line="461" pos:column="89">1</lit:literal></expr>]</index></name><op:operator pos:line="461" pos:column="91">+</op:operator><name><name pos:line="461" pos:column="92">skills</name><index pos:line="461" pos:column="98">[<expr><lit:literal type="number" pos:line="461" pos:column="99">2</lit:literal></expr>]</index></name><op:operator pos:line="461" pos:column="101">+</op:operator><name><name pos:line="461" pos:column="102">skills</name><index pos:line="461" pos:column="108">[<expr><lit:literal type="number" pos:line="461" pos:column="109">3</lit:literal></expr>]</index></name><op:operator pos:line="461" pos:column="111">+</op:operator><name><name pos:line="461" pos:column="112">skills</name><index pos:line="461" pos:column="118">[<expr><lit:literal type="number" pos:line="461" pos:column="119">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="462" pos:column="49">System</name><op:operator pos:line="462" pos:column="55">.</op:operator><name pos:line="462" pos:column="56">out</name><op:operator pos:line="462" pos:column="59">.</op:operator><name pos:line="462" pos:column="60">println</name></name><argument_list pos:line="462" pos:column="67">(<argument><expr><name pos:line="462" pos:column="68">workExSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="463" pos:column="49">System</name><op:operator pos:line="463" pos:column="55">.</op:operator><name pos:line="463" pos:column="56">out</name><op:operator pos:line="463" pos:column="59">.</op:operator><name pos:line="463" pos:column="60">println</name></name><argument_list pos:line="463" pos:column="67">(<argument><expr><name pos:line="463" pos:column="68">gPASelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
						<decl_stmt><decl><type><name pos:line="465" pos:column="49">int</name></type> <name pos:line="465" pos:column="53">x</name><init pos:line="465" pos:column="54">=<expr><call><name><name pos:line="465" pos:column="55">Job</name><op:operator pos:line="465" pos:column="58">.</op:operator><name pos:line="465" pos:column="59">postJob</name></name><argument_list pos:line="465" pos:column="66">(<argument><expr><call><name><name pos:line="465" pos:column="67">p</name><op:operator pos:line="465" pos:column="68">.</op:operator><name pos:line="465" pos:column="69">getUIN</name></name><argument_list pos:line="465" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="465" pos:column="79">p</name><op:operator pos:line="465" pos:column="80">.</op:operator><name pos:line="465" pos:column="81">getDeptID</name></name><argument_list pos:line="465" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="465" pos:column="94">gPASelected</name></expr></argument>, <argument><expr><name pos:line="465" pos:column="107">workExSelected</name></expr></argument>,<argument><expr><name><name pos:line="465" pos:column="122">skills</name><index pos:line="465" pos:column="128">[<expr><lit:literal type="number" pos:line="465" pos:column="129">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="465" pos:column="133">skills</name><index pos:line="465" pos:column="139">[<expr><lit:literal type="number" pos:line="465" pos:column="140">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="465" pos:column="144">skills</name><index pos:line="465" pos:column="150">[<expr><lit:literal type="number" pos:line="465" pos:column="151">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="465" pos:column="155">skills</name><index pos:line="465" pos:column="161">[<expr><lit:literal type="number" pos:line="465" pos:column="162">3</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="465" pos:column="166">skills</name><index pos:line="465" pos:column="172">[<expr><lit:literal type="number" pos:line="465" pos:column="173">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="466" pos:column="49">System</name><op:operator pos:line="466" pos:column="55">.</op:operator><name pos:line="466" pos:column="56">out</name><op:operator pos:line="466" pos:column="59">.</op:operator><name pos:line="466" pos:column="60">println</name></name><argument_list pos:line="466" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="466" pos:column="68">"Posted job is: "</lit:literal><op:operator pos:line="466" pos:column="85">+</op:operator><name pos:line="466" pos:column="86">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="467" pos:column="49">Thread</name><op:operator pos:line="467" pos:column="55">.</op:operator><name pos:line="467" pos:column="56">sleep</name></name><argument_list pos:line="467" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="467" pos:column="62">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="468" pos:column="49">done</name><op:operator pos:line="468" pos:column="53">=</op:operator><lit:literal type="boolean" pos:line="468" pos:column="54">true</lit:literal></expr>;</expr_stmt>
						
					}</block></for>
					
				}</block></then></if>
					
			}</block> 
			<catch pos:line="475" pos:column="25">catch <parameter_list pos:line="475" pos:column="31">(<param><decl><type><name pos:line="475" pos:column="32">InterruptedException</name></type> <name pos:line="475" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="56">{
				<comment type="line" pos:line="476" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="477" pos:column="33">e</name><op:operator pos:line="477" pos:column="34">.</op:operator><name pos:line="477" pos:column="35">printStackTrace</name></name><argument_list pos:line="477" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
			<catch pos:line="479" pos:column="25">catch <parameter_list pos:line="479" pos:column="31">(<param><decl><type><name><name pos:line="479" pos:column="32">Job</name><op:operator pos:line="479" pos:column="35">.</op:operator><name pos:line="479" pos:column="36">NoPermissionException</name></name></type> <name pos:line="479" pos:column="58">e</name></decl></param>)</parameter_list> <block pos:line="479" pos:column="61">{
				<comment type="line" pos:line="480" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="481" pos:column="33">e</name><op:operator pos:line="481" pos:column="34">.</op:operator><name pos:line="481" pos:column="35">printStackTrace</name></name><argument_list pos:line="481" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="484" pos:column="25">finally<block pos:line="484" pos:column="32">{
				<comment type="line" pos:line="485" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="489" pos:column="17">finally<block pos:line="489" pos:column="24">{
		}</block></finally></try>
		<return pos:line="491" pos:column="17">return <expr><name pos:line="491" pos:column="24">done</name></expr>;</return>
	}</block></function>
		
	<function><type><specifier pos:line="494" pos:column="9">public</specifier> <name pos:line="494" pos:column="16">boolean</name></type> <name pos:line="494" pos:column="24">populateTAs</name><parameter_list pos:line="494" pos:column="35">()</parameter_list><block pos:line="494" pos:column="37">{
		
		<decl_stmt><decl><type><name pos:line="496" pos:column="17">boolean</name></type> <name pos:line="496" pos:column="25">done</name><init pos:line="496" pos:column="29">=<expr><lit:literal type="boolean" pos:line="496" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="497" pos:column="17">try<block pos:line="497" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="499" pos:column="25">Connection</name></type> <name pos:line="499" pos:column="36">conn</name><init pos:line="499" pos:column="40">=<expr><call><name><name pos:line="499" pos:column="41">Database</name><op:operator pos:line="499" pos:column="49">.</op:operator><name pos:line="499" pos:column="50">getConnection</name></name><argument_list pos:line="499" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="501" pos:column="25">try<block pos:line="501" pos:column="28">{
				<if pos:line="502" pos:column="33">if<condition pos:line="502" pos:column="35">(<expr><name pos:line="502" pos:column="36">conn</name> <op:operator pos:line="502" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="502" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="502" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="504" pos:column="41">ArrayList</name><argument_list pos:line="504" pos:column="50">&lt;<argument><name pos:line="504" pos:column="51">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="504" pos:column="66">getAllCoursesOffered</name><init pos:line="504" pos:column="86">=<expr><call><name><name pos:line="504" pos:column="87">CourseOffered</name><op:operator pos:line="504" pos:column="100">.</op:operator><name pos:line="504" pos:column="101">getAllCurrentlyOfferedCourses</name></name><argument_list pos:line="504" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name pos:line="505" pos:column="41">ArrayList</name><argument_list pos:line="505" pos:column="50">&lt;<argument><name pos:line="505" pos:column="51">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="505" pos:column="60">getAllStudents</name><init pos:line="505" pos:column="74">=<expr><call><name><name pos:line="505" pos:column="75">Student</name><op:operator pos:line="505" pos:column="82">.</op:operator><name pos:line="505" pos:column="83">getAllStudents</name></name><argument_list pos:line="505" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					
					<for pos:line="508" pos:column="41">for(<init><decl><type><name pos:line="508" pos:column="45">int</name></type> <name pos:line="508" pos:column="49">i</name><init pos:line="508" pos:column="50">=<expr><lit:literal type="number" pos:line="508" pos:column="51">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="508" pos:column="53">i</name><op:operator pos:line="508" pos:column="54">&lt;</op:operator><lit:literal type="number" pos:line="508" pos:column="55">100</lit:literal></expr>;</condition><incr><expr><name pos:line="508" pos:column="59">i</name><op:operator pos:line="508" pos:column="60">++</op:operator></expr></incr>)<block pos:line="508" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="509" pos:column="49">Collections</name><op:operator pos:line="509" pos:column="60">.</op:operator><name pos:line="509" pos:column="61">shuffle</name></name><argument_list pos:line="509" pos:column="68">(<argument><expr><name pos:line="509" pos:column="69">getAllCoursesOffered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="510" pos:column="49">Collections</name><op:operator pos:line="510" pos:column="60">.</op:operator><name pos:line="510" pos:column="61">shuffle</name></name><argument_list pos:line="510" pos:column="68">(<argument><expr><name pos:line="510" pos:column="69">getAllStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<decl_stmt><decl><type><name pos:line="512" pos:column="49">CourseOffered</name></type> <name pos:line="512" pos:column="63">c</name><init pos:line="512" pos:column="64">=<expr><call><name><name pos:line="512" pos:column="65">getAllCoursesOffered</name><op:operator pos:line="512" pos:column="85">.</op:operator><name pos:line="512" pos:column="86">remove</name></name><argument_list pos:line="512" pos:column="92">(<argument><expr><lit:literal type="number" pos:line="512" pos:column="93">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="513" pos:column="49">Student</name></type> <name pos:line="513" pos:column="57">s</name><init pos:line="513" pos:column="58">=<expr><call><name><name pos:line="513" pos:column="59">getAllStudents</name><op:operator pos:line="513" pos:column="73">.</op:operator><name pos:line="513" pos:column="74">remove</name></name><argument_list pos:line="513" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="513" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						
						<expr_stmt><expr><call><name><name pos:line="516" pos:column="49">System</name><op:operator pos:line="516" pos:column="55">.</op:operator><name pos:line="516" pos:column="56">out</name><op:operator pos:line="516" pos:column="59">.</op:operator><name pos:line="516" pos:column="60">println</name></name><argument_list pos:line="516" pos:column="67">(<argument><expr><call><name><name pos:line="516" pos:column="68">s</name><op:operator pos:line="516" pos:column="69">.</op:operator><name pos:line="516" pos:column="70">getUIN</name></name><argument_list pos:line="516" pos:column="76">()</argument_list></call><op:operator pos:line="516" pos:column="78">+</op:operator><lit:literal type="string" pos:line="516" pos:column="79">"--------"</lit:literal><op:operator pos:line="516" pos:column="89">+</op:operator><call><name><name pos:line="516" pos:column="90">c</name><op:operator pos:line="516" pos:column="91">.</op:operator><name pos:line="516" pos:column="92">getOfferID</name></name><argument_list pos:line="516" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="517" pos:column="49">boolean</name></type> <name pos:line="517" pos:column="57">check</name><init pos:line="517" pos:column="62">=<expr><call><name><name pos:line="517" pos:column="63">TA</name><op:operator pos:line="517" pos:column="65">.</op:operator><name pos:line="517" pos:column="66">addTAtoTAtable</name></name><argument_list pos:line="517" pos:column="80">(<argument><expr><call><name><name pos:line="517" pos:column="81">s</name><op:operator pos:line="517" pos:column="82">.</op:operator><name pos:line="517" pos:column="83">getUIN</name></name><argument_list pos:line="517" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="517" pos:column="93">c</name><op:operator pos:line="517" pos:column="94">.</op:operator><name pos:line="517" pos:column="95">getOfferID</name></name><argument_list pos:line="517" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="518" pos:column="49">if<condition pos:line="518" pos:column="51">(<expr><op:operator pos:line="518" pos:column="52">!</op:operator><name pos:line="518" pos:column="53">check</name></expr>)</condition><then><block pos:line="518" pos:column="59">{
							<expr_stmt><expr><call><name><name pos:line="519" pos:column="57">System</name><op:operator pos:line="519" pos:column="63">.</op:operator><name pos:line="519" pos:column="64">out</name><op:operator pos:line="519" pos:column="67">.</op:operator><name pos:line="519" pos:column="68">println</name></name><argument_list pos:line="519" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="519" pos:column="76">"---------------------TA already exists"</lit:literal><op:operator pos:line="519" pos:column="116">+</op:operator><call><name><name pos:line="519" pos:column="117">s</name><op:operator pos:line="519" pos:column="118">.</op:operator><name pos:line="519" pos:column="119">getUIN</name></name><argument_list pos:line="519" pos:column="125">()</argument_list></call><op:operator pos:line="519" pos:column="127">+</op:operator><lit:literal type="string" pos:line="519" pos:column="128">"------"</lit:literal><op:operator pos:line="519" pos:column="136">+</op:operator><call><name><name pos:line="519" pos:column="137">c</name><op:operator pos:line="519" pos:column="138">.</op:operator><name pos:line="519" pos:column="139">getOfferID</name></name><argument_list pos:line="519" pos:column="149">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						<expr_stmt><expr><call><name><name pos:line="521" pos:column="49">Thread</name><op:operator pos:line="521" pos:column="55">.</op:operator><name pos:line="521" pos:column="56">sleep</name></name><argument_list pos:line="521" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="521" pos:column="62">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="522" pos:column="49">done</name><op:operator pos:line="522" pos:column="53">=</op:operator><lit:literal type="boolean" pos:line="522" pos:column="54">true</lit:literal></expr>;</expr_stmt>
						
					}</block></for>
					
				}</block></then></if>
					
			}</block> 
			<catch pos:line="529" pos:column="25">catch <parameter_list pos:line="529" pos:column="31">(<param><decl><type><name pos:line="529" pos:column="32">InterruptedException</name></type> <name pos:line="529" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="529" pos:column="56">{
				<comment type="line" pos:line="530" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="531" pos:column="33">e</name><op:operator pos:line="531" pos:column="34">.</op:operator><name pos:line="531" pos:column="35">printStackTrace</name></name><argument_list pos:line="531" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="532" pos:column="27">catch <parameter_list pos:line="532" pos:column="33">(<param><decl><type><name><name pos:line="532" pos:column="34">TA</name><op:operator pos:line="532" pos:column="36">.</op:operator><name pos:line="532" pos:column="37">AlreadyExistsInTAException</name></name></type> <name pos:line="532" pos:column="64">e</name></decl></param>)</parameter_list> <block pos:line="532" pos:column="67">{
				<comment type="line" pos:line="533" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="534" pos:column="33">e</name><op:operator pos:line="534" pos:column="34">.</op:operator><name pos:line="534" pos:column="35">printStackTrace</name></name><argument_list pos:line="534" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="537" pos:column="25">finally<block pos:line="537" pos:column="32">{
				<comment type="line" pos:line="538" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="542" pos:column="17">finally<block pos:line="542" pos:column="24">{
		}</block></finally></try>
		<return pos:line="544" pos:column="17">return <expr><name pos:line="544" pos:column="24">done</name></expr>;</return>
	}</block></function>
		
	<function><type><specifier pos:line="547" pos:column="9">public</specifier> <name pos:line="547" pos:column="16">boolean</name></type> <name pos:line="547" pos:column="24">populateExams</name><parameter_list pos:line="547" pos:column="37">()</parameter_list><block pos:line="547" pos:column="39">{
		
		<decl_stmt><decl><type><name pos:line="549" pos:column="17">boolean</name></type> <name pos:line="549" pos:column="25">done</name><init pos:line="549" pos:column="29">=<expr><lit:literal type="boolean" pos:line="549" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="550" pos:column="17">try<block pos:line="550" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="552" pos:column="25">Connection</name></type> <name pos:line="552" pos:column="36">conn</name><init pos:line="552" pos:column="40">=<expr><call><name><name pos:line="552" pos:column="41">Database</name><op:operator pos:line="552" pos:column="49">.</op:operator><name pos:line="552" pos:column="50">getConnection</name></name><argument_list pos:line="552" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="554" pos:column="25">try<block pos:line="554" pos:column="28">{
				<if pos:line="555" pos:column="33">if<condition pos:line="555" pos:column="35">(<expr><name pos:line="555" pos:column="36">conn</name> <op:operator pos:line="555" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="555" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="555" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="557" pos:column="41">ArrayList</name><argument_list pos:line="557" pos:column="50">&lt;<argument><name pos:line="557" pos:column="51">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="557" pos:column="66">getAllOfferedCourses</name><init pos:line="557" pos:column="86">=<expr><call><name><name pos:line="557" pos:column="87">CourseOffered</name><op:operator pos:line="557" pos:column="100">.</op:operator><name pos:line="557" pos:column="101">getAllCurrentlyOfferedCourses</name></name><argument_list pos:line="557" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					

					<for pos:line="561" pos:column="41">for(<init><decl><type><name pos:line="561" pos:column="45">CourseOffered</name></type> <name pos:line="561" pos:column="59">c</name><range pos:line="561" pos:column="60">:<expr><name pos:line="561" pos:column="61">getAllOfferedCourses</name></expr></range></decl></init>)<block pos:line="561" pos:column="82">{
						
						<decl_stmt><decl><type><name pos:line="563" pos:column="49">int</name><index pos:line="563" pos:column="52">[]</index></type> <name pos:line="563" pos:column="55">marks</name> <init pos:line="563" pos:column="61">= <expr><block pos:line="563" pos:column="63">{<expr><lit:literal type="number" pos:line="563" pos:column="64">20</lit:literal></expr>,<expr><lit:literal type="number" pos:line="563" pos:column="67">30</lit:literal></expr>,<expr><lit:literal type="number" pos:line="563" pos:column="70">40</lit:literal></expr>,<expr><lit:literal type="number" pos:line="563" pos:column="73">50</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="564" pos:column="49">int</name></type> <name pos:line="564" pos:column="53">getMarks</name> <init pos:line="564" pos:column="62">= <expr><name><name pos:line="564" pos:column="64">marks</name><index pos:line="564" pos:column="69">[<expr><call pos:line="564" pos:column="70">(<name pos:line="564" pos:column="71">int</name>)<argument_list pos:line="564" pos:column="75">(<argument><expr><call><name><name pos:line="564" pos:column="76">Math</name><op:operator pos:line="564" pos:column="80">.</op:operator><name pos:line="564" pos:column="81">random</name></name><argument_list pos:line="564" pos:column="87">()</argument_list></call><op:operator pos:line="564" pos:column="89">*</op:operator><lit:literal type="number" pos:line="564" pos:column="90">4</lit:literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="565" pos:column="49">String</name></type> <name pos:line="565" pos:column="56">name</name><init pos:line="565" pos:column="60">=<expr><lit:literal type="string" pos:line="565" pos:column="61">"assign"</lit:literal></expr></init></decl>;</decl_stmt>
						
						<for pos:line="567" pos:column="49">for(<init><decl><type><name pos:line="567" pos:column="53">int</name></type> <name pos:line="567" pos:column="57">i</name><init pos:line="567" pos:column="58">=<expr><lit:literal type="number" pos:line="567" pos:column="59">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="567" pos:column="61">i</name><op:operator pos:line="567" pos:column="62">&lt;</op:operator><lit:literal type="number" pos:line="567" pos:column="63">3</lit:literal></expr>;</condition><incr><expr><name pos:line="567" pos:column="65">i</name><op:operator pos:line="567" pos:column="66">++</op:operator></expr></incr>)<block pos:line="567" pos:column="69">{
							
							<decl_stmt><decl><type><name pos:line="569" pos:column="57">CourseExamStructure</name></type> <name pos:line="569" pos:column="77">examAddition</name><init pos:line="569" pos:column="89">=<expr><op:operator pos:line="569" pos:column="90">new</op:operator> <call><name pos:line="569" pos:column="94">CourseExamStructure</name><argument_list pos:line="569" pos:column="113">(<argument><expr><name pos:line="569" pos:column="114">c</name></expr></argument>, <argument><expr><name pos:line="569" pos:column="117">name</name><op:operator pos:line="569" pos:column="121">+</op:operator><lit:literal type="string" pos:line="569" pos:column="122">""</lit:literal><op:operator pos:line="569" pos:column="124">+</op:operator><op:operator pos:line="569" pos:column="125">(</op:operator><name pos:line="569" pos:column="126">i</name><op:operator pos:line="569" pos:column="127">+</op:operator><lit:literal type="number" pos:line="569" pos:column="128">1</lit:literal><op:operator pos:line="569" pos:column="129">)</op:operator></expr></argument>, <argument><expr><name pos:line="569" pos:column="132">getMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="570" pos:column="57">boolean</name></type> <name pos:line="570" pos:column="65">check</name><init pos:line="570" pos:column="70">=<expr><call><name><name pos:line="570" pos:column="71">examAddition</name><op:operator pos:line="570" pos:column="83">.</op:operator><name pos:line="570" pos:column="84">addNewExam</name></name><argument_list pos:line="570" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="571" pos:column="57">if<condition pos:line="571" pos:column="59">(<expr><name pos:line="571" pos:column="60">check</name></expr>)</condition><then pos:line="571" pos:column="66">
								<expr_stmt><expr><call><name><name pos:line="572" pos:column="65">System</name><op:operator pos:line="572" pos:column="71">.</op:operator><name pos:line="572" pos:column="72">out</name><op:operator pos:line="572" pos:column="75">.</op:operator><name pos:line="572" pos:column="76">println</name></name><argument_list pos:line="572" pos:column="83">(<argument><expr><call><name><name pos:line="572" pos:column="84">c</name><op:operator pos:line="572" pos:column="85">.</op:operator><name pos:line="572" pos:column="86">getOfferID</name></name><argument_list pos:line="572" pos:column="96">()</argument_list></call><op:operator pos:line="572" pos:column="98">+</op:operator><lit:literal type="string" pos:line="572" pos:column="99">"-------"</lit:literal><op:operator pos:line="572" pos:column="108">+</op:operator><name pos:line="572" pos:column="109">name</name><op:operator pos:line="572" pos:column="113">+</op:operator><lit:literal type="string" pos:line="572" pos:column="114">""</lit:literal><op:operator pos:line="572" pos:column="116">+</op:operator><op:operator pos:line="572" pos:column="117">(</op:operator><name pos:line="572" pos:column="118">i</name><op:operator pos:line="572" pos:column="119">+</op:operator><lit:literal type="number" pos:line="572" pos:column="120">1</lit:literal><op:operator pos:line="572" pos:column="121">)</op:operator><op:operator pos:line="572" pos:column="122">+</op:operator><lit:literal type="string" pos:line="572" pos:column="123">"-----------"</lit:literal><op:operator pos:line="572" pos:column="136">+</op:operator><name pos:line="572" pos:column="137">getMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
							<else pos:line="573" pos:column="57">else<block pos:line="573" pos:column="61">{
								<expr_stmt><expr><call><name><name pos:line="574" pos:column="65">System</name><op:operator pos:line="574" pos:column="71">.</op:operator><name pos:line="574" pos:column="72">out</name><op:operator pos:line="574" pos:column="75">.</op:operator><name pos:line="574" pos:column="76">println</name></name><argument_list pos:line="574" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="574" pos:column="84">"------------------exam not added----------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else></if>
						
						}</block></for>
						
						

						<expr_stmt><expr><call><name><name pos:line="581" pos:column="49">Thread</name><op:operator pos:line="581" pos:column="55">.</op:operator><name pos:line="581" pos:column="56">sleep</name></name><argument_list pos:line="581" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="581" pos:column="62">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="582" pos:column="49">done</name><op:operator pos:line="582" pos:column="53">=</op:operator><lit:literal type="boolean" pos:line="582" pos:column="54">true</lit:literal></expr>;</expr_stmt>
					}</block></for>
					}</block></then></if>
					
				
					
			}</block> 
			<catch pos:line="589" pos:column="25">catch <parameter_list pos:line="589" pos:column="31">(<param><decl><type><name pos:line="589" pos:column="32">InterruptedException</name></type> <name pos:line="589" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="589" pos:column="56">{
				<comment type="line" pos:line="590" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="591" pos:column="33">e</name><op:operator pos:line="591" pos:column="34">.</op:operator><name pos:line="591" pos:column="35">printStackTrace</name></name><argument_list pos:line="591" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="594" pos:column="25">finally<block pos:line="594" pos:column="32">{
				<comment type="line" pos:line="595" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="599" pos:column="17">finally<block pos:line="599" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="602" pos:column="17">return <expr><name pos:line="602" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="605" pos:column="9">public</specifier> <name pos:line="605" pos:column="16">boolean</name></type> <name pos:line="605" pos:column="24">populateStudentsToCourses</name><parameter_list pos:line="605" pos:column="49">()</parameter_list><block pos:line="605" pos:column="51">{
		
		<decl_stmt><decl><type><name pos:line="607" pos:column="17">boolean</name></type> <name pos:line="607" pos:column="25">done</name><init pos:line="607" pos:column="29">=<expr><lit:literal type="boolean" pos:line="607" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="608" pos:column="17">try<block pos:line="608" pos:column="20">{
			
			<decl_stmt><decl><type><name pos:line="610" pos:column="25">Connection</name></type> <name pos:line="610" pos:column="36">conn</name><init pos:line="610" pos:column="40">=<expr><call><name><name pos:line="610" pos:column="41">Database</name><op:operator pos:line="610" pos:column="49">.</op:operator><name pos:line="610" pos:column="50">getConnection</name></name><argument_list pos:line="610" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="612" pos:column="25">try<block pos:line="612" pos:column="28">{
				<if pos:line="613" pos:column="33">if<condition pos:line="613" pos:column="35">(<expr><name pos:line="613" pos:column="36">conn</name> <op:operator pos:line="613" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="613" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="613" pos:column="49">{
					
					<decl_stmt><decl><type><name><name pos:line="615" pos:column="41">ArrayList</name><argument_list pos:line="615" pos:column="50">&lt;<argument><name pos:line="615" pos:column="51">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="615" pos:column="66">getAllOfferedCourses</name><init pos:line="615" pos:column="86">=<expr><call><name><name pos:line="615" pos:column="87">CourseOffered</name><op:operator pos:line="615" pos:column="100">.</op:operator><name pos:line="615" pos:column="101">getAllCurrentlyOfferedCourses</name></name><argument_list pos:line="615" pos:column="130">()</argument_list></call></expr></init></decl>;</decl_stmt>				
					<decl_stmt><decl><type><name><name pos:line="616" pos:column="41">ArrayList</name><argument_list pos:line="616" pos:column="50">&lt;<argument><name pos:line="616" pos:column="51">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="616" pos:column="60">getAllStudents</name><init pos:line="616" pos:column="74">=<expr><call><name><name pos:line="616" pos:column="75">Student</name><op:operator pos:line="616" pos:column="82">.</op:operator><name pos:line="616" pos:column="83">getAllStudents</name></name><argument_list pos:line="616" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<for pos:line="618" pos:column="41">for(<init><decl><type><name pos:line="618" pos:column="45">CourseOffered</name></type> <name pos:line="618" pos:column="59">c</name><range pos:line="618" pos:column="60">:<expr><name pos:line="618" pos:column="61">getAllOfferedCourses</name></expr></range></decl></init>)<block pos:line="618" pos:column="82">{
						<expr_stmt><expr><call><name><name pos:line="619" pos:column="49">System</name><op:operator pos:line="619" pos:column="55">.</op:operator><name pos:line="619" pos:column="56">out</name><op:operator pos:line="619" pos:column="59">.</op:operator><name pos:line="619" pos:column="60">println</name></name><argument_list pos:line="619" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="619" pos:column="68">"--------------------------------------------------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="620" pos:column="49">if<condition pos:line="620" pos:column="51">(<expr><call><name><name pos:line="620" pos:column="52">getAllStudents</name><op:operator pos:line="620" pos:column="66">.</op:operator><name pos:line="620" pos:column="67">size</name></name><argument_list pos:line="620" pos:column="71">()</argument_list></call><op:operator pos:line="620" pos:column="73">&lt;=</op:operator><lit:literal type="number" pos:line="620" pos:column="75">10</lit:literal></expr>)</condition><then><block pos:line="620" pos:column="78">{
							<expr_stmt><expr><name pos:line="621" pos:column="57">getAllStudents</name> <op:operator pos:line="621" pos:column="72">=</op:operator> <call><name><name pos:line="621" pos:column="74">Student</name><op:operator pos:line="621" pos:column="81">.</op:operator><name pos:line="621" pos:column="82">getAllStudents</name></name><argument_list pos:line="621" pos:column="96">()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						
						<for pos:line="624" pos:column="49">for(<init><decl><type><name pos:line="624" pos:column="53">int</name></type> <name pos:line="624" pos:column="57">i</name><init pos:line="624" pos:column="58">=<expr><lit:literal type="number" pos:line="624" pos:column="59">0</lit:literal></expr></init></decl>;</init><condition><expr><name pos:line="624" pos:column="61">i</name><op:operator pos:line="624" pos:column="62">&lt;</op:operator><lit:literal type="number" pos:line="624" pos:column="63">5</lit:literal></expr>;</condition><incr><expr><name pos:line="624" pos:column="65">i</name><op:operator pos:line="624" pos:column="66">++</op:operator></expr></incr>)<block pos:line="624" pos:column="69">{
							
							<expr_stmt><expr><call><name><name pos:line="626" pos:column="57">Collections</name><op:operator pos:line="626" pos:column="68">.</op:operator><name pos:line="626" pos:column="69">shuffle</name></name><argument_list pos:line="626" pos:column="76">(<argument><expr><name pos:line="626" pos:column="77">getAllStudents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="627" pos:column="57">Student</name></type> <name pos:line="627" pos:column="65">s</name><init pos:line="627" pos:column="66">=<expr><call><name><name pos:line="627" pos:column="67">getAllStudents</name><op:operator pos:line="627" pos:column="81">.</op:operator><name pos:line="627" pos:column="82">remove</name></name><argument_list pos:line="627" pos:column="88">(<argument><expr><lit:literal type="number" pos:line="627" pos:column="89">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

							<decl_stmt><decl><type><name pos:line="629" pos:column="57">StudentEnrollment</name></type> <name pos:line="629" pos:column="75">se</name><init pos:line="629" pos:column="77">=<expr><op:operator pos:line="629" pos:column="78">new</op:operator> <call><name pos:line="629" pos:column="82">StudentEnrollment</name><argument_list pos:line="629" pos:column="99">(<argument><expr><call><name><name pos:line="629" pos:column="100">c</name><op:operator pos:line="629" pos:column="101">.</op:operator><name pos:line="629" pos:column="102">getOfferID</name></name><argument_list pos:line="629" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="629" pos:column="116">s</name><op:operator pos:line="629" pos:column="117">.</op:operator><name pos:line="629" pos:column="118">getUIN</name></name><argument_list pos:line="629" pos:column="124">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="630" pos:column="57">boolean</name></type> <name pos:line="630" pos:column="65">check</name><init pos:line="630" pos:column="70">=<expr><call><name><name pos:line="630" pos:column="71">se</name><op:operator pos:line="630" pos:column="73">.</op:operator><name pos:line="630" pos:column="74">enrollStudents</name></name><argument_list pos:line="630" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="631" pos:column="57">if<condition pos:line="631" pos:column="59">(<expr><name pos:line="631" pos:column="60">check</name></expr>)</condition><then><block pos:line="631" pos:column="66">{
								<expr_stmt><expr><call><name><name pos:line="632" pos:column="65">System</name><op:operator pos:line="632" pos:column="71">.</op:operator><name pos:line="632" pos:column="72">out</name><op:operator pos:line="632" pos:column="75">.</op:operator><name pos:line="632" pos:column="76">println</name></name><argument_list pos:line="632" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="632" pos:column="84">""</lit:literal><op:operator pos:line="632" pos:column="86">+</op:operator><call><name><name pos:line="632" pos:column="87">c</name><op:operator pos:line="632" pos:column="88">.</op:operator><name pos:line="632" pos:column="89">getOfferID</name></name><argument_list pos:line="632" pos:column="99">()</argument_list></call><op:operator pos:line="632" pos:column="101">+</op:operator><lit:literal type="string" pos:line="632" pos:column="102">"-----------"</lit:literal><op:operator pos:line="632" pos:column="115">+</op:operator><call><name><name pos:line="632" pos:column="116">s</name><op:operator pos:line="632" pos:column="117">.</op:operator><name pos:line="632" pos:column="118">getUIN</name></name><argument_list pos:line="632" pos:column="124">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="633" pos:column="65">Thread</name><op:operator pos:line="633" pos:column="71">.</op:operator><name pos:line="633" pos:column="72">sleep</name></name><argument_list pos:line="633" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="633" pos:column="78">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="634" pos:column="65">done</name><op:operator pos:line="634" pos:column="69">=</op:operator><lit:literal type="boolean" pos:line="634" pos:column="70">true</lit:literal></expr>;</expr_stmt>
							}</block></then>
							<else pos:line="636" pos:column="57">else<block pos:line="636" pos:column="61">{
								<expr_stmt><expr><call><name><name pos:line="637" pos:column="65">System</name><op:operator pos:line="637" pos:column="71">.</op:operator><name pos:line="637" pos:column="72">out</name><op:operator pos:line="637" pos:column="75">.</op:operator><name pos:line="637" pos:column="76">println</name></name><argument_list pos:line="637" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="637" pos:column="84">"-------------------no capacity-----------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></else></if>
					}</block></for>
						
					}</block></for>
				}</block></then></if>
			}</block>
					 
			<catch pos:line="645" pos:column="25">catch <parameter_list pos:line="645" pos:column="31">(<param><decl><type><name pos:line="645" pos:column="32">InterruptedException</name></type> <name pos:line="645" pos:column="53">e</name></decl></param>)</parameter_list> <block pos:line="645" pos:column="56">{
				<comment type="line" pos:line="646" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="647" pos:column="33">e</name><op:operator pos:line="647" pos:column="34">.</op:operator><name pos:line="647" pos:column="35">printStackTrace</name></name><argument_list pos:line="647" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> 
				
			<finally pos:line="650" pos:column="25">finally<block pos:line="650" pos:column="32">{
				<comment type="line" pos:line="651" pos:column="33">//Database.commitTransaction(conn);</comment>
			}</block></finally></try>
		}</block>
		
		<finally pos:line="655" pos:column="17">finally<block pos:line="655" pos:column="24">{
		}</block></finally></try>
		<return pos:line="657" pos:column="17">return <expr><name pos:line="657" pos:column="24">done</name></expr>;</return>
	}</block></function>
	
	
	<function><type><specifier pos:line="661" pos:column="9">public</specifier> <specifier pos:line="661" pos:column="16">static</specifier> <name pos:line="661" pos:column="23">void</name></type> <name pos:line="661" pos:column="28">main</name><parameter_list pos:line="661" pos:column="32">(<param><decl><type><name><name pos:line="661" pos:column="33">String</name><index pos:line="661" pos:column="39">[]</index></name></type> <name pos:line="661" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="661" pos:column="48">{
		<comment type="line" pos:line="662" pos:column="17">// TODO Auto-generated method stub</comment>
		
		<decl_stmt><decl><type><name pos:line="664" pos:column="17">boolean</name></type> <name pos:line="664" pos:column="25">checkDept</name><init pos:line="664" pos:column="34">=<expr><lit:literal type="boolean" pos:line="664" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="665" pos:column="17">boolean</name></type> <name pos:line="665" pos:column="25">checkAdmin</name><init pos:line="665" pos:column="35">=<expr><lit:literal type="boolean" pos:line="665" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="666" pos:column="17">boolean</name></type> <name pos:line="666" pos:column="25">checkProf</name><init pos:line="666" pos:column="34">=<expr><lit:literal type="boolean" pos:line="666" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="667" pos:column="17">boolean</name></type> <name pos:line="667" pos:column="25">checkStud</name><init pos:line="667" pos:column="34">=<expr><lit:literal type="boolean" pos:line="667" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="668" pos:column="17">boolean</name></type> <name pos:line="668" pos:column="25">checkCourses</name><init pos:line="668" pos:column="37">=<expr><lit:literal type="boolean" pos:line="668" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="669" pos:column="17">boolean</name></type> <name pos:line="669" pos:column="25">checkCourseOffered</name><init pos:line="669" pos:column="43">=<expr><lit:literal type="boolean" pos:line="669" pos:column="44">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="670" pos:column="17">boolean</name></type> <name pos:line="670" pos:column="25">checkAppDetails</name> <init pos:line="670" pos:column="41">=<expr><lit:literal type="boolean" pos:line="670" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="671" pos:column="17">boolean</name></type> <name pos:line="671" pos:column="25">checkJobPostings</name><init pos:line="671" pos:column="41">=<expr><lit:literal type="boolean" pos:line="671" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="672" pos:column="17">boolean</name></type> <name pos:line="672" pos:column="25">checkTAs</name><init pos:line="672" pos:column="33">=<expr><lit:literal type="boolean" pos:line="672" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="673" pos:column="17">boolean</name></type> <name pos:line="673" pos:column="25">checkExams</name><init pos:line="673" pos:column="35">=<expr><lit:literal type="boolean" pos:line="673" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="674" pos:column="17">boolean</name></type> <name pos:line="674" pos:column="25">checkStudentsToCourse</name><init pos:line="674" pos:column="46">=<expr><lit:literal type="boolean" pos:line="674" pos:column="47">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="676" pos:column="17">PopulateData</name></type> <name pos:line="676" pos:column="30">p</name><init pos:line="676" pos:column="31">=<expr><op:operator pos:line="676" pos:column="32">new</op:operator> <call><name pos:line="676" pos:column="36">PopulateData</name><argument_list pos:line="676" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<expr_stmt><expr><name pos:line="679" pos:column="17">checkDept</name><op:operator pos:line="679" pos:column="26">=</op:operator><call><name><name pos:line="679" pos:column="27">p</name><op:operator pos:line="679" pos:column="28">.</op:operator><name pos:line="679" pos:column="29">populateDepartments</name></name><argument_list pos:line="679" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
		
		<if pos:line="681" pos:column="17">if<condition pos:line="681" pos:column="19">(<expr><name pos:line="681" pos:column="20">checkDept</name></expr>)</condition><then><block pos:line="681" pos:column="30">{
			 <expr_stmt><expr><name pos:line="682" pos:column="26">checkAdmin</name><op:operator pos:line="682" pos:column="36">=</op:operator> <call><name><name pos:line="682" pos:column="38">p</name><op:operator pos:line="682" pos:column="39">.</op:operator><name pos:line="682" pos:column="40">populateAdmins</name></name><argument_list pos:line="682" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="684" pos:column="17">else<block pos:line="684" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="685" pos:column="25">System</name><op:operator pos:line="685" pos:column="31">.</op:operator><name pos:line="685" pos:column="32">out</name><op:operator pos:line="685" pos:column="35">.</op:operator><name pos:line="685" pos:column="36">println</name></name><argument_list pos:line="685" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="685" pos:column="44">"dept not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="688" pos:column="17">if<condition pos:line="688" pos:column="19">(<expr><name pos:line="688" pos:column="20">checkAdmin</name></expr>)</condition><then><block pos:line="688" pos:column="31">{
			 <expr_stmt><expr><name pos:line="689" pos:column="26">checkProf</name><op:operator pos:line="689" pos:column="35">=</op:operator> <call><name><name pos:line="689" pos:column="37">p</name><op:operator pos:line="689" pos:column="38">.</op:operator><name pos:line="689" pos:column="39">populateProfessors</name></name><argument_list pos:line="689" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="691" pos:column="17">else<block pos:line="691" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="692" pos:column="25">System</name><op:operator pos:line="692" pos:column="31">.</op:operator><name pos:line="692" pos:column="32">out</name><op:operator pos:line="692" pos:column="35">.</op:operator><name pos:line="692" pos:column="36">println</name></name><argument_list pos:line="692" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="692" pos:column="44">"Admin not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="695" pos:column="17">if<condition pos:line="695" pos:column="19">(<expr><name pos:line="695" pos:column="20">checkProf</name></expr>)</condition><then><block pos:line="695" pos:column="30">{
			 <expr_stmt><expr><name pos:line="696" pos:column="26">checkStud</name> <op:operator pos:line="696" pos:column="36">=</op:operator> <call><name><name pos:line="696" pos:column="38">p</name><op:operator pos:line="696" pos:column="39">.</op:operator><name pos:line="696" pos:column="40">populateStudents</name></name><argument_list pos:line="696" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="698" pos:column="17">else<block pos:line="698" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="699" pos:column="25">System</name><op:operator pos:line="699" pos:column="31">.</op:operator><name pos:line="699" pos:column="32">out</name><op:operator pos:line="699" pos:column="35">.</op:operator><name pos:line="699" pos:column="36">println</name></name><argument_list pos:line="699" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="699" pos:column="44">"Prof not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<if pos:line="702" pos:column="17">if<condition pos:line="702" pos:column="19">(<expr><name pos:line="702" pos:column="20">checkStud</name></expr>)</condition><then><block pos:line="702" pos:column="30">{
			 <expr_stmt><expr><name pos:line="703" pos:column="26">checkCourses</name> <op:operator pos:line="703" pos:column="39">=</op:operator> <call><name><name pos:line="703" pos:column="41">p</name><op:operator pos:line="703" pos:column="42">.</op:operator><name pos:line="703" pos:column="43">populateCourses</name></name><argument_list pos:line="703" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="705" pos:column="17">else<block pos:line="705" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="706" pos:column="25">System</name><op:operator pos:line="706" pos:column="31">.</op:operator><name pos:line="706" pos:column="32">out</name><op:operator pos:line="706" pos:column="35">.</op:operator><name pos:line="706" pos:column="36">println</name></name><argument_list pos:line="706" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="706" pos:column="44">"Students not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="709" pos:column="17">if<condition pos:line="709" pos:column="19">(<expr><name pos:line="709" pos:column="20">checkCourses</name></expr>)</condition><then><block pos:line="709" pos:column="33">{
			 <expr_stmt><expr><name pos:line="710" pos:column="26">checkCourseOffered</name> <op:operator pos:line="710" pos:column="45">=</op:operator> <call><name><name pos:line="710" pos:column="47">p</name><op:operator pos:line="710" pos:column="48">.</op:operator><name pos:line="710" pos:column="49">populateCoursesOffered</name></name><argument_list pos:line="710" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="712" pos:column="17">else<block pos:line="712" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="713" pos:column="25">System</name><op:operator pos:line="713" pos:column="31">.</op:operator><name pos:line="713" pos:column="32">out</name><op:operator pos:line="713" pos:column="35">.</op:operator><name pos:line="713" pos:column="36">println</name></name><argument_list pos:line="713" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="713" pos:column="44">"Courses not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="716" pos:column="17">if<condition pos:line="716" pos:column="19">(<expr><name pos:line="716" pos:column="20">checkCourseOffered</name></expr>)</condition><then><block pos:line="716" pos:column="39">{
			 <expr_stmt><expr><name pos:line="717" pos:column="26">checkAppDetails</name> <op:operator pos:line="717" pos:column="42">=</op:operator> <call><name><name pos:line="717" pos:column="44">p</name><op:operator pos:line="717" pos:column="45">.</op:operator><name pos:line="717" pos:column="46">populateApplicationDetails</name></name><argument_list pos:line="717" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="719" pos:column="17">else<block pos:line="719" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="720" pos:column="25">System</name><op:operator pos:line="720" pos:column="31">.</op:operator><name pos:line="720" pos:column="32">out</name><op:operator pos:line="720" pos:column="35">.</op:operator><name pos:line="720" pos:column="36">println</name></name><argument_list pos:line="720" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="44">"Course offered not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="723" pos:column="17">if<condition pos:line="723" pos:column="19">(<expr><name pos:line="723" pos:column="20">checkAppDetails</name></expr>)</condition><then><block pos:line="723" pos:column="36">{
			 <expr_stmt><expr><name pos:line="724" pos:column="26">checkJobPostings</name> <op:operator pos:line="724" pos:column="43">=</op:operator> <call><name><name pos:line="724" pos:column="45">p</name><op:operator pos:line="724" pos:column="46">.</op:operator><name pos:line="724" pos:column="47">populateJobPostings</name></name><argument_list pos:line="724" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="726" pos:column="17">else<block pos:line="726" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="727" pos:column="25">System</name><op:operator pos:line="727" pos:column="31">.</op:operator><name pos:line="727" pos:column="32">out</name><op:operator pos:line="727" pos:column="35">.</op:operator><name pos:line="727" pos:column="36">println</name></name><argument_list pos:line="727" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="727" pos:column="44">"Applications not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="730" pos:column="17">if<condition pos:line="730" pos:column="19">(<expr><name pos:line="730" pos:column="20">checkJobPostings</name></expr>)</condition><then><block pos:line="730" pos:column="37">{
			 <expr_stmt><expr><name pos:line="731" pos:column="26">checkTAs</name> <op:operator pos:line="731" pos:column="35">=</op:operator> <call><name><name pos:line="731" pos:column="37">p</name><op:operator pos:line="731" pos:column="38">.</op:operator><name pos:line="731" pos:column="39">populateTAs</name></name><argument_list pos:line="731" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="733" pos:column="17">else<block pos:line="733" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="734" pos:column="25">System</name><op:operator pos:line="734" pos:column="31">.</op:operator><name pos:line="734" pos:column="32">out</name><op:operator pos:line="734" pos:column="35">.</op:operator><name pos:line="734" pos:column="36">println</name></name><argument_list pos:line="734" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="734" pos:column="44">"Postings not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="737" pos:column="17">if<condition pos:line="737" pos:column="19">(<expr><name pos:line="737" pos:column="20">checkTAs</name></expr>)</condition><then><block pos:line="737" pos:column="29">{
			<expr_stmt><expr><name pos:line="738" pos:column="25">checkExams</name> <op:operator pos:line="738" pos:column="36">=</op:operator> <call><name><name pos:line="738" pos:column="38">p</name><op:operator pos:line="738" pos:column="39">.</op:operator><name pos:line="738" pos:column="40">populateExams</name></name><argument_list pos:line="738" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="740" pos:column="17">else<block pos:line="740" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="741" pos:column="25">System</name><op:operator pos:line="741" pos:column="31">.</op:operator><name pos:line="741" pos:column="32">out</name><op:operator pos:line="741" pos:column="35">.</op:operator><name pos:line="741" pos:column="36">println</name></name><argument_list pos:line="741" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="741" pos:column="44">"TAs not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="744" pos:column="17">if<condition pos:line="744" pos:column="19">(<expr><name pos:line="744" pos:column="20">checkExams</name></expr>)</condition><then><block pos:line="744" pos:column="31">{
			<expr_stmt><expr><name pos:line="745" pos:column="25">checkStudentsToCourse</name> <op:operator pos:line="745" pos:column="47">=</op:operator> <call><name><name pos:line="745" pos:column="49">p</name><op:operator pos:line="745" pos:column="50">.</op:operator><name pos:line="745" pos:column="51">populateStudentsToCourses</name></name><argument_list pos:line="745" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="747" pos:column="17">else<block pos:line="747" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="748" pos:column="25">System</name><op:operator pos:line="748" pos:column="31">.</op:operator><name pos:line="748" pos:column="32">out</name><op:operator pos:line="748" pos:column="35">.</op:operator><name pos:line="748" pos:column="36">println</name></name><argument_list pos:line="748" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="748" pos:column="44">"exams not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="751" pos:column="17">if<condition pos:line="751" pos:column="19">(<expr><name pos:line="751" pos:column="20">checkStudentsToCourse</name></expr>)</condition><then><block pos:line="751" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="752" pos:column="25">System</name><op:operator pos:line="752" pos:column="31">.</op:operator><name pos:line="752" pos:column="32">out</name><op:operator pos:line="752" pos:column="35">.</op:operator><name pos:line="752" pos:column="36">println</name></name><argument_list pos:line="752" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="752" pos:column="44">"All done"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
		<else pos:line="754" pos:column="17">else<block pos:line="754" pos:column="21">{
			<expr_stmt><expr><call><name><name pos:line="755" pos:column="25">System</name><op:operator pos:line="755" pos:column="31">.</op:operator><name pos:line="755" pos:column="32">out</name><op:operator pos:line="755" pos:column="35">.</op:operator><name pos:line="755" pos:column="36">println</name></name><argument_list pos:line="755" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="755" pos:column="44">"Students to courses not added---stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

	}</block></function>

}</block></class>
</unit>
