<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\CalculateByOccupationOrIndustryCode.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SQLException</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Collections</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">HashMap</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">tada</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">interfaces</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">CalcImplWithDescriptionInterface</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">CalculateByOccupationOrIndustryCodeInterface</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">interfaces</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">util</name><op:operator pos:line="15" pos:column="23">.</op:operator><name pos:line="15" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="18" pos:column="1">/**
 * CalculateByOccupationOrIndustryCode.java
 * Purpose: Calculation class for calculate average income and average
 * 	wage for requirements 4 and 7.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="27" pos:column="1">/**
 * Object to perform all calculations necessary to calculate
 * 	average income and average weekly wage by all or by a given
 * 	industry or occupation code contained in the database.  Uses Hash
 *  Maps and offloads processing to the JVM to overcome inherent
 *  inefficiencies in the Derby database thus significantly improving
 *  performance.
 */</comment>
<class><specifier pos:line="35" pos:column="1">public</specifier> class <name pos:line="35" pos:column="14">CalculateByOccupationOrIndustryCode</name> <super><implements pos:line="35" pos:column="50">implements <name pos:line="35" pos:column="61">CalculateByOccupationOrIndustryCodeInterface</name></implements></super><block pos:line="35" pos:column="105">{

    <decl_stmt><decl><type><name pos:line="37" pos:column="5">Statement</name></type> <name pos:line="37" pos:column="15">statement</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">ResultSet</name></type> <name pos:line="38" pos:column="19">results</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:line="40" pos:column="9">/**
	 * Returns a list with all the occupation codes contained in the database.
	 * &lt;p&gt;
	 * @return				An ArrayList&lt;Integer&gt; of all occupation codes.
	 */</comment>
	<function><type><annotation pos:line="45" pos:column="9">@<name pos:line="45" pos:column="10">TaDaMethod</name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">variablesToTrack</name> <op:operator pos:line="45" pos:column="38">=</op:operator><block pos:line="45" pos:column="39">{<expr><lit:literal type="string" pos:line="45" pos:column="40">"occupationCodeList"</lit:literal></expr>}</block></expr></argument>,
			<argument><expr><name pos:line="46" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="46" pos:column="56">=</op:operator> <block pos:line="46" pos:column="58">{<expr><lit:literal type="string" pos:line="46" pos:column="59">"occupation.OCCUPATIONCODE"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="47" pos:column="9">public</specifier> <name><name pos:line="47" pos:column="16">ArrayList</name><argument_list pos:line="47" pos:column="25">&lt;<argument><name pos:line="47" pos:column="26">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="35">getOccupationCodeList</name><parameter_list pos:line="47" pos:column="56">()</parameter_list> <block pos:line="47" pos:column="59">{
	    <decl_stmt><decl><type><name><name pos:line="48" pos:column="13">ArrayList</name><argument_list pos:line="48" pos:column="22">&lt;<argument><name pos:line="48" pos:column="23">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="32">occupationCodeList</name> <init pos:line="48" pos:column="51">= <expr><op:operator pos:line="48" pos:column="53">new</op:operator> <call><name><name pos:line="48" pos:column="57">ArrayList</name><argument_list pos:line="48" pos:column="66">&lt;<argument><name pos:line="48" pos:column="67">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="49" pos:column="17">try <block pos:line="49" pos:column="21">{
			<expr_stmt><expr><name pos:line="50" pos:column="25">statement</name> <op:operator pos:line="50" pos:column="35">=</op:operator> <call><name><name pos:line="50" pos:column="37">Factory</name><op:operator pos:line="50" pos:column="44">.</op:operator><name pos:line="50" pos:column="45">getConnection</name></name><argument_list pos:line="50" pos:column="58">()</argument_list></call><op:operator pos:line="50" pos:column="60">.</op:operator><call><name pos:line="50" pos:column="61">createStatement</name><argument_list pos:line="50" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="51" pos:column="17">results</name> <op:operator pos:line="51" pos:column="25">=</op:operator> <call><name><name pos:line="51" pos:column="27">statement</name><op:operator pos:line="51" pos:column="36">.</op:operator><name pos:line="51" pos:column="37">executeQuery</name></name><argument_list pos:line="51" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="50">"SELECT DISTINCT OCCUPATIONCODE from occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="52" pos:column="17">while<condition pos:line="52" pos:column="22">(<expr><call><name><name pos:line="52" pos:column="23">results</name><op:operator pos:line="52" pos:column="30">.</op:operator><name pos:line="52" pos:column="31">next</name></name><argument_list pos:line="52" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="52" pos:column="38">{
	        	<if pos:line="53" pos:column="25">if<condition pos:line="53" pos:column="27">(<expr><call><name><name pos:line="53" pos:column="28">results</name><op:operator pos:line="53" pos:column="35">.</op:operator><name pos:line="53" pos:column="36">getString</name></name><argument_list pos:line="53" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="46">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="64">!=</op:operator> <lit:literal type="null" pos:line="53" pos:column="67">null</lit:literal></expr>)</condition><then><block pos:line="53" pos:column="72">{
	        		<expr_stmt><expr><call><name><name pos:line="54" pos:column="33">occupationCodeList</name><op:operator pos:line="54" pos:column="51">.</op:operator><name pos:line="54" pos:column="52">add</name></name><argument_list pos:line="54" pos:column="55">(<argument><expr><call><name><name pos:line="54" pos:column="56">results</name><op:operator pos:line="54" pos:column="63">.</op:operator><name pos:line="54" pos:column="64">getInt</name></name><argument_list pos:line="54" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="71">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        	
	        }</block></while>
		}</block> <catch pos:line="58" pos:column="19">catch <parameter_list pos:line="58" pos:column="25">(<param><decl><type><name pos:line="58" pos:column="26">SQLException</name></type> <name pos:line="58" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="42">{
	        <while pos:line="59" pos:column="17">while <condition pos:line="59" pos:column="23">(<expr><name pos:line="59" pos:column="24">e</name> <op:operator pos:line="59" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="59" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="60" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="61" pos:column="21">System</name><op:operator pos:line="61" pos:column="27">.</op:operator><name pos:line="61" pos:column="28">err</name><op:operator pos:line="61" pos:column="31">.</op:operator><name pos:line="61" pos:column="32">println</name></name><argument_list pos:line="61" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="62" pos:column="21">System</name><op:operator pos:line="62" pos:column="27">.</op:operator><name pos:line="62" pos:column="28">err</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">println</name></name><argument_list pos:line="62" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="62" pos:column="57">+</op:operator> <call><name><name pos:line="62" pos:column="59">e</name><op:operator pos:line="62" pos:column="60">.</op:operator><name pos:line="62" pos:column="61">getSQLState</name></name><argument_list pos:line="62" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="63" pos:column="21">System</name><op:operator pos:line="63" pos:column="27">.</op:operator><name pos:line="63" pos:column="28">err</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">println</name></name><argument_list pos:line="63" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="63" pos:column="57">+</op:operator> <call><name><name pos:line="63" pos:column="59">e</name><op:operator pos:line="63" pos:column="60">.</op:operator><name pos:line="63" pos:column="61">getErrorCode</name></name><argument_list pos:line="63" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="64" pos:column="21">System</name><op:operator pos:line="64" pos:column="27">.</op:operator><name pos:line="64" pos:column="28">err</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">println</name></name><argument_list pos:line="64" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="64" pos:column="57">+</op:operator> <call><name><name pos:line="64" pos:column="59">e</name><op:operator pos:line="64" pos:column="60">.</op:operator><name pos:line="64" pos:column="61">getMessage</name></name><argument_list pos:line="64" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="65" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="66" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="67" pos:column="21">e</name> <op:operator pos:line="67" pos:column="23">=</op:operator> <call><name><name pos:line="67" pos:column="25">e</name><op:operator pos:line="67" pos:column="26">.</op:operator><name pos:line="67" pos:column="27">getNextException</name></name><argument_list pos:line="67" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>
		
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">Collections</name><op:operator pos:line="71" pos:column="20">.</op:operator><name pos:line="71" pos:column="21">sort</name></name><argument_list pos:line="71" pos:column="25">(<argument><expr><name pos:line="71" pos:column="26">occupationCodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="72" pos:column="17">return <expr><name pos:line="72" pos:column="24">occupationCodeList</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="75" pos:column="9">/**
	 * Checks if a occupation code is contained in the database
	 * &lt;p&gt;
	 * @param 				A integer of a occupation code to test
	 * @return				Boolean true / false answer
	 */</comment>
	<function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">boolean</name></type> <name pos:line="81" pos:column="24">isValidOccupationCode</name><parameter_list pos:line="81" pos:column="45">(<param><decl><type><name pos:line="81" pos:column="46">int</name></type> <name pos:line="81" pos:column="50">code</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="56">{

		<decl_stmt><decl><type><name><name pos:line="83" pos:column="17">ArrayList</name><argument_list pos:line="83" pos:column="26">&lt;<argument><name pos:line="83" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="83" pos:column="36">occupationCodeList</name> <init pos:line="83" pos:column="55">= <expr><call><name pos:line="83" pos:column="57">getOccupationCodeList</name><argument_list pos:line="83" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="85" pos:column="17">for(<init><decl><type><name pos:line="85" pos:column="21">int</name></type> <name pos:line="85" pos:column="25">i</name><range pos:line="85" pos:column="26">: <expr><name pos:line="85" pos:column="28">occupationCodeList</name></expr></range></decl></init>)<block pos:line="85" pos:column="47">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">i</name> <op:operator pos:line="86" pos:column="31">==</op:operator> <name pos:line="86" pos:column="34">code</name></expr>)</condition><then><block pos:line="86" pos:column="39">{
				<return pos:line="87" pos:column="33">return <expr><lit:literal type="boolean" pos:line="87" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="90" pos:column="17">return <expr><lit:literal type="boolean" pos:line="90" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="93" pos:column="9">/**
	 * Returns a hash map matching the occupation codes with their string descriptions
	 * &lt;p&gt;
	 * @return				A hashMap &lt;Integer, String&gt; of occupation codes and their
	 * 							associated string descriptions.
	 */</comment>
	<function><type><annotation pos:line="99" pos:column="9">@<name pos:line="99" pos:column="10">TaDaMethod</name><argument_list pos:line="99" pos:column="20">(<argument><expr><name pos:line="99" pos:column="21">variablesToTrack</name> <op:operator pos:line="99" pos:column="38">=</op:operator><block pos:line="99" pos:column="39">{<expr><lit:literal type="string" pos:line="99" pos:column="40">"occupation"</lit:literal></expr><op:operator pos:line="99" pos:column="52">,</op:operator> <argument><expr><lit:literal type="string" pos:line="99" pos:column="54">"occupationCodeAndNameMap"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="100" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="100" pos:column="56">=</op:operator> <block pos:line="100" pos:column="58">{<expr><lit:literal type="string" pos:line="100" pos:column="59">"occupation.occupation"</lit:literal></expr><op:operator pos:line="100" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="100" pos:column="84">"occupation.OCCUPATIONCODE"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="101" pos:column="9">public</specifier> <name><name pos:line="101" pos:column="16">HashMap</name><argument_list pos:line="101" pos:column="23">&lt;<argument><name pos:line="101" pos:column="24">Integer</name></argument>, <argument><name pos:line="101" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="41">getOccupationCodeAndNameMap</name><parameter_list pos:line="101" pos:column="68">()</parameter_list> <block pos:line="101" pos:column="71">{
		<decl_stmt><decl><type><name><name pos:line="102" pos:column="17">HashMap</name><argument_list pos:line="102" pos:column="24">&lt;<argument><name pos:line="102" pos:column="25">Integer</name></argument>, <argument><name pos:line="102" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="102" pos:column="42">occupationCodeAndNameMap</name> <init pos:line="102" pos:column="67">= <expr><op:operator pos:line="102" pos:column="69">new</op:operator> <call><name><name pos:line="102" pos:column="73">HashMap</name><argument_list pos:line="102" pos:column="80">&lt;<argument><name pos:line="102" pos:column="81">Integer</name></argument>, <argument><name pos:line="102" pos:column="90">String</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="104" pos:column="17">try <block pos:line="104" pos:column="21">{
			<expr_stmt><expr><name pos:line="105" pos:column="25">statement</name> <op:operator pos:line="105" pos:column="35">=</op:operator> <call><name><name pos:line="105" pos:column="37">Factory</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">getConnection</name></name><argument_list pos:line="105" pos:column="58">()</argument_list></call><op:operator pos:line="105" pos:column="60">.</op:operator><call><name pos:line="105" pos:column="61">createStatement</name><argument_list pos:line="105" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="106" pos:column="17">results</name> <op:operator pos:line="106" pos:column="25">=</op:operator> <call><name><name pos:line="106" pos:column="27">statement</name><op:operator pos:line="106" pos:column="36">.</op:operator><name pos:line="106" pos:column="37">executeQuery</name></name><argument_list pos:line="106" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="50">"SELECT OCCUPATIONCODE, OCCUPATION from occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	        <while pos:line="107" pos:column="17">while<condition pos:line="107" pos:column="22">(<expr><call><name><name pos:line="107" pos:column="23">results</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">next</name></name><argument_list pos:line="107" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="107" pos:column="38">{
	        	<if pos:line="108" pos:column="25">if<condition pos:line="108" pos:column="27">(<expr><call><name><name pos:line="108" pos:column="28">results</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">getString</name></name><argument_list pos:line="108" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="46">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="64">==</op:operator> <lit:literal type="null" pos:line="108" pos:column="67">null</lit:literal></expr>)</condition><then><block pos:line="108" pos:column="72">{
	        		<continue pos:line="109" pos:column="33">continue;</continue>
	        	}</block></then></if>
	        	
	        	<decl_stmt><decl><type><name pos:line="112" pos:column="25">String</name></type> <name pos:line="112" pos:column="32">occupation</name> <init pos:line="112" pos:column="43">= <expr><call><name><name pos:line="112" pos:column="45">results</name><op:operator pos:line="112" pos:column="52">.</op:operator><name pos:line="112" pos:column="53">getString</name></name><argument_list pos:line="112" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="63">"OCCUPATION"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	
	        	<if pos:line="114" pos:column="25">if<condition pos:line="114" pos:column="27">(<expr><name pos:line="114" pos:column="28">occupation</name> <op:operator pos:line="114" pos:column="39">!=</op:operator> <lit:literal type="null" pos:line="114" pos:column="42">null</lit:literal></expr>)</condition><then><block pos:line="114" pos:column="47">{
	        		<expr_stmt><expr><name pos:line="115" pos:column="33">occupation</name> <op:operator pos:line="115" pos:column="44">=</op:operator> <call><name><name pos:line="115" pos:column="46">occupation</name><op:operator pos:line="115" pos:column="56">.</op:operator><name pos:line="115" pos:column="57">trim</name></name><argument_list pos:line="115" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
	        	}</block></then> <else pos:line="116" pos:column="27">else <block pos:line="116" pos:column="32">{
	        		<expr_stmt><expr><name pos:line="117" pos:column="33">occupation</name> <op:operator pos:line="117" pos:column="44">=</op:operator> <lit:literal type="string" pos:line="117" pos:column="46">"None Entered"</lit:literal></expr>;</expr_stmt>
	        	}</block></else></if>
	        	
	        	<if pos:line="120" pos:column="25">if<condition pos:line="120" pos:column="27">(<expr><call><name><name pos:line="120" pos:column="28">results</name><op:operator pos:line="120" pos:column="35">.</op:operator><name pos:line="120" pos:column="36">getString</name></name><argument_list pos:line="120" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="46">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="64">!=</op:operator> <lit:literal type="null" pos:line="120" pos:column="67">null</lit:literal></expr>)</condition><then><block pos:line="120" pos:column="72">{
	        		<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">occupationCodeAndNameMap</name><op:operator pos:line="121" pos:column="57">.</op:operator><name pos:line="121" pos:column="58">put</name></name><argument_list pos:line="121" pos:column="61">(<argument><expr><call><name><name pos:line="121" pos:column="62">results</name><op:operator pos:line="121" pos:column="69">.</op:operator><name pos:line="121" pos:column="70">getInt</name></name><argument_list pos:line="121" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="77">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="121" pos:column="96">occupation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        }</block></while>
		}</block> <catch pos:line="124" pos:column="19">catch <parameter_list pos:line="124" pos:column="25">(<param><decl><type><name pos:line="124" pos:column="26">SQLException</name></type> <name pos:line="124" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="42">{
	        <while pos:line="125" pos:column="17">while <condition pos:line="125" pos:column="23">(<expr><name pos:line="125" pos:column="24">e</name> <op:operator pos:line="125" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="125" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="126" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="127" pos:column="21">System</name><op:operator pos:line="127" pos:column="27">.</op:operator><name pos:line="127" pos:column="28">err</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">println</name></name><argument_list pos:line="127" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="128" pos:column="21">System</name><op:operator pos:line="128" pos:column="27">.</op:operator><name pos:line="128" pos:column="28">err</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">println</name></name><argument_list pos:line="128" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="128" pos:column="57">+</op:operator> <call><name><name pos:line="128" pos:column="59">e</name><op:operator pos:line="128" pos:column="60">.</op:operator><name pos:line="128" pos:column="61">getSQLState</name></name><argument_list pos:line="128" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="129" pos:column="21">System</name><op:operator pos:line="129" pos:column="27">.</op:operator><name pos:line="129" pos:column="28">err</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">println</name></name><argument_list pos:line="129" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="129" pos:column="57">+</op:operator> <call><name><name pos:line="129" pos:column="59">e</name><op:operator pos:line="129" pos:column="60">.</op:operator><name pos:line="129" pos:column="61">getErrorCode</name></name><argument_list pos:line="129" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="130" pos:column="21">System</name><op:operator pos:line="130" pos:column="27">.</op:operator><name pos:line="130" pos:column="28">err</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">println</name></name><argument_list pos:line="130" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="130" pos:column="57">+</op:operator> <call><name><name pos:line="130" pos:column="59">e</name><op:operator pos:line="130" pos:column="60">.</op:operator><name pos:line="130" pos:column="61">getMessage</name></name><argument_list pos:line="130" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="131" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="132" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="133" pos:column="21">e</name> <op:operator pos:line="133" pos:column="23">=</op:operator> <call><name><name pos:line="133" pos:column="25">e</name><op:operator pos:line="133" pos:column="26">.</op:operator><name pos:line="133" pos:column="27">getNextException</name></name><argument_list pos:line="133" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>	
		
		<return pos:line="137" pos:column="17">return <expr><name pos:line="137" pos:column="24">occupationCodeAndNameMap</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="140" pos:column="9">/**
	 * Returns a list with all the industry codes contained in the database.
	 * &lt;p&gt;
	 * @return				An ArrayList&lt;Integer&gt; of all industry codes.
	 */</comment>
	<function><type><annotation pos:line="145" pos:column="9">@<name pos:line="145" pos:column="10">TaDaMethod</name><argument_list pos:line="145" pos:column="20">(<argument><expr><name pos:line="145" pos:column="21">variablesToTrack</name> <op:operator pos:line="145" pos:column="38">=</op:operator><block pos:line="145" pos:column="39">{<expr><lit:literal type="string" pos:line="145" pos:column="40">"industryCodeList"</lit:literal></expr>}</block></expr></argument>,
			<argument><expr><name pos:line="146" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="146" pos:column="56">=</op:operator> <block pos:line="146" pos:column="58">{<expr><lit:literal type="string" pos:line="146" pos:column="59">"industry.INDUSTRYCODE"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="147" pos:column="9">public</specifier> <name><name pos:line="147" pos:column="16">ArrayList</name><argument_list pos:line="147" pos:column="25">&lt;<argument><name pos:line="147" pos:column="26">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="35">getIndustryCodeList</name><parameter_list pos:line="147" pos:column="54">()</parameter_list> <block pos:line="147" pos:column="57">{
		<decl_stmt><decl><type><name><name pos:line="148" pos:column="17">ArrayList</name><argument_list pos:line="148" pos:column="26">&lt;<argument><name pos:line="148" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="148" pos:column="36">industryCodeList</name> <init pos:line="148" pos:column="53">= <expr><op:operator pos:line="148" pos:column="55">new</op:operator> <call><name><name pos:line="148" pos:column="59">ArrayList</name><argument_list pos:line="148" pos:column="68">&lt;<argument><name pos:line="148" pos:column="69">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="148" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="149" pos:column="17">try <block pos:line="149" pos:column="21">{
			<expr_stmt><expr><name pos:line="150" pos:column="25">statement</name> <op:operator pos:line="150" pos:column="35">=</op:operator> <call><name><name pos:line="150" pos:column="37">Factory</name><op:operator pos:line="150" pos:column="44">.</op:operator><name pos:line="150" pos:column="45">getConnection</name></name><argument_list pos:line="150" pos:column="58">()</argument_list></call><op:operator pos:line="150" pos:column="60">.</op:operator><call><name pos:line="150" pos:column="61">createStatement</name><argument_list pos:line="150" pos:column="76">()</argument_list></call></expr>;</expr_stmt>  
	        <expr_stmt><expr><name pos:line="151" pos:column="17">results</name> <op:operator pos:line="151" pos:column="25">=</op:operator> <call><name><name pos:line="151" pos:column="27">statement</name><op:operator pos:line="151" pos:column="36">.</op:operator><name pos:line="151" pos:column="37">executeQuery</name></name><argument_list pos:line="151" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="151" pos:column="50">"SELECT DISTINCT INDUSTRYCODE from industry"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="152" pos:column="17">while<condition pos:line="152" pos:column="22">(<expr><call><name><name pos:line="152" pos:column="23">results</name><op:operator pos:line="152" pos:column="30">.</op:operator><name pos:line="152" pos:column="31">next</name></name><argument_list pos:line="152" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="152" pos:column="38">{
	        	<if pos:line="153" pos:column="25">if<condition pos:line="153" pos:column="27">(<expr><call><name><name pos:line="153" pos:column="28">results</name><op:operator pos:line="153" pos:column="35">.</op:operator><name pos:line="153" pos:column="36">getString</name></name><argument_list pos:line="153" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="46">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="62">!=</op:operator> <lit:literal type="null" pos:line="153" pos:column="65">null</lit:literal></expr>)</condition><then><block pos:line="153" pos:column="70">{
	        		<expr_stmt><expr><call><name><name pos:line="154" pos:column="33">industryCodeList</name><op:operator pos:line="154" pos:column="49">.</op:operator><name pos:line="154" pos:column="50">add</name></name><argument_list pos:line="154" pos:column="53">(<argument><expr><call><name><name pos:line="154" pos:column="54">results</name><op:operator pos:line="154" pos:column="61">.</op:operator><name pos:line="154" pos:column="62">getInt</name></name><argument_list pos:line="154" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="69">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        }</block></while>
		}</block> <catch pos:line="157" pos:column="19">catch <parameter_list pos:line="157" pos:column="25">(<param><decl><type><name pos:line="157" pos:column="26">SQLException</name></type> <name pos:line="157" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="42">{
	        <while pos:line="158" pos:column="17">while <condition pos:line="158" pos:column="23">(<expr><name pos:line="158" pos:column="24">e</name> <op:operator pos:line="158" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="158" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="159" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="160" pos:column="21">System</name><op:operator pos:line="160" pos:column="27">.</op:operator><name pos:line="160" pos:column="28">err</name><op:operator pos:line="160" pos:column="31">.</op:operator><name pos:line="160" pos:column="32">println</name></name><argument_list pos:line="160" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="161" pos:column="21">System</name><op:operator pos:line="161" pos:column="27">.</op:operator><name pos:line="161" pos:column="28">err</name><op:operator pos:line="161" pos:column="31">.</op:operator><name pos:line="161" pos:column="32">println</name></name><argument_list pos:line="161" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="161" pos:column="57">+</op:operator> <call><name><name pos:line="161" pos:column="59">e</name><op:operator pos:line="161" pos:column="60">.</op:operator><name pos:line="161" pos:column="61">getSQLState</name></name><argument_list pos:line="161" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="162" pos:column="21">System</name><op:operator pos:line="162" pos:column="27">.</op:operator><name pos:line="162" pos:column="28">err</name><op:operator pos:line="162" pos:column="31">.</op:operator><name pos:line="162" pos:column="32">println</name></name><argument_list pos:line="162" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="162" pos:column="57">+</op:operator> <call><name><name pos:line="162" pos:column="59">e</name><op:operator pos:line="162" pos:column="60">.</op:operator><name pos:line="162" pos:column="61">getErrorCode</name></name><argument_list pos:line="162" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="163" pos:column="21">System</name><op:operator pos:line="163" pos:column="27">.</op:operator><name pos:line="163" pos:column="28">err</name><op:operator pos:line="163" pos:column="31">.</op:operator><name pos:line="163" pos:column="32">println</name></name><argument_list pos:line="163" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="163" pos:column="57">+</op:operator> <call><name><name pos:line="163" pos:column="59">e</name><op:operator pos:line="163" pos:column="60">.</op:operator><name pos:line="163" pos:column="61">getMessage</name></name><argument_list pos:line="163" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="164" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="165" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="166" pos:column="21">e</name> <op:operator pos:line="166" pos:column="23">=</op:operator> <call><name><name pos:line="166" pos:column="25">e</name><op:operator pos:line="166" pos:column="26">.</op:operator><name pos:line="166" pos:column="27">getNextException</name></name><argument_list pos:line="166" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>
		
        <expr_stmt><expr><call><name><name pos:line="170" pos:column="9">Collections</name><op:operator pos:line="170" pos:column="20">.</op:operator><name pos:line="170" pos:column="21">sort</name></name><argument_list pos:line="170" pos:column="25">(<argument><expr><name pos:line="170" pos:column="26">industryCodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="171" pos:column="17">return <expr><name pos:line="171" pos:column="24">industryCodeList</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="174" pos:column="9">/**
	 * Checks if an industry code is contained in the database
	 * &lt;p&gt;
	 * @param 				A integer of an industry code to test
	 * @return				Boolean true / false answer
	 */</comment>
	<function><type><specifier pos:line="180" pos:column="9">public</specifier> <name pos:line="180" pos:column="16">boolean</name></type> <name pos:line="180" pos:column="24">isValidIndustryCode</name><parameter_list pos:line="180" pos:column="43">(<param><decl><type><name pos:line="180" pos:column="44">int</name></type> <name pos:line="180" pos:column="48">code</name></decl></param>)</parameter_list> <block pos:line="180" pos:column="54">{
		<decl_stmt><decl><type><name><name pos:line="181" pos:column="17">ArrayList</name><argument_list pos:line="181" pos:column="26">&lt;<argument><name pos:line="181" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="36">industryCodeList</name> <init pos:line="181" pos:column="53">= <expr><call><name pos:line="181" pos:column="55">getIndustryCodeList</name><argument_list pos:line="181" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="183" pos:column="17">for(<init><decl><type><name pos:line="183" pos:column="21">int</name></type> <name pos:line="183" pos:column="25">i</name><range pos:line="183" pos:column="26">: <expr><name pos:line="183" pos:column="28">industryCodeList</name></expr></range></decl></init>)<block pos:line="183" pos:column="45">{
			<if pos:line="184" pos:column="25">if <condition pos:line="184" pos:column="28">(<expr><name pos:line="184" pos:column="29">i</name> <op:operator pos:line="184" pos:column="31">==</op:operator> <name pos:line="184" pos:column="34">code</name></expr>)</condition><then><block pos:line="184" pos:column="39">{
				<return pos:line="185" pos:column="33">return <expr><lit:literal type="boolean" pos:line="185" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="188" pos:column="17">return <expr><lit:literal type="boolean" pos:line="188" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>	
	
	<comment type="block" format="javadoc" pos:line="191" pos:column="9">/**
	 * Returns a hash map matching the industry codes with their string descriptions
	 * &lt;p&gt;
	 * @return				A hashMap &lt;Integer, String&gt; of industry codes and their
	 * 							associated string descriptions.
	 */</comment>
	<function><type><annotation pos:line="197" pos:column="9">@<name pos:line="197" pos:column="10">TaDaMethod</name><argument_list pos:line="197" pos:column="20">(<argument><expr><name pos:line="197" pos:column="21">variablesToTrack</name> <op:operator pos:line="197" pos:column="38">=</op:operator><block pos:line="197" pos:column="39">{<expr><lit:literal type="string" pos:line="197" pos:column="40">"IndustryCodeAndNameMap"</lit:literal></expr><op:operator pos:line="197" pos:column="64">,</op:operator> <argument><expr><lit:literal type="string" pos:line="197" pos:column="66">"industry"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="198" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="198" pos:column="56">=</op:operator> <block pos:line="198" pos:column="58">{<expr><lit:literal type="string" pos:line="198" pos:column="59">"industry.INDUSTRYCODE"</lit:literal></expr><op:operator pos:line="198" pos:column="82">,</op:operator> <argument><expr><lit:literal type="string" pos:line="198" pos:column="84">"industry.industry"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="199" pos:column="9">public</specifier> <name><name pos:line="199" pos:column="16">HashMap</name><argument_list pos:line="199" pos:column="23">&lt;<argument><name pos:line="199" pos:column="24">Integer</name></argument>, <argument><name pos:line="199" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="41">getIndustryCodeAndNameMap</name><parameter_list pos:line="199" pos:column="66">()</parameter_list> <block pos:line="199" pos:column="69">{
		<decl_stmt><decl><type><name><name pos:line="200" pos:column="17">HashMap</name><argument_list pos:line="200" pos:column="24">&lt;<argument><name pos:line="200" pos:column="25">Integer</name></argument>, <argument><name pos:line="200" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="42">IndustryCodeAndNameMap</name> <init pos:line="200" pos:column="65">= <expr><op:operator pos:line="200" pos:column="67">new</op:operator> <call><name><name pos:line="200" pos:column="71">HashMap</name><argument_list pos:line="200" pos:column="78">&lt;<argument><name pos:line="200" pos:column="79">Integer</name></argument>, <argument><name pos:line="200" pos:column="88">String</name></argument>&gt;</argument_list></name><argument_list pos:line="200" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="202" pos:column="17">try <block pos:line="202" pos:column="21">{
			<expr_stmt><expr><name pos:line="203" pos:column="25">statement</name> <op:operator pos:line="203" pos:column="35">=</op:operator> <call><name><name pos:line="203" pos:column="37">Factory</name><op:operator pos:line="203" pos:column="44">.</op:operator><name pos:line="203" pos:column="45">getConnection</name></name><argument_list pos:line="203" pos:column="58">()</argument_list></call><op:operator pos:line="203" pos:column="60">.</op:operator><call><name pos:line="203" pos:column="61">createStatement</name><argument_list pos:line="203" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="204" pos:column="17">results</name> <op:operator pos:line="204" pos:column="25">=</op:operator> <call><name><name pos:line="204" pos:column="27">statement</name><op:operator pos:line="204" pos:column="36">.</op:operator><name pos:line="204" pos:column="37">executeQuery</name></name><argument_list pos:line="204" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="50">"SELECT INDUSTRYCODE, INDUSTRY from industry"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	        <while pos:line="205" pos:column="17">while<condition pos:line="205" pos:column="22">(<expr><call><name><name pos:line="205" pos:column="23">results</name><op:operator pos:line="205" pos:column="30">.</op:operator><name pos:line="205" pos:column="31">next</name></name><argument_list pos:line="205" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="205" pos:column="38">{
	        	<if pos:line="206" pos:column="25">if<condition pos:line="206" pos:column="27">(<expr><call><name><name pos:line="206" pos:column="28">results</name><op:operator pos:line="206" pos:column="35">.</op:operator><name pos:line="206" pos:column="36">getString</name></name><argument_list pos:line="206" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="46">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="206" pos:column="62">==</op:operator> <lit:literal type="null" pos:line="206" pos:column="65">null</lit:literal></expr>)</condition><then><block pos:line="206" pos:column="70">{
	        		<continue pos:line="207" pos:column="33">continue;</continue>
	        	}</block></then></if>
	        	
	        	<decl_stmt><decl><type><name pos:line="210" pos:column="25">String</name></type> <name pos:line="210" pos:column="32">industry</name> <init pos:line="210" pos:column="41">= <expr><call><name><name pos:line="210" pos:column="43">results</name><op:operator pos:line="210" pos:column="50">.</op:operator><name pos:line="210" pos:column="51">getString</name></name><argument_list pos:line="210" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="61">"INDUSTRY"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<if pos:line="211" pos:column="25">if<condition pos:line="211" pos:column="27">(<expr><name pos:line="211" pos:column="28">industry</name> <op:operator pos:line="211" pos:column="37">==</op:operator> <lit:literal type="null" pos:line="211" pos:column="40">null</lit:literal></expr>)</condition><then><block pos:line="211" pos:column="45">{
	        		<expr_stmt><expr><name pos:line="212" pos:column="33">industry</name> <op:operator pos:line="212" pos:column="42">=</op:operator> <lit:literal type="string" pos:line="212" pos:column="44">"None Entered"</lit:literal></expr>;</expr_stmt>
	        	}</block></then> <else pos:line="213" pos:column="27">else <block pos:line="213" pos:column="32">{
	        		<expr_stmt><expr><name pos:line="214" pos:column="33">industry</name> <op:operator pos:line="214" pos:column="42">=</op:operator> <call><name><name pos:line="214" pos:column="44">industry</name><op:operator pos:line="214" pos:column="52">.</op:operator><name pos:line="214" pos:column="53">trim</name></name><argument_list pos:line="214" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
	        	}</block></else></if>
	        	
	        	<if pos:line="217" pos:column="25">if<condition pos:line="217" pos:column="27">(<expr><call><name><name pos:line="217" pos:column="28">results</name><op:operator pos:line="217" pos:column="35">.</op:operator><name pos:line="217" pos:column="36">getString</name></name><argument_list pos:line="217" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="46">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="217" pos:column="62">!=</op:operator> <lit:literal type="null" pos:line="217" pos:column="65">null</lit:literal></expr>)</condition><then><block pos:line="217" pos:column="70">{
	        		<expr_stmt><expr><call><name><name pos:line="218" pos:column="33">IndustryCodeAndNameMap</name><op:operator pos:line="218" pos:column="55">.</op:operator><name pos:line="218" pos:column="56">put</name></name><argument_list pos:line="218" pos:column="59">(<argument><expr><call><name><name pos:line="218" pos:column="60">results</name><op:operator pos:line="218" pos:column="67">.</op:operator><name pos:line="218" pos:column="68">getInt</name></name><argument_list pos:line="218" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="218" pos:column="75">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="218" pos:column="92">industry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        }</block></while>
		}</block> <catch pos:line="221" pos:column="19">catch <parameter_list pos:line="221" pos:column="25">(<param><decl><type><name pos:line="221" pos:column="26">SQLException</name></type> <name pos:line="221" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="221" pos:column="42">{
	        <while pos:line="222" pos:column="17">while <condition pos:line="222" pos:column="23">(<expr><name pos:line="222" pos:column="24">e</name> <op:operator pos:line="222" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="222" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="223" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="224" pos:column="21">System</name><op:operator pos:line="224" pos:column="27">.</op:operator><name pos:line="224" pos:column="28">err</name><op:operator pos:line="224" pos:column="31">.</op:operator><name pos:line="224" pos:column="32">println</name></name><argument_list pos:line="224" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="225" pos:column="21">System</name><op:operator pos:line="225" pos:column="27">.</op:operator><name pos:line="225" pos:column="28">err</name><op:operator pos:line="225" pos:column="31">.</op:operator><name pos:line="225" pos:column="32">println</name></name><argument_list pos:line="225" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="225" pos:column="57">+</op:operator> <call><name><name pos:line="225" pos:column="59">e</name><op:operator pos:line="225" pos:column="60">.</op:operator><name pos:line="225" pos:column="61">getSQLState</name></name><argument_list pos:line="225" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="226" pos:column="21">System</name><op:operator pos:line="226" pos:column="27">.</op:operator><name pos:line="226" pos:column="28">err</name><op:operator pos:line="226" pos:column="31">.</op:operator><name pos:line="226" pos:column="32">println</name></name><argument_list pos:line="226" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="226" pos:column="57">+</op:operator> <call><name><name pos:line="226" pos:column="59">e</name><op:operator pos:line="226" pos:column="60">.</op:operator><name pos:line="226" pos:column="61">getErrorCode</name></name><argument_list pos:line="226" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="227" pos:column="21">System</name><op:operator pos:line="227" pos:column="27">.</op:operator><name pos:line="227" pos:column="28">err</name><op:operator pos:line="227" pos:column="31">.</op:operator><name pos:line="227" pos:column="32">println</name></name><argument_list pos:line="227" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="227" pos:column="57">+</op:operator> <call><name><name pos:line="227" pos:column="59">e</name><op:operator pos:line="227" pos:column="60">.</op:operator><name pos:line="227" pos:column="61">getMessage</name></name><argument_list pos:line="227" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="228" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="229" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="230" pos:column="21">e</name> <op:operator pos:line="230" pos:column="23">=</op:operator> <call><name><name pos:line="230" pos:column="25">e</name><op:operator pos:line="230" pos:column="26">.</op:operator><name pos:line="230" pos:column="27">getNextException</name></name><argument_list pos:line="230" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>	
		
		<return pos:line="234" pos:column="17">return <expr><name pos:line="234" pos:column="24">IndustryCodeAndNameMap</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="237" pos:column="9">/**
	 * Calculates average income for a given occupation code.
	 * &lt;p&gt;
	 * @param 				An integer of an occupation level to request
	 * 						Warning: This method does not check if the 
	 * 							occupation integer submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the integer is contained
	 * 							in the db use the method :
	 * 							isValidOccupationCode(int)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="251" pos:column="9">public</specifier> <name pos:line="251" pos:column="16">double</name></type> <name pos:line="251" pos:column="23">calculateIncomeByOccupationCode</name><parameter_list pos:line="251" pos:column="54">(<param><decl><type><name pos:line="251" pos:column="55">int</name></type> <name pos:line="251" pos:column="59">code</name></decl></param>)</parameter_list><block pos:line="251" pos:column="64">{
		<return pos:line="252" pos:column="17">return <expr><call><name pos:line="252" pos:column="24">calculateResult</name><argument_list pos:line="252" pos:column="39">(<argument><expr><name pos:line="252" pos:column="40">code</name></expr></argument>, <argument><expr><call><name><name pos:line="252" pos:column="46">Factory</name><op:operator pos:line="252" pos:column="53">.</op:operator><name pos:line="252" pos:column="54">getYearlyImplWithDescription</name></name><argument_list pos:line="252" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="83">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="255" pos:column="9">/**
	 * Calculates average income for a given industry code
	 * &lt;p&gt;
	 * @param 				An integer of an industry code to request
	 * 						Warning: This method does not check if the 
	 * 							industry integer submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the integer is contained
	 * 							in the db use the method :
	 * 							isValidIndustryCode(int)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="268" pos:column="9">public</specifier> <name pos:line="268" pos:column="16">double</name></type> <name pos:line="268" pos:column="23">calculateIncomeByIndustryCode</name><parameter_list pos:line="268" pos:column="52">(<param><decl><type><name pos:line="268" pos:column="53">int</name></type> <name pos:line="268" pos:column="57">code</name></decl></param>)</parameter_list> <block pos:line="268" pos:column="63">{
		<return pos:line="269" pos:column="17">return <expr><call><name pos:line="269" pos:column="24">calculateResult</name><argument_list pos:line="269" pos:column="39">(<argument><expr><name pos:line="269" pos:column="40">code</name></expr></argument>, <argument><expr><call><name><name pos:line="269" pos:column="46">Factory</name><op:operator pos:line="269" pos:column="53">.</op:operator><name pos:line="269" pos:column="54">getYearlyImplWithDescription</name></name><argument_list pos:line="269" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="83">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="272" pos:column="9">/**
	 * Calculates weekly wage for a given occupation code.
	 * &lt;p&gt;
	 * @param 				An integer of an occupation level to request
	 * 						Warning: This method does not check if the 
	 * 							occupation integer submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the integer is contained
	 * 							in the db use the method :
	 * 							isValidOccupationCode(int)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="286" pos:column="9">public</specifier> <name pos:line="286" pos:column="16">double</name></type> <name pos:line="286" pos:column="23">calculateWeeklyWageByOccupationCode</name><parameter_list pos:line="286" pos:column="58">(<param><decl><type><name pos:line="286" pos:column="59">int</name></type> <name pos:line="286" pos:column="63">code</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="69">{
		<return pos:line="287" pos:column="17">return <expr><call><name pos:line="287" pos:column="24">calculateResult</name><argument_list pos:line="287" pos:column="39">(<argument><expr><name pos:line="287" pos:column="40">code</name></expr></argument>, <argument><expr><call><name><name pos:line="287" pos:column="46">Factory</name><op:operator pos:line="287" pos:column="53">.</op:operator><name pos:line="287" pos:column="54">getWeeklyImplWithDescription</name></name><argument_list pos:line="287" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="83">"OCCUPATIONCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="290" pos:column="9">/**
	 * Calculates average weekly wage for a given industry code
	 * &lt;p&gt;
	 * @param 				An integer of an industry code to request
	 * 						Warning: This method does not check if the 
	 * 							industry integer submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the integer is contained
	 * 							in the db use the method :
	 * 							isValidIndustryCode(int)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="303" pos:column="9">public</specifier> <name pos:line="303" pos:column="16">double</name></type> <name pos:line="303" pos:column="23">calculateWeeklyWageByIndustryCode</name><parameter_list pos:line="303" pos:column="56">(<param><decl><type><name pos:line="303" pos:column="57">int</name></type> <name pos:line="303" pos:column="61">code</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="67">{
		<return pos:line="304" pos:column="17">return <expr><call><name pos:line="304" pos:column="24">calculateResult</name><argument_list pos:line="304" pos:column="39">(<argument><expr><name pos:line="304" pos:column="40">code</name></expr></argument>, <argument><expr><call><name><name pos:line="304" pos:column="46">Factory</name><op:operator pos:line="304" pos:column="53">.</op:operator><name pos:line="304" pos:column="54">getWeeklyImplWithDescription</name></name><argument_list pos:line="304" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="83">"INDUSTRYCODE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><type><annotation pos:line="307" pos:column="9">@<name pos:line="307" pos:column="10">TaDaMethod</name><argument_list pos:line="307" pos:column="20">(<argument><expr><name pos:line="307" pos:column="21">variablesToTrack</name> <op:operator pos:line="307" pos:column="38">=</op:operator><block pos:line="307" pos:column="39">{<expr><lit:literal type="string" pos:line="307" pos:column="40">"type"</lit:literal></expr><op:operator pos:line="307" pos:column="46">,</op:operator> <argument><expr><lit:literal type="string" pos:line="307" pos:column="48">"type"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="308" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="308" pos:column="56">=</op:operator> <block pos:line="308" pos:column="58">{<expr><lit:literal type="string" pos:line="308" pos:column="59">"job.WEEKWAGE"</lit:literal></expr><op:operator pos:line="308" pos:column="73">,</op:operator> <argument><expr><lit:literal type="string" pos:line="308" pos:column="75">"job.WORKWEEKS"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="309" pos:column="9">private</specifier> <name pos:line="309" pos:column="17">double</name></type> <name pos:line="309" pos:column="24">calculateResult</name><parameter_list pos:line="309" pos:column="39">(<param><decl><type><name pos:line="309" pos:column="40">int</name></type> <name pos:line="309" pos:column="44">code</name></decl></param>, <param><decl><type><name pos:line="309" pos:column="50">CalcImplWithDescriptionInterface</name></type> <name pos:line="309" pos:column="83">type</name></decl></param>)</parameter_list> <block pos:line="309" pos:column="89">{
		<decl_stmt><decl><type><name><name pos:line="310" pos:column="17">ArrayList</name><argument_list pos:line="310" pos:column="26">&lt;<argument><name pos:line="310" pos:column="27">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="310" pos:column="59">dataAL</name> <init pos:line="310" pos:column="66">= <expr><op:operator pos:line="310" pos:column="68">new</op:operator> <call><name><name pos:line="310" pos:column="72">ArrayList</name><argument_list pos:line="310" pos:column="81">&lt;<argument><name pos:line="310" pos:column="82">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name><argument_list pos:line="310" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="311" pos:column="17">double</name></type> <name pos:line="311" pos:column="24">sum</name> <init pos:line="311" pos:column="28">= <expr><lit:literal type="number" pos:line="311" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="312" pos:column="9">double</name></type> <name pos:line="312" pos:column="16">count</name> <init pos:line="312" pos:column="22">= <expr><lit:literal type="number" pos:line="312" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="313" pos:column="9">double</name></type> <name pos:line="313" pos:column="16">returnValue</name> <init pos:line="313" pos:column="28">= <expr><lit:literal type="number" pos:line="313" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="314" pos:column="17">try <block pos:line="314" pos:column="21">{
			<expr_stmt><expr><name pos:line="315" pos:column="25">statement</name> <op:operator pos:line="315" pos:column="35">=</op:operator> <call><name><name pos:line="315" pos:column="37">Factory</name><op:operator pos:line="315" pos:column="44">.</op:operator><name pos:line="315" pos:column="45">getConnection</name></name><argument_list pos:line="315" pos:column="58">()</argument_list></call><op:operator pos:line="315" pos:column="60">.</op:operator><call><name pos:line="315" pos:column="61">createStatement</name><argument_list pos:line="315" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="316" pos:column="17">results</name> <op:operator pos:line="316" pos:column="25">=</op:operator> <call><name><name pos:line="316" pos:column="27">statement</name><op:operator pos:line="316" pos:column="36">.</op:operator><name pos:line="316" pos:column="37">executeQuery</name></name><argument_list pos:line="316" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="50">"SELECT "</lit:literal> <op:operator pos:line="316" pos:column="60">+</op:operator> <call><name><name pos:line="316" pos:column="62">type</name><op:operator pos:line="316" pos:column="66">.</op:operator><name pos:line="316" pos:column="67">getDescription</name></name><argument_list pos:line="316" pos:column="81">()</argument_list></call> <op:operator pos:line="316" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="316" pos:column="86">", WEEKWAGE, WORKWEEKS from job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="317" pos:column="13">while<condition pos:line="317" pos:column="18">(<expr><call><name><name pos:line="317" pos:column="19">results</name><op:operator pos:line="317" pos:column="26">.</op:operator><name pos:line="317" pos:column="27">next</name></name><argument_list pos:line="317" pos:column="31">()</argument_list></call></expr>)</condition><block pos:line="317" pos:column="34">{
            	<expr_stmt><expr><call><name><name pos:line="318" pos:column="17">type</name><op:operator pos:line="318" pos:column="21">.</op:operator><name pos:line="318" pos:column="22">addToArrayList</name></name><argument_list pos:line="318" pos:column="36">(<argument><expr><name pos:line="318" pos:column="37">dataAL</name></expr></argument>, <argument><expr><call><name><name pos:line="318" pos:column="45">results</name><op:operator pos:line="318" pos:column="52">.</op:operator><name pos:line="318" pos:column="53">getString</name></name><argument_list pos:line="318" pos:column="62">(<argument><expr><call><name><name pos:line="318" pos:column="63">type</name><op:operator pos:line="318" pos:column="67">.</op:operator><name pos:line="318" pos:column="68">getDescription</name></name><argument_list pos:line="318" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="318" pos:column="87">results</name><op:operator pos:line="318" pos:column="94">.</op:operator><name pos:line="318" pos:column="95">getInt</name></name><argument_list pos:line="318" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="102">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="318" pos:column="115">results</name><op:operator pos:line="318" pos:column="122">.</op:operator><name pos:line="318" pos:column="123">getInt</name></name><argument_list pos:line="318" pos:column="129">(<argument><expr><lit:literal type="string" pos:line="318" pos:column="130">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
	        <expr_stmt><expr><call><name><name pos:line="320" pos:column="17">statement</name><op:operator pos:line="320" pos:column="26">.</op:operator><name pos:line="320" pos:column="27">close</name></name><argument_list pos:line="320" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="321" pos:column="19">catch <parameter_list pos:line="321" pos:column="25">(<param><decl><type><name pos:line="321" pos:column="26">SQLException</name></type> <name pos:line="321" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="42">{
	        <while pos:line="322" pos:column="17">while <condition pos:line="322" pos:column="23">(<expr><name pos:line="322" pos:column="24">e</name> <op:operator pos:line="322" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="322" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="323" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="324" pos:column="21">System</name><op:operator pos:line="324" pos:column="27">.</op:operator><name pos:line="324" pos:column="28">err</name><op:operator pos:line="324" pos:column="31">.</op:operator><name pos:line="324" pos:column="32">println</name></name><argument_list pos:line="324" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="325" pos:column="21">System</name><op:operator pos:line="325" pos:column="27">.</op:operator><name pos:line="325" pos:column="28">err</name><op:operator pos:line="325" pos:column="31">.</op:operator><name pos:line="325" pos:column="32">println</name></name><argument_list pos:line="325" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="325" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="325" pos:column="57">+</op:operator> <call><name><name pos:line="325" pos:column="59">e</name><op:operator pos:line="325" pos:column="60">.</op:operator><name pos:line="325" pos:column="61">getSQLState</name></name><argument_list pos:line="325" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="326" pos:column="21">System</name><op:operator pos:line="326" pos:column="27">.</op:operator><name pos:line="326" pos:column="28">err</name><op:operator pos:line="326" pos:column="31">.</op:operator><name pos:line="326" pos:column="32">println</name></name><argument_list pos:line="326" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="326" pos:column="57">+</op:operator> <call><name><name pos:line="326" pos:column="59">e</name><op:operator pos:line="326" pos:column="60">.</op:operator><name pos:line="326" pos:column="61">getErrorCode</name></name><argument_list pos:line="326" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="327" pos:column="21">System</name><op:operator pos:line="327" pos:column="27">.</op:operator><name pos:line="327" pos:column="28">err</name><op:operator pos:line="327" pos:column="31">.</op:operator><name pos:line="327" pos:column="32">println</name></name><argument_list pos:line="327" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="327" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="327" pos:column="57">+</op:operator> <call><name><name pos:line="327" pos:column="59">e</name><op:operator pos:line="327" pos:column="60">.</op:operator><name pos:line="327" pos:column="61">getMessage</name></name><argument_list pos:line="327" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="328" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="329" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="330" pos:column="21">e</name> <op:operator pos:line="330" pos:column="23">=</op:operator> <call><name><name pos:line="330" pos:column="25">e</name><op:operator pos:line="330" pos:column="26">.</op:operator><name pos:line="330" pos:column="27">getNextException</name></name><argument_list pos:line="330" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>
		
		<for pos:line="334" pos:column="17">for(<init><decl><type><name pos:line="334" pos:column="21">TypeWageDataStructureInterface</name></type> <name pos:line="334" pos:column="52">i</name> <range pos:line="334" pos:column="54">: <expr><name pos:line="334" pos:column="56">dataAL</name></expr></range></decl></init>)<block pos:line="334" pos:column="63">{
    		<decl_stmt><decl><type><name pos:line="335" pos:column="17">double</name></type> <name pos:line="335" pos:column="24">result</name> <init pos:line="335" pos:column="31">= <expr><call><name><name pos:line="335" pos:column="33">type</name><op:operator pos:line="335" pos:column="37">.</op:operator><name pos:line="335" pos:column="38">calculateAverage</name></name><argument_list pos:line="335" pos:column="54">(<argument><expr><call><name><name pos:line="335" pos:column="55">Integer</name><op:operator pos:line="335" pos:column="62">.</op:operator><name pos:line="335" pos:column="63">toString</name></name><argument_list pos:line="335" pos:column="71">(<argument><expr><name pos:line="335" pos:column="72">code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="335" pos:column="79">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="336" pos:column="25">if<condition pos:line="336" pos:column="27">(<expr><name pos:line="336" pos:column="28">result</name> <op:operator pos:line="336" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="336" pos:column="37">0</lit:literal></expr>)</condition><then><block pos:line="336" pos:column="39">{
				<expr_stmt><expr><name pos:line="337" pos:column="33">sum</name> <op:operator pos:line="337" pos:column="37">=</op:operator> <name pos:line="337" pos:column="39">sum</name> <op:operator pos:line="337" pos:column="43">+</op:operator> <name pos:line="337" pos:column="45">result</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="338" pos:column="33">count</name><op:operator pos:line="338" pos:column="38">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		
        <if pos:line="342" pos:column="9">if <condition pos:line="342" pos:column="12">(<expr><name pos:line="342" pos:column="13">count</name> <op:operator pos:line="342" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="342" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="342" pos:column="24"> <block pos:line="342" pos:column="25">{
        	<expr_stmt><expr><name pos:line="343" pos:column="17">returnValue</name> <op:operator pos:line="343" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="343" pos:column="31">0</lit:literal></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="345" pos:column="9">else <block pos:line="345" pos:column="14">{
        	<expr_stmt><expr><name pos:line="346" pos:column="17">returnValue</name> <op:operator pos:line="346" pos:column="29">=</op:operator> <name pos:line="346" pos:column="31">sum</name> <op:operator pos:line="346" pos:column="35">/</op:operator> <name pos:line="346" pos:column="37">count</name></expr>;</expr_stmt>
        }</block></else></if>

        <return pos:line="349" pos:column="9">return <expr><call><name><name pos:line="349" pos:column="16">Factory</name><op:operator pos:line="349" pos:column="23">.</op:operator><name pos:line="349" pos:column="24">getRoundMethod</name></name><argument_list pos:line="349" pos:column="38">(<argument><expr><name pos:line="349" pos:column="39">returnValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>
