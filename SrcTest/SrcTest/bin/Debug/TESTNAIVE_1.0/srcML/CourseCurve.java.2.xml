<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\CourseCurve.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="line" pos:line="4" pos:column="1">//import java.lang.annotation.ElementType;</comment>
<comment type="line" pos:line="5" pos:column="1">//import java.lang.annotation.Retention;</comment>
<comment type="line" pos:line="6" pos:column="1">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line" pos:line="7" pos:column="1">//import java.lang.annotation.Target;</comment>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Connection</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">sql</name><op:operator pos:line="11" pos:column="16">.</op:operator><name pos:line="11" pos:column="17">SQLException</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Collections</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">java</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">util</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">Comparator</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">java</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">util</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">HashMap</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">java</name><op:operator pos:line="15" pos:column="12">.</op:operator><name pos:line="15" pos:column="13">util</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">Iterator</name></name>;</import>
<import pos:line="16" pos:column="1">import <name><name pos:line="16" pos:column="8">java</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">util</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="17" pos:column="1">import <name><name pos:line="17" pos:column="8">java</name><op:operator pos:line="17" pos:column="12">.</op:operator><name pos:line="17" pos:column="13">util</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">List</name></name>;</import>
<import pos:line="18" pos:column="1">import <name><name pos:line="18" pos:column="8">java</name><op:operator pos:line="18" pos:column="12">.</op:operator><name pos:line="18" pos:column="13">util</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">LinkedHashMap</name></name>;</import>
<import pos:line="19" pos:column="1">import <name><name pos:line="19" pos:column="8">java</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">util</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">LinkedList</name></name>;</import>
<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">java</name><op:operator pos:line="20" pos:column="12">.</op:operator><name pos:line="20" pos:column="13">util</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">List</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">util</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">Set</name></name>;</import>
<import pos:line="22" pos:column="1">import <name><name pos:line="22" pos:column="8">java</name><op:operator pos:line="22" pos:column="12">.</op:operator><name pos:line="22" pos:column="13">util</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Map</name><op:operator pos:line="22" pos:column="21">.</op:operator><name pos:line="22" pos:column="22">Entry</name></name>;</import>


<class><specifier pos:line="25" pos:column="1">public</specifier> class <name pos:line="25" pos:column="14">CourseCurve</name> <block pos:line="25" pos:column="26">{

	<decl_stmt><decl><type><name pos:line="27" pos:column="9">int</name></type> <name pos:line="27" pos:column="13">offerID</name></decl>;</decl_stmt> <comment type="line" pos:line="27" pos:column="22">// CourseOffered offerID</comment>
	<decl_stmt><decl><type><name><name pos:line="28" pos:column="9">List</name><argument_list pos:line="28" pos:column="13">&lt;<argument><name pos:line="28" pos:column="14">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="23">curvingCriteria</name></decl>;</decl_stmt> <comment type="line" pos:line="28" pos:column="40">// &lt;10,20,10&gt;</comment>
	<decl_stmt><decl><type><name><name pos:line="29" pos:column="9">HashMap</name><argument_list pos:line="29" pos:column="16">&lt;<argument><name pos:line="29" pos:column="17">Student</name></argument>,<argument><name pos:line="29" pos:column="25">String</name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="33">courseCurve</name></decl>;</decl_stmt> <comment type="line" pos:line="29" pos:column="46">// &lt;Student,Grade&gt;</comment>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">CourseOffered</name></type> <name pos:line="30" pos:column="23">courseoffered</name></decl>;</decl_stmt>
	
<comment type="line" pos:line="32" pos:column="1">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line" pos:line="33" pos:column="1">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line" pos:line="34" pos:column="1">//	public @interface DBAnnotation {</comment>
<comment type="line" pos:line="35" pos:column="1">//	 String variable () default "";</comment>
<comment type="line" pos:line="36" pos:column="1">//	 String table () default "";</comment>
<comment type="line" pos:line="37" pos:column="1">//	 String column () default "";</comment>
<comment type="line" pos:line="38" pos:column="1">//	 boolean isSource () default false; </comment>
<comment type="line" pos:line="39" pos:column="1">//	}</comment>
	
	<comment type="line" pos:line="41" pos:column="9">// Constructor. Takes offerID and curvingCriteria to create CourseCurve</comment>
	<comment type="line" pos:line="42" pos:column="9">// object used to calculate curve</comment>
	<constructor><specifier pos:line="43" pos:column="9">public</specifier> <name pos:line="43" pos:column="16">CourseCurve</name><parameter_list pos:line="43" pos:column="27">(<param><decl><type><name pos:line="43" pos:column="28">int</name></type> <name pos:line="43" pos:column="32">offerID</name></decl></param>, <param><decl><type><name><name pos:line="43" pos:column="41">List</name><argument_list pos:line="43" pos:column="45">&lt;<argument><name pos:line="43" pos:column="46">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="55">curvingCriteria</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="72">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">super</name><argument_list pos:line="44" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">this</name><op:operator pos:line="45" pos:column="21">.</op:operator><name pos:line="45" pos:column="22">offerID</name></name> <op:operator pos:line="45" pos:column="30">=</op:operator> <name pos:line="45" pos:column="32">offerID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">this</name><op:operator pos:line="46" pos:column="21">.</op:operator><name pos:line="46" pos:column="22">curvingCriteria</name></name> <op:operator pos:line="46" pos:column="38">=</op:operator> <name pos:line="46" pos:column="40">curvingCriteria</name></expr>;</expr_stmt>
		<try pos:line="47" pos:column="17">try <block pos:line="47" pos:column="21">{
			<expr_stmt><expr><name><name pos:line="48" pos:column="25">this</name><op:operator pos:line="48" pos:column="29">.</op:operator><name pos:line="48" pos:column="30">courseoffered</name></name> <op:operator pos:line="48" pos:column="44">=</op:operator> <op:operator pos:line="48" pos:column="46">new</op:operator> <call><name pos:line="48" pos:column="50">CourseOffered</name><argument_list pos:line="48" pos:column="63">(<argument><expr><name><name pos:line="48" pos:column="64">this</name><op:operator pos:line="48" pos:column="68">.</op:operator><name pos:line="48" pos:column="69">offerID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="49" pos:column="19">catch <parameter_list pos:line="49" pos:column="25">(<param><decl><type><name><name pos:line="49" pos:column="26">Course</name><op:operator pos:line="49" pos:column="32">.</op:operator><name pos:line="49" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="49" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="64">{
			<comment type="line" pos:line="50" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">e</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">printStackTrace</name></name><argument_list pos:line="51" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="52" pos:column="19">catch <parameter_list pos:line="52" pos:column="25">(<param><decl><type><name><name pos:line="52" pos:column="26">CourseOffered</name><op:operator pos:line="52" pos:column="39">.</op:operator><name pos:line="52" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="52" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="79">{
			<comment type="line" pos:line="53" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">e</name><op:operator pos:line="54" pos:column="26">.</op:operator><name pos:line="54" pos:column="27">printStackTrace</name></name><argument_list pos:line="54" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></constructor>
	
	<function><type><specifier pos:line="58" pos:column="9">public</specifier> <name pos:line="58" pos:column="16">int</name></type> <name pos:line="58" pos:column="20">getOfferID</name><parameter_list pos:line="58" pos:column="30">()</parameter_list> <block pos:line="58" pos:column="33">{
		<return pos:line="59" pos:column="17">return <expr><name pos:line="59" pos:column="24">offerID</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">setOfferID</name><parameter_list pos:line="62" pos:column="31">(<param><decl><type><name pos:line="62" pos:column="32">int</name></type> <name pos:line="62" pos:column="36">offerID</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">this</name><op:operator pos:line="63" pos:column="21">.</op:operator><name pos:line="63" pos:column="22">offerID</name></name> <op:operator pos:line="63" pos:column="30">=</op:operator> <name pos:line="63" pos:column="32">offerID</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="66" pos:column="9">public</specifier> <name><name pos:line="66" pos:column="16">List</name><argument_list pos:line="66" pos:column="20">&lt;<argument><name pos:line="66" pos:column="21">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="30">getCurvingCriteria</name><parameter_list pos:line="66" pos:column="48">()</parameter_list> <block pos:line="66" pos:column="51">{
		<return pos:line="67" pos:column="17">return <expr><name pos:line="67" pos:column="24">curvingCriteria</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">setCurvingCriteria</name><parameter_list pos:line="70" pos:column="39">(<param><decl><type><name><name pos:line="70" pos:column="40">List</name><argument_list pos:line="70" pos:column="44">&lt;<argument><name pos:line="70" pos:column="45">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="54">curvingCriteria</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="71">{
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">this</name><op:operator pos:line="71" pos:column="21">.</op:operator><name pos:line="71" pos:column="22">curvingCriteria</name></name> <op:operator pos:line="71" pos:column="38">=</op:operator> <name pos:line="71" pos:column="40">curvingCriteria</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="74" pos:column="9">public</specifier> <name><name pos:line="74" pos:column="16">HashMap</name><argument_list pos:line="74" pos:column="23">&lt;<argument><name pos:line="74" pos:column="24">Student</name></argument>, <argument><name pos:line="74" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="74" pos:column="41">getCourseCurve</name><parameter_list pos:line="74" pos:column="55">()</parameter_list> <block pos:line="74" pos:column="58">{
		<return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">courseCurve</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">setCourseCurve</name><parameter_list pos:line="78" pos:column="35">(<param><decl><type><name><name pos:line="78" pos:column="36">HashMap</name><argument_list pos:line="78" pos:column="43">&lt;<argument><name pos:line="78" pos:column="44">Student</name></argument>, <argument><name pos:line="78" pos:column="53">String</name></argument>&gt;</argument_list></name></type> <name pos:line="78" pos:column="61">courseCurve</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="74">{
		<expr_stmt><expr><name><name pos:line="79" pos:column="17">this</name><op:operator pos:line="79" pos:column="21">.</op:operator><name pos:line="79" pos:column="22">courseCurve</name></name> <op:operator pos:line="79" pos:column="34">=</op:operator> <name pos:line="79" pos:column="36">courseCurve</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="line" pos:line="82" pos:column="9">// To retrieve the total marks for the course</comment>
	<function><type><specifier pos:line="83" pos:column="9">private</specifier> <name pos:line="83" pos:column="17">int</name></type> <name pos:line="83" pos:column="21">getTotalCourseMarks</name><parameter_list pos:line="83" pos:column="40">()</parameter_list><block pos:line="83" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">int</name></type> <name pos:line="84" pos:column="21">totalCourseMarks</name> <init pos:line="84" pos:column="38">= <expr><lit:literal type="number" pos:line="84" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">int</name></type> <name pos:line="86" pos:column="21">offerID</name> <init pos:line="86" pos:column="29">= <expr><call><name><name pos:line="86" pos:column="31">this</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">getOfferID</name></name><argument_list pos:line="86" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">CourseOffered</name></type> <name pos:line="88" pos:column="31">offeredCourse</name> <init pos:line="88" pos:column="45">= <expr><lit:literal type="null" pos:line="88" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="90" pos:column="17">try <block pos:line="90" pos:column="21">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">offeredCourse</name> <op:operator pos:line="91" pos:column="39">=</op:operator> <op:operator pos:line="91" pos:column="41">new</op:operator> <call><name pos:line="91" pos:column="45">CourseOffered</name><argument_list pos:line="91" pos:column="58">(<argument><expr><name pos:line="91" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="92" pos:column="19">catch <parameter_list pos:line="92" pos:column="25">(<param><decl><type><name><name pos:line="92" pos:column="26">Course</name><op:operator pos:line="92" pos:column="32">.</op:operator><name pos:line="92" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="92" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="93" pos:column="25">e1</name><op:operator pos:line="93" pos:column="27">.</op:operator><name pos:line="93" pos:column="28">printStackTrace</name></name><argument_list pos:line="93" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="94" pos:column="19">catch <parameter_list pos:line="94" pos:column="25">(<param><decl><type><name><name pos:line="94" pos:column="26">CourseOffered</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="94" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="95" pos:column="25">e1</name><op:operator pos:line="95" pos:column="27">.</op:operator><name pos:line="95" pos:column="28">printStackTrace</name></name><argument_list pos:line="95" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="98" pos:column="17">Course</name></type> <name pos:line="98" pos:column="24">course</name> <init pos:line="98" pos:column="31">= <expr><call><name><name pos:line="98" pos:column="33">offeredCourse</name><op:operator pos:line="98" pos:column="46">.</op:operator><name pos:line="98" pos:column="47">getCourse</name></name><argument_list pos:line="98" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="99" pos:column="17">String</name></type> <name pos:line="99" pos:column="24">courseName</name> <init pos:line="99" pos:column="35">= <expr><call><name><name pos:line="99" pos:column="37">course</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">getCourseName</name></name><argument_list pos:line="99" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="100" pos:column="17">int</name></type> <name pos:line="100" pos:column="21">semID</name> <init pos:line="100" pos:column="27">= <expr><call><name><name pos:line="100" pos:column="29">offeredCourse</name><op:operator pos:line="100" pos:column="42">.</op:operator><name pos:line="100" pos:column="43">getSemesterID</name></name><argument_list pos:line="100" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">String</name></type> <name pos:line="102" pos:column="24">tableName</name> <init pos:line="102" pos:column="34">= <expr><name pos:line="102" pos:column="36">courseName</name> <op:operator pos:line="102" pos:column="47">+</op:operator> <call><name><name pos:line="102" pos:column="49">Integer</name><op:operator pos:line="102" pos:column="56">.</op:operator><name pos:line="102" pos:column="57">toString</name></name><argument_list pos:line="102" pos:column="65">(<argument><expr><name pos:line="102" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="75">+</op:operator> <call><name><name pos:line="102" pos:column="77">Integer</name><op:operator pos:line="102" pos:column="84">.</op:operator><name pos:line="102" pos:column="85">toString</name></name><argument_list pos:line="102" pos:column="93">(<argument><expr><name pos:line="102" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="102" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		
		<decl_stmt><decl><type><name pos:line="105" pos:column="17">String</name></type> <name pos:line="105" pos:column="24">SQLExamStructureSelect</name> <init pos:line="105" pos:column="47">= <expr><lit:literal type="string" pos:line="105" pos:column="49">"Select sum(TotalMarks) As TotalMarks2 FROM %s;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">SQLExamStructureSelect</name> <op:operator pos:line="106" pos:column="48">=</op:operator> <call><name><name pos:line="106" pos:column="50">String</name><op:operator pos:line="106" pos:column="56">.</op:operator><name pos:line="106" pos:column="57">format</name></name><argument_list pos:line="106" pos:column="63">(<argument><expr><name pos:line="106" pos:column="64">SQLExamStructureSelect</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="88">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="107" pos:column="17">try <block pos:line="107" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="108" pos:column="25">Connection</name></type> <name pos:line="108" pos:column="36">conn</name> <init pos:line="108" pos:column="41">= <expr><call><name><name pos:line="108" pos:column="43">Database</name><op:operator pos:line="108" pos:column="51">.</op:operator><name pos:line="108" pos:column="52">getConnection</name></name><argument_list pos:line="108" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="109" pos:column="25">try <block pos:line="109" pos:column="29">{
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><name pos:line="110" pos:column="37">conn</name> <op:operator pos:line="110" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="110" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="110" pos:column="50"> <block pos:line="110" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="112" pos:column="41">PreparedStatement</name></type> <name pos:line="112" pos:column="59">statement</name> <init pos:line="112" pos:column="69">= <expr><call><name><name pos:line="112" pos:column="71">conn</name><op:operator pos:line="112" pos:column="75">.</op:operator><name pos:line="112" pos:column="76">prepareStatement</name></name><argument_list pos:line="112" pos:column="92">(<argument><expr><name pos:line="112" pos:column="93">SQLExamStructureSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="113" pos:column="41">//statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name pos:line="114" pos:column="41">ResultSet</name></type> <name pos:line="114" pos:column="51">rs</name> <init pos:line="114" pos:column="54">= <expr><call><name><name pos:line="114" pos:column="56">statement</name><op:operator pos:line="114" pos:column="65">.</op:operator><name pos:line="114" pos:column="66">executeQuery</name></name><argument_list pos:line="114" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="116" pos:column="41">while<condition pos:line="116" pos:column="46">(<expr><call><name><name pos:line="116" pos:column="47">rs</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">next</name></name><argument_list pos:line="116" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="116" pos:column="57">{
						
						<expr_stmt><expr><call><name><name pos:line="118" pos:column="49">DBAnnotation</name><op:operator pos:line="118" pos:column="61">.</op:operator><name pos:line="118" pos:column="62">annoate</name></name><argument_list pos:line="118" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="70">"totalCourseMarks"</lit:literal></expr></argument>,<argument><expr><name pos:line="118" pos:column="89">tableName</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="118" pos:column="99">"TotalMarks2"</lit:literal></expr></argument>,<argument><expr><lit:literal type="boolean" pos:line="118" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="119" pos:column="49">totalCourseMarks</name> <op:operator pos:line="119" pos:column="66">=</op:operator> <call><name><name pos:line="119" pos:column="68">rs</name><op:operator pos:line="119" pos:column="70">.</op:operator><name pos:line="119" pos:column="71">getInt</name></name><argument_list pos:line="119" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="119" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="120" pos:column="49">System</name><op:operator pos:line="120" pos:column="55">.</op:operator><name pos:line="120" pos:column="56">out</name><op:operator pos:line="120" pos:column="59">.</op:operator><name pos:line="120" pos:column="60">println</name></name><argument_list pos:line="120" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="68">"---------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="121" pos:column="49">System</name><op:operator pos:line="121" pos:column="55">.</op:operator><name pos:line="121" pos:column="56">out</name><op:operator pos:line="121" pos:column="59">.</op:operator><name pos:line="121" pos:column="60">println</name></name><argument_list pos:line="121" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="68">"totalCourseMarks: "</lit:literal> <op:operator pos:line="121" pos:column="89">+</op:operator> <name pos:line="121" pos:column="91">totalCourseMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="124" pos:column="27">catch <parameter_list pos:line="124" pos:column="33">(<param><decl><type><name pos:line="124" pos:column="34">SQLException</name></type> <name pos:line="124" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">System</name><op:operator pos:line="125" pos:column="39">.</op:operator><name pos:line="125" pos:column="40">out</name><op:operator pos:line="125" pos:column="43">.</op:operator><name pos:line="125" pos:column="44">println</name></name><argument_list pos:line="125" pos:column="51">(<argument><expr><name pos:line="125" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="128" pos:column="19">catch <parameter_list pos:line="128" pos:column="25">(<param><decl><type><name pos:line="128" pos:column="26">Exception</name></type> <name pos:line="128" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">System</name><op:operator pos:line="129" pos:column="31">.</op:operator><name pos:line="129" pos:column="32">out</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">println</name></name><argument_list pos:line="129" pos:column="43">(<argument><expr><name pos:line="129" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="132" pos:column="17">return <expr><name pos:line="132" pos:column="24">totalCourseMarks</name></expr>;</return>
		
	}</block></function>
	
	<comment type="line" pos:line="136" pos:column="9">// Get the total marks of all the exams for all students </comment>
	<comment type="line" pos:line="137" pos:column="9">// Example: &lt;Student, 87&gt;</comment>
	<function><type><specifier pos:line="138" pos:column="9">private</specifier> <name><name pos:line="138" pos:column="17">HashMap</name><argument_list pos:line="138" pos:column="24">&lt;<argument><name pos:line="138" pos:column="25">Student</name></argument>,<argument><name pos:line="138" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="138" pos:column="41">getStudentTotalMarks</name><parameter_list pos:line="138" pos:column="61">()</parameter_list><block pos:line="138" pos:column="63">{
		<decl_stmt><decl><type><name><name pos:line="139" pos:column="17">HashMap</name><argument_list pos:line="139" pos:column="24">&lt;<argument><name pos:line="139" pos:column="25">Student</name></argument>,<argument><name pos:line="139" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="139" pos:column="41">studentTotalMarks</name> <init pos:line="139" pos:column="59">= <expr><op:operator pos:line="139" pos:column="61">new</op:operator> <call><name><name pos:line="139" pos:column="65">HashMap</name><argument_list pos:line="139" pos:column="72">&lt;<argument><name pos:line="139" pos:column="73">Student</name></argument>,<argument><name pos:line="139" pos:column="81">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="139" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="141" pos:column="17">int</name></type> <name pos:line="141" pos:column="21">offerID</name> <init pos:line="141" pos:column="29">= <expr><call><name><name pos:line="141" pos:column="31">this</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">getOfferID</name></name><argument_list pos:line="141" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="142" pos:column="17">CourseExams</name></type> <name pos:line="142" pos:column="29">exams</name> <init pos:line="142" pos:column="35">= <expr><op:operator pos:line="142" pos:column="37">new</op:operator> <call><name pos:line="142" pos:column="41">CourseExams</name><argument_list pos:line="142" pos:column="52">(<argument><expr><name pos:line="142" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name pos:line="144" pos:column="17">studentTotalMarks</name> <op:operator pos:line="144" pos:column="35">=</op:operator> <call><name><name pos:line="144" pos:column="37">exams</name><op:operator pos:line="144" pos:column="42">.</op:operator><name pos:line="144" pos:column="43">getStudentMarks</name></name><argument_list pos:line="144" pos:column="58">()</argument_list></call><op:operator pos:line="144" pos:column="60">.</op:operator><call><name pos:line="144" pos:column="61">getExamMarks</name><argument_list pos:line="144" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
		
		<return pos:line="146" pos:column="17">return <expr><name pos:line="146" pos:column="24">studentTotalMarks</name></expr>;</return>
		
	}</block></function>
	
	<comment type="line" pos:line="150" pos:column="9">// Gets the percentage of the last student in the course</comment>
	<function><type><specifier pos:line="151" pos:column="9">public</specifier> <name pos:line="151" pos:column="16">double</name></type> <name pos:line="151" pos:column="23">getLastStudentPercent</name><parameter_list pos:line="151" pos:column="44">()</parameter_list><block pos:line="151" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">double</name></type> <name pos:line="152" pos:column="24">percent</name> <init pos:line="152" pos:column="32">= <expr><lit:literal type="number" pos:line="152" pos:column="34">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="153" pos:column="17">HashMap</name><argument_list pos:line="153" pos:column="24">&lt;<argument><name pos:line="153" pos:column="25">Student</name></argument>,<argument><name pos:line="153" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="153" pos:column="41">studentTotalMarks</name> <init pos:line="153" pos:column="59">= <expr><op:operator pos:line="153" pos:column="61">new</op:operator> <call><name><name pos:line="153" pos:column="65">HashMap</name><argument_list pos:line="153" pos:column="72">&lt;<argument><name pos:line="153" pos:column="73">Student</name></argument>,<argument><name pos:line="153" pos:column="81">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="153" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">int</name></type> <name pos:line="155" pos:column="21">offerID</name> <init pos:line="155" pos:column="29">= <expr><call><name><name pos:line="155" pos:column="31">this</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">getOfferID</name></name><argument_list pos:line="155" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="156" pos:column="17">CourseExams</name></type> <name pos:line="156" pos:column="29">exams</name> <init pos:line="156" pos:column="35">= <expr><op:operator pos:line="156" pos:column="37">new</op:operator> <call><name pos:line="156" pos:column="41">CourseExams</name><argument_list pos:line="156" pos:column="52">(<argument><expr><name pos:line="156" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">int</name></type> <name pos:line="158" pos:column="21">totalCourseMarks</name> <init pos:line="158" pos:column="38">= <expr><call><name><name pos:line="158" pos:column="40">this</name><op:operator pos:line="158" pos:column="44">.</op:operator><name pos:line="158" pos:column="45">getTotalCourseMarks</name></name><argument_list pos:line="158" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="159" pos:column="17">studentTotalMarks</name> <op:operator pos:line="159" pos:column="35">=</op:operator> <call><name><name pos:line="159" pos:column="37">exams</name><op:operator pos:line="159" pos:column="42">.</op:operator><name pos:line="159" pos:column="43">getStudentMarks</name></name><argument_list pos:line="159" pos:column="58">()</argument_list></call><op:operator pos:line="159" pos:column="60">.</op:operator><call><name pos:line="159" pos:column="61">getExamMarks</name><argument_list pos:line="159" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="161" pos:column="17">LinkedHashMap</name><argument_list pos:line="161" pos:column="30">&lt;<argument><name pos:line="161" pos:column="31">Student</name></argument>,<argument><name pos:line="161" pos:column="39">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="47">sortedstudentTotalMarks</name> <init pos:line="161" pos:column="71">= <expr><op:operator pos:line="161" pos:column="73">(</op:operator><name><name pos:line="161" pos:column="74">LinkedHashMap</name><argument_list pos:line="161" pos:column="87">&lt;<argument><name pos:line="161" pos:column="88">Student</name></argument>, <argument><name pos:line="161" pos:column="97">Double</name></argument>&gt;</argument_list></name><op:operator pos:line="161" pos:column="104">)</op:operator> <call><name pos:line="161" pos:column="106">sortHashMap</name><argument_list pos:line="161" pos:column="117">(<argument><expr><name pos:line="161" pos:column="118">studentTotalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="162" pos:column="17">Set</name><argument_list pos:line="162" pos:column="20">&lt;<argument><name><name pos:line="162" pos:column="21">Entry</name><argument_list pos:line="162" pos:column="26">&lt;<argument><name pos:line="162" pos:column="27">Student</name></argument>,<argument><name pos:line="162" pos:column="35">Double</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="44">mapValues</name> <init pos:line="162" pos:column="54">= <expr><call><name><name pos:line="162" pos:column="56">sortedstudentTotalMarks</name><op:operator pos:line="162" pos:column="79">.</op:operator><name pos:line="162" pos:column="80">entrySet</name></name><argument_list pos:line="162" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">int</name></type> <name pos:line="163" pos:column="21">mapLength</name> <init pos:line="163" pos:column="31">= <expr><call><name><name pos:line="163" pos:column="33">mapValues</name><op:operator pos:line="163" pos:column="42">.</op:operator><name pos:line="163" pos:column="43">size</name></name><argument_list pos:line="163" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="164" pos:column="17">Entry</name><argument_list pos:line="164" pos:column="22">&lt;<argument><name pos:line="164" pos:column="23">Student</name></argument>,<argument><name pos:line="164" pos:column="31">Double</name></argument>&gt;</argument_list></name><index pos:line="164" pos:column="38">[]</index></type> <name pos:line="164" pos:column="41">entry</name> <init pos:line="164" pos:column="47">= <expr><op:operator pos:line="164" pos:column="49">new</op:operator> <name><name pos:line="164" pos:column="53">Entry</name><index pos:line="164" pos:column="58">[<expr><name pos:line="164" pos:column="59">mapLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="165" pos:column="17">mapValues</name><op:operator pos:line="165" pos:column="26">.</op:operator><name pos:line="165" pos:column="27">toArray</name></name><argument_list pos:line="165" pos:column="34">(<argument><expr><name pos:line="165" pos:column="35">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">double</name></type> <name pos:line="166" pos:column="24">totalmks</name> <init pos:line="166" pos:column="33">= <expr><name><name pos:line="166" pos:column="35">entry</name><index pos:line="166" pos:column="40">[<expr><name pos:line="166" pos:column="41">mapLength</name><op:operator pos:line="166" pos:column="50">-</op:operator><lit:literal type="number" pos:line="166" pos:column="51">1</lit:literal></expr>]</index></name><op:operator pos:line="166" pos:column="53">.</op:operator><call><name pos:line="166" pos:column="54">getValue</name><argument_list pos:line="166" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="167" pos:column="17">System</name><op:operator pos:line="167" pos:column="23">.</op:operator><name pos:line="167" pos:column="24">out</name><op:operator pos:line="167" pos:column="27">.</op:operator><name pos:line="167" pos:column="28">println</name></name><argument_list pos:line="167" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="36">"Mks: "</lit:literal> <op:operator pos:line="167" pos:column="44">+</op:operator> <name pos:line="167" pos:column="46">totalmks</name> <op:operator pos:line="167" pos:column="55">+</op:operator> <lit:literal type="string" pos:line="167" pos:column="57">"totalCourseMarks: "</lit:literal> <op:operator pos:line="167" pos:column="78">+</op:operator> <name pos:line="167" pos:column="80">totalCourseMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
<comment type="line" pos:line="169" pos:column="1">//		sortedstudentTotalMarks.entrySet().iterator().next();</comment>
<comment type="line" pos:line="170" pos:column="1">//		@SuppressWarnings("unchecked")</comment>
<comment type="line" pos:line="171" pos:column="1">//		List&lt;Student&gt; keys = (List&lt;Student&gt;) sortedstudentTotalMarks.keySet();</comment>
<comment type="line" pos:line="172" pos:column="1">//		Student lastKey = keys.get(keys.size()-1);</comment>
<comment type="line" pos:line="173" pos:column="1">//		double totalMarks = sortedstudentTotalMarks.get(lastKey);</comment>
<comment type="line" pos:line="174" pos:column="1">//		</comment>
		<expr_stmt><expr><name pos:line="175" pos:column="17">percent</name> <op:operator pos:line="175" pos:column="25">=</op:operator> <op:operator pos:line="175" pos:column="27">(</op:operator><name pos:line="175" pos:column="28">totalmks</name> <op:operator pos:line="175" pos:column="37">/</op:operator> <name pos:line="175" pos:column="39">totalCourseMarks</name><op:operator pos:line="175" pos:column="55">)</op:operator> <op:operator pos:line="175" pos:column="57">*</op:operator> <lit:literal type="number" pos:line="175" pos:column="59">100</lit:literal></expr>;</expr_stmt>
		
		<return pos:line="177" pos:column="17">return <expr><name pos:line="177" pos:column="24">percent</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="180" pos:column="9">// 3 ways to Calculate the Curve</comment>

	<comment type="line" pos:line="182" pos:column="9">// HashMap&lt;String,Integer&gt; = HashMap&lt;Grade,Percentage of students in the grade&gt;</comment>
	<comment type="line" pos:line="183" pos:column="9">// Example: &lt;30,40,30&gt; = Top 30% students would be given grade at level 1.</comment>
	<comment type="line" pos:line="184" pos:column="9">// Next 40% students would be given grade  at level 2. </comment>
	<comment type="line" pos:line="185" pos:column="9">// Last 30% students would be given grade  at level 3.</comment>
	<comment type="line" pos:line="186" pos:column="9">// Grade levels are stored in the gradingsystem table.</comment>
	<function><type><annotation pos:line="187" pos:column="9">@<name pos:line="187" pos:column="10">SuppressWarnings</name><argument_list pos:line="187" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="27">"null"</lit:literal></expr></argument>)</argument_list></annotation>
	<specifier pos:line="188" pos:column="9">public</specifier> <specifier pos:line="188" pos:column="16">static</specifier> <name pos:line="188" pos:column="23">CourseCurve</name></type> <name pos:line="188" pos:column="35">calculatePercentageCurve</name><parameter_list pos:line="188" pos:column="59">(<param><decl><type><name pos:line="188" pos:column="60">int</name></type> <name pos:line="188" pos:column="64">offerID</name></decl></param>, <param><decl><type><name><name pos:line="188" pos:column="73">List</name><argument_list pos:line="188" pos:column="77">&lt;<argument><name pos:line="188" pos:column="78">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="87">curvingCriteria</name></decl></param>)</parameter_list><block pos:line="188" pos:column="103">{
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">CourseCurve</name></type> <name pos:line="189" pos:column="29">curve</name> <init pos:line="189" pos:column="35">= <expr><op:operator pos:line="189" pos:column="37">new</op:operator> <call><name pos:line="189" pos:column="41">CourseCurve</name><argument_list pos:line="189" pos:column="52">(<argument><expr><name pos:line="189" pos:column="53">offerID</name></expr></argument>,<argument><expr><name pos:line="189" pos:column="61">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="191" pos:column="17">// STEP 1: Get total CourseMarks from CourseStructure Table</comment>
		<comment type="line" pos:line="192" pos:column="17">// int totalCourseMarks = curve.getTotalCourseMarks();</comment>
		
		<comment type="line" pos:line="194" pos:column="17">// STEP 2: get totalMarks for each student from CourseExams' Table</comment>
		<decl_stmt><decl><type><name><name pos:line="195" pos:column="17">HashMap</name><argument_list pos:line="195" pos:column="24">&lt;<argument><name pos:line="195" pos:column="25">Student</name></argument>,<argument><name pos:line="195" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="195" pos:column="41">studentTotalMarks</name> <init pos:line="195" pos:column="59">= <expr><call><name><name pos:line="195" pos:column="61">curve</name><op:operator pos:line="195" pos:column="66">.</op:operator><name pos:line="195" pos:column="67">getStudentTotalMarks</name></name><argument_list pos:line="195" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="197" pos:column="17">// STEP 3: Sort the hashmap in descending order</comment>
		<decl_stmt><decl><type><name><name pos:line="198" pos:column="17">HashMap</name><argument_list pos:line="198" pos:column="24">&lt;<argument><name pos:line="198" pos:column="25">Student</name></argument>,<argument><name pos:line="198" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="41">sortedstudentTotalMarks</name> <init pos:line="198" pos:column="65">= <expr><call><name pos:line="198" pos:column="67">sortHashMap</name><argument_list pos:line="198" pos:column="78">(<argument><expr><name pos:line="198" pos:column="79">studentTotalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="200" pos:column="17">// STEP 4: Calculate curve for the courseOffered based on</comment>
		<comment type="line" pos:line="201" pos:column="17">// the curvingCriteria selected by the professor </comment>
		<comment type="line" pos:line="202" pos:column="17">//(30,40,30) = (9,12,9) / 30</comment>
		<decl_stmt><decl><type><name><name pos:line="203" pos:column="17">HashMap</name><argument_list pos:line="203" pos:column="24">&lt;<argument><name pos:line="203" pos:column="25">Student</name></argument>,<argument><name pos:line="203" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="41">courseCurve</name> <init pos:line="203" pos:column="53">= <expr><op:operator pos:line="203" pos:column="55">new</op:operator> <call><name><name pos:line="203" pos:column="59">HashMap</name><argument_list pos:line="203" pos:column="66">&lt;<argument><name pos:line="203" pos:column="67">Student</name></argument>,<argument><name pos:line="203" pos:column="75">String</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="204" pos:column="17">int</name></type> <name pos:line="204" pos:column="21">numberOfStudents</name> <init pos:line="204" pos:column="38">= <expr><call><name><name pos:line="204" pos:column="40">sortedstudentTotalMarks</name><op:operator pos:line="204" pos:column="63">.</op:operator><name pos:line="204" pos:column="64">size</name></name><argument_list pos:line="204" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="205" pos:column="17">int</name></type> <name pos:line="205" pos:column="21">numberOfGrades</name> <init pos:line="205" pos:column="36">= <expr><call><name><name pos:line="205" pos:column="38">curvingCriteria</name><op:operator pos:line="205" pos:column="53">.</op:operator><name pos:line="205" pos:column="54">size</name></name><argument_list pos:line="205" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="206" pos:column="17">int</name></type> <name pos:line="206" pos:column="21">studentsLeft</name> <init pos:line="206" pos:column="34">= <expr><name pos:line="206" pos:column="36">numberOfStudents</name></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="208" pos:column="1">//		System.out.println("numberOfStudents: " + numberOfStudents + " numberOfGrades: " + numberOfGrades + " studentsLeft: " + studentsLeft );</comment>
		
		
		<decl_stmt><decl><type><name><name pos:line="211" pos:column="17">Set</name><argument_list pos:line="211" pos:column="20">&lt;<argument><name pos:line="211" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="211" pos:column="30">keys</name> <init pos:line="211" pos:column="35">= <expr><call><name><name pos:line="211" pos:column="37">sortedstudentTotalMarks</name><op:operator pos:line="211" pos:column="60">.</op:operator><name pos:line="211" pos:column="61">keySet</name></name><argument_list pos:line="211" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="212" pos:column="17">Iterator</name><argument_list pos:line="212" pos:column="25">&lt;<argument><name pos:line="212" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="212" pos:column="35">keyIterator</name> <init pos:line="212" pos:column="47">= <expr><call><name><name pos:line="212" pos:column="49">keys</name><op:operator pos:line="212" pos:column="53">.</op:operator><name pos:line="212" pos:column="54">iterator</name></name><argument_list pos:line="212" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="214" pos:column="17">for (<init><decl><type><name pos:line="214" pos:column="22">int</name></type> <name pos:line="214" pos:column="26">gradeLevel</name><init pos:line="214" pos:column="36">=<expr><lit:literal type="number" pos:line="214" pos:column="37">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="214" pos:column="40">gradeLevel</name><op:operator pos:line="214" pos:column="50">&lt;=</op:operator> <name pos:line="214" pos:column="53">numberOfGrades</name></expr>;</condition><incr><expr><name pos:line="214" pos:column="68">gradeLevel</name><op:operator pos:line="214" pos:column="78">++</op:operator></expr></incr>)<block pos:line="214" pos:column="81">{
			<decl_stmt><decl><type><name pos:line="215" pos:column="25">GradeSystem</name></type> <name pos:line="215" pos:column="37">grade</name> <init pos:line="215" pos:column="43">= <expr><call><name><name pos:line="215" pos:column="45">GradeSystem</name><op:operator pos:line="215" pos:column="56">.</op:operator><name pos:line="215" pos:column="57">getGradeForGradeLevel</name></name><argument_list pos:line="215" pos:column="78">(<argument><expr><name pos:line="215" pos:column="79">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="216" pos:column="25">String</name></type> <name pos:line="216" pos:column="32">studentGrade</name> <init pos:line="216" pos:column="45">= <expr><call><name><name pos:line="216" pos:column="47">grade</name><op:operator pos:line="216" pos:column="52">.</op:operator><name pos:line="216" pos:column="53">getGrade</name></name><argument_list pos:line="216" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="217" pos:column="25">double</name></type> <name pos:line="217" pos:column="32">percentStudents</name> <init pos:line="217" pos:column="48">= <expr><call><name><name pos:line="217" pos:column="50">curvingCriteria</name><op:operator pos:line="217" pos:column="65">.</op:operator><name pos:line="217" pos:column="66">get</name></name><argument_list pos:line="217" pos:column="69">(<argument><expr><name pos:line="217" pos:column="70">gradeLevel</name><op:operator pos:line="217" pos:column="80">-</op:operator><lit:literal type="number" pos:line="217" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="218" pos:column="1">//			System.out.println("percentStudents " + percentStudents);</comment>
<comment type="line" pos:line="219" pos:column="1">//			System.out.println("GradeLevel: " + gradeLevel);</comment>
			<decl_stmt><decl><type><name pos:line="220" pos:column="25">double</name></type> <name pos:line="220" pos:column="32">value</name> <init pos:line="220" pos:column="38">=  <expr><op:operator pos:line="220" pos:column="41">(</op:operator><op:operator pos:line="220" pos:column="42">(</op:operator><name pos:line="220" pos:column="43">percentStudents</name><op:operator pos:line="220" pos:column="58">/</op:operator><lit:literal type="number" pos:line="220" pos:column="59">100</lit:literal><op:operator pos:line="220" pos:column="62">)</op:operator> <op:operator pos:line="220" pos:column="64">*</op:operator> <name pos:line="220" pos:column="66">numberOfStudents</name><op:operator pos:line="220" pos:column="82">)</op:operator></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="221" pos:column="25">// System.out.println("Value: " + value);</comment>
			<decl_stmt><decl><type><name pos:line="222" pos:column="25">int</name></type> <name pos:line="222" pos:column="29">students</name> <init pos:line="222" pos:column="38">= <expr><call pos:line="222" pos:column="40">(<name pos:line="222" pos:column="41">int</name>)<argument_list pos:line="222" pos:column="45">(<argument><expr><call><name><name pos:line="222" pos:column="46">Math</name><op:operator pos:line="222" pos:column="50">.</op:operator><name pos:line="222" pos:column="51">ceil</name></name><argument_list pos:line="222" pos:column="55">(<argument><expr><name pos:line="222" pos:column="56">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="223" pos:column="1">//			System.out.println("Students: " + students);</comment>
			<comment type="line" pos:line="224" pos:column="25">// For roundoff error</comment>
			<if pos:line="225" pos:column="25">if<condition pos:line="225" pos:column="27">(<expr><name pos:line="225" pos:column="28">students</name> <op:operator pos:line="225" pos:column="37">&gt;</op:operator> <name pos:line="225" pos:column="39">studentsLeft</name></expr>)</condition><then><block pos:line="225" pos:column="52">{
				<expr_stmt><expr><name pos:line="226" pos:column="33">students</name> <op:operator pos:line="226" pos:column="42">=</op:operator> <name pos:line="226" pos:column="44">studentsLeft</name></expr>;</expr_stmt>
<comment type="line" pos:line="227" pos:column="1">//				System.out.println("StudentsLeft-: " + studentsLeft);</comment>
			}</block></then></if>
			
			<for pos:line="230" pos:column="25">for(<init><decl><type><name pos:line="230" pos:column="29">int</name></type> <name pos:line="230" pos:column="33">studentsAdded</name> <init pos:line="230" pos:column="47">= <expr><lit:literal type="number" pos:line="230" pos:column="49">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="230" pos:column="52">studentsAdded</name><op:operator pos:line="230" pos:column="65">&lt;</op:operator><name pos:line="230" pos:column="66">students</name></expr>;</condition><incr><expr><name pos:line="230" pos:column="75">studentsAdded</name><op:operator pos:line="230" pos:column="88">++</op:operator></expr></incr>)<block pos:line="230" pos:column="91">{
				<if pos:line="231" pos:column="33">if<condition pos:line="231" pos:column="35">(<expr><call><name><name pos:line="231" pos:column="36">keyIterator</name><op:operator pos:line="231" pos:column="47">.</op:operator><name pos:line="231" pos:column="48">hasNext</name></name><argument_list pos:line="231" pos:column="55">()</argument_list></call></expr>)</condition><then><block pos:line="231" pos:column="58">{
					<decl_stmt><decl><type><name pos:line="232" pos:column="41">Student</name></type> <name pos:line="232" pos:column="49">student</name> <init pos:line="232" pos:column="57">= <expr><call><name><name pos:line="232" pos:column="59">keyIterator</name><op:operator pos:line="232" pos:column="70">.</op:operator><name pos:line="232" pos:column="71">next</name></name><argument_list pos:line="232" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="233" pos:column="1">//					System.out.println("StudentUIN: " + student.getUIN());</comment>
					<expr_stmt><expr><call><name><name pos:line="234" pos:column="41">courseCurve</name><op:operator pos:line="234" pos:column="52">.</op:operator><name pos:line="234" pos:column="53">put</name></name><argument_list pos:line="234" pos:column="56">(<argument><expr><name pos:line="234" pos:column="57">student</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="66">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="235" pos:column="41">studentsLeft</name><op:operator pos:line="235" pos:column="53">--</op:operator></expr>;</expr_stmt>
<comment type="line" pos:line="236" pos:column="1">//					System.out.println("StudentsLeft: " + studentsLeft);</comment>
				}</block></then></if>
			}</block></for>
		}</block></for>
			
		<expr_stmt><expr><call><name><name pos:line="241" pos:column="17">curve</name><op:operator pos:line="241" pos:column="22">.</op:operator><name pos:line="241" pos:column="23">setCourseCurve</name></name><argument_list pos:line="241" pos:column="37">(<argument><expr><name pos:line="241" pos:column="38">courseCurve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="242" pos:column="17">return <expr><name pos:line="242" pos:column="24">curve</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="245" pos:column="9">// HashMap&lt;String,Integer&gt; = HashMap&lt;Grade,CutofPercentage&gt;</comment>
	<comment type="line" pos:line="246" pos:column="9">// Example: &lt;90,75,60&gt; = Students with total mks at or above 90-100% would be given grade at level 1</comment>
	<comment type="line" pos:line="247" pos:column="9">// Students with total mks between 75-89% would be given grade at level 2</comment>
	<comment type="line" pos:line="248" pos:column="9">// Students with total mks between 60-74% would be given grade at level 3</comment>
	<function><type><annotation pos:line="249" pos:column="9">@<name pos:line="249" pos:column="10">SuppressWarnings</name><argument_list pos:line="249" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="249" pos:column="27">"null"</lit:literal></expr></argument>)</argument_list></annotation>
	<specifier pos:line="250" pos:column="9">public</specifier> <specifier pos:line="250" pos:column="16">static</specifier> <name pos:line="250" pos:column="23">CourseCurve</name></type> <name pos:line="250" pos:column="35">calculateAbsoluteCurve</name><parameter_list pos:line="250" pos:column="57">(<param><decl><type><name pos:line="250" pos:column="58">int</name></type> <name pos:line="250" pos:column="62">offerID</name></decl></param>, <param><decl><type><name><name pos:line="250" pos:column="71">List</name><argument_list pos:line="250" pos:column="75">&lt;<argument><name pos:line="250" pos:column="76">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="250" pos:column="85">curvingCriteria</name></decl></param>)</parameter_list><block pos:line="250" pos:column="101">{
		<decl_stmt><decl><type><name pos:line="251" pos:column="17">CourseCurve</name></type> <name pos:line="251" pos:column="29">curve</name> <init pos:line="251" pos:column="35">= <expr><op:operator pos:line="251" pos:column="37">new</op:operator> <call><name pos:line="251" pos:column="41">CourseCurve</name><argument_list pos:line="251" pos:column="52">(<argument><expr><name pos:line="251" pos:column="53">offerID</name></expr></argument>,<argument><expr><name pos:line="251" pos:column="61">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="253" pos:column="17">// STEP 1: If the criteria is &lt;90,75,60&gt; and there is a student with </comment>
		<comment type="line" pos:line="254" pos:column="17">// less than 60% then that student will not get a grade. </comment>
		<comment type="line" pos:line="255" pos:column="17">// This step checks whether the last criteria is less than the percent of the </comment>
		<comment type="line" pos:line="256" pos:column="17">// last student in class</comment>
		
		<decl_stmt><decl><type><name pos:line="258" pos:column="17">int</name></type> <name pos:line="258" pos:column="21">size</name> <init pos:line="258" pos:column="26">= <expr><call><name><name pos:line="258" pos:column="28">curvingCriteria</name><op:operator pos:line="258" pos:column="43">.</op:operator><name pos:line="258" pos:column="44">size</name></name><argument_list pos:line="258" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="259" pos:column="17">int</name></type> <name pos:line="259" pos:column="21">lastCriteria</name> <init pos:line="259" pos:column="34">= <expr><call><name><name pos:line="259" pos:column="36">curvingCriteria</name><op:operator pos:line="259" pos:column="51">.</op:operator><name pos:line="259" pos:column="52">get</name></name><argument_list pos:line="259" pos:column="55">(<argument><expr><name pos:line="259" pos:column="56">size</name><op:operator pos:line="259" pos:column="60">-</op:operator><lit:literal type="number" pos:line="259" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="260" pos:column="17">double</name></type> <name pos:line="260" pos:column="24">lastStudentPercent</name> <init pos:line="260" pos:column="43">= <expr><call><name><name pos:line="260" pos:column="45">curve</name><op:operator pos:line="260" pos:column="50">.</op:operator><name pos:line="260" pos:column="51">getLastStudentPercent</name></name><argument_list pos:line="260" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="261" pos:column="17">int</name></type> <name pos:line="261" pos:column="21">floorlastStudentPercent</name><init pos:line="261" pos:column="44">= <expr><op:operator pos:line="261" pos:column="46">(</op:operator><name pos:line="261" pos:column="47">int</name><op:operator pos:line="261" pos:column="50">)</op:operator> <call><name><name pos:line="261" pos:column="52">Math</name><op:operator pos:line="261" pos:column="56">.</op:operator><name pos:line="261" pos:column="57">floor</name></name><argument_list pos:line="261" pos:column="62">(<argument><expr><name pos:line="261" pos:column="63">lastStudentPercent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="262" pos:column="1">//		System.out.println("lastCriteria: "+lastCriteria+" lastStudentPercent: " + lastStudentPercent + " \nfloorlastStudentPercent: " + floorlastStudentPercent);</comment>
		<if pos:line="263" pos:column="17">if<condition pos:line="263" pos:column="19">(<expr><name pos:line="263" pos:column="20">floorlastStudentPercent</name> <op:operator pos:line="263" pos:column="44">&lt;</op:operator> <name pos:line="263" pos:column="46">lastCriteria</name></expr> )</condition><then><block pos:line="263" pos:column="60">{
			<expr_stmt><expr><call><name><name pos:line="264" pos:column="25">System</name><op:operator pos:line="264" pos:column="31">.</op:operator><name pos:line="264" pos:column="32">out</name><op:operator pos:line="264" pos:column="35">.</op:operator><name pos:line="264" pos:column="36">println</name></name><argument_list pos:line="264" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="44">"There are students below the last criteria. "</lit:literal> <op:operator pos:line="264" pos:column="91">+</op:operator> 
								<lit:literal type="string" pos:line="265" pos:column="65">"Reduce the last criteria or add one more with value less than "</lit:literal> <op:operator pos:line="265" pos:column="130">+</op:operator> <name pos:line="265" pos:column="132">floorlastStudentPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="266" pos:column="19">else<block pos:line="266" pos:column="23">{
		
		<comment type="line" pos:line="268" pos:column="17">// STEP 2: Get total CourseMarks from CourseStructure Table</comment>
		<decl_stmt><decl><type><name pos:line="269" pos:column="17">int</name></type> <name pos:line="269" pos:column="21">totalCourseMarks</name> <init pos:line="269" pos:column="38">= <expr><call><name><name pos:line="269" pos:column="40">curve</name><op:operator pos:line="269" pos:column="45">.</op:operator><name pos:line="269" pos:column="46">getTotalCourseMarks</name></name><argument_list pos:line="269" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="271" pos:column="17">// STEP 3: get totalMarks for each student from CourseExams' Table</comment>
		<decl_stmt><decl><type><name><name pos:line="272" pos:column="17">HashMap</name><argument_list pos:line="272" pos:column="24">&lt;<argument><name pos:line="272" pos:column="25">Student</name></argument>,<argument><name pos:line="272" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="272" pos:column="41">studentTotalMarks</name> <init pos:line="272" pos:column="59">= <expr><call><name><name pos:line="272" pos:column="61">curve</name><op:operator pos:line="272" pos:column="66">.</op:operator><name pos:line="272" pos:column="67">getStudentTotalMarks</name></name><argument_list pos:line="272" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="274" pos:column="17">// STEP 4: Sort the hashmap in descending order</comment>
		<decl_stmt><decl><type><name><name pos:line="275" pos:column="17">HashMap</name><argument_list pos:line="275" pos:column="24">&lt;<argument><name pos:line="275" pos:column="25">Student</name></argument>,<argument><name pos:line="275" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="275" pos:column="41">sortedstudentTotalMarks</name> <init pos:line="275" pos:column="65">= <expr><call><name pos:line="275" pos:column="67">sortHashMap</name><argument_list pos:line="275" pos:column="78">(<argument><expr><name pos:line="275" pos:column="79">studentTotalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="277" pos:column="17">// STEP 5: Calculate curve for the courseOffered based on</comment>
		<comment type="line" pos:line="278" pos:column="17">// the curvingCriteria selected by the professor </comment>
		<decl_stmt><decl><type><name><name pos:line="279" pos:column="17">HashMap</name><argument_list pos:line="279" pos:column="24">&lt;<argument><name pos:line="279" pos:column="25">Student</name></argument>,<argument><name pos:line="279" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="279" pos:column="41">courseCurve</name> <init pos:line="279" pos:column="53">= <expr><op:operator pos:line="279" pos:column="55">new</op:operator> <call><name><name pos:line="279" pos:column="59">HashMap</name><argument_list pos:line="279" pos:column="66">&lt;<argument><name pos:line="279" pos:column="67">Student</name></argument>,<argument><name pos:line="279" pos:column="75">String</name></argument>&gt;</argument_list></name><argument_list pos:line="279" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="281" pos:column="17">// int numberOfStudents = sortedstudentTotalMarks.size();</comment>
		<decl_stmt><decl><type><name pos:line="282" pos:column="17">int</name></type> <name pos:line="282" pos:column="21">numberOfGrades</name> <init pos:line="282" pos:column="36">= <expr><call><name><name pos:line="282" pos:column="38">curvingCriteria</name><op:operator pos:line="282" pos:column="53">.</op:operator><name pos:line="282" pos:column="54">size</name></name><argument_list pos:line="282" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="283" pos:column="17">// int studentsLeft = numberOfStudents;</comment>
		
<comment type="line" pos:line="285" pos:column="1">//		System.out.println(" numberOfGrades: " + numberOfGrades + "totalCourseMarks: " + totalCourseMarks);	</comment>
		<decl_stmt><decl><type><name><name pos:line="286" pos:column="17">Set</name><argument_list pos:line="286" pos:column="20">&lt;<argument><name pos:line="286" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="286" pos:column="30">keys</name> <init pos:line="286" pos:column="35">= <expr><call><name><name pos:line="286" pos:column="37">sortedstudentTotalMarks</name><op:operator pos:line="286" pos:column="60">.</op:operator><name pos:line="286" pos:column="61">keySet</name></name><argument_list pos:line="286" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="287" pos:column="17">Iterator</name><argument_list pos:line="287" pos:column="25">&lt;<argument><name pos:line="287" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="287" pos:column="35">keyIterator</name> <init pos:line="287" pos:column="47">= <expr><call><name><name pos:line="287" pos:column="49">keys</name><op:operator pos:line="287" pos:column="53">.</op:operator><name pos:line="287" pos:column="54">iterator</name></name><argument_list pos:line="287" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for pos:line="289" pos:column="17">for (<init><decl><type><name pos:line="289" pos:column="22">int</name></type> <name pos:line="289" pos:column="26">gradeLevel</name><init pos:line="289" pos:column="36">=<expr><lit:literal type="number" pos:line="289" pos:column="37">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="289" pos:column="40">gradeLevel</name><op:operator pos:line="289" pos:column="50">&lt;=</op:operator> <name pos:line="289" pos:column="53">numberOfGrades</name></expr>;</condition><incr><expr><name pos:line="289" pos:column="68">gradeLevel</name><op:operator pos:line="289" pos:column="78">++</op:operator></expr></incr>)<block pos:line="289" pos:column="81">{
			<decl_stmt><decl><type><name pos:line="290" pos:column="25">GradeSystem</name></type> <name pos:line="290" pos:column="37">grade</name> <init pos:line="290" pos:column="43">= <expr><call><name><name pos:line="290" pos:column="45">GradeSystem</name><op:operator pos:line="290" pos:column="56">.</op:operator><name pos:line="290" pos:column="57">getGradeForGradeLevel</name></name><argument_list pos:line="290" pos:column="78">(<argument><expr><name pos:line="290" pos:column="79">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="291" pos:column="25">String</name></type> <name pos:line="291" pos:column="32">studentGrade</name> <init pos:line="291" pos:column="45">= <expr><call><name><name pos:line="291" pos:column="47">grade</name><op:operator pos:line="291" pos:column="52">.</op:operator><name pos:line="291" pos:column="53">getGrade</name></name><argument_list pos:line="291" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
			<decl_stmt><decl><type><name pos:line="293" pos:column="25">int</name></type> <name pos:line="293" pos:column="29">cutOffPercent</name> <init pos:line="293" pos:column="43">= <expr><call><name><name pos:line="293" pos:column="45">curvingCriteria</name><op:operator pos:line="293" pos:column="60">.</op:operator><name pos:line="293" pos:column="61">get</name></name><argument_list pos:line="293" pos:column="64">(<argument><expr><name pos:line="293" pos:column="65">gradeLevel</name><op:operator pos:line="293" pos:column="75">-</op:operator><lit:literal type="number" pos:line="293" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="294" pos:column="1">//			System.out.println("cutOffPercent: " + cutOffPercent);</comment>
			<while pos:line="295" pos:column="25">while <condition pos:line="295" pos:column="31">(<expr><call><name><name pos:line="295" pos:column="32">keyIterator</name><op:operator pos:line="295" pos:column="43">.</op:operator><name pos:line="295" pos:column="44">hasNext</name></name><argument_list pos:line="295" pos:column="51">()</argument_list></call></expr>)</condition> <block pos:line="295" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="296" pos:column="33">Student</name></type> <name pos:line="296" pos:column="41">student</name> <init pos:line="296" pos:column="49">= <expr><call><name><name pos:line="296" pos:column="51">keyIterator</name><op:operator pos:line="296" pos:column="62">.</op:operator><name pos:line="296" pos:column="63">next</name></name><argument_list pos:line="296" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="297" pos:column="33">//int UIN = student.getUIN();</comment>
				<decl_stmt><decl><type><name pos:line="298" pos:column="33">double</name></type> <name pos:line="298" pos:column="40">marks</name> <init pos:line="298" pos:column="46">= <expr><op:operator pos:line="298" pos:column="48">(</op:operator><name pos:line="298" pos:column="49">double</name><op:operator pos:line="298" pos:column="55">)</op:operator> <call><name><name pos:line="298" pos:column="57">sortedstudentTotalMarks</name><op:operator pos:line="298" pos:column="80">.</op:operator><name pos:line="298" pos:column="81">get</name></name><argument_list pos:line="298" pos:column="84">(<argument><expr><name pos:line="298" pos:column="85">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="299" pos:column="33">double</name></type> <name pos:line="299" pos:column="40">studentPercentage</name> <init pos:line="299" pos:column="58">= <expr><op:operator pos:line="299" pos:column="60">(</op:operator><name pos:line="299" pos:column="61">marks</name><op:operator pos:line="299" pos:column="66">/</op:operator> <name pos:line="299" pos:column="68">totalCourseMarks</name><op:operator pos:line="299" pos:column="84">)</op:operator> <op:operator pos:line="299" pos:column="86">*</op:operator> <lit:literal type="number" pos:line="299" pos:column="88">100</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="300" pos:column="1">//				System.out.println("studentPercentage "+studentPercentage);</comment>
				<if pos:line="301" pos:column="33">if<condition pos:line="301" pos:column="35">(<expr><name pos:line="301" pos:column="36">studentPercentage</name> <op:operator pos:line="301" pos:column="54">&gt;=</op:operator> <name pos:line="301" pos:column="57">cutOffPercent</name></expr>)</condition><then><block pos:line="301" pos:column="71">{
<comment type="line" pos:line="302" pos:column="1">//					System.out.println("--");</comment>
					<expr_stmt><expr><call><name><name pos:line="303" pos:column="41">courseCurve</name><op:operator pos:line="303" pos:column="52">.</op:operator><name pos:line="303" pos:column="53">put</name></name><argument_list pos:line="303" pos:column="56">(<argument><expr><name pos:line="303" pos:column="57">student</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="66">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="304" pos:column="35">else <block pos:line="304" pos:column="40">{
					<expr_stmt><expr><name pos:line="305" pos:column="41">grade</name> <op:operator pos:line="305" pos:column="47">=</op:operator> <call><name><name pos:line="305" pos:column="49">GradeSystem</name><op:operator pos:line="305" pos:column="60">.</op:operator><name pos:line="305" pos:column="61">getGradeForGradeLevel</name></name><argument_list pos:line="305" pos:column="82">(<argument><expr><name pos:line="305" pos:column="83">gradeLevel</name><op:operator pos:line="305" pos:column="93">+</op:operator><lit:literal type="number" pos:line="305" pos:column="94">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="306" pos:column="41">studentGrade</name> <op:operator pos:line="306" pos:column="54">=</op:operator> <call><name><name pos:line="306" pos:column="56">grade</name><op:operator pos:line="306" pos:column="61">.</op:operator><name pos:line="306" pos:column="62">getGrade</name></name><argument_list pos:line="306" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="307" pos:column="41">courseCurve</name><op:operator pos:line="307" pos:column="52">.</op:operator><name pos:line="307" pos:column="53">put</name></name><argument_list pos:line="307" pos:column="56">(<argument><expr><name pos:line="307" pos:column="57">student</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="66">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="308" pos:column="41">break;</break>
				}</block></else></if>
			}</block></while>	
		}</block></for>
		
		<expr_stmt><expr><call><name><name pos:line="313" pos:column="17">curve</name><op:operator pos:line="313" pos:column="22">.</op:operator><name pos:line="313" pos:column="23">setCourseCurve</name></name><argument_list pos:line="313" pos:column="37">(<argument><expr><name pos:line="313" pos:column="38">courseCurve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block></else></if> <comment type="line" pos:line="315" pos:column="19">// Else ends here</comment>
		<return pos:line="316" pos:column="17">return <expr><name pos:line="316" pos:column="24">curve</name></expr>;</return>
		
	}</block></function>
		
	<comment type="line" pos:line="320" pos:column="9">// HashMap&lt;String,Integer&gt; = HashMap&lt;Grade,Minimum Number of students in that grade&gt;</comment>
	<comment type="line" pos:line="321" pos:column="9">// Example: &lt;10,10,10&gt; = Atleast top 10 students get grade at level 1 </comment>
	<comment type="line" pos:line="322" pos:column="9">// After all level 1 grades, atleast 10 students will be given grade at level 2</comment>
	<function><type><annotation pos:line="323" pos:column="9">@<name pos:line="323" pos:column="10">SuppressWarnings</name><argument_list pos:line="323" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="323" pos:column="27">"null"</lit:literal></expr></argument>)</argument_list></annotation>
	<specifier pos:line="324" pos:column="9">public</specifier> <specifier pos:line="324" pos:column="16">static</specifier> <name pos:line="324" pos:column="23">CourseCurve</name></type> <name pos:line="324" pos:column="35">calculateMaxGapCurve</name><parameter_list pos:line="324" pos:column="55">(<param><decl><type><name pos:line="324" pos:column="56">int</name></type> <name pos:line="324" pos:column="60">offerID</name></decl></param>, <param><decl><type><name><name pos:line="324" pos:column="69">List</name><argument_list pos:line="324" pos:column="73">&lt;<argument><name pos:line="324" pos:column="74">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="324" pos:column="83">curvingCriteria</name></decl></param>)</parameter_list><block pos:line="324" pos:column="99">{
		<decl_stmt><decl><type><name pos:line="325" pos:column="17">CourseCurve</name></type> <name pos:line="325" pos:column="29">curve</name> <init pos:line="325" pos:column="35">= <expr><op:operator pos:line="325" pos:column="37">new</op:operator> <call><name pos:line="325" pos:column="41">CourseCurve</name><argument_list pos:line="325" pos:column="52">(<argument><expr><name pos:line="325" pos:column="53">offerID</name></expr></argument>,<argument><expr><name pos:line="325" pos:column="61">curvingCriteria</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="327" pos:column="17">// STEP 1: Get total CourseMarks from CourseStructure Table</comment>
		<comment type="line" pos:line="328" pos:column="17">//int totalCourseMarks = curve.getTotalCourseMarks();</comment>
		
		<comment type="line" pos:line="330" pos:column="17">// STEP 2: get totalMarks for each student from CourseExams' Table</comment>
		<decl_stmt><decl><type><name><name pos:line="331" pos:column="17">HashMap</name><argument_list pos:line="331" pos:column="24">&lt;<argument><name pos:line="331" pos:column="25">Student</name></argument>,<argument><name pos:line="331" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="331" pos:column="41">studentTotalMarks</name> <init pos:line="331" pos:column="59">= <expr><call><name><name pos:line="331" pos:column="61">curve</name><op:operator pos:line="331" pos:column="66">.</op:operator><name pos:line="331" pos:column="67">getStudentTotalMarks</name></name><argument_list pos:line="331" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="333" pos:column="17">// STEP 3: Sort the hashmap in descending order</comment>
		<decl_stmt><decl><type><name><name pos:line="334" pos:column="17">HashMap</name><argument_list pos:line="334" pos:column="24">&lt;<argument><name pos:line="334" pos:column="25">Student</name></argument>,<argument><name pos:line="334" pos:column="33">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="334" pos:column="41">sortedstudentTotalMarks</name> <init pos:line="334" pos:column="65">= <expr><call><name pos:line="334" pos:column="67">sortHashMap</name><argument_list pos:line="334" pos:column="78">(<argument><expr><name pos:line="334" pos:column="79">studentTotalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="336" pos:column="17">// STEP 4: Calculate curve for the courseOffered based on</comment>
		<comment type="line" pos:line="337" pos:column="17">// the curvingCriteria selected by the professor </comment>
		<decl_stmt><decl><type><name><name pos:line="338" pos:column="17">HashMap</name><argument_list pos:line="338" pos:column="24">&lt;<argument><name pos:line="338" pos:column="25">Student</name></argument>,<argument><name pos:line="338" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="338" pos:column="41">courseCurve</name> <init pos:line="338" pos:column="53">= <expr><op:operator pos:line="338" pos:column="55">new</op:operator> <call><name><name pos:line="338" pos:column="59">HashMap</name><argument_list pos:line="338" pos:column="66">&lt;<argument><name pos:line="338" pos:column="67">Student</name></argument>,<argument><name pos:line="338" pos:column="75">String</name></argument>&gt;</argument_list></name><argument_list pos:line="338" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line" pos:line="340" pos:column="17">// Algo to calculate curve</comment>
		<comment type="line" pos:line="341" pos:column="17">// 1. Sort students in decreasing order of total mks -- Done in step 3</comment>
		<comment type="line" pos:line="342" pos:column="17">// 2. Skip over minimum students and give them the first grade</comment>
		<comment type="line" pos:line="343" pos:column="17">// 3. Keep track of difference between total marks of students students</comment>
		<comment type="line" pos:line="344" pos:column="17">// 4. Find 1st instance where difference increases. </comment>
		<comment type="line" pos:line="345" pos:column="17">// 5. That is the cut-off point.</comment>
		<comment type="line" pos:line="346" pos:column="17">// 6. Move on to the next grade</comment>
		
		<decl_stmt><decl><type><name pos:line="348" pos:column="17">int</name></type> <name pos:line="348" pos:column="21">numberOfStudents</name> <init pos:line="348" pos:column="38">= <expr><call><name><name pos:line="348" pos:column="40">sortedstudentTotalMarks</name><op:operator pos:line="348" pos:column="63">.</op:operator><name pos:line="348" pos:column="64">size</name></name><argument_list pos:line="348" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="349" pos:column="17">int</name></type> <name pos:line="349" pos:column="21">numberOfGrades</name> <init pos:line="349" pos:column="36">= <expr><call><name><name pos:line="349" pos:column="38">curvingCriteria</name><op:operator pos:line="349" pos:column="53">.</op:operator><name pos:line="349" pos:column="54">size</name></name><argument_list pos:line="349" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="350" pos:column="17">int</name></type> <name pos:line="350" pos:column="21">studentsLeft</name> <init pos:line="350" pos:column="34">= <expr><name pos:line="350" pos:column="36">numberOfStudents</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="351" pos:column="17">Set</name><argument_list pos:line="351" pos:column="20">&lt;<argument><name pos:line="351" pos:column="21">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="351" pos:column="30">keys</name> <init pos:line="351" pos:column="35">= <expr><call><name><name pos:line="351" pos:column="37">sortedstudentTotalMarks</name><op:operator pos:line="351" pos:column="60">.</op:operator><name pos:line="351" pos:column="61">keySet</name></name><argument_list pos:line="351" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="352" pos:column="17">Iterator</name><argument_list pos:line="352" pos:column="25">&lt;<argument><name pos:line="352" pos:column="26">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="352" pos:column="35">keyIterator</name> <init pos:line="352" pos:column="47">= <expr><call><name><name pos:line="352" pos:column="49">keys</name><op:operator pos:line="352" pos:column="53">.</op:operator><name pos:line="352" pos:column="54">iterator</name></name><argument_list pos:line="352" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="354" pos:column="17">boolean</name></type> <name pos:line="354" pos:column="25">nextGraded</name> <init pos:line="354" pos:column="36">= <expr><lit:literal type="boolean" pos:line="354" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="355" pos:column="17">for (<init><decl><type><name pos:line="355" pos:column="22">int</name></type> <name pos:line="355" pos:column="26">gradeLevel</name><init pos:line="355" pos:column="36">=<expr><lit:literal type="number" pos:line="355" pos:column="37">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="355" pos:column="40">gradeLevel</name> <op:operator pos:line="355" pos:column="51">&lt;=</op:operator> <name pos:line="355" pos:column="54">numberOfGrades</name></expr>;</condition><incr><expr><name pos:line="355" pos:column="69">gradeLevel</name><op:operator pos:line="355" pos:column="79">++</op:operator></expr></incr>)<block pos:line="355" pos:column="82">{
			<decl_stmt><decl><type><name pos:line="356" pos:column="25">GradeSystem</name></type> <name pos:line="356" pos:column="37">grade</name> <init pos:line="356" pos:column="43">= <expr><call><name><name pos:line="356" pos:column="45">GradeSystem</name><op:operator pos:line="356" pos:column="56">.</op:operator><name pos:line="356" pos:column="57">getGradeForGradeLevel</name></name><argument_list pos:line="356" pos:column="78">(<argument><expr><name pos:line="356" pos:column="79">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="357" pos:column="25">String</name></type> <name pos:line="357" pos:column="32">studentGrade</name> <init pos:line="357" pos:column="45">= <expr><call><name><name pos:line="357" pos:column="47">grade</name><op:operator pos:line="357" pos:column="52">.</op:operator><name pos:line="357" pos:column="53">getGrade</name></name><argument_list pos:line="357" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="358" pos:column="25">int</name></type> <name pos:line="358" pos:column="29">gradedStudents</name> <init pos:line="358" pos:column="44">= <expr><lit:literal type="number" pos:line="358" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="359" pos:column="25">int</name></type> <name pos:line="359" pos:column="29">minimumPeople</name> <init pos:line="359" pos:column="43">= <expr><call><name><name pos:line="359" pos:column="45">curvingCriteria</name><op:operator pos:line="359" pos:column="60">.</op:operator><name pos:line="359" pos:column="61">get</name></name><argument_list pos:line="359" pos:column="64">(<argument><expr><name pos:line="359" pos:column="65">gradeLevel</name><op:operator pos:line="359" pos:column="75">-</op:operator><lit:literal type="number" pos:line="359" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="360" pos:column="25">System</name><op:operator pos:line="360" pos:column="31">.</op:operator><name pos:line="360" pos:column="32">out</name><op:operator pos:line="360" pos:column="35">.</op:operator><name pos:line="360" pos:column="36">println</name></name><argument_list pos:line="360" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="360" pos:column="44">"numberOfGrades: "</lit:literal> <op:operator pos:line="360" pos:column="63">+</op:operator> <name pos:line="360" pos:column="65">numberOfGrades</name> <op:operator pos:line="360" pos:column="80">+</op:operator> <lit:literal type="string" pos:line="360" pos:column="82">" minimumPeople:"</lit:literal> <op:operator pos:line="360" pos:column="100">+</op:operator> <name pos:line="360" pos:column="102">minimumPeople</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="361" pos:column="25">if<condition pos:line="361" pos:column="27">(<expr><name pos:line="361" pos:column="28">nextGraded</name><op:operator pos:line="361" pos:column="38">==</op:operator><lit:literal type="boolean" pos:line="361" pos:column="40">true</lit:literal></expr>)</condition><then><block pos:line="361" pos:column="45">{
				<expr_stmt><expr><name pos:line="362" pos:column="33">minimumPeople</name><op:operator pos:line="362" pos:column="46">-=</op:operator><lit:literal type="number" pos:line="362" pos:column="48">2</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="363" pos:column="33">nextGraded</name> <op:operator pos:line="363" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="363" pos:column="46">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			
			<decl_stmt><decl><type><annotation pos:line="366" pos:column="25">@<name pos:line="366" pos:column="26">SuppressWarnings</name><argument_list pos:line="366" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="366" pos:column="43">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
			<name pos:line="367" pos:column="25">int</name></type> <name pos:line="367" pos:column="29">UIN</name> <init pos:line="367" pos:column="33">= <expr><lit:literal type="number" pos:line="367" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="368" pos:column="25">double</name></type> <name pos:line="368" pos:column="32">marks</name> <init pos:line="368" pos:column="38">= <expr><lit:literal type="number" pos:line="368" pos:column="40">0.0</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="369" pos:column="25">while <condition pos:line="369" pos:column="31">(<expr><op:operator pos:line="369" pos:column="32">(</op:operator><call><name><name pos:line="369" pos:column="33">keyIterator</name><op:operator pos:line="369" pos:column="44">.</op:operator><name pos:line="369" pos:column="45">hasNext</name></name><argument_list pos:line="369" pos:column="52">()</argument_list></call><op:operator pos:line="369" pos:column="54">)</op:operator> <op:operator pos:line="369" pos:column="56">&amp;&amp;</op:operator> <name pos:line="369" pos:column="59">gradedStudents</name> <op:operator pos:line="369" pos:column="74">&lt;</op:operator> <name pos:line="369" pos:column="76">minimumPeople</name></expr> )</condition> <block pos:line="369" pos:column="92">{
				<decl_stmt><decl><type><name pos:line="370" pos:column="33">Student</name></type> <name pos:line="370" pos:column="41">student</name> <init pos:line="370" pos:column="49">= <expr><call><name><name pos:line="370" pos:column="51">keyIterator</name><op:operator pos:line="370" pos:column="62">.</op:operator><name pos:line="370" pos:column="63">next</name></name><argument_list pos:line="370" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="371" pos:column="33">UIN</name> <op:operator pos:line="371" pos:column="37">=</op:operator> <call><name><name pos:line="371" pos:column="39">student</name><op:operator pos:line="371" pos:column="46">.</op:operator><name pos:line="371" pos:column="47">getUIN</name></name><argument_list pos:line="371" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="372" pos:column="33">marks</name> <op:operator pos:line="372" pos:column="39">=</op:operator> <op:operator pos:line="372" pos:column="41">(</op:operator><name pos:line="372" pos:column="42">double</name><op:operator pos:line="372" pos:column="48">)</op:operator> <call><name><name pos:line="372" pos:column="50">sortedstudentTotalMarks</name><op:operator pos:line="372" pos:column="73">.</op:operator><name pos:line="372" pos:column="74">get</name></name><argument_list pos:line="372" pos:column="77">(<argument><expr><name pos:line="372" pos:column="78">student</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="373" pos:column="33">System</name><op:operator pos:line="373" pos:column="39">.</op:operator><name pos:line="373" pos:column="40">out</name><op:operator pos:line="373" pos:column="43">.</op:operator><name pos:line="373" pos:column="44">println</name></name><argument_list pos:line="373" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="52">"UIN-: "</lit:literal> <op:operator pos:line="373" pos:column="61">+</op:operator> <name pos:line="373" pos:column="63">UIN</name> <op:operator pos:line="373" pos:column="67">+</op:operator> <lit:literal type="string" pos:line="373" pos:column="69">" Grade-: "</lit:literal> <op:operator pos:line="373" pos:column="81">+</op:operator> <name pos:line="373" pos:column="83">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="374" pos:column="33">courseCurve</name><op:operator pos:line="374" pos:column="44">.</op:operator><name pos:line="374" pos:column="45">put</name></name><argument_list pos:line="374" pos:column="48">(<argument><expr><name pos:line="374" pos:column="49">student</name></expr></argument>, <argument><expr><name pos:line="374" pos:column="58">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="375" pos:column="33">gradedStudents</name><op:operator pos:line="375" pos:column="47">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="376" pos:column="33">studentsLeft</name><op:operator pos:line="376" pos:column="45">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="377" pos:column="33">System</name><op:operator pos:line="377" pos:column="39">.</op:operator><name pos:line="377" pos:column="40">out</name><op:operator pos:line="377" pos:column="43">.</op:operator><name pos:line="377" pos:column="44">println</name></name><argument_list pos:line="377" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="377" pos:column="52">"Graded Students: "</lit:literal> <op:operator pos:line="377" pos:column="72">+</op:operator> <name pos:line="377" pos:column="74">gradedStudents</name> <op:operator pos:line="377" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="377" pos:column="91">" studentsLeft: "</lit:literal> <op:operator pos:line="377" pos:column="109">+</op:operator> <name pos:line="377" pos:column="111">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="379" pos:column="25">if<condition pos:line="379" pos:column="27">(<expr><call><name><name pos:line="379" pos:column="28">keyIterator</name><op:operator pos:line="379" pos:column="39">.</op:operator><name pos:line="379" pos:column="40">hasNext</name></name><argument_list pos:line="379" pos:column="47">()</argument_list></call></expr>)</condition><then><block pos:line="379" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="380" pos:column="33">boolean</name></type> <name pos:line="380" pos:column="41">added</name> <init pos:line="380" pos:column="47">= <expr><lit:literal type="boolean" pos:line="380" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="381" pos:column="33">Student</name></type> <name pos:line="381" pos:column="41">student</name> <init pos:line="381" pos:column="49">= <expr><call><name><name pos:line="381" pos:column="51">keyIterator</name><op:operator pos:line="381" pos:column="62">.</op:operator><name pos:line="381" pos:column="63">next</name></name><argument_list pos:line="381" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><annotation pos:line="382" pos:column="33">@<name pos:line="382" pos:column="34">SuppressWarnings</name><argument_list pos:line="382" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="382" pos:column="51">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
				<name pos:line="383" pos:column="33">int</name></type> <name pos:line="383" pos:column="37">nextUIN</name> <init pos:line="383" pos:column="45">= <expr><call><name><name pos:line="383" pos:column="47">student</name><op:operator pos:line="383" pos:column="54">.</op:operator><name pos:line="383" pos:column="55">getUIN</name></name><argument_list pos:line="383" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="384" pos:column="33">double</name></type> <name pos:line="384" pos:column="40">nextMarks</name> <init pos:line="384" pos:column="50">= <expr><op:operator pos:line="384" pos:column="52">(</op:operator><name pos:line="384" pos:column="53">double</name><op:operator pos:line="384" pos:column="59">)</op:operator> <call><name><name pos:line="384" pos:column="61">sortedstudentTotalMarks</name><op:operator pos:line="384" pos:column="84">.</op:operator><name pos:line="384" pos:column="85">get</name></name><argument_list pos:line="384" pos:column="88">(<argument><expr><name pos:line="384" pos:column="89">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><name pos:line="386" pos:column="33">System</name><op:operator pos:line="386" pos:column="39">.</op:operator><name pos:line="386" pos:column="40">out</name><op:operator pos:line="386" pos:column="43">.</op:operator><name pos:line="386" pos:column="44">println</name></name><argument_list pos:line="386" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="386" pos:column="52">"nextUIN: "</lit:literal><op:operator pos:line="386" pos:column="63">+</op:operator><name pos:line="386" pos:column="64">nextUIN</name><op:operator pos:line="386" pos:column="71">+</op:operator><lit:literal type="string" pos:line="386" pos:column="72">" nextMarks: "</lit:literal> <op:operator pos:line="386" pos:column="87">+</op:operator> <name pos:line="386" pos:column="89">nextMarks</name> <op:operator pos:line="386" pos:column="99">+</op:operator><lit:literal type="string" pos:line="386" pos:column="100">" mks: "</lit:literal><op:operator pos:line="386" pos:column="108">+</op:operator> <name pos:line="386" pos:column="110">marks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<decl_stmt><decl><type><name pos:line="388" pos:column="33">double</name></type> <name pos:line="388" pos:column="40">difference</name> <init pos:line="388" pos:column="51">= <expr><name pos:line="388" pos:column="53">marks</name><op:operator pos:line="388" pos:column="58">-</op:operator><name pos:line="388" pos:column="59">nextMarks</name></expr></init></decl>;</decl_stmt>
				
				<while pos:line="390" pos:column="33">while<condition pos:line="390" pos:column="38">(<expr><call><name><name pos:line="390" pos:column="39">keyIterator</name><op:operator pos:line="390" pos:column="50">.</op:operator><name pos:line="390" pos:column="51">hasNext</name></name><argument_list pos:line="390" pos:column="58">()</argument_list></call> <op:operator pos:line="390" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="390" pos:column="64">(</op:operator><name pos:line="390" pos:column="65">gradeLevel</name><op:operator pos:line="390" pos:column="75">&lt;</op:operator> <name pos:line="390" pos:column="77">numberOfGrades</name><op:operator pos:line="390" pos:column="91">)</op:operator></expr>)</condition> <block pos:line="390" pos:column="94">{
					<expr_stmt><expr><name pos:line="391" pos:column="41">added</name> <op:operator pos:line="391" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="391" pos:column="49">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="392" pos:column="41">marks</name> <op:operator pos:line="392" pos:column="47">=</op:operator> <name pos:line="392" pos:column="49">nextMarks</name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="393" pos:column="41">Student</name></type> <name pos:line="393" pos:column="49">nextstudent</name> <init pos:line="393" pos:column="61">= <expr><call><name><name pos:line="393" pos:column="63">keyIterator</name><op:operator pos:line="393" pos:column="74">.</op:operator><name pos:line="393" pos:column="75">next</name></name><argument_list pos:line="393" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="394" pos:column="41">int</name></type> <name pos:line="394" pos:column="45">nextUIN2</name> <init pos:line="394" pos:column="54">= <expr><call><name><name pos:line="394" pos:column="56">nextstudent</name><op:operator pos:line="394" pos:column="67">.</op:operator><name pos:line="394" pos:column="68">getUIN</name></name><argument_list pos:line="394" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="395" pos:column="41">nextMarks</name> <op:operator pos:line="395" pos:column="51">=</op:operator> <op:operator pos:line="395" pos:column="53">(</op:operator><name pos:line="395" pos:column="54">double</name><op:operator pos:line="395" pos:column="60">)</op:operator> <call><name><name pos:line="395" pos:column="62">sortedstudentTotalMarks</name><op:operator pos:line="395" pos:column="85">.</op:operator><name pos:line="395" pos:column="86">get</name></name><argument_list pos:line="395" pos:column="89">(<argument><expr><name pos:line="395" pos:column="90">nextstudent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="396" pos:column="41">double</name></type> <name pos:line="396" pos:column="48">nextDifference</name> <init pos:line="396" pos:column="63">= <expr><name pos:line="396" pos:column="65">marks</name> <op:operator pos:line="396" pos:column="71">-</op:operator> <name pos:line="396" pos:column="73">nextMarks</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="397" pos:column="41">System</name><op:operator pos:line="397" pos:column="47">.</op:operator><name pos:line="397" pos:column="48">out</name><op:operator pos:line="397" pos:column="51">.</op:operator><name pos:line="397" pos:column="52">println</name></name><argument_list pos:line="397" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="397" pos:column="60">"nextUIN2: "</lit:literal> <op:operator pos:line="397" pos:column="73">+</op:operator> <name pos:line="397" pos:column="75">nextUIN2</name> <op:operator pos:line="397" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="397" pos:column="86">" nextMarks-: "</lit:literal> <op:operator pos:line="397" pos:column="102">+</op:operator> <name pos:line="397" pos:column="104">nextMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="398" pos:column="41">if<condition pos:line="398" pos:column="43">(<expr><name pos:line="398" pos:column="44">nextDifference</name> <op:operator pos:line="398" pos:column="59">&gt;=</op:operator> <name pos:line="398" pos:column="62">difference</name></expr>)</condition><then><block pos:line="398" pos:column="73">{
						<comment type="line" pos:line="399" pos:column="49">//System.out.println("UIN: " + nextUIN + " Grade: " + studentGrade);</comment>
						<expr_stmt><expr><call><name><name pos:line="400" pos:column="49">courseCurve</name><op:operator pos:line="400" pos:column="60">.</op:operator><name pos:line="400" pos:column="61">put</name></name><argument_list pos:line="400" pos:column="64">(<argument><expr><name pos:line="400" pos:column="65">student</name></expr></argument>, <argument><expr><name pos:line="400" pos:column="74">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="401" pos:column="49">gradedStudents</name><op:operator pos:line="401" pos:column="63">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="402" pos:column="49">studentsLeft</name><op:operator pos:line="402" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="403" pos:column="49">System</name><op:operator pos:line="403" pos:column="55">.</op:operator><name pos:line="403" pos:column="56">out</name><op:operator pos:line="403" pos:column="59">.</op:operator><name pos:line="403" pos:column="60">println</name></name><argument_list pos:line="403" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="403" pos:column="68">"Graded Students: "</lit:literal> <op:operator pos:line="403" pos:column="88">+</op:operator> <name pos:line="403" pos:column="90">gradedStudents</name> <op:operator pos:line="403" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="403" pos:column="107">" studentsLeft: "</lit:literal> <op:operator pos:line="403" pos:column="125">+</op:operator> <name pos:line="403" pos:column="127">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="404" pos:column="49">grade</name> <op:operator pos:line="404" pos:column="55">=</op:operator> <call><name><name pos:line="404" pos:column="57">GradeSystem</name><op:operator pos:line="404" pos:column="68">.</op:operator><name pos:line="404" pos:column="69">getGradeForGradeLevel</name></name><argument_list pos:line="404" pos:column="90">(<argument><expr><op:operator pos:line="404" pos:column="91">(</op:operator><name pos:line="404" pos:column="92">gradeLevel</name><op:operator pos:line="404" pos:column="102">+</op:operator><lit:literal type="number" pos:line="404" pos:column="103">1</lit:literal><op:operator pos:line="404" pos:column="104">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="405" pos:column="49">studentGrade</name> <op:operator pos:line="405" pos:column="62">=</op:operator> <call><name><name pos:line="405" pos:column="64">grade</name><op:operator pos:line="405" pos:column="69">.</op:operator><name pos:line="405" pos:column="70">getGrade</name></name><argument_list pos:line="405" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="406" pos:column="49">System</name><op:operator pos:line="406" pos:column="55">.</op:operator><name pos:line="406" pos:column="56">out</name><op:operator pos:line="406" pos:column="59">.</op:operator><name pos:line="406" pos:column="60">println</name></name><argument_list pos:line="406" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="406" pos:column="68">"NEXTUINinIF: "</lit:literal> <op:operator pos:line="406" pos:column="84">+</op:operator> <name pos:line="406" pos:column="86">nextUIN2</name> <op:operator pos:line="406" pos:column="95">+</op:operator> <lit:literal type="string" pos:line="406" pos:column="97">" Grade: "</lit:literal> <op:operator pos:line="406" pos:column="108">+</op:operator> <name pos:line="406" pos:column="110">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="407" pos:column="49">courseCurve</name><op:operator pos:line="407" pos:column="60">.</op:operator><name pos:line="407" pos:column="61">put</name></name><argument_list pos:line="407" pos:column="64">(<argument><expr><name pos:line="407" pos:column="65">nextstudent</name></expr></argument>, <argument><expr><name pos:line="407" pos:column="78">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="408" pos:column="49">gradedStudents</name><op:operator pos:line="408" pos:column="63">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="409" pos:column="49">studentsLeft</name><op:operator pos:line="409" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="410" pos:column="49">System</name><op:operator pos:line="410" pos:column="55">.</op:operator><name pos:line="410" pos:column="56">out</name><op:operator pos:line="410" pos:column="59">.</op:operator><name pos:line="410" pos:column="60">println</name></name><argument_list pos:line="410" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="410" pos:column="68">"Graded Students: "</lit:literal> <op:operator pos:line="410" pos:column="88">+</op:operator> <name pos:line="410" pos:column="90">gradedStudents</name> <op:operator pos:line="410" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="410" pos:column="107">" studentsLeft: "</lit:literal> <op:operator pos:line="410" pos:column="125">+</op:operator> <name pos:line="410" pos:column="127">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="411" pos:column="49">added</name> <op:operator pos:line="411" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="411" pos:column="57">false</lit:literal></expr>;</expr_stmt>
						<break pos:line="412" pos:column="49">break;</break>
					}</block></then> <else pos:line="413" pos:column="43">else <if pos:line="413" pos:column="48">if <condition pos:line="413" pos:column="51">(<expr><name pos:line="413" pos:column="52">nextDifference</name> <op:operator pos:line="413" pos:column="67">&lt;</op:operator> <name pos:line="413" pos:column="69">difference</name></expr>)</condition><then><block pos:line="413" pos:column="80">{
						<expr_stmt><expr><name pos:line="414" pos:column="49">gradeLevel</name><op:operator pos:line="414" pos:column="59">++</op:operator></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="415" pos:column="49">GradeSystem</name></type> <name pos:line="415" pos:column="61">nextGrade</name> <init pos:line="415" pos:column="71">= <expr><call><name><name pos:line="415" pos:column="73">GradeSystem</name><op:operator pos:line="415" pos:column="84">.</op:operator><name pos:line="415" pos:column="85">getGradeForGradeLevel</name></name><argument_list pos:line="415" pos:column="106">(<argument><expr><name pos:line="415" pos:column="107">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="416" pos:column="49">String</name></type> <name pos:line="416" pos:column="56">nextStudentGrade</name> <init pos:line="416" pos:column="73">= <expr><call><name><name pos:line="416" pos:column="75">nextGrade</name><op:operator pos:line="416" pos:column="84">.</op:operator><name pos:line="416" pos:column="85">getGrade</name></name><argument_list pos:line="416" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="417" pos:column="49">System</name><op:operator pos:line="417" pos:column="55">.</op:operator><name pos:line="417" pos:column="56">out</name><op:operator pos:line="417" pos:column="59">.</op:operator><name pos:line="417" pos:column="60">println</name></name><argument_list pos:line="417" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="417" pos:column="68">"UIN: "</lit:literal> <op:operator pos:line="417" pos:column="76">+</op:operator> <name pos:line="417" pos:column="78">UIN</name> <op:operator pos:line="417" pos:column="82">+</op:operator> <lit:literal type="string" pos:line="417" pos:column="84">" Grade: "</lit:literal> <op:operator pos:line="417" pos:column="95">+</op:operator> <name pos:line="417" pos:column="97">studentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="418" pos:column="49">System</name><op:operator pos:line="418" pos:column="55">.</op:operator><name pos:line="418" pos:column="56">out</name><op:operator pos:line="418" pos:column="59">.</op:operator><name pos:line="418" pos:column="60">println</name></name><argument_list pos:line="418" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="418" pos:column="68">"NEXTUIN: "</lit:literal> <op:operator pos:line="418" pos:column="80">+</op:operator> <name pos:line="418" pos:column="82">nextUIN</name> <op:operator pos:line="418" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="418" pos:column="92">" Grade: "</lit:literal> <op:operator pos:line="418" pos:column="103">+</op:operator> <name pos:line="418" pos:column="105">nextStudentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="419" pos:column="49">courseCurve</name><op:operator pos:line="419" pos:column="60">.</op:operator><name pos:line="419" pos:column="61">put</name></name><argument_list pos:line="419" pos:column="64">(<argument><expr><name pos:line="419" pos:column="65">student</name></expr></argument>, <argument><expr><name pos:line="419" pos:column="74">nextStudentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="420" pos:column="49">gradedStudents</name><op:operator pos:line="420" pos:column="63">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="421" pos:column="49">studentsLeft</name><op:operator pos:line="421" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="422" pos:column="49">System</name><op:operator pos:line="422" pos:column="55">.</op:operator><name pos:line="422" pos:column="56">out</name><op:operator pos:line="422" pos:column="59">.</op:operator><name pos:line="422" pos:column="60">println</name></name><argument_list pos:line="422" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="422" pos:column="68">"Graded Students: "</lit:literal> <op:operator pos:line="422" pos:column="88">+</op:operator> <name pos:line="422" pos:column="90">gradedStudents</name> <op:operator pos:line="422" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="422" pos:column="107">" studentsLeft: "</lit:literal> <op:operator pos:line="422" pos:column="125">+</op:operator> <name pos:line="422" pos:column="127">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="423" pos:column="49">courseCurve</name><op:operator pos:line="423" pos:column="60">.</op:operator><name pos:line="423" pos:column="61">put</name></name><argument_list pos:line="423" pos:column="64">(<argument><expr><name pos:line="423" pos:column="65">nextstudent</name></expr></argument>, <argument><expr><name pos:line="423" pos:column="78">nextStudentGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="424" pos:column="49">gradedStudents</name><op:operator pos:line="424" pos:column="63">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="425" pos:column="49">studentsLeft</name><op:operator pos:line="425" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="426" pos:column="49">System</name><op:operator pos:line="426" pos:column="55">.</op:operator><name pos:line="426" pos:column="56">out</name><op:operator pos:line="426" pos:column="59">.</op:operator><name pos:line="426" pos:column="60">println</name></name><argument_list pos:line="426" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="426" pos:column="68">"Graded Students: "</lit:literal> <op:operator pos:line="426" pos:column="88">+</op:operator> <name pos:line="426" pos:column="90">gradedStudents</name> <op:operator pos:line="426" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="426" pos:column="107">" studentsLeft: "</lit:literal> <op:operator pos:line="426" pos:column="125">+</op:operator> <name pos:line="426" pos:column="127">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="427" pos:column="49">added</name> <op:operator pos:line="427" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="427" pos:column="57">false</lit:literal></expr>;</expr_stmt>
						<comment type="line" pos:line="428" pos:column="49">//nextGraded = true;</comment>
						<break pos:line="429" pos:column="49">break;</break>
					}</block></then></if></else></if>
					
					
					
				}</block></while> 
				<expr_stmt><expr><call><name><name pos:line="435" pos:column="33">System</name><op:operator pos:line="435" pos:column="39">.</op:operator><name pos:line="435" pos:column="40">out</name><op:operator pos:line="435" pos:column="43">.</op:operator><name pos:line="435" pos:column="44">println</name></name><argument_list pos:line="435" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="435" pos:column="52">"Added: "</lit:literal> <op:operator pos:line="435" pos:column="62">+</op:operator><name pos:line="435" pos:column="63">added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="436" pos:column="33">if <condition pos:line="436" pos:column="36">(<expr><name pos:line="436" pos:column="37">added</name><op:operator pos:line="436" pos:column="42">==</op:operator><lit:literal type="boolean" pos:line="436" pos:column="44">false</lit:literal></expr>)</condition><then><block pos:line="436" pos:column="50">{
					<expr_stmt><expr><call><name><name pos:line="437" pos:column="41">System</name><op:operator pos:line="437" pos:column="47">.</op:operator><name pos:line="437" pos:column="48">out</name><op:operator pos:line="437" pos:column="51">.</op:operator><name pos:line="437" pos:column="52">println</name></name><argument_list pos:line="437" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="437" pos:column="60">"Graded Students--: "</lit:literal> <op:operator pos:line="437" pos:column="82">+</op:operator> <name pos:line="437" pos:column="84">gradedStudents</name> <op:operator pos:line="437" pos:column="99">+</op:operator> <lit:literal type="string" pos:line="437" pos:column="101">" studentsLeft: "</lit:literal> <op:operator pos:line="437" pos:column="119">+</op:operator> <name pos:line="437" pos:column="121">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="438" pos:column="41">System</name><op:operator pos:line="438" pos:column="47">.</op:operator><name pos:line="438" pos:column="48">out</name><op:operator pos:line="438" pos:column="51">.</op:operator><name pos:line="438" pos:column="52">println</name></name><argument_list pos:line="438" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="438" pos:column="60">"gradelevel: "</lit:literal><op:operator pos:line="438" pos:column="74">+</op:operator><name pos:line="438" pos:column="75">gradeLevel</name> <op:operator pos:line="438" pos:column="86">+</op:operator> <lit:literal type="string" pos:line="438" pos:column="88">" numberOfGrades: "</lit:literal> <op:operator pos:line="438" pos:column="108">+</op:operator><name pos:line="438" pos:column="109">numberOfGrades</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="439" pos:column="41">if<condition pos:line="439" pos:column="43">(<expr><name pos:line="439" pos:column="44">studentsLeft</name> <op:operator pos:line="439" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="439" pos:column="59">0</lit:literal> <op:operator pos:line="439" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="439" pos:column="64">(</op:operator><name pos:line="439" pos:column="65">gradeLevel</name> <op:operator pos:line="439" pos:column="76">==</op:operator> <name pos:line="439" pos:column="79">numberOfGrades</name><op:operator pos:line="439" pos:column="93">-</op:operator><lit:literal type="number" pos:line="439" pos:column="94">1</lit:literal><op:operator pos:line="439" pos:column="95">)</op:operator></expr> )</condition><then><block pos:line="439" pos:column="98">{
						<comment type="line" pos:line="440" pos:column="49">//Student student = keyIterator.next();</comment>
						<decl_stmt><decl><type><name pos:line="441" pos:column="49">GradeSystem</name></type> <name pos:line="441" pos:column="61">grade2</name> <init pos:line="441" pos:column="68">= <expr><call><name><name pos:line="441" pos:column="70">GradeSystem</name><op:operator pos:line="441" pos:column="81">.</op:operator><name pos:line="441" pos:column="82">getGradeForGradeLevel</name></name><argument_list pos:line="441" pos:column="103">(<argument><expr><name pos:line="441" pos:column="104">gradeLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="442" pos:column="49">String</name></type> <name pos:line="442" pos:column="56">studentGrade2</name> <init pos:line="442" pos:column="70">= <expr><call><name><name pos:line="442" pos:column="72">grade</name><op:operator pos:line="442" pos:column="77">.</op:operator><name pos:line="442" pos:column="78">getGrade</name></name><argument_list pos:line="442" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="443" pos:column="49">courseCurve</name><op:operator pos:line="443" pos:column="60">.</op:operator><name pos:line="443" pos:column="61">put</name></name><argument_list pos:line="443" pos:column="64">(<argument><expr><name pos:line="443" pos:column="65">student</name></expr></argument>, <argument><expr><name pos:line="443" pos:column="74">studentGrade2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="444" pos:column="49">studentsLeft</name><op:operator pos:line="444" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="445" pos:column="49">System</name><op:operator pos:line="445" pos:column="55">.</op:operator><name pos:line="445" pos:column="56">out</name><op:operator pos:line="445" pos:column="59">.</op:operator><name pos:line="445" pos:column="60">println</name></name><argument_list pos:line="445" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="445" pos:column="68">"Graded Students: "</lit:literal> <op:operator pos:line="445" pos:column="88">+</op:operator> <name pos:line="445" pos:column="90">gradedStudents</name> <op:operator pos:line="445" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="445" pos:column="107">" studentsLeft: "</lit:literal> <op:operator pos:line="445" pos:column="125">+</op:operator> <name pos:line="445" pos:column="127">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="446" pos:column="49">if<condition pos:line="446" pos:column="51">(<expr><call><name><name pos:line="446" pos:column="52">keyIterator</name><op:operator pos:line="446" pos:column="63">.</op:operator><name pos:line="446" pos:column="64">hasNext</name></name><argument_list pos:line="446" pos:column="71">()</argument_list></call></expr>)</condition><then><block pos:line="446" pos:column="74">{
							<expr_stmt><expr><name pos:line="447" pos:column="57">student</name> <op:operator pos:line="447" pos:column="65">=</op:operator> <call><name><name pos:line="447" pos:column="67">keyIterator</name><op:operator pos:line="447" pos:column="78">.</op:operator><name pos:line="447" pos:column="79">next</name></name><argument_list pos:line="447" pos:column="83">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="448" pos:column="57">grade2</name> <op:operator pos:line="448" pos:column="64">=</op:operator> <call><name><name pos:line="448" pos:column="66">GradeSystem</name><op:operator pos:line="448" pos:column="77">.</op:operator><name pos:line="448" pos:column="78">getGradeForGradeLevel</name></name><argument_list pos:line="448" pos:column="99">(<argument><expr><name pos:line="448" pos:column="100">gradeLevel</name><op:operator pos:line="448" pos:column="110">+</op:operator><lit:literal type="number" pos:line="448" pos:column="111">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="449" pos:column="57">studentGrade2</name> <op:operator pos:line="449" pos:column="71">=</op:operator> <call><name><name pos:line="449" pos:column="73">grade</name><op:operator pos:line="449" pos:column="78">.</op:operator><name pos:line="449" pos:column="79">getGrade</name></name><argument_list pos:line="449" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="450" pos:column="57">courseCurve</name><op:operator pos:line="450" pos:column="68">.</op:operator><name pos:line="450" pos:column="69">put</name></name><argument_list pos:line="450" pos:column="72">(<argument><expr><name pos:line="450" pos:column="73">student</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="82">studentGrade2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="451" pos:column="57">studentsLeft</name><op:operator pos:line="451" pos:column="69">--</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="452" pos:column="57">System</name><op:operator pos:line="452" pos:column="63">.</op:operator><name pos:line="452" pos:column="64">out</name><op:operator pos:line="452" pos:column="67">.</op:operator><name pos:line="452" pos:column="68">println</name></name><argument_list pos:line="452" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="452" pos:column="76">"Graded Students: "</lit:literal> <op:operator pos:line="452" pos:column="96">+</op:operator> <name pos:line="452" pos:column="98">gradedStudents</name> <op:operator pos:line="452" pos:column="113">+</op:operator> <lit:literal type="string" pos:line="452" pos:column="115">" studentsLeft: "</lit:literal> <op:operator pos:line="452" pos:column="133">+</op:operator> <name pos:line="452" pos:column="135">studentsLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						
					}</block></then></if>
				}</block></then></if>
			
				
			
			}</block></then></if>
			
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="463" pos:column="17">curve</name><op:operator pos:line="463" pos:column="22">.</op:operator><name pos:line="463" pos:column="23">setCourseCurve</name></name><argument_list pos:line="463" pos:column="37">(<argument><expr><name pos:line="463" pos:column="38">courseCurve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="464" pos:column="17">return <expr><name pos:line="464" pos:column="24">curve</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="467" pos:column="9">// Function to update the final grades in the StudentEnrollment table</comment>
	<function><type><specifier pos:line="468" pos:column="9">public</specifier> <name pos:line="468" pos:column="16">boolean</name></type> <name pos:line="468" pos:column="24">UpdateGrades</name><parameter_list pos:line="468" pos:column="36">()</parameter_list><block pos:line="468" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="469" pos:column="17">boolean</name></type> <name pos:line="469" pos:column="25">gradesUpdated</name> <init pos:line="469" pos:column="39">= <expr><lit:literal type="boolean" pos:line="469" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="471" pos:column="17">int</name></type> <name pos:line="471" pos:column="21">offerID</name> <init pos:line="471" pos:column="29">= <expr><call><name><name pos:line="471" pos:column="31">this</name><op:operator pos:line="471" pos:column="35">.</op:operator><name pos:line="471" pos:column="36">getOfferID</name></name><argument_list pos:line="471" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="472" pos:column="17">CourseOffered</name></type> <name pos:line="472" pos:column="31">offeredCourse</name> <init pos:line="472" pos:column="45">= <expr><lit:literal type="null" pos:line="472" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="473" pos:column="17">try <block pos:line="473" pos:column="21">{
			<expr_stmt><expr><name pos:line="474" pos:column="25">offeredCourse</name> <op:operator pos:line="474" pos:column="39">=</op:operator> <op:operator pos:line="474" pos:column="41">new</op:operator> <call><name pos:line="474" pos:column="45">CourseOffered</name><argument_list pos:line="474" pos:column="58">(<argument><expr><name pos:line="474" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="475" pos:column="19">catch <parameter_list pos:line="475" pos:column="25">(<param><decl><type><name><name pos:line="475" pos:column="26">Course</name><op:operator pos:line="475" pos:column="32">.</op:operator><name pos:line="475" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="475" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="476" pos:column="25">e</name><op:operator pos:line="476" pos:column="26">.</op:operator><name pos:line="476" pos:column="27">printStackTrace</name></name><argument_list pos:line="476" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="477" pos:column="19">catch <parameter_list pos:line="477" pos:column="25">(<param><decl><type><name><name pos:line="477" pos:column="26">CourseOffered</name><op:operator pos:line="477" pos:column="39">.</op:operator><name pos:line="477" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="477" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="477" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="478" pos:column="25">e</name><op:operator pos:line="478" pos:column="26">.</op:operator><name pos:line="478" pos:column="27">printStackTrace</name></name><argument_list pos:line="478" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name><name pos:line="481" pos:column="17">HashMap</name><argument_list pos:line="481" pos:column="24">&lt;<argument><name pos:line="481" pos:column="25">Student</name></argument>,<argument><name pos:line="481" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="481" pos:column="41">studentGrades</name> <init pos:line="481" pos:column="55">= <expr><call><name><name pos:line="481" pos:column="57">this</name><op:operator pos:line="481" pos:column="61">.</op:operator><name pos:line="481" pos:column="62">getCourseCurve</name></name><argument_list pos:line="481" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name pos:line="483" pos:column="17">gradesUpdated</name> <op:operator pos:line="483" pos:column="31">=</op:operator> <call><name><name pos:line="483" pos:column="33">StudentEnrollment</name><op:operator pos:line="483" pos:column="50">.</op:operator><name pos:line="483" pos:column="51">updateAllStudentGrade</name></name><argument_list pos:line="483" pos:column="72">(<argument><expr><name pos:line="483" pos:column="73">studentGrades</name></expr></argument>, <argument><expr><name pos:line="483" pos:column="88">offeredCourse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return pos:line="485" pos:column="17">return <expr><name pos:line="485" pos:column="24">gradesUpdated</name></expr>;</return>
	}</block></function>
	
	<comment type="line" pos:line="488" pos:column="9">// To sort a HashMap</comment>
	<comment type="line" pos:line="489" pos:column="9">// [1] http://stackoverflow.com/questions/8119366/sorting-hashmap-by-values</comment>
	<function><type><specifier pos:line="490" pos:column="9">private</specifier> <specifier pos:line="490" pos:column="17">static</specifier> <name><name pos:line="490" pos:column="24">HashMap</name><argument_list pos:line="490" pos:column="31">&lt;<argument><name pos:line="490" pos:column="32">Student</name></argument>, <argument><name pos:line="490" pos:column="41">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="490" pos:column="49">sortHashMap</name><parameter_list pos:line="490" pos:column="60">(<param><decl><type><name><name pos:line="490" pos:column="61">HashMap</name><argument_list pos:line="490" pos:column="68">&lt;<argument><name pos:line="490" pos:column="69">Student</name></argument>, <argument><name pos:line="490" pos:column="78">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="490" pos:column="86">unsortedStudentTotalMarks</name></decl></param>)</parameter_list>
    <block pos:line="491" pos:column="5">{

        <decl_stmt><decl><type><name><name pos:line="493" pos:column="9">List</name><argument_list pos:line="493" pos:column="13">&lt;<argument><name><name pos:line="493" pos:column="14">Entry</name><argument_list pos:line="493" pos:column="19">&lt;<argument><name pos:line="493" pos:column="20">Student</name></argument>, <argument><name pos:line="493" pos:column="29">Double</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="493" pos:column="38">list</name> <init pos:line="493" pos:column="43">= <expr><op:operator pos:line="493" pos:column="45">new</op:operator> <call><name><name pos:line="493" pos:column="49">LinkedList</name><argument_list pos:line="493" pos:column="59">&lt;<argument><name><name pos:line="493" pos:column="60">Entry</name><argument_list pos:line="493" pos:column="65">&lt;<argument><name pos:line="493" pos:column="66">Student</name></argument>, <argument><name pos:line="493" pos:column="75">Double</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="493" pos:column="83">(<argument><expr><call><name><name pos:line="493" pos:column="84">unsortedStudentTotalMarks</name><op:operator pos:line="493" pos:column="109">.</op:operator><name pos:line="493" pos:column="110">entrySet</name></name><argument_list pos:line="493" pos:column="118">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="495" pos:column="9">// Sorting the list based on values</comment>
        <expr_stmt><expr><call><name><name pos:line="496" pos:column="9">Collections</name><op:operator pos:line="496" pos:column="20">.</op:operator><name pos:line="496" pos:column="21">sort</name></name><argument_list pos:line="496" pos:column="25">(<argument><expr><name pos:line="496" pos:column="26">list</name></expr></argument>, <argument><expr><op:operator pos:line="496" pos:column="32">new</op:operator> <class><super><name><name pos:line="496" pos:column="36">Comparator</name><argument_list pos:line="496" pos:column="46">&lt;<argument><name><name pos:line="496" pos:column="47">Entry</name><argument_list pos:line="496" pos:column="52">&lt;<argument><name pos:line="496" pos:column="53">Student</name></argument>, <argument><name pos:line="496" pos:column="62">Double</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list pos:line="496" pos:column="70">()</argument_list>
        <block pos:line="497" pos:column="9">{
            <function><type><specifier pos:line="498" pos:column="13">public</specifier> <name pos:line="498" pos:column="20">int</name></type> <name pos:line="498" pos:column="24">compare</name><parameter_list pos:line="498" pos:column="31">(<param><decl><type><name><name pos:line="498" pos:column="32">Entry</name><argument_list pos:line="498" pos:column="37">&lt;<argument><name pos:line="498" pos:column="38">Student</name></argument>, <argument><name pos:line="498" pos:column="47">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="498" pos:column="55">studentTotalMarks1</name></decl></param>, <param><decl><type><name><name pos:line="498" pos:column="75">Entry</name><argument_list pos:line="498" pos:column="80">&lt;<argument><name pos:line="498" pos:column="81">Student</name></argument>, <argument><name pos:line="498" pos:column="90">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="498" pos:column="98">studentTotalMarks2</name></decl></param>)</parameter_list> <block pos:line="498" pos:column="118">{
                <return pos:line="499" pos:column="17">return <expr><call><name><name pos:line="499" pos:column="24">studentTotalMarks2</name><op:operator pos:line="499" pos:column="42">.</op:operator><name pos:line="499" pos:column="43">getValue</name></name><argument_list pos:line="499" pos:column="51">()</argument_list></call><op:operator pos:line="499" pos:column="53">.</op:operator><call><name pos:line="499" pos:column="54">compareTo</name><argument_list pos:line="499" pos:column="63">(<argument><expr><call><name><name pos:line="499" pos:column="64">studentTotalMarks1</name><op:operator pos:line="499" pos:column="82">.</op:operator><name pos:line="499" pos:column="83">getValue</name></name><argument_list pos:line="499" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="503" pos:column="9">// Maintaining insertion order with the help of LinkedList</comment>
        <decl_stmt><decl><type><name><name pos:line="504" pos:column="9">HashMap</name><argument_list pos:line="504" pos:column="16">&lt;<argument><name pos:line="504" pos:column="17">Student</name></argument>, <argument><name pos:line="504" pos:column="26">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="504" pos:column="34">sortedstudentTotalMarks</name> <init pos:line="504" pos:column="58">= <expr><op:operator pos:line="504" pos:column="60">new</op:operator> <call><name><name pos:line="504" pos:column="64">LinkedHashMap</name><argument_list pos:line="504" pos:column="77">&lt;<argument><name pos:line="504" pos:column="78">Student</name></argument>, <argument><name pos:line="504" pos:column="87">Double</name></argument>&gt;</argument_list></name><argument_list pos:line="504" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:line="505" pos:column="9">for (<init><decl><type><name><name pos:line="505" pos:column="14">Entry</name><argument_list pos:line="505" pos:column="19">&lt;<argument><name pos:line="505" pos:column="20">Student</name></argument>, <argument><name pos:line="505" pos:column="29">Double</name></argument>&gt;</argument_list></name></type> <name pos:line="505" pos:column="37">entry</name> <range pos:line="505" pos:column="43">: <expr><name pos:line="505" pos:column="45">list</name></expr></range></decl></init>) <block pos:line="505" pos:column="51">{
        	<expr_stmt><expr><call><name><name pos:line="506" pos:column="17">sortedstudentTotalMarks</name><op:operator pos:line="506" pos:column="40">.</op:operator><name pos:line="506" pos:column="41">put</name></name><argument_list pos:line="506" pos:column="44">(<argument><expr><call><name><name pos:line="506" pos:column="45">entry</name><op:operator pos:line="506" pos:column="50">.</op:operator><name pos:line="506" pos:column="51">getKey</name></name><argument_list pos:line="506" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="506" pos:column="61">entry</name><op:operator pos:line="506" pos:column="66">.</op:operator><name pos:line="506" pos:column="67">getValue</name></name><argument_list pos:line="506" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return pos:line="509" pos:column="9">return <expr><name pos:line="509" pos:column="16">sortedstudentTotalMarks</name></expr>;</return>
    }</block></function>

	
	<function><type><specifier pos:line="513" pos:column="9">public</specifier> <specifier pos:line="513" pos:column="16">static</specifier> <name pos:line="513" pos:column="23">void</name></type> <name pos:line="513" pos:column="28">main</name><parameter_list pos:line="513" pos:column="32">(<param><decl><type><name><name pos:line="513" pos:column="33">String</name><index pos:line="513" pos:column="39">[]</index></name></type> <name pos:line="513" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="513" pos:column="47">{
		
		<comment type="line" pos:line="515" pos:column="17">// To test percentage curve</comment>
<comment type="line" pos:line="516" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="517" pos:column="1">//		List&lt;Integer&gt; curvingCriteria = new ArrayList&lt;Integer&gt;();</comment>
<comment type="line" pos:line="518" pos:column="1">//		curvingCriteria.add(30);</comment>
<comment type="line" pos:line="519" pos:column="1">//		curvingCriteria.add(40);</comment>
<comment type="line" pos:line="520" pos:column="1">//		curvingCriteria.add(30);</comment>
<comment type="line" pos:line="521" pos:column="1">//				</comment>
<comment type="line" pos:line="522" pos:column="1">//		CourseCurve curve = CourseCurve.calculatePercentageCurve(offerID, curvingCriteria);</comment>
<comment type="line" pos:line="523" pos:column="1">//		</comment>
<comment type="line" pos:line="524" pos:column="1">//		HashMap&lt;Student,String&gt; courseCurve = curve.getCourseCurve();</comment>
<comment type="line" pos:line="525" pos:column="1">//		System.out.println("----------------------------------");</comment>
<comment type="line" pos:line="526" pos:column="1">//		for(Student students:courseCurve.keySet()){</comment>
<comment type="line" pos:line="527" pos:column="1">//			int UIN = students.getUIN();</comment>
<comment type="line" pos:line="528" pos:column="1">//			String grade = courseCurve.get(students);</comment>
<comment type="line" pos:line="529" pos:column="1">//			</comment>
<comment type="line" pos:line="530" pos:column="1">//			System.out.println("UIN: " + UIN + " Grade: " + grade);</comment>
<comment type="line" pos:line="531" pos:column="1">//		</comment>
<comment type="line" pos:line="532" pos:column="1">//		}</comment>
<comment type="line" pos:line="533" pos:column="1">//		CourseOffered offered = null;</comment>
<comment type="line" pos:line="534" pos:column="1">//		try {</comment>
<comment type="line" pos:line="535" pos:column="1">//			offered = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="536" pos:column="1">//		} catch (Course.CourseDoesNotExistException</comment>
<comment type="line" pos:line="537" pos:column="1">//				| CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line" pos:line="538" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="539" pos:column="1">//		}</comment>
<comment type="line" pos:line="540" pos:column="1">//		</comment>
<comment type="line" pos:line="541" pos:column="1">//		StudentEnrollment.updateAllStudentGrade(courseCurve, offered);</comment>
		
		<comment type="line" pos:line="543" pos:column="17">// To test absolute curve</comment>
<comment type="line" pos:line="544" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="545" pos:column="1">//		List&lt;Integer&gt; curvingCriteria = new ArrayList&lt;Integer&gt;();</comment>
<comment type="line" pos:line="546" pos:column="1">//		curvingCriteria.add(65);</comment>
<comment type="line" pos:line="547" pos:column="1">//		curvingCriteria.add(50);</comment>
<comment type="line" pos:line="548" pos:column="1">//		curvingCriteria.add(45);</comment>
<comment type="line" pos:line="549" pos:column="1">//				</comment>
<comment type="line" pos:line="550" pos:column="1">//		CourseCurve curve = CourseCurve.calculateAbsoluteCurve(offerID, curvingCriteria);</comment>
<comment type="line" pos:line="551" pos:column="1">//		</comment>
<comment type="line" pos:line="552" pos:column="1">//		HashMap&lt;Student,String&gt; courseCurve = curve.getCourseCurve();</comment>
<comment type="line" pos:line="553" pos:column="1">//		System.out.println("----------------------------------");</comment>
<comment type="line" pos:line="554" pos:column="1">//		if(courseCurve != null){</comment>
<comment type="line" pos:line="555" pos:column="1">//			for(Student students:courseCurve.keySet()){</comment>
<comment type="line" pos:line="556" pos:column="1">//				int UIN = students.getUIN();</comment>
<comment type="line" pos:line="557" pos:column="1">//				String grade = courseCurve.get(students);</comment>
<comment type="line" pos:line="558" pos:column="1">//				</comment>
<comment type="line" pos:line="559" pos:column="1">//				System.out.println("UIN: " + UIN + " Grade: " + grade);</comment>
<comment type="line" pos:line="560" pos:column="1">//			}</comment>
<comment type="line" pos:line="561" pos:column="1">//		}</comment>
		
		
		<comment type="line" pos:line="564" pos:column="17">// To test max gap curve</comment>
<comment type="line" pos:line="565" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="566" pos:column="1">//		List&lt;Integer&gt; curvingCriteria = new ArrayList&lt;Integer&gt;();</comment>
<comment type="line" pos:line="567" pos:column="1">//		curvingCriteria.add(3);</comment>
<comment type="line" pos:line="568" pos:column="1">//		curvingCriteria.add(1);</comment>
<comment type="line" pos:line="569" pos:column="1">//		curvingCriteria.add(1);</comment>
<comment type="line" pos:line="570" pos:column="1">//				</comment>
<comment type="line" pos:line="571" pos:column="1">//		CourseCurve curve = CourseCurve.calculateMaxGapCurve(offerID, curvingCriteria);</comment>
<comment type="line" pos:line="572" pos:column="1">//		</comment>
<comment type="line" pos:line="573" pos:column="1">//		HashMap&lt;Student,String&gt; courseCurve = curve.getCourseCurve();</comment>
<comment type="line" pos:line="574" pos:column="1">//		System.out.println("----------------------------------");</comment>
<comment type="line" pos:line="575" pos:column="1">//		if(courseCurve != null){</comment>
<comment type="line" pos:line="576" pos:column="1">//			for(Student students:courseCurve.keySet()){</comment>
<comment type="line" pos:line="577" pos:column="1">//				int UIN = students.getUIN();</comment>
<comment type="line" pos:line="578" pos:column="1">//				String grade = courseCurve.get(students);</comment>
<comment type="line" pos:line="579" pos:column="1">//				</comment>
<comment type="line" pos:line="580" pos:column="1">//				System.out.println("UIN: " + UIN + " Grade: " + grade);</comment>
<comment type="line" pos:line="581" pos:column="1">//			}</comment>
<comment type="line" pos:line="582" pos:column="1">//		}</comment>
		
		
		
	}</block></function>


}</block></class>
</unit>
