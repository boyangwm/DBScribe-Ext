<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\controller\CalculateByRace.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">SQLException</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">Statement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Collections</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">HashMap</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">util</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Iterator</name></name>;</import>

<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">tada</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">CalcImplInterface</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">interfaces</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">CalculateByRaceInterface</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">interfaces</name><op:operator pos:line="15" pos:column="29">.</op:operator><name pos:line="15" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="16" pos:column="1">import <name><name pos:line="16" pos:column="8">com</name><op:operator pos:line="16" pos:column="11">.</op:operator><name pos:line="16" pos:column="12">riskIt</name><op:operator pos:line="16" pos:column="18">.</op:operator><name pos:line="16" pos:column="19">util</name><op:operator pos:line="16" pos:column="23">.</op:operator><name pos:line="16" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="19" pos:column="1">/**
 * CalculateByRace.java
 * Purpose: Calculates average income and average weekly wage for
 * 	requirements 4 and 8.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="28" pos:column="1">/**
 * Object to perform all calculations necessary to calculate
 * 	average income and average weekly wage by all or by a given
 * 	race category contained in the database. Uses Hash
 *  Maps and offloads processing to the JVM to overcome inherent
 *  inefficiencies in the Derby database thus significantly improving
 *  performance.
 */</comment>
<class><specifier pos:line="36" pos:column="1">public</specifier> class <name pos:line="36" pos:column="14">CalculateByRace</name> <super><implements pos:line="36" pos:column="30">implements <name pos:line="36" pos:column="41">CalculateByRaceInterface</name></implements></super> <block pos:line="36" pos:column="66">{
	
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">ResultSet</name></type> <name pos:line="38" pos:column="19">results</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">Statement</name></type> <name pos:line="39" pos:column="15">statement</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:line="41" pos:column="9">/**
	 * Returns a list with all the race categories contained in the database.
	 * &lt;p&gt;
	 * @return				An ArrayList&lt;String&gt; of all race categories.
	 */</comment>
    <function><type><annotation pos:line="46" pos:column="5">@<name pos:line="46" pos:column="6">TaDaMethod</name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">variablesToTrack</name> <op:operator pos:line="46" pos:column="34">=</op:operator><block pos:line="46" pos:column="35">{<expr><lit:literal type="string" pos:line="46" pos:column="36">"raceList"</lit:literal></expr>}</block></expr></argument>,
			<argument><expr><name pos:line="47" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="47" pos:column="56">=</op:operator> <block pos:line="47" pos:column="58">{<expr><lit:literal type="string" pos:line="47" pos:column="59">"userrecord.race"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="48" pos:column="9">public</specifier> <name><name pos:line="48" pos:column="16">ArrayList</name><argument_list pos:line="48" pos:column="25">&lt;<argument><name pos:line="48" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="34">getRaceList</name><parameter_list pos:line="48" pos:column="45">()</parameter_list><block pos:line="48" pos:column="47">{
	    <decl_stmt><decl><type><name><name pos:line="49" pos:column="13">ArrayList</name><argument_list pos:line="49" pos:column="22">&lt;<argument><name pos:line="49" pos:column="23">String</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="31">raceList</name> <init pos:line="49" pos:column="40">= <expr><op:operator pos:line="49" pos:column="42">new</op:operator> <call><name><name pos:line="49" pos:column="46">ArrayList</name><argument_list pos:line="49" pos:column="55">&lt;<argument><name pos:line="49" pos:column="56">String</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
	    
		<try pos:line="51" pos:column="17">try <block pos:line="51" pos:column="21">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">statement</name> <op:operator pos:line="52" pos:column="35">=</op:operator> <call><name><name pos:line="52" pos:column="37">Factory</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">getConnection</name></name><argument_list pos:line="52" pos:column="58">()</argument_list></call><op:operator pos:line="52" pos:column="60">.</op:operator><call><name pos:line="52" pos:column="61">createStatement</name><argument_list pos:line="52" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name pos:line="53" pos:column="17">results</name> <op:operator pos:line="53" pos:column="25">=</op:operator> <call><name><name pos:line="53" pos:column="27">statement</name><op:operator pos:line="53" pos:column="36">.</op:operator><name pos:line="53" pos:column="37">executeQuery</name></name><argument_list pos:line="53" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="50">"SELECT DISTINCT RACE FROM userrecord"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="54" pos:column="17">while<condition pos:line="54" pos:column="22">(<expr><call><name><name pos:line="54" pos:column="23">results</name><op:operator pos:line="54" pos:column="30">.</op:operator><name pos:line="54" pos:column="31">next</name></name><argument_list pos:line="54" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="54" pos:column="38">{
	        	<if pos:line="55" pos:column="25">if<condition pos:line="55" pos:column="27">(<expr><call><name><name pos:line="55" pos:column="28">results</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">getString</name></name><argument_list pos:line="55" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="46">"RACE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="54">==</op:operator> <lit:literal type="null" pos:line="55" pos:column="57">null</lit:literal> <op:operator pos:line="55" pos:column="62">||</op:operator> <call><name><name pos:line="55" pos:column="65">raceList</name><op:operator pos:line="55" pos:column="73">.</op:operator><name pos:line="55" pos:column="74">contains</name></name><argument_list pos:line="55" pos:column="82">(<argument><expr><call><name><name pos:line="55" pos:column="83">results</name><op:operator pos:line="55" pos:column="90">.</op:operator><name pos:line="55" pos:column="91">getString</name></name><argument_list pos:line="55" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="101">"RACE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="55" pos:column="110">{
	        		<continue pos:line="56" pos:column="33">continue;</continue>
	        	}</block></then></if>
	        	<expr_stmt><expr><call><name><name pos:line="58" pos:column="25">raceList</name><op:operator pos:line="58" pos:column="33">.</op:operator><name pos:line="58" pos:column="34">add</name></name><argument_list pos:line="58" pos:column="37">(<argument><expr><call><name><name pos:line="58" pos:column="38">results</name><op:operator pos:line="58" pos:column="45">.</op:operator><name pos:line="58" pos:column="46">getString</name></name><argument_list pos:line="58" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="56">"RACE"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="63">.</op:operator><call><name pos:line="58" pos:column="64">trim</name><argument_list pos:line="58" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block> <catch pos:line="60" pos:column="19">catch <parameter_list pos:line="60" pos:column="25">(<param><decl><type><name pos:line="60" pos:column="26">SQLException</name></type> <name pos:line="60" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="42">{
	        <while pos:line="61" pos:column="17">while <condition pos:line="61" pos:column="23">(<expr><name pos:line="61" pos:column="24">e</name> <op:operator pos:line="61" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="61" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="62" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="63" pos:column="21">System</name><op:operator pos:line="63" pos:column="27">.</op:operator><name pos:line="63" pos:column="28">err</name><op:operator pos:line="63" pos:column="31">.</op:operator><name pos:line="63" pos:column="32">println</name></name><argument_list pos:line="63" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="64" pos:column="21">System</name><op:operator pos:line="64" pos:column="27">.</op:operator><name pos:line="64" pos:column="28">err</name><op:operator pos:line="64" pos:column="31">.</op:operator><name pos:line="64" pos:column="32">println</name></name><argument_list pos:line="64" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="64" pos:column="57">+</op:operator> <call><name><name pos:line="64" pos:column="59">e</name><op:operator pos:line="64" pos:column="60">.</op:operator><name pos:line="64" pos:column="61">getSQLState</name></name><argument_list pos:line="64" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="65" pos:column="21">System</name><op:operator pos:line="65" pos:column="27">.</op:operator><name pos:line="65" pos:column="28">err</name><op:operator pos:line="65" pos:column="31">.</op:operator><name pos:line="65" pos:column="32">println</name></name><argument_list pos:line="65" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="65" pos:column="57">+</op:operator> <call><name><name pos:line="65" pos:column="59">e</name><op:operator pos:line="65" pos:column="60">.</op:operator><name pos:line="65" pos:column="61">getErrorCode</name></name><argument_list pos:line="65" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="66" pos:column="21">System</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">err</name><op:operator pos:line="66" pos:column="31">.</op:operator><name pos:line="66" pos:column="32">println</name></name><argument_list pos:line="66" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="66" pos:column="57">+</op:operator> <call><name><name pos:line="66" pos:column="59">e</name><op:operator pos:line="66" pos:column="60">.</op:operator><name pos:line="66" pos:column="61">getMessage</name></name><argument_list pos:line="66" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="67" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="68" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="69" pos:column="21">e</name> <op:operator pos:line="69" pos:column="23">=</op:operator> <call><name><name pos:line="69" pos:column="25">e</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">getNextException</name></name><argument_list pos:line="69" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
		}</block></catch></try>
		
        <expr_stmt><expr><call><name><name pos:line="73" pos:column="9">Collections</name><op:operator pos:line="73" pos:column="20">.</op:operator><name pos:line="73" pos:column="21">sort</name></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">raceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="74" pos:column="17">return <expr><name pos:line="74" pos:column="24">raceList</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="77" pos:column="9">/**
	 * Checks if a race categories is contained in the database
	 * &lt;p&gt;
	 * @param 				A String of a race categories to test
	 * @return				Boolean true / false answer
	 */</comment>
	<function><type><specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">boolean</name></type> <name pos:line="83" pos:column="24">isInRaceList</name><parameter_list pos:line="83" pos:column="36">(<param><decl><type><name pos:line="83" pos:column="37">String</name></type> <name pos:line="83" pos:column="44">race</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="84" pos:column="17">ArrayList</name><argument_list pos:line="84" pos:column="26">&lt;<argument><name pos:line="84" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="35">raceList</name> <init pos:line="84" pos:column="44">= <expr><call><name pos:line="84" pos:column="46">getRaceList</name><argument_list pos:line="84" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="85" pos:column="17">if<condition pos:line="85" pos:column="19">(<expr><name pos:line="85" pos:column="20">race</name> <op:operator pos:line="85" pos:column="25">==</op:operator> <lit:literal type="null" pos:line="85" pos:column="28">null</lit:literal></expr>)</condition><then><block pos:line="85" pos:column="33">{
			<expr_stmt><expr><name pos:line="86" pos:column="25">race</name> <op:operator pos:line="86" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="86" pos:column="32">""</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="87" pos:column="19">else <block pos:line="87" pos:column="24">{
			<expr_stmt><expr><name pos:line="88" pos:column="25">race</name> <op:operator pos:line="88" pos:column="30">=</op:operator> <call><name><name pos:line="88" pos:column="32">race</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">trim</name></name><argument_list pos:line="88" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<for pos:line="91" pos:column="17">for(<init><decl><type><name pos:line="91" pos:column="21">String</name></type> <name pos:line="91" pos:column="28">i</name><range pos:line="91" pos:column="29">: <expr><name pos:line="91" pos:column="31">raceList</name></expr></range></decl></init>)<block pos:line="91" pos:column="40">{
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">(<expr><call><name><name pos:line="92" pos:column="29">i</name><op:operator pos:line="92" pos:column="30">.</op:operator><name pos:line="92" pos:column="31">trim</name></name><argument_list pos:line="92" pos:column="35">()</argument_list></call><op:operator pos:line="92" pos:column="37">.</op:operator><call><name pos:line="92" pos:column="38">equalsIgnoreCase</name><argument_list pos:line="92" pos:column="54">(<argument><expr><name pos:line="92" pos:column="55">race</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="92" pos:column="61">{
				<return pos:line="93" pos:column="33">return <expr><lit:literal type="boolean" pos:line="93" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="96" pos:column="17">return <expr><lit:literal type="boolean" pos:line="96" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="99" pos:column="9">/**
	 * Calculates average weekly wage for a race category
	 * &lt;p&gt;
	 * @param 				A String of a race category to request
	 * 						Warning: This method does not check if the 
	 * 							race string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInRaceList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">double</name></type> <name pos:line="113" pos:column="23">calculateWeeklyWageByRace</name><parameter_list pos:line="113" pos:column="48">(<param><decl><type><name pos:line="113" pos:column="49">String</name></type> <name pos:line="113" pos:column="56">race</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="62">{
		<return pos:line="114" pos:column="17">return <expr><call><name pos:line="114" pos:column="24">calculateValue</name><argument_list pos:line="114" pos:column="38">(<argument><expr><name pos:line="114" pos:column="39">race</name></expr></argument>, <argument><expr><call><name><name pos:line="114" pos:column="45">Factory</name><op:operator pos:line="114" pos:column="52">.</op:operator><name pos:line="114" pos:column="53">getWeeklyImpl</name></name><argument_list pos:line="114" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="117" pos:column="9">/**
	 * Calculates average weekly wage for all race categories
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">double</name></type> <name pos:line="123" pos:column="23">calculateWeelkyWageByAllRaces</name><parameter_list pos:line="123" pos:column="52">()</parameter_list> <block pos:line="123" pos:column="55">{
		<return pos:line="124" pos:column="17">return <expr><call><name pos:line="124" pos:column="24">calculateValue</name><argument_list pos:line="124" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="39">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="124" pos:column="46">Factory</name><op:operator pos:line="124" pos:column="53">.</op:operator><name pos:line="124" pos:column="54">getWeeklyImpl</name></name><argument_list pos:line="124" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="127" pos:column="9">/**
	 * Calculates average income for a race category
	 * &lt;p&gt;
	 * @param 				A String of a race category to request
	 * 						Warning: This method does not check if the 
	 * 							race string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInRaceList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="141" pos:column="9">public</specifier> <name pos:line="141" pos:column="16">double</name></type> <name pos:line="141" pos:column="23">calculateIncomeByRace</name><parameter_list pos:line="141" pos:column="44">(<param><decl><type><name pos:line="141" pos:column="45">String</name></type> <name pos:line="141" pos:column="52">race</name></decl></param>)</parameter_list> <block pos:line="141" pos:column="58">{
		<return pos:line="142" pos:column="17">return <expr><call><name pos:line="142" pos:column="24">calculateValue</name><argument_list pos:line="142" pos:column="38">(<argument><expr><name pos:line="142" pos:column="39">race</name></expr></argument>, <argument><expr><call><name><name pos:line="142" pos:column="45">Factory</name><op:operator pos:line="142" pos:column="52">.</op:operator><name pos:line="142" pos:column="53">getYearlyImpl</name></name><argument_list pos:line="142" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="145" pos:column="9">/**
	 * Calculates average income for all race categories
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 * 
	 */</comment>
	<function><type><specifier pos:line="152" pos:column="9">public</specifier> <name pos:line="152" pos:column="16">double</name></type> <name pos:line="152" pos:column="23">calculateIncomeByAllRaces</name><parameter_list pos:line="152" pos:column="48">()</parameter_list> <block pos:line="152" pos:column="51">{
		<return pos:line="153" pos:column="17">return <expr><call><name pos:line="153" pos:column="24">calculateValue</name><argument_list pos:line="153" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="39">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="153" pos:column="46">Factory</name><op:operator pos:line="153" pos:column="53">.</op:operator><name pos:line="153" pos:column="54">getYearlyImpl</name></name><argument_list pos:line="153" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	
	 <function><type><annotation pos:line="157" pos:column="10">@<name pos:line="157" pos:column="11">TaDaMethod</name><argument_list pos:line="157" pos:column="21">(<argument><expr><name pos:line="157" pos:column="22">variablesToTrack</name> <op:operator pos:line="157" pos:column="39">=</op:operator><block pos:line="157" pos:column="40">{<expr><lit:literal type="string" pos:line="157" pos:column="41">"tempSSN"</lit:literal></expr><op:operator pos:line="157" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="52">"weekWage"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="64">"worksWeek"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="77">"tempSSN2"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="87">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="89">"ssnRaceHM"</lit:literal></expr></argument>}</block></expr></argument>,
				<argument><expr><name pos:line="158" pos:column="33">correspondingDatabaseAttribute</name> <op:operator pos:line="158" pos:column="64">=</op:operator> <block pos:line="158" pos:column="66">{<expr><lit:literal type="string" pos:line="158" pos:column="67">"job.ssn"</lit:literal></expr><op:operator pos:line="158" pos:column="76">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="78">"job.WEEKWAGE"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="92">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="94">"job.WORKWEEKS"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="109">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="111">"userrecord.ssn"</lit:literal></expr></argument><op:operator pos:line="158" pos:column="127">,</op:operator> <argument><expr><lit:literal type="string" pos:line="158" pos:column="129">"userrecord.race"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="159" pos:column="9">public</specifier> <name pos:line="159" pos:column="16">double</name></type> <name pos:line="159" pos:column="23">calculateValue</name><parameter_list pos:line="159" pos:column="37">(<param><decl><type><name pos:line="159" pos:column="38">String</name></type> <name pos:line="159" pos:column="45">raceIn</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="53">CalcImplInterface</name></type> <name pos:line="159" pos:column="71">type</name></decl></param>)</parameter_list> <block pos:line="159" pos:column="77">{
		<decl_stmt><decl><type><name pos:line="160" pos:column="17">double</name></type> <name pos:line="160" pos:column="24">returnValue</name> <init pos:line="160" pos:column="36">= <expr><lit:literal type="number" pos:line="160" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">double</name></type> <name pos:line="161" pos:column="24">sum</name> <init pos:line="161" pos:column="28">= <expr><lit:literal type="number" pos:line="161" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="162" pos:column="17">double</name></type> <name pos:line="162" pos:column="24">count</name> <init pos:line="162" pos:column="30">= <expr><lit:literal type="number" pos:line="162" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="164" pos:column="17">HashMap</name><argument_list pos:line="164" pos:column="24">&lt;<argument><name pos:line="164" pos:column="25">Integer</name></argument>,<argument><name pos:line="164" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="41">ssnRaceHM</name> <init pos:line="164" pos:column="51">= <expr><op:operator pos:line="164" pos:column="53">new</op:operator> <call><name><name pos:line="164" pos:column="57">HashMap</name><argument_list pos:line="164" pos:column="64">&lt;<argument><name pos:line="164" pos:column="65">Integer</name></argument>,<argument><name pos:line="164" pos:column="73">String</name></argument>&gt;</argument_list></name><argument_list pos:line="164" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="165" pos:column="17">HashMap</name><argument_list pos:line="165" pos:column="24">&lt;<argument><name pos:line="165" pos:column="25">Integer</name></argument>, <argument><name pos:line="165" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="165" pos:column="43">ssnWeekWageHM</name> <init pos:line="165" pos:column="57">= <expr><op:operator pos:line="165" pos:column="59">new</op:operator> <call><name><name pos:line="165" pos:column="63">HashMap</name><argument_list pos:line="165" pos:column="70">&lt;<argument><name pos:line="165" pos:column="71">Integer</name></argument>, <argument><name pos:line="165" pos:column="80">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="165" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="166" pos:column="17">HashMap</name><argument_list pos:line="166" pos:column="24">&lt;<argument><name pos:line="166" pos:column="25">Integer</name></argument>, <argument><name pos:line="166" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="166" pos:column="43">ssnWorkWeeksHM</name> <init pos:line="166" pos:column="58">= <expr><op:operator pos:line="166" pos:column="60">new</op:operator> <call><name><name pos:line="166" pos:column="64">HashMap</name><argument_list pos:line="166" pos:column="71">&lt;<argument><name pos:line="166" pos:column="72">Integer</name></argument>, <argument><name pos:line="166" pos:column="81">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="166" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="167" pos:column="9">ArrayList</name><argument_list pos:line="167" pos:column="18">&lt;<argument><name pos:line="167" pos:column="19">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="167" pos:column="51">raceWageAL</name> <init pos:line="167" pos:column="62">= <expr><op:operator pos:line="167" pos:column="64">new</op:operator> <call><name><name pos:line="167" pos:column="68">ArrayList</name><argument_list pos:line="167" pos:column="77">&lt;<argument><name pos:line="167" pos:column="78">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name><argument_list pos:line="167" pos:column="109">()</argument_list></call></expr></init></decl>;</decl_stmt>
      
		<if pos:line="169" pos:column="17">if<condition pos:line="169" pos:column="19">(<expr><name pos:line="169" pos:column="20">raceIn</name> <op:operator pos:line="169" pos:column="27">==</op:operator> <lit:literal type="null" pos:line="169" pos:column="30">null</lit:literal></expr>)</condition><then><block pos:line="169" pos:column="35">{
			<expr_stmt><expr><name pos:line="170" pos:column="25">raceIn</name> <op:operator pos:line="170" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="170" pos:column="34">""</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="171" pos:column="19">else <block pos:line="171" pos:column="24">{
			<expr_stmt><expr><name pos:line="172" pos:column="25">raceIn</name> <op:operator pos:line="172" pos:column="32">=</op:operator> <call><name><name pos:line="172" pos:column="34">raceIn</name><op:operator pos:line="172" pos:column="40">.</op:operator><name pos:line="172" pos:column="41">trim</name></name><argument_list pos:line="172" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<expr_stmt><expr><name pos:line="175" pos:column="17">raceIn</name> <op:operator pos:line="175" pos:column="24">=</op:operator> <call><name><name pos:line="175" pos:column="26">raceIn</name><op:operator pos:line="175" pos:column="32">.</op:operator><name pos:line="175" pos:column="33">trim</name></name><argument_list pos:line="175" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
        
		<try pos:line="177" pos:column="17">try <block pos:line="177" pos:column="21">{
			<expr_stmt><expr><name pos:line="178" pos:column="25">statement</name> <op:operator pos:line="178" pos:column="35">=</op:operator> <call><name><name pos:line="178" pos:column="37">Factory</name><op:operator pos:line="178" pos:column="44">.</op:operator><name pos:line="178" pos:column="45">getConnection</name></name><argument_list pos:line="178" pos:column="58">()</argument_list></call><op:operator pos:line="178" pos:column="60">.</op:operator><call><name pos:line="178" pos:column="61">createStatement</name><argument_list pos:line="178" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
		
	        <expr_stmt><expr><name pos:line="180" pos:column="17">results</name> <op:operator pos:line="180" pos:column="25">=</op:operator> <call><name><name pos:line="180" pos:column="27">statement</name><op:operator pos:line="180" pos:column="36">.</op:operator><name pos:line="180" pos:column="37">executeQuery</name></name><argument_list pos:line="180" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="50">"SELECT SSN, WEEKWAGE, WORKWEEKS from job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="181" pos:column="17">while<condition pos:line="181" pos:column="22">(<expr><call><name><name pos:line="181" pos:column="23">results</name><op:operator pos:line="181" pos:column="30">.</op:operator><name pos:line="181" pos:column="31">next</name></name><argument_list pos:line="181" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="181" pos:column="38">{
	        	<decl_stmt><decl><type><name pos:line="182" pos:column="25">int</name></type> <name pos:line="182" pos:column="29">tempSSN</name> <init pos:line="182" pos:column="37">= <expr><call><name><name pos:line="182" pos:column="39">results</name><op:operator pos:line="182" pos:column="46">.</op:operator><name pos:line="182" pos:column="47">getInt</name></name><argument_list pos:line="182" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="54">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="183" pos:column="25">int</name></type> <name pos:line="183" pos:column="29">weekWage</name><init pos:line="183" pos:column="37">= <expr><call><name><name pos:line="183" pos:column="39">results</name><op:operator pos:line="183" pos:column="46">.</op:operator><name pos:line="183" pos:column="47">getInt</name></name><argument_list pos:line="183" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="54">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<decl_stmt><decl><type><name pos:line="184" pos:column="25">int</name></type> <name pos:line="184" pos:column="29">worksWeek</name> <init pos:line="184" pos:column="39">= <expr><call><name><name pos:line="184" pos:column="41">results</name><op:operator pos:line="184" pos:column="48">.</op:operator><name pos:line="184" pos:column="49">getInt</name></name><argument_list pos:line="184" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="56">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	
	        	<if pos:line="186" pos:column="25">if<condition pos:line="186" pos:column="27">(<expr><name pos:line="186" pos:column="28">weekWage</name> <op:operator pos:line="186" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="186" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="186" pos:column="41"> <block pos:line="186" pos:column="42">{	
	        		<expr_stmt><expr><call><name><name pos:line="187" pos:column="33">ssnWeekWageHM</name><op:operator pos:line="187" pos:column="46">.</op:operator><name pos:line="187" pos:column="47">put</name></name><argument_list pos:line="187" pos:column="50">(<argument><expr><name pos:line="187" pos:column="51">tempSSN</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="60">weekWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        	
	        	<if pos:line="190" pos:column="25">if<condition pos:line="190" pos:column="27">(<expr><name pos:line="190" pos:column="28">worksWeek</name> <op:operator pos:line="190" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="190" pos:column="40">0</lit:literal></expr>)</condition><then><block pos:line="190" pos:column="42">{
	        		<expr_stmt><expr><call><name><name pos:line="191" pos:column="33">ssnWorkWeeksHM</name><op:operator pos:line="191" pos:column="47">.</op:operator><name pos:line="191" pos:column="48">put</name></name><argument_list pos:line="191" pos:column="51">(<argument><expr><name pos:line="191" pos:column="52">tempSSN</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="61">worksWeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        }</block></while>
			
	        <expr_stmt><expr><name pos:line="195" pos:column="17">results</name> <op:operator pos:line="195" pos:column="25">=</op:operator> <call><name><name pos:line="195" pos:column="27">statement</name><op:operator pos:line="195" pos:column="36">.</op:operator><name pos:line="195" pos:column="37">executeQuery</name></name><argument_list pos:line="195" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="50">"SELECT SSN, RACE from userrecord"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <while pos:line="196" pos:column="17">while<condition pos:line="196" pos:column="22">(<expr><call><name><name pos:line="196" pos:column="23">results</name><op:operator pos:line="196" pos:column="30">.</op:operator><name pos:line="196" pos:column="31">next</name></name><argument_list pos:line="196" pos:column="35">()</argument_list></call></expr>)</condition><block pos:line="196" pos:column="38">{
	        	
	        	<decl_stmt><decl><type><name pos:line="198" pos:column="25">int</name></type> <name pos:line="198" pos:column="29">tempSSN2</name> <init pos:line="198" pos:column="38">= <expr><call><name><name pos:line="198" pos:column="40">results</name><op:operator pos:line="198" pos:column="47">.</op:operator><name pos:line="198" pos:column="48">getInt</name></name><argument_list pos:line="198" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="55">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	        	<if pos:line="199" pos:column="25">if<condition pos:line="199" pos:column="27">(<expr><call><name><name pos:line="199" pos:column="28">ssnWeekWageHM</name><op:operator pos:line="199" pos:column="41">.</op:operator><name pos:line="199" pos:column="42">containsKey</name></name><argument_list pos:line="199" pos:column="53">(<argument><expr><name pos:line="199" pos:column="54">tempSSN2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="199" pos:column="64">{
	        		<expr_stmt><expr><call><name><name pos:line="200" pos:column="33">ssnRaceHM</name><op:operator pos:line="200" pos:column="42">.</op:operator><name pos:line="200" pos:column="43">put</name></name><argument_list pos:line="200" pos:column="46">(<argument><expr><name pos:line="200" pos:column="47">tempSSN2</name></expr></argument>, <argument><expr><call><name><name pos:line="200" pos:column="57">results</name><op:operator pos:line="200" pos:column="64">.</op:operator><name pos:line="200" pos:column="65">getString</name></name><argument_list pos:line="200" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="75">"RACE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then></if>
	        }</block></while>

	        <for pos:line="204" pos:column="17">for (<init><decl><type><name><name pos:line="204" pos:column="22">Iterator</name><argument_list pos:line="204" pos:column="30">&lt;<argument><name pos:line="204" pos:column="31">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="40">i</name> <init pos:line="204" pos:column="42">= <expr><call><name><name pos:line="204" pos:column="44">ssnRaceHM</name><op:operator pos:line="204" pos:column="53">.</op:operator><name pos:line="204" pos:column="54">keySet</name></name><argument_list pos:line="204" pos:column="60">()</argument_list></call><op:operator pos:line="204" pos:column="62">.</op:operator><call><name pos:line="204" pos:column="63">iterator</name><argument_list pos:line="204" pos:column="71">()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name pos:line="204" pos:column="75">i</name><op:operator pos:line="204" pos:column="76">.</op:operator><name pos:line="204" pos:column="77">hasNext</name></name><argument_list pos:line="204" pos:column="84">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="204" pos:column="89">{ 
	        	<decl_stmt><decl><type><name pos:line="205" pos:column="25">int</name></type> <name pos:line="205" pos:column="29">keySSN</name> <init pos:line="205" pos:column="36">= <expr><op:operator pos:line="205" pos:column="38">(</op:operator><name pos:line="205" pos:column="39">Integer</name><op:operator pos:line="205" pos:column="46">)</op:operator> <call><name><name pos:line="205" pos:column="48">i</name><op:operator pos:line="205" pos:column="49">.</op:operator><name pos:line="205" pos:column="50">next</name></name><argument_list pos:line="205" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt> 
	        	<decl_stmt><decl><type><name pos:line="206" pos:column="25">int</name></type> <name pos:line="206" pos:column="29">weeklyWage</name></decl>;</decl_stmt>
	        	<if pos:line="207" pos:column="25">if<condition pos:line="207" pos:column="27">(<expr><call><name><name pos:line="207" pos:column="28">ssnWeekWageHM</name><op:operator pos:line="207" pos:column="41">.</op:operator><name pos:line="207" pos:column="42">get</name></name><argument_list pos:line="207" pos:column="45">(<argument><expr><name pos:line="207" pos:column="46">keySSN</name></expr></argument>)</argument_list></call> <op:operator pos:line="207" pos:column="54">!=</op:operator> <lit:literal type="null" pos:line="207" pos:column="57">null</lit:literal></expr>)</condition><then><block pos:line="207" pos:column="62">{
	        		<expr_stmt><expr><name pos:line="208" pos:column="33">weeklyWage</name> <op:operator pos:line="208" pos:column="44">=</op:operator> <call><name><name pos:line="208" pos:column="46">ssnWeekWageHM</name><op:operator pos:line="208" pos:column="59">.</op:operator><name pos:line="208" pos:column="60">get</name></name><argument_list pos:line="208" pos:column="63">(<argument><expr><name pos:line="208" pos:column="64">keySSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then> <else pos:line="209" pos:column="27">else<block pos:line="209" pos:column="31">{
	        		<expr_stmt><expr><name pos:line="210" pos:column="33">weeklyWage</name> <op:operator pos:line="210" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="210" pos:column="46">0</lit:literal></expr>;</expr_stmt>
	        	}</block></else></if>
	        	<decl_stmt><decl><type><name pos:line="212" pos:column="25">int</name></type> <name pos:line="212" pos:column="29">workWeek</name></decl>;</decl_stmt>
	        	<if pos:line="213" pos:column="25">if<condition pos:line="213" pos:column="27">(<expr><call><name><name pos:line="213" pos:column="28">ssnWorkWeeksHM</name><op:operator pos:line="213" pos:column="42">.</op:operator><name pos:line="213" pos:column="43">get</name></name><argument_list pos:line="213" pos:column="46">(<argument><expr><name pos:line="213" pos:column="47">keySSN</name></expr></argument>)</argument_list></call> <op:operator pos:line="213" pos:column="55">!=</op:operator> <lit:literal type="null" pos:line="213" pos:column="58">null</lit:literal></expr>)</condition><then><block pos:line="213" pos:column="63">{
	        		<expr_stmt><expr><name pos:line="214" pos:column="33">workWeek</name> <op:operator pos:line="214" pos:column="42">=</op:operator> <call><name><name pos:line="214" pos:column="44">ssnWorkWeeksHM</name><op:operator pos:line="214" pos:column="58">.</op:operator><name pos:line="214" pos:column="59">get</name></name><argument_list pos:line="214" pos:column="62">(<argument><expr><name pos:line="214" pos:column="63">keySSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></then> <else pos:line="215" pos:column="27">else <block pos:line="215" pos:column="32">{
	        		<expr_stmt><expr><name pos:line="216" pos:column="33">workWeek</name> <op:operator pos:line="216" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="216" pos:column="44">0</lit:literal></expr>;</expr_stmt>
	        	}</block></else></if>
	        	<decl_stmt><decl><type><name pos:line="218" pos:column="25">String</name></type> <name pos:line="218" pos:column="32">raceFromDB</name> <init pos:line="218" pos:column="43">= <expr><call><name><name pos:line="218" pos:column="45">ssnRaceHM</name><op:operator pos:line="218" pos:column="54">.</op:operator><name pos:line="218" pos:column="55">get</name></name><argument_list pos:line="218" pos:column="58">(<argument><expr><name pos:line="218" pos:column="59">keySSN</name></expr></argument>)</argument_list></call><op:operator pos:line="218" pos:column="66">.</op:operator><call><name pos:line="218" pos:column="67">trim</name><argument_list pos:line="218" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
	        	
	        	<expr_stmt><expr><call><name><name pos:line="220" pos:column="25">type</name><op:operator pos:line="220" pos:column="29">.</op:operator><name pos:line="220" pos:column="30">addToArrayList</name></name><argument_list pos:line="220" pos:column="44">(<argument><expr><name pos:line="220" pos:column="45">raceWageAL</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="57">raceFromDB</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="69">weeklyWage</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="81">workWeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        }</block></for>
	        
	    	<for pos:line="223" pos:column="17">for(<init><decl><type><name pos:line="223" pos:column="21">TypeWageDataStructureInterface</name></type> <name pos:line="223" pos:column="52">i</name> <range pos:line="223" pos:column="54">: <expr><name pos:line="223" pos:column="56">raceWageAL</name></expr></range></decl></init>)<block pos:line="223" pos:column="67">{
	    		<decl_stmt><decl><type><name pos:line="224" pos:column="25">double</name></type> <name pos:line="224" pos:column="32">result</name> <init pos:line="224" pos:column="39">= <expr><call><name><name pos:line="224" pos:column="41">type</name><op:operator pos:line="224" pos:column="45">.</op:operator><name pos:line="224" pos:column="46">calculateAverage</name></name><argument_list pos:line="224" pos:column="62">(<argument><expr><name pos:line="224" pos:column="63">raceIn</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="71">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="225" pos:column="33">if<condition pos:line="225" pos:column="35">(<expr><name pos:line="225" pos:column="36">result</name> <op:operator pos:line="225" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="225" pos:column="45">0</lit:literal></expr>)</condition><then><block pos:line="225" pos:column="47">{
					<expr_stmt><expr><name pos:line="226" pos:column="41">sum</name> <op:operator pos:line="226" pos:column="45">=</op:operator> <name pos:line="226" pos:column="47">sum</name> <op:operator pos:line="226" pos:column="51">+</op:operator> <name pos:line="226" pos:column="53">result</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="227" pos:column="41">count</name><op:operator pos:line="227" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
	    	}</block></for>
	        
	        <if pos:line="231" pos:column="17">if<condition pos:line="231" pos:column="19">(<expr><name pos:line="231" pos:column="20">count</name> <op:operator pos:line="231" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="231" pos:column="29">0</lit:literal></expr>)</condition><then><block pos:line="231" pos:column="31">{
	        	<expr_stmt><expr><name pos:line="232" pos:column="25">returnValue</name> <op:operator pos:line="232" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="232" pos:column="39">0</lit:literal></expr>;</expr_stmt>
	        }</block></then>
	        <else pos:line="234" pos:column="17">else <block pos:line="234" pos:column="22">{
	        	<expr_stmt><expr><name pos:line="235" pos:column="25">returnValue</name> <op:operator pos:line="235" pos:column="37">=</op:operator> <name pos:line="235" pos:column="39">sum</name> <op:operator pos:line="235" pos:column="43">/</op:operator> <name pos:line="235" pos:column="45">count</name></expr>;</expr_stmt>
	        }</block></else></if>

		}</block>
		<catch pos:line="239" pos:column="17">catch <parameter_list pos:line="239" pos:column="23">(<param><decl><type><name pos:line="239" pos:column="24">SQLException</name></type> <name pos:line="239" pos:column="37">e</name></decl></param>)</parameter_list><block pos:line="239" pos:column="39">{
	        <while pos:line="240" pos:column="17">while <condition pos:line="240" pos:column="23">(<expr><name pos:line="240" pos:column="24">e</name> <op:operator pos:line="240" pos:column="26">!=</op:operator> <lit:literal type="null" pos:line="240" pos:column="29">null</lit:literal></expr>)</condition>
	        <block pos:line="241" pos:column="17">{
	            <expr_stmt><expr><call><name><name pos:line="242" pos:column="21">System</name><op:operator pos:line="242" pos:column="27">.</op:operator><name pos:line="242" pos:column="28">err</name><op:operator pos:line="242" pos:column="31">.</op:operator><name pos:line="242" pos:column="32">println</name></name><argument_list pos:line="242" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="242" pos:column="40">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="243" pos:column="21">System</name><op:operator pos:line="243" pos:column="27">.</op:operator><name pos:line="243" pos:column="28">err</name><op:operator pos:line="243" pos:column="31">.</op:operator><name pos:line="243" pos:column="32">println</name></name><argument_list pos:line="243" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="40">"  SQL State:  "</lit:literal> <op:operator pos:line="243" pos:column="57">+</op:operator> <call><name><name pos:line="243" pos:column="59">e</name><op:operator pos:line="243" pos:column="60">.</op:operator><name pos:line="243" pos:column="61">getSQLState</name></name><argument_list pos:line="243" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="244" pos:column="21">System</name><op:operator pos:line="244" pos:column="27">.</op:operator><name pos:line="244" pos:column="28">err</name><op:operator pos:line="244" pos:column="31">.</op:operator><name pos:line="244" pos:column="32">println</name></name><argument_list pos:line="244" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="40">"  Error Code: "</lit:literal> <op:operator pos:line="244" pos:column="57">+</op:operator> <call><name><name pos:line="244" pos:column="59">e</name><op:operator pos:line="244" pos:column="60">.</op:operator><name pos:line="244" pos:column="61">getErrorCode</name></name><argument_list pos:line="244" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name><name pos:line="245" pos:column="21">System</name><op:operator pos:line="245" pos:column="27">.</op:operator><name pos:line="245" pos:column="28">err</name><op:operator pos:line="245" pos:column="31">.</op:operator><name pos:line="245" pos:column="32">println</name></name><argument_list pos:line="245" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="40">"  Message:    "</lit:literal> <op:operator pos:line="245" pos:column="57">+</op:operator> <call><name><name pos:line="245" pos:column="59">e</name><op:operator pos:line="245" pos:column="60">.</op:operator><name pos:line="245" pos:column="61">getMessage</name></name><argument_list pos:line="245" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <comment type="line" pos:line="246" pos:column="21">// for stack traces, refer to derby.log or uncomment this:</comment>
	            <comment type="line" pos:line="247" pos:column="21">//e.printStackTrace(System.err);</comment>
	            <expr_stmt><expr><name pos:line="248" pos:column="21">e</name> <op:operator pos:line="248" pos:column="23">=</op:operator> <call><name><name pos:line="248" pos:column="25">e</name><op:operator pos:line="248" pos:column="26">.</op:operator><name pos:line="248" pos:column="27">getNextException</name></name><argument_list pos:line="248" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        }</block></while>
			<throw pos:line="250" pos:column="25">throw <expr><op:operator pos:line="250" pos:column="31">new</op:operator> <call><name pos:line="250" pos:column="35">IllegalArgumentException</name><argument_list pos:line="250" pos:column="59">()</argument_list></call></expr>;</throw>
		}</block></catch></try>
		
		<return pos:line="253" pos:column="17">return <expr><call><name><name pos:line="253" pos:column="24">Factory</name><op:operator pos:line="253" pos:column="31">.</op:operator><name pos:line="253" pos:column="32">getRoundMethod</name></name><argument_list pos:line="253" pos:column="46">(<argument><expr><name pos:line="253" pos:column="47">returnValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>
