<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\DepartmentTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">org</name><op:operator pos:line="4" pos:column="11">.</op:operator><name pos:line="4" pos:column="12">junit</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Before</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">org</name><op:operator pos:line="5" pos:column="11">.</op:operator><name pos:line="5" pos:column="12">junit</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Test</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">umas</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">code</name></name>.*;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">umas</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">code</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Department</name><op:operator pos:line="8" pos:column="32">.</op:operator><name pos:line="8" pos:column="33">DepartmentAlreadyExistsException</name></name>;</import>

<comment type="block" format="javadoc" pos:line="10" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">DepartmentTest</name> <block pos:line="12" pos:column="29">{

	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">public</specifier> <specifier pos:line="14" pos:column="16">static</specifier> <name pos:line="14" pos:column="23">Department</name></type> <name pos:line="14" pos:column="34">department1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">public</specifier> <specifier pos:line="15" pos:column="16">static</specifier> <name pos:line="15" pos:column="23">Department</name></type> <name pos:line="15" pos:column="34">department2</name></decl>;</decl_stmt>
	<function><type><annotation pos:line="16" pos:column="9">@<name pos:line="16" pos:column="10">Before</name></annotation>
	<specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">setUp</name><parameter_list pos:line="17" pos:column="26">()</parameter_list> <throws pos:line="17" pos:column="29">throws <argument><expr><name pos:line="17" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="17" pos:column="46">{
		<expr_stmt><expr><name pos:line="18" pos:column="17">department1</name> <op:operator pos:line="18" pos:column="29">=</op:operator> <op:operator pos:line="18" pos:column="31">new</op:operator> <call><name pos:line="18" pos:column="35">Department</name><argument_list pos:line="18" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="18" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">department2</name> <op:operator pos:line="19" pos:column="29">=</op:operator> <op:operator pos:line="19" pos:column="31">new</op:operator> <call><name pos:line="19" pos:column="35">Department</name><argument_list pos:line="19" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="46">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="22" pos:column="9">@<name pos:line="22" pos:column="10">Test</name></annotation>
	<specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">final</specifier> <name pos:line="23" pos:column="22">void</name></type> <name pos:line="23" pos:column="27">testDepartmentInt</name><parameter_list pos:line="23" pos:column="44">()</parameter_list> <block pos:line="23" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">assertNotNull</name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">department1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="27" pos:column="9">@<name pos:line="27" pos:column="10">Test</name></annotation>
	<specifier pos:line="28" pos:column="9">public</specifier> <specifier pos:line="28" pos:column="16">final</specifier> <name pos:line="28" pos:column="22">void</name></type> <name pos:line="28" pos:column="27">testDepartmentString</name><parameter_list pos:line="28" pos:column="47">()</parameter_list> <block pos:line="28" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">assertNotNull</name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">department2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="32" pos:column="9">@<name pos:line="32" pos:column="10">Test</name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">expected</name> <op:operator pos:line="32" pos:column="24">=</op:operator> <name><name pos:line="32" pos:column="26">Department</name><op:operator pos:line="32" pos:column="36">.</op:operator><name pos:line="32" pos:column="37">DepartmentAlreadyExistsException</name><op:operator pos:line="32" pos:column="69">.</op:operator><name pos:line="32" pos:column="70">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="33" pos:column="9">public</specifier> <specifier pos:line="33" pos:column="16">final</specifier> <name pos:line="33" pos:column="22">void</name></type> <name pos:line="33" pos:column="27">testAddNewDepartment</name><parameter_list pos:line="33" pos:column="47">()</parameter_list> <throws pos:line="33" pos:column="50">throws <argument><expr><name><name pos:line="33" pos:column="57">Department</name><op:operator pos:line="33" pos:column="67">.</op:operator><name pos:line="33" pos:column="68">DepartmentAlreadyExistsException</name></name></expr></argument></throws> <block pos:line="33" pos:column="101">{
		<comment type="block" pos:line="34" pos:column="17">/*
		 * Success the first time
		 * Fails later
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="38" pos:column="17">Department</name><op:operator pos:line="38" pos:column="27">.</op:operator><name pos:line="38" pos:column="28">addNewDepartment</name></name><argument_list pos:line="38" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="45">"Geology"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="41" pos:column="9">@<name pos:line="41" pos:column="10">Test</name></annotation>
	<specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">final</specifier> <name pos:line="42" pos:column="22">void</name></type> <name pos:line="42" pos:column="27">testUpdateDepartment</name><parameter_list pos:line="42" pos:column="47">()</parameter_list> <throws pos:line="42" pos:column="50">throws <argument><expr><name><name pos:line="42" pos:column="57">Department</name><op:operator pos:line="42" pos:column="67">.</op:operator><name pos:line="42" pos:column="68">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="42" pos:column="100">{
		<expr_stmt><expr><call><name><name pos:line="43" pos:column="17">department1</name><op:operator pos:line="43" pos:column="28">.</op:operator><name pos:line="43" pos:column="29">setDepartmentName</name></name><argument_list pos:line="43" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="47">"Computer"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">boolean</name></type> <name pos:line="44" pos:column="25">check</name></decl>;</decl_stmt>
		<try pos:line="45" pos:column="17">try <block pos:line="45" pos:column="21">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">check</name> <op:operator pos:line="46" pos:column="31">=</op:operator> <call><name><name pos:line="46" pos:column="33">department1</name><op:operator pos:line="46" pos:column="44">.</op:operator><name pos:line="46" pos:column="45">updateDepartment</name></name><argument_list pos:line="46" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">assertTrue</name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">department1</name><op:operator pos:line="48" pos:column="36">.</op:operator><name pos:line="48" pos:column="37">setDepartmentName</name></name><argument_list pos:line="48" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="55">"Computer Science"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">department1</name><op:operator pos:line="49" pos:column="36">.</op:operator><name pos:line="49" pos:column="37">updateDepartment</name></name><argument_list pos:line="49" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="50" pos:column="19">catch <parameter_list pos:line="50" pos:column="25">(<param><decl><type><name><name pos:line="50" pos:column="26">Department</name><op:operator pos:line="50" pos:column="36">.</op:operator><name pos:line="50" pos:column="37">DepartmentAlreadyExistsException</name></name></type> <name pos:line="50" pos:column="70">e</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="73">{
			<comment type="line" pos:line="51" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">e</name><op:operator pos:line="52" pos:column="26">.</op:operator><name pos:line="52" pos:column="27">printStackTrace</name></name><argument_list pos:line="52" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>

	<function><type><annotation pos:line="57" pos:column="9">@<name pos:line="57" pos:column="10">Test</name></annotation>
	<specifier pos:line="58" pos:column="9">public</specifier> <specifier pos:line="58" pos:column="16">final</specifier> <name pos:line="58" pos:column="22">void</name></type> <name pos:line="58" pos:column="27">testGetAllDepartments</name><parameter_list pos:line="58" pos:column="48">()</parameter_list> <block pos:line="58" pos:column="51">{
		<try pos:line="59" pos:column="17">try<block pos:line="59" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Department</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">getAllDepartments</name></name><argument_list pos:line="60" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="62" pos:column="17">catch<parameter_list pos:line="62" pos:column="22">(<param><decl><type><name pos:line="62" pos:column="23">Exception</name></type> <name pos:line="62" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="62" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">fail</name><argument_list pos:line="63" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="30">"Failed to get all the departments"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="67" pos:column="9">@<name pos:line="67" pos:column="10">Test</name></annotation>
	<specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">final</specifier> <name pos:line="68" pos:column="22">void</name></type> <name pos:line="68" pos:column="27">testGetDepartmentCourses</name><parameter_list pos:line="68" pos:column="51">()</parameter_list> <block pos:line="68" pos:column="54">{
		<try pos:line="69" pos:column="17">try<block pos:line="69" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">department1</name><op:operator pos:line="70" pos:column="36">.</op:operator><name pos:line="70" pos:column="37">getDepartmentCourses</name></name><argument_list pos:line="70" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="72" pos:column="17">catch<parameter_list pos:line="72" pos:column="22">(<param><decl><type><name pos:line="72" pos:column="23">Exception</name></type> <name pos:line="72" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="72" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">fail</name><argument_list pos:line="73" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="30">"Failed to get all the department courses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="77" pos:column="9">@<name pos:line="77" pos:column="10">Test</name></annotation>
	<specifier pos:line="78" pos:column="9">public</specifier> <specifier pos:line="78" pos:column="16">final</specifier> <name pos:line="78" pos:column="22">void</name></type> <name pos:line="78" pos:column="27">testGetDepartmentCourseOffered</name><parameter_list pos:line="78" pos:column="57">()</parameter_list> <block pos:line="78" pos:column="60">{
		<try pos:line="79" pos:column="17">try<block pos:line="79" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">department1</name><op:operator pos:line="80" pos:column="36">.</op:operator><name pos:line="80" pos:column="37">getDepartmentCourseOffered</name></name><argument_list pos:line="80" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="82" pos:column="17">catch<parameter_list pos:line="82" pos:column="22">(<param><decl><type><name pos:line="82" pos:column="23">Exception</name></type> <name pos:line="82" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="82" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="83" pos:column="25">fail</name><argument_list pos:line="83" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="30">"Failed to get all teh department course offerings"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

}</block></class>
</unit>
