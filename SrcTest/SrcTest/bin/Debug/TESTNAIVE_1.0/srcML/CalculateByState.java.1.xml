<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\CalculateByState.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">SQLException</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Collections</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">HashMap</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">util</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Iterator</name></name>;</import>

<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">tada</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">CalculateByStateInterface</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">com</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">riskIt</name><op:operator pos:line="14" pos:column="18">.</op:operator><name pos:line="14" pos:column="19">interfaces</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">CalcImplInterface</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">interfaces</name><op:operator pos:line="15" pos:column="29">.</op:operator><name pos:line="15" pos:column="30">TypeWageDataStructureInterface</name></name>;</import>
<import pos:line="16" pos:column="1">import <name><name pos:line="16" pos:column="8">com</name><op:operator pos:line="16" pos:column="11">.</op:operator><name pos:line="16" pos:column="12">riskIt</name><op:operator pos:line="16" pos:column="18">.</op:operator><name pos:line="16" pos:column="19">util</name><op:operator pos:line="16" pos:column="23">.</op:operator><name pos:line="16" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="19" pos:column="1">/**
 * CalculateByState.java
 * Purpose: Calculation Class to calculate average weekly wage and average
 * 	income by State.  Used for requirements 4 and 6.
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<comment type="block" format="javadoc" pos:line="28" pos:column="1">/**
 * Object to perform all calculations necessary to calculate
 * 	average income and average weekly wage by all or by a given
 * 	race state contained in the database. Uses Hash Maps and
 *  offloads processing to the JVM to overcome inherent
 *  inefficiencies in the Derby database thus significantly improving
 *  performance.
 */</comment>
<class><specifier pos:line="36" pos:column="1">public</specifier> class <name pos:line="36" pos:column="14">CalculateByState</name> <super><implements pos:line="36" pos:column="31">implements <name pos:line="36" pos:column="42">CalculateByStateInterface</name></implements></super> <block pos:line="36" pos:column="68">{

	<decl_stmt><decl><type><name pos:line="38" pos:column="9">ResultSet</name></type> <name pos:line="38" pos:column="19">results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">Statement</name></type> <name pos:line="39" pos:column="19">statement</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:line="41" pos:column="9">/**
	 * Returns a list with all the state codes contained in the database.
	 * &lt;p&gt;
	 * @return				An ArrayList&lt;String&gt; of all state codes.
	 */</comment>
	<function><type><annotation pos:line="46" pos:column="9">@<name pos:line="46" pos:column="10">TaDaMethod</name><argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">variablesToTrack</name> <op:operator pos:line="46" pos:column="38">=</op:operator><block pos:line="46" pos:column="39">{<expr><lit:literal type="string" pos:line="46" pos:column="40">"stateList"</lit:literal></expr>}</block></expr></argument>,
			<argument><expr><name pos:line="47" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="47" pos:column="56">=</op:operator> <block pos:line="47" pos:column="58">{<expr><lit:literal type="string" pos:line="47" pos:column="59">"ziptable.statename"</lit:literal></expr>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="48" pos:column="9">public</specifier> <name><name pos:line="48" pos:column="16">ArrayList</name><argument_list pos:line="48" pos:column="25">&lt;<argument><name pos:line="48" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="34">getStateList</name><parameter_list pos:line="48" pos:column="46">()</parameter_list> <block pos:line="48" pos:column="49">{
		<decl_stmt><decl><type><name><name pos:line="49" pos:column="17">ArrayList</name><argument_list pos:line="49" pos:column="26">&lt;<argument><name pos:line="49" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="35">stateList</name> <init pos:line="49" pos:column="45">= <expr><op:operator pos:line="49" pos:column="47">new</op:operator> <call><name><name pos:line="49" pos:column="51">ArrayList</name><argument_list pos:line="49" pos:column="60">&lt;<argument><name pos:line="49" pos:column="61">String</name></argument>&gt;</argument_list></name><argument_list pos:line="49" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<try pos:line="51" pos:column="17">try <block pos:line="51" pos:column="21">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">statement</name> <op:operator pos:line="52" pos:column="35">=</op:operator> <call><name><name pos:line="52" pos:column="37">Factory</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">getConnection</name></name><argument_list pos:line="52" pos:column="58">()</argument_list></call><op:operator pos:line="52" pos:column="60">.</op:operator><call><name pos:line="52" pos:column="61">createStatement</name><argument_list pos:line="52" pos:column="76">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="53" pos:column="25">results</name> <op:operator pos:line="53" pos:column="33">=</op:operator> <call><name><name pos:line="53" pos:column="35">statement</name><op:operator pos:line="53" pos:column="44">.</op:operator><name pos:line="53" pos:column="45">executeQuery</name></name><argument_list pos:line="53" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="58">"SELECT DISTINCT STATENAME FROM ziptable"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="54" pos:column="25">while <condition pos:line="54" pos:column="31">(<expr><call><name><name pos:line="54" pos:column="32">results</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">next</name></name><argument_list pos:line="54" pos:column="44">()</argument_list></call></expr>)</condition> <block pos:line="54" pos:column="48">{
				<if pos:line="55" pos:column="33">if<condition pos:line="55" pos:column="35">(<expr><call><name><name pos:line="55" pos:column="36">results</name><op:operator pos:line="55" pos:column="43">.</op:operator><name pos:line="55" pos:column="44">getString</name></name><argument_list pos:line="55" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="54">"STATENAME"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="67">!=</op:operator> <lit:literal type="null" pos:line="55" pos:column="70">null</lit:literal></expr>)</condition><then><block pos:line="55" pos:column="75">{
					<expr_stmt><expr><call><name><name pos:line="56" pos:column="41">stateList</name><op:operator pos:line="56" pos:column="50">.</op:operator><name pos:line="56" pos:column="51">add</name></name><argument_list pos:line="56" pos:column="54">(<argument><expr><call><name><name pos:line="56" pos:column="55">results</name><op:operator pos:line="56" pos:column="62">.</op:operator><name pos:line="56" pos:column="63">getString</name></name><argument_list pos:line="56" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="75">.</op:operator><call><name pos:line="56" pos:column="76">trim</name><argument_list pos:line="56" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></while>
		}</block> <catch pos:line="59" pos:column="19">catch <parameter_list pos:line="59" pos:column="25">(<param><decl><type><name pos:line="59" pos:column="26">SQLException</name></type> <name pos:line="59" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="42">{
			<while pos:line="60" pos:column="25">while <condition pos:line="60" pos:column="31">(<expr><name pos:line="60" pos:column="32">e</name> <op:operator pos:line="60" pos:column="34">!=</op:operator> <lit:literal type="null" pos:line="60" pos:column="37">null</lit:literal></expr>)</condition> <block pos:line="60" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="61" pos:column="33">System</name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">err</name><op:operator pos:line="61" pos:column="43">.</op:operator><name pos:line="61" pos:column="44">println</name></name><argument_list pos:line="61" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="52">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="62" pos:column="33">System</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">err</name><op:operator pos:line="62" pos:column="43">.</op:operator><name pos:line="62" pos:column="44">println</name></name><argument_list pos:line="62" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="52">"  SQL State:  "</lit:literal> <op:operator pos:line="62" pos:column="69">+</op:operator> <call><name><name pos:line="62" pos:column="71">e</name><op:operator pos:line="62" pos:column="72">.</op:operator><name pos:line="62" pos:column="73">getSQLState</name></name><argument_list pos:line="62" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">System</name><op:operator pos:line="63" pos:column="39">.</op:operator><name pos:line="63" pos:column="40">err</name><op:operator pos:line="63" pos:column="43">.</op:operator><name pos:line="63" pos:column="44">println</name></name><argument_list pos:line="63" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="52">"  Error Code: "</lit:literal> <op:operator pos:line="63" pos:column="69">+</op:operator> <call><name><name pos:line="63" pos:column="71">e</name><op:operator pos:line="63" pos:column="72">.</op:operator><name pos:line="63" pos:column="73">getErrorCode</name></name><argument_list pos:line="63" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="64" pos:column="33">System</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">err</name><op:operator pos:line="64" pos:column="43">.</op:operator><name pos:line="64" pos:column="44">println</name></name><argument_list pos:line="64" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="52">"  Message:    "</lit:literal> <op:operator pos:line="64" pos:column="69">+</op:operator> <call><name><name pos:line="64" pos:column="71">e</name><op:operator pos:line="64" pos:column="72">.</op:operator><name pos:line="64" pos:column="73">getMessage</name></name><argument_list pos:line="64" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="65" pos:column="33">// for stack traces, refer to derby.log or uncomment this:</comment>
				<comment type="line" pos:line="66" pos:column="33">// e.printStackTrace(System.err);</comment>
				<expr_stmt><expr><name pos:line="67" pos:column="33">e</name> <op:operator pos:line="67" pos:column="35">=</op:operator> <call><name><name pos:line="67" pos:column="37">e</name><op:operator pos:line="67" pos:column="38">.</op:operator><name pos:line="67" pos:column="39">getNextException</name></name><argument_list pos:line="67" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			}</block></while>
		}</block></catch></try>

		<expr_stmt><expr><call><name><name pos:line="71" pos:column="17">Collections</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">sort</name></name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">stateList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="72" pos:column="17">return <expr><name pos:line="72" pos:column="24">stateList</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="75" pos:column="9">/**
	 * Checks if a state code is contained in the database
	 * &lt;p&gt;
	 * @param 				A String of a state code to test
	 * @return				Boolean true / false answer
	 */</comment>
	<function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">boolean</name></type> <name pos:line="81" pos:column="24">isInStateList</name><parameter_list pos:line="81" pos:column="37">(<param><decl><type><name pos:line="81" pos:column="38">String</name></type> <name pos:line="81" pos:column="45">state</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="82" pos:column="17">ArrayList</name><argument_list pos:line="82" pos:column="26">&lt;<argument><name pos:line="82" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="82" pos:column="35">stateList</name> <init pos:line="82" pos:column="45">= <expr><call><name pos:line="82" pos:column="47">getStateList</name><argument_list pos:line="82" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="84" pos:column="17">if<condition pos:line="84" pos:column="19">(<expr><name pos:line="84" pos:column="20">state</name> <op:operator pos:line="84" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="84" pos:column="29">null</lit:literal></expr>)</condition><then><block pos:line="84" pos:column="34">{
			<expr_stmt><expr><name pos:line="85" pos:column="25">state</name> <op:operator pos:line="85" pos:column="31">=</op:operator> <lit:literal type="string" pos:line="85" pos:column="33">""</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="86" pos:column="19">else <block pos:line="86" pos:column="24">{
			<expr_stmt><expr><name pos:line="87" pos:column="25">state</name> <op:operator pos:line="87" pos:column="31">=</op:operator> <call><name><name pos:line="87" pos:column="33">state</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">trim</name></name><argument_list pos:line="87" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
		<for pos:line="90" pos:column="17">for (<init><decl><type><name pos:line="90" pos:column="22">String</name></type> <name pos:line="90" pos:column="29">i</name> <range pos:line="90" pos:column="31">: <expr><name pos:line="90" pos:column="33">stateList</name></expr></range></decl></init>) <block pos:line="90" pos:column="44">{
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><call><name><name pos:line="91" pos:column="29">i</name><op:operator pos:line="91" pos:column="30">.</op:operator><name pos:line="91" pos:column="31">trim</name></name><argument_list pos:line="91" pos:column="35">()</argument_list></call><op:operator pos:line="91" pos:column="37">.</op:operator><call><name pos:line="91" pos:column="38">equalsIgnoreCase</name><argument_list pos:line="91" pos:column="54">(<argument><expr><name pos:line="91" pos:column="55">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="62"> <block pos:line="91" pos:column="63">{
				<return pos:line="92" pos:column="33">return <expr><lit:literal type="boolean" pos:line="92" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="95" pos:column="17">return <expr><lit:literal type="boolean" pos:line="95" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="98" pos:column="9">/**
	 * Calculates average income for a state code
	 * &lt;p&gt;
	 * @param 				A String of a state code to request
	 * 						Warning: This method does not check if the 
	 * 							state string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInStateList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="111" pos:column="9">public</specifier> <name pos:line="111" pos:column="16">double</name></type> <name pos:line="111" pos:column="23">calculateIncomeByState</name><parameter_list pos:line="111" pos:column="45">(<param><decl><type><name pos:line="111" pos:column="46">String</name></type> <name pos:line="111" pos:column="53">state</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="60">{
		<return pos:line="112" pos:column="17">return <expr><call><name pos:line="112" pos:column="24">calculateIncome</name><argument_list pos:line="112" pos:column="39">(<argument><expr><name pos:line="112" pos:column="40">state</name></expr></argument>, <argument><expr><call><name><name pos:line="112" pos:column="47">Factory</name><op:operator pos:line="112" pos:column="54">.</op:operator><name pos:line="112" pos:column="55">getYearlyImpl</name></name><argument_list pos:line="112" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="115" pos:column="9">/**
	 * Calculates average weekly wage for a state code
	 * &lt;p&gt;
	 * @param 				A String of a state code to request
	 * 						Warning: This method does not check if the 
	 * 							state string submitted is contained in
	 * 							the database as this is an expensive call to
	 * 							the db.  To check if the string is contained
	 * 							in the db use the method :
	 * 							isInStateList(String)
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="128" pos:column="9">public</specifier> <name pos:line="128" pos:column="16">double</name></type> <name pos:line="128" pos:column="23">calculateWeeklyWageByState</name><parameter_list pos:line="128" pos:column="49">(<param><decl><type><name pos:line="128" pos:column="50">String</name></type> <name pos:line="128" pos:column="57">state</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="64">{
		<return pos:line="129" pos:column="17">return <expr><call><name pos:line="129" pos:column="24">calculateIncome</name><argument_list pos:line="129" pos:column="39">(<argument><expr><name pos:line="129" pos:column="40">state</name></expr></argument>, <argument><expr><call><name><name pos:line="129" pos:column="47">Factory</name><op:operator pos:line="129" pos:column="54">.</op:operator><name pos:line="129" pos:column="55">getWeeklyImpl</name></name><argument_list pos:line="129" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="132" pos:column="9">/**
	 * Calculates average income for all states in the database
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="138" pos:column="9">public</specifier> <name pos:line="138" pos:column="16">double</name></type> <name pos:line="138" pos:column="23">calculateIncomeByAllStates</name><parameter_list pos:line="138" pos:column="49">()</parameter_list> <block pos:line="138" pos:column="52">{<empty_stmt pos:line="138" pos:column="53">;</empty_stmt>
		<return pos:line="139" pos:column="17">return <expr><call><name pos:line="139" pos:column="24">calculateIncome</name><argument_list pos:line="139" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="40">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="139" pos:column="47">Factory</name><op:operator pos:line="139" pos:column="54">.</op:operator><name pos:line="139" pos:column="55">getYearlyImpl</name></name><argument_list pos:line="139" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="142" pos:column="9">/**
	 * Calculates average weekly wage for all states in the database
	 * &lt;p&gt;
	 * @return				A Double rounded to two decimal places using the
	 * 							ROUND_HALF_EVEN method of the BigDecimal class.
	 */</comment>
	<function><type><specifier pos:line="148" pos:column="9">public</specifier> <name pos:line="148" pos:column="16">double</name></type> <name pos:line="148" pos:column="23">calculagteWeeklyWageByAllState</name><parameter_list pos:line="148" pos:column="53">()</parameter_list> <block pos:line="148" pos:column="56">{
		<return pos:line="149" pos:column="17">return <expr><call><name pos:line="149" pos:column="24">calculateIncome</name><argument_list pos:line="149" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="40">"all"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="149" pos:column="47">Factory</name><op:operator pos:line="149" pos:column="54">.</op:operator><name pos:line="149" pos:column="55">getWeeklyImpl</name></name><argument_list pos:line="149" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><annotation pos:line="152" pos:column="9">@<name pos:line="152" pos:column="10">TaDaMethod</name><argument_list pos:line="152" pos:column="20">(<argument><expr><name pos:line="152" pos:column="21">variablesToTrack</name> <op:operator pos:line="152" pos:column="38">=</op:operator><block pos:line="152" pos:column="39">{<expr><lit:literal type="string" pos:line="152" pos:column="40">"ssnZipHM"</lit:literal></expr><op:operator pos:line="152" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="152" pos:column="52">"ssnZipHM"</lit:literal></expr></argument><op:operator pos:line="152" pos:column="62">,</op:operator> <argument><expr><lit:literal type="string" pos:line="152" pos:column="64">"zipStateHM"</lit:literal></expr></argument><op:operator pos:line="152" pos:column="76">,</op:operator> <argument><expr><lit:literal type="string" pos:line="152" pos:column="78">"zipStateHM"</lit:literal></expr></argument><op:operator pos:line="152" pos:column="90">,</op:operator>  <argument><expr><lit:literal type="string" pos:line="152" pos:column="93">"ssnWageHM"</lit:literal></expr></argument><op:operator pos:line="152" pos:column="104">,</op:operator> <argument><expr><lit:literal type="string" pos:line="152" pos:column="106">"ssnWageHM"</lit:literal></expr></argument><op:operator pos:line="152" pos:column="117">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="153" pos:column="25">"ssnWorkWeeks"</lit:literal></expr></argument><op:operator pos:line="153" pos:column="39">,</op:operator> <argument><expr><lit:literal type="string" pos:line="153" pos:column="41">"ssnWorkWeeks"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="154" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="154" pos:column="56">=</op:operator> <block pos:line="154" pos:column="58">{<expr><lit:literal type="string" pos:line="154" pos:column="59">"userrecord,zip"</lit:literal></expr><op:operator pos:line="154" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="154" pos:column="77">"userrecord.ssn"</lit:literal></expr></argument><op:operator pos:line="154" pos:column="93">,</op:operator> 
			<argument><expr><lit:literal type="string" pos:line="155" pos:column="25">"ziptable.zip"</lit:literal></expr></argument><op:operator pos:line="155" pos:column="39">,</op:operator> <argument><expr><lit:literal type="string" pos:line="155" pos:column="41">"ziptable.statename"</lit:literal></expr></argument><op:operator pos:line="155" pos:column="61">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="156" pos:column="25">"job.ssn"</lit:literal></expr></argument><op:operator pos:line="156" pos:column="34">,</op:operator> <argument><expr><lit:literal type="string" pos:line="156" pos:column="36">"job.WEEKWAGE"</lit:literal></expr></argument><op:operator pos:line="156" pos:column="50">,</op:operator>
			<argument><expr><lit:literal type="string" pos:line="157" pos:column="25">"job.ssn"</lit:literal></expr></argument><op:operator pos:line="157" pos:column="34">,</op:operator> <argument><expr><lit:literal type="string" pos:line="157" pos:column="36">"job.WORKWEEKS"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="158" pos:column="9">private</specifier> <name pos:line="158" pos:column="17">double</name></type> <name pos:line="158" pos:column="24">calculateIncome</name><parameter_list pos:line="158" pos:column="39">(<param><decl><type><name pos:line="158" pos:column="40">String</name></type> <name pos:line="158" pos:column="47">stateIn</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="56">CalcImplInterface</name></type> <name pos:line="158" pos:column="74">type</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="80">{

		<decl_stmt><decl><type><name pos:line="160" pos:column="17">double</name></type> <name pos:line="160" pos:column="24">returnValue</name> <init pos:line="160" pos:column="36">= <expr><lit:literal type="number" pos:line="160" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="161" pos:column="17">HashMap</name><argument_list pos:line="161" pos:column="24">&lt;<argument><name pos:line="161" pos:column="25">Integer</name></argument>, <argument><name pos:line="161" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="42">ssnZipHM</name> <init pos:line="161" pos:column="51">= <expr><op:operator pos:line="161" pos:column="53">new</op:operator> <call><name><name pos:line="161" pos:column="57">HashMap</name><argument_list pos:line="161" pos:column="64">&lt;<argument><name pos:line="161" pos:column="65">Integer</name></argument>, <argument><name pos:line="161" pos:column="74">String</name></argument>&gt;</argument_list></name><argument_list pos:line="161" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="162" pos:column="17">HashMap</name><argument_list pos:line="162" pos:column="24">&lt;<argument><name pos:line="162" pos:column="25">String</name></argument>, <argument><name pos:line="162" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="41">zipStateHM</name> <init pos:line="162" pos:column="52">= <expr><op:operator pos:line="162" pos:column="54">new</op:operator> <call><name><name pos:line="162" pos:column="58">HashMap</name><argument_list pos:line="162" pos:column="65">&lt;<argument><name pos:line="162" pos:column="66">String</name></argument>, <argument><name pos:line="162" pos:column="74">String</name></argument>&gt;</argument_list></name><argument_list pos:line="162" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="163" pos:column="17">HashMap</name><argument_list pos:line="163" pos:column="24">&lt;<argument><name pos:line="163" pos:column="25">Integer</name></argument>, <argument><name pos:line="163" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="163" pos:column="43">ssnWageHM</name> <init pos:line="163" pos:column="53">= <expr><op:operator pos:line="163" pos:column="55">new</op:operator> <call><name><name pos:line="163" pos:column="59">HashMap</name><argument_list pos:line="163" pos:column="66">&lt;<argument><name pos:line="163" pos:column="67">Integer</name></argument>, <argument><name pos:line="163" pos:column="76">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="163" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="164" pos:column="17">HashMap</name><argument_list pos:line="164" pos:column="24">&lt;<argument><name pos:line="164" pos:column="25">Integer</name></argument>, <argument><name pos:line="164" pos:column="34">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="43">ssnWorkWeeks</name> <init pos:line="164" pos:column="56">= <expr><op:operator pos:line="164" pos:column="58">new</op:operator> <call><name><name pos:line="164" pos:column="62">HashMap</name><argument_list pos:line="164" pos:column="69">&lt;<argument><name pos:line="164" pos:column="70">Integer</name></argument>, <argument><name pos:line="164" pos:column="79">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="164" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">String</name></type> <name pos:line="165" pos:column="24">stateCode</name> <init pos:line="165" pos:column="34">= <expr><lit:literal type="null" pos:line="165" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="166" pos:column="17">int</name></type> <name pos:line="166" pos:column="21">weekWage</name> <init pos:line="166" pos:column="30">= <expr><lit:literal type="number" pos:line="166" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">int</name></type> <name pos:line="167" pos:column="21">workWeeks</name> <init pos:line="167" pos:column="31">= <expr><lit:literal type="number" pos:line="167" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="168" pos:column="17">ArrayList</name><argument_list pos:line="168" pos:column="26">&lt;<argument><name pos:line="168" pos:column="27">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="59">stateWageAL</name> <init pos:line="168" pos:column="71">= <expr><op:operator pos:line="168" pos:column="73">new</op:operator> <call><name><name pos:line="168" pos:column="77">ArrayList</name><argument_list pos:line="168" pos:column="86">&lt;<argument><name pos:line="168" pos:column="87">TypeWageDataStructureInterface</name></argument>&gt;</argument_list></name><argument_list pos:line="168" pos:column="118">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">double</name></type> <name pos:line="169" pos:column="24">sum</name> <init pos:line="169" pos:column="28">= <expr><lit:literal type="number" pos:line="169" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">double</name></type> <name pos:line="170" pos:column="24">count</name> <init pos:line="170" pos:column="30">= <expr><lit:literal type="number" pos:line="170" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="172" pos:column="17">if<condition pos:line="172" pos:column="19">(<expr><name pos:line="172" pos:column="20">stateIn</name> <op:operator pos:line="172" pos:column="28">==</op:operator> <lit:literal type="null" pos:line="172" pos:column="31">null</lit:literal></expr>)</condition><then><block pos:line="172" pos:column="36">{
			<expr_stmt><expr><name pos:line="173" pos:column="25">stateIn</name> <op:operator pos:line="173" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="173" pos:column="35">"bad_value_return_0"</lit:literal></expr>;</expr_stmt>
		}</block></then><else pos:line="174" pos:column="18">else <block pos:line="174" pos:column="23">{
			<expr_stmt><expr><name pos:line="175" pos:column="25">stateIn</name> <op:operator pos:line="175" pos:column="33">=</op:operator> <call><name><name pos:line="175" pos:column="35">stateIn</name><op:operator pos:line="175" pos:column="42">.</op:operator><name pos:line="175" pos:column="43">trim</name></name><argument_list pos:line="175" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>

		<try pos:line="178" pos:column="17">try <block pos:line="178" pos:column="21">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">statement</name> <op:operator pos:line="179" pos:column="35">=</op:operator> <call><name><name pos:line="179" pos:column="37">Factory</name><op:operator pos:line="179" pos:column="44">.</op:operator><name pos:line="179" pos:column="45">getConnection</name></name><argument_list pos:line="179" pos:column="58">()</argument_list></call><op:operator pos:line="179" pos:column="60">.</op:operator><call><name pos:line="179" pos:column="61">createStatement</name><argument_list pos:line="179" pos:column="76">()</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="181" pos:column="25">// Get the SSN and Zip from user record and put them in a hashMap  </comment>
			<expr_stmt><expr><name pos:line="182" pos:column="25">results</name> <op:operator pos:line="182" pos:column="33">=</op:operator> <call><name><name pos:line="182" pos:column="35">statement</name><op:operator pos:line="182" pos:column="44">.</op:operator><name pos:line="182" pos:column="45">executeQuery</name></name><argument_list pos:line="182" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="58">"SELECT SSN, ZIP from userrecord WHERE ZIP IS NOT NULL"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="183" pos:column="25">while <condition pos:line="183" pos:column="31">(<expr><call><name><name pos:line="183" pos:column="32">results</name><op:operator pos:line="183" pos:column="39">.</op:operator><name pos:line="183" pos:column="40">next</name></name><argument_list pos:line="183" pos:column="44">()</argument_list></call></expr>)</condition> <block pos:line="183" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="184" pos:column="33">ssnZipHM</name><op:operator pos:line="184" pos:column="41">.</op:operator><name pos:line="184" pos:column="42">put</name></name><argument_list pos:line="184" pos:column="45">(<argument><expr><call><name><name pos:line="184" pos:column="46">results</name><op:operator pos:line="184" pos:column="53">.</op:operator><name pos:line="184" pos:column="54">getInt</name></name><argument_list pos:line="184" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="61">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="184" pos:column="69">results</name><op:operator pos:line="184" pos:column="76">.</op:operator><name pos:line="184" pos:column="77">getString</name></name><argument_list pos:line="184" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="87">"ZIP"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>

			<comment type="line" pos:line="187" pos:column="25">// Get the ZIP and State Code from Zip Table and put them in a hash</comment>
			<comment type="line" pos:line="188" pos:column="25">// map</comment>
			<expr_stmt><expr><name pos:line="189" pos:column="25">results</name> <op:operator pos:line="189" pos:column="33">=</op:operator> <call><name><name pos:line="189" pos:column="35">statement</name><op:operator pos:line="189" pos:column="44">.</op:operator><name pos:line="189" pos:column="45">executeQuery</name></name><argument_list pos:line="189" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="58">"SELECT ZIP, STATENAME from ziptable"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="190" pos:column="25">while <condition pos:line="190" pos:column="31">(<expr><call><name><name pos:line="190" pos:column="32">results</name><op:operator pos:line="190" pos:column="39">.</op:operator><name pos:line="190" pos:column="40">next</name></name><argument_list pos:line="190" pos:column="44">()</argument_list></call></expr>)</condition> <block pos:line="190" pos:column="48">{
				<if pos:line="191" pos:column="33">if<condition pos:line="191" pos:column="35">(<expr><call><name><name pos:line="191" pos:column="36">results</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">getString</name></name><argument_list pos:line="191" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="54">"ZIP"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="61">==</op:operator> <lit:literal type="null" pos:line="191" pos:column="64">null</lit:literal> <op:operator pos:line="191" pos:column="69">||</op:operator> <call><name><name pos:line="191" pos:column="72">results</name><op:operator pos:line="191" pos:column="79">.</op:operator><name pos:line="191" pos:column="80">getString</name></name><argument_list pos:line="191" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="90">"STATENAME"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="103">==</op:operator> <lit:literal type="null" pos:line="191" pos:column="106">null</lit:literal></expr>)</condition><then><block pos:line="191" pos:column="111">{
					<continue pos:line="192" pos:column="41">continue;</continue>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="194" pos:column="33">zipStateHM</name><op:operator pos:line="194" pos:column="43">.</op:operator><name pos:line="194" pos:column="44">put</name></name><argument_list pos:line="194" pos:column="47">(<argument><expr><call><name><name pos:line="194" pos:column="48">results</name><op:operator pos:line="194" pos:column="55">.</op:operator><name pos:line="194" pos:column="56">getString</name></name><argument_list pos:line="194" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="66">"ZIP"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="194" pos:column="74">results</name><op:operator pos:line="194" pos:column="81">.</op:operator><name pos:line="194" pos:column="82">getString</name></name><argument_list pos:line="194" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="92">"STATENAME"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></while>
			
			<comment type="line" pos:line="197" pos:column="25">// Get the SSN and Wage from job table and put in a hash map</comment>
			<expr_stmt><expr><name pos:line="198" pos:column="25">results</name> <op:operator pos:line="198" pos:column="33">=</op:operator> <call><name><name pos:line="198" pos:column="35">statement</name><op:operator pos:line="198" pos:column="44">.</op:operator><name pos:line="198" pos:column="45">executeQuery</name></name><argument_list pos:line="198" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="58">"SELECT SSN, WEEKWAGE, WORKWEEKS from job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="199" pos:column="25">while <condition pos:line="199" pos:column="31">(<expr><call><name><name pos:line="199" pos:column="32">results</name><op:operator pos:line="199" pos:column="39">.</op:operator><name pos:line="199" pos:column="40">next</name></name><argument_list pos:line="199" pos:column="44">()</argument_list></call></expr>)</condition> <block pos:line="199" pos:column="48">{
				<if pos:line="200" pos:column="33">if<condition pos:line="200" pos:column="35">(<expr><call><name><name pos:line="200" pos:column="36">results</name><op:operator pos:line="200" pos:column="43">.</op:operator><name pos:line="200" pos:column="44">getInt</name></name><argument_list pos:line="200" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="51">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="200" pos:column="65">0</lit:literal></expr>)</condition><then><block pos:line="200" pos:column="67">{
					<expr_stmt><expr><call><name><name pos:line="201" pos:column="41">ssnWageHM</name><op:operator pos:line="201" pos:column="50">.</op:operator><name pos:line="201" pos:column="51">put</name></name><argument_list pos:line="201" pos:column="54">(<argument><expr><call><name><name pos:line="201" pos:column="55">results</name><op:operator pos:line="201" pos:column="62">.</op:operator><name pos:line="201" pos:column="63">getInt</name></name><argument_list pos:line="201" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="70">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="201" pos:column="78">results</name><op:operator pos:line="201" pos:column="85">.</op:operator><name pos:line="201" pos:column="86">getInt</name></name><argument_list pos:line="201" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="201" pos:column="93">"WEEKWAGE"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="203" pos:column="33">if<condition pos:line="203" pos:column="35">(<expr><call><name><name pos:line="203" pos:column="36">results</name><op:operator pos:line="203" pos:column="43">.</op:operator><name pos:line="203" pos:column="44">getInt</name></name><argument_list pos:line="203" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="51">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="203" pos:column="64">&gt;</op:operator> <lit:literal type="number" pos:line="203" pos:column="66">0</lit:literal></expr>)</condition><then><block pos:line="203" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="204" pos:column="41">ssnWorkWeeks</name><op:operator pos:line="204" pos:column="53">.</op:operator><name pos:line="204" pos:column="54">put</name></name><argument_list pos:line="204" pos:column="57">(<argument><expr><call><name><name pos:line="204" pos:column="58">results</name><op:operator pos:line="204" pos:column="65">.</op:operator><name pos:line="204" pos:column="66">getInt</name></name><argument_list pos:line="204" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="73">"SSN"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="204" pos:column="81">results</name><op:operator pos:line="204" pos:column="88">.</op:operator><name pos:line="204" pos:column="89">getInt</name></name><argument_list pos:line="204" pos:column="95">(<argument><expr><lit:literal type="string" pos:line="204" pos:column="96">"WORKWEEKS"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></while>

			<comment type="line" pos:line="208" pos:column="25">// Iterate through all the SSN's from main user record</comment>
			<comment type="line" pos:line="209" pos:column="25">// First find the zip for that SSN</comment>
			<for pos:line="210" pos:column="25">for (<init><decl><type><name><name pos:line="210" pos:column="30">Iterator</name><argument_list pos:line="210" pos:column="38">&lt;<argument><name pos:line="210" pos:column="39">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="48">i</name> <init pos:line="210" pos:column="50">= <expr><call><name><name pos:line="210" pos:column="52">ssnZipHM</name><op:operator pos:line="210" pos:column="60">.</op:operator><name pos:line="210" pos:column="61">keySet</name></name><argument_list pos:line="210" pos:column="67">()</argument_list></call><op:operator pos:line="210" pos:column="69">.</op:operator><call><name pos:line="210" pos:column="70">iterator</name><argument_list pos:line="210" pos:column="78">()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name pos:line="210" pos:column="82">i</name><op:operator pos:line="210" pos:column="83">.</op:operator><name pos:line="210" pos:column="84">hasNext</name></name><argument_list pos:line="210" pos:column="91">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="210" pos:column="96">{
				<decl_stmt><decl><type><name pos:line="211" pos:column="33">int</name></type> <name pos:line="211" pos:column="37">keySSN</name> <init pos:line="211" pos:column="44">= <expr><op:operator pos:line="211" pos:column="46">(</op:operator><name pos:line="211" pos:column="47">Integer</name><op:operator pos:line="211" pos:column="54">)</op:operator> <call><name><name pos:line="211" pos:column="56">i</name><op:operator pos:line="211" pos:column="57">.</op:operator><name pos:line="211" pos:column="58">next</name></name><argument_list pos:line="211" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="212" pos:column="33">String</name></type> <name pos:line="212" pos:column="40">zip</name> <init pos:line="212" pos:column="44">= <expr><op:operator pos:line="212" pos:column="46">(</op:operator><name pos:line="212" pos:column="47">String</name><op:operator pos:line="212" pos:column="53">)</op:operator> <call><name><name pos:line="212" pos:column="55">ssnZipHM</name><op:operator pos:line="212" pos:column="63">.</op:operator><name pos:line="212" pos:column="64">get</name></name><argument_list pos:line="212" pos:column="67">(<argument><expr><name pos:line="212" pos:column="68">keySSN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="213" pos:column="33">// Then find the state code for that zip</comment>
				<if pos:line="214" pos:column="33">if <condition pos:line="214" pos:column="36">(<expr><name pos:line="214" pos:column="37">zip</name> <op:operator pos:line="214" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="214" pos:column="44">null</lit:literal> <op:operator pos:line="214" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="214" pos:column="52">!</op:operator><op:operator pos:line="214" pos:column="53">(</op:operator><call><name><name pos:line="214" pos:column="54">zip</name><op:operator pos:line="214" pos:column="57">.</op:operator><name pos:line="214" pos:column="58">equals</name></name><argument_list pos:line="214" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="65">""</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="68">)</op:operator></expr>)</condition><then pos:line="214" pos:column="70"> <block pos:line="214" pos:column="71">{
					<expr_stmt><expr><name pos:line="215" pos:column="41">stateCode</name> <op:operator pos:line="215" pos:column="51">=</op:operator> <op:operator pos:line="215" pos:column="53">(</op:operator><name pos:line="215" pos:column="54">String</name><op:operator pos:line="215" pos:column="60">)</op:operator> <call><name><name pos:line="215" pos:column="62">zipStateHM</name><op:operator pos:line="215" pos:column="72">.</op:operator><name pos:line="215" pos:column="73">get</name></name><argument_list pos:line="215" pos:column="76">(<argument><expr><name pos:line="215" pos:column="77">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="216" pos:column="41">if <condition pos:line="216" pos:column="44">(<expr><name pos:line="216" pos:column="45">stateCode</name> <op:operator pos:line="216" pos:column="55">!=</op:operator> <lit:literal type="null" pos:line="216" pos:column="58">null</lit:literal></expr>)</condition><then pos:line="216" pos:column="63"> <block pos:line="216" pos:column="64">{
						<expr_stmt><expr><name pos:line="217" pos:column="49">stateCode</name> <op:operator pos:line="217" pos:column="59">=</op:operator> <call><name><name pos:line="217" pos:column="61">stateCode</name><op:operator pos:line="217" pos:column="70">.</op:operator><name pos:line="217" pos:column="71">trim</name></name><argument_list pos:line="217" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="219" pos:column="35">else <block pos:line="219" pos:column="40">{
					<expr_stmt><expr><name pos:line="220" pos:column="41">stateCode</name> <op:operator pos:line="220" pos:column="51">=</op:operator> <lit:literal type="null" pos:line="220" pos:column="53">null</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
				
				<comment type="line" pos:line="223" pos:column="33">// Then find weekly wage from job table based on ssn</comment>
				<comment type="line" pos:line="224" pos:column="33">// If Null or can not part to an int then Week Wage = 0;</comment>
				<if pos:line="225" pos:column="33">if <condition pos:line="225" pos:column="36">(<expr><call><name><name pos:line="225" pos:column="37">ssnWageHM</name><op:operator pos:line="225" pos:column="46">.</op:operator><name pos:line="225" pos:column="47">get</name></name><argument_list pos:line="225" pos:column="50">(<argument><expr><name pos:line="225" pos:column="51">keySSN</name></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="59">==</op:operator> <lit:literal type="null" pos:line="225" pos:column="62">null</lit:literal></expr>)</condition><then pos:line="225" pos:column="67"> <block pos:line="225" pos:column="68">{
					<expr_stmt><expr><name pos:line="226" pos:column="41">weekWage</name> <op:operator pos:line="226" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="226" pos:column="52">0</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="227" pos:column="35">else <block pos:line="227" pos:column="40">{
					<expr_stmt><expr><name pos:line="228" pos:column="41">weekWage</name> <op:operator pos:line="228" pos:column="50">=</op:operator> <op:operator pos:line="228" pos:column="52">(</op:operator><name pos:line="228" pos:column="53">Integer</name><op:operator pos:line="228" pos:column="60">)</op:operator> <call><name><name pos:line="228" pos:column="62">ssnWageHM</name><op:operator pos:line="228" pos:column="71">.</op:operator><name pos:line="228" pos:column="72">get</name></name><argument_list pos:line="228" pos:column="75">(<argument><expr><name pos:line="228" pos:column="76">keySSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

				<if pos:line="231" pos:column="33">if <condition pos:line="231" pos:column="36">(<expr><call><name><name pos:line="231" pos:column="37">ssnWorkWeeks</name><op:operator pos:line="231" pos:column="49">.</op:operator><name pos:line="231" pos:column="50">get</name></name><argument_list pos:line="231" pos:column="53">(<argument><expr><name pos:line="231" pos:column="54">keySSN</name></expr></argument>)</argument_list></call> <op:operator pos:line="231" pos:column="62">==</op:operator> <lit:literal type="null" pos:line="231" pos:column="65">null</lit:literal></expr>)</condition><then pos:line="231" pos:column="70"> <block pos:line="231" pos:column="71">{
					<expr_stmt><expr><name pos:line="232" pos:column="41">workWeeks</name> <op:operator pos:line="232" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="232" pos:column="53">0</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="233" pos:column="35">else <block pos:line="233" pos:column="40">{
					<expr_stmt><expr><name pos:line="234" pos:column="41">workWeeks</name> <op:operator pos:line="234" pos:column="51">=</op:operator> <op:operator pos:line="234" pos:column="53">(</op:operator><name pos:line="234" pos:column="54">Integer</name><op:operator pos:line="234" pos:column="61">)</op:operator> <call><name><name pos:line="234" pos:column="63">ssnWorkWeeks</name><op:operator pos:line="234" pos:column="75">.</op:operator><name pos:line="234" pos:column="76">get</name></name><argument_list pos:line="234" pos:column="79">(<argument><expr><name pos:line="234" pos:column="80">keySSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				
				<comment type="line" pos:line="237" pos:column="33">// Then build an new Array List inserting new StateWageClass</comment>
				<comment type="line" pos:line="238" pos:column="33">// object</comment>
				
				<expr_stmt><expr><call><name><name pos:line="240" pos:column="33">type</name><op:operator pos:line="240" pos:column="37">.</op:operator><name pos:line="240" pos:column="38">addToArrayList</name></name><argument_list pos:line="240" pos:column="52">(<argument><expr><name pos:line="240" pos:column="53">stateWageAL</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="66">stateCode</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="77">weekWage</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="87">workWeeks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<comment type="line" pos:line="243" pos:column="25">// Now go through the stateWageAL Array List and look for the state</comment>
			<comment type="line" pos:line="244" pos:column="25">// selected or all states for ALL</comment>
			
			<for pos:line="246" pos:column="25">for (<init><decl><type><name pos:line="246" pos:column="30">TypeWageDataStructureInterface</name></type> <name pos:line="246" pos:column="61">i</name> <range pos:line="246" pos:column="63">: <expr><name pos:line="246" pos:column="65">stateWageAL</name></expr></range></decl></init>) <block pos:line="246" pos:column="78">{
				<decl_stmt><decl><type><name pos:line="247" pos:column="33">double</name></type> <name pos:line="247" pos:column="40">result</name> <init pos:line="247" pos:column="47">= <expr><call><name><name pos:line="247" pos:column="49">type</name><op:operator pos:line="247" pos:column="53">.</op:operator><name pos:line="247" pos:column="54">calculateAverage</name></name><argument_list pos:line="247" pos:column="70">(<argument><expr><name pos:line="247" pos:column="71">stateIn</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="80">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="248" pos:column="33">if<condition pos:line="248" pos:column="35">(<expr><name pos:line="248" pos:column="36">result</name> <op:operator pos:line="248" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="248" pos:column="45">0</lit:literal></expr>)</condition><then><block pos:line="248" pos:column="47">{
					<expr_stmt><expr><name pos:line="249" pos:column="41">sum</name> <op:operator pos:line="249" pos:column="45">=</op:operator> <name pos:line="249" pos:column="47">sum</name> <op:operator pos:line="249" pos:column="51">+</op:operator> <name pos:line="249" pos:column="53">result</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="250" pos:column="41">count</name><op:operator pos:line="250" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			
			<comment type="line" pos:line="254" pos:column="25">// Handle Divide by 0 for invalid state codes or states with no wage</comment>
			<comment type="line" pos:line="255" pos:column="25">// data</comment>
			<if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><name pos:line="256" pos:column="29">count</name> <op:operator pos:line="256" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="256" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="256" pos:column="40"> <block pos:line="256" pos:column="41">{
				<expr_stmt><expr><name pos:line="257" pos:column="33">returnValue</name> <op:operator pos:line="257" pos:column="45">=</op:operator> <lit:literal type="number" pos:line="257" pos:column="47">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="258" pos:column="27">else <block pos:line="258" pos:column="32">{
				<expr_stmt><expr><name pos:line="259" pos:column="33">returnValue</name> <op:operator pos:line="259" pos:column="45">=</op:operator> <name pos:line="259" pos:column="47">sum</name> <op:operator pos:line="259" pos:column="51">/</op:operator> <name pos:line="259" pos:column="53">count</name></expr>;</expr_stmt>
			}</block></else></if>

		}</block> <catch pos:line="262" pos:column="19">catch <parameter_list pos:line="262" pos:column="25">(<param><decl><type><name pos:line="262" pos:column="26">SQLException</name></type> <name pos:line="262" pos:column="39">e</name></decl></param>)</parameter_list> <block pos:line="262" pos:column="42">{
			<block pos:line="263" pos:column="25">{
				<while pos:line="264" pos:column="33">while <condition pos:line="264" pos:column="39">(<expr><name pos:line="264" pos:column="40">e</name> <op:operator pos:line="264" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="264" pos:column="45">null</lit:literal></expr>)</condition> <block pos:line="264" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="265" pos:column="41">System</name><op:operator pos:line="265" pos:column="47">.</op:operator><name pos:line="265" pos:column="48">err</name><op:operator pos:line="265" pos:column="51">.</op:operator><name pos:line="265" pos:column="52">println</name></name><argument_list pos:line="265" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="60">"\n----- SQLException -----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="266" pos:column="41">System</name><op:operator pos:line="266" pos:column="47">.</op:operator><name pos:line="266" pos:column="48">err</name><op:operator pos:line="266" pos:column="51">.</op:operator><name pos:line="266" pos:column="52">println</name></name><argument_list pos:line="266" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="60">"  SQL State:  "</lit:literal> <op:operator pos:line="266" pos:column="77">+</op:operator> <call><name><name pos:line="266" pos:column="79">e</name><op:operator pos:line="266" pos:column="80">.</op:operator><name pos:line="266" pos:column="81">getSQLState</name></name><argument_list pos:line="266" pos:column="92">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="267" pos:column="41">System</name><op:operator pos:line="267" pos:column="47">.</op:operator><name pos:line="267" pos:column="48">err</name><op:operator pos:line="267" pos:column="51">.</op:operator><name pos:line="267" pos:column="52">println</name></name><argument_list pos:line="267" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="60">"  Error Code: "</lit:literal> <op:operator pos:line="267" pos:column="77">+</op:operator> <call><name><name pos:line="267" pos:column="79">e</name><op:operator pos:line="267" pos:column="80">.</op:operator><name pos:line="267" pos:column="81">getErrorCode</name></name><argument_list pos:line="267" pos:column="93">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="268" pos:column="41">System</name><op:operator pos:line="268" pos:column="47">.</op:operator><name pos:line="268" pos:column="48">err</name><op:operator pos:line="268" pos:column="51">.</op:operator><name pos:line="268" pos:column="52">println</name></name><argument_list pos:line="268" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="60">"  Message:    "</lit:literal> <op:operator pos:line="268" pos:column="77">+</op:operator> <call><name><name pos:line="268" pos:column="79">e</name><op:operator pos:line="268" pos:column="80">.</op:operator><name pos:line="268" pos:column="81">getMessage</name></name><argument_list pos:line="268" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="269" pos:column="41">// for stack traces, refer to derby.log or uncomment this:</comment>
					<comment type="line" pos:line="270" pos:column="41">// e.printStackTrace(System.err);</comment>
					<expr_stmt><expr><name pos:line="271" pos:column="41">e</name> <op:operator pos:line="271" pos:column="43">=</op:operator> <call><name><name pos:line="271" pos:column="45">e</name><op:operator pos:line="271" pos:column="46">.</op:operator><name pos:line="271" pos:column="47">getNextException</name></name><argument_list pos:line="271" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
				<throw pos:line="273" pos:column="33">throw <expr><op:operator pos:line="273" pos:column="39">new</op:operator> <call><name pos:line="273" pos:column="43">IllegalArgumentException</name><argument_list pos:line="273" pos:column="67">()</argument_list></call></expr>;</throw>
			}</block>
		}</block></catch></try>

		<return pos:line="277" pos:column="17">return <expr><call><name><name pos:line="277" pos:column="24">Factory</name><op:operator pos:line="277" pos:column="31">.</op:operator><name pos:line="277" pos:column="32">getRoundMethod</name></name><argument_list pos:line="277" pos:column="46">(<argument><expr><name pos:line="277" pos:column="47">returnValue</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
}</block></class>
</unit>
