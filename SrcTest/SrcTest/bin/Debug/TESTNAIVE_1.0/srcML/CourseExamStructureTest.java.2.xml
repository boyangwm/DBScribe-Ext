<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\CourseExamStructureTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">HashMap</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">org</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">junit</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">After</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">org</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">junit</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Test</name></name>;</import>


<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">CourseExamStructureTest</name> <block pos:line="12" pos:column="38">{

	
	<function><type><annotation pos:line="15" pos:column="9">@<name pos:line="15" pos:column="10">Test</name></annotation>
	<specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">testAddNewExam</name><parameter_list pos:line="16" pos:column="35">()</parameter_list> <block pos:line="16" pos:column="38">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int</name></type> <name pos:line="17" pos:column="21">offerID</name> <init pos:line="17" pos:column="29">= <expr><lit:literal type="number" pos:line="17" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">String</name></type> <name pos:line="18" pos:column="24">examName</name> <init pos:line="18" pos:column="33">= <expr><lit:literal type="string" pos:line="18" pos:column="35">"Assgn3"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int</name></type> <name pos:line="19" pos:column="21">totalMarks</name> <init pos:line="19" pos:column="32">= <expr><lit:literal type="number" pos:line="19" pos:column="34">20</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">CourseOffered</name></type> <name pos:line="20" pos:column="31">offeredCourse</name> <init pos:line="20" pos:column="45">= <expr><lit:literal type="null" pos:line="20" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="21" pos:column="17">try <block pos:line="21" pos:column="21">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">offeredCourse</name> <op:operator pos:line="22" pos:column="39">=</op:operator> <name pos:line="22" pos:column="41">offeredCourse</name> <op:operator pos:line="22" pos:column="55">=</op:operator> <op:operator pos:line="22" pos:column="57">new</op:operator> <call><name pos:line="22" pos:column="61">CourseOffered</name><argument_list pos:line="22" pos:column="74">(<argument><expr><name pos:line="22" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="23" pos:column="19">catch <parameter_list pos:line="23" pos:column="25">(<param><decl><type><name><name pos:line="23" pos:column="26">Course</name><op:operator pos:line="23" pos:column="32">.</op:operator><name pos:line="23" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="23" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="24" pos:column="25">e1</name><op:operator pos:line="24" pos:column="27">.</op:operator><name pos:line="24" pos:column="28">printStackTrace</name></name><argument_list pos:line="24" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="25" pos:column="19">catch <parameter_list pos:line="25" pos:column="25">(<param><decl><type><name><name pos:line="25" pos:column="26">CourseOffered</name><op:operator pos:line="25" pos:column="39">.</op:operator><name pos:line="25" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="25" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="26" pos:column="25">e1</name><op:operator pos:line="26" pos:column="27">.</op:operator><name pos:line="26" pos:column="28">printStackTrace</name></name><argument_list pos:line="26" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<decl_stmt><decl><type><name pos:line="29" pos:column="17">CourseExamStructure</name></type> <name pos:line="29" pos:column="37">examStruct</name> <init pos:line="29" pos:column="48">= <expr><op:operator pos:line="29" pos:column="50">new</op:operator> <call><name pos:line="29" pos:column="54">CourseExamStructure</name><argument_list pos:line="29" pos:column="73">(<argument><expr><name pos:line="29" pos:column="74">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="29" pos:column="88">examName</name></expr></argument>,<argument><expr><name pos:line="29" pos:column="97">totalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="30" pos:column="17">examStruct</name><op:operator pos:line="30" pos:column="27">.</op:operator><name pos:line="30" pos:column="28">deleteExistingExam</name></name><argument_list pos:line="30" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">boolean</name></type> <name pos:line="31" pos:column="25">examAdded</name> <init pos:line="31" pos:column="35">= <expr><call><name><name pos:line="31" pos:column="37">examStruct</name><op:operator pos:line="31" pos:column="47">.</op:operator><name pos:line="31" pos:column="48">addNewExam</name></name><argument_list pos:line="31" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">assertEquals</name><argument_list pos:line="32" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="32" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="32" pos:column="35">examAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	
	<function><type><annotation pos:line="36" pos:column="9">@<name pos:line="36" pos:column="10">Test</name></annotation>
	<specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">void</name></type> <name pos:line="37" pos:column="21">testModifyExistingExamName</name><parameter_list pos:line="37" pos:column="47">()</parameter_list> <block pos:line="37" pos:column="50">{
		<expr_stmt><expr><call><name><name pos:line="38" pos:column="17">System</name><op:operator pos:line="38" pos:column="23">.</op:operator><name pos:line="38" pos:column="24">out</name><op:operator pos:line="38" pos:column="27">.</op:operator><name pos:line="38" pos:column="28">println</name></name><argument_list pos:line="38" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="36">"-----testModifyExistingExamName----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int</name></type> <name pos:line="39" pos:column="21">offerID</name> <init pos:line="39" pos:column="29">= <expr><lit:literal type="number" pos:line="39" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">String</name></type> <name pos:line="40" pos:column="24">examName</name> <init pos:line="40" pos:column="33">= <expr><lit:literal type="string" pos:line="40" pos:column="35">"Assgn3"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">int</name></type> <name pos:line="42" pos:column="21">totalMarks</name> <init pos:line="42" pos:column="32">= <expr><lit:literal type="number" pos:line="42" pos:column="34">20</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">CourseOffered</name></type> <name pos:line="43" pos:column="31">offeredCourse</name> <init pos:line="43" pos:column="45">= <expr><lit:literal type="null" pos:line="43" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="44" pos:column="17">try <block pos:line="44" pos:column="21">{
			<expr_stmt><expr><name pos:line="45" pos:column="25">offeredCourse</name> <op:operator pos:line="45" pos:column="39">=</op:operator> <name pos:line="45" pos:column="41">offeredCourse</name> <op:operator pos:line="45" pos:column="55">=</op:operator> <op:operator pos:line="45" pos:column="57">new</op:operator> <call><name pos:line="45" pos:column="61">CourseOffered</name><argument_list pos:line="45" pos:column="74">(<argument><expr><name pos:line="45" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="46" pos:column="19">catch <parameter_list pos:line="46" pos:column="25">(<param><decl><type><name><name pos:line="46" pos:column="26">Course</name><op:operator pos:line="46" pos:column="32">.</op:operator><name pos:line="46" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="46" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">e1</name><op:operator pos:line="47" pos:column="27">.</op:operator><name pos:line="47" pos:column="28">printStackTrace</name></name><argument_list pos:line="47" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="48" pos:column="19">catch <parameter_list pos:line="48" pos:column="25">(<param><decl><type><name><name pos:line="48" pos:column="26">CourseOffered</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="48" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="49" pos:column="25">e1</name><op:operator pos:line="49" pos:column="27">.</op:operator><name pos:line="49" pos:column="28">printStackTrace</name></name><argument_list pos:line="49" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">CourseExamStructure</name></type> <name pos:line="52" pos:column="37">examStruct</name> <init pos:line="52" pos:column="48">= <expr><op:operator pos:line="52" pos:column="50">new</op:operator> <call><name pos:line="52" pos:column="54">CourseExamStructure</name><argument_list pos:line="52" pos:column="73">(<argument><expr><name pos:line="52" pos:column="74">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="52" pos:column="88">examName</name></expr></argument>,<argument><expr><name pos:line="52" pos:column="97">totalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="53" pos:column="17">examStruct</name><op:operator pos:line="53" pos:column="27">.</op:operator><name pos:line="53" pos:column="28">deleteExistingExam</name></name><argument_list pos:line="53" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="54" pos:column="17">examStruct</name><op:operator pos:line="54" pos:column="27">.</op:operator><name pos:line="54" pos:column="28">addNewExam</name></name><argument_list pos:line="54" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">boolean</name></type> <name pos:line="55" pos:column="25">examModified</name> <init pos:line="55" pos:column="38">= <expr><call><name><name pos:line="55" pos:column="40">examStruct</name><op:operator pos:line="55" pos:column="50">.</op:operator><name pos:line="55" pos:column="51">modifyExistingExamName</name></name><argument_list pos:line="55" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="74">"Assgn4"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="56" pos:column="17">examStruct</name> <op:operator pos:line="56" pos:column="28">=</op:operator> <op:operator pos:line="56" pos:column="30">new</op:operator> <call><name pos:line="56" pos:column="34">CourseExamStructure</name><argument_list pos:line="56" pos:column="53">(<argument><expr><name pos:line="56" pos:column="54">offeredCourse</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="56" pos:column="68">"Assgn4"</lit:literal></expr></argument>,<argument><expr><name pos:line="56" pos:column="77">totalMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="57" pos:column="17">examStruct</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">modifyExistingExamName</name></name><argument_list pos:line="57" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="51">"Assgn3"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="58" pos:column="17">System</name><op:operator pos:line="58" pos:column="23">.</op:operator><name pos:line="58" pos:column="24">out</name><op:operator pos:line="58" pos:column="27">.</op:operator><name pos:line="58" pos:column="28">println</name></name><argument_list pos:line="58" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="36">"-----testModifyExistingExamName----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">assertEquals</name><argument_list pos:line="59" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="59" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="59" pos:column="35">examModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
<comment type="line" pos:line="63" pos:column="1">//	@After</comment>
<comment type="line" pos:line="64" pos:column="1">//	public void reinititalizeModify(){</comment>
<comment type="line" pos:line="65" pos:column="1">//		int offerID = 410;</comment>
<comment type="line" pos:line="66" pos:column="1">//		String examName = "Assgn4";</comment>
<comment type="line" pos:line="67" pos:column="1">//		</comment>
<comment type="line" pos:line="68" pos:column="1">//		int totalMarks = 20; </comment>
<comment type="line" pos:line="69" pos:column="1">//		CourseOffered offeredCourse = null;</comment>
<comment type="line" pos:line="70" pos:column="1">//		try {</comment>
<comment type="line" pos:line="71" pos:column="1">//			offeredCourse = offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="72" pos:column="1">//		} catch (CourseDoesNotExistException e1) {</comment>
<comment type="line" pos:line="73" pos:column="1">//			e1.printStackTrace();</comment>
<comment type="line" pos:line="74" pos:column="1">//		} catch (CourseOfferingDoesNotExistException e1) {</comment>
<comment type="line" pos:line="75" pos:column="1">//			e1.printStackTrace();</comment>
<comment type="line" pos:line="76" pos:column="1">//		}</comment>
<comment type="line" pos:line="77" pos:column="1">//		</comment>
<comment type="line" pos:line="78" pos:column="1">//		CourseExamStructure examStruct = new CourseExamStructure(offeredCourse,examName,totalMarks);</comment>
<comment type="line" pos:line="79" pos:column="1">//		</comment>
<comment type="line" pos:line="80" pos:column="1">//		boolean examModified = examStruct.modifyExistingExamName("Assgn3");</comment>
<comment type="line" pos:line="81" pos:column="1">//	}</comment>

	<function><type><annotation pos:line="83" pos:column="9">@<name pos:line="83" pos:column="10">Test</name></annotation>
	<specifier pos:line="84" pos:column="9">public</specifier> <name pos:line="84" pos:column="16">void</name></type> <name pos:line="84" pos:column="21">testModifyExistingExamTotalMarks</name><parameter_list pos:line="84" pos:column="53">()</parameter_list> <block pos:line="84" pos:column="56">{
		<expr_stmt><expr><call><name><name pos:line="85" pos:column="17">System</name><op:operator pos:line="85" pos:column="23">.</op:operator><name pos:line="85" pos:column="24">out</name><op:operator pos:line="85" pos:column="27">.</op:operator><name pos:line="85" pos:column="28">println</name></name><argument_list pos:line="85" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="36">"-----testModifyExistingExamTotal----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="86" pos:column="17">int</name></type> <name pos:line="86" pos:column="21">offerID</name> <init pos:line="86" pos:column="29">= <expr><lit:literal type="number" pos:line="86" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="87" pos:column="17">String</name></type> <name pos:line="87" pos:column="24">examName</name> <init pos:line="87" pos:column="33">= <expr><lit:literal type="string" pos:line="87" pos:column="35">"Assgn3"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int</name></type> <name pos:line="88" pos:column="21">totalMarks</name> <init pos:line="88" pos:column="32">= <expr><lit:literal type="number" pos:line="88" pos:column="34">20</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="89" pos:column="17">CourseOffered</name></type> <name pos:line="89" pos:column="31">offeredCourse</name> <init pos:line="89" pos:column="45">= <expr><lit:literal type="null" pos:line="89" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="90" pos:column="17">try <block pos:line="90" pos:column="21">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">offeredCourse</name> <op:operator pos:line="91" pos:column="39">=</op:operator> <name pos:line="91" pos:column="41">offeredCourse</name> <op:operator pos:line="91" pos:column="55">=</op:operator> <op:operator pos:line="91" pos:column="57">new</op:operator> <call><name pos:line="91" pos:column="61">CourseOffered</name><argument_list pos:line="91" pos:column="74">(<argument><expr><name pos:line="91" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="92" pos:column="19">catch <parameter_list pos:line="92" pos:column="25">(<param><decl><type><name><name pos:line="92" pos:column="26">Course</name><op:operator pos:line="92" pos:column="32">.</op:operator><name pos:line="92" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="92" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="93" pos:column="25">e1</name><op:operator pos:line="93" pos:column="27">.</op:operator><name pos:line="93" pos:column="28">printStackTrace</name></name><argument_list pos:line="93" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="94" pos:column="19">catch <parameter_list pos:line="94" pos:column="25">(<param><decl><type><name><name pos:line="94" pos:column="26">CourseOffered</name><op:operator pos:line="94" pos:column="39">.</op:operator><name pos:line="94" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="94" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="95" pos:column="25">e1</name><op:operator pos:line="95" pos:column="27">.</op:operator><name pos:line="95" pos:column="28">printStackTrace</name></name><argument_list pos:line="95" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<decl_stmt><decl><type><annotation pos:line="98" pos:column="17">@<name pos:line="98" pos:column="18">SuppressWarnings</name><argument_list pos:line="98" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="35">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
		<name pos:line="99" pos:column="17">CourseExamStructure</name></type> <name pos:line="99" pos:column="37">examStruct</name> <init pos:line="99" pos:column="48">= <expr><op:operator pos:line="99" pos:column="50">new</op:operator> <call><name pos:line="99" pos:column="54">CourseExamStructure</name><argument_list pos:line="99" pos:column="73">(<argument><expr><name pos:line="99" pos:column="74">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="99" pos:column="88">examName</name></expr></argument>,<argument><expr><name pos:line="99" pos:column="97">totalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="100" pos:column="17">System</name><op:operator pos:line="100" pos:column="23">.</op:operator><name pos:line="100" pos:column="24">out</name><op:operator pos:line="100" pos:column="27">.</op:operator><name pos:line="100" pos:column="28">println</name></name><argument_list pos:line="100" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="36">"-----testModifyExistingExamTotal----"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="101" pos:column="17">boolean</name></type> <name pos:line="101" pos:column="25">examModified</name> <init pos:line="101" pos:column="38">= <expr><call><name><name pos:line="101" pos:column="40">examStruct</name><op:operator pos:line="101" pos:column="50">.</op:operator><name pos:line="101" pos:column="51">modifyExistingExamTotalMarks</name></name><argument_list pos:line="101" pos:column="79">(<argument><expr><lit:literal type="number" pos:line="101" pos:column="80">30</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">assertEquals</name><argument_list pos:line="103" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="103" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="103" pos:column="35">examModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	
	<function><type><annotation pos:line="108" pos:column="9">@<name pos:line="108" pos:column="10">Test</name></annotation>
	<specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">testDeleteExistingExam</name><parameter_list pos:line="109" pos:column="43">()</parameter_list> <block pos:line="109" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="110" pos:column="17">int</name></type> <name pos:line="110" pos:column="21">offerID</name> <init pos:line="110" pos:column="29">= <expr><lit:literal type="number" pos:line="110" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">String</name></type> <name pos:line="111" pos:column="24">examName</name> <init pos:line="111" pos:column="33">= <expr><lit:literal type="string" pos:line="111" pos:column="35">"Assgn4"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">int</name></type> <name pos:line="112" pos:column="21">totalMarks</name> <init pos:line="112" pos:column="32">= <expr><lit:literal type="number" pos:line="112" pos:column="34">30</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="113" pos:column="17">CourseOffered</name></type> <name pos:line="113" pos:column="31">offeredCourse</name> <init pos:line="113" pos:column="45">= <expr><lit:literal type="null" pos:line="113" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="114" pos:column="17">try <block pos:line="114" pos:column="21">{
			<expr_stmt><expr><name pos:line="115" pos:column="25">offeredCourse</name> <op:operator pos:line="115" pos:column="39">=</op:operator> <name pos:line="115" pos:column="41">offeredCourse</name> <op:operator pos:line="115" pos:column="55">=</op:operator> <op:operator pos:line="115" pos:column="57">new</op:operator> <call><name pos:line="115" pos:column="61">CourseOffered</name><argument_list pos:line="115" pos:column="74">(<argument><expr><name pos:line="115" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="116" pos:column="19">catch <parameter_list pos:line="116" pos:column="25">(<param><decl><type><name><name pos:line="116" pos:column="26">Course</name><op:operator pos:line="116" pos:column="32">.</op:operator><name pos:line="116" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="116" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="117" pos:column="25">e1</name><op:operator pos:line="117" pos:column="27">.</op:operator><name pos:line="117" pos:column="28">printStackTrace</name></name><argument_list pos:line="117" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="118" pos:column="19">catch <parameter_list pos:line="118" pos:column="25">(<param><decl><type><name><name pos:line="118" pos:column="26">CourseOffered</name><op:operator pos:line="118" pos:column="39">.</op:operator><name pos:line="118" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="118" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="119" pos:column="25">e1</name><op:operator pos:line="119" pos:column="27">.</op:operator><name pos:line="119" pos:column="28">printStackTrace</name></name><argument_list pos:line="119" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name pos:line="122" pos:column="17">CourseExamStructure</name></type> <name pos:line="122" pos:column="37">examStruct</name> <init pos:line="122" pos:column="48">= <expr><op:operator pos:line="122" pos:column="50">new</op:operator> <call><name pos:line="122" pos:column="54">CourseExamStructure</name><argument_list pos:line="122" pos:column="73">(<argument><expr><name pos:line="122" pos:column="74">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="122" pos:column="88">examName</name></expr></argument>,<argument><expr><name pos:line="122" pos:column="97">totalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="123" pos:column="17">examStruct</name><op:operator pos:line="123" pos:column="27">.</op:operator><name pos:line="123" pos:column="28">addNewExam</name></name><argument_list pos:line="123" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">boolean</name></type> <name pos:line="124" pos:column="25">examDeleted</name> <init pos:line="124" pos:column="37">= <expr><call><name><name pos:line="124" pos:column="39">examStruct</name><op:operator pos:line="124" pos:column="49">.</op:operator><name pos:line="124" pos:column="50">deleteExistingExam</name></name><argument_list pos:line="124" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="125" pos:column="17">assertEquals</name><argument_list pos:line="125" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="125" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="125" pos:column="35">examDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="128" pos:column="9">@<name pos:line="128" pos:column="10">Test</name></annotation>
	<specifier pos:line="129" pos:column="9">public</specifier> <name pos:line="129" pos:column="16">void</name></type> <name pos:line="129" pos:column="21">testDeleteExistingExamFail</name><parameter_list pos:line="129" pos:column="47">()</parameter_list> <block pos:line="129" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="130" pos:column="17">int</name></type> <name pos:line="130" pos:column="21">offerID</name> <init pos:line="130" pos:column="29">= <expr><lit:literal type="number" pos:line="130" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="131" pos:column="17">String</name></type> <name pos:line="131" pos:column="24">examName</name> <init pos:line="131" pos:column="33">= <expr><lit:literal type="string" pos:line="131" pos:column="35">"Assgn4"</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="132" pos:column="17">int</name></type> <name pos:line="132" pos:column="21">totalMarks</name> <init pos:line="132" pos:column="32">= <expr><lit:literal type="number" pos:line="132" pos:column="34">30</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="133" pos:column="17">CourseOffered</name></type> <name pos:line="133" pos:column="31">offeredCourse</name> <init pos:line="133" pos:column="45">= <expr><lit:literal type="null" pos:line="133" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="134" pos:column="17">try <block pos:line="134" pos:column="21">{
			<expr_stmt><expr><name pos:line="135" pos:column="25">offeredCourse</name> <op:operator pos:line="135" pos:column="39">=</op:operator> <name pos:line="135" pos:column="41">offeredCourse</name> <op:operator pos:line="135" pos:column="55">=</op:operator> <op:operator pos:line="135" pos:column="57">new</op:operator> <call><name pos:line="135" pos:column="61">CourseOffered</name><argument_list pos:line="135" pos:column="74">(<argument><expr><name pos:line="135" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="136" pos:column="19">catch <parameter_list pos:line="136" pos:column="25">(<param><decl><type><name><name pos:line="136" pos:column="26">Course</name><op:operator pos:line="136" pos:column="32">.</op:operator><name pos:line="136" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="136" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="136" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="137" pos:column="25">e1</name><op:operator pos:line="137" pos:column="27">.</op:operator><name pos:line="137" pos:column="28">printStackTrace</name></name><argument_list pos:line="137" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="138" pos:column="19">catch <parameter_list pos:line="138" pos:column="25">(<param><decl><type><name><name pos:line="138" pos:column="26">CourseOffered</name><op:operator pos:line="138" pos:column="39">.</op:operator><name pos:line="138" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="138" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="139" pos:column="25">e1</name><op:operator pos:line="139" pos:column="27">.</op:operator><name pos:line="139" pos:column="28">printStackTrace</name></name><argument_list pos:line="139" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<decl_stmt><decl><type><annotation pos:line="142" pos:column="17">@<name pos:line="142" pos:column="18">SuppressWarnings</name><argument_list pos:line="142" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="35">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
		<name pos:line="143" pos:column="17">CourseExamStructure</name></type> <name pos:line="143" pos:column="37">examStruct</name> <init pos:line="143" pos:column="48">= <expr><op:operator pos:line="143" pos:column="50">new</op:operator> <call><name pos:line="143" pos:column="54">CourseExamStructure</name><argument_list pos:line="143" pos:column="73">(<argument><expr><name pos:line="143" pos:column="74">offeredCourse</name></expr></argument>,<argument><expr><name pos:line="143" pos:column="88">examName</name></expr></argument>,<argument><expr><name pos:line="143" pos:column="97">totalMarks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="145" pos:column="17">boolean</name></type> <name pos:line="145" pos:column="25">examDeleted</name> <init pos:line="145" pos:column="37">= <expr><call><name><name pos:line="145" pos:column="39">examStruct</name><op:operator pos:line="145" pos:column="49">.</op:operator><name pos:line="145" pos:column="50">deleteExistingExam</name></name><argument_list pos:line="145" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="146" pos:column="17">assertEquals</name><argument_list pos:line="146" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="146" pos:column="30">false</lit:literal></expr></argument>,<argument><expr><name pos:line="146" pos:column="36">examDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="149" pos:column="9">@<name pos:line="149" pos:column="10">Test</name></annotation>
	<specifier pos:line="150" pos:column="9">public</specifier> <name pos:line="150" pos:column="16">void</name></type> <name pos:line="150" pos:column="21">testViewExams</name><parameter_list pos:line="150" pos:column="34">()</parameter_list> <block pos:line="150" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="151" pos:column="17">int</name></type> <name pos:line="151" pos:column="21">offerID</name> <init pos:line="151" pos:column="29">= <expr><lit:literal type="number" pos:line="151" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name pos:line="152" pos:column="17">CourseOffered</name></type> <name pos:line="152" pos:column="31">offeredCourse</name> <init pos:line="152" pos:column="45">= <expr><lit:literal type="null" pos:line="152" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="153" pos:column="17">try <block pos:line="153" pos:column="21">{
			<expr_stmt><expr><name pos:line="154" pos:column="25">offeredCourse</name> <op:operator pos:line="154" pos:column="39">=</op:operator> <name pos:line="154" pos:column="41">offeredCourse</name> <op:operator pos:line="154" pos:column="55">=</op:operator> <op:operator pos:line="154" pos:column="57">new</op:operator> <call><name pos:line="154" pos:column="61">CourseOffered</name><argument_list pos:line="154" pos:column="74">(<argument><expr><name pos:line="154" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="155" pos:column="19">catch <parameter_list pos:line="155" pos:column="25">(<param><decl><type><name><name pos:line="155" pos:column="26">Course</name><op:operator pos:line="155" pos:column="32">.</op:operator><name pos:line="155" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="155" pos:column="61">e1</name></decl></param>)</parameter_list> <block pos:line="155" pos:column="65">{
			<expr_stmt><expr><call><name><name pos:line="156" pos:column="25">e1</name><op:operator pos:line="156" pos:column="27">.</op:operator><name pos:line="156" pos:column="28">printStackTrace</name></name><argument_list pos:line="156" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="157" pos:column="19">catch <parameter_list pos:line="157" pos:column="25">(<param><decl><type><name><name pos:line="157" pos:column="26">CourseOffered</name><op:operator pos:line="157" pos:column="39">.</op:operator><name pos:line="157" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="157" pos:column="76">e1</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="80">{
			<expr_stmt><expr><call><name><name pos:line="158" pos:column="25">e1</name><op:operator pos:line="158" pos:column="27">.</op:operator><name pos:line="158" pos:column="28">printStackTrace</name></name><argument_list pos:line="158" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name><name pos:line="161" pos:column="17">HashMap</name><argument_list pos:line="161" pos:column="24">&lt;<argument><name pos:line="161" pos:column="25">String</name></argument>, <argument><name pos:line="161" pos:column="33">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="161" pos:column="42">exams</name> <init pos:line="161" pos:column="48">= <expr><call><name><name pos:line="161" pos:column="50">CourseExamStructure</name><op:operator pos:line="161" pos:column="69">.</op:operator><name pos:line="161" pos:column="70">viewExams</name></name><argument_list pos:line="161" pos:column="79">(<argument><expr><name pos:line="161" pos:column="80">offeredCourse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name pos:line="163" pos:column="17">assertNotNull</name><argument_list pos:line="163" pos:column="30">(<argument><expr><name pos:line="163" pos:column="31">exams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
	}</block></function>

}</block></class>
</unit>
