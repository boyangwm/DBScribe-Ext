<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\CourseOfferedTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">HashMap</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Before</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">org</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">junit</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Test</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">umas</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">code</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="11" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="13" pos:column="1">public</specifier> class <name pos:line="13" pos:column="14">CourseOfferedTest</name> <block pos:line="13" pos:column="32">{

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">CourseOffered</name></type> <name pos:line="15" pos:column="23">courseOffered</name></decl>;</decl_stmt>
	<function><type><annotation pos:line="16" pos:column="9">@<name pos:line="16" pos:column="10">Before</name></annotation>
	<specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">setUp</name><parameter_list pos:line="17" pos:column="26">()</parameter_list> <throws pos:line="17" pos:column="29">throws <argument><expr><name pos:line="17" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="17" pos:column="46">{
		<comment type="block" pos:line="18" pos:column="17">/*
		 * Initializing a currently offered course offering object
		 * SOME TESTS RELATING TO THIS OBJECT WILL FAIL IF THE OFFERING THE
		 * OFFERING IS NOT FOR CURRENT SEMESTER
		 */</comment>
		<expr_stmt><expr><name pos:line="23" pos:column="17">courseOffered</name> <op:operator pos:line="23" pos:column="31">=</op:operator> <op:operator pos:line="23" pos:column="33">new</op:operator> <call><name pos:line="23" pos:column="37">CourseOffered</name><argument_list pos:line="23" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="23" pos:column="51">459</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="26" pos:column="9">@<name pos:line="26" pos:column="10">Test</name></annotation>
	<specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">testHashCode</name><parameter_list pos:line="27" pos:column="33">()</parameter_list> <block pos:line="27" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="28" pos:column="17">int</name></type> <name pos:line="28" pos:column="21">hash</name> <init pos:line="28" pos:column="26">= <expr><call><name><name pos:line="28" pos:column="28">courseOffered</name><op:operator pos:line="28" pos:column="41">.</op:operator><name pos:line="28" pos:column="42">hashCode</name></name><argument_list pos:line="28" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">assertTrue</name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">hash</name><op:operator pos:line="29" pos:column="32">&gt;=</op:operator><lit:literal type="number" pos:line="29" pos:column="34">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="32" pos:column="9">@<name pos:line="32" pos:column="10">Test</name></annotation>
	<specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">testCourseOffered</name><parameter_list pos:line="33" pos:column="38">()</parameter_list> <throws pos:line="33" pos:column="41">throws <argument><expr><name><name pos:line="33" pos:column="48">Course</name><op:operator pos:line="33" pos:column="54">.</op:operator><name pos:line="33" pos:column="55">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="84">CourseOffered</name><op:operator pos:line="33" pos:column="97">.</op:operator><name pos:line="33" pos:column="98">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="33" pos:column="134">{
		<comment type="block" pos:line="34" pos:column="17">/*
		 * Initialize a course offering object which exists
		 */</comment>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">CourseOffered</name></type> <name pos:line="37" pos:column="31">c</name> <init pos:line="37" pos:column="33">= <expr><op:operator pos:line="37" pos:column="35">new</op:operator> <call><name pos:line="37" pos:column="39">CourseOffered</name><argument_list pos:line="37" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="53">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">assertNotNull</name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="41" pos:column="9">@<name pos:line="41" pos:column="10">Test</name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">expected</name> <op:operator pos:line="41" pos:column="24">=</op:operator> <name><name pos:line="41" pos:column="26">CourseOffered</name><op:operator pos:line="41" pos:column="39">.</op:operator><name pos:line="41" pos:column="40">CourseOfferingDoesNotExistException</name><op:operator pos:line="41" pos:column="75">.</op:operator><name pos:line="41" pos:column="76">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">testCourseOffered2</name><parameter_list pos:line="42" pos:column="39">()</parameter_list> <throws pos:line="42" pos:column="42">throws <argument><expr><name><name pos:line="42" pos:column="49">Course</name><op:operator pos:line="42" pos:column="55">.</op:operator><name pos:line="42" pos:column="56">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="85">CourseOffered</name><op:operator pos:line="42" pos:column="98">.</op:operator><name pos:line="42" pos:column="99">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="42" pos:column="135">{
		<comment type="block" pos:line="43" pos:column="17">/*
		 * Initialize a course offering object which does not exists
		 */</comment>
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">CourseOffered</name></type> <name pos:line="46" pos:column="31">c</name> <init pos:line="46" pos:column="33">= <expr><op:operator pos:line="46" pos:column="35">new</op:operator> <call><name pos:line="46" pos:column="39">CourseOffered</name><argument_list pos:line="46" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="53">9594654</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">assertNull</name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="50" pos:column="9">@<name pos:line="50" pos:column="10">Test</name></annotation>
	<specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">testGetCourseName</name><parameter_list pos:line="51" pos:column="38">()</parameter_list> <block pos:line="51" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">String</name></type> <name pos:line="52" pos:column="24">courseName</name> <init pos:line="52" pos:column="35">= <expr><call><name><name pos:line="52" pos:column="37">courseOffered</name><op:operator pos:line="52" pos:column="50">.</op:operator><name pos:line="52" pos:column="51">getCourseName</name></name><argument_list pos:line="52" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">assertNotNull</name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">courseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="56" pos:column="9">@<name pos:line="56" pos:column="10">Test</name></annotation>
	<specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">void</name></type> <name pos:line="57" pos:column="21">testGetProfessorName</name><parameter_list pos:line="57" pos:column="41">()</parameter_list> <block pos:line="57" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">String</name></type> <name pos:line="58" pos:column="24">profName</name> <init pos:line="58" pos:column="33">= <expr><call><name><name pos:line="58" pos:column="35">courseOffered</name><op:operator pos:line="58" pos:column="48">.</op:operator><name pos:line="58" pos:column="49">getProfessorName</name></name><argument_list pos:line="58" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">assertNotNull</name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">profName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="62" pos:column="9">@<name pos:line="62" pos:column="10">Test</name></annotation>
	<specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">testGetDepartmentName</name><parameter_list pos:line="63" pos:column="42">()</parameter_list> <block pos:line="63" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">assertNotNull</name><argument_list pos:line="64" pos:column="30">(<argument><expr><call><name><name pos:line="64" pos:column="31">courseOffered</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">getDepartmentName</name></name><argument_list pos:line="64" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="67" pos:column="9">@<name pos:line="67" pos:column="10">Test</name></annotation>
	<specifier pos:line="68" pos:column="9">public</specifier> <name pos:line="68" pos:column="16">void</name></type> <name pos:line="68" pos:column="21">testGetClassRoomName</name><parameter_list pos:line="68" pos:column="41">()</parameter_list> <block pos:line="68" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">assertNotNull</name><argument_list pos:line="69" pos:column="30">(<argument><expr><call><name><name pos:line="69" pos:column="31">courseOffered</name><op:operator pos:line="69" pos:column="44">.</op:operator><name pos:line="69" pos:column="45">getClassRoomName</name></name><argument_list pos:line="69" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="72" pos:column="9">@<name pos:line="72" pos:column="10">Test</name></annotation>
	<specifier pos:line="73" pos:column="9">public</specifier> <name pos:line="73" pos:column="16">void</name></type> <name pos:line="73" pos:column="21">testGetClassRoomLocation</name><parameter_list pos:line="73" pos:column="45">()</parameter_list> <block pos:line="73" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">assertNotNull</name><argument_list pos:line="74" pos:column="30">(<argument><expr><call><name><name pos:line="74" pos:column="31">courseOffered</name><op:operator pos:line="74" pos:column="44">.</op:operator><name pos:line="74" pos:column="45">getClassRoomLocation</name></name><argument_list pos:line="74" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="77" pos:column="9">@<name pos:line="77" pos:column="10">Test</name></annotation>
	<specifier pos:line="78" pos:column="9">public</specifier> <name pos:line="78" pos:column="16">void</name></type> <name pos:line="78" pos:column="21">testGetTiming</name><parameter_list pos:line="78" pos:column="34">()</parameter_list> <block pos:line="78" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">assertNotNull</name><argument_list pos:line="79" pos:column="30">(<argument><expr><call><name><name pos:line="79" pos:column="31">courseOffered</name><op:operator pos:line="79" pos:column="44">.</op:operator><name pos:line="79" pos:column="45">getTiming</name></name><argument_list pos:line="79" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="82" pos:column="9">@<name pos:line="82" pos:column="10">Test</name></annotation>
	<specifier pos:line="83" pos:column="9">public</specifier> <name pos:line="83" pos:column="16">void</name></type> <name pos:line="83" pos:column="21">testGetAllCurrentlyOfferedCourses</name><parameter_list pos:line="83" pos:column="54">()</parameter_list> <block pos:line="83" pos:column="57">{
		<decl_stmt><decl><type><name><name pos:line="84" pos:column="17">ArrayList</name><argument_list pos:line="84" pos:column="26">&lt;<argument><name pos:line="84" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="42">offers</name> <init pos:line="84" pos:column="49">= <expr><call><name><name pos:line="84" pos:column="51">CourseOffered</name><op:operator pos:line="84" pos:column="64">.</op:operator><name pos:line="84" pos:column="65">getAllCurrentlyOfferedCourses</name></name><argument_list pos:line="84" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">assertNotNull</name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">offers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="88" pos:column="9">@<name pos:line="88" pos:column="10">Test</name></annotation>
	<specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">void</name></type> <name pos:line="89" pos:column="21">testGetAllOfferedIDAndCourseOffered</name><parameter_list pos:line="89" pos:column="56">()</parameter_list> <block pos:line="89" pos:column="59">{
		<decl_stmt><decl><type><name><name pos:line="90" pos:column="17">HashMap</name><argument_list pos:line="90" pos:column="24">&lt;<argument><name pos:line="90" pos:column="25">Integer</name></argument>, <argument><name pos:line="90" pos:column="34">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="49">offers</name> <init pos:line="90" pos:column="56">= <expr><call><name><name pos:line="90" pos:column="58">CourseOffered</name><op:operator pos:line="90" pos:column="71">.</op:operator><name pos:line="90" pos:column="72">getAllOfferedIDAndCourseOffered</name></name><argument_list pos:line="90" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">assertNotNull</name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">offers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="94" pos:column="9">@<name pos:line="94" pos:column="10">Test</name></annotation>
	<specifier pos:line="95" pos:column="9">public</specifier> <name pos:line="95" pos:column="16">void</name></type> <name pos:line="95" pos:column="21">testGetAllOfferedCourses</name><parameter_list pos:line="95" pos:column="45">()</parameter_list> <block pos:line="95" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="96" pos:column="17">ArrayList</name><argument_list pos:line="96" pos:column="26">&lt;<argument><name pos:line="96" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="96" pos:column="42">offersAll</name> <init pos:line="96" pos:column="52">= <expr><call><name><name pos:line="96" pos:column="54">CourseOffered</name><op:operator pos:line="96" pos:column="67">.</op:operator><name pos:line="96" pos:column="68">getAllOfferedCourses</name></name><argument_list pos:line="96" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">assertNotNull</name><argument_list pos:line="97" pos:column="30">(<argument><expr><name pos:line="97" pos:column="31">offersAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="100" pos:column="9">@<name pos:line="100" pos:column="10">Test</name><argument_list pos:line="100" pos:column="14">(<argument><expr><name pos:line="100" pos:column="15">expected</name> <op:operator pos:line="100" pos:column="24">=</op:operator> <name><name pos:line="100" pos:column="26">CourseOffered</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">CourseOfferingAlreadyExistsException</name><op:operator pos:line="100" pos:column="76">.</op:operator><name pos:line="100" pos:column="77">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="101" pos:column="9">public</specifier> <name pos:line="101" pos:column="16">void</name></type> <name pos:line="101" pos:column="21">testAddCourseOfferingToDatabase</name><parameter_list pos:line="101" pos:column="52">()</parameter_list> <throws pos:line="101" pos:column="55">throws <argument><expr><name><name pos:line="101" pos:column="62">CourseOffered</name><op:operator pos:line="101" pos:column="75">.</op:operator><name pos:line="101" pos:column="76">CourseOfferingAlreadyExistsException</name></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="114">CourseOffered</name><op:operator pos:line="101" pos:column="127">.</op:operator><name pos:line="101" pos:column="128">CourseOfferingNotSchedulable</name></name></expr></argument></throws> <block pos:line="101" pos:column="157">{
		<comment type="block" pos:line="102" pos:column="17">/*
		 * Try to add a new course offering to the database
		 * addition works only first use
		 * Fails after that.
		 * THrows a Course already exists exception
		 * The function also throws a Course not schedulable exception but that will occur
		 * only if the classrooms are full which is not the case here
		 */</comment>
		
		<expr_stmt><expr><call><name><name pos:line="111" pos:column="17">CourseOffered</name><op:operator pos:line="111" pos:column="30">.</op:operator><name pos:line="111" pos:column="31">addCourseOfferingToDatabase</name></name><argument_list pos:line="111" pos:column="58">(<argument><expr><call><name><name pos:line="111" pos:column="59">courseOffered</name><op:operator pos:line="111" pos:column="72">.</op:operator><name pos:line="111" pos:column="73">getCourse</name></name><argument_list pos:line="111" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="111" pos:column="86">courseOffered</name><op:operator pos:line="111" pos:column="99">.</op:operator><name pos:line="111" pos:column="100">getProfessor</name></name><argument_list pos:line="111" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="111" pos:column="116">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="115" pos:column="9">@<name pos:line="115" pos:column="10">Test</name></annotation>
	<specifier pos:line="116" pos:column="9">public</specifier> <name pos:line="116" pos:column="16">void</name></type> <name pos:line="116" pos:column="21">testUpdateCourseOffering</name><parameter_list pos:line="116" pos:column="45">()</parameter_list> <throws pos:line="116" pos:column="48">throws <argument><expr><name><name pos:line="116" pos:column="55">CourseOffered</name><op:operator pos:line="116" pos:column="68">.</op:operator><name pos:line="116" pos:column="69">CourseOfferingDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="106">Student</name><op:operator pos:line="116" pos:column="113">.</op:operator><name pos:line="116" pos:column="114">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="137">People</name><op:operator pos:line="116" pos:column="143">.</op:operator><name pos:line="116" pos:column="144">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="116" pos:column="172">{
		<comment type="block" pos:line="117" pos:column="17">/*
		 * Try to update the professor of the course offering
		 * The professor is present in the database
		 */</comment>
		<decl_stmt><decl><type><name pos:line="121" pos:column="17">boolean</name></type> <name pos:line="121" pos:column="25">check</name> <init pos:line="121" pos:column="31">= <expr><call><name><name pos:line="121" pos:column="33">courseOffered</name><op:operator pos:line="121" pos:column="46">.</op:operator><name pos:line="121" pos:column="47">updateCourseOffering</name></name><argument_list pos:line="121" pos:column="67">(<argument><expr><op:operator pos:line="121" pos:column="68">new</op:operator> <call><name pos:line="121" pos:column="72">Professor</name><argument_list pos:line="121" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="121" pos:column="82">583</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="122" pos:column="17">assertTrue</name><argument_list pos:line="122" pos:column="27">(<argument><expr><name pos:line="122" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="126" pos:column="9">@<name pos:line="126" pos:column="10">Test</name><argument_list pos:line="126" pos:column="14">(<argument><expr><name pos:line="126" pos:column="15">expected</name> <op:operator pos:line="126" pos:column="24">=</op:operator> <name><name pos:line="126" pos:column="26">People</name><op:operator pos:line="126" pos:column="32">.</op:operator><name pos:line="126" pos:column="33">PersonDoesNotExistException</name><op:operator pos:line="126" pos:column="60">.</op:operator><name pos:line="126" pos:column="61">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="127" pos:column="9">public</specifier> <name pos:line="127" pos:column="16">void</name></type> <name pos:line="127" pos:column="21">testUpdateCourseOffering2</name><parameter_list pos:line="127" pos:column="46">()</parameter_list> <throws pos:line="127" pos:column="49">throws <argument><expr><name><name pos:line="127" pos:column="56">CourseOffered</name><op:operator pos:line="127" pos:column="69">.</op:operator><name pos:line="127" pos:column="70">CourseOfferingDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="107">Student</name><op:operator pos:line="127" pos:column="114">.</op:operator><name pos:line="127" pos:column="115">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="138">People</name><op:operator pos:line="127" pos:column="144">.</op:operator><name pos:line="127" pos:column="145">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="127" pos:column="173">{
		<comment type="block" pos:line="128" pos:column="17">/*
		 * Try to update the professor of the course offering
		 * The parameter passed is a student UIN
		 * Hence throws a Access Denied exception
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="133" pos:column="17">courseOffered</name><op:operator pos:line="133" pos:column="30">.</op:operator><name pos:line="133" pos:column="31">updateCourseOffering</name></name><argument_list pos:line="133" pos:column="51">(<argument><expr><op:operator pos:line="133" pos:column="52">new</op:operator> <call><name pos:line="133" pos:column="56">Professor</name><argument_list pos:line="133" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="133" pos:column="66">585</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	}</block></function>

	<function><type><annotation pos:line="136" pos:column="9">@<name pos:line="136" pos:column="10">Test</name></annotation>
	<specifier pos:line="137" pos:column="9">public</specifier> <name pos:line="137" pos:column="16">void</name></type> <name pos:line="137" pos:column="21">testGetStudentCourses</name><parameter_list pos:line="137" pos:column="42">()</parameter_list> <throws pos:line="137" pos:column="45">throws <argument><expr><name><name pos:line="137" pos:column="52">Course</name><op:operator pos:line="137" pos:column="58">.</op:operator><name pos:line="137" pos:column="59">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="88">CourseOffered</name><op:operator pos:line="137" pos:column="101">.</op:operator><name pos:line="137" pos:column="102">CourseOfferingDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="139">People</name><op:operator pos:line="137" pos:column="145">.</op:operator><name pos:line="137" pos:column="146">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="137" pos:column="174">{
		<comment type="block" pos:line="138" pos:column="17">/*
		 * Gets all the courses taken by the student presently or in the past
		 * Student passed is a valid student
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="142" pos:column="17">ArrayList</name><argument_list pos:line="142" pos:column="26">&lt;<argument><name pos:line="142" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="142" pos:column="42">courses</name> <init pos:line="142" pos:column="50">= <expr><call><name><name pos:line="142" pos:column="52">CourseOffered</name><op:operator pos:line="142" pos:column="65">.</op:operator><name pos:line="142" pos:column="66">getStudentCourses</name></name><argument_list pos:line="142" pos:column="83">(<argument><expr><op:operator pos:line="142" pos:column="84">new</op:operator> <call><name pos:line="142" pos:column="88">Student</name><argument_list pos:line="142" pos:column="95">(<argument><expr><lit:literal type="number" pos:line="142" pos:column="96">584</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="143" pos:column="17">assertNotNull</name><argument_list pos:line="143" pos:column="30">(<argument><expr><name pos:line="143" pos:column="31">courses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="146" pos:column="9">@<name pos:line="146" pos:column="10">Test</name><argument_list pos:line="146" pos:column="14">(<argument><expr><name pos:line="146" pos:column="15">expected</name> <op:operator pos:line="146" pos:column="24">=</op:operator> <name><name pos:line="146" pos:column="26">People</name><op:operator pos:line="146" pos:column="32">.</op:operator><name pos:line="146" pos:column="33">PersonDoesNotExistException</name><op:operator pos:line="146" pos:column="60">.</op:operator><name pos:line="146" pos:column="61">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="147" pos:column="9">public</specifier> <name pos:line="147" pos:column="16">void</name></type> <name pos:line="147" pos:column="21">testGetStudentCourses2</name><parameter_list pos:line="147" pos:column="43">()</parameter_list> <throws pos:line="147" pos:column="46">throws <argument><expr><name><name pos:line="147" pos:column="53">Course</name><op:operator pos:line="147" pos:column="59">.</op:operator><name pos:line="147" pos:column="60">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="89">CourseOffered</name><op:operator pos:line="147" pos:column="102">.</op:operator><name pos:line="147" pos:column="103">CourseOfferingDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="140">People</name><op:operator pos:line="147" pos:column="146">.</op:operator><name pos:line="147" pos:column="147">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="147" pos:column="175">{
		<comment type="block" pos:line="148" pos:column="17">/*
		 * Gets all the courses taken by the student presently or in the past
		 * Passed parameter is a Professor UIN
		 * Throws a people does not exist exception
		 */</comment>
		<decl_stmt><decl><type><name pos:line="153" pos:column="17">Student</name></type> <name pos:line="153" pos:column="25">s</name> <init pos:line="153" pos:column="27">= <expr><op:operator pos:line="153" pos:column="29">new</op:operator> <call><name pos:line="153" pos:column="33">Student</name><argument_list pos:line="153" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="153" pos:column="41">550</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="154" pos:column="17">CourseOffered</name><op:operator pos:line="154" pos:column="30">.</op:operator><name pos:line="154" pos:column="31">getStudentCourses</name></name><argument_list pos:line="154" pos:column="48">(<argument><expr><name pos:line="154" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="157" pos:column="9">@<name pos:line="157" pos:column="10">Test</name><argument_list pos:line="157" pos:column="14">(<argument><expr><name pos:line="157" pos:column="15">expected</name> <op:operator pos:line="157" pos:column="24">=</op:operator> <name><name pos:line="157" pos:column="26">NullPointerException</name><op:operator pos:line="157" pos:column="46">.</op:operator><name pos:line="157" pos:column="47">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="158" pos:column="9">public</specifier> <name pos:line="158" pos:column="16">void</name></type> <name pos:line="158" pos:column="21">testGetStudentCourses3</name><parameter_list pos:line="158" pos:column="43">()</parameter_list> <throws pos:line="158" pos:column="46">throws <argument><expr><name><name pos:line="158" pos:column="53">Course</name><op:operator pos:line="158" pos:column="59">.</op:operator><name pos:line="158" pos:column="60">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="89">CourseOffered</name><op:operator pos:line="158" pos:column="102">.</op:operator><name pos:line="158" pos:column="103">CourseOfferingDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="140">People</name><op:operator pos:line="158" pos:column="146">.</op:operator><name pos:line="158" pos:column="147">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="158" pos:column="175">{
		<comment type="block" pos:line="159" pos:column="17">/*
		 * Gets all the courses taken by the student presently or in the past
		 * Student passed is a valid student
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="163" pos:column="17">CourseOffered</name><op:operator pos:line="163" pos:column="30">.</op:operator><name pos:line="163" pos:column="31">getStudentCourses</name></name><argument_list pos:line="163" pos:column="48">(<argument><expr><lit:literal type="null" pos:line="163" pos:column="49">null</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="166" pos:column="9">@<name pos:line="166" pos:column="10">Test</name></annotation>
	<specifier pos:line="167" pos:column="9">public</specifier> <name pos:line="167" pos:column="16">void</name></type> <name pos:line="167" pos:column="21">testGetAllStudentsInCourse</name><parameter_list pos:line="167" pos:column="47">()</parameter_list> <block pos:line="167" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="168" pos:column="17">ArrayList</name><argument_list pos:line="168" pos:column="26">&lt;<argument><name pos:line="168" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="36">student</name> <init pos:line="168" pos:column="44">= <expr><call><name><name pos:line="168" pos:column="46">CourseOffered</name><op:operator pos:line="168" pos:column="59">.</op:operator><name pos:line="168" pos:column="60">getAllStudentsInCourse</name></name><argument_list pos:line="168" pos:column="82">(<argument><expr><name pos:line="168" pos:column="83">courseOffered</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="169" pos:column="17">assertNotNull</name><argument_list pos:line="169" pos:column="30">(<argument><expr><name pos:line="169" pos:column="31">student</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="172" pos:column="9">@<name pos:line="172" pos:column="10">Test</name><argument_list pos:line="172" pos:column="14">(<argument><expr><name pos:line="172" pos:column="15">expected</name> <op:operator pos:line="172" pos:column="24">=</op:operator> <name><name pos:line="172" pos:column="26">NullPointerException</name><op:operator pos:line="172" pos:column="46">.</op:operator><name pos:line="172" pos:column="47">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">void</name></type> <name pos:line="173" pos:column="21">testGetAllStudentsInCourse2</name><parameter_list pos:line="173" pos:column="48">()</parameter_list> <block pos:line="173" pos:column="51">{
		<expr_stmt><expr><call><name><name pos:line="174" pos:column="17">CourseOffered</name><op:operator pos:line="174" pos:column="30">.</op:operator><name pos:line="174" pos:column="31">getAllStudentsInCourse</name></name><argument_list pos:line="174" pos:column="53">(<argument><expr><lit:literal type="null" pos:line="174" pos:column="54">null</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="177" pos:column="9">@<name pos:line="177" pos:column="10">Test</name></annotation>
	<specifier pos:line="178" pos:column="9">public</specifier> <name pos:line="178" pos:column="16">void</name></type> <name pos:line="178" pos:column="21">testGetCurrentProfessorCourses</name><parameter_list pos:line="178" pos:column="51">()</parameter_list> <throws pos:line="178" pos:column="54">throws <argument><expr><name><name pos:line="178" pos:column="61">Student</name><op:operator pos:line="178" pos:column="68">.</op:operator><name pos:line="178" pos:column="69">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="92">People</name><op:operator pos:line="178" pos:column="98">.</op:operator><name pos:line="178" pos:column="99">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="178" pos:column="127">{
		<comment type="block" pos:line="179" pos:column="17">/*
		 * Passed professor is initialized with a professor UIN only
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="182" pos:column="17">ArrayList</name><argument_list pos:line="182" pos:column="26">&lt;<argument><name pos:line="182" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="182" pos:column="42">professorCourses</name> <init pos:line="182" pos:column="59">= <expr><call><name><name pos:line="182" pos:column="61">CourseOffered</name><op:operator pos:line="182" pos:column="74">.</op:operator><name pos:line="182" pos:column="75">getCurrentProfessorCourses</name></name><argument_list pos:line="182" pos:column="101">(<argument><expr><op:operator pos:line="182" pos:column="102">new</op:operator> <call><name pos:line="182" pos:column="106">Professor</name><argument_list pos:line="182" pos:column="115">(<argument><expr><lit:literal type="number" pos:line="182" pos:column="116">583</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="183" pos:column="17">assertNotNull</name><argument_list pos:line="183" pos:column="30">(<argument><expr><name pos:line="183" pos:column="31">professorCourses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="186" pos:column="9">@<name pos:line="186" pos:column="10">Test</name><argument_list pos:line="186" pos:column="14">(<argument><expr><name pos:line="186" pos:column="15">expected</name> <op:operator pos:line="186" pos:column="24">=</op:operator> <name><name pos:line="186" pos:column="26">People</name><op:operator pos:line="186" pos:column="32">.</op:operator><name pos:line="186" pos:column="33">PersonDoesNotExistException</name><op:operator pos:line="186" pos:column="60">.</op:operator><name pos:line="186" pos:column="61">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="187" pos:column="9">public</specifier> <name pos:line="187" pos:column="16">void</name></type> <name pos:line="187" pos:column="21">testGetCurrentProfessorCourses2</name><parameter_list pos:line="187" pos:column="52">()</parameter_list> <throws pos:line="187" pos:column="55">throws <argument><expr><name><name pos:line="187" pos:column="62">Student</name><op:operator pos:line="187" pos:column="69">.</op:operator><name pos:line="187" pos:column="70">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="93">People</name><op:operator pos:line="187" pos:column="99">.</op:operator><name pos:line="187" pos:column="100">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="187" pos:column="128">{
		<comment type="block" pos:line="188" pos:column="17">/*
		 * Here the UIN passed is not a professor but a student
		 * Throws a Access denied exception
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="192" pos:column="17">CourseOffered</name><op:operator pos:line="192" pos:column="30">.</op:operator><name pos:line="192" pos:column="31">getCurrentProfessorCourses</name></name><argument_list pos:line="192" pos:column="57">(<argument><expr><op:operator pos:line="192" pos:column="58">new</op:operator> <call><name pos:line="192" pos:column="62">Professor</name><argument_list pos:line="192" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="192" pos:column="72">584</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="195" pos:column="9">@<name pos:line="195" pos:column="10">Test</name></annotation>
	<specifier pos:line="196" pos:column="9">public</specifier> <name pos:line="196" pos:column="16">void</name></type> <name pos:line="196" pos:column="21">testGetCurrentProfessorCourses3</name><parameter_list pos:line="196" pos:column="52">()</parameter_list> <throws pos:line="196" pos:column="55">throws <argument><expr><name><name pos:line="196" pos:column="62">Student</name><op:operator pos:line="196" pos:column="69">.</op:operator><name pos:line="196" pos:column="70">AccessDeniedException</name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="93">People</name><op:operator pos:line="196" pos:column="99">.</op:operator><name pos:line="196" pos:column="100">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="196" pos:column="128">{
		<comment type="block" pos:line="197" pos:column="17">/*
		 * Passed professor is null
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="200" pos:column="17">ArrayList</name><argument_list pos:line="200" pos:column="26">&lt;<argument><name pos:line="200" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="42">professorCourses</name> <init pos:line="200" pos:column="59">= <expr><call><name><name pos:line="200" pos:column="61">CourseOffered</name><op:operator pos:line="200" pos:column="74">.</op:operator><name pos:line="200" pos:column="75">getCurrentProfessorCourses</name></name><argument_list pos:line="200" pos:column="101">(<argument><expr><lit:literal type="null" pos:line="200" pos:column="102">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="201" pos:column="17">assertNull</name><argument_list pos:line="201" pos:column="27">(<argument><expr><name pos:line="201" pos:column="28">professorCourses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="204" pos:column="9">@<name pos:line="204" pos:column="10">Test</name></annotation>
	<specifier pos:line="205" pos:column="9">public</specifier> <name pos:line="205" pos:column="16">void</name></type> <name pos:line="205" pos:column="21">testGetAllCurrentCoursesTAedBy</name><parameter_list pos:line="205" pos:column="51">()</parameter_list> <throws pos:line="205" pos:column="54">throws <argument><expr><name><name pos:line="205" pos:column="61">People</name><op:operator pos:line="205" pos:column="67">.</op:operator><name pos:line="205" pos:column="68">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="205" pos:column="96">{
		<comment type="block" pos:line="206" pos:column="17">/*
		 * Valid TA UIN is passed
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="209" pos:column="17">ArrayList</name><argument_list pos:line="209" pos:column="26">&lt;<argument><name pos:line="209" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="42">taEd</name> <init pos:line="209" pos:column="47">= <expr><call><name><name pos:line="209" pos:column="49">CourseOffered</name><op:operator pos:line="209" pos:column="62">.</op:operator><name pos:line="209" pos:column="63">getAllCurrentCoursesTAedBy</name></name><argument_list pos:line="209" pos:column="89">(<argument><expr><op:operator pos:line="209" pos:column="90">new</op:operator> <call><name pos:line="209" pos:column="94">TA</name><argument_list pos:line="209" pos:column="96">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="97">585</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="210" pos:column="17">assertNotNull</name><argument_list pos:line="210" pos:column="30">(<argument><expr><name pos:line="210" pos:column="31">taEd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="213" pos:column="9">@<name pos:line="213" pos:column="10">Test</name><argument_list pos:line="213" pos:column="14">(<argument><expr><name pos:line="213" pos:column="15">expected</name> <op:operator pos:line="213" pos:column="24">=</op:operator> <name><name pos:line="213" pos:column="26">People</name><op:operator pos:line="213" pos:column="32">.</op:operator><name pos:line="213" pos:column="33">PersonDoesNotExistException</name><op:operator pos:line="213" pos:column="60">.</op:operator><name pos:line="213" pos:column="61">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="214" pos:column="9">public</specifier> <name pos:line="214" pos:column="16">void</name></type> <name pos:line="214" pos:column="21">testGetAllCurrentCoursesTAedBy2</name><parameter_list pos:line="214" pos:column="52">()</parameter_list> <throws pos:line="214" pos:column="55">throws <argument><expr><name><name pos:line="214" pos:column="62">People</name><op:operator pos:line="214" pos:column="68">.</op:operator><name pos:line="214" pos:column="69">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="214" pos:column="97">{
		<comment type="block" pos:line="215" pos:column="17">/*
		 * Invalid TA UIN is passed
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="218" pos:column="17">CourseOffered</name><op:operator pos:line="218" pos:column="30">.</op:operator><name pos:line="218" pos:column="31">getAllCurrentCoursesTAedBy</name></name><argument_list pos:line="218" pos:column="57">(<argument><expr><op:operator pos:line="218" pos:column="58">new</op:operator> <call><name pos:line="218" pos:column="62">TA</name><argument_list pos:line="218" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="218" pos:column="65">549</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="221" pos:column="9">@<name pos:line="221" pos:column="10">Test</name></annotation>
	<specifier pos:line="222" pos:column="9">public</specifier> <name pos:line="222" pos:column="16">void</name></type> <name pos:line="222" pos:column="21">testGetAllCurrentCoursesTakenBy</name><parameter_list pos:line="222" pos:column="52">()</parameter_list> <throws pos:line="222" pos:column="55">throws <argument><expr><name><name pos:line="222" pos:column="62">People</name><op:operator pos:line="222" pos:column="68">.</op:operator><name pos:line="222" pos:column="69">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="222" pos:column="97">{
		<comment type="block" pos:line="223" pos:column="17">/*
		 * Gets all the courses that the ta has taken
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="226" pos:column="17">ArrayList</name><argument_list pos:line="226" pos:column="26">&lt;<argument><name pos:line="226" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="226" pos:column="42">taEd</name> <init pos:line="226" pos:column="47">= <expr><call><name><name pos:line="226" pos:column="49">CourseOffered</name><op:operator pos:line="226" pos:column="62">.</op:operator><name pos:line="226" pos:column="63">getAllCurrentCoursesTakenBy</name></name><argument_list pos:line="226" pos:column="90">(<argument><expr><op:operator pos:line="226" pos:column="91">new</op:operator> <call><name pos:line="226" pos:column="95">TA</name><argument_list pos:line="226" pos:column="97">(<argument><expr><lit:literal type="number" pos:line="226" pos:column="98">585</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="227" pos:column="17">assertNotNull</name><argument_list pos:line="227" pos:column="30">(<argument><expr><name pos:line="227" pos:column="31">taEd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
	
	<function><type><annotation pos:line="231" pos:column="9">@<name pos:line="231" pos:column="10">Test</name><argument_list pos:line="231" pos:column="14">(<argument><expr><name pos:line="231" pos:column="15">expected</name> <op:operator pos:line="231" pos:column="24">=</op:operator> <name><name pos:line="231" pos:column="26">People</name><op:operator pos:line="231" pos:column="32">.</op:operator><name pos:line="231" pos:column="33">PersonDoesNotExistException</name><op:operator pos:line="231" pos:column="60">.</op:operator><name pos:line="231" pos:column="61">class</name></name></expr></argument>)</argument_list></annotation>
	<specifier pos:line="232" pos:column="9">public</specifier> <name pos:line="232" pos:column="16">void</name></type> <name pos:line="232" pos:column="21">testGetAllCurrentCoursesTakenBy2</name><parameter_list pos:line="232" pos:column="53">()</parameter_list> <throws pos:line="232" pos:column="56">throws <argument><expr><name><name pos:line="232" pos:column="63">People</name><op:operator pos:line="232" pos:column="69">.</op:operator><name pos:line="232" pos:column="70">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="232" pos:column="98">{
		<comment type="block" pos:line="233" pos:column="17">/*
		 * Gets all the courses that the ta has taken
		 * Parameter passed is not a valid TA UIN
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="237" pos:column="17">ArrayList</name><argument_list pos:line="237" pos:column="26">&lt;<argument><name pos:line="237" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="237" pos:column="42">taEd</name> <init pos:line="237" pos:column="47">= <expr><call><name><name pos:line="237" pos:column="49">CourseOffered</name><op:operator pos:line="237" pos:column="62">.</op:operator><name pos:line="237" pos:column="63">getAllCurrentCoursesTakenBy</name></name><argument_list pos:line="237" pos:column="90">(<argument><expr><op:operator pos:line="237" pos:column="91">new</op:operator> <call><name pos:line="237" pos:column="95">TA</name><argument_list pos:line="237" pos:column="97">(<argument><expr><lit:literal type="number" pos:line="237" pos:column="98">583</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="238" pos:column="17">assertNotNull</name><argument_list pos:line="238" pos:column="30">(<argument><expr><name pos:line="238" pos:column="31">taEd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>

	<function><type><annotation pos:line="242" pos:column="9">@<name pos:line="242" pos:column="10">Test</name></annotation>
	<specifier pos:line="243" pos:column="9">public</specifier> <name pos:line="243" pos:column="16">void</name></type> <name pos:line="243" pos:column="21">testIsCourseFull</name><parameter_list pos:line="243" pos:column="37">()</parameter_list> <throws pos:line="243" pos:column="40">throws <argument><expr><name><name pos:line="243" pos:column="47">CourseOffered</name><op:operator pos:line="243" pos:column="60">.</op:operator><name pos:line="243" pos:column="61">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="243" pos:column="97">{
		<comment type="block" pos:line="244" pos:column="17">/*
		 * Check if the course offering is full or not
		 * The course offered object passed is not full
		 * The test fails if the course was full
		 */</comment>
		<decl_stmt><decl><type><name pos:line="249" pos:column="17">boolean</name></type> <name pos:line="249" pos:column="25">check</name> <init pos:line="249" pos:column="31">= <expr><call><name><name pos:line="249" pos:column="33">courseOffered</name><op:operator pos:line="249" pos:column="46">.</op:operator><name pos:line="249" pos:column="47">isCourseFull</name></name><argument_list pos:line="249" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="250" pos:column="17">assertFalse</name><argument_list pos:line="250" pos:column="28">(<argument><expr><name pos:line="250" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	
	<function><type><annotation pos:line="254" pos:column="9">@<name pos:line="254" pos:column="10">Test</name></annotation>
	<specifier pos:line="255" pos:column="9">public</specifier> <name pos:line="255" pos:column="16">void</name></type> <name pos:line="255" pos:column="21">testCheckIfScheduled</name><parameter_list pos:line="255" pos:column="41">()</parameter_list> <throws pos:line="255" pos:column="44">throws <argument><expr><name><name pos:line="255" pos:column="51">CourseOffered</name><op:operator pos:line="255" pos:column="64">.</op:operator><name pos:line="255" pos:column="65">CourseOfferingNotCurrentException</name></name></expr></argument></throws> <block pos:line="255" pos:column="99">{
		<comment type="block" pos:line="256" pos:column="17">/*
		 * Check a currently offered course
		 */</comment>
		<decl_stmt><decl><type><name pos:line="259" pos:column="17">boolean</name></type> <name pos:line="259" pos:column="25">check</name> <init pos:line="259" pos:column="31">= <expr><call><name><name pos:line="259" pos:column="33">courseOffered</name><op:operator pos:line="259" pos:column="46">.</op:operator><name pos:line="259" pos:column="47">checkIfScheduled</name></name><argument_list pos:line="259" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="260" pos:column="17">assertTrue</name><argument_list pos:line="260" pos:column="27">(<argument><expr><name pos:line="260" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<function><type><annotation pos:line="264" pos:column="9">@<name pos:line="264" pos:column="10">Test</name></annotation>
	<specifier pos:line="265" pos:column="9">public</specifier> <name pos:line="265" pos:column="16">void</name></type> <name pos:line="265" pos:column="21">testCheckIfExists</name><parameter_list pos:line="265" pos:column="38">()</parameter_list> <block pos:line="265" pos:column="41">{
		<comment type="block" pos:line="266" pos:column="17">/*
		 * Run for a existing course
		 */</comment>
		<decl_stmt><decl><type><name pos:line="269" pos:column="17">boolean</name></type> <name pos:line="269" pos:column="25">check</name> <init pos:line="269" pos:column="31">= <expr><call><name><name pos:line="269" pos:column="33">CourseOffered</name><op:operator pos:line="269" pos:column="46">.</op:operator><name pos:line="269" pos:column="47">checkIfExists</name></name><argument_list pos:line="269" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="269" pos:column="61">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="270" pos:column="17">assertTrue</name><argument_list pos:line="270" pos:column="27">(<argument><expr><name pos:line="270" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="273" pos:column="9">@<name pos:line="273" pos:column="10">Test</name></annotation>
	<specifier pos:line="274" pos:column="9">public</specifier> <name pos:line="274" pos:column="16">void</name></type> <name pos:line="274" pos:column="21">testCheckIfExists2</name><parameter_list pos:line="274" pos:column="39">()</parameter_list> <block pos:line="274" pos:column="42">{
		<comment type="block" pos:line="275" pos:column="17">/*
		 * Run for a existing course
		 */</comment>
		<decl_stmt><decl><type><name pos:line="278" pos:column="17">boolean</name></type> <name pos:line="278" pos:column="25">check</name> <init pos:line="278" pos:column="31">= <expr><call><name><name pos:line="278" pos:column="33">CourseOffered</name><op:operator pos:line="278" pos:column="46">.</op:operator><name pos:line="278" pos:column="47">checkIfExists</name></name><argument_list pos:line="278" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="278" pos:column="61">446548</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="279" pos:column="17">assertFalse</name><argument_list pos:line="279" pos:column="28">(<argument><expr><name pos:line="279" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

<comment type="line" pos:line="282" pos:column="1">//	@Test</comment>
<comment type="line" pos:line="283" pos:column="1">//	public void testGetCurrentSemesterID() {</comment>
<comment type="line" pos:line="284" pos:column="1">//		int semID = CourseOffered.getCurrentSemesterID();</comment>
<comment type="line" pos:line="285" pos:column="1">//		assertNotEquals(-1, semID);</comment>
<comment type="line" pos:line="286" pos:column="1">//		assertNotEquals(0, semID);</comment>
<comment type="line" pos:line="287" pos:column="1">//	}</comment>
<comment type="line" pos:line="288" pos:column="1">//	</comment>

	<function><type><annotation pos:line="290" pos:column="9">@<name pos:line="290" pos:column="10">Test</name></annotation>
	<specifier pos:line="291" pos:column="9">public</specifier> <name pos:line="291" pos:column="16">void</name></type> <name pos:line="291" pos:column="21">testCheckIfCurrent</name><parameter_list pos:line="291" pos:column="39">()</parameter_list> <block pos:line="291" pos:column="42">{
		<comment type="block" pos:line="292" pos:column="17">/*
		 * Checking a current course
		 */</comment>
		<decl_stmt><decl><type><name pos:line="295" pos:column="17">boolean</name></type> <name pos:line="295" pos:column="25">check</name> <init pos:line="295" pos:column="31">= <expr><call><name><name pos:line="295" pos:column="33">courseOffered</name><op:operator pos:line="295" pos:column="46">.</op:operator><name pos:line="295" pos:column="47">checkIfCurrent</name></name><argument_list pos:line="295" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="296" pos:column="17">assertTrue</name><argument_list pos:line="296" pos:column="27">(<argument><expr><name pos:line="296" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
		
	

	<function><type><annotation pos:line="301" pos:column="9">@<name pos:line="301" pos:column="10">Test</name></annotation>
	<specifier pos:line="302" pos:column="9">public</specifier> <name pos:line="302" pos:column="16">void</name></type> <name pos:line="302" pos:column="21">testIsCourseRegistrableBy</name><parameter_list pos:line="302" pos:column="46">()</parameter_list> <throws pos:line="302" pos:column="49">throws <argument><expr><name><name pos:line="302" pos:column="56">People</name><op:operator pos:line="302" pos:column="62">.</op:operator><name pos:line="302" pos:column="63">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="302" pos:column="91">{
		<comment type="block" pos:line="303" pos:column="17">/*
		 * Using a student UIN i.e a valid student to check if the student can
		 * register for the course offer
		 */</comment>
		<decl_stmt><decl><type><name pos:line="307" pos:column="17">boolean</name></type> <name pos:line="307" pos:column="25">check</name> <init pos:line="307" pos:column="31">= <expr><call><name><name pos:line="307" pos:column="33">courseOffered</name><op:operator pos:line="307" pos:column="46">.</op:operator><name pos:line="307" pos:column="47">isCourseRegistrableBy</name></name><argument_list pos:line="307" pos:column="68">(<argument><expr><op:operator pos:line="307" pos:column="69">new</op:operator> <call><name pos:line="307" pos:column="73">Student</name><argument_list pos:line="307" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="307" pos:column="81">990</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="308" pos:column="17">assertTrue</name><argument_list pos:line="308" pos:column="27">(<argument><expr><name pos:line="308" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	

	<function><type><annotation pos:line="312" pos:column="9">@<name pos:line="312" pos:column="10">Test</name></annotation>
	<specifier pos:line="313" pos:column="9">public</specifier> <name pos:line="313" pos:column="16">void</name></type> <name pos:line="313" pos:column="21">testSendCourseFilesToStudent</name><parameter_list pos:line="313" pos:column="49">()</parameter_list> <throws pos:line="313" pos:column="52">throws <argument><expr><name><name pos:line="313" pos:column="59">People</name><op:operator pos:line="313" pos:column="65">.</op:operator><name pos:line="313" pos:column="66">PersonDoesNotExistException</name></name></expr></argument></throws> <block pos:line="313" pos:column="94">{
		<decl_stmt><decl><type><name pos:line="314" pos:column="17">boolean</name></type> <name pos:line="314" pos:column="25">check</name> <init pos:line="314" pos:column="31">= <expr><call><name><name pos:line="314" pos:column="33">courseOffered</name><op:operator pos:line="314" pos:column="46">.</op:operator><name pos:line="314" pos:column="47">sendCourseFilesToStudent</name></name><argument_list pos:line="314" pos:column="71">(<argument><expr><op:operator pos:line="314" pos:column="72">new</op:operator> <call><name pos:line="314" pos:column="76">Student</name><argument_list pos:line="314" pos:column="83">(<argument><expr><lit:literal type="number" pos:line="314" pos:column="84">584</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="315" pos:column="17">assertTrue</name><argument_list pos:line="315" pos:column="27">(<argument><expr><name pos:line="315" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	

	<function><type><annotation pos:line="319" pos:column="9">@<name pos:line="319" pos:column="10">Test</name></annotation>
	<specifier pos:line="320" pos:column="9">public</specifier> <name pos:line="320" pos:column="16">void</name></type> <name pos:line="320" pos:column="21">testEqualsObject</name><parameter_list pos:line="320" pos:column="37">()</parameter_list> <block pos:line="320" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="321" pos:column="17">boolean</name></type> <name pos:line="321" pos:column="25">check</name> <init pos:line="321" pos:column="31">= <expr><call><name><name pos:line="321" pos:column="33">courseOffered</name><op:operator pos:line="321" pos:column="46">.</op:operator><name pos:line="321" pos:column="47">equals</name></name><argument_list pos:line="321" pos:column="53">(<argument><expr><name pos:line="321" pos:column="54">courseOffered</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="322" pos:column="17">assertTrue</name><argument_list pos:line="322" pos:column="27">(<argument><expr><name pos:line="322" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
