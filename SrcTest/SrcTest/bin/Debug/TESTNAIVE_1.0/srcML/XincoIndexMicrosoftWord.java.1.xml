<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\index\filetypes\XincoIndexMicrosoftWord.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
*Copyright 2005 blueCubs.com
*
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*
*************************************************************
* This project supports the blueCubs vision of giving back
* to the community in exchange for free software!
* More information on: http://www.bluecubs.org
*************************************************************
*
* Name:            XincoIndexMicrosoftWord
*
* Description:     indexing Microsoft Word files 
*
* Original Author: Alexander Manes
* Date:            2005/02/05
*
* Modifications:
* 
* Who?             When?             What?
* -                -                 -
*
*************************************************************
*/</comment>

<package pos:line="37" pos:column="1">package <name><name pos:line="37" pos:column="9">com</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">bluecubs</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">xinco</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">index</name><op:operator pos:line="37" pos:column="33">.</op:operator><name pos:line="37" pos:column="34">filetypes</name></name>;</package>

<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">io</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">File</name></name>;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">io</name><op:operator pos:line="40" pos:column="15">.</op:operator><name pos:line="40" pos:column="16">FileInputStream</name></name>;</import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">java</name><op:operator pos:line="41" pos:column="12">.</op:operator><name pos:line="41" pos:column="13">io</name><op:operator pos:line="41" pos:column="15">.</op:operator><name pos:line="41" pos:column="16">Reader</name></name>;</import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">org</name><op:operator pos:line="42" pos:column="11">.</op:operator><name pos:line="42" pos:column="12">textmining</name><op:operator pos:line="42" pos:column="22">.</op:operator><name pos:line="42" pos:column="23">text</name><op:operator pos:line="42" pos:column="27">.</op:operator><name pos:line="42" pos:column="28">extraction</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">WordExtractor</name></name>;</import>

<class><specifier pos:line="44" pos:column="1">public</specifier> class <name pos:line="44" pos:column="14">XincoIndexMicrosoftWord</name> <super><implements pos:line="44" pos:column="38">implements <name pos:line="44" pos:column="49">XincoIndexFileType</name></implements></super> <block pos:line="44" pos:column="68">{

	<constructor><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">XincoIndexMicrosoftWord</name><parameter_list pos:line="46" pos:column="39">()</parameter_list> <block pos:line="46" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">super</name><argument_list pos:line="47" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier pos:line="50" pos:column="9">public</specifier> <name pos:line="50" pos:column="16">Reader</name></type> <name pos:line="50" pos:column="23">getFileContentReader</name><parameter_list pos:line="50" pos:column="43">(<param><decl><type><name pos:line="50" pos:column="44">File</name></type> <name pos:line="50" pos:column="49">f</name></decl></param>)</parameter_list> <block pos:line="50" pos:column="52">{
		<return pos:line="51" pos:column="17">return <expr><lit:literal type="null" pos:line="51" pos:column="24">null</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">String</name></type> <name pos:line="54" pos:column="23">getFileContentString</name><parameter_list pos:line="54" pos:column="43">(<param><decl><type><name pos:line="54" pos:column="44">File</name></type> <name pos:line="54" pos:column="49">f</name></decl></param>)</parameter_list> <block pos:line="54" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">String</name></type> <name pos:line="55" pos:column="24">word_string</name> <init pos:line="55" pos:column="36">= <expr><lit:literal type="null" pos:line="55" pos:column="38">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="56" pos:column="17">FileInputStream</name></type> <name pos:line="56" pos:column="33">is</name> <init pos:line="56" pos:column="36">=<expr><lit:literal type="null" pos:line="56" pos:column="37">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="57" pos:column="17">try <block pos:line="57" pos:column="21">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">is</name> <op:operator pos:line="58" pos:column="28">=</op:operator> <op:operator pos:line="58" pos:column="30">new</op:operator> <call><name pos:line="58" pos:column="34">FileInputStream</name><argument_list pos:line="58" pos:column="49">(<argument><expr><name pos:line="58" pos:column="50">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="59" pos:column="25">WordExtractor</name></type> <name pos:line="59" pos:column="39">extractor</name> <init pos:line="59" pos:column="49">= <expr><op:operator pos:line="59" pos:column="51">new</op:operator> <call><name pos:line="59" pos:column="55">WordExtractor</name><argument_list pos:line="59" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">word_string</name> <op:operator pos:line="60" pos:column="37">=</op:operator> <call><name><name pos:line="60" pos:column="39">extractor</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">extractText</name></name><argument_list pos:line="60" pos:column="60">(<argument><expr><name pos:line="60" pos:column="61">is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">is</name><op:operator pos:line="61" pos:column="27">.</op:operator><name pos:line="61" pos:column="28">close</name></name><argument_list pos:line="61" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="62" pos:column="19">catch <parameter_list pos:line="62" pos:column="25">(<param><decl><type><name pos:line="62" pos:column="26">Exception</name></type> <name pos:line="62" pos:column="36">fe</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="40">{
			<expr_stmt><expr><name pos:line="63" pos:column="25">word_string</name> <op:operator pos:line="63" pos:column="37">=</op:operator> <lit:literal type="null" pos:line="63" pos:column="39">null</lit:literal></expr>;</expr_stmt>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name pos:line="64" pos:column="29">is</name> <op:operator pos:line="64" pos:column="32">!=</op:operator> <lit:literal type="null" pos:line="64" pos:column="35">null</lit:literal></expr>)</condition><then pos:line="64" pos:column="40"> <block pos:line="64" pos:column="41">{
				<try pos:line="65" pos:column="33">try <block pos:line="65" pos:column="37">{
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">is</name><op:operator pos:line="66" pos:column="43">.</op:operator><name pos:line="66" pos:column="44">close</name></name><argument_list pos:line="66" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
				}</block> <catch pos:line="67" pos:column="35">catch <parameter_list pos:line="67" pos:column="41">(<param><decl><type><name pos:line="67" pos:column="42">Exception</name></type> <name pos:line="67" pos:column="52">ise</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="57">{}</block></catch></try>
			}</block></then></if>
		}</block></catch></try>
		<return pos:line="70" pos:column="17">return <expr><name pos:line="70" pos:column="24">word_string</name></expr>;</return>
	}</block></function>

}</block></class>
</unit>
