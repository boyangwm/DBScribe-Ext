<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\StudentEnrollmentTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import <name><name pos:line="2" pos:column="8">com</name><op:operator pos:line="2" pos:column="11">.</op:operator><name pos:line="2" pos:column="12">umas</name><op:operator pos:line="2" pos:column="16">.</op:operator><name pos:line="2" pos:column="17">code</name></name>.*;</import>

<import pos:line="4" pos:column="1">import static <name><name pos:line="4" pos:column="15">org</name><op:operator pos:line="4" pos:column="18">.</op:operator><name pos:line="4" pos:column="19">junit</name><op:operator pos:line="4" pos:column="24">.</op:operator><name pos:line="4" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">HashMap</name></name>;</import>

<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">org</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">junit</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Test</name></name>;</import>


<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">StudentEnrollmentTest</name> <block pos:line="12" pos:column="36">{

	<function><type><annotation pos:line="14" pos:column="9">@<name pos:line="14" pos:column="10">Test</name></annotation>
	<specifier pos:line="15" pos:column="9">public</specifier> <name pos:line="15" pos:column="16">void</name></type> <name pos:line="15" pos:column="21">testGetAllGradesOfStudent</name><parameter_list pos:line="15" pos:column="46">()</parameter_list> <block pos:line="15" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">int</name></type> <name pos:line="16" pos:column="21">UIN</name> <init pos:line="16" pos:column="25">= <expr><lit:literal type="number" pos:line="16" pos:column="27">600</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">int</name></type> <name pos:line="17" pos:column="21">offerID</name> <init pos:line="17" pos:column="29">= <expr><lit:literal type="number" pos:line="17" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">Student</name></type> <name pos:line="18" pos:column="25">student</name> <init pos:line="18" pos:column="33">= <expr><lit:literal type="null" pos:line="18" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="19" pos:column="17">try <block pos:line="19" pos:column="21">{
			<expr_stmt><expr><name pos:line="20" pos:column="25">student</name> <op:operator pos:line="20" pos:column="33">=</op:operator> <op:operator pos:line="20" pos:column="35">new</op:operator> <call><name pos:line="20" pos:column="39">Student</name><argument_list pos:line="20" pos:column="46">(<argument><expr><name pos:line="20" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="21" pos:column="19">catch <parameter_list pos:line="21" pos:column="25">(<param><decl><type><name><name pos:line="21" pos:column="26">People</name><op:operator pos:line="21" pos:column="32">.</op:operator><name pos:line="21" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="21" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="21" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="22" pos:column="25">e</name><op:operator pos:line="22" pos:column="26">.</op:operator><name pos:line="22" pos:column="27">printStackTrace</name></name><argument_list pos:line="22" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">HashMap</name><argument_list pos:line="25" pos:column="24">&lt;<argument><name pos:line="25" pos:column="25">CourseOffered</name></argument>, <argument><name pos:line="25" pos:column="40">String</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="48">grades</name> <init pos:line="25" pos:column="55">= <expr><call><name><name pos:line="25" pos:column="57">StudentEnrollment</name><op:operator pos:line="25" pos:column="74">.</op:operator><name pos:line="25" pos:column="75">getAllGradesOfStudent</name></name><argument_list pos:line="25" pos:column="96">(<argument><expr><name pos:line="25" pos:column="97">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="26" pos:column="17">for(<init><decl><type><name pos:line="26" pos:column="21">CourseOffered</name></type> <name pos:line="26" pos:column="35">offeredCourse</name><range pos:line="26" pos:column="48">: <expr><call><name><name pos:line="26" pos:column="50">grades</name><op:operator pos:line="26" pos:column="56">.</op:operator><name pos:line="26" pos:column="57">keySet</name></name><argument_list pos:line="26" pos:column="63">()</argument_list></call></expr></range></decl></init> )<block pos:line="26" pos:column="67">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">offerID</name> <op:operator pos:line="27" pos:column="33">=</op:operator> <call><name><name pos:line="27" pos:column="35">offeredCourse</name><op:operator pos:line="27" pos:column="48">.</op:operator><name pos:line="27" pos:column="49">getOfferID</name></name><argument_list pos:line="27" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="28" pos:column="25">String</name></type> <name pos:line="28" pos:column="32">grade</name> <init pos:line="28" pos:column="38">= <expr><call><name><name pos:line="28" pos:column="40">grades</name><op:operator pos:line="28" pos:column="46">.</op:operator><name pos:line="28" pos:column="47">get</name></name><argument_list pos:line="28" pos:column="50">(<argument><expr><name pos:line="28" pos:column="51">offeredCourse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">System</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">out</name><op:operator pos:line="29" pos:column="35">.</op:operator><name pos:line="29" pos:column="36">println</name></name><argument_list pos:line="29" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="44">"Course: "</lit:literal><op:operator pos:line="29" pos:column="54">+</op:operator> <name pos:line="29" pos:column="56">offerID</name> <op:operator pos:line="29" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="29" pos:column="66">" Grade: "</lit:literal> <op:operator pos:line="29" pos:column="77">+</op:operator> <name pos:line="29" pos:column="79">grade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">assertNotNull</name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">grades</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="35" pos:column="9">@<name pos:line="35" pos:column="10">Test</name></annotation>
	<specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">testGetStudentsAllCourses</name><parameter_list pos:line="36" pos:column="46">()</parameter_list> <block pos:line="36" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int</name></type> <name pos:line="37" pos:column="21">UIN</name> <init pos:line="37" pos:column="25">= <expr><lit:literal type="number" pos:line="37" pos:column="27">600</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">Student</name></type> <name pos:line="38" pos:column="25">student</name> <init pos:line="38" pos:column="33">= <expr><lit:literal type="null" pos:line="38" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="39" pos:column="17">try <block pos:line="39" pos:column="21">{
			<expr_stmt><expr><name pos:line="40" pos:column="25">student</name> <op:operator pos:line="40" pos:column="33">=</op:operator> <op:operator pos:line="40" pos:column="35">new</op:operator> <call><name pos:line="40" pos:column="39">Student</name><argument_list pos:line="40" pos:column="46">(<argument><expr><name pos:line="40" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="41" pos:column="19">catch <parameter_list pos:line="41" pos:column="25">(<param><decl><type><name><name pos:line="41" pos:column="26">People</name><op:operator pos:line="41" pos:column="32">.</op:operator><name pos:line="41" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="41" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">e</name><op:operator pos:line="42" pos:column="26">.</op:operator><name pos:line="42" pos:column="27">printStackTrace</name></name><argument_list pos:line="42" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name><name pos:line="44" pos:column="17">ArrayList</name><argument_list pos:line="44" pos:column="26">&lt;<argument><name pos:line="44" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="42">courses</name> <init pos:line="44" pos:column="50">= <expr><call><name><name pos:line="44" pos:column="52">StudentEnrollment</name><op:operator pos:line="44" pos:column="69">.</op:operator><name pos:line="44" pos:column="70">getStudentsAllCourses</name></name><argument_list pos:line="44" pos:column="91">(<argument><expr><name pos:line="44" pos:column="92">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="45" pos:column="17">for(<init><decl><type><name pos:line="45" pos:column="21">CourseOffered</name></type> <name pos:line="45" pos:column="35">offeredCourse</name><range pos:line="45" pos:column="48">: <expr><name pos:line="45" pos:column="50">courses</name></expr></range></decl></init>)<block pos:line="45" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int</name></type> <name pos:line="46" pos:column="29">offerID</name> <init pos:line="46" pos:column="37">= <expr><call><name><name pos:line="46" pos:column="39">offeredCourse</name><op:operator pos:line="46" pos:column="52">.</op:operator><name pos:line="46" pos:column="53">getOfferID</name></name><argument_list pos:line="46" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">System</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">out</name><op:operator pos:line="47" pos:column="35">.</op:operator><name pos:line="47" pos:column="36">println</name></name><argument_list pos:line="47" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="44">"Course: "</lit:literal><op:operator pos:line="47" pos:column="54">+</op:operator> <name pos:line="47" pos:column="56">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		}</block></for>
		
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">assertNotNull</name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">courses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="53" pos:column="9">@<name pos:line="53" pos:column="10">Test</name></annotation>
	<specifier pos:line="54" pos:column="9">public</specifier> <name pos:line="54" pos:column="16">void</name></type> <name pos:line="54" pos:column="21">testGetStudentsInCourse</name><parameter_list pos:line="54" pos:column="44">()</parameter_list> <block pos:line="54" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">int</name></type> <name pos:line="55" pos:column="21">offerID</name> <init pos:line="55" pos:column="29">= <expr><lit:literal type="number" pos:line="55" pos:column="31">410</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="56" pos:column="17">CourseOffered</name></type> <name pos:line="56" pos:column="31">offeredCourse</name> <init pos:line="56" pos:column="45">= <expr><lit:literal type="null" pos:line="56" pos:column="47">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="57" pos:column="17">try <block pos:line="57" pos:column="21">{
			<expr_stmt><expr><name pos:line="58" pos:column="25">offeredCourse</name> <op:operator pos:line="58" pos:column="39">=</op:operator> <op:operator pos:line="58" pos:column="41">new</op:operator> <call><name pos:line="58" pos:column="45">CourseOffered</name><argument_list pos:line="58" pos:column="58">(<argument><expr><name pos:line="58" pos:column="59">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="59" pos:column="19">catch <parameter_list pos:line="59" pos:column="25">(<param><decl><type><name><name pos:line="59" pos:column="26">Course</name><op:operator pos:line="59" pos:column="32">.</op:operator><name pos:line="59" pos:column="33">CourseDoesNotExistException</name></name></type>
				| <type><name><name pos:line="60" pos:column="35">CourseOffered</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="60" pos:column="85">e</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="88">{
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">e</name><op:operator pos:line="61" pos:column="26">.</op:operator><name pos:line="61" pos:column="27">printStackTrace</name></name><argument_list pos:line="61" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<comment type="line" pos:line="64" pos:column="17">// Test getStudentsInCourse function</comment>
		<decl_stmt><decl><type><name><name pos:line="65" pos:column="17">ArrayList</name><argument_list pos:line="65" pos:column="26">&lt;<argument><name pos:line="65" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="36">students</name> <init pos:line="65" pos:column="45">= <expr><call><name><name pos:line="65" pos:column="47">StudentEnrollment</name><op:operator pos:line="65" pos:column="64">.</op:operator><name pos:line="65" pos:column="65">getStudentsInCourse</name></name><argument_list pos:line="65" pos:column="84">(<argument><expr><name pos:line="65" pos:column="85">offeredCourse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="66" pos:column="17">for(<init><decl><type><name pos:line="66" pos:column="21">Student</name></type> <name pos:line="66" pos:column="29">stud</name><range pos:line="66" pos:column="33">: <expr><name pos:line="66" pos:column="35">students</name></expr></range></decl></init>)<block pos:line="66" pos:column="44">{
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">int</name></type> <name pos:line="67" pos:column="29">UIN</name> <init pos:line="67" pos:column="33">= <expr><call><name><name pos:line="67" pos:column="35">stud</name><op:operator pos:line="67" pos:column="39">.</op:operator><name pos:line="67" pos:column="40">getUIN</name></name><argument_list pos:line="67" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">System</name><op:operator pos:line="68" pos:column="31">.</op:operator><name pos:line="68" pos:column="32">out</name><op:operator pos:line="68" pos:column="35">.</op:operator><name pos:line="68" pos:column="36">println</name></name><argument_list pos:line="68" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="44">"Student: "</lit:literal><op:operator pos:line="68" pos:column="55">+</op:operator> <name pos:line="68" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		}</block></for>
		
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">assertNotNull</name><argument_list pos:line="71" pos:column="30">(<argument><expr><name pos:line="71" pos:column="31">students</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="74" pos:column="9">@<name pos:line="74" pos:column="10">Test</name></annotation>
	<specifier pos:line="75" pos:column="9">public</specifier> <name pos:line="75" pos:column="16">void</name></type> <name pos:line="75" pos:column="21">testGetCurrentCoursesOfStudent</name><parameter_list pos:line="75" pos:column="51">()</parameter_list> <block pos:line="75" pos:column="54">{
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">int</name></type> <name pos:line="76" pos:column="21">UIN</name> <init pos:line="76" pos:column="25">= <expr><lit:literal type="number" pos:line="76" pos:column="27">600</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">Student</name></type> <name pos:line="77" pos:column="25">student</name> <init pos:line="77" pos:column="33">= <expr><lit:literal type="null" pos:line="77" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="78" pos:column="17">try <block pos:line="78" pos:column="21">{
			<expr_stmt><expr><name pos:line="79" pos:column="25">student</name> <op:operator pos:line="79" pos:column="33">=</op:operator> <op:operator pos:line="79" pos:column="35">new</op:operator> <call><name pos:line="79" pos:column="39">Student</name><argument_list pos:line="79" pos:column="46">(<argument><expr><name pos:line="79" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="80" pos:column="19">catch <parameter_list pos:line="80" pos:column="25">(<param><decl><type><name><name pos:line="80" pos:column="26">People</name><op:operator pos:line="80" pos:column="32">.</op:operator><name pos:line="80" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="80" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">e</name><op:operator pos:line="81" pos:column="26">.</op:operator><name pos:line="81" pos:column="27">printStackTrace</name></name><argument_list pos:line="81" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<expr_stmt><expr><call><name><name pos:line="83" pos:column="17">System</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">out</name><op:operator pos:line="83" pos:column="27">.</op:operator><name pos:line="83" pos:column="28">println</name></name><argument_list pos:line="83" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="36">"---------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name pos:line="84" pos:column="17">ArrayList</name><argument_list pos:line="84" pos:column="26">&lt;<argument><name pos:line="84" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="42">courses</name> <init pos:line="84" pos:column="50">= <expr><call><name><name pos:line="84" pos:column="52">StudentEnrollment</name><op:operator pos:line="84" pos:column="69">.</op:operator><name pos:line="84" pos:column="70">getCurrentCoursesOfStudent</name></name><argument_list pos:line="84" pos:column="96">(<argument><expr><name pos:line="84" pos:column="97">student</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="85" pos:column="17">for(<init><decl><type><name pos:line="85" pos:column="21">CourseOffered</name></type> <name pos:line="85" pos:column="35">offeredCourse</name><range pos:line="85" pos:column="48">: <expr><name pos:line="85" pos:column="50">courses</name></expr></range></decl></init>)<block pos:line="85" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="86" pos:column="25">int</name></type> <name pos:line="86" pos:column="29">offerID</name> <init pos:line="86" pos:column="37">= <expr><call><name><name pos:line="86" pos:column="39">offeredCourse</name><op:operator pos:line="86" pos:column="52">.</op:operator><name pos:line="86" pos:column="53">getOfferID</name></name><argument_list pos:line="86" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="87" pos:column="25">System</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">out</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">println</name></name><argument_list pos:line="87" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="44">"Course: "</lit:literal><op:operator pos:line="87" pos:column="54">+</op:operator> <name pos:line="87" pos:column="56">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		}</block></for>
		<expr_stmt><expr><call><name><name pos:line="89" pos:column="17">System</name><op:operator pos:line="89" pos:column="23">.</op:operator><name pos:line="89" pos:column="24">out</name><op:operator pos:line="89" pos:column="27">.</op:operator><name pos:line="89" pos:column="28">println</name></name><argument_list pos:line="89" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="36">"---------------------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">assertNotNull</name><argument_list pos:line="90" pos:column="30">(<argument><expr><name pos:line="90" pos:column="31">courses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="93" pos:column="9">@<name pos:line="93" pos:column="10">Test</name></annotation>
	<specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">void</name></type> <name pos:line="94" pos:column="21">testUpdateAllStudentGrade</name><parameter_list pos:line="94" pos:column="46">()</parameter_list> <block pos:line="94" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="95" pos:column="17">int</name></type> <name pos:line="95" pos:column="21">UIN</name> <init pos:line="95" pos:column="25">= <expr><lit:literal type="number" pos:line="95" pos:column="27">600</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="96" pos:column="17">int</name></type> <name pos:line="96" pos:column="21">offerID</name> <init pos:line="96" pos:column="29">= <expr><lit:literal type="number" pos:line="96" pos:column="31">414</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="97" pos:column="17">CourseOffered</name></type> <name pos:line="97" pos:column="31">course</name> <init pos:line="97" pos:column="38">= <expr><lit:literal type="null" pos:line="97" pos:column="40">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="98" pos:column="17">try <block pos:line="98" pos:column="21">{
			<expr_stmt><expr><name pos:line="99" pos:column="25">course</name> <op:operator pos:line="99" pos:column="32">=</op:operator> <op:operator pos:line="99" pos:column="34">new</op:operator> <call><name pos:line="99" pos:column="38">CourseOffered</name><argument_list pos:line="99" pos:column="51">(<argument><expr><name pos:line="99" pos:column="52">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="100" pos:column="19">catch <parameter_list pos:line="100" pos:column="25">(<param><decl><type><name><name pos:line="100" pos:column="26">Course</name><op:operator pos:line="100" pos:column="32">.</op:operator><name pos:line="100" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="100" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="100" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="101" pos:column="25">e</name><op:operator pos:line="101" pos:column="26">.</op:operator><name pos:line="101" pos:column="27">printStackTrace</name></name><argument_list pos:line="101" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch> <catch pos:line="102" pos:column="19">catch <parameter_list pos:line="102" pos:column="25">(<param><decl><type><name><name pos:line="102" pos:column="26">CourseOffered</name><op:operator pos:line="102" pos:column="39">.</op:operator><name pos:line="102" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="102" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">e</name><op:operator pos:line="103" pos:column="26">.</op:operator><name pos:line="103" pos:column="27">printStackTrace</name></name><argument_list pos:line="103" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name pos:line="105" pos:column="17">Student</name></type> <name pos:line="105" pos:column="25">student</name> <init pos:line="105" pos:column="33">= <expr><lit:literal type="null" pos:line="105" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="106" pos:column="17">try <block pos:line="106" pos:column="21">{
			<expr_stmt><expr><name pos:line="107" pos:column="25">student</name> <op:operator pos:line="107" pos:column="33">=</op:operator> <op:operator pos:line="107" pos:column="35">new</op:operator> <call><name pos:line="107" pos:column="39">Student</name><argument_list pos:line="107" pos:column="46">(<argument><expr><name pos:line="107" pos:column="47">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch pos:line="108" pos:column="19">catch <parameter_list pos:line="108" pos:column="25">(<param><decl><type><name><name pos:line="108" pos:column="26">People</name><op:operator pos:line="108" pos:column="32">.</op:operator><name pos:line="108" pos:column="33">PersonDoesNotExistException</name></name></type> <name pos:line="108" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="108" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="109" pos:column="25">e</name><op:operator pos:line="109" pos:column="26">.</op:operator><name pos:line="109" pos:column="27">printStackTrace</name></name><argument_list pos:line="109" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<decl_stmt><decl><type><name><name pos:line="111" pos:column="17">HashMap</name><argument_list pos:line="111" pos:column="24">&lt;<argument><name pos:line="111" pos:column="25">Student</name></argument>,<argument><name pos:line="111" pos:column="33">String</name></argument>&gt;</argument_list></name></type> <name pos:line="111" pos:column="41">courseCurve</name> <init pos:line="111" pos:column="53">= <expr><op:operator pos:line="111" pos:column="55">new</op:operator> <call><name><name pos:line="111" pos:column="59">HashMap</name><argument_list pos:line="111" pos:column="66">&lt;<argument><name pos:line="111" pos:column="67">Student</name></argument>,<argument><name pos:line="111" pos:column="75">String</name></argument>&gt;</argument_list></name><argument_list pos:line="111" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="112" pos:column="17">courseCurve</name><op:operator pos:line="112" pos:column="28">.</op:operator><name pos:line="112" pos:column="29">put</name></name><argument_list pos:line="112" pos:column="32">(<argument><expr><name pos:line="112" pos:column="33">student</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="42">"C"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="113" pos:column="17">StudentEnrollment</name><op:operator pos:line="113" pos:column="34">.</op:operator><name pos:line="113" pos:column="35">updateAllStudentGrade</name></name><argument_list pos:line="113" pos:column="56">(<argument><expr><name pos:line="113" pos:column="57">courseCurve</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="70">course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	

	<function><type><annotation pos:line="117" pos:column="9">@<name pos:line="117" pos:column="10">Test</name></annotation>
	<specifier pos:line="118" pos:column="9">public</specifier> <name pos:line="118" pos:column="16">void</name></type> <name pos:line="118" pos:column="21">testEnrollStudents</name><parameter_list pos:line="118" pos:column="39">()</parameter_list> <block pos:line="118" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">int</name></type> <name pos:line="119" pos:column="21">UIN</name> <init pos:line="119" pos:column="25">= <expr><lit:literal type="number" pos:line="119" pos:column="27">601</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="120" pos:column="17">int</name></type> <name pos:line="120" pos:column="21">offerID</name> <init pos:line="120" pos:column="29">= <expr><lit:literal type="number" pos:line="120" pos:column="31">414</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="121" pos:column="17">StudentEnrollment</name></type> <name pos:line="121" pos:column="35">enrolledStud</name> <init pos:line="121" pos:column="48">= <expr><op:operator pos:line="121" pos:column="50">new</op:operator> <call><name pos:line="121" pos:column="54">StudentEnrollment</name><argument_list pos:line="121" pos:column="71">(<argument><expr><name pos:line="121" pos:column="72">offerID</name></expr></argument>,<argument><expr><name pos:line="121" pos:column="80">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="122" pos:column="17">boolean</name></type> <name pos:line="122" pos:column="25">enrolled</name> <init pos:line="122" pos:column="34">=  <expr><call><name><name pos:line="122" pos:column="37">enrolledStud</name><op:operator pos:line="122" pos:column="49">.</op:operator><name pos:line="122" pos:column="50">enrollStudents</name></name><argument_list pos:line="122" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">assertEquals</name><argument_list pos:line="123" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="123" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="123" pos:column="35">enrolled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="126" pos:column="9">@<name pos:line="126" pos:column="10">Test</name></annotation>
	<specifier pos:line="127" pos:column="9">public</specifier> <name pos:line="127" pos:column="16">void</name></type> <name pos:line="127" pos:column="21">testUnregisterStudent</name><parameter_list pos:line="127" pos:column="42">()</parameter_list> <block pos:line="127" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="128" pos:column="17">int</name></type> <name pos:line="128" pos:column="21">UIN</name> <init pos:line="128" pos:column="25">= <expr><lit:literal type="number" pos:line="128" pos:column="27">601</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="129" pos:column="17">int</name></type> <name pos:line="129" pos:column="21">offerID</name> <init pos:line="129" pos:column="29">= <expr><lit:literal type="number" pos:line="129" pos:column="31">414</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="130" pos:column="17">StudentEnrollment</name></type> <name pos:line="130" pos:column="35">enrolledStud</name> <init pos:line="130" pos:column="48">= <expr><op:operator pos:line="130" pos:column="50">new</op:operator> <call><name pos:line="130" pos:column="54">StudentEnrollment</name><argument_list pos:line="130" pos:column="71">(<argument><expr><name pos:line="130" pos:column="72">offerID</name></expr></argument>,<argument><expr><name pos:line="130" pos:column="80">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="131" pos:column="17">boolean</name></type> <name pos:line="131" pos:column="25">unenrolled</name> <init pos:line="131" pos:column="36">=  <expr><call><name><name pos:line="131" pos:column="39">enrolledStud</name><op:operator pos:line="131" pos:column="51">.</op:operator><name pos:line="131" pos:column="52">unregisterStudent</name></name><argument_list pos:line="131" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">assertEquals</name><argument_list pos:line="132" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="132" pos:column="30">true</lit:literal></expr></argument>,<argument><expr><name pos:line="132" pos:column="35">unenrolled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>	
}</block></class>
</unit>
