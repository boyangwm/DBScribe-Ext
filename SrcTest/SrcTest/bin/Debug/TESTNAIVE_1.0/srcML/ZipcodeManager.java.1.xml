<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\ZipcodeManager.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">Statement</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">util</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">tada</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">com</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">riskIt</name><op:operator pos:line="10" pos:column="18">.</op:operator><name pos:line="10" pos:column="19">db</name><op:operator pos:line="10" pos:column="21">.</op:operator><name pos:line="10" pos:column="22">DatabaseConnection</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">com</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">riskIt</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">util</name></name>.*;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">com</name><op:operator pos:line="12" pos:column="11">.</op:operator><name pos:line="12" pos:column="12">riskIt</name><op:operator pos:line="12" pos:column="18">.</op:operator><name pos:line="12" pos:column="19">data</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="14" pos:column="1">/**
 * This class mainly works on methods that deals with zipcode properties
 * @author Poornima Tantry
 *
 */</comment>
<class><specifier pos:line="19" pos:column="1">public</specifier> class <name pos:line="19" pos:column="14">ZipcodeManager</name> 
<block pos:line="20" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">private</specifier> <name pos:line="21" pos:column="17">AccessorMethods</name></type> <name pos:line="21" pos:column="33">acc</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="23" pos:column="9">public</specifier> <name pos:line="23" pos:column="16">ZipcodeManager</name><parameter_list pos:line="23" pos:column="30">()</parameter_list>
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">acc</name> <op:operator pos:line="25" pos:column="21">=</op:operator> <op:operator pos:line="25" pos:column="23">new</op:operator> <call><name pos:line="25" pos:column="27">AccessorMethods</name><argument_list pos:line="25" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<comment type="block" format="javadoc" pos:line="27" pos:column="9">/**
	 * This method gets all persons living in same zipcode and then calculated range 
	 * @param zipcode - zipcode to be compared with
	 * @param c - connection from the calling method
	 * @author Poornima Tantry
	 */</comment>
	<function><type><annotation pos:line="33" pos:column="9">@<name pos:line="33" pos:column="10">TaDaMethod</name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">variablesToTrack</name> <op:operator pos:line="33" pos:column="38">=</op:operator> <block pos:line="33" pos:column="40">{<expr><lit:literal type="string" pos:line="33" pos:column="41">"a"</lit:literal></expr><op:operator pos:line="33" pos:column="44">,</op:operator> <argument><expr><lit:literal type="string" pos:line="33" pos:column="46">"b"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="49">,</op:operator> <argument><expr><lit:literal type="string" pos:line="33" pos:column="51">"c"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="54">,</op:operator> <argument><expr><lit:literal type="string" pos:line="33" pos:column="56">"d"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="59">,</op:operator> <argument><expr><lit:literal type="string" pos:line="33" pos:column="61">"e"</lit:literal></expr></argument><op:operator pos:line="33" pos:column="64">,</op:operator> <argument><expr><lit:literal type="string" pos:line="33" pos:column="66">"f"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="34" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="34" pos:column="56">=</op:operator> <block pos:line="34" pos:column="58">{<expr><lit:literal type="string" pos:line="34" pos:column="59">"job.workweeks"</lit:literal></expr><op:operator pos:line="34" pos:column="74">,</op:operator> <argument><expr><lit:literal type="string" pos:line="34" pos:column="76">"job.weekwage "</lit:literal></expr></argument><op:operator pos:line="34" pos:column="91">,</op:operator> <argument><expr><lit:literal type="string" pos:line="34" pos:column="93">"investment.capitalgains"</lit:literal></expr></argument><op:operator pos:line="34" pos:column="118">,</op:operator>  
			<argument><expr><lit:literal type="string" pos:line="35" pos:column="25">"investment.capitallosses"</lit:literal></expr></argument><op:operator pos:line="35" pos:column="51">,</op:operator> <argument><expr><lit:literal type="string" pos:line="35" pos:column="53">"investment.stockdividends"</lit:literal></expr></argument><op:operator pos:line="35" pos:column="80">,</op:operator> <argument><expr><lit:literal type="string" pos:line="35" pos:column="82">"userrecord.ssn"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="36" pos:column="9">public</specifier> <name><name pos:line="36" pos:column="16">ArrayList</name><argument_list pos:line="36" pos:column="25">&lt;<argument><name pos:line="36" pos:column="26">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="37">getAllZipcodes</name><parameter_list pos:line="36" pos:column="51">(<param><decl><type><name pos:line="36" pos:column="52">String</name></type> <name pos:line="36" pos:column="59">zipcode</name></decl></param>)</parameter_list>
	<block pos:line="37" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">String</name></type> <name pos:line="38" pos:column="24">cmds_getAllZipcode</name> <init pos:line="38" pos:column="43">= <expr><lit:literal type="string" pos:line="38" pos:column="45">""</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">ResultSet</name></type> <name pos:line="39" pos:column="27">result</name> <init pos:line="39" pos:column="34">= <expr><lit:literal type="null" pos:line="39" pos:column="36">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="40" pos:column="17">ArrayList</name><argument_list pos:line="40" pos:column="26">&lt;<argument><name pos:line="40" pos:column="27">ScoreData</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="38">sData</name> <init pos:line="40" pos:column="44">= <expr><op:operator pos:line="40" pos:column="46">new</op:operator> <call><name><name pos:line="40" pos:column="50">ArrayList</name><argument_list pos:line="40" pos:column="59">&lt;<argument><name pos:line="40" pos:column="60">ScoreData</name></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="42" pos:column="17">try
		<block pos:line="43" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="44" pos:column="25">Connection</name></type> <name pos:line="44" pos:column="36">conn</name> <init pos:line="44" pos:column="41">= <expr><call><name><name pos:line="44" pos:column="43">DatabaseConnection</name><op:operator pos:line="44" pos:column="61">.</op:operator><name pos:line="44" pos:column="62">getConnection</name></name><argument_list pos:line="44" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">Statement</name></type> <name pos:line="45" pos:column="35">s</name> <init pos:line="45" pos:column="37">= <expr><call><name><name pos:line="45" pos:column="39">conn</name><op:operator pos:line="45" pos:column="43">.</op:operator><name pos:line="45" pos:column="44">createStatement</name></name><argument_list pos:line="45" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line" pos:line="47" pos:column="25">//get all zipcode similar to the given person</comment>
			<if pos:line="48" pos:column="25">if<condition pos:line="48" pos:column="27">(<expr><name pos:line="48" pos:column="28">zipcode</name> <op:operator pos:line="48" pos:column="36">!=</op:operator> <lit:literal type="null" pos:line="48" pos:column="39">null</lit:literal></expr>)</condition><then pos:line="48" pos:column="44">
			<block pos:line="49" pos:column="25">{
				<expr_stmt><expr><name pos:line="50" pos:column="33">cmds_getAllZipcode</name> <op:operator pos:line="50" pos:column="52">=</op:operator> <lit:literal type="string" pos:line="50" pos:column="54">"SELECT userrecord.zip, userrecord.ssn, investment.capitalgains, "</lit:literal> 
									<op:operator pos:line="51" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="51" pos:column="75">"investment.capitallosses, investment.stockdividends, "</lit:literal> 
									<op:operator pos:line="52" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="75">"job.workweeks, job.weekwage "</lit:literal> 
									<op:operator pos:line="53" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="53" pos:column="75">"FROM  investment, userrecord, job WHERE "</lit:literal>
									<op:operator pos:line="54" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="54" pos:column="75">" investment.ssn = userrecord.ssn and "</lit:literal>
									<op:operator pos:line="55" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="55" pos:column="75">" job.ssn = userrecord.ssn and "</lit:literal>
									<op:operator pos:line="56" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="56" pos:column="75">"userrecord.zip = '"</lit:literal> <op:operator pos:line="56" pos:column="96">+</op:operator> <name pos:line="56" pos:column="98">zipcode</name> <op:operator pos:line="56" pos:column="106">+</op:operator> <lit:literal type="string" pos:line="56" pos:column="108">"'"</lit:literal></expr> ;</expr_stmt>
				
				<comment type="line" pos:line="58" pos:column="33">// find all the persons with same zipcode		</comment>
				<expr_stmt><expr><name pos:line="59" pos:column="33">result</name> <op:operator pos:line="59" pos:column="40">=</op:operator> <call><name><name pos:line="59" pos:column="42">s</name><op:operator pos:line="59" pos:column="43">.</op:operator><name pos:line="59" pos:column="44">executeQuery</name></name><argument_list pos:line="59" pos:column="56">(<argument><expr><name pos:line="59" pos:column="57">cmds_getAllZipcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
				<while pos:line="61" pos:column="33">while<condition pos:line="61" pos:column="38">(<expr><call><name><name pos:line="61" pos:column="39">result</name><op:operator pos:line="61" pos:column="45">.</op:operator><name pos:line="61" pos:column="46">next</name></name><argument_list pos:line="61" pos:column="50">()</argument_list></call></expr>)</condition>
				<block pos:line="62" pos:column="33">{		
					<decl_stmt><decl><type><name pos:line="63" pos:column="41">int</name></type> <name pos:line="63" pos:column="45">a</name> <init pos:line="63" pos:column="47">= <expr><call><name><name pos:line="63" pos:column="49">result</name><op:operator pos:line="63" pos:column="55">.</op:operator><name pos:line="63" pos:column="56">getInt</name></name><argument_list pos:line="63" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="63">"workweeks"</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="63" pos:column="75">,</op:operator>
					<name pos:line="64" pos:column="41">b</name> <init pos:line="64" pos:column="43">= <expr><call><name><name pos:line="64" pos:column="45">result</name><op:operator pos:line="64" pos:column="51">.</op:operator><name pos:line="64" pos:column="52">getInt</name></name><argument_list pos:line="64" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="59">"weekwage"</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="64" pos:column="70">,</op:operator>
					<name pos:line="65" pos:column="41">c</name> <init pos:line="65" pos:column="43">= <expr><call><name><name pos:line="65" pos:column="45">result</name><op:operator pos:line="65" pos:column="51">.</op:operator><name pos:line="65" pos:column="52">getInt</name></name><argument_list pos:line="65" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="59">"capitalGains"</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="65" pos:column="74">,</op:operator>
					<name pos:line="66" pos:column="41">d</name> <init pos:line="66" pos:column="43">= <expr><call><name><name pos:line="66" pos:column="45">result</name><op:operator pos:line="66" pos:column="51">.</op:operator><name pos:line="66" pos:column="52">getInt</name></name><argument_list pos:line="66" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="59">"capitallosses"</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="66" pos:column="75">,</op:operator>
					<name pos:line="67" pos:column="41">e</name> <init pos:line="67" pos:column="43">= <expr><call><name><name pos:line="67" pos:column="45">result</name><op:operator pos:line="67" pos:column="51">.</op:operator><name pos:line="67" pos:column="52">getInt</name></name><argument_list pos:line="67" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="59">"stockdividends"</lit:literal></expr></argument>)</argument_list></call></expr></init><op:operator pos:line="67" pos:column="76">,</op:operator>
					<name pos:line="68" pos:column="41">f</name> <init pos:line="68" pos:column="43">= <expr><call><name><name pos:line="68" pos:column="45">result</name><op:operator pos:line="68" pos:column="51">.</op:operator><name pos:line="68" pos:column="52">getInt</name></name><argument_list pos:line="68" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="59">"ssn"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="69" pos:column="41">//calculate the range for each person in resultSet</comment>
					<expr_stmt><expr><name pos:line="70" pos:column="41">sData</name> <op:operator pos:line="70" pos:column="47">=</op:operator> <call><name><name pos:line="70" pos:column="49">acc</name><op:operator pos:line="70" pos:column="52">.</op:operator><name pos:line="70" pos:column="53">calculateRange</name></name><argument_list pos:line="70" pos:column="67">(	<argument><expr><name pos:line="70" pos:column="73">a</name></expr></argument>,
												<argument><expr><name pos:line="71" pos:column="97">b</name></expr></argument>,
												<argument><expr><name pos:line="72" pos:column="97">c</name></expr></argument>,
												<argument><expr><name pos:line="73" pos:column="97">d</name></expr></argument>,
												<argument><expr><name pos:line="74" pos:column="97">e</name></expr></argument>,
												<argument><expr><op:operator pos:line="75" pos:column="97">(</op:operator><name pos:line="75" pos:column="98">long</name><op:operator pos:line="75" pos:column="102">)</op:operator><name pos:line="75" pos:column="103">f</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="106">sData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				}</block></while>		
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">result</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">close</name></name><argument_list pos:line="77" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="79" pos:column="25">s</name><op:operator pos:line="79" pos:column="26">.</op:operator><name pos:line="79" pos:column="27">close</name></name><argument_list pos:line="79" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
			
		}</block>
		<catch pos:line="82" pos:column="17">catch<parameter_list pos:line="82" pos:column="22">(<param><decl><type><name pos:line="82" pos:column="23">Exception</name></type> <name pos:line="82" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="83" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">System</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">out</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">println</name></name><argument_list pos:line="84" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="44">"Exception in getAllZipcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="85" pos:column="25">e</name><op:operator pos:line="85" pos:column="26">.</op:operator><name pos:line="85" pos:column="27">printStackTrace</name></name><argument_list pos:line="85" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>	
		<return pos:line="87" pos:column="17">return <expr><name pos:line="87" pos:column="24">sData</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="90" pos:column="9">/**
	 * This method gets the name of state by first searching the zipcode
	 * from the userrecord
	 * @param inv - customer's information unit
	 * @return - customer object with updated values
	 * @author Poornima Tantry
	 */</comment>
	<function><type><annotation pos:line="97" pos:column="9">@<name pos:line="97" pos:column="10">TaDaMethod</name><argument_list pos:line="97" pos:column="20">(<argument><expr><name pos:line="97" pos:column="21">variablesToTrack</name> <op:operator pos:line="97" pos:column="38">=</op:operator> <block pos:line="97" pos:column="40">{<expr><lit:literal type="string" pos:line="97" pos:column="41">"zipcode"</lit:literal></expr><op:operator pos:line="97" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="97" pos:column="52">"age"</lit:literal></expr></argument>}</block></expr></argument>,
			<argument><expr><name pos:line="98" pos:column="25">correspondingDatabaseAttribute</name> <op:operator pos:line="98" pos:column="56">=</op:operator> <block pos:line="98" pos:column="58">{<expr><lit:literal type="string" pos:line="98" pos:column="59">"userrecord.zip"</lit:literal></expr><op:operator pos:line="98" pos:column="75">,</op:operator> <argument><expr><lit:literal type="string" pos:line="98" pos:column="77">"userrecord.age"</lit:literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
	<specifier pos:line="99" pos:column="9">public</specifier> <name pos:line="99" pos:column="16">Invitation</name></type> <name pos:line="99" pos:column="27">getOneZipcode</name><parameter_list pos:line="99" pos:column="40">(<param><decl><type><name pos:line="99" pos:column="41">Invitation</name></type> <name pos:line="99" pos:column="52">inv</name></decl></param>)</parameter_list>
	<block pos:line="100" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="101" pos:column="17">String</name></type> <name pos:line="101" pos:column="24">stateName</name> <init pos:line="101" pos:column="34">= <expr><lit:literal type="string" pos:line="101" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">int</name></type> <name pos:line="102" pos:column="21">age</name> <init pos:line="102" pos:column="25">= <expr><lit:literal type="number" pos:line="102" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">String</name></type> <name pos:line="103" pos:column="24">cmd_zipcode</name> <init pos:line="103" pos:column="36">= <expr><lit:literal type="string" pos:line="103" pos:column="38">"select zip, age from userrecord where ssn = "</lit:literal> <op:operator pos:line="103" pos:column="85">+</op:operator> <call><name><name pos:line="103" pos:column="87">inv</name><op:operator pos:line="103" pos:column="90">.</op:operator><name pos:line="103" pos:column="91">getUserSSN</name></name><argument_list pos:line="103" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">String</name></type> <name pos:line="104" pos:column="24">zipcode</name> <init pos:line="104" pos:column="32">= <expr><lit:literal type="string" pos:line="104" pos:column="34">""</lit:literal></expr></init></decl>;</decl_stmt>
		
		<try pos:line="106" pos:column="17">try
		<block pos:line="107" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="108" pos:column="25">Connection</name></type> <name pos:line="108" pos:column="36">conn</name> <init pos:line="108" pos:column="41">= <expr><call><name><name pos:line="108" pos:column="43">DatabaseConnection</name><op:operator pos:line="108" pos:column="61">.</op:operator><name pos:line="108" pos:column="62">getConnection</name></name><argument_list pos:line="108" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="109" pos:column="25">Statement</name></type> <name pos:line="109" pos:column="35">s</name> <init pos:line="109" pos:column="37">= <expr><call><name><name pos:line="109" pos:column="39">conn</name><op:operator pos:line="109" pos:column="43">.</op:operator><name pos:line="109" pos:column="44">createStatement</name></name><argument_list pos:line="109" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="111" pos:column="25">ResultSet</name></type> <name pos:line="111" pos:column="35">result</name> <init pos:line="111" pos:column="42">= <expr><call><name><name pos:line="111" pos:column="44">s</name><op:operator pos:line="111" pos:column="45">.</op:operator><name pos:line="111" pos:column="46">executeQuery</name></name><argument_list pos:line="111" pos:column="58">(<argument><expr><name pos:line="111" pos:column="59">cmd_zipcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="112" pos:column="25">if<condition pos:line="112" pos:column="27">(<expr><call><name><name pos:line="112" pos:column="28">result</name><op:operator pos:line="112" pos:column="34">.</op:operator><name pos:line="112" pos:column="35">next</name></name><argument_list pos:line="112" pos:column="39">()</argument_list></call></expr>)</condition><then pos:line="112" pos:column="42">
			<block pos:line="113" pos:column="25">{
				<expr_stmt><expr><name pos:line="114" pos:column="33">zipcode</name> <op:operator pos:line="114" pos:column="41">=</op:operator> <call><name><name pos:line="114" pos:column="43">result</name><op:operator pos:line="114" pos:column="49">.</op:operator><name pos:line="114" pos:column="50">getString</name></name><argument_list pos:line="114" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="60">"zip"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="115" pos:column="33">age</name> <op:operator pos:line="115" pos:column="37">=</op:operator> <call><name><name pos:line="115" pos:column="39">result</name><op:operator pos:line="115" pos:column="45">.</op:operator><name pos:line="115" pos:column="46">getInt</name></name><argument_list pos:line="115" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="53">"age"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="117" pos:column="25">//set data in the object</comment>
			<expr_stmt><expr><call><name><name pos:line="118" pos:column="25">inv</name><op:operator pos:line="118" pos:column="28">.</op:operator><name pos:line="118" pos:column="29">setZipcode</name></name><argument_list pos:line="118" pos:column="39">(<argument><expr><name pos:line="118" pos:column="40">zipcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="119" pos:column="25">inv</name><op:operator pos:line="119" pos:column="28">.</op:operator><name pos:line="119" pos:column="29">setAge</name></name><argument_list pos:line="119" pos:column="35">(<argument><expr><name pos:line="119" pos:column="36">age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="121" pos:column="25">result</name><op:operator pos:line="121" pos:column="31">.</op:operator><name pos:line="121" pos:column="32">close</name></name><argument_list pos:line="121" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="123" pos:column="25">//get the state name from zipcode</comment>
			<decl_stmt><decl><type><name pos:line="124" pos:column="25">String</name></type> <name pos:line="124" pos:column="32">cmd_state</name> <init pos:line="124" pos:column="42">= <expr><lit:literal type="string" pos:line="124" pos:column="44">"select * from ziptable where zip = '"</lit:literal> <op:operator pos:line="124" pos:column="83">+</op:operator> <name pos:line="124" pos:column="85">zipcode</name> <op:operator pos:line="124" pos:column="93">+</op:operator> <lit:literal type="string" pos:line="124" pos:column="95">"'"</lit:literal></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name pos:line="126" pos:column="25">result</name> <op:operator pos:line="126" pos:column="32">=</op:operator> <call><name><name pos:line="126" pos:column="34">s</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">executeQuery</name></name><argument_list pos:line="126" pos:column="48">(<argument><expr><name pos:line="126" pos:column="49">cmd_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="127" pos:column="25">if<condition pos:line="127" pos:column="27">(<expr><call><name><name pos:line="127" pos:column="28">result</name><op:operator pos:line="127" pos:column="34">.</op:operator><name pos:line="127" pos:column="35">next</name></name><argument_list pos:line="127" pos:column="39">()</argument_list></call></expr>)</condition><then pos:line="127" pos:column="42">
				<expr_stmt><expr><name pos:line="128" pos:column="33">stateName</name> <op:operator pos:line="128" pos:column="43">=</op:operator> <call><name><name pos:line="128" pos:column="45">result</name><op:operator pos:line="128" pos:column="51">.</op:operator><name pos:line="128" pos:column="52">getString</name></name><argument_list pos:line="128" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="62">"statename"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="129" pos:column="25">inv</name><op:operator pos:line="129" pos:column="28">.</op:operator><name pos:line="129" pos:column="29">setStateName</name></name><argument_list pos:line="129" pos:column="41">(<argument><expr><name pos:line="129" pos:column="42">stateName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="130" pos:column="25">result</name><op:operator pos:line="130" pos:column="31">.</op:operator><name pos:line="130" pos:column="32">close</name></name><argument_list pos:line="130" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			
		}</block>
		<catch pos:line="133" pos:column="17">catch<parameter_list pos:line="133" pos:column="22">(<param><decl><type><name pos:line="133" pos:column="23">Exception</name></type> <name pos:line="133" pos:column="33">e</name></decl></param>)</parameter_list>
		<block pos:line="134" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="135" pos:column="25">System</name><op:operator pos:line="135" pos:column="31">.</op:operator><name pos:line="135" pos:column="32">out</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">println</name></name><argument_list pos:line="135" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="44">"Exception in getOneZipcode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="136" pos:column="25">e</name><op:operator pos:line="136" pos:column="26">.</op:operator><name pos:line="136" pos:column="27">printStackTrace</name></name><argument_list pos:line="136" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="138" pos:column="17">return <expr><name pos:line="138" pos:column="24">inv</name></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>
