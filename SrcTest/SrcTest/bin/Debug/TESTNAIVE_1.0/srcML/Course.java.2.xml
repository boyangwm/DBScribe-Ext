<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Course.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">util</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">LinkedHashMap</name></name>;</import>


<class><specifier pos:line="14" pos:column="1">public</specifier> class <name pos:line="14" pos:column="14">Course</name> <block pos:line="14" pos:column="21">{
	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <name pos:line="15" pos:column="17">Department</name></type> <name pos:line="15" pos:column="28">department</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">int</name></type> <name pos:line="16" pos:column="21">courseID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">String</name></type> <name pos:line="17" pos:column="24">courseName</name></decl>;</decl_stmt>
	
	<comment type="block" pos:line="19" pos:column="9">/*Basic constructor when all the initialization values are known*/</comment>
	<constructor><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">Course</name><parameter_list pos:line="20" pos:column="22">(<param><decl><type><name pos:line="20" pos:column="23">int</name></type> <name pos:line="20" pos:column="27">courseID</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="37">Department</name></type> <name pos:line="20" pos:column="48">department</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="60">String</name></type> <name pos:line="20" pos:column="67">courseName</name></decl></param>)</parameter_list> <block pos:line="20" pos:column="79">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">super</name><argument_list pos:line="21" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">this</name><op:operator pos:line="22" pos:column="21">.</op:operator><name pos:line="22" pos:column="22">courseID</name></name> <op:operator pos:line="22" pos:column="31">=</op:operator> <name pos:line="22" pos:column="33">courseID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">this</name><op:operator pos:line="23" pos:column="21">.</op:operator><name pos:line="23" pos:column="22">department</name></name> <op:operator pos:line="23" pos:column="33">=</op:operator> <name pos:line="23" pos:column="35">department</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">this</name><op:operator pos:line="24" pos:column="21">.</op:operator><name pos:line="24" pos:column="22">courseName</name></name> <op:operator pos:line="24" pos:column="33">=</op:operator> <name pos:line="24" pos:column="35">courseName</name></expr>;</expr_stmt>
	}</block></constructor>
	

	<comment type="block" pos:line="28" pos:column="9">/*This constructor takes the course id as an input and retrieves and initializes all the
	 * course fields for the object.
	 * Throws an CourseDoesNotExistException if the course id passed is not existing in the database.
	 */</comment>
	
	<constructor><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">Course</name><parameter_list pos:line="33" pos:column="22">(<param><decl><type><name pos:line="33" pos:column="23">int</name></type> <name pos:line="33" pos:column="27">cID</name></decl></param>)</parameter_list> <throws pos:line="33" pos:column="32">throws <argument><expr><name pos:line="33" pos:column="39">CourseDoesNotExistException</name></expr></argument></throws> <block pos:line="33" pos:column="67">{
					
		<expr_stmt><expr><call><name><name pos:line="35" pos:column="17">System</name><op:operator pos:line="35" pos:column="23">.</op:operator><name pos:line="35" pos:column="24">out</name><op:operator pos:line="35" pos:column="27">.</op:operator><name pos:line="35" pos:column="28">println</name></name><argument_list pos:line="35" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="36">"Searching for course with ID:"</lit:literal><op:operator pos:line="35" pos:column="67">+</op:operator><name pos:line="35" pos:column="68">cID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="37" pos:column="17">try<block pos:line="37" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">Connection</name></type> <name pos:line="38" pos:column="36">conn</name> <init pos:line="38" pos:column="41">= <expr><call><name><name pos:line="38" pos:column="43">Database</name><op:operator pos:line="38" pos:column="51">.</op:operator><name pos:line="38" pos:column="52">getConnection</name></name><argument_list pos:line="38" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="40" pos:column="25">try<block pos:line="40" pos:column="28">{
				<if pos:line="41" pos:column="33">if<condition pos:line="41" pos:column="35">(<expr><name pos:line="41" pos:column="36">conn</name> <op:operator pos:line="41" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="41" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="41" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="42" pos:column="41">String</name></type> <name pos:line="42" pos:column="48">SQLSelect</name><init pos:line="42" pos:column="57">= <expr><lit:literal type="string" pos:line="42" pos:column="59">"Select CourseID, CourseName, DepartmentID"</lit:literal>
							<op:operator pos:line="43" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="43" pos:column="59">" FROM courses"</lit:literal>
							<op:operator pos:line="44" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="44" pos:column="59">" WHERE CourseID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="45" pos:column="41">PreparedStatement</name></type> <name pos:line="45" pos:column="59">statement</name> <init pos:line="45" pos:column="69">= <expr><call><name><name pos:line="45" pos:column="71">conn</name><op:operator pos:line="45" pos:column="75">.</op:operator><name pos:line="45" pos:column="76">prepareStatement</name></name><argument_list pos:line="45" pos:column="92">(<argument><expr><name pos:line="45" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="46" pos:column="41">statement</name><op:operator pos:line="46" pos:column="50">.</op:operator><name pos:line="46" pos:column="51">setInt</name></name><argument_list pos:line="46" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="61">cID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="47" pos:column="41">ResultSet</name></type> <name pos:line="47" pos:column="51">rs</name> <init pos:line="47" pos:column="54">=  <expr><call><name><name pos:line="47" pos:column="57">statement</name><op:operator pos:line="47" pos:column="66">.</op:operator><name pos:line="47" pos:column="67">executeQuery</name></name><argument_list pos:line="47" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="49" pos:column="41">if<condition pos:line="49" pos:column="43">(<expr><call><name><name pos:line="49" pos:column="44">rs</name><op:operator pos:line="49" pos:column="46">.</op:operator><name pos:line="49" pos:column="47">first</name></name><argument_list pos:line="49" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="49" pos:column="55">{
						<comment type="block" pos:line="50" pos:column="49">/*The course with the specified id is found.
						 * Initialize the object instance variables with the values retrieved from the database
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="53" pos:column="49">DBAnnotation</name><op:operator pos:line="53" pos:column="61">.</op:operator><name pos:line="53" pos:column="62">annoate</name></name><argument_list pos:line="53" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="82">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="93">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="53" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="54" pos:column="49">int</name></type> <name pos:line="54" pos:column="53">courseID</name> <init pos:line="54" pos:column="62">= <expr><call><name><name pos:line="54" pos:column="64">rs</name><op:operator pos:line="54" pos:column="66">.</op:operator><name pos:line="54" pos:column="67">getInt</name></name><argument_list pos:line="54" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="74">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="56" pos:column="49">DBAnnotation</name><op:operator pos:line="56" pos:column="61">.</op:operator><name pos:line="56" pos:column="62">annoate</name></name><argument_list pos:line="56" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="70">"courseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="84">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="95">"CourseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="56" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="57" pos:column="49">String</name></type> <name pos:line="57" pos:column="56">courseName</name> <init pos:line="57" pos:column="67">= <expr><call><name><name pos:line="57" pos:column="69">rs</name><op:operator pos:line="57" pos:column="71">.</op:operator><name pos:line="57" pos:column="72">getString</name></name><argument_list pos:line="57" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="82">"CourseName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
												
						<expr_stmt><expr><call><name><name pos:line="59" pos:column="49">DBAnnotation</name><op:operator pos:line="59" pos:column="61">.</op:operator><name pos:line="59" pos:column="62">annoate</name></name><argument_list pos:line="59" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="70">"deptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="80">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="91">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="59" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="60" pos:column="49">int</name></type> <name pos:line="60" pos:column="53">deptID</name> <init pos:line="60" pos:column="60">= <expr><call><name><name pos:line="60" pos:column="62">rs</name><op:operator pos:line="60" pos:column="64">.</op:operator><name pos:line="60" pos:column="65">getInt</name></name><argument_list pos:line="60" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="72">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="61" pos:column="49">Department</name></type> <name pos:line="61" pos:column="60">courseDept</name> <init pos:line="61" pos:column="71">= <expr><op:operator pos:line="61" pos:column="73">new</op:operator> <call><name pos:line="61" pos:column="77">Department</name><argument_list pos:line="61" pos:column="87">(<argument><expr><name pos:line="61" pos:column="88">deptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="62" pos:column="49">this</name><op:operator pos:line="62" pos:column="53">.</op:operator><name pos:line="62" pos:column="54">department</name></name> <op:operator pos:line="62" pos:column="65">=</op:operator> <name pos:line="62" pos:column="67">courseDept</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="63" pos:column="49">this</name><op:operator pos:line="63" pos:column="53">.</op:operator><name pos:line="63" pos:column="54">courseID</name></name> <op:operator pos:line="63" pos:column="63">=</op:operator> <name pos:line="63" pos:column="65">courseID</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="64" pos:column="49">this</name><op:operator pos:line="64" pos:column="53">.</op:operator><name pos:line="64" pos:column="54">courseName</name></name> <op:operator pos:line="64" pos:column="65">=</op:operator> <name pos:line="64" pos:column="67">courseName</name></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="67" pos:column="41">else<block pos:line="67" pos:column="45">{
						<comment type="block" pos:line="68" pos:column="49">/*
						 * Throw an exception as the course with the id does not exist
						 */</comment>
						<throw pos:line="71" pos:column="49">throw <expr><op:operator pos:line="71" pos:column="55">new</op:operator> <call><name pos:line="71" pos:column="59">CourseDoesNotExistException</name><argument_list pos:line="71" pos:column="86">()</argument_list></call></expr>;</throw>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="76" pos:column="25">catch<parameter_list pos:line="76" pos:column="30">(<param><decl><type><name pos:line="76" pos:column="31">SQLException</name></type> <name pos:line="76" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="76" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">System</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">out</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">println</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="52">"Error retrieving course"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">System</name><op:operator pos:line="78" pos:column="39">.</op:operator><name pos:line="78" pos:column="40">out</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">println</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><call><name><name pos:line="78" pos:column="52">e</name><op:operator pos:line="78" pos:column="53">.</op:operator><name pos:line="78" pos:column="54">getMessage</name></name><argument_list pos:line="78" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="79" pos:column="27">catch <parameter_list pos:line="79" pos:column="33">(<param><decl><type><name><name pos:line="79" pos:column="34">Department</name><op:operator pos:line="79" pos:column="44">.</op:operator><name pos:line="79" pos:column="45">DepartmentDoesNotExistException</name></name></type> <name pos:line="79" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="80">{
				<comment type="line" pos:line="80" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="81" pos:column="33">e</name><op:operator pos:line="81" pos:column="34">.</op:operator><name pos:line="81" pos:column="35">printStackTrace</name></name><argument_list pos:line="81" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			
		}</block>
		
		<finally pos:line="87" pos:column="17">finally<block pos:line="87" pos:column="24">{
		}</block></finally></try>
	}</block></constructor>

	<comment type="block" pos:line="91" pos:column="9">/*
	 * Constructor to initialize a course object using the course name
	 */</comment>
	<constructor><specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">Course</name><parameter_list pos:line="94" pos:column="22">(<param><decl><type><name pos:line="94" pos:column="23">String</name></type> <name pos:line="94" pos:column="30">courseName</name></decl></param>)</parameter_list> <throws pos:line="94" pos:column="42">throws <argument><expr><name pos:line="94" pos:column="49">CourseDoesNotExistException</name></expr></argument></throws><block pos:line="94" pos:column="76">{
		<if pos:line="95" pos:column="17">if<condition pos:line="95" pos:column="19">(<expr><name pos:line="95" pos:column="20">courseName</name> <op:operator pos:line="95" pos:column="31">==</op:operator> <lit:literal type="null" pos:line="95" pos:column="34">null</lit:literal></expr>)</condition><then><block pos:line="95" pos:column="39">{
			<throw pos:line="96" pos:column="25">throw <expr><op:operator pos:line="96" pos:column="31">new</op:operator> <call><name pos:line="96" pos:column="35">CourseDoesNotExistException</name><argument_list pos:line="96" pos:column="62">()</argument_list></call></expr>;</throw>
		}</block></then></if>
		<try pos:line="98" pos:column="17">try<block pos:line="98" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="99" pos:column="25">Connection</name></type> <name pos:line="99" pos:column="36">conn</name> <init pos:line="99" pos:column="41">= <expr><call><name><name pos:line="99" pos:column="43">Database</name><op:operator pos:line="99" pos:column="51">.</op:operator><name pos:line="99" pos:column="52">getConnection</name></name><argument_list pos:line="99" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="101" pos:column="25">try<block pos:line="101" pos:column="28">{
				<if pos:line="102" pos:column="33">if<condition pos:line="102" pos:column="35">(<expr><name pos:line="102" pos:column="36">conn</name> <op:operator pos:line="102" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="102" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="102" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="103" pos:column="41">String</name></type> <name pos:line="103" pos:column="48">SQLSelect</name><init pos:line="103" pos:column="57">= <expr><lit:literal type="string" pos:line="103" pos:column="59">"Select CourseID, CourseName, DepartmentID"</lit:literal>
							<op:operator pos:line="104" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="104" pos:column="59">" FROM courses"</lit:literal>
							<op:operator pos:line="105" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="105" pos:column="59">" WHERE CourseName= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="106" pos:column="41">PreparedStatement</name></type> <name pos:line="106" pos:column="59">statement</name> <init pos:line="106" pos:column="69">= <expr><call><name><name pos:line="106" pos:column="71">conn</name><op:operator pos:line="106" pos:column="75">.</op:operator><name pos:line="106" pos:column="76">prepareStatement</name></name><argument_list pos:line="106" pos:column="92">(<argument><expr><name pos:line="106" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">statement</name><op:operator pos:line="107" pos:column="50">.</op:operator><name pos:line="107" pos:column="51">setString</name></name><argument_list pos:line="107" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="107" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="64">courseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="108" pos:column="41">ResultSet</name></type> <name pos:line="108" pos:column="51">rs</name> <init pos:line="108" pos:column="54">=  <expr><call><name><name pos:line="108" pos:column="57">statement</name><op:operator pos:line="108" pos:column="66">.</op:operator><name pos:line="108" pos:column="67">executeQuery</name></name><argument_list pos:line="108" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="110" pos:column="41">if<condition pos:line="110" pos:column="43">(<expr><call><name><name pos:line="110" pos:column="44">rs</name><op:operator pos:line="110" pos:column="46">.</op:operator><name pos:line="110" pos:column="47">first</name></name><argument_list pos:line="110" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="110" pos:column="55">{
						<comment type="block" pos:line="111" pos:column="49">/*
						 * The object with the CourseName exists
						 * Initialize the instance variables 
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="115" pos:column="49">DBAnnotation</name><op:operator pos:line="115" pos:column="61">.</op:operator><name pos:line="115" pos:column="62">annoate</name></name><argument_list pos:line="115" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="82">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="93">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="115" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="116" pos:column="49">int</name></type> <name pos:line="116" pos:column="53">courseID</name> <init pos:line="116" pos:column="62">= <expr><call><name><name pos:line="116" pos:column="64">rs</name><op:operator pos:line="116" pos:column="66">.</op:operator><name pos:line="116" pos:column="67">getInt</name></name><argument_list pos:line="116" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="74">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="118" pos:column="49">DBAnnotation</name><op:operator pos:line="118" pos:column="61">.</op:operator><name pos:line="118" pos:column="62">annoate</name></name><argument_list pos:line="118" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="70">"cName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="79">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="90">"CourseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="118" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="119" pos:column="49">String</name></type> <name pos:line="119" pos:column="56">cName</name> <init pos:line="119" pos:column="62">= <expr><call><name><name pos:line="119" pos:column="64">rs</name><op:operator pos:line="119" pos:column="66">.</op:operator><name pos:line="119" pos:column="67">getString</name></name><argument_list pos:line="119" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="77">"CourseName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="121" pos:column="49">DBAnnotation</name><op:operator pos:line="121" pos:column="61">.</op:operator><name pos:line="121" pos:column="62">annoate</name></name><argument_list pos:line="121" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="70">"deptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="80">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="91">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="121" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="122" pos:column="49">int</name></type> <name pos:line="122" pos:column="53">deptID</name> <init pos:line="122" pos:column="60">= <expr><call><name><name pos:line="122" pos:column="62">rs</name><op:operator pos:line="122" pos:column="64">.</op:operator><name pos:line="122" pos:column="65">getInt</name></name><argument_list pos:line="122" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="72">"DepartmentID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="123" pos:column="49">Department</name></type> <name pos:line="123" pos:column="60">courseDept</name> <init pos:line="123" pos:column="71">= <expr><op:operator pos:line="123" pos:column="73">new</op:operator> <call><name pos:line="123" pos:column="77">Department</name><argument_list pos:line="123" pos:column="87">(<argument><expr><name pos:line="123" pos:column="88">deptID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><name><name pos:line="125" pos:column="49">this</name><op:operator pos:line="125" pos:column="53">.</op:operator><name pos:line="125" pos:column="54">department</name></name> <op:operator pos:line="125" pos:column="65">=</op:operator> <name pos:line="125" pos:column="67">courseDept</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="126" pos:column="49">this</name><op:operator pos:line="126" pos:column="53">.</op:operator><name pos:line="126" pos:column="54">courseID</name></name> <op:operator pos:line="126" pos:column="63">=</op:operator> <name pos:line="126" pos:column="65">courseID</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="127" pos:column="49">this</name><op:operator pos:line="127" pos:column="53">.</op:operator><name pos:line="127" pos:column="54">courseName</name></name> <op:operator pos:line="127" pos:column="65">=</op:operator> <name pos:line="127" pos:column="67">cName</name></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="130" pos:column="41">else<block pos:line="130" pos:column="45">{
						<comment type="block" pos:line="131" pos:column="49">/*
						 * Throw the exception as course with the course name does not exist
						 */</comment>
						<throw pos:line="134" pos:column="49">throw <expr><op:operator pos:line="134" pos:column="55">new</op:operator> <call><name pos:line="134" pos:column="59">CourseDoesNotExistException</name><argument_list pos:line="134" pos:column="86">()</argument_list></call></expr>;</throw>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="139" pos:column="25">catch<parameter_list pos:line="139" pos:column="30">(<param><decl><type><name pos:line="139" pos:column="31">SQLException</name></type> <name pos:line="139" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="139" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">System</name><op:operator pos:line="140" pos:column="39">.</op:operator><name pos:line="140" pos:column="40">out</name><op:operator pos:line="140" pos:column="43">.</op:operator><name pos:line="140" pos:column="44">println</name></name><argument_list pos:line="140" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="52">"Error getting course"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">System</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">out</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">println</name></name><argument_list pos:line="141" pos:column="51">(<argument><expr><call><name><name pos:line="141" pos:column="52">e</name><op:operator pos:line="141" pos:column="53">.</op:operator><name pos:line="141" pos:column="54">getMessage</name></name><argument_list pos:line="141" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="142" pos:column="27">catch <parameter_list pos:line="142" pos:column="33">(<param><decl><type><name><name pos:line="142" pos:column="34">Department</name><op:operator pos:line="142" pos:column="44">.</op:operator><name pos:line="142" pos:column="45">DepartmentDoesNotExistException</name></name></type> <name pos:line="142" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="142" pos:column="80">{
				<comment type="line" pos:line="143" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="144" pos:column="33">e</name><op:operator pos:line="144" pos:column="34">.</op:operator><name pos:line="144" pos:column="35">printStackTrace</name></name><argument_list pos:line="144" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="149" pos:column="17">finally<block pos:line="149" pos:column="24">{
		}</block></finally></try>
	}</block></constructor>

	
	<comment type="block" pos:line="154" pos:column="9">/*
	 * Getters and Setters************************************************
	 */</comment>
	
	<comment type="block" format="javadoc" pos:line="158" pos:column="9">/**
	 * @return the department
	 */</comment>
	<function><type><specifier pos:line="161" pos:column="9">public</specifier> <name pos:line="161" pos:column="16">Department</name></type> <name pos:line="161" pos:column="27">getDepartment</name><parameter_list pos:line="161" pos:column="40">()</parameter_list> <block pos:line="161" pos:column="43">{
		<return pos:line="162" pos:column="17">return <expr><name pos:line="162" pos:column="24">department</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="165" pos:column="9">/**
	 * @param department the department to set
	 */</comment>
	<function><type><specifier pos:line="168" pos:column="9">public</specifier> <name pos:line="168" pos:column="16">void</name></type> <name pos:line="168" pos:column="21">setDepartment</name><parameter_list pos:line="168" pos:column="34">(<param><decl><type><name pos:line="168" pos:column="35">Department</name></type> <name pos:line="168" pos:column="46">department</name></decl></param>)</parameter_list> <block pos:line="168" pos:column="58">{
		<expr_stmt><expr><name><name pos:line="169" pos:column="17">this</name><op:operator pos:line="169" pos:column="21">.</op:operator><name pos:line="169" pos:column="22">department</name></name> <op:operator pos:line="169" pos:column="33">=</op:operator> <name pos:line="169" pos:column="35">department</name></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="172" pos:column="9">/**
	 * @return the courseID
	 */</comment>
	<function><type><specifier pos:line="175" pos:column="9">public</specifier> <name pos:line="175" pos:column="16">int</name></type> <name pos:line="175" pos:column="20">getCourseID</name><parameter_list pos:line="175" pos:column="31">()</parameter_list> <block pos:line="175" pos:column="34">{
		<return pos:line="176" pos:column="17">return <expr><name pos:line="176" pos:column="24">courseID</name></expr>;</return>
	}</block></function>
		
	<comment type="block" format="javadoc" pos:line="179" pos:column="9">/**
	 * @return the courseName
	 */</comment>
	<function><type><specifier pos:line="182" pos:column="9">public</specifier> <name pos:line="182" pos:column="16">String</name></type> <name pos:line="182" pos:column="23">getCourseName</name><parameter_list pos:line="182" pos:column="36">()</parameter_list> <block pos:line="182" pos:column="39">{
		<return pos:line="183" pos:column="17">return <expr><name pos:line="183" pos:column="24">courseName</name></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc" pos:line="186" pos:column="9">/**
	 * @param courseName the courseName to set
	 */</comment>
	<function><type><specifier pos:line="189" pos:column="9">public</specifier> <name pos:line="189" pos:column="16">void</name></type> <name pos:line="189" pos:column="21">setCourseName</name><parameter_list pos:line="189" pos:column="34">(<param><decl><type><name pos:line="189" pos:column="35">String</name></type> <name pos:line="189" pos:column="42">courseName</name></decl></param>)</parameter_list> <block pos:line="189" pos:column="54">{
		<expr_stmt><expr><name><name pos:line="190" pos:column="17">this</name><op:operator pos:line="190" pos:column="21">.</op:operator><name pos:line="190" pos:column="22">courseName</name></name> <op:operator pos:line="190" pos:column="33">=</op:operator> <name pos:line="190" pos:column="35">courseName</name></expr>;</expr_stmt>
	}</block></function>
	
	

	<comment type="block" pos:line="195" pos:column="9">/*
	 * Add a course to the database using a course name and a department object
	 */</comment>
	<function><type><specifier pos:line="198" pos:column="9">public</specifier> <specifier pos:line="198" pos:column="16">static</specifier> <name pos:line="198" pos:column="23">boolean</name></type> <name pos:line="198" pos:column="31">addCourse</name><parameter_list pos:line="198" pos:column="40">(<param><decl><type><name pos:line="198" pos:column="41">String</name></type> <name pos:line="198" pos:column="48">courseName</name></decl></param>, <param><decl><type><name pos:line="198" pos:column="60">Department</name></type> <name pos:line="198" pos:column="71">department</name></decl></param>)</parameter_list> <throws pos:line="198" pos:column="83">throws <argument><expr><name pos:line="198" pos:column="90">CourseAlreadyExistsException</name></expr></argument></throws><block pos:line="198" pos:column="118">{
		<decl_stmt><decl><type><name pos:line="199" pos:column="17">boolean</name></type> <name pos:line="199" pos:column="25">isAdded</name> <init pos:line="199" pos:column="33">= <expr><lit:literal type="boolean" pos:line="199" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="201" pos:column="17">if<condition pos:line="201" pos:column="19">(<expr><name pos:line="201" pos:column="20">department</name> <op:operator pos:line="201" pos:column="31">==</op:operator> <lit:literal type="null" pos:line="201" pos:column="34">null</lit:literal> <op:operator pos:line="201" pos:column="39">||</op:operator> <call><name><name pos:line="201" pos:column="42">courseName</name><op:operator pos:line="201" pos:column="52">.</op:operator><name pos:line="201" pos:column="53">length</name></name><argument_list pos:line="201" pos:column="59">()</argument_list></call><op:operator pos:line="201" pos:column="61">&lt;</op:operator><lit:literal type="number" pos:line="201" pos:column="62">1</lit:literal> <op:operator pos:line="201" pos:column="64">||</op:operator> <name pos:line="201" pos:column="67">courseName</name> <op:operator pos:line="201" pos:column="78">==</op:operator> <lit:literal type="null" pos:line="201" pos:column="81">null</lit:literal></expr>)</condition><then pos:line="201" pos:column="86">
			<return pos:line="202" pos:column="25">return <expr><name pos:line="202" pos:column="32">isAdded</name></expr>;</return></then></if>
		
		<comment type="block" pos:line="204" pos:column="17">/*
		 * Check if the course with the same name exists
		 * If yes, then throw Course already exists exception
		 */</comment>
		<if pos:line="208" pos:column="17">if<condition pos:line="208" pos:column="19">(<expr><call><name pos:line="208" pos:column="20">isExists</name><argument_list pos:line="208" pos:column="28">(<argument><expr><name pos:line="208" pos:column="29">courseName</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="41">department</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="208" pos:column="53">
			<throw pos:line="209" pos:column="25">throw <expr><op:operator pos:line="209" pos:column="31">new</op:operator> <call><name pos:line="209" pos:column="35">CourseAlreadyExistsException</name><argument_list pos:line="209" pos:column="63">()</argument_list></call></expr>;</throw></then></if>
		
		<try pos:line="211" pos:column="17">try<block pos:line="211" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="212" pos:column="25">Connection</name></type> <name pos:line="212" pos:column="36">conn</name> <init pos:line="212" pos:column="41">= <expr><call><name><name pos:line="212" pos:column="43">Database</name><op:operator pos:line="212" pos:column="51">.</op:operator><name pos:line="212" pos:column="52">getConnection</name></name><argument_list pos:line="212" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="214" pos:column="25">try<block pos:line="214" pos:column="28">{
				<if pos:line="215" pos:column="33">if<condition pos:line="215" pos:column="35">(<expr><name pos:line="215" pos:column="36">conn</name> <op:operator pos:line="215" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="215" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="215" pos:column="49">{
					<comment type="block" pos:line="216" pos:column="41">/*
					 * Add the course data to the course table
					 */</comment>
					<comment type="block" pos:line="219" pos:column="41">/*
					 * Annotations for the insert query used here
					 */</comment>
					<expr_stmt><expr><call><name><name pos:line="222" pos:column="41">DBAnnotation</name><op:operator pos:line="222" pos:column="53">.</op:operator><name pos:line="222" pos:column="54">annoate</name></name><argument_list pos:line="222" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="62">"courseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="76">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="87">"CourseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="222" pos:column="101">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="223" pos:column="41">DBAnnotation</name><op:operator pos:line="223" pos:column="53">.</op:operator><name pos:line="223" pos:column="54">annoate</name></name><argument_list pos:line="223" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="62">"deptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="72">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="223" pos:column="83">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="223" pos:column="99">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="225" pos:column="41">int</name></type> <name pos:line="225" pos:column="45">deptID</name> <init pos:line="225" pos:column="52">= <expr><call><name><name pos:line="225" pos:column="54">department</name><op:operator pos:line="225" pos:column="64">.</op:operator><name pos:line="225" pos:column="65">getDepartmentID</name></name><argument_list pos:line="225" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="226" pos:column="41">String</name></type> <name pos:line="226" pos:column="48">SQLInsert</name><init pos:line="226" pos:column="57">= <expr><lit:literal type="string" pos:line="226" pos:column="59">"Insert into courses (CourseName, DepartmentID) Values (?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="227" pos:column="41">PreparedStatement</name></type> <name pos:line="227" pos:column="59">statement</name></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="228" pos:column="41">statement</name> <op:operator pos:line="228" pos:column="51">=</op:operator> <call><name><name pos:line="228" pos:column="53">conn</name><op:operator pos:line="228" pos:column="57">.</op:operator><name pos:line="228" pos:column="58">prepareStatement</name></name><argument_list pos:line="228" pos:column="74">(<argument><expr><name pos:line="228" pos:column="75">SQLInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="229" pos:column="41">statement</name><op:operator pos:line="229" pos:column="50">.</op:operator><name pos:line="229" pos:column="51">setString</name></name><argument_list pos:line="229" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="229" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="229" pos:column="64">courseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="230" pos:column="41">statement</name><op:operator pos:line="230" pos:column="50">.</op:operator><name pos:line="230" pos:column="51">setInt</name></name><argument_list pos:line="230" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="230" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="61">deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>					
					<expr_stmt><expr><call><name><name pos:line="231" pos:column="41">statement</name><op:operator pos:line="231" pos:column="50">.</op:operator><name pos:line="231" pos:column="51">execute</name></name><argument_list pos:line="231" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="232" pos:column="41">Database</name><op:operator pos:line="232" pos:column="49">.</op:operator><name pos:line="232" pos:column="50">commitTransaction</name></name><argument_list pos:line="232" pos:column="67">(<argument><expr><name pos:line="232" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="233" pos:column="41">isAdded</name> <op:operator pos:line="233" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="233" pos:column="51">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch pos:line="237" pos:column="25">catch<parameter_list pos:line="237" pos:column="30">(<param><decl><type><name pos:line="237" pos:column="31">SQLException</name></type> <name pos:line="237" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="237" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="238" pos:column="33">System</name><op:operator pos:line="238" pos:column="39">.</op:operator><name pos:line="238" pos:column="40">out</name><op:operator pos:line="238" pos:column="43">.</op:operator><name pos:line="238" pos:column="44">println</name></name><argument_list pos:line="238" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="52">"Error adding course to the table, check your sql query"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="239" pos:column="33">System</name><op:operator pos:line="239" pos:column="39">.</op:operator><name pos:line="239" pos:column="40">out</name><op:operator pos:line="239" pos:column="43">.</op:operator><name pos:line="239" pos:column="44">println</name></name><argument_list pos:line="239" pos:column="51">(<argument><expr><call><name><name pos:line="239" pos:column="52">e</name><op:operator pos:line="239" pos:column="53">.</op:operator><name pos:line="239" pos:column="54">getMessage</name></name><argument_list pos:line="239" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="244" pos:column="17">finally<block pos:line="244" pos:column="24">{
		}</block></finally></try>
		
		<comment type="block" pos:line="247" pos:column="17">/*
		 * returns if the course was successfully added to the database table
		 */</comment>
		<return pos:line="250" pos:column="17">return <expr><name pos:line="250" pos:column="24">isAdded</name></expr>;</return> 
	}</block></function>

	<comment type="block" pos:line="253" pos:column="9">/*
	 * Update the course to the specified department
	 */</comment>
	<function><type><specifier pos:line="256" pos:column="9">public</specifier> <name pos:line="256" pos:column="16">boolean</name></type> <name pos:line="256" pos:column="24">updateCourse</name><parameter_list pos:line="256" pos:column="36">(<param><decl><type><name pos:line="256" pos:column="37">String</name></type> <name pos:line="256" pos:column="44">courseName</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="56">Department</name></type> <name pos:line="256" pos:column="67">department</name></decl></param>)</parameter_list><block pos:line="256" pos:column="78">{
		<decl_stmt><decl><type><name pos:line="257" pos:column="17">boolean</name></type> <name pos:line="257" pos:column="25">isUpdated</name> <init pos:line="257" pos:column="35">= <expr><lit:literal type="boolean" pos:line="257" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<if pos:line="259" pos:column="17">if<condition pos:line="259" pos:column="19">(<expr><name pos:line="259" pos:column="20">department</name> <op:operator pos:line="259" pos:column="31">==</op:operator> <lit:literal type="null" pos:line="259" pos:column="34">null</lit:literal> <op:operator pos:line="259" pos:column="39">||</op:operator> <call><name><name pos:line="259" pos:column="42">courseName</name><op:operator pos:line="259" pos:column="52">.</op:operator><name pos:line="259" pos:column="53">length</name></name><argument_list pos:line="259" pos:column="59">()</argument_list></call><op:operator pos:line="259" pos:column="61">&lt;</op:operator><lit:literal type="number" pos:line="259" pos:column="62">1</lit:literal> <op:operator pos:line="259" pos:column="64">||</op:operator> <name pos:line="259" pos:column="67">courseName</name> <op:operator pos:line="259" pos:column="78">==</op:operator> <lit:literal type="null" pos:line="259" pos:column="81">null</lit:literal></expr>)</condition><then pos:line="259" pos:column="86">
			<return pos:line="260" pos:column="25">return <expr><name pos:line="260" pos:column="32">isUpdated</name></expr>;</return></then></if>
		
		<if pos:line="262" pos:column="17">if<condition pos:line="262" pos:column="19">(<expr><call><name pos:line="262" pos:column="20">isExists</name><argument_list pos:line="262" pos:column="28">(<argument><expr><name pos:line="262" pos:column="29">courseName</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="41">department</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="53">
			<return pos:line="263" pos:column="25">return <expr><name pos:line="263" pos:column="32">isUpdated</name></expr>;</return></then></if>
		
		<try pos:line="265" pos:column="17">try<block pos:line="265" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="266" pos:column="25">Connection</name></type> <name pos:line="266" pos:column="36">conn</name> <init pos:line="266" pos:column="41">= <expr><call><name><name pos:line="266" pos:column="43">Database</name><op:operator pos:line="266" pos:column="51">.</op:operator><name pos:line="266" pos:column="52">getConnection</name></name><argument_list pos:line="266" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="268" pos:column="25">try<block pos:line="268" pos:column="28">{
				<if pos:line="269" pos:column="33">if<condition pos:line="269" pos:column="35">(<expr><name pos:line="269" pos:column="36">conn</name> <op:operator pos:line="269" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="269" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="269" pos:column="49">{
					<comment type="block" pos:line="270" pos:column="41">/*
					 * add the data to the course table
					 */</comment>
					<comment type="block" pos:line="273" pos:column="41">/*
					 * Annotations for the update query used here
					 */</comment>
					<expr_stmt><expr><call><name><name pos:line="276" pos:column="41">DBAnnotation</name><op:operator pos:line="276" pos:column="53">.</op:operator><name pos:line="276" pos:column="54">annoate</name></name><argument_list pos:line="276" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="62">"courseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="76">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="87">"CourseName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="276" pos:column="101">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="277" pos:column="41">DBAnnotation</name><op:operator pos:line="277" pos:column="53">.</op:operator><name pos:line="277" pos:column="54">annoate</name></name><argument_list pos:line="277" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="277" pos:column="62">"deptID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="72">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="83">"DepartmentID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="277" pos:column="99">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="278" pos:column="41">DBAnnotation</name><op:operator pos:line="278" pos:column="53">.</op:operator><name pos:line="278" pos:column="54">annoate</name></name><argument_list pos:line="278" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="62">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="74">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="85">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="278" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<decl_stmt><decl><type><name pos:line="280" pos:column="41">int</name></type> <name pos:line="280" pos:column="45">deptID</name> <init pos:line="280" pos:column="52">= <expr><call><name><name pos:line="280" pos:column="54">department</name><op:operator pos:line="280" pos:column="64">.</op:operator><name pos:line="280" pos:column="65">getDepartmentID</name></name><argument_list pos:line="280" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="281" pos:column="41">int</name></type> <name pos:line="281" pos:column="45">courseID</name> <init pos:line="281" pos:column="54">= <expr><call><name><name pos:line="281" pos:column="56">this</name><op:operator pos:line="281" pos:column="60">.</op:operator><name pos:line="281" pos:column="61">getCourseID</name></name><argument_list pos:line="281" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="282" pos:column="41">System</name><op:operator pos:line="282" pos:column="47">.</op:operator><name pos:line="282" pos:column="48">out</name><op:operator pos:line="282" pos:column="51">.</op:operator><name pos:line="282" pos:column="52">println</name></name><argument_list pos:line="282" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="60">"Updating course"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="283" pos:column="41">String</name></type> <name pos:line="283" pos:column="48">SQLupdate</name><init pos:line="283" pos:column="57">= <expr><lit:literal type="string" pos:line="283" pos:column="59">"UPDATE courses "</lit:literal>
							<op:operator pos:line="284" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="284" pos:column="59">"SET CourseName= ?, DepartmentID= ? "</lit:literal>
							<op:operator pos:line="285" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="285" pos:column="59">"WHERE CourseID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="286" pos:column="41">PreparedStatement</name></type> <name pos:line="286" pos:column="59">statement</name></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="287" pos:column="41">statement</name> <op:operator pos:line="287" pos:column="51">=</op:operator> <call><name><name pos:line="287" pos:column="53">conn</name><op:operator pos:line="287" pos:column="57">.</op:operator><name pos:line="287" pos:column="58">prepareStatement</name></name><argument_list pos:line="287" pos:column="74">(<argument><expr><name pos:line="287" pos:column="75">SQLupdate</name></expr></argument>, <argument><expr><name><name pos:line="287" pos:column="86">ResultSet</name><op:operator pos:line="287" pos:column="95">.</op:operator><name pos:line="287" pos:column="96">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="288" pos:column="41">statement</name><op:operator pos:line="288" pos:column="50">.</op:operator><name pos:line="288" pos:column="51">setString</name></name><argument_list pos:line="288" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="288" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="288" pos:column="64">courseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="289" pos:column="41">statement</name><op:operator pos:line="289" pos:column="50">.</op:operator><name pos:line="289" pos:column="51">setInt</name></name><argument_list pos:line="289" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="289" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="289" pos:column="61">deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="290" pos:column="41">statement</name><op:operator pos:line="290" pos:column="50">.</op:operator><name pos:line="290" pos:column="51">setInt</name></name><argument_list pos:line="290" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="290" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="61">courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="291" pos:column="41">statement</name><op:operator pos:line="291" pos:column="50">.</op:operator><name pos:line="291" pos:column="51">executeUpdate</name></name><argument_list pos:line="291" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="292" pos:column="41">this</name><op:operator pos:line="292" pos:column="45">.</op:operator><name pos:line="292" pos:column="46">courseName</name></name> <op:operator pos:line="292" pos:column="57">=</op:operator> <name pos:line="292" pos:column="59">courseName</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="293" pos:column="41">this</name><op:operator pos:line="293" pos:column="45">.</op:operator><name pos:line="293" pos:column="46">department</name></name> <op:operator pos:line="293" pos:column="57">=</op:operator> <name pos:line="293" pos:column="59">department</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="294" pos:column="41">Database</name><op:operator pos:line="294" pos:column="49">.</op:operator><name pos:line="294" pos:column="50">commitTransaction</name></name><argument_list pos:line="294" pos:column="67">(<argument><expr><name pos:line="294" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="295" pos:column="41">isUpdated</name> <op:operator pos:line="295" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="295" pos:column="53">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block>
			
			<catch pos:line="299" pos:column="25">catch<parameter_list pos:line="299" pos:column="30">(<param><decl><type><name pos:line="299" pos:column="31">SQLException</name></type> <name pos:line="299" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="299" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="300" pos:column="33">System</name><op:operator pos:line="300" pos:column="39">.</op:operator><name pos:line="300" pos:column="40">out</name><op:operator pos:line="300" pos:column="43">.</op:operator><name pos:line="300" pos:column="44">println</name></name><argument_list pos:line="300" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="52">"Error updating"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="301" pos:column="33">System</name><op:operator pos:line="301" pos:column="39">.</op:operator><name pos:line="301" pos:column="40">out</name><op:operator pos:line="301" pos:column="43">.</op:operator><name pos:line="301" pos:column="44">println</name></name><argument_list pos:line="301" pos:column="51">(<argument><expr><call><name><name pos:line="301" pos:column="52">e</name><op:operator pos:line="301" pos:column="53">.</op:operator><name pos:line="301" pos:column="54">getMessage</name></name><argument_list pos:line="301" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="302" pos:column="33">e</name><op:operator pos:line="302" pos:column="34">.</op:operator><name pos:line="302" pos:column="35">printStackTrace</name></name><argument_list pos:line="302" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
						
		}</block>
		
		<finally pos:line="307" pos:column="17">finally<block pos:line="307" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="310" pos:column="17">return <expr><name pos:line="310" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="314" pos:column="9">/*
	 * Checks if the specified course exists in the specified department
	 */</comment>
	<function><type><specifier pos:line="317" pos:column="9">private</specifier> <specifier pos:line="317" pos:column="17">static</specifier> <name pos:line="317" pos:column="24">boolean</name></type> <name pos:line="317" pos:column="32">isExists</name><parameter_list pos:line="317" pos:column="40">(<param><decl><type><name pos:line="317" pos:column="41">String</name></type> <name pos:line="317" pos:column="48">courseName</name></decl></param>, <param><decl><type><name pos:line="317" pos:column="60">Department</name></type> <name pos:line="317" pos:column="71">department</name></decl></param>)</parameter_list><block pos:line="317" pos:column="82">{
		<decl_stmt><decl><type><name pos:line="318" pos:column="17">boolean</name></type> <name pos:line="318" pos:column="25">isExists</name> <init pos:line="318" pos:column="34">= <expr><lit:literal type="boolean" pos:line="318" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="319" pos:column="17">int</name></type> <name pos:line="319" pos:column="21">deptID</name> <init pos:line="319" pos:column="28">= <expr><call><name><name pos:line="319" pos:column="30">department</name><op:operator pos:line="319" pos:column="40">.</op:operator><name pos:line="319" pos:column="41">getDepartmentID</name></name><argument_list pos:line="319" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="320" pos:column="17">try<block pos:line="320" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="321" pos:column="25">Connection</name></type> <name pos:line="321" pos:column="36">conn</name> <init pos:line="321" pos:column="41">= <expr><call><name><name pos:line="321" pos:column="43">Database</name><op:operator pos:line="321" pos:column="51">.</op:operator><name pos:line="321" pos:column="52">getConnection</name></name><argument_list pos:line="321" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="323" pos:column="25">try<block pos:line="323" pos:column="28">{
				<if pos:line="324" pos:column="33">if<condition pos:line="324" pos:column="35">(<expr><name pos:line="324" pos:column="36">conn</name> <op:operator pos:line="324" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="324" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="324" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="326" pos:column="41">String</name></type> <name pos:line="326" pos:column="48">SQLSelect</name><init pos:line="326" pos:column="57">= <expr><lit:literal type="string" pos:line="326" pos:column="59">"Select CourseID, CourseName, DepartmentID"</lit:literal>
							<op:operator pos:line="327" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="327" pos:column="59">" FROM courses"</lit:literal>
							<op:operator pos:line="328" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="328" pos:column="59">" WHERE CourseName= ? and DepartmentID=?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="329" pos:column="41">PreparedStatement</name></type> <name pos:line="329" pos:column="59">statement</name> <init pos:line="329" pos:column="69">= <expr><call><name><name pos:line="329" pos:column="71">conn</name><op:operator pos:line="329" pos:column="75">.</op:operator><name pos:line="329" pos:column="76">prepareStatement</name></name><argument_list pos:line="329" pos:column="92">(<argument><expr><name pos:line="329" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="330" pos:column="41">statement</name><op:operator pos:line="330" pos:column="50">.</op:operator><name pos:line="330" pos:column="51">setString</name></name><argument_list pos:line="330" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="330" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="330" pos:column="64">courseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="331" pos:column="41">statement</name><op:operator pos:line="331" pos:column="50">.</op:operator><name pos:line="331" pos:column="51">setInt</name></name><argument_list pos:line="331" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="331" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="331" pos:column="61">deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="332" pos:column="41">ResultSet</name></type> <name pos:line="332" pos:column="51">rs</name> <init pos:line="332" pos:column="54">=  <expr><call><name><name pos:line="332" pos:column="57">statement</name><op:operator pos:line="332" pos:column="66">.</op:operator><name pos:line="332" pos:column="67">executeQuery</name></name><argument_list pos:line="332" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="334" pos:column="41">if<condition pos:line="334" pos:column="43">(<expr><call><name><name pos:line="334" pos:column="44">rs</name><op:operator pos:line="334" pos:column="46">.</op:operator><name pos:line="334" pos:column="47">first</name></name><argument_list pos:line="334" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="334" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="335" pos:column="49">System</name><op:operator pos:line="335" pos:column="55">.</op:operator><name pos:line="335" pos:column="56">out</name><op:operator pos:line="335" pos:column="59">.</op:operator><name pos:line="335" pos:column="60">println</name></name><argument_list pos:line="335" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="335" pos:column="68">"Course Already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="336" pos:column="49">isExists</name> <op:operator pos:line="336" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="336" pos:column="60">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="341" pos:column="25">catch<parameter_list pos:line="341" pos:column="30">(<param><decl><type><name pos:line="341" pos:column="31">SQLException</name></type> <name pos:line="341" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="341" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">System</name><op:operator pos:line="342" pos:column="39">.</op:operator><name pos:line="342" pos:column="40">out</name><op:operator pos:line="342" pos:column="43">.</op:operator><name pos:line="342" pos:column="44">println</name></name><argument_list pos:line="342" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="342" pos:column="52">"Error retrieving"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="343" pos:column="33">System</name><op:operator pos:line="343" pos:column="39">.</op:operator><name pos:line="343" pos:column="40">out</name><op:operator pos:line="343" pos:column="43">.</op:operator><name pos:line="343" pos:column="44">println</name></name><argument_list pos:line="343" pos:column="51">(<argument><expr><call><name><name pos:line="343" pos:column="52">e</name><op:operator pos:line="343" pos:column="53">.</op:operator><name pos:line="343" pos:column="54">getMessage</name></name><argument_list pos:line="343" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="347" pos:column="17">finally<block pos:line="347" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="350" pos:column="17">return <expr><name pos:line="350" pos:column="24">isExists</name></expr>;</return>
	}</block></function>
	
	<function><type><annotation pos:line="353" pos:column="9">@<name pos:line="353" pos:column="10">SuppressWarnings</name><argument_list pos:line="353" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="353" pos:column="27">"unused"</lit:literal></expr></argument>)</argument_list></annotation>
	<specifier pos:line="354" pos:column="9">private</specifier> <specifier pos:line="354" pos:column="17">static</specifier> <name pos:line="354" pos:column="24">void</name></type> <name pos:line="354" pos:column="29">removeCourse</name><parameter_list pos:line="354" pos:column="41">(<param><decl><type><name pos:line="354" pos:column="42">int</name></type> <name pos:line="354" pos:column="46">courseID</name></decl></param>)</parameter_list><block pos:line="354" pos:column="55">{
		<comment type="line" pos:line="355" pos:column="17">//check if the course to be removed exists</comment>
		<comment type="line" pos:line="356" pos:column="17">//Remove the courses-offered related to this course</comment>
		<try pos:line="357" pos:column="17">try<block pos:line="357" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="358" pos:column="25">Connection</name></type> <name pos:line="358" pos:column="36">conn</name> <init pos:line="358" pos:column="41">= <expr><call><name><name pos:line="358" pos:column="43">Database</name><op:operator pos:line="358" pos:column="51">.</op:operator><name pos:line="358" pos:column="52">getConnection</name></name><argument_list pos:line="358" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="360" pos:column="25">try<block pos:line="360" pos:column="28">{
				<if pos:line="361" pos:column="33">if<condition pos:line="361" pos:column="35">(<expr><name pos:line="361" pos:column="36">conn</name> <op:operator pos:line="361" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="361" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="361" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="363" pos:column="41">String</name></type> <name pos:line="363" pos:column="48">SQLSelect</name><init pos:line="363" pos:column="57">= <expr><lit:literal type="string" pos:line="363" pos:column="59">"Select CourseID, CourseName, DepartmentID"</lit:literal>
							<op:operator pos:line="364" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="364" pos:column="59">" FROM courses"</lit:literal>
							<op:operator pos:line="365" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="365" pos:column="59">" WHERE CourseID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="366" pos:column="41">PreparedStatement</name></type> <name pos:line="366" pos:column="59">statement</name> <init pos:line="366" pos:column="69">= <expr><call><name><name pos:line="366" pos:column="71">conn</name><op:operator pos:line="366" pos:column="75">.</op:operator><name pos:line="366" pos:column="76">prepareStatement</name></name><argument_list pos:line="366" pos:column="92">(<argument><expr><name pos:line="366" pos:column="93">SQLSelect</name></expr></argument>,<argument><expr><name><name pos:line="366" pos:column="103">ResultSet</name><op:operator pos:line="366" pos:column="112">.</op:operator><name pos:line="366" pos:column="113">TYPE_SCROLL_SENSITIVE</name></name></expr></argument>, <argument><expr><name><name pos:line="366" pos:column="136">ResultSet</name><op:operator pos:line="366" pos:column="145">.</op:operator><name pos:line="366" pos:column="146">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="367" pos:column="41">statement</name><op:operator pos:line="367" pos:column="50">.</op:operator><name pos:line="367" pos:column="51">setInt</name></name><argument_list pos:line="367" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="367" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="367" pos:column="61">courseID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="368" pos:column="41">ResultSet</name></type> <name pos:line="368" pos:column="51">rs</name> <init pos:line="368" pos:column="54">=  <expr><call><name><name pos:line="368" pos:column="57">statement</name><op:operator pos:line="368" pos:column="66">.</op:operator><name pos:line="368" pos:column="67">executeQuery</name></name><argument_list pos:line="368" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="370" pos:column="41">if<condition pos:line="370" pos:column="43">(<expr><call><name><name pos:line="370" pos:column="44">rs</name><op:operator pos:line="370" pos:column="46">.</op:operator><name pos:line="370" pos:column="47">first</name></name><argument_list pos:line="370" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="370" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="371" pos:column="49">System</name><op:operator pos:line="371" pos:column="55">.</op:operator><name pos:line="371" pos:column="56">out</name><op:operator pos:line="371" pos:column="59">.</op:operator><name pos:line="371" pos:column="60">println</name></name><argument_list pos:line="371" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="371" pos:column="68">"Deleting course:"</lit:literal><op:operator pos:line="371" pos:column="86">+</op:operator><call><name><name pos:line="371" pos:column="87">rs</name><op:operator pos:line="371" pos:column="89">.</op:operator><name pos:line="371" pos:column="90">getString</name></name><argument_list pos:line="371" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="371" pos:column="100">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="372" pos:column="49">rs</name><op:operator pos:line="372" pos:column="51">.</op:operator><name pos:line="372" pos:column="52">deleteRow</name></name><argument_list pos:line="372" pos:column="61">()</argument_list></call></expr>;</expr_stmt>						
					}</block></then>
					
					<else pos:line="375" pos:column="41">else<block pos:line="375" pos:column="45">{
						<comment type="line" pos:line="376" pos:column="49">//Course not in table</comment>
						<expr_stmt><expr><call><name><name pos:line="377" pos:column="49">System</name><op:operator pos:line="377" pos:column="55">.</op:operator><name pos:line="377" pos:column="56">out</name><op:operator pos:line="377" pos:column="59">.</op:operator><name pos:line="377" pos:column="60">println</name></name><argument_list pos:line="377" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="377" pos:column="68">"Course does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="383" pos:column="25">catch<parameter_list pos:line="383" pos:column="30">(<param><decl><type><name pos:line="383" pos:column="31">SQLException</name></type> <name pos:line="383" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="383" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="384" pos:column="33">System</name><op:operator pos:line="384" pos:column="39">.</op:operator><name pos:line="384" pos:column="40">out</name><op:operator pos:line="384" pos:column="43">.</op:operator><name pos:line="384" pos:column="44">println</name></name><argument_list pos:line="384" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="384" pos:column="52">"Error updating/adding"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="385" pos:column="33">System</name><op:operator pos:line="385" pos:column="39">.</op:operator><name pos:line="385" pos:column="40">out</name><op:operator pos:line="385" pos:column="43">.</op:operator><name pos:line="385" pos:column="44">println</name></name><argument_list pos:line="385" pos:column="51">(<argument><expr><call><name><name pos:line="385" pos:column="52">e</name><op:operator pos:line="385" pos:column="53">.</op:operator><name pos:line="385" pos:column="54">getMessage</name></name><argument_list pos:line="385" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<finally pos:line="388" pos:column="25">finally<block pos:line="388" pos:column="32">{
				<comment type="line" pos:line="389" pos:column="33">//Database.closeConnection(conn);</comment>
			}</block></finally></try>
			
		}</block>
		
		<finally pos:line="394" pos:column="17">finally<block pos:line="394" pos:column="24">{
		}</block></finally></try>
		
	}</block></function>
	
	<comment type="block" pos:line="399" pos:column="9">/*
	 * Returns a Map of all the courses with their course ids as keys for the map
	 */</comment>
	<function><type><specifier pos:line="402" pos:column="9">public</specifier> <specifier pos:line="402" pos:column="16">static</specifier> <name><name pos:line="402" pos:column="23">LinkedHashMap</name><argument_list pos:line="402" pos:column="36">&lt;<argument><name pos:line="402" pos:column="37">Integer</name></argument>,<argument><name pos:line="402" pos:column="45">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="402" pos:column="53">getAllCourses</name><parameter_list pos:line="402" pos:column="66">()</parameter_list><block pos:line="402" pos:column="68">{
		<decl_stmt><decl><type><name><name pos:line="403" pos:column="17">LinkedHashMap</name><argument_list pos:line="403" pos:column="30">&lt;<argument><name pos:line="403" pos:column="31">Integer</name></argument>,<argument><name pos:line="403" pos:column="39">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="403" pos:column="47">courses</name> <init pos:line="403" pos:column="55">= <expr><op:operator pos:line="403" pos:column="57">new</op:operator> <call><name><name pos:line="403" pos:column="61">LinkedHashMap</name><argument_list pos:line="403" pos:column="74">&lt;<argument><name pos:line="403" pos:column="75">Integer</name></argument>,<argument><name pos:line="403" pos:column="83">Course</name></argument>&gt;</argument_list></name><argument_list pos:line="403" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="404" pos:column="17">try<block pos:line="404" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="405" pos:column="25">Connection</name></type> <name pos:line="405" pos:column="36">conn</name> <init pos:line="405" pos:column="41">= <expr><call><name><name pos:line="405" pos:column="43">Database</name><op:operator pos:line="405" pos:column="51">.</op:operator><name pos:line="405" pos:column="52">getConnection</name></name><argument_list pos:line="405" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="407" pos:column="25">try<block pos:line="407" pos:column="28">{
				<if pos:line="408" pos:column="33">if<condition pos:line="408" pos:column="35">(<expr><name pos:line="408" pos:column="36">conn</name> <op:operator pos:line="408" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="408" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="408" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="410" pos:column="41">String</name></type> <name pos:line="410" pos:column="48">SQLSelect</name><init pos:line="410" pos:column="57">= <expr><lit:literal type="string" pos:line="410" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="411" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="411" pos:column="59">" FROM courses"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="412" pos:column="41">PreparedStatement</name></type> <name pos:line="412" pos:column="59">statement</name> <init pos:line="412" pos:column="69">= <expr><call><name><name pos:line="412" pos:column="71">conn</name><op:operator pos:line="412" pos:column="75">.</op:operator><name pos:line="412" pos:column="76">prepareStatement</name></name><argument_list pos:line="412" pos:column="92">(<argument><expr><name pos:line="412" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="413" pos:column="41">ResultSet</name></type> <name pos:line="413" pos:column="51">rs</name> <init pos:line="413" pos:column="54">=  <expr><call><name><name pos:line="413" pos:column="57">statement</name><op:operator pos:line="413" pos:column="66">.</op:operator><name pos:line="413" pos:column="67">executeQuery</name></name><argument_list pos:line="413" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="415" pos:column="41">while<condition pos:line="415" pos:column="46">(<expr><call><name><name pos:line="415" pos:column="47">rs</name><op:operator pos:line="415" pos:column="49">.</op:operator><name pos:line="415" pos:column="50">next</name></name><argument_list pos:line="415" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="415" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="416" pos:column="49">DBAnnotation</name><op:operator pos:line="416" pos:column="61">.</op:operator><name pos:line="416" pos:column="62">annoate</name></name><argument_list pos:line="416" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="416" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="416" pos:column="82">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="416" pos:column="93">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="416" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="417" pos:column="49">int</name></type> <name pos:line="417" pos:column="53">courseID</name> <init pos:line="417" pos:column="62">= <expr><call><name><name pos:line="417" pos:column="64">rs</name><op:operator pos:line="417" pos:column="66">.</op:operator><name pos:line="417" pos:column="67">getInt</name></name><argument_list pos:line="417" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="417" pos:column="74">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="418" pos:column="49">Course</name></type> <name pos:line="418" pos:column="56">c</name> <init pos:line="418" pos:column="58">= <expr><op:operator pos:line="418" pos:column="60">new</op:operator> <call><name pos:line="418" pos:column="64">Course</name><argument_list pos:line="418" pos:column="70">(<argument><expr><name pos:line="418" pos:column="71">courseID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="420" pos:column="49">DBAnnotation</name><op:operator pos:line="420" pos:column="61">.</op:operator><name pos:line="420" pos:column="62">annoate</name></name><argument_list pos:line="420" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="420" pos:column="70">"cID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="420" pos:column="77">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="420" pos:column="88">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="420" pos:column="100">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="421" pos:column="49">int</name></type> <name pos:line="421" pos:column="53">cID</name> <init pos:line="421" pos:column="57">= <expr><call><name><name pos:line="421" pos:column="59">c</name><op:operator pos:line="421" pos:column="60">.</op:operator><name pos:line="421" pos:column="61">getCourseID</name></name><argument_list pos:line="421" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="422" pos:column="49">courses</name><op:operator pos:line="422" pos:column="56">.</op:operator><name pos:line="422" pos:column="57">put</name></name><argument_list pos:line="422" pos:column="60">(<argument><expr><name pos:line="422" pos:column="61">cID</name></expr></argument>, <argument><expr><name pos:line="422" pos:column="66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="428" pos:column="25">catch<parameter_list pos:line="428" pos:column="30">(<param><decl><type><name pos:line="428" pos:column="31">SQLException</name></type> <name pos:line="428" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="428" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="429" pos:column="33">System</name><op:operator pos:line="429" pos:column="39">.</op:operator><name pos:line="429" pos:column="40">out</name><op:operator pos:line="429" pos:column="43">.</op:operator><name pos:line="429" pos:column="44">println</name></name><argument_list pos:line="429" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="429" pos:column="52">"Error getting courses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="430" pos:column="33">System</name><op:operator pos:line="430" pos:column="39">.</op:operator><name pos:line="430" pos:column="40">out</name><op:operator pos:line="430" pos:column="43">.</op:operator><name pos:line="430" pos:column="44">println</name></name><argument_list pos:line="430" pos:column="51">(<argument><expr><call><name><name pos:line="430" pos:column="52">e</name><op:operator pos:line="430" pos:column="53">.</op:operator><name pos:line="430" pos:column="54">getMessage</name></name><argument_list pos:line="430" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="431" pos:column="27">catch <parameter_list pos:line="431" pos:column="33">(<param><decl><type><name pos:line="431" pos:column="34">CourseDoesNotExistException</name></type> <name pos:line="431" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="431" pos:column="65">{
				<comment type="line" pos:line="432" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="433" pos:column="33">e</name><op:operator pos:line="433" pos:column="34">.</op:operator><name pos:line="433" pos:column="35">printStackTrace</name></name><argument_list pos:line="433" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="438" pos:column="17">finally<block pos:line="438" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="441" pos:column="17">return <expr><name pos:line="441" pos:column="24">courses</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="444" pos:column="9">/*
	 * Returns a Map of all the course offerings for the course offered during the course of time
	 */</comment>
	<function><type><specifier pos:line="447" pos:column="9">public</specifier> <name><name pos:line="447" pos:column="16">LinkedHashMap</name><argument_list pos:line="447" pos:column="29">&lt;<argument><name pos:line="447" pos:column="30">Integer</name></argument>, <argument><name pos:line="447" pos:column="39">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="447" pos:column="54">getCurrentOfferings</name><parameter_list pos:line="447" pos:column="73">()</parameter_list><block pos:line="447" pos:column="75">{
		<decl_stmt><decl><type><name><name pos:line="448" pos:column="17">LinkedHashMap</name><argument_list pos:line="448" pos:column="30">&lt;<argument><name pos:line="448" pos:column="31">Integer</name></argument>, <argument><name pos:line="448" pos:column="40">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="448" pos:column="55">courseOfferings</name> <init pos:line="448" pos:column="71">= <expr><op:operator pos:line="448" pos:column="73">new</op:operator> <call><name><name pos:line="448" pos:column="77">LinkedHashMap</name><argument_list pos:line="448" pos:column="90">&lt;<argument><name pos:line="448" pos:column="91">Integer</name></argument>, <argument><name pos:line="448" pos:column="100">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="448" pos:column="114">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="450" pos:column="17">try<block pos:line="450" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="451" pos:column="25">Connection</name></type> <name pos:line="451" pos:column="36">conn</name> <init pos:line="451" pos:column="41">= <expr><call><name><name pos:line="451" pos:column="43">Database</name><op:operator pos:line="451" pos:column="51">.</op:operator><name pos:line="451" pos:column="52">getConnection</name></name><argument_list pos:line="451" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="453" pos:column="25">try<block pos:line="453" pos:column="28">{
				<if pos:line="454" pos:column="33">if<condition pos:line="454" pos:column="35">(<expr><name pos:line="454" pos:column="36">conn</name> <op:operator pos:line="454" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="454" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="454" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="455" pos:column="41">String</name></type> <name pos:line="455" pos:column="48">SQLSelect</name><init pos:line="455" pos:column="57">= <expr><lit:literal type="string" pos:line="455" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="456" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="456" pos:column="59">" FROM coursesoffered natural join courseschedule"</lit:literal>
							<op:operator pos:line="457" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="457" pos:column="59">" WHERE coursesoffered.CourseID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="458" pos:column="41">PreparedStatement</name></type> <name pos:line="458" pos:column="59">statement</name> <init pos:line="458" pos:column="69">= <expr><call><name><name pos:line="458" pos:column="71">conn</name><op:operator pos:line="458" pos:column="75">.</op:operator><name pos:line="458" pos:column="76">prepareStatement</name></name><argument_list pos:line="458" pos:column="92">(<argument><expr><name pos:line="458" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="459" pos:column="41">statement</name><op:operator pos:line="459" pos:column="50">.</op:operator><name pos:line="459" pos:column="51">setInt</name></name><argument_list pos:line="459" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="459" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="459" pos:column="61">this</name><op:operator pos:line="459" pos:column="65">.</op:operator><name pos:line="459" pos:column="66">courseID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="460" pos:column="41">ResultSet</name></type> <name pos:line="460" pos:column="51">rs</name> <init pos:line="460" pos:column="54">=  <expr><call><name><name pos:line="460" pos:column="57">statement</name><op:operator pos:line="460" pos:column="66">.</op:operator><name pos:line="460" pos:column="67">executeQuery</name></name><argument_list pos:line="460" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="462" pos:column="41">while<condition pos:line="462" pos:column="46">(<expr><call><name><name pos:line="462" pos:column="47">rs</name><op:operator pos:line="462" pos:column="49">.</op:operator><name pos:line="462" pos:column="50">next</name></name><argument_list pos:line="462" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="462" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="463" pos:column="49">DBAnnotation</name><op:operator pos:line="463" pos:column="61">.</op:operator><name pos:line="463" pos:column="62">annoate</name></name><argument_list pos:line="463" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="81">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="99">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="463" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="464" pos:column="49">int</name></type> <name pos:line="464" pos:column="53">offerID</name> <init pos:line="464" pos:column="61">= <expr><call><name><name pos:line="464" pos:column="63">rs</name><op:operator pos:line="464" pos:column="65">.</op:operator><name pos:line="464" pos:column="66">getInt</name></name><argument_list pos:line="464" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="464" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="465" pos:column="49">CourseOffered</name></type> <name pos:line="465" pos:column="63">co</name> <init pos:line="465" pos:column="66">= <expr><op:operator pos:line="465" pos:column="68">new</op:operator> <call><name pos:line="465" pos:column="72">CourseOffered</name><argument_list pos:line="465" pos:column="85">(<argument><expr><name pos:line="465" pos:column="86">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="466" pos:column="49">courseOfferings</name><op:operator pos:line="466" pos:column="64">.</op:operator><name pos:line="466" pos:column="65">put</name></name><argument_list pos:line="466" pos:column="68">(<argument><expr><name pos:line="466" pos:column="69">offerID</name></expr></argument>, <argument><expr><name pos:line="466" pos:column="78">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>						
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="471" pos:column="25">catch<parameter_list pos:line="471" pos:column="30">(<param><decl><type><name pos:line="471" pos:column="31">SQLException</name></type> <name pos:line="471" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="471" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="472" pos:column="33">System</name><op:operator pos:line="472" pos:column="39">.</op:operator><name pos:line="472" pos:column="40">out</name><op:operator pos:line="472" pos:column="43">.</op:operator><name pos:line="472" pos:column="44">println</name></name><argument_list pos:line="472" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="472" pos:column="52">"Error getting courses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="473" pos:column="33">System</name><op:operator pos:line="473" pos:column="39">.</op:operator><name pos:line="473" pos:column="40">out</name><op:operator pos:line="473" pos:column="43">.</op:operator><name pos:line="473" pos:column="44">println</name></name><argument_list pos:line="473" pos:column="51">(<argument><expr><call><name><name pos:line="473" pos:column="52">e</name><op:operator pos:line="473" pos:column="53">.</op:operator><name pos:line="473" pos:column="54">getMessage</name></name><argument_list pos:line="473" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="474" pos:column="27">catch <parameter_list pos:line="474" pos:column="33">(<param><decl><type><name pos:line="474" pos:column="34">CourseDoesNotExistException</name></type> <name pos:line="474" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="474" pos:column="65">{
				<comment type="line" pos:line="475" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="476" pos:column="33">e</name><op:operator pos:line="476" pos:column="34">.</op:operator><name pos:line="476" pos:column="35">printStackTrace</name></name><argument_list pos:line="476" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="477" pos:column="27">catch <parameter_list pos:line="477" pos:column="33">(<param><decl><type><name><name pos:line="477" pos:column="34">CourseOffered</name><op:operator pos:line="477" pos:column="47">.</op:operator><name pos:line="477" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="477" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="477" pos:column="87">{
				<comment type="line" pos:line="478" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="479" pos:column="33">e</name><op:operator pos:line="479" pos:column="34">.</op:operator><name pos:line="479" pos:column="35">printStackTrace</name></name><argument_list pos:line="479" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="484" pos:column="17">finally<block pos:line="484" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="487" pos:column="17">return <expr><name pos:line="487" pos:column="24">courseOfferings</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="490" pos:column="9">/*
	 * Returns a List of all the courses in the specified department
	 */</comment>
 	<function><type><specifier pos:line="493" pos:column="9">public</specifier> <specifier pos:line="493" pos:column="16">static</specifier> <name><name pos:line="493" pos:column="23">ArrayList</name><argument_list pos:line="493" pos:column="32">&lt;<argument><name pos:line="493" pos:column="33">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="493" pos:column="41">getCoursesOfDepartment</name><parameter_list pos:line="493" pos:column="63">(<param><decl><type><name pos:line="493" pos:column="64">Department</name></type> <name pos:line="493" pos:column="75">d</name></decl></param>)</parameter_list><block pos:line="493" pos:column="77">{
		<decl_stmt><decl><type><name pos:line="494" pos:column="17">int</name></type> <name pos:line="494" pos:column="21">deptID</name> <init pos:line="494" pos:column="28">= <expr><call><name><name pos:line="494" pos:column="30">d</name><op:operator pos:line="494" pos:column="31">.</op:operator><name pos:line="494" pos:column="32">getDepartmentID</name></name><argument_list pos:line="494" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="495" pos:column="17">ArrayList</name><argument_list pos:line="495" pos:column="26">&lt;<argument><name pos:line="495" pos:column="27">Course</name></argument>&gt;</argument_list></name></type> <name pos:line="495" pos:column="35">deptCourses</name> <init pos:line="495" pos:column="47">= <expr><op:operator pos:line="495" pos:column="49">new</op:operator> <call><name><name pos:line="495" pos:column="53">ArrayList</name><argument_list pos:line="495" pos:column="62">&lt;<argument><name pos:line="495" pos:column="63">Course</name></argument>&gt;</argument_list></name><argument_list pos:line="495" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="496" pos:column="17">try<block pos:line="496" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="497" pos:column="25">Connection</name></type> <name pos:line="497" pos:column="36">conn</name> <init pos:line="497" pos:column="41">= <expr><call><name><name pos:line="497" pos:column="43">Database</name><op:operator pos:line="497" pos:column="51">.</op:operator><name pos:line="497" pos:column="52">getConnection</name></name><argument_list pos:line="497" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="499" pos:column="25">try<block pos:line="499" pos:column="28">{
				<if pos:line="500" pos:column="33">if<condition pos:line="500" pos:column="35">(<expr><name pos:line="500" pos:column="36">conn</name> <op:operator pos:line="500" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="500" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="500" pos:column="49">{
					
					<decl_stmt><decl><type><name pos:line="502" pos:column="41">String</name></type> <name pos:line="502" pos:column="48">SQLSelect</name><init pos:line="502" pos:column="57">= <expr><lit:literal type="string" pos:line="502" pos:column="59">"Select *"</lit:literal>
							<op:operator pos:line="503" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="503" pos:column="59">" FROM courses "</lit:literal>
							<op:operator pos:line="504" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="504" pos:column="59">"WHERE DepartmentID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="505" pos:column="41">PreparedStatement</name></type> <name pos:line="505" pos:column="59">statement</name> <init pos:line="505" pos:column="69">= <expr><call><name><name pos:line="505" pos:column="71">conn</name><op:operator pos:line="505" pos:column="75">.</op:operator><name pos:line="505" pos:column="76">prepareStatement</name></name><argument_list pos:line="505" pos:column="92">(<argument><expr><name pos:line="505" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="506" pos:column="41">statement</name><op:operator pos:line="506" pos:column="50">.</op:operator><name pos:line="506" pos:column="51">setInt</name></name><argument_list pos:line="506" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="506" pos:column="58">1</lit:literal></expr></argument>,<argument><expr><name pos:line="506" pos:column="60">deptID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="507" pos:column="41">ResultSet</name></type> <name pos:line="507" pos:column="51">rs</name> <init pos:line="507" pos:column="54">=  <expr><call><name><name pos:line="507" pos:column="57">statement</name><op:operator pos:line="507" pos:column="66">.</op:operator><name pos:line="507" pos:column="67">executeQuery</name></name><argument_list pos:line="507" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="509" pos:column="41">while<condition pos:line="509" pos:column="46">(<expr><call><name><name pos:line="509" pos:column="47">rs</name><op:operator pos:line="509" pos:column="49">.</op:operator><name pos:line="509" pos:column="50">next</name></name><argument_list pos:line="509" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="509" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="510" pos:column="49">DBAnnotation</name><op:operator pos:line="510" pos:column="61">.</op:operator><name pos:line="510" pos:column="62">annoate</name></name><argument_list pos:line="510" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="510" pos:column="70">"courseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="510" pos:column="82">"courses"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="510" pos:column="93">"CourseID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="510" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="511" pos:column="49">int</name></type> <name pos:line="511" pos:column="53">courseID</name> <init pos:line="511" pos:column="62">= <expr><call><name><name pos:line="511" pos:column="64">rs</name><op:operator pos:line="511" pos:column="66">.</op:operator><name pos:line="511" pos:column="67">getInt</name></name><argument_list pos:line="511" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="511" pos:column="74">"CourseID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="512" pos:column="49">Course</name></type> <name pos:line="512" pos:column="56">c</name> <init pos:line="512" pos:column="58">= <expr><op:operator pos:line="512" pos:column="60">new</op:operator> <call><name pos:line="512" pos:column="64">Course</name><argument_list pos:line="512" pos:column="70">(<argument><expr><name pos:line="512" pos:column="71">courseID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="513" pos:column="49">deptCourses</name><op:operator pos:line="513" pos:column="60">.</op:operator><name pos:line="513" pos:column="61">add</name></name><argument_list pos:line="513" pos:column="64">(<argument><expr><name pos:line="513" pos:column="65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="519" pos:column="25">catch<parameter_list pos:line="519" pos:column="30">(<param><decl><type><name pos:line="519" pos:column="31">SQLException</name></type> <name pos:line="519" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="519" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="520" pos:column="33">System</name><op:operator pos:line="520" pos:column="39">.</op:operator><name pos:line="520" pos:column="40">out</name><op:operator pos:line="520" pos:column="43">.</op:operator><name pos:line="520" pos:column="44">println</name></name><argument_list pos:line="520" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="520" pos:column="52">"Error getting courses"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="521" pos:column="33">System</name><op:operator pos:line="521" pos:column="39">.</op:operator><name pos:line="521" pos:column="40">out</name><op:operator pos:line="521" pos:column="43">.</op:operator><name pos:line="521" pos:column="44">println</name></name><argument_list pos:line="521" pos:column="51">(<argument><expr><call><name><name pos:line="521" pos:column="52">e</name><op:operator pos:line="521" pos:column="53">.</op:operator><name pos:line="521" pos:column="54">getMessage</name></name><argument_list pos:line="521" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="522" pos:column="27">catch <parameter_list pos:line="522" pos:column="33">(<param><decl><type><name pos:line="522" pos:column="34">CourseDoesNotExistException</name></type> <name pos:line="522" pos:column="62">e</name></decl></param>)</parameter_list> <block pos:line="522" pos:column="65">{
				<comment type="line" pos:line="523" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="524" pos:column="33">e</name><op:operator pos:line="524" pos:column="34">.</op:operator><name pos:line="524" pos:column="35">printStackTrace</name></name><argument_list pos:line="524" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="529" pos:column="17">finally<block pos:line="529" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="532" pos:column="17">return <expr><name pos:line="532" pos:column="24">deptCourses</name></expr>;</return>
	
		
	}</block></function>
	
 	
 	<comment type="block" pos:line="538" pos:column="9">/*
 	 * CourseDoesnotExist Exception is thrown when an object is tried to be initialized which does not exist
 	 */</comment>
	<class><specifier pos:line="541" pos:column="9">public</specifier> <specifier pos:line="541" pos:column="16">static</specifier> class <name pos:line="541" pos:column="29">CourseDoesNotExistException</name> <super><extends pos:line="541" pos:column="57">extends <name pos:line="541" pos:column="65">Exception</name></extends></super><block pos:line="541" pos:column="74">{
		
		<decl_stmt><decl><type><specifier pos:line="543" pos:column="17">private</specifier> <specifier pos:line="543" pos:column="25">static</specifier> <specifier pos:line="543" pos:column="32">final</specifier> <name pos:line="543" pos:column="38">long</name></type> <name pos:line="543" pos:column="43">serialVersionUID</name> <init pos:line="543" pos:column="60">= <expr><lit:literal type="number" pos:line="543" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="544" pos:column="17">private</specifier> <name pos:line="544" pos:column="25">String</name></type> <name pos:line="544" pos:column="32">message</name> <init pos:line="544" pos:column="40">= <expr><lit:literal type="null" pos:line="544" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="546" pos:column="13">public</specifier>  <name pos:line="546" pos:column="21">CourseDoesNotExistException</name><parameter_list pos:line="546" pos:column="48">()</parameter_list> <block pos:line="546" pos:column="51">{
	        <expr_stmt><expr><call><name pos:line="547" pos:column="17">super</name><argument_list pos:line="547" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="548" pos:column="17">this</name><op:operator pos:line="548" pos:column="21">.</op:operator><name pos:line="548" pos:column="22">message</name></name> <op:operator pos:line="548" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="548" pos:column="32">"Course does not exist"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="551" pos:column="13">public</specifier>  <name pos:line="551" pos:column="21">CourseDoesNotExistException</name><parameter_list pos:line="551" pos:column="48">(<param><decl><type><name pos:line="551" pos:column="49">String</name></type> <name pos:line="551" pos:column="56">message</name></decl></param>)</parameter_list> <block pos:line="551" pos:column="65">{
	        <expr_stmt><expr><call><name pos:line="552" pos:column="17">super</name><argument_list pos:line="552" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="553" pos:column="17">this</name><op:operator pos:line="553" pos:column="21">.</op:operator><name pos:line="553" pos:column="22">message</name></name> <op:operator pos:line="553" pos:column="30">=</op:operator> <name pos:line="553" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="556" pos:column="13">@<name pos:line="556" pos:column="14">Override</name></annotation>
	    <specifier pos:line="557" pos:column="13">public</specifier> <name pos:line="557" pos:column="20">String</name></type> <name pos:line="557" pos:column="27">toString</name><parameter_list pos:line="557" pos:column="35">()</parameter_list> <block pos:line="557" pos:column="38">{
	        <return pos:line="558" pos:column="17">return <expr><name pos:line="558" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="561" pos:column="13">@<name pos:line="561" pos:column="14">Override</name></annotation>
	    <specifier pos:line="562" pos:column="13">public</specifier> <name pos:line="562" pos:column="20">String</name></type> <name pos:line="562" pos:column="27">getMessage</name><parameter_list pos:line="562" pos:column="37">()</parameter_list> <block pos:line="562" pos:column="40">{
	        <return pos:line="563" pos:column="17">return <expr><name pos:line="563" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	
	<comment type="block" pos:line="568" pos:column="9">/*
	 * CourseAlreadyExist Exception when a course which already exists is tried to be added
	 */</comment>
	<class><specifier pos:line="571" pos:column="9">public</specifier> <specifier pos:line="571" pos:column="16">static</specifier> class <name pos:line="571" pos:column="29">CourseAlreadyExistsException</name> <super><extends pos:line="571" pos:column="58">extends <name pos:line="571" pos:column="66">Exception</name></extends></super><block pos:line="571" pos:column="75">{
		<comment type="block" format="javadoc" pos:line="572" pos:column="17">/**
		 * 
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="575" pos:column="17">private</specifier> <specifier pos:line="575" pos:column="25">static</specifier> <specifier pos:line="575" pos:column="32">final</specifier> <name pos:line="575" pos:column="38">long</name></type> <name pos:line="575" pos:column="43">serialVersionUID</name> <init pos:line="575" pos:column="60">= <expr><lit:literal type="number" pos:line="575" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="576" pos:column="17">private</specifier> <name pos:line="576" pos:column="25">String</name></type> <name pos:line="576" pos:column="32">message</name> <init pos:line="576" pos:column="40">= <expr><lit:literal type="null" pos:line="576" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>
		 
	    <constructor><specifier pos:line="578" pos:column="13">public</specifier>  <name pos:line="578" pos:column="21">CourseAlreadyExistsException</name><parameter_list pos:line="578" pos:column="49">()</parameter_list> <block pos:line="578" pos:column="52">{
	        <expr_stmt><expr><call><name pos:line="579" pos:column="17">super</name><argument_list pos:line="579" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="580" pos:column="17">this</name><op:operator pos:line="580" pos:column="21">.</op:operator><name pos:line="580" pos:column="22">message</name></name> <op:operator pos:line="580" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="580" pos:column="32">"Course already exists exist"</lit:literal></expr>;</expr_stmt>
	    }</block></constructor>
	    
	    <constructor><specifier pos:line="583" pos:column="13">public</specifier>  <name pos:line="583" pos:column="21">CourseAlreadyExistsException</name><parameter_list pos:line="583" pos:column="49">(<param><decl><type><name pos:line="583" pos:column="50">String</name></type> <name pos:line="583" pos:column="57">message</name></decl></param>)</parameter_list> <block pos:line="583" pos:column="66">{
	        <expr_stmt><expr><call><name pos:line="584" pos:column="17">super</name><argument_list pos:line="584" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name><name pos:line="585" pos:column="17">this</name><op:operator pos:line="585" pos:column="21">.</op:operator><name pos:line="585" pos:column="22">message</name></name> <op:operator pos:line="585" pos:column="30">=</op:operator> <name pos:line="585" pos:column="32">message</name></expr>;</expr_stmt>
	    }</block></constructor>
	 
	    <function><type><annotation pos:line="588" pos:column="13">@<name pos:line="588" pos:column="14">Override</name></annotation>
	    <specifier pos:line="589" pos:column="13">public</specifier> <name pos:line="589" pos:column="20">String</name></type> <name pos:line="589" pos:column="27">toString</name><parameter_list pos:line="589" pos:column="35">()</parameter_list> <block pos:line="589" pos:column="38">{
	        <return pos:line="590" pos:column="17">return <expr><name pos:line="590" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	 
	    <function><type><annotation pos:line="593" pos:column="13">@<name pos:line="593" pos:column="14">Override</name></annotation>
	    <specifier pos:line="594" pos:column="13">public</specifier> <name pos:line="594" pos:column="20">String</name></type> <name pos:line="594" pos:column="27">getMessage</name><parameter_list pos:line="594" pos:column="37">()</parameter_list> <block pos:line="594" pos:column="40">{
	        <return pos:line="595" pos:column="17">return <expr><name pos:line="595" pos:column="24">message</name></expr>;</return>
	    }</block></function>
	}</block></class>

	<comment type="block" pos:line="599" pos:column="9">/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */</comment>
	<function><type><specifier pos:line="603" pos:column="9">public</specifier> <name pos:line="603" pos:column="16">String</name></type> <name pos:line="603" pos:column="23">toString</name><parameter_list pos:line="603" pos:column="31">()</parameter_list><block pos:line="603" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="604" pos:column="17">String</name></type> <name pos:line="604" pos:column="24">toReturn</name> <init pos:line="604" pos:column="33">= <expr><lit:literal type="string" pos:line="604" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="605" pos:column="17">toReturn</name><op:operator pos:line="605" pos:column="25">+=</op:operator><lit:literal type="string" pos:line="605" pos:column="27">"\nCourse Name:"</lit:literal><op:operator pos:line="605" pos:column="43">+</op:operator><call><name><name pos:line="605" pos:column="44">this</name><op:operator pos:line="605" pos:column="48">.</op:operator><name pos:line="605" pos:column="49">getCourseName</name></name><argument_list pos:line="605" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="606" pos:column="17">toReturn</name><op:operator pos:line="606" pos:column="25">+=</op:operator><call><name><name pos:line="606" pos:column="27">this</name><op:operator pos:line="606" pos:column="31">.</op:operator><name pos:line="606" pos:column="32">getDepartment</name></name><argument_list pos:line="606" pos:column="45">()</argument_list></call><op:operator pos:line="606" pos:column="47">.</op:operator><call><name pos:line="606" pos:column="48">toString</name><argument_list pos:line="606" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="607" pos:column="17">return <expr><name pos:line="607" pos:column="24">toReturn</name></expr>;</return>
		
	}</block></function>

}</block></class>
</unit>
