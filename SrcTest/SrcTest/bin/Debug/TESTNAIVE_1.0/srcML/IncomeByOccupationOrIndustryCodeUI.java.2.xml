<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\RiskIt\src\com\riskIt\ui\IncomeByOccupationOrIndustryCodeUI.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">ui</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">text</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">DecimalFormat</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">HashMap</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Scanner</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">com</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">riskIt</name><op:operator pos:line="7" pos:column="18">.</op:operator><name pos:line="7" pos:column="19">interfaces</name><op:operator pos:line="7" pos:column="29">.</op:operator><name pos:line="7" pos:column="30">CalculateByOccupationOrIndustryCodeInterface</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">com</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">riskIt</name><op:operator pos:line="8" pos:column="18">.</op:operator><name pos:line="8" pos:column="19">interfaces</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">StartInterface</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">riskIt</name><op:operator pos:line="9" pos:column="18">.</op:operator><name pos:line="9" pos:column="19">util</name><op:operator pos:line="9" pos:column="23">.</op:operator><name pos:line="9" pos:column="24">Factory</name></name>;</import>


<comment type="block" format="javadoc" pos:line="12" pos:column="1">/**
 * IncomeByOccupationOrIndustryCodeGUI.java
 * Purpose: GUI component for CalculateByOccupationOrIndustryCode
 * 
 * @author Bryan Angone
 * @version 1.0 7-12-09
 */</comment>

<class><specifier pos:line="20" pos:column="1">public</specifier> class <name pos:line="20" pos:column="14">IncomeByOccupationOrIndustryCodeUI</name> <super><implements pos:line="20" pos:column="49">implements <name pos:line="20" pos:column="60">StartInterface</name></implements></super> <block pos:line="20" pos:column="75">{

	<decl_stmt><decl><type><name pos:line="22" pos:column="9">Scanner</name></type> <name pos:line="22" pos:column="17">in</name> <init pos:line="22" pos:column="20">= <expr><op:operator pos:line="22" pos:column="22">new</op:operator> <call><name pos:line="22" pos:column="26">Scanner</name><argument_list pos:line="22" pos:column="33">(<argument><expr><name><name pos:line="22" pos:column="34">System</name><op:operator pos:line="22" pos:column="40">.</op:operator><name pos:line="22" pos:column="41">in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="23" pos:column="9">HashMap</name><argument_list pos:line="23" pos:column="16">&lt;<argument><name pos:line="23" pos:column="17">Integer</name></argument>,<argument><name pos:line="23" pos:column="25">String</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="33">occupationMap</name> <init pos:line="23" pos:column="47">= <expr><lit:literal type="null" pos:line="23" pos:column="49">null</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="24" pos:column="9">HashMap</name><argument_list pos:line="24" pos:column="16">&lt;<argument><name pos:line="24" pos:column="17">Integer</name></argument>, <argument><name pos:line="24" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="24" pos:column="34">industryMap</name> <init pos:line="24" pos:column="46">= <expr><lit:literal type="null" pos:line="24" pos:column="48">null</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">CalculateByOccupationOrIndustryCodeInterface</name></type> <name pos:line="25" pos:column="54">calc</name> <init pos:line="25" pos:column="59">= <expr><lit:literal type="null" pos:line="25" pos:column="61">null</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">double</name></type> <name pos:line="26" pos:column="16">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">DecimalFormat</name></type> <name pos:line="27" pos:column="23">myFormatter</name> <init pos:line="27" pos:column="35">= <expr><op:operator pos:line="27" pos:column="37">new</op:operator> <call><name pos:line="27" pos:column="41">DecimalFormat</name><argument_list pos:line="27" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="55">"$###,###,###.00"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">String</name></type> <name pos:line="28" pos:column="16">type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">String</name></type> <name pos:line="29" pos:column="16">fillData</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">IncomeByOccupationOrIndustryCodeUI</name><parameter_list pos:line="31" pos:column="50">(<param><decl><type><name pos:line="31" pos:column="51">String</name></type> <name pos:line="31" pos:column="58">type</name></decl></param>)</parameter_list><block pos:line="31" pos:column="63">{
		<if pos:line="32" pos:column="17">if<condition pos:line="32" pos:column="19">(<expr><name pos:line="32" pos:column="20">type</name> <op:operator pos:line="32" pos:column="25">!=</op:operator> <lit:literal type="null" pos:line="32" pos:column="28">null</lit:literal></expr>)</condition><then><block pos:line="32" pos:column="33">{
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">this</name><op:operator pos:line="33" pos:column="29">.</op:operator><name pos:line="33" pos:column="30">type</name></name> <op:operator pos:line="33" pos:column="35">=</op:operator> <call><name><name pos:line="33" pos:column="37">type</name><op:operator pos:line="33" pos:column="41">.</op:operator><name pos:line="33" pos:column="42">trim</name></name><argument_list pos:line="33" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="35" pos:column="17">else <block pos:line="35" pos:column="22">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">type</name> <op:operator pos:line="36" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="36" pos:column="32">"income"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		
		<if pos:line="39" pos:column="17">if<condition pos:line="39" pos:column="19">(<expr><call><name><name pos:line="39" pos:column="20">type</name><op:operator pos:line="39" pos:column="24">.</op:operator><name pos:line="39" pos:column="25">equalsIgnoreCase</name></name><argument_list pos:line="39" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="42">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="39" pos:column="52">{
			<expr_stmt><expr><name pos:line="40" pos:column="25">fillData</name> <op:operator pos:line="40" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="40" pos:column="36">"income"</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="41" pos:column="19">else <block pos:line="41" pos:column="24">{
			<expr_stmt><expr><name pos:line="42" pos:column="25">fillData</name> <op:operator pos:line="42" pos:column="34">=</op:operator> <lit:literal type="string" pos:line="42" pos:column="36">"weekly wage"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	
	<function><type><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">start</name><parameter_list pos:line="46" pos:column="26">()</parameter_list> <block pos:line="46" pos:column="29">{
		
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">int</name></type> <name pos:line="48" pos:column="21">mainChoice</name> <init pos:line="48" pos:column="32">= <expr><lit:literal type="number" pos:line="48" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">int</name></type> <name pos:line="49" pos:column="21">occupationChoice</name> <init pos:line="49" pos:column="38">= <expr><lit:literal type="number" pos:line="49" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">int</name></type> <name pos:line="50" pos:column="21">industryChoice</name> <init pos:line="50" pos:column="36">= <expr><lit:literal type="number" pos:line="50" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>

		<do pos:line="52" pos:column="17">do<block pos:line="52" pos:column="19">{
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">displayMainMenu</name><argument_list pos:line="53" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">System</name><op:operator pos:line="54" pos:column="31">.</op:operator><name pos:line="54" pos:column="32">out</name><op:operator pos:line="54" pos:column="35">.</op:operator><name pos:line="54" pos:column="36">println</name></name><argument_list pos:line="54" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="44">"Please enter a selection 1 ~ 5"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">mainChoice</name> <op:operator pos:line="55" pos:column="36">=</op:operator> <call><name pos:line="55" pos:column="38">mainMenu</name><argument_list pos:line="55" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="57" pos:column="25">// Exit</comment>
	        <if pos:line="58" pos:column="17">if<condition pos:line="58" pos:column="19">(<expr><name pos:line="58" pos:column="20">mainChoice</name> <op:operator pos:line="58" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="58" pos:column="34">5</lit:literal></expr>)</condition><then><block pos:line="58" pos:column="36">{
	        	<expr_stmt><expr><name pos:line="59" pos:column="25">mainChoice</name> <op:operator pos:line="59" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="59" pos:column="38">0</lit:literal></expr>;</expr_stmt>
	        	<return pos:line="60" pos:column="25">return;</return>
	        }</block></then></if>

	        <comment type="line" pos:line="63" pos:column="17">// Get Occupation Map Once each time class is run.</comment>
	        <if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">occupationMap</name> <op:operator pos:line="64" pos:column="35">==</op:operator> <lit:literal type="null" pos:line="64" pos:column="38">null</lit:literal></expr>)</condition><then><block pos:line="64" pos:column="43">{
	        	<expr_stmt><expr><name pos:line="65" pos:column="25">occupationMap</name> <op:operator pos:line="65" pos:column="39">=</op:operator> <call><name><name pos:line="65" pos:column="41">Factory</name><op:operator pos:line="65" pos:column="48">.</op:operator><name pos:line="65" pos:column="49">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="65" pos:column="87">()</argument_list></call><op:operator pos:line="65" pos:column="89">.</op:operator><call><name pos:line="65" pos:column="90">getOccupationCodeAndNameMap</name><argument_list pos:line="65" pos:column="117">()</argument_list></call></expr>;</expr_stmt>
	        }</block></then></if>
	           
	        <comment type="line" pos:line="68" pos:column="17">// Get Industry Map Once each time class is run.</comment>
	        <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">industryMap</name> <op:operator pos:line="69" pos:column="33">==</op:operator> <lit:literal type="null" pos:line="69" pos:column="36">null</lit:literal></expr>)</condition><then><block pos:line="69" pos:column="41">{
	        	<expr_stmt><expr><name pos:line="70" pos:column="25">industryMap</name> <op:operator pos:line="70" pos:column="37">=</op:operator> <call><name><name pos:line="70" pos:column="39">Factory</name><op:operator pos:line="70" pos:column="46">.</op:operator><name pos:line="70" pos:column="47">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="70" pos:column="85">()</argument_list></call><op:operator pos:line="70" pos:column="87">.</op:operator><call><name pos:line="70" pos:column="88">getIndustryCodeAndNameMap</name><argument_list pos:line="70" pos:column="113">()</argument_list></call></expr>;</expr_stmt>
	        }</block></then></if>
	           
	        <comment type="line" pos:line="73" pos:column="17">// Occupation Code Sub menu choice</comment>
	        <if pos:line="74" pos:column="17">if<condition pos:line="74" pos:column="19">(<expr><name pos:line="74" pos:column="20">mainChoice</name> <op:operator pos:line="74" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="74" pos:column="34">1</lit:literal></expr>)</condition><then><block pos:line="74" pos:column="36">{
	        	<do pos:line="75" pos:column="25">do <block pos:line="75" pos:column="28">{
		        	<expr_stmt><expr><name pos:line="76" pos:column="33">occupationChoice</name> <op:operator pos:line="76" pos:column="50">=</op:operator> <call><name pos:line="76" pos:column="52">OccupationCodeMenu</name><argument_list pos:line="76" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
		        	<if pos:line="77" pos:column="33">if<condition pos:line="77" pos:column="35">(<expr><name pos:line="77" pos:column="36">occupationChoice</name> <op:operator pos:line="77" pos:column="53">==</op:operator> <op:operator pos:line="77" pos:column="56">-</op:operator><lit:literal type="number" pos:line="77" pos:column="57">2</lit:literal></expr>)</condition><then><block pos:line="77" pos:column="59">{
		        		<expr_stmt><expr><name pos:line="78" pos:column="41">mainChoice</name> <op:operator pos:line="78" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="78" pos:column="54">0</lit:literal></expr>;</expr_stmt>
		        		<return pos:line="79" pos:column="41">return;</return>
		        	}</block></then>
		        	<else pos:line="81" pos:column="33">else <if pos:line="81" pos:column="38">if<condition pos:line="81" pos:column="40">(<expr><name pos:line="81" pos:column="41">occupationChoice</name> <op:operator pos:line="81" pos:column="58">==</op:operator> <op:operator pos:line="81" pos:column="61">-</op:operator><lit:literal type="number" pos:line="81" pos:column="62">1</lit:literal></expr>)</condition><then><block pos:line="81" pos:column="64">{
		        		<expr_stmt><expr><name pos:line="82" pos:column="41">mainChoice</name> <op:operator pos:line="82" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="82" pos:column="54">0</lit:literal></expr>;</expr_stmt>
		        	}</block></then>
		        	<else pos:line="84" pos:column="33">else <block pos:line="84" pos:column="38">{
		        		<expr_stmt><expr><name pos:line="85" pos:column="41">calc</name> <op:operator pos:line="85" pos:column="46">=</op:operator> <call><name><name pos:line="85" pos:column="48">Factory</name><op:operator pos:line="85" pos:column="55">.</op:operator><name pos:line="85" pos:column="56">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="85" pos:column="94">()</argument_list></call></expr>;</expr_stmt>
		        		<if pos:line="86" pos:column="41">if<condition pos:line="86" pos:column="43">(<expr><call><name><name pos:line="86" pos:column="44">type</name><op:operator pos:line="86" pos:column="48">.</op:operator><name pos:line="86" pos:column="49">equalsIgnoreCase</name></name><argument_list pos:line="86" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="66">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="86" pos:column="76">{
		        			<expr_stmt><expr><name pos:line="87" pos:column="49">result</name> <op:operator pos:line="87" pos:column="56">=</op:operator> <call><name><name pos:line="87" pos:column="58">calc</name><op:operator pos:line="87" pos:column="62">.</op:operator><name pos:line="87" pos:column="63">calculateIncomeByOccupationCode</name></name><argument_list pos:line="87" pos:column="94">(<argument><expr><name pos:line="87" pos:column="95">occupationChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        		}</block></then> <else pos:line="88" pos:column="43">else <block pos:line="88" pos:column="48">{
		        			<expr_stmt><expr><name pos:line="89" pos:column="49">result</name> <op:operator pos:line="89" pos:column="56">=</op:operator> <call><name><name pos:line="89" pos:column="58">calc</name><op:operator pos:line="89" pos:column="62">.</op:operator><name pos:line="89" pos:column="63">calculateWeeklyWageByOccupationCode</name></name><argument_list pos:line="89" pos:column="98">(<argument><expr><name pos:line="89" pos:column="99">occupationChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        		}</block></else></if>
		        		
		                
		                
		            	<if pos:line="94" pos:column="33">if<condition pos:line="94" pos:column="35">(<expr><name pos:line="94" pos:column="36">result</name> <op:operator pos:line="94" pos:column="43">&lt;=</op:operator> <lit:literal type="number" pos:line="94" pos:column="46">0</lit:literal></expr>)</condition><then><block pos:line="94" pos:column="48">{
		            		<expr_stmt><expr><call><name><name pos:line="95" pos:column="41">System</name><op:operator pos:line="95" pos:column="47">.</op:operator><name pos:line="95" pos:column="48">out</name><op:operator pos:line="95" pos:column="51">.</op:operator><name pos:line="95" pos:column="52">println</name></name><argument_list pos:line="95" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="60">"\nAverage "</lit:literal> <op:operator pos:line="95" pos:column="73">+</op:operator> <name pos:line="95" pos:column="75">fillData</name> <op:operator pos:line="95" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="86">" for occupation code "</lit:literal> <op:operator pos:line="95" pos:column="110">+</op:operator>  <name pos:line="95" pos:column="113">occupationChoice</name> <op:operator pos:line="95" pos:column="130">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="132">" : "</lit:literal> <op:operator pos:line="95" pos:column="138">+</op:operator><call><name><name pos:line="95" pos:column="139">occupationMap</name><op:operator pos:line="95" pos:column="152">.</op:operator><name pos:line="95" pos:column="153">get</name></name><argument_list pos:line="95" pos:column="156">(<argument><expr><name pos:line="95" pos:column="157">occupationChoice</name></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="175">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="177">" is not available.  Actual value is "</lit:literal> <op:operator pos:line="95" pos:column="216">+</op:operator> <call><name><name pos:line="95" pos:column="218">myFormatter</name><op:operator pos:line="95" pos:column="229">.</op:operator><name pos:line="95" pos:column="230">format</name></name><argument_list pos:line="95" pos:column="236">(<argument><expr><name pos:line="95" pos:column="237">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="245">+</op:operator> <lit:literal type="string" pos:line="95" pos:column="247">".\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            	}</block></then> <else pos:line="96" pos:column="35">else <block pos:line="96" pos:column="40">{
		            		<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">System</name><op:operator pos:line="97" pos:column="47">.</op:operator><name pos:line="97" pos:column="48">out</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">println</name></name><argument_list pos:line="97" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="60">"\nAverage "</lit:literal> <op:operator pos:line="97" pos:column="73">+</op:operator> <name pos:line="97" pos:column="75">fillData</name> <op:operator pos:line="97" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="86">" for occupation code "</lit:literal> <op:operator pos:line="97" pos:column="110">+</op:operator>  <name pos:line="97" pos:column="113">occupationChoice</name> <op:operator pos:line="97" pos:column="130">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="132">" : "</lit:literal> <op:operator pos:line="97" pos:column="138">+</op:operator><call><name><name pos:line="97" pos:column="139">occupationMap</name><op:operator pos:line="97" pos:column="152">.</op:operator><name pos:line="97" pos:column="153">get</name></name><argument_list pos:line="97" pos:column="156">(<argument><expr><name pos:line="97" pos:column="157">occupationChoice</name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="175">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="177">" is "</lit:literal><op:operator pos:line="97" pos:column="183">+</op:operator> <call><name><name pos:line="97" pos:column="185">myFormatter</name><op:operator pos:line="97" pos:column="196">.</op:operator><name pos:line="97" pos:column="197">format</name></name><argument_list pos:line="97" pos:column="203">(<argument><expr><name pos:line="97" pos:column="204">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="212">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="214">".\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            	}</block></else></if>
		                
		                
		                
		                <expr_stmt><expr><name pos:line="102" pos:column="33">mainChoice</name> <op:operator pos:line="102" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="102" pos:column="46">1</lit:literal></expr>;</expr_stmt>
		        	}</block></else></if></else></if>
	        	}</block>
	        	while<condition pos:line="105" pos:column="30">(<expr><name pos:line="105" pos:column="31">mainChoice</name> <op:operator pos:line="105" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="105" pos:column="45">1</lit:literal></expr>)</condition>;</do>
	        }</block></then></if>
	        
	        <comment type="line" pos:line="108" pos:column="17">// Industry Code Sub menu choice</comment>
	        <if pos:line="109" pos:column="17">if<condition pos:line="109" pos:column="19">(<expr><name pos:line="109" pos:column="20">mainChoice</name> <op:operator pos:line="109" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="109" pos:column="34">2</lit:literal></expr>)</condition><then><block pos:line="109" pos:column="36">{
	        	<do pos:line="110" pos:column="25">do <block pos:line="110" pos:column="28">{
		        	<expr_stmt><expr><name pos:line="111" pos:column="33">industryChoice</name> <op:operator pos:line="111" pos:column="48">=</op:operator> <call><name pos:line="111" pos:column="50">IndustryCodeMenu</name><argument_list pos:line="111" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
		        	<if pos:line="112" pos:column="33">if<condition pos:line="112" pos:column="35">(<expr><name pos:line="112" pos:column="36">industryChoice</name> <op:operator pos:line="112" pos:column="51">==</op:operator> <op:operator pos:line="112" pos:column="54">-</op:operator><lit:literal type="number" pos:line="112" pos:column="55">2</lit:literal></expr>)</condition><then><block pos:line="112" pos:column="57">{
		        		<expr_stmt><expr><name pos:line="113" pos:column="41">mainChoice</name> <op:operator pos:line="113" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="113" pos:column="54">0</lit:literal></expr>;</expr_stmt>
		        		<return pos:line="114" pos:column="41">return;</return>
		        	}</block></then>
		        	<else pos:line="116" pos:column="33">else <if pos:line="116" pos:column="38">if<condition pos:line="116" pos:column="40">(<expr><name pos:line="116" pos:column="41">industryChoice</name> <op:operator pos:line="116" pos:column="56">==</op:operator> <op:operator pos:line="116" pos:column="59">-</op:operator><lit:literal type="number" pos:line="116" pos:column="60">1</lit:literal></expr>)</condition><then><block pos:line="116" pos:column="62">{
		        		<expr_stmt><expr><name pos:line="117" pos:column="41">mainChoice</name> <op:operator pos:line="117" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="117" pos:column="54">0</lit:literal></expr>;</expr_stmt>
		        	}</block></then>
		        	<else pos:line="119" pos:column="33">else <block pos:line="119" pos:column="38">{
		        		<expr_stmt><expr><name pos:line="120" pos:column="41">calc</name> <op:operator pos:line="120" pos:column="46">=</op:operator> <call><name><name pos:line="120" pos:column="48">Factory</name><op:operator pos:line="120" pos:column="55">.</op:operator><name pos:line="120" pos:column="56">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="120" pos:column="94">()</argument_list></call></expr>;</expr_stmt>
		        		<if pos:line="121" pos:column="41">if<condition pos:line="121" pos:column="43">(<expr><call><name><name pos:line="121" pos:column="44">type</name><op:operator pos:line="121" pos:column="48">.</op:operator><name pos:line="121" pos:column="49">equalsIgnoreCase</name></name><argument_list pos:line="121" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="66">"income"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="121" pos:column="76">{
		        			<expr_stmt><expr><name pos:line="122" pos:column="49">result</name> <op:operator pos:line="122" pos:column="56">=</op:operator> <call><name><name pos:line="122" pos:column="58">calc</name><op:operator pos:line="122" pos:column="62">.</op:operator><name pos:line="122" pos:column="63">calculateIncomeByIndustryCode</name></name><argument_list pos:line="122" pos:column="92">(<argument><expr><name pos:line="122" pos:column="93">industryChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        		}</block></then> <else pos:line="123" pos:column="43">else <block pos:line="123" pos:column="48">{
		        			<expr_stmt><expr><name pos:line="124" pos:column="49">result</name> <op:operator pos:line="124" pos:column="56">=</op:operator> <call><name><name pos:line="124" pos:column="58">calc</name><op:operator pos:line="124" pos:column="62">.</op:operator><name pos:line="124" pos:column="63">calculateWeeklyWageByIndustryCode</name></name><argument_list pos:line="124" pos:column="96">(<argument><expr><name pos:line="124" pos:column="97">industryChoice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        		}</block></else></if>

		                
		                
		            	<if pos:line="129" pos:column="33">if<condition pos:line="129" pos:column="35">(<expr><name pos:line="129" pos:column="36">result</name> <op:operator pos:line="129" pos:column="43">&lt;=</op:operator> <lit:literal type="number" pos:line="129" pos:column="46">0</lit:literal></expr>)</condition><then><block pos:line="129" pos:column="48">{
		            		<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">System</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">out</name><op:operator pos:line="130" pos:column="51">.</op:operator><name pos:line="130" pos:column="52">println</name></name><argument_list pos:line="130" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="60">"\nAverage "</lit:literal> <op:operator pos:line="130" pos:column="73">+</op:operator> <name pos:line="130" pos:column="75">fillData</name> <op:operator pos:line="130" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="130" pos:column="86">" for industry code "</lit:literal> <op:operator pos:line="130" pos:column="108">+</op:operator>  <name pos:line="130" pos:column="111">industryChoice</name><op:operator pos:line="130" pos:column="125">+</op:operator> <lit:literal type="string" pos:line="130" pos:column="127">" : "</lit:literal> <op:operator pos:line="130" pos:column="133">+</op:operator><call><name><name pos:line="130" pos:column="134">industryMap</name><op:operator pos:line="130" pos:column="145">.</op:operator><name pos:line="130" pos:column="146">get</name></name><argument_list pos:line="130" pos:column="149">(<argument><expr><name pos:line="130" pos:column="150">industryChoice</name></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="166">+</op:operator> <lit:literal type="string" pos:line="130" pos:column="168">" is not available.  Actual value is "</lit:literal> <op:operator pos:line="130" pos:column="207">+</op:operator> <call><name><name pos:line="130" pos:column="209">myFormatter</name><op:operator pos:line="130" pos:column="220">.</op:operator><name pos:line="130" pos:column="221">format</name></name><argument_list pos:line="130" pos:column="227">(<argument><expr><name pos:line="130" pos:column="228">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="236">+</op:operator> <lit:literal type="string" pos:line="130" pos:column="238">".\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            	}</block></then> <else pos:line="131" pos:column="35">else <block pos:line="131" pos:column="40">{
		            		<expr_stmt><expr><call><name><name pos:line="132" pos:column="41">System</name><op:operator pos:line="132" pos:column="47">.</op:operator><name pos:line="132" pos:column="48">out</name><op:operator pos:line="132" pos:column="51">.</op:operator><name pos:line="132" pos:column="52">println</name></name><argument_list pos:line="132" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="60">"\nAverage "</lit:literal> <op:operator pos:line="132" pos:column="73">+</op:operator> <name pos:line="132" pos:column="75">fillData</name> <op:operator pos:line="132" pos:column="84">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="86">" for industry code "</lit:literal> <op:operator pos:line="132" pos:column="108">+</op:operator>  <name pos:line="132" pos:column="111">industryChoice</name> <op:operator pos:line="132" pos:column="126">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="128">" : "</lit:literal> <op:operator pos:line="132" pos:column="134">+</op:operator> <call><name><name pos:line="132" pos:column="136">industryMap</name><op:operator pos:line="132" pos:column="147">.</op:operator><name pos:line="132" pos:column="148">get</name></name><argument_list pos:line="132" pos:column="151">(<argument><expr><name pos:line="132" pos:column="152">industryChoice</name></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="168">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="170">" is "</lit:literal><op:operator pos:line="132" pos:column="176">+</op:operator> <call><name><name pos:line="132" pos:column="178">myFormatter</name><op:operator pos:line="132" pos:column="189">.</op:operator><name pos:line="132" pos:column="190">format</name></name><argument_list pos:line="132" pos:column="196">(<argument><expr><name pos:line="132" pos:column="197">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="205">+</op:operator> <lit:literal type="string" pos:line="132" pos:column="207">".\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            	}</block></else></if>
		                
		                
		                <expr_stmt><expr><name pos:line="136" pos:column="33">mainChoice</name> <op:operator pos:line="136" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="136" pos:column="46">2</lit:literal></expr>;</expr_stmt>
		        	}</block></else></if></else></if>
	        	}</block>
	        	while<condition pos:line="139" pos:column="30">(<expr><name pos:line="139" pos:column="31">mainChoice</name> <op:operator pos:line="139" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="139" pos:column="45">2</lit:literal></expr>)</condition>;</do>
	        }</block></then></if>
	           
	        <comment type="line" pos:line="142" pos:column="17">// List Occupation Codes and Names</comment>
	        <if pos:line="143" pos:column="17">if<condition pos:line="143" pos:column="19">(<expr><name pos:line="143" pos:column="20">mainChoice</name> <op:operator pos:line="143" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="143" pos:column="34">3</lit:literal></expr>)</condition><then><block pos:line="143" pos:column="36">{
	        	<expr_stmt><expr><call><name pos:line="144" pos:column="25">displayOccupationMap</name><argument_list pos:line="144" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
	        	<expr_stmt><expr><name pos:line="145" pos:column="25">mainChoice</name> <op:operator pos:line="145" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="145" pos:column="38">0</lit:literal></expr>;</expr_stmt>
	        }</block></then></if>
	           
	        <comment type="line" pos:line="148" pos:column="17">// List Industry Codes and Names</comment>
	        <if pos:line="149" pos:column="17">if<condition pos:line="149" pos:column="19">(<expr><name pos:line="149" pos:column="20">mainChoice</name> <op:operator pos:line="149" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="149" pos:column="34">4</lit:literal></expr>)</condition><then><block pos:line="149" pos:column="36">{
	        	<expr_stmt><expr><call><name pos:line="150" pos:column="25">displayIndustryMap</name><argument_list pos:line="150" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
	        	<expr_stmt><expr><name pos:line="151" pos:column="25">mainChoice</name> <op:operator pos:line="151" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="151" pos:column="38">0</lit:literal></expr>;</expr_stmt>
	        }</block></then></if>

		}</block> while <condition pos:line="154" pos:column="25">(<expr><lit:literal type="boolean" pos:line="154" pos:column="26">true</lit:literal></expr>)</condition>;</do>
	}</block></function>
	
	<function><type><specifier pos:line="157" pos:column="9">private</specifier> <name pos:line="157" pos:column="17">int</name></type> <name pos:line="157" pos:column="21">mainMenu</name><parameter_list pos:line="157" pos:column="29">()</parameter_list><block pos:line="157" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="158" pos:column="17">int</name></type> <name pos:line="158" pos:column="21">returnValue</name> <init pos:line="158" pos:column="33">= <expr><lit:literal type="number" pos:line="158" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<do pos:line="159" pos:column="17">do<block pos:line="159" pos:column="19">{
			<if pos:line="160" pos:column="25">if <condition pos:line="160" pos:column="28">(<expr><call><name><name pos:line="160" pos:column="29">in</name><op:operator pos:line="160" pos:column="31">.</op:operator><name pos:line="160" pos:column="32">hasNextInt</name></name><argument_list pos:line="160" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="160" pos:column="45"> <block pos:line="160" pos:column="46">{
				<expr_stmt><expr><name pos:line="161" pos:column="33">returnValue</name> <op:operator pos:line="161" pos:column="45">=</op:operator> <call><name><name pos:line="161" pos:column="47">in</name><op:operator pos:line="161" pos:column="49">.</op:operator><name pos:line="161" pos:column="50">nextInt</name></name><argument_list pos:line="161" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
        		<if pos:line="162" pos:column="25">if<condition pos:line="162" pos:column="27">(<expr><name><name pos:line="162" pos:column="28">returnValue</name> <argument_list pos:line="162" pos:column="40">&lt; <argument><lit:literal type="number" pos:line="162" pos:column="42">1</lit:literal> <op:operator pos:line="162" pos:column="44">||</op:operator> <name pos:line="162" pos:column="47">returnValue</name></argument> &gt;</argument_list></name>  <lit:literal type="number" pos:line="162" pos:column="62">5</lit:literal></expr>)</condition><then><block pos:line="162" pos:column="64">{
        	        <expr_stmt><expr><call><name pos:line="163" pos:column="25">displayMainMenu</name><argument_list pos:line="163" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        	        <expr_stmt><expr><call><name><name pos:line="164" pos:column="25">System</name><op:operator pos:line="164" pos:column="31">.</op:operator><name pos:line="164" pos:column="32">out</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">println</name></name><argument_list pos:line="164" pos:column="43">(<argument><expr><name pos:line="164" pos:column="44">returnValue</name> <op:operator pos:line="164" pos:column="56">+</op:operator> <lit:literal type="string" pos:line="164" pos:column="58">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	        <expr_stmt><expr><call><name><name pos:line="165" pos:column="25">System</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">out</name><op:operator pos:line="165" pos:column="35">.</op:operator><name pos:line="165" pos:column="36">println</name></name><argument_list pos:line="165" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="44">"Please enter a selection 1 ~ 5: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		}</block></then></if>
        	}</block></then>
        	<else pos:line="168" pos:column="17">else <block pos:line="168" pos:column="22">{
                <expr_stmt><expr><call><name pos:line="169" pos:column="17">displayMainMenu</name><argument_list pos:line="169" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
        		<expr_stmt><expr><call><name><name pos:line="170" pos:column="25">System</name><op:operator pos:line="170" pos:column="31">.</op:operator><name pos:line="170" pos:column="32">out</name><op:operator pos:line="170" pos:column="35">.</op:operator><name pos:line="170" pos:column="36">println</name></name><argument_list pos:line="170" pos:column="43">(<argument><expr><call><name><name pos:line="170" pos:column="44">in</name><op:operator pos:line="170" pos:column="46">.</op:operator><name pos:line="170" pos:column="47">next</name></name><argument_list pos:line="170" pos:column="51">()</argument_list></call> <op:operator pos:line="170" pos:column="54">+</op:operator> <lit:literal type="string" pos:line="170" pos:column="56">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="171" pos:column="17">System</name><op:operator pos:line="171" pos:column="23">.</op:operator><name pos:line="171" pos:column="24">out</name><op:operator pos:line="171" pos:column="27">.</op:operator><name pos:line="171" pos:column="28">println</name></name><argument_list pos:line="171" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="36">"Please enter a selection 1 ~ 5"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block></else></if>

		}</block> while <condition pos:line="174" pos:column="25">(<expr><name><name pos:line="174" pos:column="26">returnValue</name> <argument_list pos:line="174" pos:column="38">&lt; <argument><lit:literal type="number" pos:line="174" pos:column="40">1</lit:literal> <op:operator pos:line="174" pos:column="42">||</op:operator> <name pos:line="174" pos:column="45">returnValue</name></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="174" pos:column="59">5</lit:literal></expr>)</condition>;</do>
		
		<return pos:line="176" pos:column="17">return <expr><name pos:line="176" pos:column="24">returnValue</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="179" pos:column="9">private</specifier> <name pos:line="179" pos:column="17">int</name></type> <name pos:line="179" pos:column="21">OccupationCodeMenu</name><parameter_list pos:line="179" pos:column="39">()</parameter_list><block pos:line="179" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="180" pos:column="17">int</name></type> <name pos:line="180" pos:column="21">returnValue</name> <init pos:line="180" pos:column="33">= <expr><lit:literal type="number" pos:line="180" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<do pos:line="181" pos:column="17">do<block pos:line="181" pos:column="19">{
			<expr_stmt><expr><call><name pos:line="182" pos:column="25">displayOccupationMenu</name><argument_list pos:line="182" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="183" pos:column="25">if <condition pos:line="183" pos:column="28">(<expr><call><name><name pos:line="183" pos:column="29">in</name><op:operator pos:line="183" pos:column="31">.</op:operator><name pos:line="183" pos:column="32">hasNextInt</name></name><argument_list pos:line="183" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="183" pos:column="45"> <block pos:line="183" pos:column="46">{
				<expr_stmt><expr><name pos:line="184" pos:column="33">returnValue</name> <op:operator pos:line="184" pos:column="45">=</op:operator> <call><name><name pos:line="184" pos:column="47">in</name><op:operator pos:line="184" pos:column="49">.</op:operator><name pos:line="184" pos:column="50">nextInt</name></name><argument_list pos:line="184" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="185" pos:column="33">if<condition pos:line="185" pos:column="35">(<expr><name><name pos:line="185" pos:column="36">returnValue</name> <argument_list pos:line="185" pos:column="48">&lt; <argument><lit:literal type="number" pos:line="185" pos:column="50">0</lit:literal> <op:operator pos:line="185" pos:column="52">||</op:operator> <name pos:line="185" pos:column="55">returnValue</name></argument> &gt;</argument_list></name>  <call><name><name pos:line="185" pos:column="70">occupationMap</name><op:operator pos:line="185" pos:column="83">.</op:operator><name pos:line="185" pos:column="84">size</name></name><argument_list pos:line="185" pos:column="88">()</argument_list></call></expr>)</condition><then><block pos:line="185" pos:column="91">{
					<expr_stmt><expr><call><name><name pos:line="186" pos:column="41">System</name><op:operator pos:line="186" pos:column="47">.</op:operator><name pos:line="186" pos:column="48">out</name><op:operator pos:line="186" pos:column="51">.</op:operator><name pos:line="186" pos:column="52">println</name></name><argument_list pos:line="186" pos:column="59">(<argument><expr><name pos:line="186" pos:column="60">returnValue</name> <op:operator pos:line="186" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="186" pos:column="74">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> 
			<else pos:line="189" pos:column="25">else <block pos:line="189" pos:column="30">{
				<decl_stmt><decl><type><name pos:line="190" pos:column="33">String</name></type> <name pos:line="190" pos:column="40">occupationString</name> <init pos:line="190" pos:column="57">= <expr><call><name><name pos:line="190" pos:column="59">in</name><op:operator pos:line="190" pos:column="61">.</op:operator><name pos:line="190" pos:column="62">next</name></name><argument_list pos:line="190" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="191" pos:column="33">if<condition pos:line="191" pos:column="35">(<expr><call><name><name pos:line="191" pos:column="36">occupationString</name><op:operator pos:line="191" pos:column="52">.</op:operator><name pos:line="191" pos:column="53">trim</name></name><argument_list pos:line="191" pos:column="57">()</argument_list></call><op:operator pos:line="191" pos:column="59">.</op:operator><call><name pos:line="191" pos:column="60">equalsIgnoreCase</name><argument_list pos:line="191" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="77">"list"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="191" pos:column="85">{
					<expr_stmt><expr><call><name pos:line="192" pos:column="41">displayOccupationMap</name><argument_list pos:line="192" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="193" pos:column="41">returnValue</name> <op:operator pos:line="193" pos:column="53">=</op:operator> <op:operator pos:line="193" pos:column="55">-</op:operator><lit:literal type="number" pos:line="193" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="195" pos:column="33">else <if pos:line="195" pos:column="38">if<condition pos:line="195" pos:column="40">(<expr><call><name><name pos:line="195" pos:column="41">occupationString</name><op:operator pos:line="195" pos:column="57">.</op:operator><name pos:line="195" pos:column="58">trim</name></name><argument_list pos:line="195" pos:column="62">()</argument_list></call><op:operator pos:line="195" pos:column="64">.</op:operator><call><name pos:line="195" pos:column="65">equalsIgnoreCase</name><argument_list pos:line="195" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="82">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="195" pos:column="92">{
					<return pos:line="196" pos:column="41">return <expr><op:operator pos:line="196" pos:column="48">-</op:operator><lit:literal type="number" pos:line="196" pos:column="49">1</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="198" pos:column="33">else <if pos:line="198" pos:column="38">if<condition pos:line="198" pos:column="40">(<expr><call><name><name pos:line="198" pos:column="41">occupationString</name><op:operator pos:line="198" pos:column="57">.</op:operator><name pos:line="198" pos:column="58">trim</name></name><argument_list pos:line="198" pos:column="62">()</argument_list></call><op:operator pos:line="198" pos:column="64">.</op:operator><call><name pos:line="198" pos:column="65">equalsIgnoreCase</name><argument_list pos:line="198" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="82">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="198" pos:column="90">{
					<return pos:line="199" pos:column="41">return <expr><op:operator pos:line="199" pos:column="48">-</op:operator><lit:literal type="number" pos:line="199" pos:column="49">2</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="201" pos:column="33">else <block pos:line="201" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="202" pos:column="41">System</name><op:operator pos:line="202" pos:column="47">.</op:operator><name pos:line="202" pos:column="48">out</name><op:operator pos:line="202" pos:column="51">.</op:operator><name pos:line="202" pos:column="52">println</name></name><argument_list pos:line="202" pos:column="59">(<argument><expr><name pos:line="202" pos:column="60">occupationString</name> <op:operator pos:line="202" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="202" pos:column="79">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="203" pos:column="41">returnValue</name> <op:operator pos:line="203" pos:column="53">=</op:operator> <op:operator pos:line="203" pos:column="55">-</op:operator><lit:literal type="number" pos:line="203" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if>
			}</block></else></if>
		}</block> while <condition pos:line="206" pos:column="25">(<expr><name><name pos:line="206" pos:column="26">returnValue</name> <argument_list pos:line="206" pos:column="38">&lt; <argument><lit:literal type="number" pos:line="206" pos:column="40">0</lit:literal> <op:operator pos:line="206" pos:column="42">||</op:operator> <name pos:line="206" pos:column="45">returnValue</name></argument> &gt;</argument_list></name> <call><name><name pos:line="206" pos:column="59">occupationMap</name><op:operator pos:line="206" pos:column="72">.</op:operator><name pos:line="206" pos:column="73">size</name></name><argument_list pos:line="206" pos:column="77">()</argument_list></call></expr>)</condition>;</do>	
			
		<return pos:line="208" pos:column="17">return <expr><name pos:line="208" pos:column="24">returnValue</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="211" pos:column="9">private</specifier> <name pos:line="211" pos:column="17">int</name></type> <name pos:line="211" pos:column="21">IndustryCodeMenu</name><parameter_list pos:line="211" pos:column="37">()</parameter_list><block pos:line="211" pos:column="39">{
		<decl_stmt><decl><type><name pos:line="212" pos:column="17">int</name></type> <name pos:line="212" pos:column="21">returnValue</name> <init pos:line="212" pos:column="33">= <expr><lit:literal type="number" pos:line="212" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
		<do pos:line="213" pos:column="17">do<block pos:line="213" pos:column="19">{
			<expr_stmt><expr><call><name pos:line="214" pos:column="25">displayIndustryMenu</name><argument_list pos:line="214" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="215" pos:column="25">if <condition pos:line="215" pos:column="28">(<expr><call><name><name pos:line="215" pos:column="29">in</name><op:operator pos:line="215" pos:column="31">.</op:operator><name pos:line="215" pos:column="32">hasNextInt</name></name><argument_list pos:line="215" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="215" pos:column="45"> <block pos:line="215" pos:column="46">{
				<expr_stmt><expr><name pos:line="216" pos:column="33">returnValue</name> <op:operator pos:line="216" pos:column="45">=</op:operator> <call><name><name pos:line="216" pos:column="47">in</name><op:operator pos:line="216" pos:column="49">.</op:operator><name pos:line="216" pos:column="50">nextInt</name></name><argument_list pos:line="216" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="217" pos:column="33">if<condition pos:line="217" pos:column="35">(<expr><name><name pos:line="217" pos:column="36">returnValue</name> <argument_list pos:line="217" pos:column="48">&lt; <argument><lit:literal type="number" pos:line="217" pos:column="50">0</lit:literal> <op:operator pos:line="217" pos:column="52">||</op:operator> <name pos:line="217" pos:column="55">returnValue</name></argument> &gt;</argument_list></name>  <call><name><name pos:line="217" pos:column="70">industryMap</name><op:operator pos:line="217" pos:column="81">.</op:operator><name pos:line="217" pos:column="82">size</name></name><argument_list pos:line="217" pos:column="86">()</argument_list></call></expr>)</condition><then><block pos:line="217" pos:column="89">{
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">System</name><op:operator pos:line="218" pos:column="47">.</op:operator><name pos:line="218" pos:column="48">out</name><op:operator pos:line="218" pos:column="51">.</op:operator><name pos:line="218" pos:column="52">println</name></name><argument_list pos:line="218" pos:column="59">(<argument><expr><name pos:line="218" pos:column="60">returnValue</name> <op:operator pos:line="218" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="218" pos:column="74">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> 
			<else pos:line="221" pos:column="25">else <block pos:line="221" pos:column="30">{
				<decl_stmt><decl><type><name pos:line="222" pos:column="33">String</name></type> <name pos:line="222" pos:column="40">industryString</name> <init pos:line="222" pos:column="55">= <expr><call><name><name pos:line="222" pos:column="57">in</name><op:operator pos:line="222" pos:column="59">.</op:operator><name pos:line="222" pos:column="60">next</name></name><argument_list pos:line="222" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="223" pos:column="33">if<condition pos:line="223" pos:column="35">(<expr><call><name><name pos:line="223" pos:column="36">industryString</name><op:operator pos:line="223" pos:column="50">.</op:operator><name pos:line="223" pos:column="51">trim</name></name><argument_list pos:line="223" pos:column="55">()</argument_list></call><op:operator pos:line="223" pos:column="57">.</op:operator><call><name pos:line="223" pos:column="58">equalsIgnoreCase</name><argument_list pos:line="223" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="75">"list"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="223" pos:column="83">{
					<expr_stmt><expr><call><name pos:line="224" pos:column="41">displayIndustryMap</name><argument_list pos:line="224" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="225" pos:column="41">returnValue</name> <op:operator pos:line="225" pos:column="53">=</op:operator> <op:operator pos:line="225" pos:column="55">-</op:operator><lit:literal type="number" pos:line="225" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="227" pos:column="33">else <if pos:line="227" pos:column="38">if<condition pos:line="227" pos:column="40">(<expr><call><name><name pos:line="227" pos:column="41">industryString</name><op:operator pos:line="227" pos:column="55">.</op:operator><name pos:line="227" pos:column="56">trim</name></name><argument_list pos:line="227" pos:column="60">()</argument_list></call><op:operator pos:line="227" pos:column="62">.</op:operator><call><name pos:line="227" pos:column="63">equalsIgnoreCase</name><argument_list pos:line="227" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="80">"return"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="227" pos:column="90">{
					<return pos:line="228" pos:column="41">return <expr><op:operator pos:line="228" pos:column="48">-</op:operator><lit:literal type="number" pos:line="228" pos:column="49">1</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="230" pos:column="33">else <if pos:line="230" pos:column="38">if<condition pos:line="230" pos:column="40">(<expr><call><name><name pos:line="230" pos:column="41">industryString</name><op:operator pos:line="230" pos:column="55">.</op:operator><name pos:line="230" pos:column="56">trim</name></name><argument_list pos:line="230" pos:column="60">()</argument_list></call><op:operator pos:line="230" pos:column="62">.</op:operator><call><name pos:line="230" pos:column="63">equalsIgnoreCase</name><argument_list pos:line="230" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="230" pos:column="80">"exit"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="230" pos:column="88">{
					<return pos:line="231" pos:column="41">return <expr><op:operator pos:line="231" pos:column="48">-</op:operator><lit:literal type="number" pos:line="231" pos:column="49">2</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="233" pos:column="33">else <block pos:line="233" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="234" pos:column="41">System</name><op:operator pos:line="234" pos:column="47">.</op:operator><name pos:line="234" pos:column="48">out</name><op:operator pos:line="234" pos:column="51">.</op:operator><name pos:line="234" pos:column="52">println</name></name><argument_list pos:line="234" pos:column="59">(<argument><expr><name pos:line="234" pos:column="60">industryString</name> <op:operator pos:line="234" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="234" pos:column="77">" is an invalid selection."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="235" pos:column="41">returnValue</name> <op:operator pos:line="235" pos:column="53">=</op:operator> <op:operator pos:line="235" pos:column="55">-</op:operator><lit:literal type="number" pos:line="235" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if>
			}</block></else></if>
		}</block> while <condition pos:line="238" pos:column="25">(<expr><name><name pos:line="238" pos:column="26">returnValue</name> <argument_list pos:line="238" pos:column="38">&lt; <argument><lit:literal type="number" pos:line="238" pos:column="40">0</lit:literal> <op:operator pos:line="238" pos:column="42">||</op:operator> <name pos:line="238" pos:column="45">returnValue</name></argument> &gt;</argument_list></name> <call><name><name pos:line="238" pos:column="59">industryMap</name><op:operator pos:line="238" pos:column="70">.</op:operator><name pos:line="238" pos:column="71">size</name></name><argument_list pos:line="238" pos:column="75">()</argument_list></call></expr>)</condition>;</do>	
			
		<return pos:line="240" pos:column="17">return <expr><name pos:line="240" pos:column="24">returnValue</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="243" pos:column="9">private</specifier> <name pos:line="243" pos:column="17">void</name></type> <name pos:line="243" pos:column="22">displayMainMenu</name><parameter_list pos:line="243" pos:column="37">()</parameter_list><block pos:line="243" pos:column="39">{
		<expr_stmt><expr><call><name><name pos:line="244" pos:column="17">System</name><op:operator pos:line="244" pos:column="23">.</op:operator><name pos:line="244" pos:column="24">out</name><op:operator pos:line="244" pos:column="27">.</op:operator><name pos:line="244" pos:column="28">println</name></name><argument_list pos:line="244" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="244" pos:column="36">"[1] Select an Occupation Code to display average "</lit:literal> <op:operator pos:line="244" pos:column="88">+</op:operator> <name pos:line="244" pos:column="90">fillData</name> <op:operator pos:line="244" pos:column="99">+</op:operator> <lit:literal type="string" pos:line="244" pos:column="101">" for that occupation code"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="245" pos:column="17">System</name><op:operator pos:line="245" pos:column="23">.</op:operator><name pos:line="245" pos:column="24">out</name><op:operator pos:line="245" pos:column="27">.</op:operator><name pos:line="245" pos:column="28">println</name></name><argument_list pos:line="245" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="36">"[2] Select an Industry Code to display average "</lit:literal> <op:operator pos:line="245" pos:column="86">+</op:operator> <name pos:line="245" pos:column="88">fillData</name> <op:operator pos:line="245" pos:column="97">+</op:operator> <lit:literal type="string" pos:line="245" pos:column="99">" for that industry code."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="246" pos:column="17">System</name><op:operator pos:line="246" pos:column="23">.</op:operator><name pos:line="246" pos:column="24">out</name><op:operator pos:line="246" pos:column="27">.</op:operator><name pos:line="246" pos:column="28">println</name></name><argument_list pos:line="246" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="36">"[3] Display all Occupation codes associated occupation names."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="247" pos:column="17">System</name><op:operator pos:line="247" pos:column="23">.</op:operator><name pos:line="247" pos:column="24">out</name><op:operator pos:line="247" pos:column="27">.</op:operator><name pos:line="247" pos:column="28">println</name></name><argument_list pos:line="247" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="36">"[4] Display all Industry codes and associated industry names."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="248" pos:column="17">System</name><op:operator pos:line="248" pos:column="23">.</op:operator><name pos:line="248" pos:column="24">out</name><op:operator pos:line="248" pos:column="27">.</op:operator><name pos:line="248" pos:column="28">println</name></name><argument_list pos:line="248" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="36">"[5] Exit"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="251" pos:column="9">private</specifier> <name pos:line="251" pos:column="17">void</name></type> <name pos:line="251" pos:column="22">displayOccupationMenu</name><parameter_list pos:line="251" pos:column="43">()</parameter_list><block pos:line="251" pos:column="45">{
		<expr_stmt><expr><call><name><name pos:line="252" pos:column="17">System</name><op:operator pos:line="252" pos:column="23">.</op:operator><name pos:line="252" pos:column="24">out</name><op:operator pos:line="252" pos:column="27">.</op:operator><name pos:line="252" pos:column="28">println</name></name><argument_list pos:line="252" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="36">"Enter an Occupation code, or 'list' for the list of Occupation codes and descriptions."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="253" pos:column="17">System</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">out</name><op:operator pos:line="253" pos:column="27">.</op:operator><name pos:line="253" pos:column="28">println</name></name><argument_list pos:line="253" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="36">"Enter 'return' to return to the Occupation and Industry Code menu, or 'exit' to return to the main menu."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="256" pos:column="9">private</specifier> <name pos:line="256" pos:column="17">void</name></type> <name pos:line="256" pos:column="22">displayIndustryMenu</name><parameter_list pos:line="256" pos:column="41">()</parameter_list><block pos:line="256" pos:column="43">{
		<expr_stmt><expr><call><name><name pos:line="257" pos:column="17">System</name><op:operator pos:line="257" pos:column="23">.</op:operator><name pos:line="257" pos:column="24">out</name><op:operator pos:line="257" pos:column="27">.</op:operator><name pos:line="257" pos:column="28">println</name></name><argument_list pos:line="257" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="36">"Enter a Industry code, or 'list' for the list of Industry codes and descriptions."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="258" pos:column="17">System</name><op:operator pos:line="258" pos:column="23">.</op:operator><name pos:line="258" pos:column="24">out</name><op:operator pos:line="258" pos:column="27">.</op:operator><name pos:line="258" pos:column="28">println</name></name><argument_list pos:line="258" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="36">"Enter 'return' to return to the Occupation and Industry Code menu, or 'exit' to return to the main menu."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="261" pos:column="9">private</specifier> <name pos:line="261" pos:column="17">void</name></type> <name pos:line="261" pos:column="22">displayOccupationMap</name><parameter_list pos:line="261" pos:column="42">()</parameter_list><block pos:line="261" pos:column="44">{
 	   <for pos:line="262" pos:column="12">for(<init><decl><type><name pos:line="262" pos:column="16">int</name></type> <name pos:line="262" pos:column="20">i</name> <init pos:line="262" pos:column="22">= <expr><lit:literal type="number" pos:line="262" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="262" pos:column="27">i</name> <op:operator pos:line="262" pos:column="29">&lt;</op:operator> <call><name><name pos:line="262" pos:column="31">occupationMap</name><op:operator pos:line="262" pos:column="44">.</op:operator><name pos:line="262" pos:column="45">size</name></name><argument_list pos:line="262" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="262" pos:column="53">i</name> <op:operator pos:line="262" pos:column="55">++</op:operator></expr></incr>)<block pos:line="262" pos:column="58">{
		   <decl_stmt><decl><type><name pos:line="263" pos:column="20">String</name></type> <name pos:line="263" pos:column="27">stringToInsert</name> <init pos:line="263" pos:column="42">= <expr><lit:literal type="string" pos:line="263" pos:column="44">" : "</lit:literal></expr></init></decl>;</decl_stmt>
		   <if pos:line="264" pos:column="20">if<condition pos:line="264" pos:column="22">(<expr><name pos:line="264" pos:column="23">i</name> <op:operator pos:line="264" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="264" pos:column="27">10</lit:literal></expr>)</condition><then><block pos:line="264" pos:column="30">{
			   <expr_stmt><expr><name pos:line="265" pos:column="28">stringToInsert</name> <op:operator pos:line="265" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="265" pos:column="45">" "</lit:literal> <op:operator pos:line="265" pos:column="49">+</op:operator> <name pos:line="265" pos:column="51">stringToInsert</name></expr>;</expr_stmt>
		   }</block></then></if>
		   <expr_stmt><expr><call><name><name pos:line="267" pos:column="20">System</name><op:operator pos:line="267" pos:column="26">.</op:operator><name pos:line="267" pos:column="27">out</name><op:operator pos:line="267" pos:column="30">.</op:operator><name pos:line="267" pos:column="31">println</name></name><argument_list pos:line="267" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="39">"Occupation code "</lit:literal> <op:operator pos:line="267" pos:column="58">+</op:operator> <name pos:line="267" pos:column="60">i</name> <op:operator pos:line="267" pos:column="62">+</op:operator> <name pos:line="267" pos:column="64">stringToInsert</name> <op:operator pos:line="267" pos:column="79">+</op:operator> <call><name><name pos:line="267" pos:column="81">occupationMap</name><op:operator pos:line="267" pos:column="94">.</op:operator><name pos:line="267" pos:column="95">get</name></name><argument_list pos:line="267" pos:column="98">(<argument><expr><name pos:line="267" pos:column="99">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   }</block></for>
 	   <expr_stmt><expr><call><name><name pos:line="269" pos:column="12">System</name><op:operator pos:line="269" pos:column="18">.</op:operator><name pos:line="269" pos:column="19">out</name><op:operator pos:line="269" pos:column="22">.</op:operator><name pos:line="269" pos:column="23">println</name></name><argument_list pos:line="269" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><specifier pos:line="272" pos:column="9">private</specifier> <name pos:line="272" pos:column="17">void</name></type> <name pos:line="272" pos:column="22">displayIndustryMap</name><parameter_list pos:line="272" pos:column="40">()</parameter_list><block pos:line="272" pos:column="42">{
 	   <for pos:line="273" pos:column="12">for(<init><decl><type><name pos:line="273" pos:column="16">int</name></type> <name pos:line="273" pos:column="20">i</name> <init pos:line="273" pos:column="22">= <expr><lit:literal type="number" pos:line="273" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="273" pos:column="27">i</name> <op:operator pos:line="273" pos:column="29">&lt;</op:operator> <call><name><name pos:line="273" pos:column="31">industryMap</name><op:operator pos:line="273" pos:column="42">.</op:operator><name pos:line="273" pos:column="43">size</name></name><argument_list pos:line="273" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="273" pos:column="51">i</name> <op:operator pos:line="273" pos:column="53">++</op:operator></expr></incr>)<block pos:line="273" pos:column="56">{
		   <decl_stmt><decl><type><name pos:line="274" pos:column="20">String</name></type> <name pos:line="274" pos:column="27">stringToInsert</name> <init pos:line="274" pos:column="42">= <expr><lit:literal type="string" pos:line="274" pos:column="44">" : "</lit:literal></expr></init></decl>;</decl_stmt>
		   <if pos:line="275" pos:column="20">if<condition pos:line="275" pos:column="22">(<expr><name pos:line="275" pos:column="23">i</name> <op:operator pos:line="275" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="275" pos:column="27">10</lit:literal></expr>)</condition><then><block pos:line="275" pos:column="30">{
			   <expr_stmt><expr><name pos:line="276" pos:column="28">stringToInsert</name> <op:operator pos:line="276" pos:column="43">=</op:operator> <lit:literal type="string" pos:line="276" pos:column="45">" "</lit:literal> <op:operator pos:line="276" pos:column="49">+</op:operator> <name pos:line="276" pos:column="51">stringToInsert</name></expr>;</expr_stmt>
		   }</block></then></if>
		   <expr_stmt><expr><call><name><name pos:line="278" pos:column="20">System</name><op:operator pos:line="278" pos:column="26">.</op:operator><name pos:line="278" pos:column="27">out</name><op:operator pos:line="278" pos:column="30">.</op:operator><name pos:line="278" pos:column="31">println</name></name><argument_list pos:line="278" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="39">"Industry code "</lit:literal> <op:operator pos:line="278" pos:column="56">+</op:operator> <name pos:line="278" pos:column="58">i</name> <op:operator pos:line="278" pos:column="60">+</op:operator> <name pos:line="278" pos:column="62">stringToInsert</name> <op:operator pos:line="278" pos:column="77">+</op:operator> <call><name><name pos:line="278" pos:column="79">industryMap</name><op:operator pos:line="278" pos:column="90">.</op:operator><name pos:line="278" pos:column="91">get</name></name><argument_list pos:line="278" pos:column="94">(<argument><expr><name pos:line="278" pos:column="95">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   }</block></for>
 	   <expr_stmt><expr><call><name><name pos:line="280" pos:column="12">System</name><op:operator pos:line="280" pos:column="18">.</op:operator><name pos:line="280" pos:column="19">out</name><op:operator pos:line="280" pos:column="22">.</op:operator><name pos:line="280" pos:column="23">println</name></name><argument_list pos:line="280" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
}</block></class>
</unit>
