<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\SE-project\testcode\RiskIt\src\com\riskIt\controller\Requirements19_24.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">riskIt</name><op:operator pos:line="1" pos:column="19">.</op:operator><name pos:line="1" pos:column="20">controller</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name></name>.*;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">HashMap</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">tada</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">TaDaMethod</name></name>;</import>

<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">com</name><op:operator pos:line="11" pos:column="11">.</op:operator><name pos:line="11" pos:column="12">riskIt</name><op:operator pos:line="11" pos:column="18">.</op:operator><name pos:line="11" pos:column="19">util</name><op:operator pos:line="11" pos:column="23">.</op:operator><name pos:line="11" pos:column="24">UtilitiesReq19_24</name></name>;</import>

<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">com</name><op:operator pos:line="13" pos:column="11">.</op:operator><name pos:line="13" pos:column="12">riskIt</name><op:operator pos:line="13" pos:column="18">.</op:operator><name pos:line="13" pos:column="19">interfaces</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">CalculateByOccupationOrIndustryCodeInterface</name></name>;</import>

<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">com</name><op:operator pos:line="15" pos:column="11">.</op:operator><name pos:line="15" pos:column="12">riskIt</name><op:operator pos:line="15" pos:column="18">.</op:operator><name pos:line="15" pos:column="19">db</name><op:operator pos:line="15" pos:column="21">.</op:operator><name pos:line="15" pos:column="22">DatabaseConnection</name></name>;</import>

<import pos:line="17" pos:column="1">import <name><name pos:line="17" pos:column="8">com</name><op:operator pos:line="17" pos:column="11">.</op:operator><name pos:line="17" pos:column="12">riskIt</name><op:operator pos:line="17" pos:column="18">.</op:operator><name pos:line="17" pos:column="19">util</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Factory</name></name>;</import>

<comment type="block" format="javadoc" pos:line="19" pos:column="1">/**
 * Requirements19_24.java
 * Purpose: Processing of the requirements ( main menu options) 19-24.
 * 
 * @author Selma Tiganj
 * @version 1.0 7-15-09
 */</comment>

<class><specifier pos:line="27" pos:column="1">public</specifier> class <name pos:line="27" pos:column="14">Requirements19_24</name> <block pos:line="27" pos:column="32">{

    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">private</specifier> <name pos:line="29" pos:column="13">Connection</name></type>   <name pos:line="29" pos:column="26">_conn</name></decl>;</decl_stmt>   
    <decl_stmt><decl><type><specifier pos:line="30" pos:column="5">private</specifier> <name pos:line="30" pos:column="13">Statement</name></type>    <name pos:line="30" pos:column="26">s</name></decl>;</decl_stmt> 
    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">private</specifier> <specifier pos:line="31" pos:column="13">static</specifier> <specifier pos:line="31" pos:column="20">final</specifier> <name pos:line="31" pos:column="26">int</name></type> <name pos:line="31" pos:column="30">ErrorValue</name> <init pos:line="31" pos:column="41">= <expr><lit:literal type="number" pos:line="31" pos:column="43">35565</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">private</specifier> <specifier pos:line="32" pos:column="13">static</specifier> <specifier pos:line="32" pos:column="20">final</specifier> <name pos:line="32" pos:column="26">int</name></type> <name pos:line="32" pos:column="30">maxEduDegrees</name> <init pos:line="32" pos:column="44">= <expr><lit:literal type="number" pos:line="32" pos:column="46">17</lit:literal></expr></init></decl>;</decl_stmt>
      
    <constructor><specifier pos:line="34" pos:column="5">public</specifier> <name pos:line="34" pos:column="12">Requirements19_24</name><parameter_list pos:line="34" pos:column="29">()</parameter_list>
    <block pos:line="35" pos:column="5">{   
        <expr_stmt><expr><name pos:line="36" pos:column="9">_conn</name> <op:operator pos:line="36" pos:column="15">=</op:operator> <lit:literal type="null" pos:line="36" pos:column="17">null</lit:literal></expr>;</expr_stmt> 
        <expr_stmt><expr><name pos:line="37" pos:column="9">s</name> <op:operator pos:line="37" pos:column="11">=</op:operator> <lit:literal type="null" pos:line="37" pos:column="13">null</lit:literal></expr>;</expr_stmt>
    }</block></constructor>

	<function><type><annotation pos:line="40" pos:column="9">@<name pos:line="40" pos:column="10">TaDaMethod</name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">variablesToTrack</name> <op:operator pos:line="40" pos:column="38">=</op:operator> <block pos:line="40" pos:column="40">{<expr><lit:literal type="string" pos:line="40" pos:column="41">"educationArray"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="40" pos:column="60">correspondingDatabaseAttribute</name> <op:operator pos:line="40" pos:column="91">=</op:operator> <block pos:line="40" pos:column="93">{<expr><lit:literal type="string" pos:line="40" pos:column="94">"education.educationmap"</lit:literal></expr>}</block></expr></argument> )</argument_list></annotation>
	<specifier pos:line="41" pos:column="9">private</specifier> <name pos:line="41" pos:column="17">void</name></type> <name pos:line="41" pos:column="22">getEducationResultSet</name><parameter_list pos:line="41" pos:column="43">(<param><decl><type><name><name pos:line="41" pos:column="44">String</name><index pos:line="41" pos:column="50">[]</index></name></type> <name pos:line="41" pos:column="53">educationArray</name></decl></param> )</parameter_list><block pos:line="41" pos:column="69">{
		
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">ResultSet</name></type> <name pos:line="43" pos:column="19">rs</name> <init pos:line="43" pos:column="22">= <expr><lit:literal type="null" pos:line="43" pos:column="24">null</lit:literal></expr></init></decl>;</decl_stmt>
		
        <try pos:line="45" pos:column="9">try <block pos:line="45" pos:column="13">{
			<expr_stmt><expr><name pos:line="46" pos:column="25">_conn</name> <op:operator pos:line="46" pos:column="31">=</op:operator> <call><name><name pos:line="46" pos:column="33">DatabaseConnection</name><op:operator pos:line="46" pos:column="51">.</op:operator><name pos:line="46" pos:column="52">getConnection</name></name><argument_list pos:line="46" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="47" pos:column="25">s</name> <op:operator pos:line="47" pos:column="27">=</op:operator> <call><name><name pos:line="47" pos:column="29">_conn</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">createStatement</name></name><argument_list pos:line="47" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="48" pos:column="25">//_conn.setAutoCommit(false);</comment>
			<decl_stmt><decl><type><name pos:line="49" pos:column="25">int</name></type> <name pos:line="49" pos:column="29">i</name> <init pos:line="49" pos:column="31">=<expr><lit:literal type="number" pos:line="49" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">s</name><op:operator pos:line="51" pos:column="26">.</op:operator><name pos:line="51" pos:column="27">execute</name></name><argument_list pos:line="51" pos:column="34">(
					  <argument><expr><lit:literal type="string" pos:line="52" pos:column="43">"create table educationmap(LEVEL int NOT NULL, EDUCATION char(50), PRIMARY KEY (LEVEL))"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="54" pos:column="25">s</name><op:operator pos:line="54" pos:column="26">.</op:operator><name pos:line="54" pos:column="27">execute</name></name><argument_list pos:line="54" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="35">"insert into educationmap values (0, ' Children')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="55" pos:column="25">s</name><op:operator pos:line="55" pos:column="26">.</op:operator><name pos:line="55" pos:column="27">execute</name></name><argument_list pos:line="55" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="35">"insert into educationmap values (1, ' Less than 1st grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="56" pos:column="25">s</name><op:operator pos:line="56" pos:column="26">.</op:operator><name pos:line="56" pos:column="27">execute</name></name><argument_list pos:line="56" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="35">"insert into educationmap values (2, ' 1st 2nd 3rd or 4th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="57" pos:column="25">s</name><op:operator pos:line="57" pos:column="26">.</op:operator><name pos:line="57" pos:column="27">execute</name></name><argument_list pos:line="57" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="35">"insert into educationmap values (3, ' 5th or 6th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="58" pos:column="25">s</name><op:operator pos:line="58" pos:column="26">.</op:operator><name pos:line="58" pos:column="27">execute</name></name><argument_list pos:line="58" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="35">"insert into educationmap values (4, ' 7th and 8th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">s</name><op:operator pos:line="59" pos:column="26">.</op:operator><name pos:line="59" pos:column="27">execute</name></name><argument_list pos:line="59" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="35">"insert into educationmap values (5, ' 9th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">s</name><op:operator pos:line="60" pos:column="26">.</op:operator><name pos:line="60" pos:column="27">execute</name></name><argument_list pos:line="60" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="35">"insert into educationmap values (6, ' 10th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">s</name><op:operator pos:line="61" pos:column="26">.</op:operator><name pos:line="61" pos:column="27">execute</name></name><argument_list pos:line="61" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="35">"insert into educationmap values (7, ' 11th grade')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="62" pos:column="25">s</name><op:operator pos:line="62" pos:column="26">.</op:operator><name pos:line="62" pos:column="27">execute</name></name><argument_list pos:line="62" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="35">"insert into educationmap values (8, ' 12th grade no diploma')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="63" pos:column="25">s</name><op:operator pos:line="63" pos:column="26">.</op:operator><name pos:line="63" pos:column="27">execute</name></name><argument_list pos:line="63" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="35">"insert into educationmap values (9, ' High school graduate')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="64" pos:column="25">s</name><op:operator pos:line="64" pos:column="26">.</op:operator><name pos:line="64" pos:column="27">execute</name></name><argument_list pos:line="64" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="35">"insert into educationmap values (10, ' Some college but no degree')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="65" pos:column="25">s</name><op:operator pos:line="65" pos:column="26">.</op:operator><name pos:line="65" pos:column="27">execute</name></name><argument_list pos:line="65" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="35">"insert into educationmap values (11, ' Associates degree-occup /vocational')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="66" pos:column="25">s</name><op:operator pos:line="66" pos:column="26">.</op:operator><name pos:line="66" pos:column="27">execute</name></name><argument_list pos:line="66" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="35">"insert into educationmap values (12, ' Associates degree-academic program')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="67" pos:column="25">s</name><op:operator pos:line="67" pos:column="26">.</op:operator><name pos:line="67" pos:column="27">execute</name></name><argument_list pos:line="67" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="35">"insert into educationmap values (13, ' Prof school degree (MD DDS DVM LLB JD)')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="68" pos:column="25">s</name><op:operator pos:line="68" pos:column="26">.</op:operator><name pos:line="68" pos:column="27">execute</name></name><argument_list pos:line="68" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="35">"insert into educationmap values (14, ' Bachelors degree(BA AB BS)')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="69" pos:column="25">s</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">execute</name></name><argument_list pos:line="69" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="35">"insert into educationmap values (15, ' Masters degree(MA MS MEng MEd MSW MBA)')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">s</name><op:operator pos:line="70" pos:column="26">.</op:operator><name pos:line="70" pos:column="27">execute</name></name><argument_list pos:line="70" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="35">"insert into educationmap values (16, ' Doctorate degree(PhD EdD)')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			
			
			<expr_stmt><expr><name pos:line="73" pos:column="25">rs</name> <op:operator pos:line="73" pos:column="28">=</op:operator> <call><name><name pos:line="73" pos:column="30">s</name><op:operator pos:line="73" pos:column="31">.</op:operator><name pos:line="73" pos:column="32">executeQuery</name></name><argument_list pos:line="73" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="73" pos:column="45">"SELECT level, education FROM educationmap"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><op:operator pos:line="75" pos:column="29">!</op:operator><call><name><name pos:line="75" pos:column="30">rs</name><op:operator pos:line="75" pos:column="32">.</op:operator><name pos:line="75" pos:column="33">next</name></name><argument_list pos:line="75" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="75" pos:column="40">
			<block pos:line="76" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">UtilitiesReq19_24</name><op:operator pos:line="77" pos:column="50">.</op:operator><name pos:line="77" pos:column="51">reportFailure</name></name><argument_list pos:line="77" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="65">"No rows in ResultSet. No data found in internal educationmap table."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="78" pos:column="33">return;</return>
			}</block></then></if>
			
			<do pos:line="81" pos:column="25">do<block pos:line="81" pos:column="27">{
				<expr_stmt><expr><name><name pos:line="82" pos:column="33">educationArray</name><index pos:line="82" pos:column="47">[<expr><name pos:line="82" pos:column="48">i</name><op:operator pos:line="82" pos:column="49">++</op:operator></expr>]</index></name> <op:operator pos:line="82" pos:column="53">=</op:operator> <call><name><name pos:line="82" pos:column="55">rs</name><op:operator pos:line="82" pos:column="57">.</op:operator><name pos:line="82" pos:column="58">getString</name></name><argument_list pos:line="82" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="68">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>while<condition pos:line="83" pos:column="31">(<expr><call><name><name pos:line="83" pos:column="32">rs</name><op:operator pos:line="83" pos:column="34">.</op:operator><name pos:line="83" pos:column="35">next</name></name><argument_list pos:line="83" pos:column="39">()</argument_list></call></expr>)</condition>;</do>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">s</name><op:operator pos:line="84" pos:column="26">.</op:operator><name pos:line="84" pos:column="27">execute</name></name><argument_list pos:line="84" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="35">"drop table educationmap"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="86" pos:column="25">rs</name><op:operator pos:line="86" pos:column="27">.</op:operator><name pos:line="86" pos:column="28">close</name></name><argument_list pos:line="86" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="87" pos:column="25">//s.comit();</comment>
			<expr_stmt><expr><call><name><name pos:line="88" pos:column="25">s</name><op:operator pos:line="88" pos:column="26">.</op:operator><name pos:line="88" pos:column="27">close</name></name><argument_list pos:line="88" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="89" pos:column="11">catch <parameter_list pos:line="89" pos:column="17">(<param><decl><type><name pos:line="89" pos:column="18">SQLException</name></type> <name pos:line="89" pos:column="31">e</name></decl></param>)</parameter_list>
		<block pos:line="90" pos:column="17">{
        	<expr_stmt><expr><call><name><name pos:line="91" pos:column="17">UtilitiesReq19_24</name><op:operator pos:line="91" pos:column="34">.</op:operator><name pos:line="91" pos:column="35">printExceptionText</name></name><argument_list pos:line="91" pos:column="53">(<argument><expr><name pos:line="91" pos:column="54">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="93" pos:column="9">return;</return>
	}</block></function>

<comment type="line" pos:line="96" pos:column="1">//  ########################### FIND TOP STATES ###################################</comment>

     <function><type><specifier pos:line="98" pos:column="6">public</specifier> <name><name pos:line="98" pos:column="13">ArrayList</name><argument_list pos:line="98" pos:column="22">&lt;<argument><name pos:line="98" pos:column="23">String</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="31">FindTopStatesByCategory</name><parameter_list pos:line="98" pos:column="54">(<param><decl><type><name pos:line="98" pos:column="55">String</name></type> <name pos:line="98" pos:column="62">selection</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="73">String</name></type> <name pos:line="98" pos:column="80">category</name></decl></param> )</parameter_list> <block pos:line="98" pos:column="91">{
      <comment type="line" pos:line="99" pos:column="7">//Select top 5 states that have the most workers based on occupation category</comment>
      <decl_stmt><decl><type><name pos:line="100" pos:column="7">ResultSet</name></type> <name pos:line="100" pos:column="17">rs</name> <init pos:line="100" pos:column="20">= <expr><lit:literal type="null" pos:line="100" pos:column="22">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="101" pos:column="7">ArrayList</name><argument_list pos:line="101" pos:column="16">&lt;<argument><name pos:line="101" pos:column="17">String</name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="25">findBestStatesResult</name> <init pos:line="101" pos:column="46">= <expr><op:operator pos:line="101" pos:column="48">new</op:operator> <call><name><name pos:line="101" pos:column="52">ArrayList</name><argument_list pos:line="101" pos:column="61">&lt;<argument><name pos:line="101" pos:column="62">String</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="102" pos:column="7">int</name></type> <name pos:line="102" pos:column="11">i</name> <init pos:line="102" pos:column="13">=<expr><lit:literal type="number" pos:line="102" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="103" pos:column="7">ArrayList</name><argument_list pos:line="103" pos:column="16">&lt;<argument><name pos:line="103" pos:column="17">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="26">code</name> <init pos:line="103" pos:column="31">= <expr><op:operator pos:line="103" pos:column="33">new</op:operator> <call><name><name pos:line="103" pos:column="37">ArrayList</name><argument_list pos:line="103" pos:column="46">&lt;<argument><name pos:line="103" pos:column="47">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="103" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try pos:line="104" pos:column="7">try<block pos:line="104" pos:column="10">{
       <expr_stmt><expr><name pos:line="105" pos:column="8">_conn</name> <op:operator pos:line="105" pos:column="14">=</op:operator> <call><name><name pos:line="105" pos:column="16">DatabaseConnection</name><op:operator pos:line="105" pos:column="34">.</op:operator><name pos:line="105" pos:column="35">getConnection</name></name><argument_list pos:line="105" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name pos:line="106" pos:column="8">s</name> <op:operator pos:line="106" pos:column="10">=</op:operator> <call><name><name pos:line="106" pos:column="12">_conn</name><op:operator pos:line="106" pos:column="17">.</op:operator><name pos:line="106" pos:column="18">createStatement</name></name><argument_list pos:line="106" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name pos:line="107" pos:column="8">rs</name> <op:operator pos:line="107" pos:column="11">=</op:operator> <call><name><name pos:line="107" pos:column="13">s</name><op:operator pos:line="107" pos:column="14">.</op:operator><name pos:line="107" pos:column="15">executeQuery</name></name><argument_list pos:line="107" pos:column="27">(     
              <argument><expr><lit:literal type="string" pos:line="108" pos:column="15">"SELECT "</lit:literal> <op:operator pos:line="108" pos:column="25">+</op:operator> <name pos:line="108" pos:column="27">selection</name> <op:operator pos:line="108" pos:column="37">+</op:operator><lit:literal type="string" pos:line="108" pos:column="38">"code FROM "</lit:literal> <op:operator pos:line="108" pos:column="51">+</op:operator> <name pos:line="108" pos:column="53">selection</name> <op:operator pos:line="108" pos:column="63">+</op:operator> <lit:literal type="string" pos:line="108" pos:column="65">" WHERE  "</lit:literal> <op:operator pos:line="108" pos:column="76">+</op:operator> <name pos:line="108" pos:column="78">selection</name> <op:operator pos:line="108" pos:column="88">+</op:operator><lit:literal type="string" pos:line="108" pos:column="89">"="</lit:literal><op:operator pos:line="108" pos:column="92">+</op:operator> <name pos:line="108" pos:column="94">category</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
       <if pos:line="109" pos:column="8">if <condition pos:line="109" pos:column="11">(<expr><op:operator pos:line="109" pos:column="12">!</op:operator><call><name><name pos:line="109" pos:column="13">rs</name><op:operator pos:line="109" pos:column="15">.</op:operator><name pos:line="109" pos:column="16">next</name></name><argument_list pos:line="109" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="109" pos:column="23">
       <block pos:line="110" pos:column="8">{
    	   <expr_stmt><expr><call><name><name pos:line="111" pos:column="12">UtilitiesReq19_24</name><op:operator pos:line="111" pos:column="29">.</op:operator><name pos:line="111" pos:column="30">reportFailure</name></name><argument_list pos:line="111" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="44">"No rows in ResultSet"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="112" pos:column="17">return <expr><name pos:line="112" pos:column="24">findBestStatesResult</name></expr>;</return>
       }</block></then></if>
       <do pos:line="114" pos:column="8">do<block pos:line="114" pos:column="10">{
          <expr_stmt><expr><call><name><name pos:line="115" pos:column="11">code</name><op:operator pos:line="115" pos:column="15">.</op:operator><name pos:line="115" pos:column="16">add</name></name><argument_list pos:line="115" pos:column="19">(<argument><expr><call><name><name pos:line="115" pos:column="20">rs</name><op:operator pos:line="115" pos:column="22">.</op:operator><name pos:line="115" pos:column="23">getInt</name></name><argument_list pos:line="115" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="115" pos:column="30">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="116" pos:column="11">i</name><op:operator pos:line="116" pos:column="12">++</op:operator></expr>;</expr_stmt>
       }</block>while<condition pos:line="117" pos:column="14">(<expr><call><name><name pos:line="117" pos:column="15">rs</name><op:operator pos:line="117" pos:column="17">.</op:operator><name pos:line="117" pos:column="18">next</name></name><argument_list pos:line="117" pos:column="22">()</argument_list></call></expr>)</condition>;</do>

       <expr_stmt><expr><call><name><name pos:line="119" pos:column="8">rs</name><op:operator pos:line="119" pos:column="10">.</op:operator><name pos:line="119" pos:column="11">close</name></name><argument_list pos:line="119" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name pos:line="120" pos:column="8">s</name><op:operator pos:line="120" pos:column="9">.</op:operator><name pos:line="120" pos:column="10">close</name></name><argument_list pos:line="120" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name pos:line="121" pos:column="8">findBestStatesResult</name> <op:operator pos:line="121" pos:column="29">=</op:operator> <call><name pos:line="121" pos:column="31">FindTopStatesByCode</name><argument_list pos:line="121" pos:column="50">( <argument><expr><name pos:line="121" pos:column="52">selection</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="63">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
     }</block> <catch pos:line="123" pos:column="8">catch <parameter_list pos:line="123" pos:column="14">(<param><decl><type><name pos:line="123" pos:column="15">SQLException</name></type> <name pos:line="123" pos:column="28">e</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
    	 <expr_stmt><expr><call><name><name pos:line="125" pos:column="10">UtilitiesReq19_24</name><op:operator pos:line="125" pos:column="27">.</op:operator><name pos:line="125" pos:column="28">printExceptionText</name></name><argument_list pos:line="125" pos:column="46">(<argument><expr><name pos:line="125" pos:column="47">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      <return pos:line="127" pos:column="7">return <expr><name pos:line="127" pos:column="14">findBestStatesResult</name></expr>;</return>
    }</block></function>

    <function><type><annotation pos:line="130" pos:column="5">@<name pos:line="130" pos:column="6">TaDaMethod</name><argument_list pos:line="130" pos:column="16">(<argument><expr><name pos:line="130" pos:column="17">variablesToTrack</name> <op:operator pos:line="130" pos:column="34">=</op:operator> <block pos:line="130" pos:column="36">{<expr><lit:literal type="string" pos:line="130" pos:column="37">"ssn"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="130" pos:column="45">correspondingDatabaseAttribute</name> <op:operator pos:line="130" pos:column="76">=</op:operator> <block pos:line="130" pos:column="78">{<expr><lit:literal type="string" pos:line="130" pos:column="79">"job.ssn"</lit:literal></expr>}</block></expr></argument> )</argument_list></annotation>
    <specifier pos:line="131" pos:column="5">public</specifier> <name><name pos:line="131" pos:column="12">ArrayList</name><argument_list pos:line="131" pos:column="21">&lt;<argument><name pos:line="131" pos:column="22">String</name></argument>&gt;</argument_list></name></type> <name pos:line="131" pos:column="30">FindTopStatesByCode</name><parameter_list pos:line="131" pos:column="49">(<param><decl><type><name pos:line="131" pos:column="50">String</name></type> <name pos:line="131" pos:column="57">selection</name></decl></param>, <param><decl><type><name><name pos:line="131" pos:column="68">ArrayList</name><argument_list pos:line="131" pos:column="77">&lt;<argument><name pos:line="131" pos:column="78">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="131" pos:column="87">code</name></decl></param>)</parameter_list> <block pos:line="131" pos:column="93">{
      <comment type="line" pos:line="132" pos:column="7">//Select top 5 states that have the most workers based on occupation/industry code</comment>
      <decl_stmt><decl><type><name pos:line="133" pos:column="7">ResultSet</name></type> <name pos:line="133" pos:column="17">rs</name> <init pos:line="133" pos:column="20">= <expr><lit:literal type="null" pos:line="133" pos:column="22">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="134" pos:column="7">ResultSet</name></type> <name pos:line="134" pos:column="17">rs1</name> <init pos:line="134" pos:column="21">= <expr><lit:literal type="null" pos:line="134" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="135" pos:column="7">int</name></type> <name pos:line="135" pos:column="11">ssn</name> <init pos:line="135" pos:column="15">= <expr><lit:literal type="number" pos:line="135" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="136" pos:column="7">String</name></type> <name pos:line="136" pos:column="14">zip</name> <init pos:line="136" pos:column="18">= <expr><lit:literal type="string" pos:line="136" pos:column="20">""</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="137" pos:column="7">String</name></type> <name pos:line="137" pos:column="14">state</name> <init pos:line="137" pos:column="20">= <expr><lit:literal type="string" pos:line="137" pos:column="22">""</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="138" pos:column="7">double</name><index pos:line="138" pos:column="13">[]</index></type> <name pos:line="138" pos:column="16">resultCount</name> <init pos:line="138" pos:column="28">= <expr><op:operator pos:line="138" pos:column="30">new</op:operator> <name><name pos:line="138" pos:column="34">double</name><index pos:line="138" pos:column="40">[<expr><lit:literal type="number" pos:line="138" pos:column="41">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="139" pos:column="7">String</name><index pos:line="139" pos:column="13">[]</index></type> <name pos:line="139" pos:column="16">resultStates</name><init pos:line="139" pos:column="28">= <expr><op:operator pos:line="139" pos:column="30">new</op:operator> <name><name pos:line="139" pos:column="34">String</name><index pos:line="139" pos:column="40">[<expr><lit:literal type="number" pos:line="139" pos:column="41">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="140" pos:column="7">int</name></type> <name pos:line="140" pos:column="11">resultIndex</name> <init pos:line="140" pos:column="23">= <expr><lit:literal type="number" pos:line="140" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="141" pos:column="7">int</name></type> <name pos:line="141" pos:column="11">stateIndex</name> <init pos:line="141" pos:column="22">=<expr><lit:literal type="number" pos:line="141" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="142" pos:column="7">ArrayList</name><argument_list pos:line="142" pos:column="16">&lt;<argument><name pos:line="142" pos:column="17">String</name></argument>&gt;</argument_list></name></type> <name pos:line="142" pos:column="25">findBestStatesResult</name> <init pos:line="142" pos:column="46">= <expr><op:operator pos:line="142" pos:column="48">new</op:operator> <call><name><name pos:line="142" pos:column="52">ArrayList</name><argument_list pos:line="142" pos:column="61">&lt;<argument><name pos:line="142" pos:column="62">String</name></argument>&gt;</argument_list></name><argument_list pos:line="142" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="143" pos:column="7">String</name></type> <name pos:line="143" pos:column="14">sqlQuery</name> <init pos:line="143" pos:column="23">=<expr><lit:literal type="string" pos:line="143" pos:column="24">"SELECT ssn FROM job WHERE "</lit:literal> <op:operator pos:line="143" pos:column="53">+</op:operator> <name pos:line="143" pos:column="55">selection</name> <op:operator pos:line="143" pos:column="65">+</op:operator><lit:literal type="string" pos:line="143" pos:column="66">"code IN ("</lit:literal></expr></init></decl>;</decl_stmt>
      <for pos:line="144" pos:column="7">for(<init><decl><type><name pos:line="144" pos:column="11">int</name></type> <name pos:line="144" pos:column="15">i</name><init pos:line="144" pos:column="16">=<expr><lit:literal type="number" pos:line="144" pos:column="17">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="144" pos:column="20">i</name><op:operator pos:line="144" pos:column="21">&lt;</op:operator><call><name><name pos:line="144" pos:column="22">code</name><op:operator pos:line="144" pos:column="26">.</op:operator><name pos:line="144" pos:column="27">size</name></name><argument_list pos:line="144" pos:column="31">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="144" pos:column="35">i</name><op:operator pos:line="144" pos:column="36">++</op:operator></expr></incr>)<block pos:line="144" pos:column="39">{
          <expr_stmt><expr><name pos:line="145" pos:column="11">sqlQuery</name><op:operator pos:line="145" pos:column="19">+=</op:operator><call><name><name pos:line="145" pos:column="21">code</name><op:operator pos:line="145" pos:column="25">.</op:operator><name pos:line="145" pos:column="26">get</name></name><argument_list pos:line="145" pos:column="29">(<argument><expr><name pos:line="145" pos:column="30">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="146" pos:column="11">if<condition pos:line="146" pos:column="13">(<expr><name pos:line="146" pos:column="14">i</name><op:operator pos:line="146" pos:column="15">&lt;</op:operator><call><name><name pos:line="146" pos:column="16">code</name><op:operator pos:line="146" pos:column="20">.</op:operator><name pos:line="146" pos:column="21">size</name></name><argument_list pos:line="146" pos:column="25">()</argument_list></call><op:operator pos:line="146" pos:column="27">-</op:operator><lit:literal type="number" pos:line="146" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="146" pos:column="30">
              <expr_stmt><expr><name pos:line="147" pos:column="15">sqlQuery</name><op:operator pos:line="147" pos:column="23">+=</op:operator><lit:literal type="string" pos:line="147" pos:column="25">", "</lit:literal></expr>;</expr_stmt></then></if>
      }</block></for>
      <expr_stmt><expr><name pos:line="149" pos:column="7">sqlQuery</name><op:operator pos:line="149" pos:column="15">+=</op:operator><lit:literal type="string" pos:line="149" pos:column="17">")"</lit:literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name pos:line="151" pos:column="7">HashMap</name><argument_list pos:line="151" pos:column="14">&lt;<argument><name pos:line="151" pos:column="15">String</name></argument>, <argument><name pos:line="151" pos:column="23">String</name></argument>&gt;</argument_list></name></type> <name pos:line="151" pos:column="31">zipToStateMap</name> <init pos:line="151" pos:column="45">= <expr><op:operator pos:line="151" pos:column="47">new</op:operator> <call><name><name pos:line="151" pos:column="51">HashMap</name><argument_list pos:line="151" pos:column="58">&lt;<argument><name pos:line="151" pos:column="59">String</name></argument>, <argument><name pos:line="151" pos:column="67">String</name></argument>&gt;</argument_list></name><argument_list pos:line="151" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="152" pos:column="7">HashMap</name><argument_list pos:line="152" pos:column="14">&lt;<argument><name pos:line="152" pos:column="15">Integer</name></argument>, <argument><name pos:line="152" pos:column="24">String</name></argument>&gt;</argument_list></name></type> <name pos:line="152" pos:column="32">ssnToZipMap</name> <init pos:line="152" pos:column="44">= <expr><op:operator pos:line="152" pos:column="46">new</op:operator> <call><name><name pos:line="152" pos:column="50">HashMap</name><argument_list pos:line="152" pos:column="57">&lt;<argument><name pos:line="152" pos:column="58">Integer</name></argument>, <argument><name pos:line="152" pos:column="67">String</name></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
      <expr_stmt><expr><call><name pos:line="154" pos:column="7">initializeSsnToZipMap</name><argument_list pos:line="154" pos:column="28">(<argument><expr><name pos:line="154" pos:column="29">ssnToZipMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name pos:line="156" pos:column="7">initializeZipToStateMap</name><argument_list pos:line="156" pos:column="30">(<argument><expr><name pos:line="156" pos:column="31">zipToStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         
      <try pos:line="158" pos:column="7">try<block pos:line="158" pos:column="10">{
        <expr_stmt><expr><name pos:line="159" pos:column="9">_conn</name> <op:operator pos:line="159" pos:column="15">=</op:operator> <call><name><name pos:line="159" pos:column="17">DatabaseConnection</name><op:operator pos:line="159" pos:column="35">.</op:operator><name pos:line="159" pos:column="36">getConnection</name></name><argument_list pos:line="159" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name pos:line="160" pos:column="9">s</name> <op:operator pos:line="160" pos:column="11">=</op:operator> <call><name><name pos:line="160" pos:column="13">_conn</name><op:operator pos:line="160" pos:column="18">.</op:operator><name pos:line="160" pos:column="19">createStatement</name></name><argument_list pos:line="160" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="162" pos:column="9">rs</name> <op:operator pos:line="162" pos:column="12">=</op:operator> <call><name><name pos:line="162" pos:column="14">s</name><op:operator pos:line="162" pos:column="15">.</op:operator><name pos:line="162" pos:column="16">executeQuery</name></name><argument_list pos:line="162" pos:column="28">(<argument><expr><name pos:line="162" pos:column="29">sqlQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if pos:line="164" pos:column="9">if <condition pos:line="164" pos:column="12">(<expr><op:operator pos:line="164" pos:column="13">!</op:operator><call><name><name pos:line="164" pos:column="14">rs</name><op:operator pos:line="164" pos:column="16">.</op:operator><name pos:line="164" pos:column="17">next</name></name><argument_list pos:line="164" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="164" pos:column="24">
        <block pos:line="165" pos:column="9">{
        	<expr_stmt><expr><call><name><name pos:line="166" pos:column="17">UtilitiesReq19_24</name><op:operator pos:line="166" pos:column="34">.</op:operator><name pos:line="166" pos:column="35">reportFailure</name></name><argument_list pos:line="166" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="49">"No rows in ResultSet. No SSN for code: "</lit:literal> <op:operator pos:line="166" pos:column="91">+</op:operator> <name pos:line="166" pos:column="93">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="167" pos:column="17">return <expr><name pos:line="167" pos:column="24">findBestStatesResult</name></expr>;</return>
        }</block></then></if>
        <do pos:line="169" pos:column="9">do<block pos:line="169" pos:column="11">{
          <comment type="line" pos:line="170" pos:column="11">//System.out.println("SSN: " + rs.getInt(1));</comment>
          <expr_stmt><expr><name pos:line="171" pos:column="11">ssn</name> <op:operator pos:line="171" pos:column="15">=</op:operator> <call><name><name pos:line="171" pos:column="17">rs</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">getInt</name></name><argument_list pos:line="171" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="171" pos:column="27">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <expr_stmt><expr><name pos:line="173" pos:column="11">zip</name> <op:operator pos:line="173" pos:column="15">=</op:operator> <call><name><name pos:line="173" pos:column="17">ssnToZipMap</name><op:operator pos:line="173" pos:column="28">.</op:operator><name pos:line="173" pos:column="29">get</name></name><argument_list pos:line="173" pos:column="32">(<argument><expr><name pos:line="173" pos:column="33">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="174" pos:column="11">if<condition pos:line="174" pos:column="13">(<expr><name pos:line="174" pos:column="14">zip</name><op:operator pos:line="174" pos:column="17">==</op:operator><lit:literal type="null" pos:line="174" pos:column="19">null</lit:literal></expr>)</condition><then pos:line="174" pos:column="24">
             <continue pos:line="175" pos:column="14">continue;</continue></then></if>
          <expr_stmt><expr><name pos:line="176" pos:column="11">state</name> <op:operator pos:line="176" pos:column="17">=</op:operator> <call><name><name pos:line="176" pos:column="19">zipToStateMap</name><op:operator pos:line="176" pos:column="32">.</op:operator><name pos:line="176" pos:column="33">get</name></name><argument_list pos:line="176" pos:column="36">(<argument><expr><name pos:line="176" pos:column="37">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="177" pos:column="11">if<condition pos:line="177" pos:column="13">(<expr><name pos:line="177" pos:column="14">state</name><op:operator pos:line="177" pos:column="19">==</op:operator><lit:literal type="null" pos:line="177" pos:column="21">null</lit:literal></expr>)</condition><then pos:line="177" pos:column="26">
             <continue pos:line="178" pos:column="14">continue;</continue></then></if>
          <expr_stmt><expr><name pos:line="179" pos:column="11">stateIndex</name> <op:operator pos:line="179" pos:column="22">=</op:operator> <call><name pos:line="179" pos:column="24">getStateIndex</name><argument_list pos:line="179" pos:column="37">(<argument><expr><name pos:line="179" pos:column="38">resultStates</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="180" pos:column="11">if<condition pos:line="180" pos:column="13">( <expr><name pos:line="180" pos:column="15">stateIndex</name> <op:operator pos:line="180" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="180" pos:column="28">50</lit:literal></expr>)</condition><then><block pos:line="180" pos:column="31">{
            <comment type="line" pos:line="181" pos:column="13">//System.out.println("Increasing count for state: " + resultStates[stateIndex] + " with index: " + stateIndex);</comment>
            <expr_stmt><expr><name><name pos:line="182" pos:column="13">resultCount</name><index pos:line="182" pos:column="24">[<expr><name pos:line="182" pos:column="25">stateIndex</name></expr>]</index></name><op:operator pos:line="182" pos:column="36">++</op:operator></expr>;</expr_stmt>
          }</block></then>
          <else pos:line="184" pos:column="11">else<block pos:line="184" pos:column="15">{
            <comment type="line" pos:line="185" pos:column="13">//System.out.println("stateIndex: " + stateIndex);</comment>
            <expr_stmt><expr><name><name pos:line="186" pos:column="13">resultCount</name><index pos:line="186" pos:column="24">[<expr><name pos:line="186" pos:column="25">resultIndex</name></expr>]</index></name><op:operator pos:line="186" pos:column="37">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="187" pos:column="13">resultStates</name><index pos:line="187" pos:column="25">[<expr><name pos:line="187" pos:column="26">resultIndex</name></expr>]</index></name> <op:operator pos:line="187" pos:column="39">=</op:operator> <name pos:line="187" pos:column="41">state</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="188" pos:column="13">resultIndex</name><op:operator pos:line="188" pos:column="24">++</op:operator></expr>;</expr_stmt>
          }</block></else></if>         
          
       }</block>while<condition pos:line="191" pos:column="14">(<expr><call><name><name pos:line="191" pos:column="15">rs</name><op:operator pos:line="191" pos:column="17">.</op:operator><name pos:line="191" pos:column="18">next</name></name><argument_list pos:line="191" pos:column="22">()</argument_list></call></expr>)</condition>;</do>
      
        <expr_stmt><expr><name pos:line="193" pos:column="9">findBestStatesResult</name> <op:operator pos:line="193" pos:column="30">=</op:operator> <call><name pos:line="193" pos:column="32">FindBestStates</name><argument_list pos:line="193" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="47">5</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="50">resultStates</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="64">resultCount</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="77">resultIndex</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="193" pos:column="90">" Number of workers: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name pos:line="194" pos:column="8">rs</name><op:operator pos:line="194" pos:column="10">.</op:operator><name pos:line="194" pos:column="11">close</name></name><argument_list pos:line="194" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name pos:line="195" pos:column="8">s</name><op:operator pos:line="195" pos:column="9">.</op:operator><name pos:line="195" pos:column="10">close</name></name><argument_list pos:line="195" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch pos:line="196" pos:column="9">catch <parameter_list pos:line="196" pos:column="15">(<param><decl><type><name pos:line="196" pos:column="16">SQLException</name></type> <name pos:line="196" pos:column="29">e</name></decl></param>)</parameter_list>
        <block pos:line="197" pos:column="9">{
    	  <expr_stmt><expr><call><name><name pos:line="198" pos:column="11">UtilitiesReq19_24</name><op:operator pos:line="198" pos:column="28">.</op:operator><name pos:line="198" pos:column="29">printExceptionText</name></name><argument_list pos:line="198" pos:column="47">(<argument><expr><name pos:line="198" pos:column="48">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try> 
      <return pos:line="200" pos:column="7">return <expr><name pos:line="200" pos:column="14">findBestStatesResult</name></expr>;</return>
   }</block></function>

    
    <function><type><specifier pos:line="204" pos:column="5">private</specifier> <name><name pos:line="204" pos:column="13">ArrayList</name><argument_list pos:line="204" pos:column="22">&lt;<argument><name pos:line="204" pos:column="23">String</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="31">FindBestStates</name><parameter_list pos:line="204" pos:column="45">(<param><decl><type><name pos:line="204" pos:column="46">int</name></type> <name pos:line="204" pos:column="50">numResults</name></decl></param>, <param><decl><type><name><name pos:line="204" pos:column="62">String</name><index pos:line="204" pos:column="68">[]</index></name></type> <name pos:line="204" pos:column="71">resultStates</name></decl></param>, <param><decl><type><name><name pos:line="204" pos:column="85">double</name><index pos:line="204" pos:column="91">[]</index></name></type> <name pos:line="204" pos:column="94">resultValues</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="108">int</name></type> <name pos:line="204" pos:column="112">resultIndex</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="125">String</name></type> <name pos:line="204" pos:column="132">text</name></decl></param>)</parameter_list><block pos:line="204" pos:column="137">{

       <decl_stmt><decl><type><name pos:line="206" pos:column="8">double</name></type> <name pos:line="206" pos:column="15">maxValue</name> <init pos:line="206" pos:column="24">=<expr><lit:literal type="number" pos:line="206" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="207" pos:column="8">int</name></type> <name pos:line="207" pos:column="12">maxIndex</name> <init pos:line="207" pos:column="21">=<expr><lit:literal type="number" pos:line="207" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="208" pos:column="8">int</name></type> <name pos:line="208" pos:column="12">j</name><init pos:line="208" pos:column="13">=<expr><lit:literal type="number" pos:line="208" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name pos:line="209" pos:column="8">ArrayList</name><argument_list pos:line="209" pos:column="17">&lt;<argument><name pos:line="209" pos:column="18">String</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="26">findBestStatesResult</name> <init pos:line="209" pos:column="47">= <expr><op:operator pos:line="209" pos:column="49">new</op:operator> <call><name><name pos:line="209" pos:column="53">ArrayList</name><argument_list pos:line="209" pos:column="62">&lt;<argument><name pos:line="209" pos:column="63">String</name></argument>&gt;</argument_list></name><argument_list pos:line="209" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
       
       <expr_stmt><expr><call><name><name pos:line="211" pos:column="8">System</name><op:operator pos:line="211" pos:column="14">.</op:operator><name pos:line="211" pos:column="15">out</name><op:operator pos:line="211" pos:column="18">.</op:operator><name pos:line="211" pos:column="19">println</name></name><argument_list pos:line="211" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="27">"\nThe best states are: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
       <for pos:line="212" pos:column="8">for(<init><decl><type><name pos:line="212" pos:column="12">int</name></type> <name pos:line="212" pos:column="16">i</name><init pos:line="212" pos:column="17">=<expr><lit:literal type="number" pos:line="212" pos:column="18">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="212" pos:column="21">i</name><op:operator pos:line="212" pos:column="22">&lt;</op:operator><name pos:line="212" pos:column="23">numResults</name></expr>;</condition> <incr><expr><name pos:line="212" pos:column="35">i</name><op:operator pos:line="212" pos:column="36">++</op:operator></expr></incr>)<block pos:line="212" pos:column="39">{
          <for pos:line="213" pos:column="11">for(<init><expr><name pos:line="213" pos:column="15">j</name><op:operator pos:line="213" pos:column="16">=</op:operator><lit:literal type="number" pos:line="213" pos:column="17">0</lit:literal></expr>;</init> <condition><expr><name pos:line="213" pos:column="20">j</name><op:operator pos:line="213" pos:column="21">&lt;</op:operator><name pos:line="213" pos:column="22">resultIndex</name></expr>;</condition> <incr><expr><name pos:line="213" pos:column="35">j</name><op:operator pos:line="213" pos:column="36">++</op:operator></expr></incr>)<block pos:line="213" pos:column="39">{
             <if pos:line="214" pos:column="14">if<condition pos:line="214" pos:column="16">(<expr><name pos:line="214" pos:column="17">maxValue</name> <op:operator pos:line="214" pos:column="26">&lt;</op:operator> <name><name pos:line="214" pos:column="28">resultValues</name><index pos:line="214" pos:column="40">[<expr><name pos:line="214" pos:column="41">j</name></expr>]</index></name></expr>)</condition><then><block pos:line="214" pos:column="44">{
                <expr_stmt><expr><name pos:line="215" pos:column="17">maxValue</name> <op:operator pos:line="215" pos:column="26">=</op:operator> <name><name pos:line="215" pos:column="28">resultValues</name><index pos:line="215" pos:column="40">[<expr><name pos:line="215" pos:column="41">j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="216" pos:column="17">maxIndex</name><op:operator pos:line="216" pos:column="25">=</op:operator><name pos:line="216" pos:column="26">j</name></expr>;</expr_stmt>
             }</block></then></if>
          }</block></for>

          <if pos:line="220" pos:column="11">if<condition pos:line="220" pos:column="13">(<expr><name pos:line="220" pos:column="14">maxValue</name> <op:operator pos:line="220" pos:column="23">!=</op:operator> <lit:literal type="number" pos:line="220" pos:column="26">0</lit:literal></expr>)</condition><then><block pos:line="220" pos:column="28">{
        	<expr_stmt><expr><call><name><name pos:line="221" pos:column="17">findBestStatesResult</name><op:operator pos:line="221" pos:column="37">.</op:operator><name pos:line="221" pos:column="38">add</name></name><argument_list pos:line="221" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="42">"State: "</lit:literal> <op:operator pos:line="221" pos:column="52">+</op:operator> <name><name pos:line="221" pos:column="54">resultStates</name><index pos:line="221" pos:column="66">[<expr><name pos:line="221" pos:column="67">maxIndex</name></expr>]</index></name> <op:operator pos:line="221" pos:column="77">+</op:operator> <name pos:line="221" pos:column="79">text</name> <op:operator pos:line="221" pos:column="84">+</op:operator> <name pos:line="221" pos:column="86">maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="222" pos:column="13">System</name><op:operator pos:line="222" pos:column="19">.</op:operator><name pos:line="222" pos:column="20">out</name><op:operator pos:line="222" pos:column="23">.</op:operator><name pos:line="222" pos:column="24">println</name></name><argument_list pos:line="222" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="32">"State: "</lit:literal> <op:operator pos:line="222" pos:column="42">+</op:operator> <name><name pos:line="222" pos:column="44">resultStates</name><index pos:line="222" pos:column="56">[<expr><name pos:line="222" pos:column="57">maxIndex</name></expr>]</index></name> <op:operator pos:line="222" pos:column="67">+</op:operator> <name pos:line="222" pos:column="69">text</name> <op:operator pos:line="222" pos:column="74">+</op:operator> <name pos:line="222" pos:column="76">maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="223" pos:column="13">System</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">out</name><op:operator pos:line="223" pos:column="23">.</op:operator><name pos:line="223" pos:column="24">println</name></name><argument_list pos:line="223" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="32">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="224" pos:column="13">maxValue</name> <op:operator pos:line="224" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="224" pos:column="24">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="225" pos:column="13">resultValues</name><index pos:line="225" pos:column="25">[<expr><name pos:line="225" pos:column="26">maxIndex</name></expr>]</index></name> <op:operator pos:line="225" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="225" pos:column="38">0</lit:literal></expr>;</expr_stmt>
          }</block></then></if>
       }</block></for>
       <expr_stmt><expr><call><name><name pos:line="228" pos:column="8">System</name><op:operator pos:line="228" pos:column="14">.</op:operator><name pos:line="228" pos:column="15">out</name><op:operator pos:line="228" pos:column="18">.</op:operator><name pos:line="228" pos:column="19">println</name></name><argument_list pos:line="228" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="228" pos:column="27">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return pos:line="229" pos:column="8">return <expr><name pos:line="229" pos:column="15">findBestStatesResult</name></expr>;</return>
    }</block></function>
    <function><type><specifier pos:line="231" pos:column="5">private</specifier> <name pos:line="231" pos:column="13">int</name></type> <name pos:line="231" pos:column="17">getStateIndex</name><parameter_list pos:line="231" pos:column="30">(<param><decl><type><name><name pos:line="231" pos:column="31">String</name><index pos:line="231" pos:column="37">[]</index></name></type> <name pos:line="231" pos:column="40">states</name></decl></param>, <param><decl><type><name pos:line="231" pos:column="48">String</name></type> <name pos:line="231" pos:column="55">state</name></decl></param>)</parameter_list>
    <block pos:line="232" pos:column="5">{
       <decl_stmt><decl><type><name pos:line="233" pos:column="8">int</name></type> <name pos:line="233" pos:column="12">i</name><init pos:line="233" pos:column="13">=<expr><lit:literal type="number" pos:line="233" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
       <comment type="line" pos:line="234" pos:column="8">//System.out.println("State passed to getStateIndex: " + state);</comment>
       <for pos:line="235" pos:column="8">for(<init><expr><name pos:line="235" pos:column="12">i</name><op:operator pos:line="235" pos:column="13">=</op:operator><lit:literal type="number" pos:line="235" pos:column="14">0</lit:literal></expr>;</init> <condition><expr><name pos:line="235" pos:column="17">i</name><op:operator pos:line="235" pos:column="18">&lt;</op:operator><lit:literal type="number" pos:line="235" pos:column="19">50</lit:literal></expr>;</condition> <incr><expr><name pos:line="235" pos:column="23">i</name><op:operator pos:line="235" pos:column="24">++</op:operator></expr></incr>)
       <block pos:line="236" pos:column="8">{
        <comment type="line" pos:line="237" pos:column="9">//System.out.println("State[" +i+ "] passed to getStateIndex: " + states[i]);</comment>
        <if pos:line="238" pos:column="9">if<condition pos:line="238" pos:column="11">(<expr><name><name pos:line="238" pos:column="12">states</name><index pos:line="238" pos:column="18">[<expr><name pos:line="238" pos:column="19">i</name></expr>]</index></name><op:operator pos:line="238" pos:column="21">==</op:operator><lit:literal type="null" pos:line="238" pos:column="23">null</lit:literal> <op:operator pos:line="238" pos:column="28">||</op:operator> <name pos:line="238" pos:column="31">state</name> <op:operator pos:line="238" pos:column="37">==</op:operator> <lit:literal type="null" pos:line="238" pos:column="40">null</lit:literal></expr>)</condition><then pos:line="238" pos:column="45">
           <continue pos:line="239" pos:column="12">continue;</continue></then></if>

        <if pos:line="241" pos:column="9">if<condition pos:line="241" pos:column="11">(<expr><name><name pos:line="241" pos:column="12">states</name><index pos:line="241" pos:column="18">[<expr><name pos:line="241" pos:column="19">i</name></expr>]</index></name><op:operator pos:line="241" pos:column="21">.</op:operator><call><name pos:line="241" pos:column="22">equals</name><argument_list pos:line="241" pos:column="28">(<argument><expr><name pos:line="241" pos:column="29">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="36">
          <return pos:line="242" pos:column="11">return <expr><name pos:line="242" pos:column="18">i</name></expr>;</return></then></if>
       }</block></for>
       <return pos:line="244" pos:column="8">return <expr><name pos:line="244" pos:column="15">i</name></expr>;</return>
    }</block></function>

<comment type="line" pos:line="247" pos:column="1">// #########################RECOMMEND BEST STATE TO WORK ######################</comment>
    <function><type><annotation pos:line="248" pos:column="5">@<name pos:line="248" pos:column="6">TaDaMethod</name><argument_list pos:line="248" pos:column="16">(<argument><expr><name pos:line="248" pos:column="17">variablesToTrack</name> <op:operator pos:line="248" pos:column="34">=</op:operator> <block pos:line="248" pos:column="36">{<expr><lit:literal type="string" pos:line="248" pos:column="37">"code"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="248" pos:column="46">correspondingDatabaseAttribute</name> <op:operator pos:line="248" pos:column="77">=</op:operator> <block pos:line="248" pos:column="79">{<expr><lit:literal type="string" pos:line="248" pos:column="80">"job.occupationcode"</lit:literal></expr>}</block></expr></argument> )</argument_list></annotation>
    <specifier pos:line="249" pos:column="5">public</specifier> <name><name pos:line="249" pos:column="12">ArrayList</name><argument_list pos:line="249" pos:column="21">&lt;<argument><name pos:line="249" pos:column="22">String</name></argument>&gt;</argument_list></name></type> <name pos:line="249" pos:column="30">RecommendBestStateToWork</name><parameter_list pos:line="249" pos:column="54">(<param><decl><type><name pos:line="249" pos:column="55">int</name></type> <name pos:line="249" pos:column="59">ssn</name></decl></param>)</parameter_list><block pos:line="249" pos:column="63">{

        <decl_stmt><decl><type><name pos:line="251" pos:column="9">ResultSet</name></type> <name pos:line="251" pos:column="19">rs</name> <init pos:line="251" pos:column="22">= <expr><lit:literal type="null" pos:line="251" pos:column="24">null</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="252" pos:column="9">String</name><index pos:line="252" pos:column="15">[]</index></type> <name pos:line="252" pos:column="18">resultStates</name><init pos:line="252" pos:column="30">= <expr><op:operator pos:line="252" pos:column="32">new</op:operator> <name><name pos:line="252" pos:column="36">String</name><index pos:line="252" pos:column="42">[<expr><lit:literal type="number" pos:line="252" pos:column="43">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="253" pos:column="9">double</name><index pos:line="253" pos:column="15">[]</index></type> <name pos:line="253" pos:column="18">averageWage</name> <init pos:line="253" pos:column="30">= <expr><op:operator pos:line="253" pos:column="32">new</op:operator> <name><name pos:line="253" pos:column="36">double</name><index pos:line="253" pos:column="42">[<expr><lit:literal type="number" pos:line="253" pos:column="43">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="254" pos:column="9">int</name></type> <name pos:line="254" pos:column="13">size</name><init pos:line="254" pos:column="17">=<expr><lit:literal type="number" pos:line="254" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="255" pos:column="9">ArrayList</name><argument_list pos:line="255" pos:column="18">&lt;<argument><name pos:line="255" pos:column="19">String</name></argument>&gt;</argument_list></name></type> <name pos:line="255" pos:column="27">findBestStatesResult</name> <init pos:line="255" pos:column="48">= <expr><op:operator pos:line="255" pos:column="50">new</op:operator> <call><name><name pos:line="255" pos:column="54">ArrayList</name><argument_list pos:line="255" pos:column="63">&lt;<argument><name pos:line="255" pos:column="64">String</name></argument>&gt;</argument_list></name><argument_list pos:line="255" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <try pos:line="257" pos:column="9">try<block pos:line="257" pos:column="12">{
           <expr_stmt><expr><name pos:line="258" pos:column="12">_conn</name> <op:operator pos:line="258" pos:column="18">=</op:operator> <call><name><name pos:line="258" pos:column="20">DatabaseConnection</name><op:operator pos:line="258" pos:column="38">.</op:operator><name pos:line="258" pos:column="39">getConnection</name></name><argument_list pos:line="258" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="259" pos:column="12">s</name> <op:operator pos:line="259" pos:column="14">=</op:operator> <call><name><name pos:line="259" pos:column="16">_conn</name><op:operator pos:line="259" pos:column="21">.</op:operator><name pos:line="259" pos:column="22">createStatement</name></name><argument_list pos:line="259" pos:column="37">()</argument_list></call></expr>;</expr_stmt>

           <expr_stmt><expr><name pos:line="261" pos:column="12">rs</name> <op:operator pos:line="261" pos:column="15">=</op:operator> <call><name><name pos:line="261" pos:column="17">s</name><op:operator pos:line="261" pos:column="18">.</op:operator><name pos:line="261" pos:column="19">executeQuery</name></name><argument_list pos:line="261" pos:column="31">(     
                <argument><expr><lit:literal type="string" pos:line="262" pos:column="17">"SELECT occupationcode FROM job WHERE ssn="</lit:literal> <op:operator pos:line="262" pos:column="61">+</op:operator> <name pos:line="262" pos:column="63">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if pos:line="263" pos:column="12">if <condition pos:line="263" pos:column="15">(<expr><op:operator pos:line="263" pos:column="16">!</op:operator><call><name><name pos:line="263" pos:column="17">rs</name><op:operator pos:line="263" pos:column="19">.</op:operator><name pos:line="263" pos:column="20">next</name></name><argument_list pos:line="263" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="263" pos:column="27">
           <block pos:line="264" pos:column="12">{
        	   <expr_stmt><expr><call><name><name pos:line="265" pos:column="20">UtilitiesReq19_24</name><op:operator pos:line="265" pos:column="37">.</op:operator><name pos:line="265" pos:column="38">reportFailure</name></name><argument_list pos:line="265" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="52">"No rows in ResultSet. Occupation code not found for SSN "</lit:literal> <op:operator pos:line="265" pos:column="111">+</op:operator> <name pos:line="265" pos:column="113">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	   <return pos:line="266" pos:column="20">return <expr><name pos:line="266" pos:column="27">findBestStatesResult</name></expr>;</return>
           }</block></then></if>
           <decl_stmt><decl><type><name pos:line="268" pos:column="12">int</name></type> <name pos:line="268" pos:column="16">code</name> <init pos:line="268" pos:column="21">= <expr><call><name><name pos:line="268" pos:column="23">rs</name><op:operator pos:line="268" pos:column="25">.</op:operator><name pos:line="268" pos:column="26">getInt</name></name><argument_list pos:line="268" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="268" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><name pos:line="269" pos:column="12">size</name> <op:operator pos:line="269" pos:column="17">=</op:operator> <call><name pos:line="269" pos:column="19">CalculateAverageWageForOccupationForAllStates</name><argument_list pos:line="269" pos:column="64">(<argument><expr><name pos:line="269" pos:column="65">code</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="71">resultStates</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="85">averageWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="270" pos:column="12">System</name><op:operator pos:line="270" pos:column="18">.</op:operator><name pos:line="270" pos:column="19">out</name><op:operator pos:line="270" pos:column="22">.</op:operator><name pos:line="270" pos:column="23">println</name></name><argument_list pos:line="270" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="31">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="271" pos:column="12">rs</name><op:operator pos:line="271" pos:column="14">.</op:operator><name pos:line="271" pos:column="15">close</name></name><argument_list pos:line="271" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="272" pos:column="12">s</name><op:operator pos:line="272" pos:column="13">.</op:operator><name pos:line="272" pos:column="14">close</name></name><argument_list pos:line="272" pos:column="19">()</argument_list></call></expr>;</expr_stmt>

           <expr_stmt><expr><name pos:line="274" pos:column="12">findBestStatesResult</name> <op:operator pos:line="274" pos:column="33">=</op:operator> <call><name pos:line="274" pos:column="35">FindBestStates</name><argument_list pos:line="274" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="274" pos:column="50">3</lit:literal></expr></argument>, <argument><expr><name pos:line="274" pos:column="53">resultStates</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="67">averageWage</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="80">size</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="86">" Average weekly wage for the user's occupation: "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           

       }</block> <catch pos:line="277" pos:column="10">catch <parameter_list pos:line="277" pos:column="16">(<param><decl><type><name pos:line="277" pos:column="17">SQLException</name></type> <name pos:line="277" pos:column="30">e</name></decl></param>)</parameter_list>
          <block pos:line="278" pos:column="11">{
    	   <expr_stmt><expr><call><name><name pos:line="279" pos:column="12">UtilitiesReq19_24</name><op:operator pos:line="279" pos:column="29">.</op:operator><name pos:line="279" pos:column="30">printExceptionText</name></name><argument_list pos:line="279" pos:column="48">(<argument><expr><name pos:line="279" pos:column="49">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
       <return pos:line="281" pos:column="8">return <expr><name pos:line="281" pos:column="15">findBestStatesResult</name></expr>;</return>
   }</block></function>
    
    <function><type><annotation pos:line="284" pos:column="5">@<name pos:line="284" pos:column="6">TaDaMethod</name><argument_list pos:line="284" pos:column="16">(<argument><expr><name pos:line="284" pos:column="17">variablesToTrack</name> <op:operator pos:line="284" pos:column="34">=</op:operator> <block pos:line="284" pos:column="36">{<expr><lit:literal type="string" pos:line="284" pos:column="37">"ssn"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="284" pos:column="45">correspondingDatabaseAttribute</name> <op:operator pos:line="284" pos:column="76">=</op:operator> <block pos:line="284" pos:column="78">{<expr><lit:literal type="string" pos:line="284" pos:column="79">"job.ssn"</lit:literal></expr>}</block></expr></argument> )</argument_list></annotation>
   <specifier pos:line="285" pos:column="4">public</specifier> <name pos:line="285" pos:column="11">int</name></type> <name pos:line="285" pos:column="15">CalculateAverageWageForOccupationForAllStates</name><parameter_list pos:line="285" pos:column="60">(<param><decl><type><name pos:line="285" pos:column="61">int</name></type> <name pos:line="285" pos:column="65">occupationCode</name></decl></param>, <param><decl><type><name><name pos:line="285" pos:column="81">String</name><index pos:line="285" pos:column="87">[]</index></name></type> <name pos:line="285" pos:column="90">resultStates</name></decl></param>, <param><decl><type><name><name pos:line="285" pos:column="104">double</name><index pos:line="285" pos:column="110">[]</index></name></type> <name pos:line="285" pos:column="113">averageWage</name></decl></param>)</parameter_list><block pos:line="285" pos:column="125">{

         <decl_stmt><decl><type><name pos:line="287" pos:column="10">ResultSet</name></type> <name pos:line="287" pos:column="20">rs</name> <init pos:line="287" pos:column="23">= <expr><lit:literal type="null" pos:line="287" pos:column="25">null</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="288" pos:column="10">int</name></type> <name pos:line="288" pos:column="14">ssn</name> <init pos:line="288" pos:column="18">= <expr><lit:literal type="number" pos:line="288" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="289" pos:column="10">String</name></type> <name pos:line="289" pos:column="17">zip</name> <init pos:line="289" pos:column="21">= <expr><lit:literal type="string" pos:line="289" pos:column="23">""</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="290" pos:column="10">String</name></type> <name pos:line="290" pos:column="17">state</name> <init pos:line="290" pos:column="23">= <expr><lit:literal type="string" pos:line="290" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="291" pos:column="10">int</name><index pos:line="291" pos:column="13">[]</index></type> <name pos:line="291" pos:column="16">resultCount</name> <init pos:line="291" pos:column="28">= <expr><op:operator pos:line="291" pos:column="30">new</op:operator> <name><name pos:line="291" pos:column="34">int</name><index pos:line="291" pos:column="37">[<expr><lit:literal type="number" pos:line="291" pos:column="38">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="292" pos:column="10">int</name></type> <name pos:line="292" pos:column="14">stateIndex</name><init pos:line="292" pos:column="24">=<expr><lit:literal type="number" pos:line="292" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name pos:line="293" pos:column="10">int</name></type> <name pos:line="293" pos:column="14">size</name> <init pos:line="293" pos:column="19">=<expr><lit:literal type="number" pos:line="293" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name pos:line="294" pos:column="10">HashMap</name><argument_list pos:line="294" pos:column="17">&lt;<argument><name pos:line="294" pos:column="18">String</name></argument>, <argument><name pos:line="294" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="294" pos:column="34">zipToStateMap</name> <init pos:line="294" pos:column="48">= <expr><op:operator pos:line="294" pos:column="50">new</op:operator> <call><name><name pos:line="294" pos:column="54">HashMap</name><argument_list pos:line="294" pos:column="61">&lt;<argument><name pos:line="294" pos:column="62">String</name></argument>, <argument><name pos:line="294" pos:column="70">String</name></argument>&gt;</argument_list></name><argument_list pos:line="294" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name pos:line="295" pos:column="10">HashMap</name><argument_list pos:line="295" pos:column="17">&lt;<argument><name pos:line="295" pos:column="18">Integer</name></argument>, <argument><name pos:line="295" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="295" pos:column="35">ssnToZipMap</name> <init pos:line="295" pos:column="47">= <expr><op:operator pos:line="295" pos:column="49">new</op:operator> <call><name><name pos:line="295" pos:column="53">HashMap</name><argument_list pos:line="295" pos:column="60">&lt;<argument><name pos:line="295" pos:column="61">Integer</name></argument>, <argument><name pos:line="295" pos:column="70">String</name></argument>&gt;</argument_list></name><argument_list pos:line="295" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name pos:line="296" pos:column="10">HashMap</name><argument_list pos:line="296" pos:column="17">&lt;<argument><name pos:line="296" pos:column="18">Integer</name></argument>, <argument><name pos:line="296" pos:column="27">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="296" pos:column="36">ssnToWeekWageMap</name> <init pos:line="296" pos:column="53">= <expr><op:operator pos:line="296" pos:column="55">new</op:operator> <call><name><name pos:line="296" pos:column="59">HashMap</name><argument_list pos:line="296" pos:column="66">&lt;<argument><name pos:line="296" pos:column="67">Integer</name></argument>, <argument><name pos:line="296" pos:column="76">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="296" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>

         <expr_stmt><expr><call><name pos:line="298" pos:column="10">initializeSsnToWeekWageMap</name><argument_list pos:line="298" pos:column="36">(<argument><expr><name pos:line="298" pos:column="37">ssnToWeekWageMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         
         <expr_stmt><expr><call><name pos:line="300" pos:column="10">initializeSsnToZipMap</name><argument_list pos:line="300" pos:column="31">(<argument><expr><name pos:line="300" pos:column="32">ssnToZipMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
         <expr_stmt><expr><call><name pos:line="302" pos:column="10">initializeZipToStateMap</name><argument_list pos:line="302" pos:column="33">(<argument><expr><name pos:line="302" pos:column="34">zipToStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <try pos:line="304" pos:column="8">try<block pos:line="304" pos:column="11">{
         <expr_stmt><expr><name pos:line="305" pos:column="10">_conn</name> <op:operator pos:line="305" pos:column="16">=</op:operator> <call><name><name pos:line="305" pos:column="18">DatabaseConnection</name><op:operator pos:line="305" pos:column="36">.</op:operator><name pos:line="305" pos:column="37">getConnection</name></name><argument_list pos:line="305" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="306" pos:column="10">s</name> <op:operator pos:line="306" pos:column="12">=</op:operator> <call><name><name pos:line="306" pos:column="14">_conn</name><op:operator pos:line="306" pos:column="19">.</op:operator><name pos:line="306" pos:column="20">createStatement</name></name><argument_list pos:line="306" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
         
         <expr_stmt><expr><name pos:line="308" pos:column="10">rs</name> <op:operator pos:line="308" pos:column="13">=</op:operator> <call><name><name pos:line="308" pos:column="15">s</name><op:operator pos:line="308" pos:column="16">.</op:operator><name pos:line="308" pos:column="17">executeQuery</name></name><argument_list pos:line="308" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="308" pos:column="30">"SELECT ssn FROM job WHERE occupationcode ="</lit:literal><op:operator pos:line="308" pos:column="74">+</op:operator><name pos:line="308" pos:column="75">occupationCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="309" pos:column="10">if <condition pos:line="309" pos:column="13">(<expr><op:operator pos:line="309" pos:column="14">!</op:operator><call><name><name pos:line="309" pos:column="15">rs</name><op:operator pos:line="309" pos:column="17">.</op:operator><name pos:line="309" pos:column="18">next</name></name><argument_list pos:line="309" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="309" pos:column="25">
         <block pos:line="310" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="311" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="311" pos:column="35">.</op:operator><name pos:line="311" pos:column="36">reportFailure</name></name><argument_list pos:line="311" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="311" pos:column="50">"No rows in ResultSet. No SSN for occupation code: "</lit:literal> <op:operator pos:line="311" pos:column="103">+</op:operator> <name pos:line="311" pos:column="105">occupationCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="312" pos:column="17">return <expr><lit:literal type="number" pos:line="312" pos:column="24">0</lit:literal></expr>;</return>
         }</block></then></if>

         <do pos:line="315" pos:column="10">do<block pos:line="315" pos:column="12">{
          <comment type="line" pos:line="316" pos:column="11">//System.out.println("State: " + rs1.getString(1));</comment>
          <expr_stmt><expr><name pos:line="317" pos:column="11">ssn</name> <op:operator pos:line="317" pos:column="15">=</op:operator> <call><name><name pos:line="317" pos:column="17">rs</name><op:operator pos:line="317" pos:column="19">.</op:operator><name pos:line="317" pos:column="20">getInt</name></name><argument_list pos:line="317" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="317" pos:column="27">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
          <expr_stmt><expr><name pos:line="319" pos:column="11">zip</name> <op:operator pos:line="319" pos:column="15">=</op:operator> <call><name><name pos:line="319" pos:column="17">ssnToZipMap</name><op:operator pos:line="319" pos:column="28">.</op:operator><name pos:line="319" pos:column="29">get</name></name><argument_list pos:line="319" pos:column="32">(<argument><expr><name pos:line="319" pos:column="33">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="320" pos:column="11">if<condition pos:line="320" pos:column="13">(<expr><name pos:line="320" pos:column="14">zip</name><op:operator pos:line="320" pos:column="17">==</op:operator><lit:literal type="null" pos:line="320" pos:column="19">null</lit:literal></expr>)</condition><then pos:line="320" pos:column="24">
             <continue pos:line="321" pos:column="14">continue;</continue></then></if>
          <expr_stmt><expr><name pos:line="322" pos:column="11">state</name> <op:operator pos:line="322" pos:column="17">=</op:operator> <call><name><name pos:line="322" pos:column="19">zipToStateMap</name><op:operator pos:line="322" pos:column="32">.</op:operator><name pos:line="322" pos:column="33">get</name></name><argument_list pos:line="322" pos:column="36">(<argument><expr><name pos:line="322" pos:column="37">zip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="323" pos:column="11">if<condition pos:line="323" pos:column="13">(<expr><name pos:line="323" pos:column="14">state</name><op:operator pos:line="323" pos:column="19">==</op:operator><lit:literal type="null" pos:line="323" pos:column="21">null</lit:literal></expr>)</condition><then pos:line="323" pos:column="26">
             <continue pos:line="324" pos:column="14">continue;</continue></then></if>
          <expr_stmt><expr><name pos:line="325" pos:column="11">stateIndex</name> <op:operator pos:line="325" pos:column="22">=</op:operator> <call><name pos:line="325" pos:column="24">getStateIndex</name><argument_list pos:line="325" pos:column="37">(<argument><expr><name pos:line="325" pos:column="38">resultStates</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if pos:line="326" pos:column="11">if<condition pos:line="326" pos:column="13">( <expr><name pos:line="326" pos:column="15">stateIndex</name> <op:operator pos:line="326" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="326" pos:column="28">50</lit:literal></expr>)</condition><then><block pos:line="326" pos:column="31">{
            <expr_stmt><expr><name><name pos:line="327" pos:column="13">resultCount</name><index pos:line="327" pos:column="24">[<expr><name pos:line="327" pos:column="25">stateIndex</name></expr>]</index></name><op:operator pos:line="327" pos:column="36">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="328" pos:column="13">averageWage</name><index pos:line="328" pos:column="24">[<expr><name pos:line="328" pos:column="25">stateIndex</name></expr>]</index></name><op:operator pos:line="328" pos:column="36">+=</op:operator> <call><name><name pos:line="328" pos:column="39">ssnToWeekWageMap</name><op:operator pos:line="328" pos:column="55">.</op:operator><name pos:line="328" pos:column="56">get</name></name><argument_list pos:line="328" pos:column="59">(<argument><expr><name pos:line="328" pos:column="60">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
          <else pos:line="330" pos:column="11">else<block pos:line="330" pos:column="15">{
            <expr_stmt><expr><name><name pos:line="331" pos:column="13">resultCount</name><index pos:line="331" pos:column="24">[<expr><name pos:line="331" pos:column="25">size</name></expr>]</index></name><op:operator pos:line="331" pos:column="30">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="332" pos:column="13">resultStates</name><index pos:line="332" pos:column="25">[<expr><name pos:line="332" pos:column="26">size</name></expr>]</index></name> <op:operator pos:line="332" pos:column="32">=</op:operator> <name pos:line="332" pos:column="34">state</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="333" pos:column="13">averageWage</name><index pos:line="333" pos:column="24">[<expr><name pos:line="333" pos:column="25">size</name></expr>]</index></name><op:operator pos:line="333" pos:column="30">+=</op:operator> <call><name><name pos:line="333" pos:column="33">ssnToWeekWageMap</name><op:operator pos:line="333" pos:column="49">.</op:operator><name pos:line="333" pos:column="50">get</name></name><argument_list pos:line="333" pos:column="53">(<argument><expr><name pos:line="333" pos:column="54">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="334" pos:column="13">size</name><op:operator pos:line="334" pos:column="17">++</op:operator></expr>;</expr_stmt>
          }</block></else></if>                            
         }</block>while<condition pos:line="336" pos:column="16">(<expr><call><name><name pos:line="336" pos:column="17">rs</name><op:operator pos:line="336" pos:column="19">.</op:operator><name pos:line="336" pos:column="20">next</name></name><argument_list pos:line="336" pos:column="24">()</argument_list></call></expr>)</condition>;</do>
         <expr_stmt><expr><call><name><name pos:line="337" pos:column="10">rs</name><op:operator pos:line="337" pos:column="12">.</op:operator><name pos:line="337" pos:column="13">close</name></name><argument_list pos:line="337" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="338" pos:column="10">s</name><op:operator pos:line="338" pos:column="11">.</op:operator><name pos:line="338" pos:column="12">close</name></name><argument_list pos:line="338" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch pos:line="339" pos:column="9">catch <parameter_list pos:line="339" pos:column="15">(<param><decl><type><name pos:line="339" pos:column="16">SQLException</name></type> <name pos:line="339" pos:column="29">e</name></decl></param>)</parameter_list>
        <block pos:line="340" pos:column="9">{
    	  <expr_stmt><expr><call><name><name pos:line="341" pos:column="11">UtilitiesReq19_24</name><op:operator pos:line="341" pos:column="28">.</op:operator><name pos:line="341" pos:column="29">printExceptionText</name></name><argument_list pos:line="341" pos:column="47">(<argument><expr><name pos:line="341" pos:column="48">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      <for pos:line="343" pos:column="7">for(<init><decl><type><name pos:line="343" pos:column="11">int</name></type> <name pos:line="343" pos:column="15">i</name><init pos:line="343" pos:column="16">=<expr><lit:literal type="number" pos:line="343" pos:column="17">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="343" pos:column="20">i</name><op:operator pos:line="343" pos:column="21">&lt;</op:operator><name pos:line="343" pos:column="22">size</name></expr>;</condition> <incr><expr><name pos:line="343" pos:column="28">i</name><op:operator pos:line="343" pos:column="29">++</op:operator></expr></incr>)<block pos:line="343" pos:column="32">{
              <expr_stmt><expr><name><name pos:line="344" pos:column="15">averageWage</name><index pos:line="344" pos:column="26">[<expr><name pos:line="344" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="344" pos:column="30">=</op:operator> <name><name pos:line="344" pos:column="32">averageWage</name><index pos:line="344" pos:column="43">[<expr><name pos:line="344" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="344" pos:column="46">/</op:operator><name><name pos:line="344" pos:column="47">resultCount</name><index pos:line="344" pos:column="58">[<expr><name pos:line="344" pos:column="59">i</name></expr>]</index></name></expr>;</expr_stmt> 
              <expr_stmt><expr><name><name pos:line="345" pos:column="15">averageWage</name><index pos:line="345" pos:column="26">[<expr><name pos:line="345" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="345" pos:column="30">=</op:operator> <call><name><name pos:line="345" pos:column="32">Factory</name><op:operator pos:line="345" pos:column="39">.</op:operator><name pos:line="345" pos:column="40">getRoundMethod</name></name><argument_list pos:line="345" pos:column="54">(<argument><expr><name><name pos:line="345" pos:column="55">averageWage</name><index pos:line="345" pos:column="66">[<expr><name pos:line="345" pos:column="67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
      }</block></for>
      <return pos:line="348" pos:column="7">return <expr><name pos:line="348" pos:column="14">size</name></expr>;</return>
   }</block></function>

<comment type="line" pos:line="351" pos:column="1">// ############################## COMPUTE AVERAGE EDUCATION ###################</comment>

   <function><type><specifier pos:line="353" pos:column="4">public</specifier> <name pos:line="353" pos:column="11">String</name></type> <name pos:line="353" pos:column="18">ComputeAverageEducationString</name><parameter_list pos:line="353" pos:column="47">(<param><decl><type><name pos:line="353" pos:column="48">String</name></type> <name pos:line="353" pos:column="55">selection</name></decl></param>, <param><decl><type><name pos:line="353" pos:column="66">int</name></type> <name pos:line="353" pos:column="70">code</name></decl></param>)</parameter_list>
   <block pos:line="354" pos:column="4">{
	<decl_stmt><decl><type><name pos:line="355" pos:column="9">String</name></type> <name pos:line="355" pos:column="16">education</name> <init pos:line="355" pos:column="26">= <expr><lit:literal type="string" pos:line="355" pos:column="28">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="356" pos:column="9">int</name></type> <name pos:line="356" pos:column="13">level</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name pos:line="358" pos:column="9">level</name> <op:operator pos:line="358" pos:column="15">=</op:operator> <call><name pos:line="358" pos:column="17">ComputeAverageEducation</name><argument_list pos:line="358" pos:column="40">(<argument><expr><name pos:line="358" pos:column="41">selection</name></expr></argument>,<argument><expr><name pos:line="358" pos:column="51">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
	<if pos:line="361" pos:column="9">if<condition pos:line="361" pos:column="11">(<expr><name pos:line="361" pos:column="12">level</name> <op:operator pos:line="361" pos:column="18">!=</op:operator> <name pos:line="361" pos:column="21">ErrorValue</name></expr>)</condition><then><block pos:line="361" pos:column="32">{
                <decl_stmt><decl><type><name><name pos:line="362" pos:column="17">HashMap</name><argument_list pos:line="362" pos:column="24">&lt;<argument><name pos:line="362" pos:column="25">Integer</name></argument>, <argument><name pos:line="362" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="362" pos:column="42">levelToEducationMap</name> <init pos:line="362" pos:column="62">= <expr><op:operator pos:line="362" pos:column="64">new</op:operator> <call><name><name pos:line="362" pos:column="68">HashMap</name><argument_list pos:line="362" pos:column="75">&lt;<argument><name pos:line="362" pos:column="76">Integer</name></argument>, <argument><name pos:line="362" pos:column="85">String</name></argument>&gt;</argument_list></name><argument_list pos:line="362" pos:column="92">()</argument_list></call></expr></init></decl>;</decl_stmt>

       		<expr_stmt><expr><call><name pos:line="364" pos:column="17">initializeLevelToEducationHashMap</name><argument_list pos:line="364" pos:column="50">(<argument><expr><name pos:line="364" pos:column="51">levelToEducationMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="366" pos:column="17">education</name> <op:operator pos:line="366" pos:column="27">=</op:operator> <call><name><name pos:line="366" pos:column="29">levelToEducationMap</name><op:operator pos:line="366" pos:column="48">.</op:operator><name pos:line="366" pos:column="49">get</name></name><argument_list pos:line="366" pos:column="52">(<argument><expr><op:operator pos:line="366" pos:column="53">(</op:operator><name pos:line="366" pos:column="54">int</name><op:operator pos:line="366" pos:column="57">)</op:operator><name pos:line="366" pos:column="58">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name><name pos:line="367" pos:column="17">System</name><op:operator pos:line="367" pos:column="23">.</op:operator><name pos:line="367" pos:column="24">out</name><op:operator pos:line="367" pos:column="27">.</op:operator><name pos:line="367" pos:column="28">println</name></name><argument_list pos:line="367" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="36">"Average education level for "</lit:literal><op:operator pos:line="367" pos:column="66">+</op:operator> <name pos:line="367" pos:column="68">selection</name> <op:operator pos:line="367" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="367" pos:column="80">" code "</lit:literal> <op:operator pos:line="367" pos:column="89">+</op:operator> <name pos:line="367" pos:column="91">code</name> <op:operator pos:line="367" pos:column="96">+</op:operator> <lit:literal type="string" pos:line="367" pos:column="98">": "</lit:literal> <op:operator pos:line="367" pos:column="103">+</op:operator> <name pos:line="367" pos:column="105">education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name><name pos:line="368" pos:column="17">System</name><op:operator pos:line="368" pos:column="23">.</op:operator><name pos:line="368" pos:column="24">out</name><op:operator pos:line="368" pos:column="27">.</op:operator><name pos:line="368" pos:column="28">println</name></name><argument_list pos:line="368" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="36">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name><name pos:line="369" pos:column="17">System</name><op:operator pos:line="369" pos:column="23">.</op:operator><name pos:line="369" pos:column="24">out</name><op:operator pos:line="369" pos:column="27">.</op:operator><name pos:line="369" pos:column="28">println</name></name><argument_list pos:line="369" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="36">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   	}</block></then>
    	<else pos:line="371" pos:column="9">else<block pos:line="371" pos:column="13">{
    		<expr_stmt><expr><call><name><name pos:line="372" pos:column="17">System</name><op:operator pos:line="372" pos:column="23">.</op:operator><name pos:line="372" pos:column="24">out</name><op:operator pos:line="372" pos:column="27">.</op:operator><name pos:line="372" pos:column="28">println</name></name><argument_list pos:line="372" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="36">"Error when calculating average education level for "</lit:literal><op:operator pos:line="372" pos:column="89">+</op:operator> <name pos:line="372" pos:column="91">selection</name> <op:operator pos:line="372" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="372" pos:column="103">" code "</lit:literal> <op:operator pos:line="372" pos:column="112">+</op:operator> <name pos:line="372" pos:column="114">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name><name pos:line="373" pos:column="17">System</name><op:operator pos:line="373" pos:column="23">.</op:operator><name pos:line="373" pos:column="24">out</name><op:operator pos:line="373" pos:column="27">.</op:operator><name pos:line="373" pos:column="28">println</name></name><argument_list pos:line="373" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="373" pos:column="36">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name><name pos:line="374" pos:column="17">System</name><op:operator pos:line="374" pos:column="23">.</op:operator><name pos:line="374" pos:column="24">out</name><op:operator pos:line="374" pos:column="27">.</op:operator><name pos:line="374" pos:column="28">println</name></name><argument_list pos:line="374" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="374" pos:column="36">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
    	}</block></else></if>
	<return pos:line="376" pos:column="9">return<expr><op:operator pos:line="376" pos:column="15">(</op:operator><name pos:line="376" pos:column="16">education</name><op:operator pos:line="376" pos:column="25">)</op:operator></expr>;</return>
   }</block></function>
   
    <function><type><annotation pos:line="379" pos:column="5">@<name pos:line="379" pos:column="6">TaDaMethod</name><argument_list pos:line="379" pos:column="16">(<argument><expr><name pos:line="379" pos:column="17">variablesToTrack</name> <op:operator pos:line="379" pos:column="34">=</op:operator> <block pos:line="379" pos:column="36">{<expr><lit:literal type="string" pos:line="379" pos:column="37">"ssn"</lit:literal></expr>}</block></expr></argument>, <argument><expr><name pos:line="379" pos:column="45">correspondingDatabaseAttribute</name> <op:operator pos:line="379" pos:column="76">=</op:operator> <block pos:line="379" pos:column="78">{<expr><lit:literal type="string" pos:line="379" pos:column="79">"job.ssn"</lit:literal></expr>}</block></expr></argument> )</argument_list></annotation>
   <specifier pos:line="380" pos:column="4">public</specifier> <name pos:line="380" pos:column="11">int</name></type> <name pos:line="380" pos:column="15">ComputeAverageEducation</name><parameter_list pos:line="380" pos:column="38">(<param><decl><type><name pos:line="380" pos:column="39">String</name></type> <name pos:line="380" pos:column="46">selection</name></decl></param>, <param><decl><type><name pos:line="380" pos:column="57">int</name></type> <name pos:line="380" pos:column="61">code</name></decl></param>)</parameter_list>
   <block pos:line="381" pos:column="4">{
	<decl_stmt><decl><type><name pos:line="382" pos:column="9">String</name></type> <name pos:line="382" pos:column="16">education</name> <init pos:line="382" pos:column="26">= <expr><lit:literal type="string" pos:line="382" pos:column="28">""</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="383" pos:column="9">double</name></type> <name pos:line="383" pos:column="16">averageLevel</name> <init pos:line="383" pos:column="29">= <expr><lit:literal type="number" pos:line="383" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="384" pos:column="9">double</name></type> <name pos:line="384" pos:column="16">total</name> <init pos:line="384" pos:column="22">=<expr><lit:literal type="number" pos:line="384" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="385" pos:column="9">double</name></type> <name pos:line="385" pos:column="16">count</name> <init pos:line="385" pos:column="22">= <expr><lit:literal type="number" pos:line="385" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="386" pos:column="9">int</name></type> <name pos:line="386" pos:column="13">ssn</name><init pos:line="386" pos:column="16">=<expr><lit:literal type="number" pos:line="386" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="387" pos:column="9">ResultSet</name></type> <name pos:line="387" pos:column="19">rs</name> <init pos:line="387" pos:column="22">= <expr><lit:literal type="null" pos:line="387" pos:column="24">null</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="388" pos:column="9">int</name></type> <name pos:line="388" pos:column="13">level</name> <init pos:line="388" pos:column="19">=<expr><lit:literal type="number" pos:line="388" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="389" pos:column="9">HashMap</name><argument_list pos:line="389" pos:column="16">&lt;<argument><name pos:line="389" pos:column="17">Integer</name></argument>, <argument><name pos:line="389" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="389" pos:column="34">ssnToEducationMap</name> <init pos:line="389" pos:column="52">= <expr><op:operator pos:line="389" pos:column="54">new</op:operator> <call><name><name pos:line="389" pos:column="58">HashMap</name><argument_list pos:line="389" pos:column="65">&lt;<argument><name pos:line="389" pos:column="66">Integer</name></argument>, <argument><name pos:line="389" pos:column="75">String</name></argument>&gt;</argument_list></name><argument_list pos:line="389" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="390" pos:column="9">HashMap</name><argument_list pos:line="390" pos:column="16">&lt;<argument><name pos:line="390" pos:column="17">String</name></argument>, <argument><name pos:line="390" pos:column="25">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="390" pos:column="34">educationTolevelsMap</name> <init pos:line="390" pos:column="55">= <expr><op:operator pos:line="390" pos:column="57">new</op:operator> <call><name><name pos:line="390" pos:column="61">HashMap</name><argument_list pos:line="390" pos:column="68">&lt;<argument><name pos:line="390" pos:column="69">String</name></argument>, <argument><name pos:line="390" pos:column="77">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="390" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="391" pos:column="9">HashMap</name><argument_list pos:line="391" pos:column="16">&lt;<argument><name pos:line="391" pos:column="17">Integer</name></argument>, <argument><name pos:line="391" pos:column="26">String</name></argument>&gt;</argument_list></name></type> <name pos:line="391" pos:column="34">levelToEducationMap</name> <init pos:line="391" pos:column="54">= <expr><op:operator pos:line="391" pos:column="56">new</op:operator> <call><name><name pos:line="391" pos:column="60">HashMap</name><argument_list pos:line="391" pos:column="67">&lt;<argument><name pos:line="391" pos:column="68">Integer</name></argument>, <argument><name pos:line="391" pos:column="77">String</name></argument>&gt;</argument_list></name><argument_list pos:line="391" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name pos:line="393" pos:column="9">initializeLevelToEducationHashMap</name><argument_list pos:line="393" pos:column="42">(<argument><expr><name pos:line="393" pos:column="43">levelToEducationMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="394" pos:column="9">initializeEducationToLevelHashMap</name><argument_list pos:line="394" pos:column="42">(<argument><expr><name pos:line="394" pos:column="43">educationTolevelsMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="395" pos:column="9">initializeSsnToEducationMap</name><argument_list pos:line="395" pos:column="36">(<argument><expr><name pos:line="395" pos:column="37">ssnToEducationMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <try pos:line="397" pos:column="9">try <block pos:line="397" pos:column="13">{  
             <expr_stmt><expr><name pos:line="398" pos:column="14">_conn</name> <op:operator pos:line="398" pos:column="20">=</op:operator> <call><name><name pos:line="398" pos:column="22">DatabaseConnection</name><op:operator pos:line="398" pos:column="40">.</op:operator><name pos:line="398" pos:column="41">getConnection</name></name><argument_list pos:line="398" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name pos:line="399" pos:column="14">s</name> <op:operator pos:line="399" pos:column="16">=</op:operator> <call><name><name pos:line="399" pos:column="18">_conn</name><op:operator pos:line="399" pos:column="23">.</op:operator><name pos:line="399" pos:column="24">createStatement</name></name><argument_list pos:line="399" pos:column="39">()</argument_list></call></expr>;</expr_stmt>

             <expr_stmt><expr><name pos:line="401" pos:column="14">rs</name> <op:operator pos:line="401" pos:column="17">=</op:operator> <call><name><name pos:line="401" pos:column="19">s</name><op:operator pos:line="401" pos:column="20">.</op:operator><name pos:line="401" pos:column="21">executeQuery</name></name><argument_list pos:line="401" pos:column="33">(     
              <argument><expr><lit:literal type="string" pos:line="402" pos:column="15">"SELECT ssn FROM job WHERE "</lit:literal> <op:operator pos:line="402" pos:column="44">+</op:operator> <name pos:line="402" pos:column="46">selection</name> <op:operator pos:line="402" pos:column="56">+</op:operator><lit:literal type="string" pos:line="402" pos:column="57">"code="</lit:literal> <op:operator pos:line="402" pos:column="65">+</op:operator> <name pos:line="402" pos:column="67">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <if pos:line="404" pos:column="14">if <condition pos:line="404" pos:column="17">(<expr><op:operator pos:line="404" pos:column="18">!</op:operator><call><name><name pos:line="404" pos:column="19">rs</name><op:operator pos:line="404" pos:column="21">.</op:operator><name pos:line="404" pos:column="22">next</name></name><argument_list pos:line="404" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="404" pos:column="29">
             <block pos:line="405" pos:column="14">{
            	 <expr_stmt><expr><call><name><name pos:line="406" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="406" pos:column="35">.</op:operator><name pos:line="406" pos:column="36">reportFailure</name></name><argument_list pos:line="406" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="406" pos:column="50">"No rows in ResultSet. No SSN found for "</lit:literal> <op:operator pos:line="406" pos:column="92">+</op:operator> <name pos:line="406" pos:column="94">selection</name> <op:operator pos:line="406" pos:column="104">+</op:operator> <lit:literal type="string" pos:line="406" pos:column="106">"code "</lit:literal> <op:operator pos:line="406" pos:column="114">+</op:operator> <name pos:line="406" pos:column="116">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            	 <return pos:line="407" pos:column="18">return <expr><name pos:line="407" pos:column="25">ErrorValue</name></expr>;</return>
             }</block></then></if>
  
             <do pos:line="410" pos:column="14">do<block pos:line="410" pos:column="16">{
                <expr_stmt><expr><name pos:line="411" pos:column="17">ssn</name> <op:operator pos:line="411" pos:column="21">=</op:operator> <call><name><name pos:line="411" pos:column="23">rs</name><op:operator pos:line="411" pos:column="25">.</op:operator><name pos:line="411" pos:column="26">getInt</name></name><argument_list pos:line="411" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="411" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="412" pos:column="17">if<condition pos:line="412" pos:column="19">(<expr><call><name><name pos:line="412" pos:column="20">ssnToEducationMap</name><op:operator pos:line="412" pos:column="37">.</op:operator><name pos:line="412" pos:column="38">get</name></name><argument_list pos:line="412" pos:column="41">(<argument><expr><name pos:line="412" pos:column="42">ssn</name></expr></argument>)</argument_list></call><op:operator pos:line="412" pos:column="46">!=</op:operator><lit:literal type="null" pos:line="412" pos:column="48">null</lit:literal></expr>)</condition><then><block pos:line="412" pos:column="53">{
                  <expr_stmt><expr><name pos:line="413" pos:column="19">education</name> <op:operator pos:line="413" pos:column="29">=</op:operator> <call><name><name pos:line="413" pos:column="31">ssnToEducationMap</name><op:operator pos:line="413" pos:column="48">.</op:operator><name pos:line="413" pos:column="49">get</name></name><argument_list pos:line="413" pos:column="52">(<argument><expr><name pos:line="413" pos:column="53">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if pos:line="414" pos:column="19">if<condition pos:line="414" pos:column="21">(<expr><call><name><name pos:line="414" pos:column="22">educationTolevelsMap</name><op:operator pos:line="414" pos:column="42">.</op:operator><name pos:line="414" pos:column="43">get</name></name><argument_list pos:line="414" pos:column="46">(<argument><expr><name pos:line="414" pos:column="47">education</name></expr></argument>)</argument_list></call><op:operator pos:line="414" pos:column="57">!=</op:operator><lit:literal type="null" pos:line="414" pos:column="59">null</lit:literal></expr>)</condition><then><block pos:line="414" pos:column="64">{
                   <expr_stmt><expr><name pos:line="415" pos:column="20">level</name> <op:operator pos:line="415" pos:column="26">=</op:operator>  <call><name><name pos:line="415" pos:column="29">educationTolevelsMap</name><op:operator pos:line="415" pos:column="49">.</op:operator><name pos:line="415" pos:column="50">get</name></name><argument_list pos:line="415" pos:column="53">(<argument><expr><name pos:line="415" pos:column="54">education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <if pos:line="416" pos:column="20">if<condition pos:line="416" pos:column="22">(<expr><name pos:line="416" pos:column="23">level</name> <op:operator pos:line="416" pos:column="29">!=</op:operator><lit:literal type="number" pos:line="416" pos:column="31">0</lit:literal></expr>)</condition><then><block pos:line="416" pos:column="33">{
                     <expr_stmt><expr><name pos:line="417" pos:column="22">total</name><op:operator pos:line="417" pos:column="27">+=</op:operator> <name pos:line="417" pos:column="30">level</name></expr>;</expr_stmt>
                     <expr_stmt><expr><name pos:line="418" pos:column="22">count</name> <op:operator pos:line="418" pos:column="28">++</op:operator></expr>;</expr_stmt>
                   }</block></then></if>
                  }</block></then></if>
                }</block></then></if>           
             }</block>while<condition pos:line="422" pos:column="20">(<expr><call><name><name pos:line="422" pos:column="21">rs</name><op:operator pos:line="422" pos:column="23">.</op:operator><name pos:line="422" pos:column="24">next</name></name><argument_list pos:line="422" pos:column="28">()</argument_list></call></expr>)</condition>;</do>
             <expr_stmt><expr><call><name><name pos:line="423" pos:column="14">rs</name><op:operator pos:line="423" pos:column="16">.</op:operator><name pos:line="423" pos:column="17">close</name></name><argument_list pos:line="423" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name pos:line="424" pos:column="14">s</name><op:operator pos:line="424" pos:column="15">.</op:operator><name pos:line="424" pos:column="16">close</name></name><argument_list pos:line="424" pos:column="21">()</argument_list></call></expr>;</expr_stmt> 
           }</block> <catch pos:line="425" pos:column="14">catch <parameter_list pos:line="425" pos:column="20">(<param><decl><type><name pos:line="425" pos:column="21">SQLException</name></type> <name pos:line="425" pos:column="34">e</name></decl></param>)</parameter_list>
           <block pos:line="426" pos:column="12">{
        	   <expr_stmt><expr><call><name><name pos:line="427" pos:column="20">UtilitiesReq19_24</name><op:operator pos:line="427" pos:column="37">.</op:operator><name pos:line="427" pos:column="38">printExceptionText</name></name><argument_list pos:line="427" pos:column="56">(<argument><expr><name pos:line="427" pos:column="57">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><name pos:line="429" pos:column="9">averageLevel</name> <op:operator pos:line="429" pos:column="22">=</op:operator> <name pos:line="429" pos:column="24">total</name><op:operator pos:line="429" pos:column="29">/</op:operator><name pos:line="429" pos:column="30">count</name></expr>;</expr_stmt>
        <return pos:line="430" pos:column="9">return <expr><op:operator pos:line="430" pos:column="16">(</op:operator><name pos:line="430" pos:column="17">int</name><op:operator pos:line="430" pos:column="20">)</op:operator><name pos:line="430" pos:column="21">averageLevel</name></expr>;</return>
    }</block></function>

<comment type="line" pos:line="433" pos:column="1">// ############################## FIND OCCUPATION/INDUSTRY WITH HIGHEST/LOWES EDUCATION ###################</comment>

    <comment type="line" pos:line="435" pos:column="5">//@TaDaMethod(variablesToTrack = {"codeList", "categoryList"}, correspondingDatabaseAttribute = {"job.occupationcode"} )</comment>
   <function><type><specifier pos:line="436" pos:column="4">public</specifier> <name><name pos:line="436" pos:column="11">ArrayList</name><argument_list pos:line="436" pos:column="20">&lt;<argument><name pos:line="436" pos:column="21">String</name></argument>&gt;</argument_list></name></type> <name pos:line="436" pos:column="29">FindCccupationIndustryWithHighestLowestEducation</name><parameter_list pos:line="436" pos:column="77">(<param><decl><type><name pos:line="436" pos:column="78">String</name></type> <name pos:line="436" pos:column="85">selection</name></decl></param>)</parameter_list>
   <block pos:line="437" pos:column="4">{
       <decl_stmt><decl><type><name pos:line="438" pos:column="8">String</name></type> <name pos:line="438" pos:column="15">maxCategory</name> <init pos:line="438" pos:column="27">= <expr><lit:literal type="string" pos:line="438" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="439" pos:column="8">String</name></type> <name pos:line="439" pos:column="15">minCategory</name> <init pos:line="439" pos:column="27">= <expr><lit:literal type="string" pos:line="439" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="440" pos:column="8">int</name></type> <name pos:line="440" pos:column="12">level</name> <init pos:line="440" pos:column="18">= <expr><lit:literal type="number" pos:line="440" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="441" pos:column="8">int</name></type> <name pos:line="441" pos:column="12">maxCode</name> <init pos:line="441" pos:column="20">= <expr><lit:literal type="number" pos:line="441" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="442" pos:column="8">int</name></type> <name pos:line="442" pos:column="12">minCode</name> <init pos:line="442" pos:column="20">= <expr><lit:literal type="number" pos:line="442" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="443" pos:column="8">int</name></type> <name pos:line="443" pos:column="12">maxLevel</name> <init pos:line="443" pos:column="21">= <expr><lit:literal type="number" pos:line="443" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="444" pos:column="8">int</name></type> <name pos:line="444" pos:column="12">minLevel</name> <init pos:line="444" pos:column="21">= <expr><lit:literal type="number" pos:line="444" pos:column="23">15</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="445" pos:column="8">ResultSet</name></type> <name pos:line="445" pos:column="18">rs</name> <init pos:line="445" pos:column="21">= <expr><lit:literal type="null" pos:line="445" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="446" pos:column="8">double</name></type> <name pos:line="446" pos:column="15">MaxAverageIncomeBasedOnCode</name> <init pos:line="446" pos:column="43">= <expr><lit:literal type="number" pos:line="446" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="447" pos:column="8">double</name></type> <name pos:line="447" pos:column="15">MinAverageIncomeBasedOnCode</name> <init pos:line="447" pos:column="43">= <expr><lit:literal type="number" pos:line="447" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="448" pos:column="8">int</name><index pos:line="448" pos:column="11">[]</index></type> <name pos:line="448" pos:column="14">codeList</name> <init pos:line="448" pos:column="23">= <expr><op:operator pos:line="448" pos:column="25">new</op:operator> <name><name pos:line="448" pos:column="29">int</name><index pos:line="448" pos:column="32">[<expr><lit:literal type="number" pos:line="448" pos:column="33">500</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name pos:line="449" pos:column="8">String</name><index pos:line="449" pos:column="14">[]</index></type> <name pos:line="449" pos:column="17">categoryList</name><init pos:line="449" pos:column="29">= <expr><op:operator pos:line="449" pos:column="31">new</op:operator> <name><name pos:line="449" pos:column="35">String</name><index pos:line="449" pos:column="41">[<expr><lit:literal type="number" pos:line="449" pos:column="42">500</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name pos:line="450" pos:column="8">ArrayList</name><argument_list pos:line="450" pos:column="17">&lt;<argument><name pos:line="450" pos:column="18">String</name></argument>&gt;</argument_list></name></type> <name pos:line="450" pos:column="26">result</name> <init pos:line="450" pos:column="33">= <expr><op:operator pos:line="450" pos:column="35">new</op:operator> <call><name><name pos:line="450" pos:column="39">ArrayList</name><argument_list pos:line="450" pos:column="48">&lt;<argument><name pos:line="450" pos:column="49">String</name></argument>&gt;</argument_list></name><argument_list pos:line="450" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name pos:line="451" pos:column="8">HashMap</name><argument_list pos:line="451" pos:column="15">&lt;<argument><name pos:line="451" pos:column="16">Integer</name></argument>, <argument><name pos:line="451" pos:column="25">String</name></argument>&gt;</argument_list></name></type> <name pos:line="451" pos:column="33">levelToEducationMap</name> <init pos:line="451" pos:column="53">= <expr><op:operator pos:line="451" pos:column="55">new</op:operator> <call><name><name pos:line="451" pos:column="59">HashMap</name><argument_list pos:line="451" pos:column="66">&lt;<argument><name pos:line="451" pos:column="67">Integer</name></argument>, <argument><name pos:line="451" pos:column="76">String</name></argument>&gt;</argument_list></name><argument_list pos:line="451" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>

       <expr_stmt><expr><call><name pos:line="453" pos:column="8">initializeLevelToEducationHashMap</name><argument_list pos:line="453" pos:column="41">(<argument><expr><name pos:line="453" pos:column="42">levelToEducationMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <try pos:line="455" pos:column="8">try <block pos:line="455" pos:column="12">{
         <expr_stmt><expr><name pos:line="456" pos:column="10">_conn</name> <op:operator pos:line="456" pos:column="16">=</op:operator> <call><name><name pos:line="456" pos:column="18">DatabaseConnection</name><op:operator pos:line="456" pos:column="36">.</op:operator><name pos:line="456" pos:column="37">getConnection</name></name><argument_list pos:line="456" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
    	 <expr_stmt><expr><name pos:line="457" pos:column="10">s</name> <op:operator pos:line="457" pos:column="12">=</op:operator> <call><name><name pos:line="457" pos:column="14">_conn</name><op:operator pos:line="457" pos:column="19">.</op:operator><name pos:line="457" pos:column="20">createStatement</name></name><argument_list pos:line="457" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="459" pos:column="10">rs</name> <op:operator pos:line="459" pos:column="13">=</op:operator> <call><name><name pos:line="459" pos:column="15">s</name><op:operator pos:line="459" pos:column="16">.</op:operator><name pos:line="459" pos:column="17">executeQuery</name></name><argument_list pos:line="459" pos:column="29">(     
              <argument><expr><lit:literal type="string" pos:line="460" pos:column="15">"SELECT "</lit:literal> <op:operator pos:line="460" pos:column="25">+</op:operator> <name pos:line="460" pos:column="27">selection</name> <op:operator pos:line="460" pos:column="37">+</op:operator> <lit:literal type="string" pos:line="460" pos:column="39">"code,"</lit:literal> <op:operator pos:line="460" pos:column="47">+</op:operator> <name pos:line="460" pos:column="49">selection</name> <op:operator pos:line="460" pos:column="59">+</op:operator> <lit:literal type="string" pos:line="460" pos:column="61">" FROM "</lit:literal> <op:operator pos:line="460" pos:column="70">+</op:operator> <name pos:line="460" pos:column="72">selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="461" pos:column="10">if <condition pos:line="461" pos:column="13">(<expr><op:operator pos:line="461" pos:column="14">!</op:operator><call><name><name pos:line="461" pos:column="15">rs</name><op:operator pos:line="461" pos:column="17">.</op:operator><name pos:line="461" pos:column="18">next</name></name><argument_list pos:line="461" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="461" pos:column="25">
         <block pos:line="462" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="463" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="463" pos:column="35">.</op:operator><name pos:line="463" pos:column="36">reportFailure</name></name><argument_list pos:line="463" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="50">"No rows in ResultSet. Code not found."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="464" pos:column="17">return <expr><name pos:line="464" pos:column="24">result</name></expr>;</return>
         }</block></then></if>

        <decl_stmt><decl><type><name pos:line="467" pos:column="9">int</name></type> <name pos:line="467" pos:column="13">i</name> <init pos:line="467" pos:column="15">= <expr><lit:literal type="number" pos:line="467" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
        <do pos:line="468" pos:column="9">do<block pos:line="468" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="469" pos:column="11">codeList</name><index pos:line="469" pos:column="19">[<expr><name pos:line="469" pos:column="20">i</name></expr>]</index></name> <op:operator pos:line="469" pos:column="23">=</op:operator> <call><name><name pos:line="469" pos:column="25">rs</name><op:operator pos:line="469" pos:column="27">.</op:operator><name pos:line="469" pos:column="28">getInt</name></name><argument_list pos:line="469" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="469" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name pos:line="470" pos:column="11">categoryList</name><index pos:line="470" pos:column="23">[<expr><name pos:line="470" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="470" pos:column="27">=</op:operator> <call><name><name pos:line="470" pos:column="29">rs</name><op:operator pos:line="470" pos:column="31">.</op:operator><name pos:line="470" pos:column="32">getString</name></name><argument_list pos:line="470" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="470" pos:column="42">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="471" pos:column="11">i</name><op:operator pos:line="471" pos:column="12">++</op:operator></expr>;</expr_stmt>
        }</block>while<condition pos:line="472" pos:column="15">(<expr><call><name><name pos:line="472" pos:column="16">rs</name><op:operator pos:line="472" pos:column="18">.</op:operator><name pos:line="472" pos:column="19">next</name></name><argument_list pos:line="472" pos:column="23">()</argument_list></call></expr>)</condition>;</do>

         <for pos:line="474" pos:column="10">for(<init><decl><type><name pos:line="474" pos:column="14">int</name></type> <name pos:line="474" pos:column="18">j</name><init pos:line="474" pos:column="19">=<expr><lit:literal type="number" pos:line="474" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="474" pos:column="23">j</name><op:operator pos:line="474" pos:column="24">&lt;</op:operator><name pos:line="474" pos:column="25">i</name></expr>;</condition> <incr><expr><name pos:line="474" pos:column="28">j</name><op:operator pos:line="474" pos:column="29">++</op:operator></expr></incr>)<block pos:line="474" pos:column="32">{

            <comment type="line" pos:line="476" pos:column="13">// 0 code is not valid industry or occupation. Skipp 0</comment>
            <if pos:line="477" pos:column="13">if<condition pos:line="477" pos:column="15">( <expr><op:operator pos:line="477" pos:column="17">(</op:operator><name><name pos:line="477" pos:column="18">codeList</name><index pos:line="477" pos:column="26">[<expr><name pos:line="477" pos:column="27">j</name></expr>]</index></name> <op:operator pos:line="477" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="477" pos:column="33">0</lit:literal><op:operator pos:line="477" pos:column="34">)</op:operator> <op:operator pos:line="477" pos:column="36">||</op:operator> <op:operator pos:line="477" pos:column="39">(</op:operator><name pos:line="477" pos:column="40">codeList</name> <op:operator pos:line="477" pos:column="49">==</op:operator><lit:literal type="null" pos:line="477" pos:column="51">null</lit:literal><op:operator pos:line="477" pos:column="55">)</op:operator></expr>)</condition><then pos:line="477" pos:column="57">
               <continue pos:line="478" pos:column="16">continue;</continue></then></if> 

            <expr_stmt><expr><name pos:line="480" pos:column="13">level</name> <op:operator pos:line="480" pos:column="19">=</op:operator> <call><name pos:line="480" pos:column="21">ComputeAverageEducation</name><argument_list pos:line="480" pos:column="44">(<argument><expr><name pos:line="480" pos:column="45">selection</name></expr></argument>, <argument><expr><name><name pos:line="480" pos:column="56">codeList</name><index pos:line="480" pos:column="64">[<expr><name pos:line="480" pos:column="65">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="481" pos:column="13">if<condition pos:line="481" pos:column="15">( <expr><name pos:line="481" pos:column="17">maxLevel</name> <op:operator pos:line="481" pos:column="26">&lt;</op:operator><name pos:line="481" pos:column="27">level</name></expr>)</condition><then><block pos:line="481" pos:column="33">{
                  <expr_stmt><expr><name pos:line="482" pos:column="19">maxLevel</name> <op:operator pos:line="482" pos:column="28">=</op:operator> <name pos:line="482" pos:column="30">level</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name pos:line="483" pos:column="19">maxCode</name> <op:operator pos:line="483" pos:column="27">=</op:operator> <name><name pos:line="483" pos:column="29">codeList</name><index pos:line="483" pos:column="37">[<expr><name pos:line="483" pos:column="38">j</name></expr>]</index></name></expr>;</expr_stmt>
                  <expr_stmt><expr><name pos:line="484" pos:column="19">maxCategory</name> <op:operator pos:line="484" pos:column="31">=</op:operator> <name><name pos:line="484" pos:column="33">categoryList</name><index pos:line="484" pos:column="45">[<expr><name pos:line="484" pos:column="46">j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>

            <if pos:line="487" pos:column="13">if<condition pos:line="487" pos:column="15">(<expr><name pos:line="487" pos:column="16">minLevel</name><op:operator pos:line="487" pos:column="24">&gt;</op:operator><name pos:line="487" pos:column="25">level</name> <op:operator pos:line="487" pos:column="31">&amp;&amp;</op:operator> <name pos:line="487" pos:column="34">level</name><op:operator pos:line="487" pos:column="39">&gt;</op:operator><lit:literal type="number" pos:line="487" pos:column="40">0</lit:literal></expr>)</condition><then><block pos:line="487" pos:column="42">{
                 <expr_stmt><expr><name pos:line="488" pos:column="18">minLevel</name> <op:operator pos:line="488" pos:column="27">=</op:operator> <name pos:line="488" pos:column="29">level</name></expr>;</expr_stmt>
                 <expr_stmt><expr><name pos:line="489" pos:column="18">minCode</name> <op:operator pos:line="489" pos:column="26">=</op:operator> <name><name pos:line="489" pos:column="28">codeList</name><index pos:line="489" pos:column="36">[<expr><name pos:line="489" pos:column="37">j</name></expr>]</index></name></expr>;</expr_stmt>
                 <expr_stmt><expr><name pos:line="490" pos:column="18">minCategory</name> <op:operator pos:line="490" pos:column="30">=</op:operator> <name><name pos:line="490" pos:column="32">categoryList</name><index pos:line="490" pos:column="44">[<expr><name pos:line="490" pos:column="45">j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>           
              
         }</block></for>
         <expr_stmt><expr><call><name><name pos:line="494" pos:column="10">result</name><op:operator pos:line="494" pos:column="16">.</op:operator><name pos:line="494" pos:column="17">add</name></name><argument_list pos:line="494" pos:column="20">(<argument><expr><call><name><name pos:line="494" pos:column="21">levelToEducationMap</name><op:operator pos:line="494" pos:column="40">.</op:operator><name pos:line="494" pos:column="41">get</name></name><argument_list pos:line="494" pos:column="44">(<argument><expr><name pos:line="494" pos:column="45">maxLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="495" pos:column="10">System</name><op:operator pos:line="495" pos:column="16">.</op:operator><name pos:line="495" pos:column="17">out</name><op:operator pos:line="495" pos:column="20">.</op:operator><name pos:line="495" pos:column="21">println</name></name><argument_list pos:line="495" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="495" pos:column="29">"The "</lit:literal> <op:operator pos:line="495" pos:column="36">+</op:operator> <name pos:line="495" pos:column="38">selection</name> <op:operator pos:line="495" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="495" pos:column="50">" "</lit:literal> <op:operator pos:line="495" pos:column="54">+</op:operator> <name pos:line="495" pos:column="56">maxCategory</name><op:operator pos:line="495" pos:column="67">+</op:operator> <lit:literal type="string" pos:line="495" pos:column="69">"\n has the highest education level: "</lit:literal> <op:operator pos:line="495" pos:column="108">+</op:operator> <call><name><name pos:line="495" pos:column="110">levelToEducationMap</name><op:operator pos:line="495" pos:column="129">.</op:operator><name pos:line="495" pos:column="130">get</name></name><argument_list pos:line="495" pos:column="133">(<argument><expr><name pos:line="495" pos:column="134">maxLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="496" pos:column="10">result</name><op:operator pos:line="496" pos:column="16">.</op:operator><name pos:line="496" pos:column="17">add</name></name><argument_list pos:line="496" pos:column="20">(<argument><expr><call><name><name pos:line="496" pos:column="21">levelToEducationMap</name><op:operator pos:line="496" pos:column="40">.</op:operator><name pos:line="496" pos:column="41">get</name></name><argument_list pos:line="496" pos:column="44">(<argument><expr><name pos:line="496" pos:column="45">minLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
         <expr_stmt><expr><call><name><name pos:line="497" pos:column="10">System</name><op:operator pos:line="497" pos:column="16">.</op:operator><name pos:line="497" pos:column="17">out</name><op:operator pos:line="497" pos:column="20">.</op:operator><name pos:line="497" pos:column="21">println</name></name><argument_list pos:line="497" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="29">"The "</lit:literal> <op:operator pos:line="497" pos:column="36">+</op:operator> <name pos:line="497" pos:column="38">selection</name> <op:operator pos:line="497" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="497" pos:column="50">" "</lit:literal> <op:operator pos:line="497" pos:column="54">+</op:operator> <name pos:line="497" pos:column="56">minCategory</name> <op:operator pos:line="497" pos:column="68">+</op:operator> <lit:literal type="string" pos:line="497" pos:column="70">"\n has the lowest education level: "</lit:literal> <op:operator pos:line="497" pos:column="108">+</op:operator> <call><name><name pos:line="497" pos:column="110">levelToEducationMap</name><op:operator pos:line="497" pos:column="129">.</op:operator><name pos:line="497" pos:column="130">get</name></name><argument_list pos:line="497" pos:column="133">(<argument><expr><name pos:line="497" pos:column="134">minLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
         <expr_stmt><expr><call><name><name pos:line="498" pos:column="10">System</name><op:operator pos:line="498" pos:column="16">.</op:operator><name pos:line="498" pos:column="17">out</name><op:operator pos:line="498" pos:column="20">.</op:operator><name pos:line="498" pos:column="21">println</name></name><argument_list pos:line="498" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="498" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="499" pos:column="10">System</name><op:operator pos:line="499" pos:column="16">.</op:operator><name pos:line="499" pos:column="17">out</name><op:operator pos:line="499" pos:column="20">.</op:operator><name pos:line="499" pos:column="21">println</name></name><argument_list pos:line="499" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="499" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <decl_stmt><decl><type><name pos:line="501" pos:column="10">CalculateByOccupationOrIndustryCodeInterface</name></type> <name pos:line="501" pos:column="55">calc</name> <init pos:line="501" pos:column="60">= <expr><call><name><name pos:line="501" pos:column="62">Factory</name><op:operator pos:line="501" pos:column="69">.</op:operator><name pos:line="501" pos:column="70">getCalculateByOccupationOrIndustryCode</name></name><argument_list pos:line="501" pos:column="108">()</argument_list></call></expr></init></decl>;</decl_stmt>
         
         <if pos:line="503" pos:column="10">if<condition pos:line="503" pos:column="12">(<expr><call><name><name pos:line="503" pos:column="13">selection</name><op:operator pos:line="503" pos:column="22">.</op:operator><name pos:line="503" pos:column="23">equals</name></name><argument_list pos:line="503" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="503" pos:column="30">"industry"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="503" pos:column="42">{
               <expr_stmt><expr><name pos:line="504" pos:column="16">MaxAverageIncomeBasedOnCode</name> <op:operator pos:line="504" pos:column="44">=</op:operator> <call><name><name pos:line="504" pos:column="46">calc</name><op:operator pos:line="504" pos:column="50">.</op:operator><name pos:line="504" pos:column="51">calculateIncomeByIndustryCode</name></name><argument_list pos:line="504" pos:column="80">(<argument><expr><name pos:line="504" pos:column="81">maxCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name pos:line="505" pos:column="16">MinAverageIncomeBasedOnCode</name> <op:operator pos:line="505" pos:column="44">=</op:operator> <call><name><name pos:line="505" pos:column="46">calc</name><op:operator pos:line="505" pos:column="50">.</op:operator><name pos:line="505" pos:column="51">calculateIncomeByIndustryCode</name></name><argument_list pos:line="505" pos:column="80">(<argument><expr><name pos:line="505" pos:column="81">minCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="507" pos:column="10">else <if pos:line="507" pos:column="15">if<condition pos:line="507" pos:column="17">(<expr><call><name><name pos:line="507" pos:column="18">selection</name><op:operator pos:line="507" pos:column="27">.</op:operator><name pos:line="507" pos:column="28">equals</name></name><argument_list pos:line="507" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="507" pos:column="35">"occupation"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="507" pos:column="49">{
               <expr_stmt><expr><name pos:line="508" pos:column="16">MaxAverageIncomeBasedOnCode</name> <op:operator pos:line="508" pos:column="44">=</op:operator> <call><name><name pos:line="508" pos:column="46">calc</name><op:operator pos:line="508" pos:column="50">.</op:operator><name pos:line="508" pos:column="51">calculateIncomeByOccupationCode</name></name><argument_list pos:line="508" pos:column="82">(<argument><expr><name pos:line="508" pos:column="83">maxCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><name pos:line="509" pos:column="16">MinAverageIncomeBasedOnCode</name> <op:operator pos:line="509" pos:column="44">=</op:operator> <call><name><name pos:line="509" pos:column="46">calc</name><op:operator pos:line="509" pos:column="50">.</op:operator><name pos:line="509" pos:column="51">calculateIncomeByOccupationCode</name></name><argument_list pos:line="509" pos:column="82">(<argument><expr><name pos:line="509" pos:column="83">minCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="511" pos:column="10">else<block pos:line="511" pos:column="14">{
               <expr_stmt><expr><call><name><name pos:line="512" pos:column="16">System</name><op:operator pos:line="512" pos:column="22">.</op:operator><name pos:line="512" pos:column="23">out</name><op:operator pos:line="512" pos:column="26">.</op:operator><name pos:line="512" pos:column="27">println</name></name><argument_list pos:line="512" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="512" pos:column="35">"Invalid option: "</lit:literal> <op:operator pos:line="512" pos:column="54">+</op:operator><name pos:line="512" pos:column="55">selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <return pos:line="513" pos:column="16">return <expr><name pos:line="513" pos:column="23">result</name></expr>;</return>
         }</block></else></if></else></if>

         <decl_stmt><decl><type><name pos:line="516" pos:column="10">double</name></type> <name pos:line="516" pos:column="17">ammount</name> <init pos:line="516" pos:column="25">= <expr><lit:literal type="number" pos:line="516" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><name pos:line="517" pos:column="10">ammount</name> <op:operator pos:line="517" pos:column="18">=</op:operator> <call><name><name pos:line="517" pos:column="20">UtilitiesReq19_24</name><op:operator pos:line="517" pos:column="37">.</op:operator><name pos:line="517" pos:column="38">CalculateIncomePercentageDifference</name></name><argument_list pos:line="517" pos:column="73">(<argument><expr><name pos:line="517" pos:column="74">MaxAverageIncomeBasedOnCode</name></expr></argument>, <argument><expr><name pos:line="517" pos:column="103">MinAverageIncomeBasedOnCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="518" pos:column="10">ammount</name> <op:operator pos:line="518" pos:column="18">=</op:operator> <call><name><name pos:line="518" pos:column="20">Factory</name><op:operator pos:line="518" pos:column="27">.</op:operator><name pos:line="518" pos:column="28">getRoundMethod</name></name><argument_list pos:line="518" pos:column="42">(<argument><expr><name pos:line="518" pos:column="43">ammount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     
         <if pos:line="521" pos:column="10">if<condition pos:line="521" pos:column="12">(<expr><name pos:line="521" pos:column="13">MaxAverageIncomeBasedOnCode</name> <op:operator pos:line="521" pos:column="41">==</op:operator> <name pos:line="521" pos:column="44">MinAverageIncomeBasedOnCode</name></expr>)</condition><then><block pos:line="521" pos:column="72">{ 
        	   <expr_stmt><expr><call><name><name pos:line="522" pos:column="20">result</name><op:operator pos:line="522" pos:column="26">.</op:operator><name pos:line="522" pos:column="27">add</name></name><argument_list pos:line="522" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="522" pos:column="31">"The average income for "</lit:literal><op:operator pos:line="522" pos:column="56">+</op:operator> <name pos:line="522" pos:column="58">selection</name> <op:operator pos:line="522" pos:column="68">+</op:operator><lit:literal type="string" pos:line="522" pos:column="69">" with highest education level and lowest education level is equal"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="523" pos:column="16">System</name><op:operator pos:line="523" pos:column="22">.</op:operator><name pos:line="523" pos:column="23">out</name><op:operator pos:line="523" pos:column="26">.</op:operator><name pos:line="523" pos:column="27">println</name></name><argument_list pos:line="523" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="523" pos:column="35">"The average income for "</lit:literal><op:operator pos:line="523" pos:column="60">+</op:operator> <name pos:line="523" pos:column="62">selection</name> <op:operator pos:line="523" pos:column="72">+</op:operator><lit:literal type="string" pos:line="523" pos:column="73">" with highest education level and lowest education level is equal"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
         }</block></then><else pos:line="524" pos:column="11">else <if pos:line="524" pos:column="16">if<condition pos:line="524" pos:column="18">(<expr><name pos:line="524" pos:column="19">MaxAverageIncomeBasedOnCode</name> <op:operator pos:line="524" pos:column="47">&gt;</op:operator> <name pos:line="524" pos:column="49">MinAverageIncomeBasedOnCode</name></expr>)</condition><then><block pos:line="524" pos:column="77">{
        	   <expr_stmt><expr><call><name><name pos:line="525" pos:column="20">result</name><op:operator pos:line="525" pos:column="26">.</op:operator><name pos:line="525" pos:column="27">add</name></name><argument_list pos:line="525" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="525" pos:column="31">"The average income for "</lit:literal><op:operator pos:line="525" pos:column="56">+</op:operator> <name pos:line="525" pos:column="58">selection</name> <op:operator pos:line="525" pos:column="68">+</op:operator><lit:literal type="string" pos:line="525" pos:column="69">" with highest education level is "</lit:literal> <op:operator pos:line="525" pos:column="105">+</op:operator> <name pos:line="525" pos:column="107">ammount</name> <op:operator pos:line="525" pos:column="115">+</op:operator> <lit:literal type="string" pos:line="525" pos:column="117">"% higher than for "</lit:literal> <op:operator pos:line="525" pos:column="138">+</op:operator><name pos:line="525" pos:column="139">selection</name><op:operator pos:line="525" pos:column="148">+</op:operator> <lit:literal type="string" pos:line="525" pos:column="150">" with lowest education level"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="526" pos:column="16">System</name><op:operator pos:line="526" pos:column="22">.</op:operator><name pos:line="526" pos:column="23">out</name><op:operator pos:line="526" pos:column="26">.</op:operator><name pos:line="526" pos:column="27">println</name></name><argument_list pos:line="526" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="35">"The average income for "</lit:literal><op:operator pos:line="526" pos:column="60">+</op:operator> <name pos:line="526" pos:column="62">selection</name> <op:operator pos:line="526" pos:column="72">+</op:operator><lit:literal type="string" pos:line="526" pos:column="73">" with highest education level is "</lit:literal> <op:operator pos:line="526" pos:column="109">+</op:operator> <name pos:line="526" pos:column="111">ammount</name> <op:operator pos:line="526" pos:column="119">+</op:operator> <lit:literal type="string" pos:line="526" pos:column="121">"% higher than for "</lit:literal> <op:operator pos:line="526" pos:column="142">+</op:operator><name pos:line="526" pos:column="143">selection</name><op:operator pos:line="526" pos:column="152">+</op:operator> <lit:literal type="string" pos:line="526" pos:column="154">" with lowest education level"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then><else pos:line="527" pos:column="11">else<block pos:line="527" pos:column="15">{
        	   <expr_stmt><expr><call><name><name pos:line="528" pos:column="20">result</name><op:operator pos:line="528" pos:column="26">.</op:operator><name pos:line="528" pos:column="27">add</name></name><argument_list pos:line="528" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="31">"The average income for "</lit:literal><op:operator pos:line="528" pos:column="56">+</op:operator> <name pos:line="528" pos:column="58">selection</name> <op:operator pos:line="528" pos:column="68">+</op:operator><lit:literal type="string" pos:line="528" pos:column="69">" with highest education level is "</lit:literal> <op:operator pos:line="528" pos:column="105">+</op:operator> <name pos:line="528" pos:column="107">ammount</name> <op:operator pos:line="528" pos:column="115">+</op:operator> <lit:literal type="string" pos:line="528" pos:column="117">"% lower than for "</lit:literal> <op:operator pos:line="528" pos:column="137">+</op:operator><name pos:line="528" pos:column="138">selection</name><op:operator pos:line="528" pos:column="147">+</op:operator> <lit:literal type="string" pos:line="528" pos:column="149">" with lowest education level"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name pos:line="529" pos:column="16">System</name><op:operator pos:line="529" pos:column="22">.</op:operator><name pos:line="529" pos:column="23">out</name><op:operator pos:line="529" pos:column="26">.</op:operator><name pos:line="529" pos:column="27">println</name></name><argument_list pos:line="529" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="529" pos:column="35">"The average income for "</lit:literal><op:operator pos:line="529" pos:column="60">+</op:operator> <name pos:line="529" pos:column="62">selection</name> <op:operator pos:line="529" pos:column="72">+</op:operator><lit:literal type="string" pos:line="529" pos:column="73">" with highest education level is "</lit:literal> <op:operator pos:line="529" pos:column="109">+</op:operator> <name pos:line="529" pos:column="111">ammount</name> <op:operator pos:line="529" pos:column="119">+</op:operator> <lit:literal type="string" pos:line="529" pos:column="121">"% lower than for "</lit:literal> <op:operator pos:line="529" pos:column="141">+</op:operator><name pos:line="529" pos:column="142">selection</name><op:operator pos:line="529" pos:column="151">+</op:operator> <lit:literal type="string" pos:line="529" pos:column="153">" with lowest education level"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if></else></if>
          <expr_stmt><expr><call><name><name pos:line="531" pos:column="11">System</name><op:operator pos:line="531" pos:column="17">.</op:operator><name pos:line="531" pos:column="18">out</name><op:operator pos:line="531" pos:column="21">.</op:operator><name pos:line="531" pos:column="22">println</name></name><argument_list pos:line="531" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="531" pos:column="30">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="532" pos:column="11">rs</name><op:operator pos:line="532" pos:column="13">.</op:operator><name pos:line="532" pos:column="14">close</name></name><argument_list pos:line="532" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name pos:line="533" pos:column="11">s</name><op:operator pos:line="533" pos:column="12">.</op:operator><name pos:line="533" pos:column="13">close</name></name><argument_list pos:line="533" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
          
        }</block> <catch pos:line="535" pos:column="11">catch <parameter_list pos:line="535" pos:column="17">(<param><decl><type><name pos:line="535" pos:column="18">SQLException</name></type> <name pos:line="535" pos:column="31">e</name></decl></param>)</parameter_list>
         <block pos:line="536" pos:column="10">{
        	<expr_stmt><expr><call><name><name pos:line="537" pos:column="17">UtilitiesReq19_24</name><op:operator pos:line="537" pos:column="34">.</op:operator><name pos:line="537" pos:column="35">printExceptionText</name></name><argument_list pos:line="537" pos:column="53">(<argument><expr><name pos:line="537" pos:column="54">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return pos:line="539" pos:column="9">return <expr><name pos:line="539" pos:column="16">result</name></expr>;</return>
   }</block></function>
<comment type="line" pos:line="541" pos:column="1">// #########################CALCULATE LIKELINESS TO MOVE FACTOR ######################</comment>


   <function><type><annotation pos:line="544" pos:column="4">@<name pos:line="544" pos:column="5">TaDaMethod</name><argument_list pos:line="544" pos:column="15">(<argument><expr><name pos:line="544" pos:column="16">variablesToTrack</name> <op:operator pos:line="544" pos:column="33">=</op:operator> <block pos:line="544" pos:column="35">{<expr><lit:literal type="string" pos:line="544" pos:column="36">"code"</lit:literal></expr><op:operator pos:line="544" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="44">"wage"</lit:literal></expr></argument><op:operator pos:line="544" pos:column="50">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="52">"zip"</lit:literal></expr></argument><op:operator pos:line="544" pos:column="57">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="59">"state"</lit:literal></expr></argument>}</block></expr></argument>, <argument><expr><name pos:line="544" pos:column="69">correspondingDatabaseAttribute</name> <op:operator pos:line="544" pos:column="100">=</op:operator> <block pos:line="544" pos:column="102">{<expr><lit:literal type="string" pos:line="544" pos:column="103">"job.occupationcode"</lit:literal></expr><op:operator pos:line="544" pos:column="123">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="125">"job.weekwage"</lit:literal></expr></argument><op:operator pos:line="544" pos:column="139">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="141">"userrecord.zip"</lit:literal></expr></argument><op:operator pos:line="544" pos:column="157">,</op:operator> <argument><expr><lit:literal type="string" pos:line="544" pos:column="159">"ziptable.statename"</lit:literal></expr></argument>}</block></expr></argument> )</argument_list></annotation>
  <specifier pos:line="545" pos:column="3">public</specifier> <name pos:line="545" pos:column="10">String</name></type> <name pos:line="545" pos:column="17">CalculateLikelinessToMoveFactor</name><parameter_list pos:line="545" pos:column="48">(<param><decl><type><name pos:line="545" pos:column="49">int</name></type> <name pos:line="545" pos:column="53">ssn</name></decl></param>)</parameter_list><block pos:line="545" pos:column="57">{
     
      <decl_stmt><decl><type><name pos:line="547" pos:column="7">ResultSet</name></type> <name pos:line="547" pos:column="17">rs</name> <init pos:line="547" pos:column="20">= <expr><lit:literal type="null" pos:line="547" pos:column="22">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="548" pos:column="7">ResultSet</name></type> <name pos:line="548" pos:column="17">rs1</name> <init pos:line="548" pos:column="21">= <expr><lit:literal type="null" pos:line="548" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="549" pos:column="7">ResultSet</name></type> <name pos:line="549" pos:column="17">rs2</name> <init pos:line="549" pos:column="21">= <expr><lit:literal type="null" pos:line="549" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="550" pos:column="7">ResultSet</name></type> <name pos:line="550" pos:column="17">rs3</name> <init pos:line="550" pos:column="21">= <expr><lit:literal type="null" pos:line="550" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="551" pos:column="7">String</name><index pos:line="551" pos:column="13">[]</index></type> <name pos:line="551" pos:column="16">resultStates</name><init pos:line="551" pos:column="28">= <expr><op:operator pos:line="551" pos:column="30">new</op:operator> <name><name pos:line="551" pos:column="34">String</name><index pos:line="551" pos:column="40">[<expr><lit:literal type="number" pos:line="551" pos:column="41">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="552" pos:column="7">double</name><index pos:line="552" pos:column="13">[]</index></type> <name pos:line="552" pos:column="16">averageWage</name> <init pos:line="552" pos:column="28">= <expr><op:operator pos:line="552" pos:column="30">new</op:operator> <name><name pos:line="552" pos:column="34">double</name><index pos:line="552" pos:column="40">[<expr><lit:literal type="number" pos:line="552" pos:column="41">50</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="553" pos:column="7">int</name></type> <name pos:line="553" pos:column="11">size</name><init pos:line="553" pos:column="15">=<expr><lit:literal type="number" pos:line="553" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="554" pos:column="7">String</name></type> <name pos:line="554" pos:column="14">state</name><init pos:line="554" pos:column="19">=<expr><lit:literal type="string" pos:line="554" pos:column="20">""</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="555" pos:column="7">double</name></type> <name pos:line="555" pos:column="14">wage</name> <init pos:line="555" pos:column="19">=<expr><lit:literal type="number" pos:line="555" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="556" pos:column="7">int</name></type> <name pos:line="556" pos:column="11">betterStatesCount</name><init pos:line="556" pos:column="28">=<expr><lit:literal type="number" pos:line="556" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="557" pos:column="7">String</name></type> <name pos:line="557" pos:column="14">returnValue</name><init pos:line="557" pos:column="25">=<expr><lit:literal type="string" pos:line="557" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

      <try pos:line="559" pos:column="7">try<block pos:line="559" pos:column="10">{
    	  <expr_stmt><expr><call><name><name pos:line="560" pos:column="11">System</name><op:operator pos:line="560" pos:column="17">.</op:operator><name pos:line="560" pos:column="18">out</name><op:operator pos:line="560" pos:column="21">.</op:operator><name pos:line="560" pos:column="22">println</name></name><argument_list pos:line="560" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="560" pos:column="30">"flow:14"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="561" pos:column="10">_conn</name> <op:operator pos:line="561" pos:column="16">=</op:operator> <call><name><name pos:line="561" pos:column="18">DatabaseConnection</name><op:operator pos:line="561" pos:column="36">.</op:operator><name pos:line="561" pos:column="37">getConnection</name></name><argument_list pos:line="561" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="562" pos:column="10">s</name> <op:operator pos:line="562" pos:column="12">=</op:operator> <call><name><name pos:line="562" pos:column="14">_conn</name><op:operator pos:line="562" pos:column="19">.</op:operator><name pos:line="562" pos:column="20">createStatement</name></name><argument_list pos:line="562" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="564" pos:column="10">rs</name> <op:operator pos:line="564" pos:column="13">=</op:operator> <call><name><name pos:line="564" pos:column="15">s</name><op:operator pos:line="564" pos:column="16">.</op:operator><name pos:line="564" pos:column="17">executeQuery</name></name><argument_list pos:line="564" pos:column="29">(     
              <argument><expr><lit:literal type="string" pos:line="565" pos:column="15">"SELECT occupationcode FROM job WHERE ssn="</lit:literal> <op:operator pos:line="565" pos:column="59">+</op:operator> <name pos:line="565" pos:column="61">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="566" pos:column="10">if <condition pos:line="566" pos:column="13">(<expr><op:operator pos:line="566" pos:column="14">!</op:operator><call><name><name pos:line="566" pos:column="15">rs</name><op:operator pos:line="566" pos:column="17">.</op:operator><name pos:line="566" pos:column="18">next</name></name><argument_list pos:line="566" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="566" pos:column="25">
         <block pos:line="567" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="568" pos:column="18">System</name><op:operator pos:line="568" pos:column="24">.</op:operator><name pos:line="568" pos:column="25">out</name><op:operator pos:line="568" pos:column="28">.</op:operator><name pos:line="568" pos:column="29">println</name></name><argument_list pos:line="568" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="568" pos:column="37">"flow:15"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	 <expr_stmt><expr><call><name><name pos:line="569" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="569" pos:column="35">.</op:operator><name pos:line="569" pos:column="36">reportFailure</name></name><argument_list pos:line="569" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="569" pos:column="50">"No rows in ResultSet. Occupation code not found for SSN "</lit:literal> <op:operator pos:line="569" pos:column="109">+</op:operator> <name pos:line="569" pos:column="111">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="570" pos:column="17">return <expr><op:operator pos:line="570" pos:column="24">(</op:operator><lit:literal type="string" pos:line="570" pos:column="25">"Error"</lit:literal><op:operator pos:line="570" pos:column="32">)</op:operator></expr>;</return>
         }</block></then></if>
         <decl_stmt><decl><type><name pos:line="572" pos:column="10">int</name></type> <name pos:line="572" pos:column="14">code</name> <init pos:line="572" pos:column="19">= <expr><call><name><name pos:line="572" pos:column="21">rs</name><op:operator pos:line="572" pos:column="23">.</op:operator><name pos:line="572" pos:column="24">getInt</name></name><argument_list pos:line="572" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="572" pos:column="31">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

         
         <expr_stmt><expr><call><name><name pos:line="575" pos:column="10">System</name><op:operator pos:line="575" pos:column="16">.</op:operator><name pos:line="575" pos:column="17">out</name><op:operator pos:line="575" pos:column="20">.</op:operator><name pos:line="575" pos:column="21">println</name></name><argument_list pos:line="575" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="575" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="577" pos:column="10">rs1</name> <op:operator pos:line="577" pos:column="14">=</op:operator> <call><name><name pos:line="577" pos:column="16">s</name><op:operator pos:line="577" pos:column="17">.</op:operator><name pos:line="577" pos:column="18">executeQuery</name></name><argument_list pos:line="577" pos:column="30">(     
              <argument><expr><lit:literal type="string" pos:line="578" pos:column="15">"SELECT weekwage FROM job WHERE ssn="</lit:literal> <op:operator pos:line="578" pos:column="53">+</op:operator> <name pos:line="578" pos:column="55">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="579" pos:column="10">if <condition pos:line="579" pos:column="13">(<expr><op:operator pos:line="579" pos:column="14">!</op:operator><call><name><name pos:line="579" pos:column="15">rs1</name><op:operator pos:line="579" pos:column="18">.</op:operator><name pos:line="579" pos:column="19">next</name></name><argument_list pos:line="579" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="579" pos:column="26">
         <block pos:line="580" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="581" pos:column="18">System</name><op:operator pos:line="581" pos:column="24">.</op:operator><name pos:line="581" pos:column="25">out</name><op:operator pos:line="581" pos:column="28">.</op:operator><name pos:line="581" pos:column="29">println</name></name><argument_list pos:line="581" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="581" pos:column="37">"flow:16"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	 <expr_stmt><expr><call><name><name pos:line="582" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="582" pos:column="35">.</op:operator><name pos:line="582" pos:column="36">reportFailure</name></name><argument_list pos:line="582" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="582" pos:column="50">"No rows in ResultSet. Occupation code not found for SSN "</lit:literal> <op:operator pos:line="582" pos:column="109">+</op:operator> <name pos:line="582" pos:column="111">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="583" pos:column="17">return <expr><op:operator pos:line="583" pos:column="24">(</op:operator><lit:literal type="string" pos:line="583" pos:column="25">"Error"</lit:literal><op:operator pos:line="583" pos:column="32">)</op:operator></expr>;</return>
         }</block></then></if>
         <expr_stmt><expr><name pos:line="585" pos:column="10">wage</name> <op:operator pos:line="585" pos:column="15">=</op:operator> <call><name><name pos:line="585" pos:column="17">rs1</name><op:operator pos:line="585" pos:column="20">.</op:operator><name pos:line="585" pos:column="21">getInt</name></name><argument_list pos:line="585" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="585" pos:column="28">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="587" pos:column="10">rs2</name> <op:operator pos:line="587" pos:column="14">=</op:operator> <call><name><name pos:line="587" pos:column="16">s</name><op:operator pos:line="587" pos:column="17">.</op:operator><name pos:line="587" pos:column="18">executeQuery</name></name><argument_list pos:line="587" pos:column="30">(     
              <argument><expr><lit:literal type="string" pos:line="588" pos:column="15">"SELECT zip FROM userrecord WHERE ssn="</lit:literal> <op:operator pos:line="588" pos:column="55">+</op:operator> <name pos:line="588" pos:column="57">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="589" pos:column="10">if <condition pos:line="589" pos:column="13">(<expr><op:operator pos:line="589" pos:column="14">!</op:operator><call><name><name pos:line="589" pos:column="15">rs2</name><op:operator pos:line="589" pos:column="18">.</op:operator><name pos:line="589" pos:column="19">next</name></name><argument_list pos:line="589" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="589" pos:column="26">
         <block pos:line="590" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="591" pos:column="18">System</name><op:operator pos:line="591" pos:column="24">.</op:operator><name pos:line="591" pos:column="25">out</name><op:operator pos:line="591" pos:column="28">.</op:operator><name pos:line="591" pos:column="29">println</name></name><argument_list pos:line="591" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="591" pos:column="37">"flow:17"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	 <expr_stmt><expr><call><name><name pos:line="592" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="592" pos:column="35">.</op:operator><name pos:line="592" pos:column="36">reportFailure</name></name><argument_list pos:line="592" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="592" pos:column="50">"No rows in ResultSet. Occupation code not found for SSN "</lit:literal> <op:operator pos:line="592" pos:column="109">+</op:operator> <name pos:line="592" pos:column="111">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="593" pos:column="17">return <expr><op:operator pos:line="593" pos:column="24">(</op:operator><lit:literal type="string" pos:line="593" pos:column="25">"Error"</lit:literal><op:operator pos:line="593" pos:column="32">)</op:operator></expr>;</return>
         }</block></then></if>
         <decl_stmt><decl><type><name pos:line="595" pos:column="10">String</name></type> <name pos:line="595" pos:column="17">zip</name> <init pos:line="595" pos:column="21">= <expr><call><name><name pos:line="595" pos:column="23">rs2</name><op:operator pos:line="595" pos:column="26">.</op:operator><name pos:line="595" pos:column="27">getString</name></name><argument_list pos:line="595" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="595" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
         <if pos:line="597" pos:column="10">if <condition pos:line="597" pos:column="13">(<expr><name pos:line="597" pos:column="14">zip</name><op:operator pos:line="597" pos:column="17">==</op:operator><lit:literal type="null" pos:line="597" pos:column="19">null</lit:literal></expr>)</condition><then pos:line="597" pos:column="24">
         <block pos:line="598" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="599" pos:column="18">System</name><op:operator pos:line="599" pos:column="24">.</op:operator><name pos:line="599" pos:column="25">out</name><op:operator pos:line="599" pos:column="28">.</op:operator><name pos:line="599" pos:column="29">println</name></name><argument_list pos:line="599" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="599" pos:column="37">"flow:18"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	 <expr_stmt><expr><call><name><name pos:line="600" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="600" pos:column="35">.</op:operator><name pos:line="600" pos:column="36">reportFailure</name></name><argument_list pos:line="600" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="600" pos:column="50">"No rows in ResultSet. Zip not found for SSN "</lit:literal> <op:operator pos:line="600" pos:column="97">+</op:operator> <name pos:line="600" pos:column="99">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="601" pos:column="17">return <expr><op:operator pos:line="601" pos:column="24">(</op:operator><lit:literal type="string" pos:line="601" pos:column="25">"Error"</lit:literal><op:operator pos:line="601" pos:column="32">)</op:operator></expr>;</return>
         }</block></then></if>

         <expr_stmt><expr><name pos:line="604" pos:column="10">rs3</name> <op:operator pos:line="604" pos:column="14">=</op:operator> <call><name><name pos:line="604" pos:column="16">s</name><op:operator pos:line="604" pos:column="17">.</op:operator><name pos:line="604" pos:column="18">executeQuery</name></name><argument_list pos:line="604" pos:column="30">(     
              <argument><expr><lit:literal type="string" pos:line="605" pos:column="15">"SELECT statename FROM ziptable WHERE zip ='"</lit:literal> <op:operator pos:line="605" pos:column="61">+</op:operator> <name pos:line="605" pos:column="63">zip</name> <op:operator pos:line="605" pos:column="67">+</op:operator><lit:literal type="string" pos:line="605" pos:column="68">"'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="606" pos:column="10">if <condition pos:line="606" pos:column="13">(<expr><op:operator pos:line="606" pos:column="14">!</op:operator><call><name><name pos:line="606" pos:column="15">rs3</name><op:operator pos:line="606" pos:column="18">.</op:operator><name pos:line="606" pos:column="19">next</name></name><argument_list pos:line="606" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="606" pos:column="26">
         <block pos:line="607" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="608" pos:column="18">System</name><op:operator pos:line="608" pos:column="24">.</op:operator><name pos:line="608" pos:column="25">out</name><op:operator pos:line="608" pos:column="28">.</op:operator><name pos:line="608" pos:column="29">println</name></name><argument_list pos:line="608" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="608" pos:column="37">"flow:19"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	 <expr_stmt><expr><call><name><name pos:line="609" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="609" pos:column="35">.</op:operator><name pos:line="609" pos:column="36">reportFailure</name></name><argument_list pos:line="609" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="609" pos:column="50">"No rows in ResultSet. State not found for SSN "</lit:literal> <op:operator pos:line="609" pos:column="99">+</op:operator> <name pos:line="609" pos:column="101">ssn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="610" pos:column="17">return <expr><op:operator pos:line="610" pos:column="24">(</op:operator><lit:literal type="string" pos:line="610" pos:column="25">"Error"</lit:literal><op:operator pos:line="610" pos:column="32">)</op:operator></expr>;</return>
         }</block></then></if>
         <expr_stmt><expr><name pos:line="612" pos:column="10">state</name> <op:operator pos:line="612" pos:column="16">=</op:operator> <call><name><name pos:line="612" pos:column="18">rs3</name><op:operator pos:line="612" pos:column="21">.</op:operator><name pos:line="612" pos:column="22">getString</name></name><argument_list pos:line="612" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="612" pos:column="32">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

         <expr_stmt><expr><call><name><name pos:line="614" pos:column="10">rs</name><op:operator pos:line="614" pos:column="12">.</op:operator><name pos:line="614" pos:column="13">close</name></name><argument_list pos:line="614" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="615" pos:column="10">rs1</name><op:operator pos:line="615" pos:column="13">.</op:operator><name pos:line="615" pos:column="14">close</name></name><argument_list pos:line="615" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="616" pos:column="10">rs2</name><op:operator pos:line="616" pos:column="13">.</op:operator><name pos:line="616" pos:column="14">close</name></name><argument_list pos:line="616" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="617" pos:column="10">rs3</name><op:operator pos:line="617" pos:column="13">.</op:operator><name pos:line="617" pos:column="14">close</name></name><argument_list pos:line="617" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="618" pos:column="10">s</name><op:operator pos:line="618" pos:column="11">.</op:operator><name pos:line="618" pos:column="12">close</name></name><argument_list pos:line="618" pos:column="17">()</argument_list></call></expr>;</expr_stmt> 

         <expr_stmt><expr><name pos:line="620" pos:column="10">size</name> <op:operator pos:line="620" pos:column="15">=</op:operator> <call><name pos:line="620" pos:column="17">CalculateAverageWageForOccupationForAllStates</name><argument_list pos:line="620" pos:column="62">(<argument><expr><name pos:line="620" pos:column="63">code</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="69">resultStates</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="83">averageWage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       

         <for pos:line="622" pos:column="10">for(<init><decl><type><name pos:line="622" pos:column="14">int</name></type> <name pos:line="622" pos:column="18">i</name><init pos:line="622" pos:column="19">=<expr><lit:literal type="number" pos:line="622" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="622" pos:column="23">i</name><op:operator pos:line="622" pos:column="24">&lt;</op:operator><name pos:line="622" pos:column="25">size</name></expr>;</condition> <incr><expr><name pos:line="622" pos:column="31">i</name><op:operator pos:line="622" pos:column="32">++</op:operator></expr></incr>)<block pos:line="622" pos:column="35">{
        	 <expr_stmt><expr><call><name><name pos:line="623" pos:column="18">System</name><op:operator pos:line="623" pos:column="24">.</op:operator><name pos:line="623" pos:column="25">out</name><op:operator pos:line="623" pos:column="28">.</op:operator><name pos:line="623" pos:column="29">println</name></name><argument_list pos:line="623" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="623" pos:column="37">"flow:20"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if pos:line="624" pos:column="12">if<condition pos:line="624" pos:column="14">(<expr><op:operator pos:line="624" pos:column="15">(</op:operator><name pos:line="624" pos:column="16">wage</name> <op:operator pos:line="624" pos:column="21">&lt;</op:operator> <name><name pos:line="624" pos:column="23">averageWage</name><index pos:line="624" pos:column="34">[<expr><name pos:line="624" pos:column="35">i</name></expr>]</index></name><op:operator pos:line="624" pos:column="37">)</op:operator> <op:operator pos:line="624" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="624" pos:column="42">!</op:operator><op:operator pos:line="624" pos:column="43">(</op:operator><call><name><name pos:line="624" pos:column="44">state</name><op:operator pos:line="624" pos:column="49">.</op:operator><name pos:line="624" pos:column="50">equals</name></name><argument_list pos:line="624" pos:column="56">(<argument><expr><name><name pos:line="624" pos:column="57">resultStates</name><index pos:line="624" pos:column="69">[<expr><name pos:line="624" pos:column="70">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="624" pos:column="73">)</op:operator></expr>)</condition><then><block pos:line="624" pos:column="75">{
        	   <expr_stmt><expr><call><name><name pos:line="625" pos:column="20">System</name><op:operator pos:line="625" pos:column="26">.</op:operator><name pos:line="625" pos:column="27">out</name><op:operator pos:line="625" pos:column="30">.</op:operator><name pos:line="625" pos:column="31">println</name></name><argument_list pos:line="625" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="625" pos:column="39">"flow:21"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name pos:line="626" pos:column="15">betterStatesCount</name><op:operator pos:line="626" pos:column="32">++</op:operator></expr>;</expr_stmt>
           }</block></then></if>
         }</block></for> 
         
         <if pos:line="630" pos:column="10">if<condition pos:line="630" pos:column="12">(<expr><name pos:line="630" pos:column="13">betterStatesCount</name> <op:operator pos:line="630" pos:column="31">&gt;</op:operator> <name pos:line="630" pos:column="33">size</name><op:operator pos:line="630" pos:column="37">/</op:operator><lit:literal type="number" pos:line="630" pos:column="38">2</lit:literal></expr>)</condition><then><block pos:line="630" pos:column="40">{
        	 <expr_stmt><expr><call><name><name pos:line="631" pos:column="18">System</name><op:operator pos:line="631" pos:column="24">.</op:operator><name pos:line="631" pos:column="25">out</name><op:operator pos:line="631" pos:column="28">.</op:operator><name pos:line="631" pos:column="29">println</name></name><argument_list pos:line="631" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="631" pos:column="37">"flow:22"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="632" pos:column="12">System</name><op:operator pos:line="632" pos:column="18">.</op:operator><name pos:line="632" pos:column="19">out</name><op:operator pos:line="632" pos:column="22">.</op:operator><name pos:line="632" pos:column="23">println</name></name><argument_list pos:line="632" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="632" pos:column="31">"The likeliness to move factor is high as more than 50% of states have better average wage for this person's occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="633" pos:column="12">returnValue</name><op:operator pos:line="633" pos:column="23">=</op:operator> <lit:literal type="string" pos:line="633" pos:column="25">"high"</lit:literal></expr>;</expr_stmt>
         }</block></then>
         <else pos:line="635" pos:column="10">else<block pos:line="635" pos:column="14">{
        	 <expr_stmt><expr><call><name><name pos:line="636" pos:column="18">System</name><op:operator pos:line="636" pos:column="24">.</op:operator><name pos:line="636" pos:column="25">out</name><op:operator pos:line="636" pos:column="28">.</op:operator><name pos:line="636" pos:column="29">println</name></name><argument_list pos:line="636" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="636" pos:column="37">"flow:23"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name pos:line="637" pos:column="12">System</name><op:operator pos:line="637" pos:column="18">.</op:operator><name pos:line="637" pos:column="19">out</name><op:operator pos:line="637" pos:column="22">.</op:operator><name pos:line="637" pos:column="23">println</name></name><argument_list pos:line="637" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="637" pos:column="31">"The likeliness to move factor is low as more than 50% of states have lower or equal average wage for this person's occupation"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name pos:line="638" pos:column="12">returnValue</name><op:operator pos:line="638" pos:column="23">=</op:operator> <lit:literal type="string" pos:line="638" pos:column="25">"low"</lit:literal></expr>;</expr_stmt>
         }</block></else></if>                 

     }</block> <catch pos:line="641" pos:column="8">catch <parameter_list pos:line="641" pos:column="14">(<param><decl><type><name pos:line="641" pos:column="15">SQLException</name></type> <name pos:line="641" pos:column="28">e</name></decl></param>)</parameter_list>
        <block pos:line="642" pos:column="9">{
    	 <expr_stmt><expr><call><name><name pos:line="643" pos:column="10">System</name><op:operator pos:line="643" pos:column="16">.</op:operator><name pos:line="643" pos:column="17">out</name><op:operator pos:line="643" pos:column="20">.</op:operator><name pos:line="643" pos:column="21">println</name></name><argument_list pos:line="643" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="643" pos:column="29">"flow:24"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	 <expr_stmt><expr><call><name><name pos:line="644" pos:column="10">UtilitiesReq19_24</name><op:operator pos:line="644" pos:column="27">.</op:operator><name pos:line="644" pos:column="28">printExceptionText</name></name><argument_list pos:line="644" pos:column="46">(<argument><expr><name pos:line="644" pos:column="47">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
        <return pos:line="646" pos:column="9">return <expr><name pos:line="646" pos:column="16">returnValue</name></expr>;</return>
    }</block></function>


<comment type="line" pos:line="650" pos:column="1">// ############################## INITIALIZATION ###################################</comment>

 

   <function><type><specifier pos:line="654" pos:column="4">private</specifier> <name pos:line="654" pos:column="12">void</name></type> <name pos:line="654" pos:column="17">initializeLevelToEducationHashMap</name><parameter_list pos:line="654" pos:column="50">(<param><decl><type><name><name pos:line="654" pos:column="51">HashMap</name><argument_list pos:line="654" pos:column="58">&lt;<argument><name pos:line="654" pos:column="59">Integer</name></argument>, <argument><name pos:line="654" pos:column="68">String</name></argument>&gt;</argument_list></name></type> <name pos:line="654" pos:column="76">levelToEducationMap</name></decl></param>)</parameter_list><block pos:line="654" pos:column="96">{

    	<decl_stmt><decl><type><name pos:line="656" pos:column="9">String</name><index pos:line="656" pos:column="15">[]</index></type> <name pos:line="656" pos:column="18">resultSet</name> <init pos:line="656" pos:column="28">= <expr><op:operator pos:line="656" pos:column="30">new</op:operator> <name><name pos:line="656" pos:column="34">String</name><index pos:line="656" pos:column="40">[<expr><name pos:line="656" pos:column="41">maxEduDegrees</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="657" pos:column="9">int</name></type> <name pos:line="657" pos:column="13">i</name> <init pos:line="657" pos:column="15">=<expr><lit:literal type="number" pos:line="657" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="658" pos:column="9">getEducationResultSet</name><argument_list pos:line="658" pos:column="30">(<argument><expr><name pos:line="658" pos:column="31">resultSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
        <do pos:line="661" pos:column="9">do<block pos:line="661" pos:column="11">{
                <expr_stmt><expr><call><name><name pos:line="662" pos:column="17">levelToEducationMap</name><op:operator pos:line="662" pos:column="36">.</op:operator><name pos:line="662" pos:column="37">put</name></name><argument_list pos:line="662" pos:column="40">(<argument><expr><name pos:line="662" pos:column="41">i</name></expr></argument>, <argument><expr><name><name pos:line="662" pos:column="44">resultSet</name><index pos:line="662" pos:column="53">[<expr><name pos:line="662" pos:column="54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><name pos:line="663" pos:column="17">i</name><op:operator pos:line="663" pos:column="18">++</op:operator></expr>;</expr_stmt>
        }</block>while<condition pos:line="664" pos:column="15">(<expr><name pos:line="664" pos:column="16">i</name><op:operator pos:line="664" pos:column="17">&lt;</op:operator><name pos:line="664" pos:column="18">maxEduDegrees</name></expr>)</condition>;</do>  
        
        
   }</block></function>


      <function><type><specifier pos:line="670" pos:column="7">private</specifier> <name pos:line="670" pos:column="15">void</name></type> <name pos:line="670" pos:column="20">initializeEducationToLevelHashMap</name><parameter_list pos:line="670" pos:column="53">(<param><decl><type><name><name pos:line="670" pos:column="54">HashMap</name><argument_list pos:line="670" pos:column="61">&lt;<argument><name pos:line="670" pos:column="62">String</name></argument>, <argument><name pos:line="670" pos:column="70">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="670" pos:column="79">educationTolevelsMap</name></decl></param>)</parameter_list><block pos:line="670" pos:column="100">{

    	<decl_stmt><decl><type><name pos:line="672" pos:column="9">String</name><index pos:line="672" pos:column="15">[]</index></type> <name pos:line="672" pos:column="18">resultSet</name> <init pos:line="672" pos:column="28">= <expr><op:operator pos:line="672" pos:column="30">new</op:operator> <name><name pos:line="672" pos:column="34">String</name><index pos:line="672" pos:column="40">[<expr><name pos:line="672" pos:column="41">maxEduDegrees</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="673" pos:column="9">int</name></type> <name pos:line="673" pos:column="13">i</name> <init pos:line="673" pos:column="15">=<expr><lit:literal type="number" pos:line="673" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="674" pos:column="9">getEducationResultSet</name><argument_list pos:line="674" pos:column="30">(<argument><expr><name pos:line="674" pos:column="31">resultSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             
        <do pos:line="676" pos:column="9">do<block pos:line="676" pos:column="11">{
                <expr_stmt><expr><call><name><name pos:line="677" pos:column="17">educationTolevelsMap</name><op:operator pos:line="677" pos:column="37">.</op:operator><name pos:line="677" pos:column="38">put</name></name><argument_list pos:line="677" pos:column="41">(<argument><expr><name><name pos:line="677" pos:column="42">resultSet</name><index pos:line="677" pos:column="51">[<expr><name pos:line="677" pos:column="52">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="677" pos:column="56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="678" pos:column="17">i</name><op:operator pos:line="678" pos:column="18">++</op:operator></expr>;</expr_stmt>
        }</block>while<condition pos:line="679" pos:column="15">(<expr><name pos:line="679" pos:column="16">i</name><op:operator pos:line="679" pos:column="17">&lt;</op:operator><name pos:line="679" pos:column="18">maxEduDegrees</name></expr>)</condition>;</do>  
      
   }</block></function>
   
      <function><type><annotation pos:line="683" pos:column="7">@<name pos:line="683" pos:column="8">TaDaMethod</name><argument_list pos:line="683" pos:column="18">(<argument><expr><name pos:line="683" pos:column="19">variablesToTrack</name> <op:operator pos:line="683" pos:column="36">=</op:operator> <block pos:line="683" pos:column="38">{<expr><lit:literal type="string" pos:line="683" pos:column="39">"a"</lit:literal></expr><op:operator pos:line="683" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="683" pos:column="44">"b"</lit:literal></expr></argument>}</block></expr></argument>, <argument><expr><name pos:line="683" pos:column="50">correspondingDatabaseAttribute</name> <op:operator pos:line="683" pos:column="81">=</op:operator> <block pos:line="683" pos:column="83">{<expr><lit:literal type="string" pos:line="683" pos:column="84">"ssn.education"</lit:literal></expr><op:operator pos:line="683" pos:column="99">,</op:operator> <argument><expr><lit:literal type="string" pos:line="683" pos:column="101">"education.education"</lit:literal></expr></argument>}</block></expr></argument> )</argument_list></annotation>
      <specifier pos:line="684" pos:column="7">private</specifier> <name pos:line="684" pos:column="15">void</name></type> <name pos:line="684" pos:column="20">initializeSsnToEducationMap</name><parameter_list pos:line="684" pos:column="47">(<param><decl><type><name><name pos:line="684" pos:column="48">HashMap</name><argument_list pos:line="684" pos:column="55">&lt;<argument><name pos:line="684" pos:column="56">Integer</name></argument>, <argument><name pos:line="684" pos:column="65">String</name></argument>&gt;</argument_list></name></type> <name pos:line="684" pos:column="73">ssnToEducationMap</name></decl></param>)</parameter_list><block pos:line="684" pos:column="91">{

        <decl_stmt><decl><type><name pos:line="686" pos:column="9">ResultSet</name></type> <name pos:line="686" pos:column="19">rs</name> <init pos:line="686" pos:column="22">= <expr><lit:literal type="null" pos:line="686" pos:column="24">null</lit:literal></expr></init></decl>;</decl_stmt>

        <try pos:line="688" pos:column="9">try <block pos:line="688" pos:column="13">{
        	<expr_stmt><expr><name pos:line="689" pos:column="17">_conn</name> <op:operator pos:line="689" pos:column="23">=</op:operator> <call><name><name pos:line="689" pos:column="25">DatabaseConnection</name><op:operator pos:line="689" pos:column="43">.</op:operator><name pos:line="689" pos:column="44">getConnection</name></name><argument_list pos:line="689" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
             	<expr_stmt><expr><name pos:line="690" pos:column="17">s</name> <op:operator pos:line="690" pos:column="19">=</op:operator> <call><name><name pos:line="690" pos:column="21">_conn</name><op:operator pos:line="690" pos:column="26">.</op:operator><name pos:line="690" pos:column="27">createStatement</name></name><argument_list pos:line="690" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
     		<expr_stmt><expr><name pos:line="691" pos:column="17">rs</name> <op:operator pos:line="691" pos:column="20">=</op:operator> <call><name><name pos:line="691" pos:column="22">s</name><op:operator pos:line="691" pos:column="23">.</op:operator><name pos:line="691" pos:column="24">executeQuery</name></name><argument_list pos:line="691" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="691" pos:column="37">"SELECT ssn, education FROM education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	<if pos:line="692" pos:column="17">if <condition pos:line="692" pos:column="20">(<expr><op:operator pos:line="692" pos:column="21">!</op:operator><call><name><name pos:line="692" pos:column="22">rs</name><op:operator pos:line="692" pos:column="24">.</op:operator><name pos:line="692" pos:column="25">next</name></name><argument_list pos:line="692" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="692" pos:column="32">
       		<block pos:line="693" pos:column="17">{
            	 	<expr_stmt><expr><call><name><name pos:line="694" pos:column="25">UtilitiesReq19_24</name><op:operator pos:line="694" pos:column="42">.</op:operator><name pos:line="694" pos:column="43">reportFailure</name></name><argument_list pos:line="694" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="694" pos:column="57">"No rows in ResultSet. No SSN found for table education"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                	<return pos:line="695" pos:column="25">return;</return>
        	}</block></then></if>
             
        	<do pos:line="698" pos:column="17">do<block pos:line="698" pos:column="19">{
        		<decl_stmt><decl><type><name pos:line="699" pos:column="25">int</name></type> <name pos:line="699" pos:column="29">a</name> <init pos:line="699" pos:column="31">= <expr><call><name><name pos:line="699" pos:column="33">rs</name><op:operator pos:line="699" pos:column="35">.</op:operator><name pos:line="699" pos:column="36">getInt</name></name><argument_list pos:line="699" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="699" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        		<decl_stmt><decl><type><name pos:line="700" pos:column="25">String</name></type> <name pos:line="700" pos:column="32">b</name> <init pos:line="700" pos:column="34">= <expr><call><name><name pos:line="700" pos:column="36">rs</name><op:operator pos:line="700" pos:column="38">.</op:operator><name pos:line="700" pos:column="39">getString</name></name><argument_list pos:line="700" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="700" pos:column="49">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                	<expr_stmt><expr><call><name><name pos:line="701" pos:column="25">ssnToEducationMap</name><op:operator pos:line="701" pos:column="42">.</op:operator><name pos:line="701" pos:column="43">put</name></name><argument_list pos:line="701" pos:column="46">(<argument><expr><name pos:line="701" pos:column="47">a</name></expr></argument>, <argument><expr><name pos:line="701" pos:column="50">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        	}</block>while<condition pos:line="702" pos:column="23">(<expr><call><name><name pos:line="702" pos:column="24">rs</name><op:operator pos:line="702" pos:column="26">.</op:operator><name pos:line="702" pos:column="27">next</name></name><argument_list pos:line="702" pos:column="31">()</argument_list></call></expr>)</condition>;</do>

		<expr_stmt><expr><call><name><name pos:line="704" pos:column="17">rs</name><op:operator pos:line="704" pos:column="19">.</op:operator><name pos:line="704" pos:column="20">close</name></name><argument_list pos:line="704" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><call><name><name pos:line="705" pos:column="17">s</name><op:operator pos:line="705" pos:column="18">.</op:operator><name pos:line="705" pos:column="19">close</name></name><argument_list pos:line="705" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="706" pos:column="11">catch <parameter_list pos:line="706" pos:column="17">(<param><decl><type><name pos:line="706" pos:column="18">SQLException</name></type> <name pos:line="706" pos:column="31">e</name></decl></param>)</parameter_list>
          <block pos:line="707" pos:column="11">{
        	<expr_stmt><expr><call><name><name pos:line="708" pos:column="17">UtilitiesReq19_24</name><op:operator pos:line="708" pos:column="34">.</op:operator><name pos:line="708" pos:column="35">printExceptionText</name></name><argument_list pos:line="708" pos:column="53">(<argument><expr><name pos:line="708" pos:column="54">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
   }</block></function>

      <function><type><annotation pos:line="712" pos:column="7">@<name pos:line="712" pos:column="8">TaDaMethod</name><argument_list pos:line="712" pos:column="18">(<argument><expr><name pos:line="712" pos:column="19">variablesToTrack</name> <op:operator pos:line="712" pos:column="36">=</op:operator> <block pos:line="712" pos:column="38">{<expr><lit:literal type="string" pos:line="712" pos:column="39">"a"</lit:literal></expr><op:operator pos:line="712" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="712" pos:column="44">"b"</lit:literal></expr></argument>}</block></expr></argument>, <argument><expr><name pos:line="712" pos:column="50">correspondingDatabaseAttribute</name> <op:operator pos:line="712" pos:column="81">=</op:operator> <block pos:line="712" pos:column="83">{<expr><lit:literal type="string" pos:line="712" pos:column="84">"ssn.userrecord"</lit:literal></expr><op:operator pos:line="712" pos:column="100">,</op:operator> <argument><expr><lit:literal type="string" pos:line="712" pos:column="102">"zip.userrecord"</lit:literal></expr></argument>}</block></expr></argument> )</argument_list></annotation>
   <specifier pos:line="713" pos:column="4">private</specifier> <name pos:line="713" pos:column="12">void</name></type> <name pos:line="713" pos:column="17">initializeSsnToZipMap</name><parameter_list pos:line="713" pos:column="38">(<param><decl><type><name><name pos:line="713" pos:column="39">HashMap</name><argument_list pos:line="713" pos:column="46">&lt;<argument><name pos:line="713" pos:column="47">Integer</name></argument>, <argument><name pos:line="713" pos:column="56">String</name></argument>&gt;</argument_list></name></type> <name pos:line="713" pos:column="64">ssnToZipMap</name></decl></param>)</parameter_list><block pos:line="713" pos:column="76">{

       <decl_stmt><decl><type><name pos:line="715" pos:column="8">ResultSet</name></type> <name pos:line="715" pos:column="18">rs</name> <init pos:line="715" pos:column="21">= <expr><lit:literal type="null" pos:line="715" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
       <try pos:line="716" pos:column="8">try<block pos:line="716" pos:column="11">{
         <expr_stmt><expr><name pos:line="717" pos:column="10">_conn</name> <op:operator pos:line="717" pos:column="16">=</op:operator> <call><name><name pos:line="717" pos:column="18">DatabaseConnection</name><op:operator pos:line="717" pos:column="36">.</op:operator><name pos:line="717" pos:column="37">getConnection</name></name><argument_list pos:line="717" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="718" pos:column="10">s</name> <op:operator pos:line="718" pos:column="12">=</op:operator> <call><name><name pos:line="718" pos:column="14">_conn</name><op:operator pos:line="718" pos:column="19">.</op:operator><name pos:line="718" pos:column="20">createStatement</name></name><argument_list pos:line="718" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
 
         <expr_stmt><expr><name pos:line="720" pos:column="10">rs</name> <op:operator pos:line="720" pos:column="13">=</op:operator> <call><name><name pos:line="720" pos:column="15">s</name><op:operator pos:line="720" pos:column="16">.</op:operator><name pos:line="720" pos:column="17">executeQuery</name></name><argument_list pos:line="720" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="30">"SELECT ssn, zip FROM userrecord"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="721" pos:column="10">if <condition pos:line="721" pos:column="13">(<expr><op:operator pos:line="721" pos:column="14">!</op:operator><call><name><name pos:line="721" pos:column="15">rs</name><op:operator pos:line="721" pos:column="17">.</op:operator><name pos:line="721" pos:column="18">next</name></name><argument_list pos:line="721" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="721" pos:column="25">
         <block pos:line="722" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="723" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="723" pos:column="35">.</op:operator><name pos:line="723" pos:column="36">reportFailure</name></name><argument_list pos:line="723" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="723" pos:column="50">"No rows in ResultSet. No SSN, zip found for table userrecord"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="724" pos:column="17">return;</return>
         }</block></then></if>

         <do pos:line="727" pos:column="10">do<block pos:line="727" pos:column="12">{
        	 <decl_stmt><decl><type><name pos:line="728" pos:column="18">int</name></type> <name pos:line="728" pos:column="22">a</name> <init pos:line="728" pos:column="24">= <expr><call><name><name pos:line="728" pos:column="26">rs</name><op:operator pos:line="728" pos:column="28">.</op:operator><name pos:line="728" pos:column="29">getInt</name></name><argument_list pos:line="728" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="728" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     		 <decl_stmt><decl><type><name pos:line="729" pos:column="18">String</name></type> <name pos:line="729" pos:column="25">b</name> <init pos:line="729" pos:column="27">= <expr><call><name><name pos:line="729" pos:column="29">rs</name><op:operator pos:line="729" pos:column="31">.</op:operator><name pos:line="729" pos:column="32">getString</name></name><argument_list pos:line="729" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="729" pos:column="42">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name pos:line="730" pos:column="14">ssnToZipMap</name><op:operator pos:line="730" pos:column="25">.</op:operator><name pos:line="730" pos:column="26">put</name></name><argument_list pos:line="730" pos:column="29">(<argument><expr><name pos:line="730" pos:column="30">a</name></expr></argument>, <argument><expr><name pos:line="730" pos:column="33">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block>while<condition pos:line="731" pos:column="16">(<expr><call><name><name pos:line="731" pos:column="17">rs</name><op:operator pos:line="731" pos:column="19">.</op:operator><name pos:line="731" pos:column="20">next</name></name><argument_list pos:line="731" pos:column="24">()</argument_list></call></expr>)</condition>;</do>
         <expr_stmt><expr><call><name><name pos:line="732" pos:column="10">rs</name><op:operator pos:line="732" pos:column="12">.</op:operator><name pos:line="732" pos:column="13">close</name></name><argument_list pos:line="732" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="733" pos:column="10">s</name><op:operator pos:line="733" pos:column="11">.</op:operator><name pos:line="733" pos:column="12">close</name></name><argument_list pos:line="733" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
       }</block> <catch pos:line="734" pos:column="10">catch <parameter_list pos:line="734" pos:column="16">(<param><decl><type><name pos:line="734" pos:column="17">SQLException</name></type> <name pos:line="734" pos:column="30">e</name></decl></param>)</parameter_list>
          <block pos:line="735" pos:column="11">{
    	   <expr_stmt><expr><call><name><name pos:line="736" pos:column="12">UtilitiesReq19_24</name><op:operator pos:line="736" pos:column="29">.</op:operator><name pos:line="736" pos:column="30">printExceptionText</name></name><argument_list pos:line="736" pos:column="48">(<argument><expr><name pos:line="736" pos:column="49">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></catch></try>
   }</block></function>

      <function><type><annotation pos:line="740" pos:column="7">@<name pos:line="740" pos:column="8">TaDaMethod</name><argument_list pos:line="740" pos:column="18">(<argument><expr><name pos:line="740" pos:column="19">variablesToTrack</name> <op:operator pos:line="740" pos:column="36">=</op:operator> <block pos:line="740" pos:column="38">{<expr><lit:literal type="string" pos:line="740" pos:column="39">"a"</lit:literal></expr><op:operator pos:line="740" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="740" pos:column="44">"b"</lit:literal></expr></argument>}</block></expr></argument>, <argument><expr><name pos:line="740" pos:column="50">correspondingDatabaseAttribute</name> <op:operator pos:line="740" pos:column="81">=</op:operator> <block pos:line="740" pos:column="83">{<expr><lit:literal type="string" pos:line="740" pos:column="84">"ssn.job"</lit:literal></expr><op:operator pos:line="740" pos:column="93">,</op:operator> <argument><expr><lit:literal type="string" pos:line="740" pos:column="95">"weekwage,job"</lit:literal></expr></argument>}</block></expr></argument> )</argument_list></annotation>   
   <specifier pos:line="741" pos:column="4">private</specifier> <name pos:line="741" pos:column="12">void</name></type> <name pos:line="741" pos:column="17">initializeSsnToWeekWageMap</name><parameter_list pos:line="741" pos:column="43">(<param><decl><type><name><name pos:line="741" pos:column="44">HashMap</name><argument_list pos:line="741" pos:column="51">&lt;<argument><name pos:line="741" pos:column="52">Integer</name></argument>, <argument><name pos:line="741" pos:column="61">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="741" pos:column="70">ssnToWeekWageMap</name></decl></param>)</parameter_list><block pos:line="741" pos:column="87">{
       <decl_stmt><decl><type><name pos:line="742" pos:column="8">ResultSet</name></type> <name pos:line="742" pos:column="18">rs</name> <init pos:line="742" pos:column="21">= <expr><lit:literal type="null" pos:line="742" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
       <try pos:line="743" pos:column="8">try<block pos:line="743" pos:column="11">{
         <expr_stmt><expr><name pos:line="744" pos:column="10">_conn</name> <op:operator pos:line="744" pos:column="16">=</op:operator> <call><name><name pos:line="744" pos:column="18">DatabaseConnection</name><op:operator pos:line="744" pos:column="36">.</op:operator><name pos:line="744" pos:column="37">getConnection</name></name><argument_list pos:line="744" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="745" pos:column="10">s</name> <op:operator pos:line="745" pos:column="12">=</op:operator> <call><name><name pos:line="745" pos:column="14">_conn</name><op:operator pos:line="745" pos:column="19">.</op:operator><name pos:line="745" pos:column="20">createStatement</name></name><argument_list pos:line="745" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="747" pos:column="10">rs</name> <op:operator pos:line="747" pos:column="13">=</op:operator> <call><name><name pos:line="747" pos:column="15">s</name><op:operator pos:line="747" pos:column="16">.</op:operator><name pos:line="747" pos:column="17">executeQuery</name></name><argument_list pos:line="747" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="747" pos:column="30">"SELECT ssn, weekwage FROM job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="748" pos:column="10">if <condition pos:line="748" pos:column="13">(<expr><op:operator pos:line="748" pos:column="14">!</op:operator><call><name><name pos:line="748" pos:column="15">rs</name><op:operator pos:line="748" pos:column="17">.</op:operator><name pos:line="748" pos:column="18">next</name></name><argument_list pos:line="748" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="748" pos:column="25">
         <block pos:line="749" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="750" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="750" pos:column="35">.</op:operator><name pos:line="750" pos:column="36">reportFailure</name></name><argument_list pos:line="750" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="750" pos:column="50">"No rows in ResultSet. No SSN, weekwage found for table job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="751" pos:column="17">return;</return>
         }</block></then></if>
             
         <do pos:line="754" pos:column="10">do<block pos:line="754" pos:column="12">{
        	 <decl_stmt><decl><type><name pos:line="755" pos:column="18">int</name></type> <name pos:line="755" pos:column="22">a</name> <init pos:line="755" pos:column="24">= <expr><call><name><name pos:line="755" pos:column="26">rs</name><op:operator pos:line="755" pos:column="28">.</op:operator><name pos:line="755" pos:column="29">getInt</name></name><argument_list pos:line="755" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="755" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     		 <decl_stmt><decl><type><name pos:line="756" pos:column="18">int</name></type> <name pos:line="756" pos:column="22">b</name> <init pos:line="756" pos:column="24">= <expr><call><name><name pos:line="756" pos:column="26">rs</name><op:operator pos:line="756" pos:column="28">.</op:operator><name pos:line="756" pos:column="29">getInt</name></name><argument_list pos:line="756" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="756" pos:column="36">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name pos:line="757" pos:column="14">ssnToWeekWageMap</name><op:operator pos:line="757" pos:column="30">.</op:operator><name pos:line="757" pos:column="31">put</name></name><argument_list pos:line="757" pos:column="34">(<argument><expr><name pos:line="757" pos:column="35">a</name></expr></argument>, <argument><expr><name pos:line="757" pos:column="38">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block>while<condition pos:line="758" pos:column="16">(<expr><call><name><name pos:line="758" pos:column="17">rs</name><op:operator pos:line="758" pos:column="19">.</op:operator><name pos:line="758" pos:column="20">next</name></name><argument_list pos:line="758" pos:column="24">()</argument_list></call></expr>)</condition>;</do>
         <expr_stmt><expr><call><name><name pos:line="759" pos:column="10">rs</name><op:operator pos:line="759" pos:column="12">.</op:operator><name pos:line="759" pos:column="13">close</name></name><argument_list pos:line="759" pos:column="18">()</argument_list></call></expr>;</expr_stmt> 
         <expr_stmt><expr><call><name><name pos:line="760" pos:column="10">s</name><op:operator pos:line="760" pos:column="11">.</op:operator><name pos:line="760" pos:column="12">close</name></name><argument_list pos:line="760" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
       }</block> <catch pos:line="761" pos:column="10">catch <parameter_list pos:line="761" pos:column="16">(<param><decl><type><name pos:line="761" pos:column="17">SQLException</name></type> <name pos:line="761" pos:column="30">e</name></decl></param>)</parameter_list>
          <block pos:line="762" pos:column="11">{
    	   <expr_stmt><expr><call><name><name pos:line="763" pos:column="12">UtilitiesReq19_24</name><op:operator pos:line="763" pos:column="29">.</op:operator><name pos:line="763" pos:column="30">printExceptionText</name></name><argument_list pos:line="763" pos:column="48">(<argument><expr><name pos:line="763" pos:column="49">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></catch></try>
   }</block></function>

      <function><type><annotation pos:line="767" pos:column="7">@<name pos:line="767" pos:column="8">TaDaMethod</name><argument_list pos:line="767" pos:column="18">(<argument><expr><name pos:line="767" pos:column="19">variablesToTrack</name> <op:operator pos:line="767" pos:column="36">=</op:operator> <block pos:line="767" pos:column="38">{<expr><lit:literal type="string" pos:line="767" pos:column="39">"a"</lit:literal></expr><op:operator pos:line="767" pos:column="42">,</op:operator> <argument><expr><lit:literal type="string" pos:line="767" pos:column="44">"b"</lit:literal></expr></argument>}</block></expr></argument>, <argument><expr><name pos:line="767" pos:column="50">correspondingDatabaseAttribute</name> <op:operator pos:line="767" pos:column="81">=</op:operator> <block pos:line="767" pos:column="83">{<expr><lit:literal type="string" pos:line="767" pos:column="84">"zip.ziptable"</lit:literal></expr><op:operator pos:line="767" pos:column="98">,</op:operator> <argument><expr><lit:literal type="string" pos:line="767" pos:column="100">"statename.ziptable"</lit:literal></expr></argument>}</block></expr></argument> )</argument_list></annotation>
   <specifier pos:line="768" pos:column="4">private</specifier> <name pos:line="768" pos:column="12">void</name></type> <name pos:line="768" pos:column="17">initializeZipToStateMap</name><parameter_list pos:line="768" pos:column="40">(<param><decl><type><name><name pos:line="768" pos:column="41">HashMap</name><argument_list pos:line="768" pos:column="48">&lt;<argument><name pos:line="768" pos:column="49">String</name></argument>, <argument><name pos:line="768" pos:column="57">String</name></argument>&gt;</argument_list></name></type> <name pos:line="768" pos:column="65">zipToStateMap</name></decl></param>)</parameter_list><block pos:line="768" pos:column="79">{
       <decl_stmt><decl><type><name pos:line="769" pos:column="8">ResultSet</name></type> <name pos:line="769" pos:column="18">rs</name> <init pos:line="769" pos:column="21">= <expr><lit:literal type="null" pos:line="769" pos:column="23">null</lit:literal></expr></init></decl>;</decl_stmt>
       <try pos:line="770" pos:column="8">try<block pos:line="770" pos:column="11">{
         <expr_stmt><expr><name pos:line="771" pos:column="10">_conn</name> <op:operator pos:line="771" pos:column="16">=</op:operator> <call><name><name pos:line="771" pos:column="18">DatabaseConnection</name><op:operator pos:line="771" pos:column="36">.</op:operator><name pos:line="771" pos:column="37">getConnection</name></name><argument_list pos:line="771" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name pos:line="772" pos:column="10">s</name> <op:operator pos:line="772" pos:column="12">=</op:operator> <call><name><name pos:line="772" pos:column="14">_conn</name><op:operator pos:line="772" pos:column="19">.</op:operator><name pos:line="772" pos:column="20">createStatement</name></name><argument_list pos:line="772" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

         <expr_stmt><expr><name pos:line="774" pos:column="10">rs</name> <op:operator pos:line="774" pos:column="13">=</op:operator> <call><name><name pos:line="774" pos:column="15">s</name><op:operator pos:line="774" pos:column="16">.</op:operator><name pos:line="774" pos:column="17">executeQuery</name></name><argument_list pos:line="774" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="774" pos:column="30">"SELECT zip, statename FROM ziptable"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if pos:line="775" pos:column="10">if <condition pos:line="775" pos:column="13">(<expr><op:operator pos:line="775" pos:column="14">!</op:operator><call><name><name pos:line="775" pos:column="15">rs</name><op:operator pos:line="775" pos:column="17">.</op:operator><name pos:line="775" pos:column="18">next</name></name><argument_list pos:line="775" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="775" pos:column="25">
         <block pos:line="776" pos:column="10">{
        	 <expr_stmt><expr><call><name><name pos:line="777" pos:column="18">UtilitiesReq19_24</name><op:operator pos:line="777" pos:column="35">.</op:operator><name pos:line="777" pos:column="36">reportFailure</name></name><argument_list pos:line="777" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="777" pos:column="50">"No rows in ResultSet. No zip, statename found for table job"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="778" pos:column="17">return;</return>
         }</block></then></if>
             
         <do pos:line="781" pos:column="10">do<block pos:line="781" pos:column="12">{
        	 <decl_stmt><decl><type><name pos:line="782" pos:column="18">String</name></type> <name pos:line="782" pos:column="25">a</name> <init pos:line="782" pos:column="27">= <expr><call><name><name pos:line="782" pos:column="29">rs</name><op:operator pos:line="782" pos:column="31">.</op:operator><name pos:line="782" pos:column="32">getString</name></name><argument_list pos:line="782" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="782" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     		 <decl_stmt><decl><type><name pos:line="783" pos:column="18">String</name></type> <name pos:line="783" pos:column="25">b</name> <init pos:line="783" pos:column="27">= <expr><call><name><name pos:line="783" pos:column="29">rs</name><op:operator pos:line="783" pos:column="31">.</op:operator><name pos:line="783" pos:column="32">getString</name></name><argument_list pos:line="783" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="783" pos:column="42">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="784" pos:column="17">zipToStateMap</name><op:operator pos:line="784" pos:column="30">.</op:operator><name pos:line="784" pos:column="31">put</name></name><argument_list pos:line="784" pos:column="34">(<argument><expr><name pos:line="784" pos:column="35">a</name></expr></argument>, <argument><expr><name pos:line="784" pos:column="38">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block>while<condition pos:line="785" pos:column="16">(<expr><call><name><name pos:line="785" pos:column="17">rs</name><op:operator pos:line="785" pos:column="19">.</op:operator><name pos:line="785" pos:column="20">next</name></name><argument_list pos:line="785" pos:column="24">()</argument_list></call></expr>)</condition>;</do>
         <expr_stmt><expr><call><name><name pos:line="786" pos:column="10">rs</name><op:operator pos:line="786" pos:column="12">.</op:operator><name pos:line="786" pos:column="13">close</name></name><argument_list pos:line="786" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name pos:line="787" pos:column="10">s</name><op:operator pos:line="787" pos:column="11">.</op:operator><name pos:line="787" pos:column="12">close</name></name><argument_list pos:line="787" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
       }</block> <catch pos:line="788" pos:column="10">catch <parameter_list pos:line="788" pos:column="16">(<param><decl><type><name pos:line="788" pos:column="17">SQLException</name></type> <name pos:line="788" pos:column="30">e</name></decl></param>)</parameter_list>
          <block pos:line="789" pos:column="11">{
    	   <expr_stmt><expr><call><name><name pos:line="790" pos:column="12">UtilitiesReq19_24</name><op:operator pos:line="790" pos:column="29">.</op:operator><name pos:line="790" pos:column="30">printExceptionText</name></name><argument_list pos:line="790" pos:column="48">(<argument><expr><name pos:line="790" pos:column="49">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></catch></try>

   }</block></function>

}</block></class>
</unit>
