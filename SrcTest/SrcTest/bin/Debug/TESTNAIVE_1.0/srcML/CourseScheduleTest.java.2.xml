<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\testcode\CourseScheduleTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">testcode</name></name>;</package>
<import pos:line="2" pos:column="1">import static <name><name pos:line="2" pos:column="15">org</name><op:operator pos:line="2" pos:column="18">.</op:operator><name pos:line="2" pos:column="19">junit</name><op:operator pos:line="2" pos:column="24">.</op:operator><name pos:line="2" pos:column="25">Assert</name></name>.*;</import>

<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">util</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">HashMap</name></name>;</import>

<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">org</name><op:operator pos:line="7" pos:column="11">.</op:operator><name pos:line="7" pos:column="12">junit</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Before</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">org</name><op:operator pos:line="8" pos:column="11">.</op:operator><name pos:line="8" pos:column="12">junit</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">Test</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">com</name><op:operator pos:line="9" pos:column="11">.</op:operator><name pos:line="9" pos:column="12">mysql</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">jdbc</name><op:operator pos:line="9" pos:column="22">.</op:operator><name pos:line="9" pos:column="23">UpdatableResultSet</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">com</name><op:operator pos:line="10" pos:column="11">.</op:operator><name pos:line="10" pos:column="12">umas</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">code</name></name>.*;</import>

<comment type="block" format="javadoc" pos:line="12" pos:column="1">/************************@author Simant Purohit*************************/</comment>

<class><specifier pos:line="14" pos:column="1">public</specifier> class <name pos:line="14" pos:column="14">CourseScheduleTest</name> <block pos:line="14" pos:column="33">{

	<function><type><annotation pos:line="16" pos:column="9">@<name pos:line="16" pos:column="10">Before</name></annotation>
	<specifier pos:line="17" pos:column="9">public</specifier> <name pos:line="17" pos:column="16">void</name></type> <name pos:line="17" pos:column="21">setUp</name><parameter_list pos:line="17" pos:column="26">()</parameter_list> <throws pos:line="17" pos:column="29">throws <argument><expr><name pos:line="17" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="17" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">boolean</name></type> <name pos:line="18" pos:column="25">check</name> <init pos:line="18" pos:column="31">= <expr><call><name><name pos:line="18" pos:column="33">CourseSchedule</name><op:operator pos:line="18" pos:column="47">.</op:operator><name pos:line="18" pos:column="48">updateCourseSchedule</name></name><argument_list pos:line="18" pos:column="68">(<argument><expr><op:operator pos:line="18" pos:column="69">new</op:operator> <call><name pos:line="18" pos:column="73">CourseOffered</name><argument_list pos:line="18" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="18" pos:column="87">448</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="18" pos:column="93">new</op:operator> <call><name pos:line="18" pos:column="97">Classroom</name><argument_list pos:line="18" pos:column="106">(<argument><expr><lit:literal type="number" pos:line="18" pos:column="107">29</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="18" pos:column="112">new</op:operator> <call><name pos:line="18" pos:column="116">Timeslots</name><argument_list pos:line="18" pos:column="125">(<argument><expr><lit:literal type="number" pos:line="18" pos:column="126">30</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	}</block></function>

	<function><type><annotation pos:line="21" pos:column="9">@<name pos:line="21" pos:column="10">Test</name></annotation>
	<specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">final</specifier> <name pos:line="22" pos:column="22">void</name></type> <name pos:line="22" pos:column="27">testCourseSchedule</name><parameter_list pos:line="22" pos:column="45">()</parameter_list> <block pos:line="22" pos:column="48">{
		<comment type="block" pos:line="23" pos:column="17">/*
		 * Enter a existing course offering id
		 * Else the object initialization will fail
		 */</comment>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">CourseSchedule</name></type> <name pos:line="27" pos:column="32">schedule</name> <init pos:line="27" pos:column="41">= <expr><op:operator pos:line="27" pos:column="43">new</op:operator> <call><name pos:line="27" pos:column="47">CourseSchedule</name><argument_list pos:line="27" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="27" pos:column="62">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">assertNotNull</name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="31" pos:column="9">@<name pos:line="31" pos:column="10">Test</name></annotation>
	<specifier pos:line="32" pos:column="9">public</specifier> <specifier pos:line="32" pos:column="16">final</specifier> <name pos:line="32" pos:column="22">void</name></type> <name pos:line="32" pos:column="27">testCourseSchedule2</name><parameter_list pos:line="32" pos:column="46">()</parameter_list> <block pos:line="32" pos:column="49">{
		<comment type="block" pos:line="33" pos:column="17">/*
		 * Enter a existing course offering id
		 * Else the object initialization will fail
		 */</comment>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">CourseSchedule</name></type> <name pos:line="37" pos:column="32">schedule</name> <init pos:line="37" pos:column="41">= <expr><op:operator pos:line="37" pos:column="43">new</op:operator> <call><name pos:line="37" pos:column="47">CourseSchedule</name><argument_list pos:line="37" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="37" pos:column="62">44435348</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">assertNull</name><argument_list pos:line="38" pos:column="27">(<argument><expr><call><name><name pos:line="38" pos:column="28">schedule</name><op:operator pos:line="38" pos:column="36">.</op:operator><name pos:line="38" pos:column="37">getClassroom</name></name><argument_list pos:line="38" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="41" pos:column="9">@<name pos:line="41" pos:column="10">Test</name></annotation>
	<specifier pos:line="42" pos:column="9">public</specifier> <specifier pos:line="42" pos:column="16">final</specifier> <name pos:line="42" pos:column="22">void</name></type> <name pos:line="42" pos:column="27">testUpdateCourseSchedule</name><parameter_list pos:line="42" pos:column="51">()</parameter_list> <throws pos:line="42" pos:column="54">throws <argument><expr><name><name pos:line="42" pos:column="61">CourseOffered</name><op:operator pos:line="42" pos:column="74">.</op:operator><name pos:line="42" pos:column="75">CourseOfferingNotCurrentException</name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="110">Course</name><op:operator pos:line="42" pos:column="116">.</op:operator><name pos:line="42" pos:column="117">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="146">CourseOffered</name><op:operator pos:line="42" pos:column="159">.</op:operator><name pos:line="42" pos:column="160">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="42" pos:column="196">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">boolean</name></type> <name pos:line="43" pos:column="25">check</name> <init pos:line="43" pos:column="31">= <expr><call><name><name pos:line="43" pos:column="33">CourseSchedule</name><op:operator pos:line="43" pos:column="47">.</op:operator><name pos:line="43" pos:column="48">updateCourseSchedule</name></name><argument_list pos:line="43" pos:column="68">(<argument><expr><op:operator pos:line="43" pos:column="69">new</op:operator> <call><name pos:line="43" pos:column="73">CourseOffered</name><argument_list pos:line="43" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="87">448</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="93">new</op:operator> <call><name pos:line="43" pos:column="97">Classroom</name><argument_list pos:line="43" pos:column="106">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="107">30</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="43" pos:column="112">new</op:operator> <call><name pos:line="43" pos:column="116">Timeslots</name><argument_list pos:line="43" pos:column="125">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="126">30</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">assertTrue</name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="47" pos:column="9">@<name pos:line="47" pos:column="10">Test</name></annotation>
	<specifier pos:line="48" pos:column="9">public</specifier> <specifier pos:line="48" pos:column="16">final</specifier> <name pos:line="48" pos:column="22">void</name></type> <name pos:line="48" pos:column="27">testGetHaspMapForSchedule</name><parameter_list pos:line="48" pos:column="52">()</parameter_list> <block pos:line="48" pos:column="55">{
		<decl_stmt><decl><type><name><name pos:line="49" pos:column="17">HashMap</name><argument_list pos:line="49" pos:column="24">&lt;<argument><name pos:line="49" pos:column="25">Integer</name></argument>, <argument><name pos:line="49" pos:column="34">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="50">schedule</name> <init pos:line="49" pos:column="59">= <expr><call><name><name pos:line="49" pos:column="61">CourseSchedule</name><op:operator pos:line="49" pos:column="75">.</op:operator><name pos:line="49" pos:column="76">getHaspMapForSchedule</name></name><argument_list pos:line="49" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">assertNotNull</name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="53" pos:column="9">@<name pos:line="53" pos:column="10">Test</name></annotation>
	<specifier pos:line="54" pos:column="9">public</specifier> <specifier pos:line="54" pos:column="16">final</specifier> <name pos:line="54" pos:column="22">void</name></type> <name pos:line="54" pos:column="27">testGetAllScheduledCourses</name><parameter_list pos:line="54" pos:column="53">()</parameter_list> <block pos:line="54" pos:column="56">{
		<decl_stmt><decl><type><name><name pos:line="55" pos:column="17">ArrayList</name><argument_list pos:line="55" pos:column="26">&lt;<argument><name pos:line="55" pos:column="27">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="43">schedule</name> <init pos:line="55" pos:column="52">= <expr><call><name><name pos:line="55" pos:column="54">CourseSchedule</name><op:operator pos:line="55" pos:column="68">.</op:operator><name pos:line="55" pos:column="69">getAllScheduledCourses</name></name><argument_list pos:line="55" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">assertNotNull</name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="59" pos:column="9">@<name pos:line="59" pos:column="10">Test</name></annotation>
	<specifier pos:line="60" pos:column="9">public</specifier> <specifier pos:line="60" pos:column="16">final</specifier> <name pos:line="60" pos:column="22">void</name></type> <name pos:line="60" pos:column="27">testGetAllScheduledCoursesDepartment</name><parameter_list pos:line="60" pos:column="63">()</parameter_list> <throws pos:line="60" pos:column="66">throws <argument><expr><name><name pos:line="60" pos:column="73">Department</name><op:operator pos:line="60" pos:column="83">.</op:operator><name pos:line="60" pos:column="84">DepartmentDoesNotExistException</name></name></expr></argument></throws> <block pos:line="60" pos:column="116">{
		<decl_stmt><decl><type><name><name pos:line="61" pos:column="17">ArrayList</name><argument_list pos:line="61" pos:column="26">&lt;<argument><name pos:line="61" pos:column="27">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="61" pos:column="43">schedule</name> <init pos:line="61" pos:column="52">= <expr><call><name><name pos:line="61" pos:column="54">CourseSchedule</name><op:operator pos:line="61" pos:column="68">.</op:operator><name pos:line="61" pos:column="69">getAllScheduledCourses</name></name><argument_list pos:line="61" pos:column="91">(<argument><expr><op:operator pos:line="61" pos:column="92">new</op:operator> <call><name pos:line="61" pos:column="96">Department</name><argument_list pos:line="61" pos:column="106">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="107">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assertNotNull</name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="65" pos:column="9">@<name pos:line="65" pos:column="10">Test</name></annotation>
	<specifier pos:line="66" pos:column="9">public</specifier> <specifier pos:line="66" pos:column="16">final</specifier> <name pos:line="66" pos:column="22">void</name></type> <name pos:line="66" pos:column="27">testScheduleCourse</name><parameter_list pos:line="66" pos:column="45">()</parameter_list> <throws pos:line="66" pos:column="48">throws <argument><expr><name><name pos:line="66" pos:column="55">Course</name><op:operator pos:line="66" pos:column="61">.</op:operator><name pos:line="66" pos:column="62">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="91">CourseOffered</name><op:operator pos:line="66" pos:column="104">.</op:operator><name pos:line="66" pos:column="105">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="66" pos:column="141">{
		<comment type="block" pos:line="67" pos:column="17">/*
		 * Scheduling a already scheduled course
		 */</comment>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">boolean</name></type> <name pos:line="70" pos:column="25">check</name> <init pos:line="70" pos:column="31">= <expr><call><name><name pos:line="70" pos:column="33">CourseSchedule</name><op:operator pos:line="70" pos:column="47">.</op:operator><name pos:line="70" pos:column="48">scheduleCourse</name></name><argument_list pos:line="70" pos:column="62">(<argument><expr><op:operator pos:line="70" pos:column="63">new</op:operator> <call><name pos:line="70" pos:column="67">CourseOffered</name><argument_list pos:line="70" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="70" pos:column="81">448</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">assertFalse</name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="74" pos:column="9">@<name pos:line="74" pos:column="10">Test</name></annotation>
	<specifier pos:line="75" pos:column="9">public</specifier> <specifier pos:line="75" pos:column="16">final</specifier> <name pos:line="75" pos:column="22">void</name></type> <name pos:line="75" pos:column="27">testScheduleCourseUsingID</name><parameter_list pos:line="75" pos:column="52">()</parameter_list> <block pos:line="75" pos:column="55">{
		<comment type="block" pos:line="76" pos:column="17">/*
		 * Scheduling a already scheduled course using offer id and capacity
		 */</comment>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">boolean</name></type> <name pos:line="79" pos:column="25">check</name> <init pos:line="79" pos:column="31">= <expr><call><name><name pos:line="79" pos:column="33">CourseSchedule</name><op:operator pos:line="79" pos:column="47">.</op:operator><name pos:line="79" pos:column="48">scheduleCourseUsingID</name></name><argument_list pos:line="79" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="79" pos:column="70">448</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="79" pos:column="75">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">assertFalse</name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="83" pos:column="9">@<name pos:line="83" pos:column="10">Test</name></annotation>
	<specifier pos:line="84" pos:column="9">public</specifier> <specifier pos:line="84" pos:column="16">final</specifier> <name pos:line="84" pos:column="22">void</name></type> <name pos:line="84" pos:column="27">testIsScheduled</name><parameter_list pos:line="84" pos:column="42">()</parameter_list> <block pos:line="84" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="85" pos:column="17">boolean</name></type> <name pos:line="85" pos:column="25">check</name> <init pos:line="85" pos:column="31">= <expr><call><name><name pos:line="85" pos:column="33">CourseSchedule</name><op:operator pos:line="85" pos:column="47">.</op:operator><name pos:line="85" pos:column="48">isScheduled</name></name><argument_list pos:line="85" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="85" pos:column="60">448</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="86" pos:column="17">assertTrue</name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><annotation pos:line="89" pos:column="9">@<name pos:line="89" pos:column="10">Test</name></annotation>
	<specifier pos:line="90" pos:column="9">public</specifier> <specifier pos:line="90" pos:column="16">final</specifier> <name pos:line="90" pos:column="22">void</name></type> <name pos:line="90" pos:column="27">testScheduleAllCurrentCourses</name><parameter_list pos:line="90" pos:column="56">()</parameter_list> <block pos:line="90" pos:column="59">{
		<try pos:line="91" pos:column="17">try<block pos:line="91" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="92" pos:column="25">CourseSchedule</name><op:operator pos:line="92" pos:column="39">.</op:operator><name pos:line="92" pos:column="40">scheduleAllCurrentCourses</name></name><argument_list pos:line="92" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="94" pos:column="17">catch<parameter_list pos:line="94" pos:column="22">(<param><decl><type><name pos:line="94" pos:column="23">Exception</name></type> <name pos:line="94" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="94" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">fail</name><argument_list pos:line="95" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="30">"The test failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
	}</block></function>

	<function><type><annotation pos:line="100" pos:column="9">@<name pos:line="100" pos:column="10">Test</name></annotation>
	<specifier pos:line="101" pos:column="9">public</specifier> <specifier pos:line="101" pos:column="16">final</specifier> <name pos:line="101" pos:column="22">void</name></type> <name pos:line="101" pos:column="27">testScheduleAllCurrentCoursesDepartment</name><parameter_list pos:line="101" pos:column="66">()</parameter_list> <block pos:line="101" pos:column="69">{
		<try pos:line="102" pos:column="17">try<block pos:line="102" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="103" pos:column="25">CourseSchedule</name><op:operator pos:line="103" pos:column="39">.</op:operator><name pos:line="103" pos:column="40">scheduleAllCurrentCourses</name></name><argument_list pos:line="103" pos:column="65">(<argument><expr><op:operator pos:line="103" pos:column="66">new</op:operator> <call><name pos:line="103" pos:column="70">Department</name><argument_list pos:line="103" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="103" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="105" pos:column="17">catch<parameter_list pos:line="105" pos:column="22">(<param><decl><type><name pos:line="105" pos:column="23">Exception</name></type> <name pos:line="105" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="105" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">fail</name><argument_list pos:line="106" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="30">"The test failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="110" pos:column="9">@<name pos:line="110" pos:column="10">Test</name></annotation>
	<specifier pos:line="111" pos:column="9">public</specifier> <specifier pos:line="111" pos:column="16">final</specifier> <name pos:line="111" pos:column="22">void</name></type> <name pos:line="111" pos:column="27">testDeleteAllCourseSchedule</name><parameter_list pos:line="111" pos:column="54">()</parameter_list> <block pos:line="111" pos:column="57">{
		<try pos:line="112" pos:column="17">try<block pos:line="112" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="113" pos:column="25">CourseSchedule</name><op:operator pos:line="113" pos:column="39">.</op:operator><name pos:line="113" pos:column="40">deleteAllCourseSchedule</name></name><argument_list pos:line="113" pos:column="63">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="114" pos:column="25">CourseSchedule</name><op:operator pos:line="114" pos:column="39">.</op:operator><name pos:line="114" pos:column="40">scheduleAllCurrentCourses</name></name><argument_list pos:line="114" pos:column="65">()</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="116" pos:column="17">catch<parameter_list pos:line="116" pos:column="22">(<param><decl><type><name pos:line="116" pos:column="23">Exception</name></type> <name pos:line="116" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="116" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="117" pos:column="25">fail</name><argument_list pos:line="117" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="30">"Deleting test failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="121" pos:column="9">@<name pos:line="121" pos:column="10">Test</name></annotation>
	<specifier pos:line="122" pos:column="9">public</specifier> <specifier pos:line="122" pos:column="16">final</specifier> <name pos:line="122" pos:column="22">void</name></type> <name pos:line="122" pos:column="27">testDeleteAllCourseScheduleDepartment</name><parameter_list pos:line="122" pos:column="64">()</parameter_list> <block pos:line="122" pos:column="67">{
		<try pos:line="123" pos:column="17">try<block pos:line="123" pos:column="20">{
			<expr_stmt><expr><call><name><name pos:line="124" pos:column="25">CourseSchedule</name><op:operator pos:line="124" pos:column="39">.</op:operator><name pos:line="124" pos:column="40">deleteAllCourseSchedule</name></name><argument_list pos:line="124" pos:column="63">(<argument><expr><op:operator pos:line="124" pos:column="64">new</op:operator> <call><name pos:line="124" pos:column="68">Department</name><argument_list pos:line="124" pos:column="78">(<argument><expr><lit:literal type="number" pos:line="124" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="125" pos:column="25">CourseSchedule</name><op:operator pos:line="125" pos:column="39">.</op:operator><name pos:line="125" pos:column="40">scheduleAllCurrentCourses</name></name><argument_list pos:line="125" pos:column="65">(<argument><expr><op:operator pos:line="125" pos:column="66">new</op:operator> <call><name pos:line="125" pos:column="70">Department</name><argument_list pos:line="125" pos:column="80">(<argument><expr><lit:literal type="number" pos:line="125" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<catch pos:line="127" pos:column="17">catch<parameter_list pos:line="127" pos:column="22">(<param><decl><type><name pos:line="127" pos:column="23">Exception</name></type> <name pos:line="127" pos:column="33">e</name></decl></param>)</parameter_list><block pos:line="127" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="128" pos:column="25">fail</name><argument_list pos:line="128" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="30">"Deleting by department test failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><type><annotation pos:line="132" pos:column="9">@<name pos:line="132" pos:column="10">Test</name></annotation>
	<specifier pos:line="133" pos:column="9">public</specifier> <specifier pos:line="133" pos:column="16">final</specifier> <name pos:line="133" pos:column="22">void</name></type> <name pos:line="133" pos:column="27">testIsAnotherCourseSchedulable</name><parameter_list pos:line="133" pos:column="57">()</parameter_list> <block pos:line="133" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="134" pos:column="17">boolean</name></type> <name pos:line="134" pos:column="25">check</name> <init pos:line="134" pos:column="31">= <expr><call><name><name pos:line="134" pos:column="33">CourseSchedule</name><op:operator pos:line="134" pos:column="47">.</op:operator><name pos:line="134" pos:column="48">isAnotherCourseSchedulable</name></name><argument_list pos:line="134" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="134" pos:column="75">10</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="135" pos:column="17">assertTrue</name><argument_list pos:line="135" pos:column="27">(<argument><expr><name pos:line="135" pos:column="28">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><annotation pos:line="138" pos:column="9">@<name pos:line="138" pos:column="10">Test</name></annotation>
	<specifier pos:line="139" pos:column="9">public</specifier> <specifier pos:line="139" pos:column="16">final</specifier> <name pos:line="139" pos:column="22">void</name></type> <name pos:line="139" pos:column="27">testIsAnotherCourseSchedulable2</name><parameter_list pos:line="139" pos:column="58">()</parameter_list> <block pos:line="139" pos:column="61">{
		<comment type="block" pos:line="140" pos:column="17">/*
		 * Checking for a capacity for which no class room is available
		 */</comment>
		<decl_stmt><decl><type><name pos:line="143" pos:column="17">boolean</name></type> <name pos:line="143" pos:column="25">check</name> <init pos:line="143" pos:column="31">= <expr><call><name><name pos:line="143" pos:column="33">CourseSchedule</name><op:operator pos:line="143" pos:column="47">.</op:operator><name pos:line="143" pos:column="48">isAnotherCourseSchedulable</name></name><argument_list pos:line="143" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="143" pos:column="75">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="144" pos:column="17">assertFalse</name><argument_list pos:line="144" pos:column="28">(<argument><expr><name pos:line="144" pos:column="29">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

}</block></class>
</unit>
