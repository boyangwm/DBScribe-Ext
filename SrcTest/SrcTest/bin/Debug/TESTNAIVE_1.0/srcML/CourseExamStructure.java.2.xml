<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\CourseExamStructure.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>
<comment type="line" pos:line="2" pos:column="1">//import java.lang.annotation.ElementType;</comment>
<comment type="line" pos:line="3" pos:column="1">//import java.lang.annotation.Retention;</comment>
<comment type="line" pos:line="4" pos:column="1">//import java.lang.annotation.RetentionPolicy;</comment>
<comment type="line" pos:line="5" pos:column="1">//import java.lang.annotation.Target;</comment>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">HashMap</name></name>;</import>

<class><specifier pos:line="12" pos:column="1">public</specifier> class <name pos:line="12" pos:column="14">CourseExamStructure</name> <block pos:line="12" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">CourseOffered</name></type> <name pos:line="13" pos:column="23">offeredCourse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">String</name></type> <name pos:line="14" pos:column="16">examName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int</name></type> <name pos:line="15" pos:column="13">examTotal</name></decl>;</decl_stmt> <comment type="line" pos:line="15" pos:column="24">// Total Marks for that exam</comment>
	
<comment type="line" pos:line="17" pos:column="1">//	@Target({ElementType.LOCAL_VARIABLE})</comment>
<comment type="line" pos:line="18" pos:column="1">//	@Retention(RetentionPolicy.RUNTIME)</comment>
<comment type="line" pos:line="19" pos:column="1">//	public @interface DBAnnotation {</comment>
<comment type="line" pos:line="20" pos:column="1">//	 String[] variable () default "";</comment>
<comment type="line" pos:line="21" pos:column="1">//	 String[] table () default "";</comment>
<comment type="line" pos:line="22" pos:column="1">//	 String[] column () default "";</comment>
<comment type="line" pos:line="23" pos:column="1">//	 boolean[] isSource () default false; </comment>
<comment type="line" pos:line="24" pos:column="1">//	}</comment>
	
	<function><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">CourseOffered</name></type> <name pos:line="26" pos:column="30">getOfferedCourse</name><parameter_list pos:line="26" pos:column="46">()</parameter_list> <block pos:line="26" pos:column="49">{
		<return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">offeredCourse</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="30" pos:column="9">public</specifier> <name pos:line="30" pos:column="16">void</name></type> <name pos:line="30" pos:column="21">setOfferedCourse</name><parameter_list pos:line="30" pos:column="37">(<param><decl><type><name pos:line="30" pos:column="38">CourseOffered</name></type> <name pos:line="30" pos:column="52">offeredCourse</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="67">{
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">this</name><op:operator pos:line="31" pos:column="21">.</op:operator><name pos:line="31" pos:column="22">offeredCourse</name></name> <op:operator pos:line="31" pos:column="36">=</op:operator> <name pos:line="31" pos:column="38">offeredCourse</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">String</name></type> <name pos:line="34" pos:column="23">getExamName</name><parameter_list pos:line="34" pos:column="34">()</parameter_list> <block pos:line="34" pos:column="37">{
		<return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">examName</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="38" pos:column="9">public</specifier> <name pos:line="38" pos:column="16">void</name></type> <name pos:line="38" pos:column="21">setExamName</name><parameter_list pos:line="38" pos:column="32">(<param><decl><type><name pos:line="38" pos:column="33">String</name></type> <name pos:line="38" pos:column="40">examName</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="50">{
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">this</name><op:operator pos:line="39" pos:column="21">.</op:operator><name pos:line="39" pos:column="22">examName</name></name> <op:operator pos:line="39" pos:column="31">=</op:operator> <name pos:line="39" pos:column="33">examName</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">int</name></type> <name pos:line="42" pos:column="20">getExamTotal</name><parameter_list pos:line="42" pos:column="32">()</parameter_list> <block pos:line="42" pos:column="35">{
		<return pos:line="43" pos:column="17">return <expr><name pos:line="43" pos:column="24">examTotal</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="46" pos:column="9">public</specifier> <name pos:line="46" pos:column="16">void</name></type> <name pos:line="46" pos:column="21">setExamTotal</name><parameter_list pos:line="46" pos:column="33">(<param><decl><type><name pos:line="46" pos:column="34">int</name></type> <name pos:line="46" pos:column="38">examTotal</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="49">{
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">this</name><op:operator pos:line="47" pos:column="21">.</op:operator><name pos:line="47" pos:column="22">examTotal</name></name> <op:operator pos:line="47" pos:column="32">=</op:operator> <name pos:line="47" pos:column="34">examTotal</name></expr>;</expr_stmt>
	}</block></function>
	
	
	<constructor><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">CourseExamStructure</name><parameter_list pos:line="51" pos:column="35">()</parameter_list> <block pos:line="51" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">super</name><argument_list pos:line="52" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<comment type="line" pos:line="55" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="56" pos:column="9">public</specifier> <name pos:line="56" pos:column="16">CourseExamStructure</name><parameter_list pos:line="56" pos:column="35">(<param><decl><type><name pos:line="56" pos:column="36">CourseOffered</name></type> <name pos:line="56" pos:column="50">offeredCourse</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="65">String</name></type> <name pos:line="56" pos:column="72">examName</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="82">int</name></type> <name pos:line="56" pos:column="86">examTotal</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="97">{
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">this</name><op:operator pos:line="57" pos:column="21">.</op:operator><name pos:line="57" pos:column="22">offeredCourse</name></name> <op:operator pos:line="57" pos:column="36">=</op:operator> <name pos:line="57" pos:column="38">offeredCourse</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="58" pos:column="17">this</name><op:operator pos:line="58" pos:column="21">.</op:operator><name pos:line="58" pos:column="22">examName</name></name> <op:operator pos:line="58" pos:column="31">=</op:operator> <name pos:line="58" pos:column="33">examName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">this</name><op:operator pos:line="59" pos:column="21">.</op:operator><name pos:line="59" pos:column="22">examTotal</name></name> <op:operator pos:line="59" pos:column="32">=</op:operator> <name pos:line="59" pos:column="34">examTotal</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line" pos:line="62" pos:column="9">// Constructor</comment>
	<constructor><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">CourseExamStructure</name><parameter_list pos:line="63" pos:column="35">(<param><decl><type><name pos:line="63" pos:column="36">CourseOffered</name></type> <name pos:line="63" pos:column="50">offeredCourse</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="65">String</name></type> <name pos:line="63" pos:column="72">examName</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="82">{
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">this</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">offeredCourse</name></name> <op:operator pos:line="64" pos:column="36">=</op:operator> <name pos:line="64" pos:column="38">offeredCourse</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">this</name><op:operator pos:line="65" pos:column="21">.</op:operator><name pos:line="65" pos:column="22">examName</name></name> <op:operator pos:line="65" pos:column="31">=</op:operator> <name pos:line="65" pos:column="33">examName</name></expr>;</expr_stmt>
		<comment type="line" pos:line="66" pos:column="17">// this.examTotal = getTotalMarksForExam(examName);</comment>
		
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">Course</name></type> <name pos:line="68" pos:column="24">course</name> <init pos:line="68" pos:column="31">= <expr><call><name><name pos:line="68" pos:column="33">offeredCourse</name><op:operator pos:line="68" pos:column="46">.</op:operator><name pos:line="68" pos:column="47">getCourse</name></name><argument_list pos:line="68" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">String</name></type> <name pos:line="69" pos:column="24">courseName</name> <init pos:line="69" pos:column="35">= <expr><call><name><name pos:line="69" pos:column="37">course</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">getCourseName</name></name><argument_list pos:line="69" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">int</name></type> <name pos:line="70" pos:column="21">offerID</name><init pos:line="70" pos:column="28">= <expr><call><name><name pos:line="70" pos:column="30">offeredCourse</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">getOfferID</name></name><argument_list pos:line="70" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">int</name></type> <name pos:line="71" pos:column="21">semID</name> <init pos:line="71" pos:column="27">= <expr><call><name><name pos:line="71" pos:column="29">offeredCourse</name><op:operator pos:line="71" pos:column="42">.</op:operator><name pos:line="71" pos:column="43">getSemesterID</name></name><argument_list pos:line="71" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="72" pos:column="17">String</name></type> <name pos:line="72" pos:column="24">tableName</name> <init pos:line="72" pos:column="34">= <expr><name pos:line="72" pos:column="36">courseName</name> <op:operator pos:line="72" pos:column="47">+</op:operator> <call><name><name pos:line="72" pos:column="49">Integer</name><op:operator pos:line="72" pos:column="56">.</op:operator><name pos:line="72" pos:column="57">toString</name></name><argument_list pos:line="72" pos:column="65">(<argument><expr><name pos:line="72" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="72" pos:column="75">+</op:operator> <call><name><name pos:line="72" pos:column="77">Integer</name><op:operator pos:line="72" pos:column="84">.</op:operator><name pos:line="72" pos:column="85">toString</name></name><argument_list pos:line="72" pos:column="93">(<argument><expr><name pos:line="72" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="72" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">boolean</name></type> <name pos:line="74" pos:column="25">isExamPresent</name> <init pos:line="74" pos:column="39">= <expr><call><name pos:line="74" pos:column="41">isExamPresent</name><argument_list pos:line="74" pos:column="54">(<argument><expr><name pos:line="74" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="74" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">isExamPresent</name> <op:operator pos:line="75" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="75" pos:column="38">false</lit:literal></expr>)</condition><then><block pos:line="75" pos:column="44">{
			<expr_stmt><expr><call><name><name pos:line="76" pos:column="25">System</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">out</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">println</name></name><argument_list pos:line="76" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="44">"Exam Not Present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="77" pos:column="19">else <block pos:line="77" pos:column="24">{
		
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">String</name></type> <name pos:line="79" pos:column="32">SQLExamStructureSelect</name> <init pos:line="79" pos:column="55">= <expr><lit:literal type="string" pos:line="79" pos:column="57">"Select TotalMarks FROM %s WHERE ExamName = ?;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="80" pos:column="25">SQLExamStructureSelect</name> <op:operator pos:line="80" pos:column="48">=</op:operator> <call><name><name pos:line="80" pos:column="50">String</name><op:operator pos:line="80" pos:column="56">.</op:operator><name pos:line="80" pos:column="57">format</name></name><argument_list pos:line="80" pos:column="63">(<argument><expr><name pos:line="80" pos:column="64">SQLExamStructureSelect</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="88">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:line="81" pos:column="25">try <block pos:line="81" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="82" pos:column="33">Connection</name></type> <name pos:line="82" pos:column="44">conn</name> <init pos:line="82" pos:column="49">= <expr><call><name><name pos:line="82" pos:column="51">Database</name><op:operator pos:line="82" pos:column="59">.</op:operator><name pos:line="82" pos:column="60">getConnection</name></name><argument_list pos:line="82" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="83" pos:column="33">try <block pos:line="83" pos:column="37">{
					<if pos:line="84" pos:column="41">if <condition pos:line="84" pos:column="44">(<expr><name pos:line="84" pos:column="45">conn</name> <op:operator pos:line="84" pos:column="50">!=</op:operator> <lit:literal type="null" pos:line="84" pos:column="53">null</lit:literal></expr>)</condition><then pos:line="84" pos:column="58"> <block pos:line="84" pos:column="59">{
					 
						<decl_stmt><decl><type><name pos:line="86" pos:column="49">PreparedStatement</name></type> <name pos:line="86" pos:column="67">statement</name> <init pos:line="86" pos:column="77">= <expr><call><name><name pos:line="86" pos:column="79">conn</name><op:operator pos:line="86" pos:column="83">.</op:operator><name pos:line="86" pos:column="84">prepareStatement</name></name><argument_list pos:line="86" pos:column="100">(<argument><expr><name pos:line="86" pos:column="101">SQLExamStructureSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="87" pos:column="9">//					statement.setString(1, tableName);</comment>
						<expr_stmt><expr><call><name><name pos:line="88" pos:column="49">DBAnnotation</name><op:operator pos:line="88" pos:column="61">.</op:operator><name pos:line="88" pos:column="62">annoate</name></name><argument_list pos:line="88" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="70">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="82">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="93">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="88" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="89" pos:column="49">statement</name><op:operator pos:line="89" pos:column="58">.</op:operator><name pos:line="89" pos:column="59">setString</name></name><argument_list pos:line="89" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="89" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="72">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="90" pos:column="49">ResultSet</name></type> <name pos:line="90" pos:column="59">rs</name> <init pos:line="90" pos:column="62">= <expr><call><name><name pos:line="90" pos:column="64">statement</name><op:operator pos:line="90" pos:column="73">.</op:operator><name pos:line="90" pos:column="74">executeQuery</name></name><argument_list pos:line="90" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<while pos:line="91" pos:column="49">while<condition pos:line="91" pos:column="54">(<expr><call><name><name pos:line="91" pos:column="55">rs</name><op:operator pos:line="91" pos:column="57">.</op:operator><name pos:line="91" pos:column="58">next</name></name><argument_list pos:line="91" pos:column="62">()</argument_list></call></expr>)</condition><block pos:line="91" pos:column="65">{
							<expr_stmt><expr><call><name><name pos:line="92" pos:column="57">DBAnnotation</name><op:operator pos:line="92" pos:column="69">.</op:operator><name pos:line="92" pos:column="70">annoate</name></name><argument_list pos:line="92" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="78">"examTotal"</lit:literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="91">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="102">"TotalMarks"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="92" pos:column="116">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="93" pos:column="57">this</name><op:operator pos:line="93" pos:column="61">.</op:operator><name pos:line="93" pos:column="62">examTotal</name></name> <op:operator pos:line="93" pos:column="72">=</op:operator> <call><name><name pos:line="93" pos:column="74">rs</name><op:operator pos:line="93" pos:column="76">.</op:operator><name pos:line="93" pos:column="77">getInt</name></name><argument_list pos:line="93" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="84">"TotalMarks"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
					}</block></then></if>	
				}</block> <catch pos:line="96" pos:column="35">catch <parameter_list pos:line="96" pos:column="41">(<param><decl><type><name pos:line="96" pos:column="42">SQLException</name></type> <name pos:line="96" pos:column="55">e</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">System</name><op:operator pos:line="97" pos:column="47">.</op:operator><name pos:line="97" pos:column="48">out</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">println</name></name><argument_list pos:line="97" pos:column="59">(<argument><expr><name pos:line="97" pos:column="60">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
	
			}</block> <catch pos:line="100" pos:column="27">catch <parameter_list pos:line="100" pos:column="33">(<param><decl><type><name pos:line="100" pos:column="34">Exception</name></type> <name pos:line="100" pos:column="44">e</name></decl></param>)</parameter_list> <block pos:line="100" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="101" pos:column="33">System</name><op:operator pos:line="101" pos:column="39">.</op:operator><name pos:line="101" pos:column="40">out</name><op:operator pos:line="101" pos:column="43">.</op:operator><name pos:line="101" pos:column="44">println</name></name><argument_list pos:line="101" pos:column="51">(<argument><expr><name pos:line="101" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		
		}</block></else></if>
		
	}</block></constructor>
	
	<comment type="line" pos:line="108" pos:column="9">// Called by createCourseExamTable function to create a table to record the </comment>
	<comment type="line" pos:line="109" pos:column="9">// Course Structure</comment>
	<function><type><specifier pos:line="110" pos:column="9">public</specifier> <specifier pos:line="110" pos:column="16">static</specifier> <name pos:line="110" pos:column="23">boolean</name></type> <name pos:line="110" pos:column="31">createCourseExamStructureTable</name><parameter_list pos:line="110" pos:column="61">(<param><decl><type><name pos:line="110" pos:column="62">String</name></type> <name pos:line="110" pos:column="69">courseName</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="81">int</name></type> <name pos:line="110" pos:column="85">offerID</name></decl></param>,<param><decl><type><name pos:line="110" pos:column="93">int</name></type> <name pos:line="110" pos:column="97">semID</name></decl></param>)</parameter_list><block pos:line="110" pos:column="103">{
		<decl_stmt><decl><type><name pos:line="111" pos:column="17">boolean</name></type> <name pos:line="111" pos:column="25">tableAdded</name> <init pos:line="111" pos:column="36">= <expr><lit:literal type="boolean" pos:line="111" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="112" pos:column="1">//		Course course = offeredCourse.getCourse();</comment>
<comment type="line" pos:line="113" pos:column="1">//		String courseName = course.getCourseName();</comment>
<comment type="line" pos:line="114" pos:column="1">//		int offerID= offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="115" pos:column="1">//		int semID = offeredCourse.getSemesterID();</comment>
		
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">String</name></type> <name pos:line="117" pos:column="24">tableName</name> <init pos:line="117" pos:column="34">= <expr><name pos:line="117" pos:column="36">courseName</name> <op:operator pos:line="117" pos:column="47">+</op:operator> <call><name><name pos:line="117" pos:column="49">Integer</name><op:operator pos:line="117" pos:column="56">.</op:operator><name pos:line="117" pos:column="57">toString</name></name><argument_list pos:line="117" pos:column="65">(<argument><expr><name pos:line="117" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="75">+</op:operator> <call><name><name pos:line="117" pos:column="77">Integer</name><op:operator pos:line="117" pos:column="84">.</op:operator><name pos:line="117" pos:column="85">toString</name></name><argument_list pos:line="117" pos:column="93">(<argument><expr><name pos:line="117" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="117" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="117" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt> 
		
<comment type="line" pos:line="119" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="120" pos:column="1">//				variable = {"tableName"},  </comment>
<comment type="line" pos:line="121" pos:column="1">//				table = "courseExamStructureTable", </comment>
<comment type="line" pos:line="122" pos:column="1">//				column = {"Username","Password"}, </comment>
<comment type="line" pos:line="123" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">String</name></type> <name pos:line="124" pos:column="24">SQLExamStructureCreate</name> <init pos:line="124" pos:column="47">= <expr><lit:literal type="string" pos:line="124" pos:column="49">"CREATE TABLE %s (ExamName varchar(20), TotalMarks int(12),PRIMARY KEY (ExamName)) ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="125" pos:column="17">SQLExamStructureCreate</name> <op:operator pos:line="125" pos:column="40">=</op:operator> <call><name><name pos:line="125" pos:column="42">String</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">format</name></name><argument_list pos:line="125" pos:column="55">(<argument><expr><name pos:line="125" pos:column="56">SQLExamStructureCreate</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="126" pos:column="17">try <block pos:line="126" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="127" pos:column="25">Connection</name></type> <name pos:line="127" pos:column="36">conn</name> <init pos:line="127" pos:column="41">= <expr><call><name><name pos:line="127" pos:column="43">Database</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">getConnection</name></name><argument_list pos:line="127" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="128" pos:column="25">try <block pos:line="128" pos:column="29">{
				<if pos:line="129" pos:column="33">if <condition pos:line="129" pos:column="36">(<expr><name pos:line="129" pos:column="37">conn</name> <op:operator pos:line="129" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="129" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="129" pos:column="50"> <block pos:line="129" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="130" pos:column="41">PreparedStatement</name></type> <name pos:line="130" pos:column="59">statement</name> <init pos:line="130" pos:column="69">= <expr><call><name><name pos:line="130" pos:column="71">conn</name><op:operator pos:line="130" pos:column="75">.</op:operator><name pos:line="130" pos:column="76">prepareStatement</name></name><argument_list pos:line="130" pos:column="92">(<argument><expr><name pos:line="130" pos:column="93">SQLExamStructureCreate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="131" pos:column="41">//statement.setString(1, tableName);</comment>
					<expr_stmt><expr><call><name><name pos:line="132" pos:column="41">statement</name><op:operator pos:line="132" pos:column="50">.</op:operator><name pos:line="132" pos:column="51">executeUpdate</name></name><argument_list pos:line="132" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="133" pos:column="41">tableAdded</name> <op:operator pos:line="133" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="133" pos:column="54">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch pos:line="135" pos:column="27">catch <parameter_list pos:line="135" pos:column="33">(<param><decl><type><name pos:line="135" pos:column="34">SQLException</name></type> <name pos:line="135" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="135" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="136" pos:column="33">System</name><op:operator pos:line="136" pos:column="39">.</op:operator><name pos:line="136" pos:column="40">out</name><op:operator pos:line="136" pos:column="43">.</op:operator><name pos:line="136" pos:column="44">println</name></name><argument_list pos:line="136" pos:column="51">(<argument><expr><name pos:line="136" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">Database</name><op:operator pos:line="137" pos:column="41">.</op:operator><name pos:line="137" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="137" pos:column="61">(<argument><expr><name pos:line="137" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="140" pos:column="19">catch <parameter_list pos:line="140" pos:column="25">(<param><decl><type><name pos:line="140" pos:column="26">Exception</name></type> <name pos:line="140" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="141" pos:column="25">System</name><op:operator pos:line="141" pos:column="31">.</op:operator><name pos:line="141" pos:column="32">out</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">println</name></name><argument_list pos:line="141" pos:column="43">(<argument><expr><name pos:line="141" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	 
		<return pos:line="144" pos:column="17">return <expr><name pos:line="144" pos:column="24">tableAdded</name></expr>;</return>
	}</block></function>
	
	
	<comment type="line" pos:line="148" pos:column="9">// To retrive the total marks for an exam. </comment>
<comment type="line" pos:line="149" pos:column="1">//	public static int getTotalMarksForExam(String examName){</comment>
<comment type="line" pos:line="150" pos:column="1">//		int totalMarks=0;</comment>
<comment type="line" pos:line="151" pos:column="1">//		</comment>
<comment type="line" pos:line="152" pos:column="1">//		return totalMarks;</comment>
<comment type="line" pos:line="153" pos:column="1">//	}</comment>
	
	<comment type="line" pos:line="155" pos:column="9">// To add a new exam.</comment>
	<comment type="line" pos:line="156" pos:column="9">// This function would internally call addNewExamColumn() of the CourseExam class to</comment>
	<comment type="line" pos:line="157" pos:column="9">// add a new column in the CourseExams table for this new exam</comment>
	<function><type><specifier pos:line="158" pos:column="9">public</specifier> <name pos:line="158" pos:column="16">boolean</name></type> <name pos:line="158" pos:column="24">addNewExam</name><parameter_list pos:line="158" pos:column="34">()</parameter_list><block pos:line="158" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="159" pos:column="17">boolean</name></type> <name pos:line="159" pos:column="25">examAdded</name> <init pos:line="159" pos:column="35">= <expr><lit:literal type="boolean" pos:line="159" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">CourseOffered</name></type> <name pos:line="161" pos:column="31">offeredCourse</name> <init pos:line="161" pos:column="45">= <expr><name><name pos:line="161" pos:column="47">this</name><op:operator pos:line="161" pos:column="51">.</op:operator><name pos:line="161" pos:column="52">offeredCourse</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="162" pos:column="17">Course</name></type> <name pos:line="162" pos:column="24">course</name> <init pos:line="162" pos:column="31">= <expr><call><name><name pos:line="162" pos:column="33">offeredCourse</name><op:operator pos:line="162" pos:column="46">.</op:operator><name pos:line="162" pos:column="47">getCourse</name></name><argument_list pos:line="162" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">String</name></type> <name pos:line="163" pos:column="24">courseName</name> <init pos:line="163" pos:column="35">= <expr><call><name><name pos:line="163" pos:column="37">course</name><op:operator pos:line="163" pos:column="43">.</op:operator><name pos:line="163" pos:column="44">getCourseName</name></name><argument_list pos:line="163" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="164" pos:column="17">int</name></type> <name pos:line="164" pos:column="21">offerID</name><init pos:line="164" pos:column="28">= <expr><call><name><name pos:line="164" pos:column="30">offeredCourse</name><op:operator pos:line="164" pos:column="43">.</op:operator><name pos:line="164" pos:column="44">getOfferID</name></name><argument_list pos:line="164" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="165" pos:column="17">int</name></type> <name pos:line="165" pos:column="21">semID</name> <init pos:line="165" pos:column="27">= <expr><call><name><name pos:line="165" pos:column="29">offeredCourse</name><op:operator pos:line="165" pos:column="42">.</op:operator><name pos:line="165" pos:column="43">getSemesterID</name></name><argument_list pos:line="165" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="167" pos:column="17">String</name></type> <name pos:line="167" pos:column="24">tableName</name> <init pos:line="167" pos:column="34">= <expr><name pos:line="167" pos:column="36">courseName</name> <op:operator pos:line="167" pos:column="47">+</op:operator> <call><name><name pos:line="167" pos:column="49">Integer</name><op:operator pos:line="167" pos:column="56">.</op:operator><name pos:line="167" pos:column="57">toString</name></name><argument_list pos:line="167" pos:column="65">(<argument><expr><name pos:line="167" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="167" pos:column="75">+</op:operator> <call><name><name pos:line="167" pos:column="77">Integer</name><op:operator pos:line="167" pos:column="84">.</op:operator><name pos:line="167" pos:column="85">toString</name></name><argument_list pos:line="167" pos:column="93">(<argument><expr><name pos:line="167" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="167" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="167" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">String</name></type> <name pos:line="169" pos:column="24">examName</name> <init pos:line="169" pos:column="33">= <expr><name><name pos:line="169" pos:column="35">this</name><op:operator pos:line="169" pos:column="39">.</op:operator><name pos:line="169" pos:column="40">examName</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">int</name></type> <name pos:line="170" pos:column="21">examTotal</name> <init pos:line="170" pos:column="31">= <expr><name><name pos:line="170" pos:column="33">this</name><op:operator pos:line="170" pos:column="37">.</op:operator><name pos:line="170" pos:column="38">examTotal</name></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">boolean</name></type> <name pos:line="172" pos:column="25">isExamPresent</name> <init pos:line="172" pos:column="39">= <expr><call><name pos:line="172" pos:column="41">isExamPresent</name><argument_list pos:line="172" pos:column="54">(<argument><expr><name pos:line="172" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="172" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="173" pos:column="17">if <condition pos:line="173" pos:column="20">(<expr><name pos:line="173" pos:column="21">isExamPresent</name> <op:operator pos:line="173" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="173" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="173" pos:column="43">{
			<expr_stmt><expr><call><name><name pos:line="174" pos:column="25">System</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">out</name><op:operator pos:line="174" pos:column="35">.</op:operator><name pos:line="174" pos:column="36">println</name></name><argument_list pos:line="174" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="44">"Exam already present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="175" pos:column="19">else <block pos:line="175" pos:column="24">{
			
<comment type="line" pos:line="177" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="178" pos:column="1">//				variable = {"examName","examTotal"},  </comment>
<comment type="line" pos:line="179" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="180" pos:column="1">//				column = {"ExamName","TotalMarks"}, </comment>
<comment type="line" pos:line="181" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="182" pos:column="17">String</name></type> <name pos:line="182" pos:column="24">SQLExamStructureCreate</name> <init pos:line="182" pos:column="47">= <expr><lit:literal type="string" pos:line="182" pos:column="49">"INSERT INTO %s (ExamName,TotalMarks) VALUES(?,?) ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="183" pos:column="17">SQLExamStructureCreate</name> <op:operator pos:line="183" pos:column="40">=</op:operator> <call><name><name pos:line="183" pos:column="42">String</name><op:operator pos:line="183" pos:column="48">.</op:operator><name pos:line="183" pos:column="49">format</name></name><argument_list pos:line="183" pos:column="55">(<argument><expr><name pos:line="183" pos:column="56">SQLExamStructureCreate</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="185" pos:column="17">try <block pos:line="185" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="186" pos:column="25">Connection</name></type> <name pos:line="186" pos:column="36">conn</name> <init pos:line="186" pos:column="41">= <expr><call><name><name pos:line="186" pos:column="43">Database</name><op:operator pos:line="186" pos:column="51">.</op:operator><name pos:line="186" pos:column="52">getConnection</name></name><argument_list pos:line="186" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="187" pos:column="25">try <block pos:line="187" pos:column="29">{
				<if pos:line="188" pos:column="33">if <condition pos:line="188" pos:column="36">(<expr><name pos:line="188" pos:column="37">conn</name> <op:operator pos:line="188" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="188" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="188" pos:column="50"> <block pos:line="188" pos:column="51">{
					
					<decl_stmt><decl><type><name pos:line="190" pos:column="41">PreparedStatement</name></type> <name pos:line="190" pos:column="59">statement</name> <init pos:line="190" pos:column="69">= <expr><call><name><name pos:line="190" pos:column="71">conn</name><op:operator pos:line="190" pos:column="75">.</op:operator><name pos:line="190" pos:column="76">prepareStatement</name></name><argument_list pos:line="190" pos:column="92">(<argument><expr><name pos:line="190" pos:column="93">SQLExamStructureCreate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="191" pos:column="1">//					statement.setString(1, tableName);</comment>
					<expr_stmt><expr><call><name><name pos:line="192" pos:column="41">DBAnnotation</name><op:operator pos:line="192" pos:column="53">.</op:operator><name pos:line="192" pos:column="54">annoate</name></name><argument_list pos:line="192" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="62">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="74">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="192" pos:column="85">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="192" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="193" pos:column="41">statement</name><op:operator pos:line="193" pos:column="50">.</op:operator><name pos:line="193" pos:column="51">setString</name></name><argument_list pos:line="193" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="193" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="64">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="194" pos:column="41">DBAnnotation</name><op:operator pos:line="194" pos:column="53">.</op:operator><name pos:line="194" pos:column="54">annoate</name></name><argument_list pos:line="194" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="62">"examTotal"</lit:literal></expr></argument>, <argument><expr><name pos:line="194" pos:column="75">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="194" pos:column="86">"TotalMarks"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="194" pos:column="100">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="195" pos:column="41">statement</name><op:operator pos:line="195" pos:column="50">.</op:operator><name pos:line="195" pos:column="51">setInt</name></name><argument_list pos:line="195" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="195" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="195" pos:column="61">examTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="196" pos:column="41">statement</name><op:operator pos:line="196" pos:column="50">.</op:operator><name pos:line="196" pos:column="51">executeUpdate</name></name><argument_list pos:line="196" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="197" pos:column="41">examAdded</name> <op:operator pos:line="197" pos:column="51">=</op:operator> <call><name><name pos:line="197" pos:column="53">CourseExams</name><op:operator pos:line="197" pos:column="64">.</op:operator><name pos:line="197" pos:column="65">addNewExamColumn</name></name><argument_list pos:line="197" pos:column="81">(<argument><expr><name pos:line="197" pos:column="82">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="198" pos:column="41">if <condition pos:line="198" pos:column="44">(<expr><name pos:line="198" pos:column="45">examAdded</name> <op:operator pos:line="198" pos:column="55">==</op:operator> <lit:literal type="boolean" pos:line="198" pos:column="58">true</lit:literal></expr>)</condition><then><block pos:line="198" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="199" pos:column="49">Database</name><op:operator pos:line="199" pos:column="57">.</op:operator><name pos:line="199" pos:column="58">commitTransaction</name></name><argument_list pos:line="199" pos:column="75">(<argument><expr><name pos:line="199" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="201" pos:column="41">else<block pos:line="201" pos:column="45">{
						<expr_stmt><expr><call><name><name pos:line="202" pos:column="49">Database</name><op:operator pos:line="202" pos:column="57">.</op:operator><name pos:line="202" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="202" pos:column="77">(<argument><expr><name pos:line="202" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch pos:line="205" pos:column="27">catch <parameter_list pos:line="205" pos:column="33">(<param><decl><type><name pos:line="205" pos:column="34">SQLException</name></type> <name pos:line="205" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="206" pos:column="33">System</name><op:operator pos:line="206" pos:column="39">.</op:operator><name pos:line="206" pos:column="40">out</name><op:operator pos:line="206" pos:column="43">.</op:operator><name pos:line="206" pos:column="44">println</name></name><argument_list pos:line="206" pos:column="51">(<argument><expr><name pos:line="206" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="207" pos:column="33">Database</name><op:operator pos:line="207" pos:column="41">.</op:operator><name pos:line="207" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="207" pos:column="61">(<argument><expr><name pos:line="207" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="210" pos:column="19">catch <parameter_list pos:line="210" pos:column="25">(<param><decl><type><name pos:line="210" pos:column="26">Exception</name></type> <name pos:line="210" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="210" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="211" pos:column="25">System</name><op:operator pos:line="211" pos:column="31">.</op:operator><name pos:line="211" pos:column="32">out</name><op:operator pos:line="211" pos:column="35">.</op:operator><name pos:line="211" pos:column="36">println</name></name><argument_list pos:line="211" pos:column="43">(<argument><expr><name pos:line="211" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></else></if> <comment type="line" pos:line="213" pos:column="19">// End of Else</comment>
		<return pos:line="214" pos:column="17">return <expr><name pos:line="214" pos:column="24">examAdded</name></expr>;</return>
	}</block></function>
		
	<comment type="line" pos:line="217" pos:column="9">// Checks whether this exam is already present.</comment>
	<function><type><specifier pos:line="218" pos:column="9">private</specifier> <name pos:line="218" pos:column="17">boolean</name></type> <name pos:line="218" pos:column="25">isExamPresent</name><parameter_list pos:line="218" pos:column="38">(<param><decl><type><name pos:line="218" pos:column="39">String</name></type> <name pos:line="218" pos:column="46">tableName</name></decl></param>, <param><decl><type><name pos:line="218" pos:column="57">String</name></type> <name pos:line="218" pos:column="64">examName</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="74">{
		<decl_stmt><decl><type><name pos:line="219" pos:column="17">boolean</name></type> <name pos:line="219" pos:column="25">isExamPresent</name> <init pos:line="219" pos:column="39">= <expr><lit:literal type="boolean" pos:line="219" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="220" pos:column="1">//		</comment>
<comment type="line" pos:line="221" pos:column="1">//		CourseOffered offeredCourse = this.offeredCourse;</comment>
<comment type="line" pos:line="222" pos:column="1">//		Course course = offeredCourse.getCourse();</comment>
<comment type="line" pos:line="223" pos:column="1">//		String courseName = course.getCourseName();</comment>
<comment type="line" pos:line="224" pos:column="1">//		int offerID= offeredCourse.getOfferID();</comment>
<comment type="line" pos:line="225" pos:column="1">//		int semID = offeredCourse.getSemesterID();</comment>
<comment type="line" pos:line="226" pos:column="1">//		</comment>
<comment type="line" pos:line="227" pos:column="1">//		String tableName = courseName + Integer.toString(offerID) + Integer.toString(semID) + "Structure";</comment>
<comment type="line" pos:line="228" pos:column="1">//	</comment>
		
<comment type="line" pos:line="230" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="231" pos:column="1">//				variable = {"tableExamName"},  </comment>
<comment type="line" pos:line="232" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="233" pos:column="1">//				column = {"ExamName"}, </comment>
<comment type="line" pos:line="234" pos:column="1">//				isSource = true)</comment>
		<decl_stmt><decl><type><name pos:line="235" pos:column="17">String</name></type> <name pos:line="235" pos:column="24">SQLExamStructureSelect</name> <init pos:line="235" pos:column="47">= <expr><lit:literal type="string" pos:line="235" pos:column="49">"Select ExamName FROM %s ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="236" pos:column="17">SQLExamStructureSelect</name> <op:operator pos:line="236" pos:column="40">=</op:operator> <call><name><name pos:line="236" pos:column="42">String</name><op:operator pos:line="236" pos:column="48">.</op:operator><name pos:line="236" pos:column="49">format</name></name><argument_list pos:line="236" pos:column="55">(<argument><expr><name pos:line="236" pos:column="56">SQLExamStructureSelect</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="237" pos:column="17">try <block pos:line="237" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="238" pos:column="25">Connection</name></type> <name pos:line="238" pos:column="36">conn</name> <init pos:line="238" pos:column="41">= <expr><call><name><name pos:line="238" pos:column="43">Database</name><op:operator pos:line="238" pos:column="51">.</op:operator><name pos:line="238" pos:column="52">getConnection</name></name><argument_list pos:line="238" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="239" pos:column="25">try <block pos:line="239" pos:column="29">{
				<if pos:line="240" pos:column="33">if <condition pos:line="240" pos:column="36">(<expr><name pos:line="240" pos:column="37">conn</name> <op:operator pos:line="240" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="240" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="240" pos:column="50"> <block pos:line="240" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="242" pos:column="41">PreparedStatement</name></type> <name pos:line="242" pos:column="59">statement</name> <init pos:line="242" pos:column="69">= <expr><call><name><name pos:line="242" pos:column="71">conn</name><op:operator pos:line="242" pos:column="75">.</op:operator><name pos:line="242" pos:column="76">prepareStatement</name></name><argument_list pos:line="242" pos:column="92">(<argument><expr><name pos:line="242" pos:column="93">SQLExamStructureSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="243" pos:column="1">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name pos:line="244" pos:column="41">ResultSet</name></type> <name pos:line="244" pos:column="51">rs</name> <init pos:line="244" pos:column="54">= <expr><call><name><name pos:line="244" pos:column="56">statement</name><op:operator pos:line="244" pos:column="65">.</op:operator><name pos:line="244" pos:column="66">executeQuery</name></name><argument_list pos:line="244" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="245" pos:column="41">while<condition pos:line="245" pos:column="46">(<expr><call><name><name pos:line="245" pos:column="47">rs</name><op:operator pos:line="245" pos:column="49">.</op:operator><name pos:line="245" pos:column="50">next</name></name><argument_list pos:line="245" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="245" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="246" pos:column="49">DBAnnotation</name><op:operator pos:line="246" pos:column="61">.</op:operator><name pos:line="246" pos:column="62">annoate</name></name><argument_list pos:line="246" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="70">"tableExamName"</lit:literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="87">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="98">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="246" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="247" pos:column="49">String</name></type> <name pos:line="247" pos:column="56">tableExamName</name> <init pos:line="247" pos:column="70">= <expr><call><name><name pos:line="247" pos:column="72">rs</name><op:operator pos:line="247" pos:column="74">.</op:operator><name pos:line="247" pos:column="75">getString</name></name><argument_list pos:line="247" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="85">"ExamName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="248" pos:column="49">if <condition pos:line="248" pos:column="52">(<expr><call><name><name pos:line="248" pos:column="53">tableExamName</name><op:operator pos:line="248" pos:column="66">.</op:operator><name pos:line="248" pos:column="67">equals</name></name><argument_list pos:line="248" pos:column="73">(<argument><expr><name pos:line="248" pos:column="74">examName</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="248" pos:column="84">{
							<expr_stmt><expr><name pos:line="249" pos:column="57">isExamPresent</name> <op:operator pos:line="249" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="249" pos:column="73">true</lit:literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="253" pos:column="27">catch <parameter_list pos:line="253" pos:column="33">(<param><decl><type><name pos:line="253" pos:column="34">SQLException</name></type> <name pos:line="253" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="253" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="254" pos:column="33">System</name><op:operator pos:line="254" pos:column="39">.</op:operator><name pos:line="254" pos:column="40">out</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">println</name></name><argument_list pos:line="254" pos:column="51">(<argument><expr><name pos:line="254" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="257" pos:column="19">catch <parameter_list pos:line="257" pos:column="25">(<param><decl><type><name pos:line="257" pos:column="26">Exception</name></type> <name pos:line="257" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="257" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="258" pos:column="25">System</name><op:operator pos:line="258" pos:column="31">.</op:operator><name pos:line="258" pos:column="32">out</name><op:operator pos:line="258" pos:column="35">.</op:operator><name pos:line="258" pos:column="36">println</name></name><argument_list pos:line="258" pos:column="43">(<argument><expr><name pos:line="258" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		<return pos:line="261" pos:column="17">return <expr><name pos:line="261" pos:column="24">isExamPresent</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="264" pos:column="9">// To modify the name of an exam.</comment>
	<comment type="line" pos:line="265" pos:column="9">// It would internally call the function modifyExistingExamColumnName of the CourseExam </comment>
	<comment type="line" pos:line="266" pos:column="9">// class to make the examnames consistent in both the tables</comment>
	<function><type><specifier pos:line="267" pos:column="9">public</specifier> <name pos:line="267" pos:column="16">boolean</name></type> <name pos:line="267" pos:column="24">modifyExistingExamName</name><parameter_list pos:line="267" pos:column="46">(<param><decl><type><name pos:line="267" pos:column="47">String</name></type> <name pos:line="267" pos:column="54">newExamName</name></decl></param>)</parameter_list><block pos:line="267" pos:column="66">{
		<decl_stmt><decl><type><name pos:line="268" pos:column="17">boolean</name></type> <name pos:line="268" pos:column="25">nameModified</name> <init pos:line="268" pos:column="38">= <expr><lit:literal type="boolean" pos:line="268" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="270" pos:column="17">CourseOffered</name></type> <name pos:line="270" pos:column="31">offeredCourse</name> <init pos:line="270" pos:column="45">= <expr><name><name pos:line="270" pos:column="47">this</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">offeredCourse</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="271" pos:column="17">Course</name></type> <name pos:line="271" pos:column="24">course</name> <init pos:line="271" pos:column="31">= <expr><call><name><name pos:line="271" pos:column="33">offeredCourse</name><op:operator pos:line="271" pos:column="46">.</op:operator><name pos:line="271" pos:column="47">getCourse</name></name><argument_list pos:line="271" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="272" pos:column="17">String</name></type> <name pos:line="272" pos:column="24">courseName</name> <init pos:line="272" pos:column="35">= <expr><call><name><name pos:line="272" pos:column="37">course</name><op:operator pos:line="272" pos:column="43">.</op:operator><name pos:line="272" pos:column="44">getCourseName</name></name><argument_list pos:line="272" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="273" pos:column="17">int</name></type> <name pos:line="273" pos:column="21">offerID</name><init pos:line="273" pos:column="28">= <expr><call><name><name pos:line="273" pos:column="30">offeredCourse</name><op:operator pos:line="273" pos:column="43">.</op:operator><name pos:line="273" pos:column="44">getOfferID</name></name><argument_list pos:line="273" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="274" pos:column="17">int</name></type> <name pos:line="274" pos:column="21">semID</name> <init pos:line="274" pos:column="27">= <expr><call><name><name pos:line="274" pos:column="29">offeredCourse</name><op:operator pos:line="274" pos:column="42">.</op:operator><name pos:line="274" pos:column="43">getSemesterID</name></name><argument_list pos:line="274" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="276" pos:column="17">String</name></type> <name pos:line="276" pos:column="24">tableName</name> <init pos:line="276" pos:column="34">= <expr><name pos:line="276" pos:column="36">courseName</name> <op:operator pos:line="276" pos:column="47">+</op:operator> <call><name><name pos:line="276" pos:column="49">Integer</name><op:operator pos:line="276" pos:column="56">.</op:operator><name pos:line="276" pos:column="57">toString</name></name><argument_list pos:line="276" pos:column="65">(<argument><expr><name pos:line="276" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="75">+</op:operator> <call><name><name pos:line="276" pos:column="77">Integer</name><op:operator pos:line="276" pos:column="84">.</op:operator><name pos:line="276" pos:column="85">toString</name></name><argument_list pos:line="276" pos:column="93">(<argument><expr><name pos:line="276" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="276" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="278" pos:column="17">String</name></type> <name pos:line="278" pos:column="24">examName</name> <init pos:line="278" pos:column="33">= <expr><name><name pos:line="278" pos:column="35">this</name><op:operator pos:line="278" pos:column="39">.</op:operator><name pos:line="278" pos:column="40">examName</name></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="280" pos:column="17">boolean</name></type> <name pos:line="280" pos:column="25">isExamPresent</name> <init pos:line="280" pos:column="39">= <expr><call><name pos:line="280" pos:column="41">isExamPresent</name><argument_list pos:line="280" pos:column="54">(<argument><expr><name pos:line="280" pos:column="55">tableName</name></expr></argument>,<argument><expr><name pos:line="280" pos:column="65">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="281" pos:column="17">boolean</name></type> <name pos:line="281" pos:column="25">isNewExamPresent</name> <init pos:line="281" pos:column="42">= <expr><call><name pos:line="281" pos:column="44">isExamPresent</name><argument_list pos:line="281" pos:column="57">(<argument><expr><name pos:line="281" pos:column="58">tableName</name></expr></argument>,<argument><expr><name pos:line="281" pos:column="68">newExamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="283" pos:column="17">if <condition pos:line="283" pos:column="20">(<expr><op:operator pos:line="283" pos:column="21">(</op:operator><name pos:line="283" pos:column="22">isExamPresent</name> <op:operator pos:line="283" pos:column="36">==</op:operator> <lit:literal type="boolean" pos:line="283" pos:column="39">true</lit:literal><op:operator pos:line="283" pos:column="43">)</op:operator> <op:operator pos:line="283" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="283" pos:column="48">(</op:operator><name pos:line="283" pos:column="49">isNewExamPresent</name> <op:operator pos:line="283" pos:column="66">==</op:operator> <lit:literal type="boolean" pos:line="283" pos:column="69">false</lit:literal><op:operator pos:line="283" pos:column="74">)</op:operator></expr>)</condition><then><block pos:line="283" pos:column="76">{
			
<comment type="line" pos:line="285" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="286" pos:column="1">//				variable = {"newExamName"},  </comment>
<comment type="line" pos:line="287" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="288" pos:column="1">//				column = {"ExamName"}, </comment>
<comment type="line" pos:line="289" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="290" pos:column="17">String</name></type> <name pos:line="290" pos:column="24">SQLExamStructureUpdate</name> <init pos:line="290" pos:column="47">= <expr><lit:literal type="string" pos:line="290" pos:column="49">"UPDATE %s SET ExamName = ? WHERE ExamName = ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="291" pos:column="17">SQLExamStructureUpdate</name> <op:operator pos:line="291" pos:column="40">=</op:operator> <call><name><name pos:line="291" pos:column="42">String</name><op:operator pos:line="291" pos:column="48">.</op:operator><name pos:line="291" pos:column="49">format</name></name><argument_list pos:line="291" pos:column="55">(<argument><expr><name pos:line="291" pos:column="56">SQLExamStructureUpdate</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:line="292" pos:column="17">try <block pos:line="292" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="293" pos:column="25">Connection</name></type> <name pos:line="293" pos:column="36">conn</name> <init pos:line="293" pos:column="41">= <expr><call><name><name pos:line="293" pos:column="43">Database</name><op:operator pos:line="293" pos:column="51">.</op:operator><name pos:line="293" pos:column="52">getConnection</name></name><argument_list pos:line="293" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="294" pos:column="25">try <block pos:line="294" pos:column="29">{
				<if pos:line="295" pos:column="33">if <condition pos:line="295" pos:column="36">(<expr><name pos:line="295" pos:column="37">conn</name> <op:operator pos:line="295" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="295" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="295" pos:column="50"> <block pos:line="295" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="297" pos:column="41">PreparedStatement</name></type> <name pos:line="297" pos:column="59">statement</name> <init pos:line="297" pos:column="69">= <expr><call><name><name pos:line="297" pos:column="71">conn</name><op:operator pos:line="297" pos:column="75">.</op:operator><name pos:line="297" pos:column="76">prepareStatement</name></name><argument_list pos:line="297" pos:column="92">(<argument><expr><name pos:line="297" pos:column="93">SQLExamStructureUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="298" pos:column="1">//					statement.setString(1, tableName);</comment>
					<expr_stmt><expr><call><name><name pos:line="299" pos:column="41">DBAnnotation</name><op:operator pos:line="299" pos:column="53">.</op:operator><name pos:line="299" pos:column="54">annoate</name></name><argument_list pos:line="299" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="299" pos:column="62">"newExamName"</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="77">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="299" pos:column="88">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="299" pos:column="100">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="300" pos:column="41">statement</name><op:operator pos:line="300" pos:column="50">.</op:operator><name pos:line="300" pos:column="51">setString</name></name><argument_list pos:line="300" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="300" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="300" pos:column="64">newExamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="301" pos:column="41">DBAnnotation</name><op:operator pos:line="301" pos:column="53">.</op:operator><name pos:line="301" pos:column="54">annoate</name></name><argument_list pos:line="301" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="301" pos:column="62">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="301" pos:column="74">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="85">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="301" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="302" pos:column="41">statement</name><op:operator pos:line="302" pos:column="50">.</op:operator><name pos:line="302" pos:column="51">setString</name></name><argument_list pos:line="302" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="302" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="302" pos:column="64">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="303" pos:column="41">statement</name><op:operator pos:line="303" pos:column="50">.</op:operator><name pos:line="303" pos:column="51">executeUpdate</name></name><argument_list pos:line="303" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="304" pos:column="41">boolean</name></type> <name pos:line="304" pos:column="49">modifiedColumn</name> <init pos:line="304" pos:column="64">= <expr><call><name><name pos:line="304" pos:column="66">CourseExams</name><op:operator pos:line="304" pos:column="77">.</op:operator><name pos:line="304" pos:column="78">modifyExistingExamColumnName</name></name><argument_list pos:line="304" pos:column="106">(<argument><expr><name pos:line="304" pos:column="107">this</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="113">newExamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="305" pos:column="41">if <condition pos:line="305" pos:column="44">(<expr><name pos:line="305" pos:column="45">modifiedColumn</name> <op:operator pos:line="305" pos:column="60">==</op:operator> <lit:literal type="boolean" pos:line="305" pos:column="63">true</lit:literal></expr>)</condition><then><block pos:line="305" pos:column="68">{
						<expr_stmt><expr><call><name><name pos:line="306" pos:column="49">Database</name><op:operator pos:line="306" pos:column="57">.</op:operator><name pos:line="306" pos:column="58">commitTransaction</name></name><argument_list pos:line="306" pos:column="75">(<argument><expr><name pos:line="306" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="307" pos:column="49">nameModified</name> <op:operator pos:line="307" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="307" pos:column="64">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
					
				}</block></then></if>	
			}</block> <catch pos:line="311" pos:column="27">catch <parameter_list pos:line="311" pos:column="33">(<param><decl><type><name pos:line="311" pos:column="34">SQLException</name></type> <name pos:line="311" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="311" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="312" pos:column="33">System</name><op:operator pos:line="312" pos:column="39">.</op:operator><name pos:line="312" pos:column="40">out</name><op:operator pos:line="312" pos:column="43">.</op:operator><name pos:line="312" pos:column="44">println</name></name><argument_list pos:line="312" pos:column="51">(<argument><expr><name pos:line="312" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="313" pos:column="33">Database</name><op:operator pos:line="313" pos:column="41">.</op:operator><name pos:line="313" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="313" pos:column="61">(<argument><expr><name pos:line="313" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="316" pos:column="19">catch <parameter_list pos:line="316" pos:column="25">(<param><decl><type><name pos:line="316" pos:column="26">Exception</name></type> <name pos:line="316" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="316" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="317" pos:column="25">System</name><op:operator pos:line="317" pos:column="31">.</op:operator><name pos:line="317" pos:column="32">out</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">println</name></name><argument_list pos:line="317" pos:column="43">(<argument><expr><name pos:line="317" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		}</block></then> <else pos:line="320" pos:column="19">else <block pos:line="320" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="321" pos:column="25">System</name><op:operator pos:line="321" pos:column="31">.</op:operator><name pos:line="321" pos:column="32">out</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">println</name></name><argument_list pos:line="321" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="321" pos:column="44">"Old Exam name not present or New exam name already present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> <comment type="line" pos:line="322" pos:column="19">// End of Else</comment>
		<return pos:line="323" pos:column="17">return <expr><name pos:line="323" pos:column="24">nameModified</name></expr>;</return>

	}</block></function>	

	<comment type="line" pos:line="327" pos:column="9">// To modify the total marks of an exam</comment>
	<function><type><specifier pos:line="328" pos:column="9">public</specifier> <name pos:line="328" pos:column="16">boolean</name></type> <name pos:line="328" pos:column="24">modifyExistingExamTotalMarks</name><parameter_list pos:line="328" pos:column="52">(<param><decl><type><name pos:line="328" pos:column="53">int</name></type> <name pos:line="328" pos:column="57">newTotalMarks</name></decl></param>)</parameter_list><block pos:line="328" pos:column="71">{
		<decl_stmt><decl><type><name pos:line="329" pos:column="17">boolean</name></type> <name pos:line="329" pos:column="25">marksModified</name> <init pos:line="329" pos:column="39">= <expr><lit:literal type="boolean" pos:line="329" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="331" pos:column="17">CourseOffered</name></type> <name pos:line="331" pos:column="31">offeredCourse</name> <init pos:line="331" pos:column="45">= <expr><name><name pos:line="331" pos:column="47">this</name><op:operator pos:line="331" pos:column="51">.</op:operator><name pos:line="331" pos:column="52">offeredCourse</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="332" pos:column="17">Course</name></type> <name pos:line="332" pos:column="24">course</name> <init pos:line="332" pos:column="31">= <expr><call><name><name pos:line="332" pos:column="33">offeredCourse</name><op:operator pos:line="332" pos:column="46">.</op:operator><name pos:line="332" pos:column="47">getCourse</name></name><argument_list pos:line="332" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="333" pos:column="17">String</name></type> <name pos:line="333" pos:column="24">courseName</name> <init pos:line="333" pos:column="35">= <expr><call><name><name pos:line="333" pos:column="37">course</name><op:operator pos:line="333" pos:column="43">.</op:operator><name pos:line="333" pos:column="44">getCourseName</name></name><argument_list pos:line="333" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="334" pos:column="17">int</name></type> <name pos:line="334" pos:column="21">offerID</name><init pos:line="334" pos:column="28">= <expr><call><name><name pos:line="334" pos:column="30">offeredCourse</name><op:operator pos:line="334" pos:column="43">.</op:operator><name pos:line="334" pos:column="44">getOfferID</name></name><argument_list pos:line="334" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="335" pos:column="17">int</name></type> <name pos:line="335" pos:column="21">semID</name> <init pos:line="335" pos:column="27">= <expr><call><name><name pos:line="335" pos:column="29">offeredCourse</name><op:operator pos:line="335" pos:column="42">.</op:operator><name pos:line="335" pos:column="43">getSemesterID</name></name><argument_list pos:line="335" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="337" pos:column="17">String</name></type> <name pos:line="337" pos:column="24">tableName</name> <init pos:line="337" pos:column="34">= <expr><name pos:line="337" pos:column="36">courseName</name> <op:operator pos:line="337" pos:column="47">+</op:operator> <call><name><name pos:line="337" pos:column="49">Integer</name><op:operator pos:line="337" pos:column="56">.</op:operator><name pos:line="337" pos:column="57">toString</name></name><argument_list pos:line="337" pos:column="65">(<argument><expr><name pos:line="337" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="337" pos:column="75">+</op:operator> <call><name><name pos:line="337" pos:column="77">Integer</name><op:operator pos:line="337" pos:column="84">.</op:operator><name pos:line="337" pos:column="85">toString</name></name><argument_list pos:line="337" pos:column="93">(<argument><expr><name pos:line="337" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="337" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="337" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="339" pos:column="17">String</name></type> <name pos:line="339" pos:column="24">examName</name> <init pos:line="339" pos:column="33">= <expr><name><name pos:line="339" pos:column="35">this</name><op:operator pos:line="339" pos:column="39">.</op:operator><name pos:line="339" pos:column="40">examName</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="340" pos:column="17">//int examTotal = this.examTotal;</comment>
		
		<decl_stmt><decl><type><name pos:line="342" pos:column="17">boolean</name></type> <name pos:line="342" pos:column="25">isExamPresent</name> <init pos:line="342" pos:column="39">= <expr><call><name><name pos:line="342" pos:column="41">this</name><op:operator pos:line="342" pos:column="45">.</op:operator><name pos:line="342" pos:column="46">isExamPresent</name></name><argument_list pos:line="342" pos:column="59">(<argument><expr><name pos:line="342" pos:column="60">tableName</name></expr></argument>,<argument><expr><name pos:line="342" pos:column="70">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="343" pos:column="17">if <condition pos:line="343" pos:column="20">(<expr><name pos:line="343" pos:column="21">isExamPresent</name> <op:operator pos:line="343" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="343" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="343" pos:column="43">{
			
<comment type="line" pos:line="345" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="346" pos:column="1">//				variable = {"newTotalMarks"},  </comment>
<comment type="line" pos:line="347" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="348" pos:column="1">//				column = {"TotalMarks"}, </comment>
<comment type="line" pos:line="349" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="350" pos:column="17">String</name></type> <name pos:line="350" pos:column="24">SQLExamStructureUpdate</name> <init pos:line="350" pos:column="47">= <expr><lit:literal type="string" pos:line="350" pos:column="49">"UPDATE %s SET TotalMarks = ? WHERE ExamName = ? ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="351" pos:column="17">SQLExamStructureUpdate</name> <op:operator pos:line="351" pos:column="40">=</op:operator> <call><name><name pos:line="351" pos:column="42">String</name><op:operator pos:line="351" pos:column="48">.</op:operator><name pos:line="351" pos:column="49">format</name></name><argument_list pos:line="351" pos:column="55">(<argument><expr><name pos:line="351" pos:column="56">SQLExamStructureUpdate</name></expr></argument>, <argument><expr><name pos:line="351" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="353" pos:column="17">try <block pos:line="353" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="354" pos:column="25">Connection</name></type> <name pos:line="354" pos:column="36">conn</name> <init pos:line="354" pos:column="41">= <expr><call><name><name pos:line="354" pos:column="43">Database</name><op:operator pos:line="354" pos:column="51">.</op:operator><name pos:line="354" pos:column="52">getConnection</name></name><argument_list pos:line="354" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="355" pos:column="25">try <block pos:line="355" pos:column="29">{
				<if pos:line="356" pos:column="33">if <condition pos:line="356" pos:column="36">(<expr><name pos:line="356" pos:column="37">conn</name> <op:operator pos:line="356" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="356" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="356" pos:column="50"> <block pos:line="356" pos:column="51">{
				 
					<decl_stmt><decl><type><name pos:line="358" pos:column="41">PreparedStatement</name></type> <name pos:line="358" pos:column="59">statement</name> <init pos:line="358" pos:column="69">= <expr><call><name><name pos:line="358" pos:column="71">conn</name><op:operator pos:line="358" pos:column="75">.</op:operator><name pos:line="358" pos:column="76">prepareStatement</name></name><argument_list pos:line="358" pos:column="92">(<argument><expr><name pos:line="358" pos:column="93">SQLExamStructureUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="line" pos:line="359" pos:column="41">//statement.setString(1, tableName);</comment>
					<expr_stmt><expr><call><name><name pos:line="360" pos:column="41">DBAnnotation</name><op:operator pos:line="360" pos:column="53">.</op:operator><name pos:line="360" pos:column="54">annoate</name></name><argument_list pos:line="360" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="360" pos:column="62">"newTotalMarks"</lit:literal></expr></argument>, <argument><expr><name pos:line="360" pos:column="79">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="360" pos:column="90">"TotalMarks"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="360" pos:column="104">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="361" pos:column="41">statement</name><op:operator pos:line="361" pos:column="50">.</op:operator><name pos:line="361" pos:column="51">setInt</name></name><argument_list pos:line="361" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="361" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="361" pos:column="61">newTotalMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="362" pos:column="41">DBAnnotation</name><op:operator pos:line="362" pos:column="53">.</op:operator><name pos:line="362" pos:column="54">annoate</name></name><argument_list pos:line="362" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="362" pos:column="62">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="362" pos:column="74">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="362" pos:column="85">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="362" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="363" pos:column="41">statement</name><op:operator pos:line="363" pos:column="50">.</op:operator><name pos:line="363" pos:column="51">setString</name></name><argument_list pos:line="363" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="363" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="363" pos:column="64">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="365" pos:column="41">statement</name><op:operator pos:line="365" pos:column="50">.</op:operator><name pos:line="365" pos:column="51">executeUpdate</name></name><argument_list pos:line="365" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="366" pos:column="41">Database</name><op:operator pos:line="366" pos:column="49">.</op:operator><name pos:line="366" pos:column="50">commitTransaction</name></name><argument_list pos:line="366" pos:column="67">(<argument><expr><name pos:line="366" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="367" pos:column="41">marksModified</name> <op:operator pos:line="367" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="367" pos:column="57">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	
			}</block> <catch pos:line="369" pos:column="27">catch <parameter_list pos:line="369" pos:column="33">(<param><decl><type><name pos:line="369" pos:column="34">SQLException</name></type> <name pos:line="369" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="369" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="370" pos:column="33">System</name><op:operator pos:line="370" pos:column="39">.</op:operator><name pos:line="370" pos:column="40">out</name><op:operator pos:line="370" pos:column="43">.</op:operator><name pos:line="370" pos:column="44">println</name></name><argument_list pos:line="370" pos:column="51">(<argument><expr><name pos:line="370" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="371" pos:column="33">Database</name><op:operator pos:line="371" pos:column="41">.</op:operator><name pos:line="371" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="371" pos:column="61">(<argument><expr><name pos:line="371" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="374" pos:column="19">catch <parameter_list pos:line="374" pos:column="25">(<param><decl><type><name pos:line="374" pos:column="26">Exception</name></type> <name pos:line="374" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="374" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="375" pos:column="25">System</name><op:operator pos:line="375" pos:column="31">.</op:operator><name pos:line="375" pos:column="32">out</name><op:operator pos:line="375" pos:column="35">.</op:operator><name pos:line="375" pos:column="36">println</name></name><argument_list pos:line="375" pos:column="43">(<argument><expr><name pos:line="375" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		
		}</block></then> <else pos:line="378" pos:column="19">else <block pos:line="378" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="379" pos:column="25">System</name><op:operator pos:line="379" pos:column="31">.</op:operator><name pos:line="379" pos:column="32">out</name><op:operator pos:line="379" pos:column="35">.</op:operator><name pos:line="379" pos:column="36">println</name></name><argument_list pos:line="379" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="379" pos:column="44">"Exam not present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> <comment type="line" pos:line="380" pos:column="19">// End of Else</comment>
		<return pos:line="381" pos:column="17">return <expr><name pos:line="381" pos:column="24">marksModified</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="384" pos:column="9">// To delete an exam.</comment>
	<comment type="line" pos:line="385" pos:column="9">// This function would internally call the function deleteExistingExamColumn of </comment>
	<comment type="line" pos:line="386" pos:column="9">// the CourseExam class to make the tables consistent.</comment>
	<function><type><specifier pos:line="387" pos:column="9">public</specifier> <name pos:line="387" pos:column="16">boolean</name></type> <name pos:line="387" pos:column="24">deleteExistingExam</name><parameter_list pos:line="387" pos:column="42">()</parameter_list><block pos:line="387" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="388" pos:column="17">boolean</name></type> <name pos:line="388" pos:column="25">examDeleted</name> <init pos:line="388" pos:column="37">= <expr><lit:literal type="boolean" pos:line="388" pos:column="39">false</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="390" pos:column="17">CourseOffered</name></type> <name pos:line="390" pos:column="31">offeredCourse</name> <init pos:line="390" pos:column="45">= <expr><name><name pos:line="390" pos:column="47">this</name><op:operator pos:line="390" pos:column="51">.</op:operator><name pos:line="390" pos:column="52">offeredCourse</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="391" pos:column="17">Course</name></type> <name pos:line="391" pos:column="24">course</name> <init pos:line="391" pos:column="31">= <expr><call><name><name pos:line="391" pos:column="33">offeredCourse</name><op:operator pos:line="391" pos:column="46">.</op:operator><name pos:line="391" pos:column="47">getCourse</name></name><argument_list pos:line="391" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="392" pos:column="17">String</name></type> <name pos:line="392" pos:column="24">courseName</name> <init pos:line="392" pos:column="35">= <expr><call><name><name pos:line="392" pos:column="37">course</name><op:operator pos:line="392" pos:column="43">.</op:operator><name pos:line="392" pos:column="44">getCourseName</name></name><argument_list pos:line="392" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="393" pos:column="17">int</name></type> <name pos:line="393" pos:column="21">offerID</name><init pos:line="393" pos:column="28">= <expr><call><name><name pos:line="393" pos:column="30">offeredCourse</name><op:operator pos:line="393" pos:column="43">.</op:operator><name pos:line="393" pos:column="44">getOfferID</name></name><argument_list pos:line="393" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="394" pos:column="17">int</name></type> <name pos:line="394" pos:column="21">semID</name> <init pos:line="394" pos:column="27">= <expr><call><name><name pos:line="394" pos:column="29">offeredCourse</name><op:operator pos:line="394" pos:column="42">.</op:operator><name pos:line="394" pos:column="43">getSemesterID</name></name><argument_list pos:line="394" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="396" pos:column="17">String</name></type> <name pos:line="396" pos:column="24">tableName</name> <init pos:line="396" pos:column="34">= <expr><name pos:line="396" pos:column="36">courseName</name> <op:operator pos:line="396" pos:column="47">+</op:operator> <call><name><name pos:line="396" pos:column="49">Integer</name><op:operator pos:line="396" pos:column="56">.</op:operator><name pos:line="396" pos:column="57">toString</name></name><argument_list pos:line="396" pos:column="65">(<argument><expr><name pos:line="396" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="396" pos:column="75">+</op:operator> <call><name><name pos:line="396" pos:column="77">Integer</name><op:operator pos:line="396" pos:column="84">.</op:operator><name pos:line="396" pos:column="85">toString</name></name><argument_list pos:line="396" pos:column="93">(<argument><expr><name pos:line="396" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="396" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="396" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="398" pos:column="17">String</name></type> <name pos:line="398" pos:column="24">examName</name> <init pos:line="398" pos:column="33">= <expr><name><name pos:line="398" pos:column="35">this</name><op:operator pos:line="398" pos:column="39">.</op:operator><name pos:line="398" pos:column="40">examName</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="399" pos:column="17">//int examTotal = this.examTotal;</comment>
		
		<decl_stmt><decl><type><name pos:line="401" pos:column="17">boolean</name></type> <name pos:line="401" pos:column="25">isExamPresent</name> <init pos:line="401" pos:column="39">= <expr><call><name><name pos:line="401" pos:column="41">this</name><op:operator pos:line="401" pos:column="45">.</op:operator><name pos:line="401" pos:column="46">isExamPresent</name></name><argument_list pos:line="401" pos:column="59">(<argument><expr><name pos:line="401" pos:column="60">tableName</name></expr></argument>,<argument><expr><name pos:line="401" pos:column="70">examName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="402" pos:column="17">if <condition pos:line="402" pos:column="20">(<expr><name pos:line="402" pos:column="21">isExamPresent</name> <op:operator pos:line="402" pos:column="35">==</op:operator> <lit:literal type="boolean" pos:line="402" pos:column="38">true</lit:literal></expr>)</condition><then><block pos:line="402" pos:column="43">{
						
<comment type="line" pos:line="404" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="405" pos:column="1">//				variable = {"examName"},  </comment>
<comment type="line" pos:line="406" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="407" pos:column="1">//				column = {"ExamName"}, </comment>
<comment type="line" pos:line="408" pos:column="1">//				isSource = false)</comment>
		<decl_stmt><decl><type><name pos:line="409" pos:column="17">String</name></type> <name pos:line="409" pos:column="24">SQLExamStructureDelete</name> <init pos:line="409" pos:column="47">= <expr><lit:literal type="string" pos:line="409" pos:column="49">"DELETE FROM %s WHERE ExamName = ?  ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="410" pos:column="17">SQLExamStructureDelete</name> <op:operator pos:line="410" pos:column="40">=</op:operator> <call><name><name pos:line="410" pos:column="42">String</name><op:operator pos:line="410" pos:column="48">.</op:operator><name pos:line="410" pos:column="49">format</name></name><argument_list pos:line="410" pos:column="55">(<argument><expr><name pos:line="410" pos:column="56">SQLExamStructureDelete</name></expr></argument>, <argument><expr><name pos:line="410" pos:column="80">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="412" pos:column="17">try <block pos:line="412" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="413" pos:column="25">Connection</name></type> <name pos:line="413" pos:column="36">conn</name> <init pos:line="413" pos:column="41">= <expr><call><name><name pos:line="413" pos:column="43">Database</name><op:operator pos:line="413" pos:column="51">.</op:operator><name pos:line="413" pos:column="52">getConnection</name></name><argument_list pos:line="413" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="414" pos:column="25">try <block pos:line="414" pos:column="29">{
				<if pos:line="415" pos:column="33">if <condition pos:line="415" pos:column="36">(<expr><name pos:line="415" pos:column="37">conn</name> <op:operator pos:line="415" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="415" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="415" pos:column="50"> <block pos:line="415" pos:column="51">{
					<decl_stmt><decl><type><name pos:line="416" pos:column="41">PreparedStatement</name></type> <name pos:line="416" pos:column="59">statement</name> <init pos:line="416" pos:column="69">= <expr><call><name><name pos:line="416" pos:column="71">conn</name><op:operator pos:line="416" pos:column="75">.</op:operator><name pos:line="416" pos:column="76">prepareStatement</name></name><argument_list pos:line="416" pos:column="92">(<argument><expr><name pos:line="416" pos:column="93">SQLExamStructureDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="417" pos:column="1">//					statement.setString(1, tableName);</comment>
					<expr_stmt><expr><call><name><name pos:line="418" pos:column="41">DBAnnotation</name><op:operator pos:line="418" pos:column="53">.</op:operator><name pos:line="418" pos:column="54">annoate</name></name><argument_list pos:line="418" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="418" pos:column="62">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="418" pos:column="74">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="418" pos:column="85">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="418" pos:column="97">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="419" pos:column="41">statement</name><op:operator pos:line="419" pos:column="50">.</op:operator><name pos:line="419" pos:column="51">setString</name></name><argument_list pos:line="419" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="419" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="419" pos:column="64">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="420" pos:column="41">statement</name><op:operator pos:line="420" pos:column="50">.</op:operator><name pos:line="420" pos:column="51">executeUpdate</name></name><argument_list pos:line="420" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="421" pos:column="41">boolean</name></type> <name pos:line="421" pos:column="49">examColumnDeleted</name> <init pos:line="421" pos:column="67">= <expr><call><name><name pos:line="421" pos:column="69">CourseExams</name><op:operator pos:line="421" pos:column="80">.</op:operator><name pos:line="421" pos:column="81">deleteExistingExamColumn</name></name><argument_list pos:line="421" pos:column="105">(<argument><expr><name pos:line="421" pos:column="106">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="422" pos:column="41">if<condition pos:line="422" pos:column="43">(<expr><name pos:line="422" pos:column="44">examColumnDeleted</name> <op:operator pos:line="422" pos:column="62">==</op:operator> <lit:literal type="boolean" pos:line="422" pos:column="65">true</lit:literal></expr>)</condition><then><block pos:line="422" pos:column="70">{
						<expr_stmt><expr><call><name><name pos:line="423" pos:column="49">Database</name><op:operator pos:line="423" pos:column="57">.</op:operator><name pos:line="423" pos:column="58">commitTransaction</name></name><argument_list pos:line="423" pos:column="75">(<argument><expr><name pos:line="423" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="424" pos:column="49">examDeleted</name> <op:operator pos:line="424" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="424" pos:column="63">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="426" pos:column="41">else<block pos:line="426" pos:column="45">{
						<expr_stmt><expr><call><name><name pos:line="427" pos:column="49">Database</name><op:operator pos:line="427" pos:column="57">.</op:operator><name pos:line="427" pos:column="58">rollBackTransaction</name></name><argument_list pos:line="427" pos:column="77">(<argument><expr><name pos:line="427" pos:column="78">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>	
			}</block> <catch pos:line="430" pos:column="27">catch <parameter_list pos:line="430" pos:column="33">(<param><decl><type><name pos:line="430" pos:column="34">SQLException</name></type> <name pos:line="430" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="431" pos:column="33">System</name><op:operator pos:line="431" pos:column="39">.</op:operator><name pos:line="431" pos:column="40">out</name><op:operator pos:line="431" pos:column="43">.</op:operator><name pos:line="431" pos:column="44">println</name></name><argument_list pos:line="431" pos:column="51">(<argument><expr><name pos:line="431" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="432" pos:column="33">Database</name><op:operator pos:line="432" pos:column="41">.</op:operator><name pos:line="432" pos:column="42">rollBackTransaction</name></name><argument_list pos:line="432" pos:column="61">(<argument><expr><name pos:line="432" pos:column="62">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block> <catch pos:line="435" pos:column="19">catch <parameter_list pos:line="435" pos:column="25">(<param><decl><type><name pos:line="435" pos:column="26">Exception</name></type> <name pos:line="435" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="435" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="436" pos:column="25">System</name><op:operator pos:line="436" pos:column="31">.</op:operator><name pos:line="436" pos:column="32">out</name><op:operator pos:line="436" pos:column="35">.</op:operator><name pos:line="436" pos:column="36">println</name></name><argument_list pos:line="436" pos:column="43">(<argument><expr><name pos:line="436" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		}</block></then> <else pos:line="438" pos:column="19">else <block pos:line="438" pos:column="24">{
			<expr_stmt><expr><call><name><name pos:line="439" pos:column="25">System</name><op:operator pos:line="439" pos:column="31">.</op:operator><name pos:line="439" pos:column="32">out</name><op:operator pos:line="439" pos:column="35">.</op:operator><name pos:line="439" pos:column="36">println</name></name><argument_list pos:line="439" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="439" pos:column="44">"Exam not present. Please try again."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if> <comment type="line" pos:line="440" pos:column="19">// End of Else</comment>
		<return pos:line="441" pos:column="17">return <expr><name pos:line="441" pos:column="24">examDeleted</name></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="444" pos:column="9">// To view all the exams in the course</comment>
	<function><type><specifier pos:line="445" pos:column="9">public</specifier> <specifier pos:line="445" pos:column="16">static</specifier> <name><name pos:line="445" pos:column="23">HashMap</name><argument_list pos:line="445" pos:column="30">&lt;<argument><name pos:line="445" pos:column="31">String</name></argument>,<argument><name pos:line="445" pos:column="38">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="445" pos:column="47">viewExams</name><parameter_list pos:line="445" pos:column="56">(<param><decl><type><name pos:line="445" pos:column="57">CourseOffered</name></type> <name pos:line="445" pos:column="71">courseoffered</name></decl></param>)</parameter_list><block pos:line="445" pos:column="85">{
		<decl_stmt><decl><type><name><name pos:line="446" pos:column="17">HashMap</name><argument_list pos:line="446" pos:column="24">&lt;<argument><name pos:line="446" pos:column="25">String</name></argument>,<argument><name pos:line="446" pos:column="32">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="446" pos:column="41">allExams</name> <init pos:line="446" pos:column="50">= <expr><op:operator pos:line="446" pos:column="52">new</op:operator> <call><name><name pos:line="446" pos:column="56">HashMap</name><argument_list pos:line="446" pos:column="63">&lt;<argument><name pos:line="446" pos:column="64">String</name></argument>,<argument><name pos:line="446" pos:column="71">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="446" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="447" pos:column="17">int</name></type> <name pos:line="447" pos:column="21">offerID</name> <init pos:line="447" pos:column="29">= <expr><call><name><name pos:line="447" pos:column="31">courseoffered</name><op:operator pos:line="447" pos:column="44">.</op:operator><name pos:line="447" pos:column="45">getOfferID</name></name><argument_list pos:line="447" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
<comment type="line" pos:line="449" pos:column="1">//		try {</comment>
<comment type="line" pos:line="450" pos:column="1">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="451" pos:column="1">//		} catch (Course.CourseDoesNotExistException e1) {</comment>
<comment type="line" pos:line="452" pos:column="1">//			e1.printStackTrace();</comment>
<comment type="line" pos:line="453" pos:column="1">//		} catch (CourseOffered.CourseOfferingDoesNotExistException e1) {</comment>
<comment type="line" pos:line="454" pos:column="1">//			e1.printStackTrace();</comment>
<comment type="line" pos:line="455" pos:column="1">//		}</comment>
		
		<decl_stmt><decl><type><name pos:line="457" pos:column="17">Course</name></type> <name pos:line="457" pos:column="24">course</name> <init pos:line="457" pos:column="31">= <expr><call><name><name pos:line="457" pos:column="33">courseoffered</name><op:operator pos:line="457" pos:column="46">.</op:operator><name pos:line="457" pos:column="47">getCourse</name></name><argument_list pos:line="457" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="458" pos:column="17">String</name></type> <name pos:line="458" pos:column="24">courseName</name> <init pos:line="458" pos:column="35">= <expr><call><name><name pos:line="458" pos:column="37">course</name><op:operator pos:line="458" pos:column="43">.</op:operator><name pos:line="458" pos:column="44">getCourseName</name></name><argument_list pos:line="458" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="459" pos:column="17">int</name></type> <name pos:line="459" pos:column="21">semID</name> <init pos:line="459" pos:column="27">= <expr><call><name><name pos:line="459" pos:column="29">courseoffered</name><op:operator pos:line="459" pos:column="42">.</op:operator><name pos:line="459" pos:column="43">getSemesterID</name></name><argument_list pos:line="459" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name pos:line="461" pos:column="17">String</name></type> <name pos:line="461" pos:column="24">tableName</name> <init pos:line="461" pos:column="34">= <expr><name pos:line="461" pos:column="36">courseName</name> <op:operator pos:line="461" pos:column="47">+</op:operator> <call><name><name pos:line="461" pos:column="49">Integer</name><op:operator pos:line="461" pos:column="56">.</op:operator><name pos:line="461" pos:column="57">toString</name></name><argument_list pos:line="461" pos:column="65">(<argument><expr><name pos:line="461" pos:column="66">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="461" pos:column="75">+</op:operator> <call><name><name pos:line="461" pos:column="77">Integer</name><op:operator pos:line="461" pos:column="84">.</op:operator><name pos:line="461" pos:column="85">toString</name></name><argument_list pos:line="461" pos:column="93">(<argument><expr><name pos:line="461" pos:column="94">semID</name></expr></argument>)</argument_list></call> <op:operator pos:line="461" pos:column="101">+</op:operator> <lit:literal type="string" pos:line="461" pos:column="103">"Structure"</lit:literal></expr></init></decl>;</decl_stmt> 
	
<comment type="line" pos:line="463" pos:column="1">//		@DBAnnotation (</comment>
<comment type="line" pos:line="464" pos:column="1">//				variable = {"examName","totalMarks"},  </comment>
<comment type="line" pos:line="465" pos:column="1">//				table = "tableName", </comment>
<comment type="line" pos:line="466" pos:column="1">//				column = {"ExamName","TotalMarks"}, </comment>
<comment type="line" pos:line="467" pos:column="1">//				isSource = true)</comment>
		<decl_stmt><decl><type><name pos:line="468" pos:column="17">String</name></type> <name pos:line="468" pos:column="24">SQLExamSelect</name> <init pos:line="468" pos:column="38">= <expr><lit:literal type="string" pos:line="468" pos:column="40">"SELECT ExamName,TotalMarks FROM %s ;"</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="469" pos:column="17">SQLExamSelect</name> <op:operator pos:line="469" pos:column="31">=</op:operator> <call><name><name pos:line="469" pos:column="33">String</name><op:operator pos:line="469" pos:column="39">.</op:operator><name pos:line="469" pos:column="40">format</name></name><argument_list pos:line="469" pos:column="46">(<argument><expr><name pos:line="469" pos:column="47">SQLExamSelect</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="62">tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<try pos:line="471" pos:column="17">try <block pos:line="471" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="472" pos:column="25">Connection</name></type> <name pos:line="472" pos:column="36">conn</name> <init pos:line="472" pos:column="41">= <expr><call><name><name pos:line="472" pos:column="43">Database</name><op:operator pos:line="472" pos:column="51">.</op:operator><name pos:line="472" pos:column="52">getConnection</name></name><argument_list pos:line="472" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="473" pos:column="25">try <block pos:line="473" pos:column="29">{
				<if pos:line="474" pos:column="33">if <condition pos:line="474" pos:column="36">(<expr><name pos:line="474" pos:column="37">conn</name> <op:operator pos:line="474" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="474" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="474" pos:column="50"> <block pos:line="474" pos:column="51">{
					<comment type="line" pos:line="475" pos:column="41">//System.out.println(tableName);</comment>
					<decl_stmt><decl><type><name pos:line="476" pos:column="41">PreparedStatement</name></type> <name pos:line="476" pos:column="59">statement</name> <init pos:line="476" pos:column="69">= <expr><call><name><name pos:line="476" pos:column="71">conn</name><op:operator pos:line="476" pos:column="75">.</op:operator><name pos:line="476" pos:column="76">prepareStatement</name></name><argument_list pos:line="476" pos:column="92">(<argument><expr><name pos:line="476" pos:column="93">SQLExamSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="477" pos:column="1">//					statement.setString(1, tableName);</comment>
					<decl_stmt><decl><type><name pos:line="478" pos:column="41">ResultSet</name></type> <name pos:line="478" pos:column="51">rs</name> <init pos:line="478" pos:column="54">=  <expr><call><name><name pos:line="478" pos:column="57">statement</name><op:operator pos:line="478" pos:column="66">.</op:operator><name pos:line="478" pos:column="67">executeQuery</name></name><argument_list pos:line="478" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
									
					<while pos:line="480" pos:column="41">while<condition pos:line="480" pos:column="46">(<expr><call><name><name pos:line="480" pos:column="47">rs</name><op:operator pos:line="480" pos:column="49">.</op:operator><name pos:line="480" pos:column="50">next</name></name><argument_list pos:line="480" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="480" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="481" pos:column="49">DBAnnotation</name><op:operator pos:line="481" pos:column="61">.</op:operator><name pos:line="481" pos:column="62">annoate</name></name><argument_list pos:line="481" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="481" pos:column="70">"examName"</lit:literal></expr></argument>, <argument><expr><name pos:line="481" pos:column="82">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="481" pos:column="93">"ExamName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="481" pos:column="105">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="482" pos:column="49">String</name></type> <name pos:line="482" pos:column="56">examName</name> <init pos:line="482" pos:column="65">= <expr><call><name><name pos:line="482" pos:column="67">rs</name><op:operator pos:line="482" pos:column="69">.</op:operator><name pos:line="482" pos:column="70">getString</name></name><argument_list pos:line="482" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="482" pos:column="80">"ExamName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="483" pos:column="49">DBAnnotation</name><op:operator pos:line="483" pos:column="61">.</op:operator><name pos:line="483" pos:column="62">annoate</name></name><argument_list pos:line="483" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="483" pos:column="70">"totalMarks"</lit:literal></expr></argument>, <argument><expr><name pos:line="483" pos:column="84">tableName</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="483" pos:column="95">"TotalMarks"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="483" pos:column="109">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="484" pos:column="49">int</name></type> <name pos:line="484" pos:column="53">totalMarks</name> <init pos:line="484" pos:column="64">= <expr><call><name><name pos:line="484" pos:column="66">rs</name><op:operator pos:line="484" pos:column="68">.</op:operator><name pos:line="484" pos:column="69">getInt</name></name><argument_list pos:line="484" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="484" pos:column="76">"TotalMarks"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="485" pos:column="49">System</name><op:operator pos:line="485" pos:column="55">.</op:operator><name pos:line="485" pos:column="56">out</name><op:operator pos:line="485" pos:column="59">.</op:operator><name pos:line="485" pos:column="60">println</name></name><argument_list pos:line="485" pos:column="67">(<argument><expr><name pos:line="485" pos:column="68">examName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="486" pos:column="49">if<condition pos:line="486" pos:column="51">(<expr><name pos:line="486" pos:column="52">examName</name> <op:operator pos:line="486" pos:column="61">!=</op:operator> <lit:literal type="null" pos:line="486" pos:column="64">null</lit:literal></expr>)</condition><then pos:line="486" pos:column="69">
							<expr_stmt><expr><call><name><name pos:line="487" pos:column="57">allExams</name><op:operator pos:line="487" pos:column="65">.</op:operator><name pos:line="487" pos:column="66">put</name></name><argument_list pos:line="487" pos:column="69">(<argument><expr><name pos:line="487" pos:column="70">examName</name></expr></argument>,<argument><expr><name pos:line="487" pos:column="79">totalMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></while>
				}</block></then></if>	
			}</block> <catch pos:line="490" pos:column="27">catch <parameter_list pos:line="490" pos:column="33">(<param><decl><type><name pos:line="490" pos:column="34">SQLException</name></type> <name pos:line="490" pos:column="47">e</name></decl></param>)</parameter_list> <block pos:line="490" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="491" pos:column="33">System</name><op:operator pos:line="491" pos:column="39">.</op:operator><name pos:line="491" pos:column="40">out</name><op:operator pos:line="491" pos:column="43">.</op:operator><name pos:line="491" pos:column="44">println</name></name><argument_list pos:line="491" pos:column="51">(<argument><expr><name pos:line="491" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block> <catch pos:line="493" pos:column="19">catch <parameter_list pos:line="493" pos:column="25">(<param><decl><type><name pos:line="493" pos:column="26">Exception</name></type> <name pos:line="493" pos:column="36">e</name></decl></param>)</parameter_list> <block pos:line="493" pos:column="39">{
			<expr_stmt><expr><call><name><name pos:line="494" pos:column="25">System</name><op:operator pos:line="494" pos:column="31">.</op:operator><name pos:line="494" pos:column="32">out</name><op:operator pos:line="494" pos:column="35">.</op:operator><name pos:line="494" pos:column="36">println</name></name><argument_list pos:line="494" pos:column="43">(<argument><expr><name pos:line="494" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return pos:line="496" pos:column="17">return <expr><name pos:line="496" pos:column="24">allExams</name></expr>;</return>
	}</block></function>
	
	<function><type><specifier pos:line="499" pos:column="9">public</specifier> <specifier pos:line="499" pos:column="16">static</specifier> <name pos:line="499" pos:column="23">void</name></type> <name pos:line="499" pos:column="28">main</name><parameter_list pos:line="499" pos:column="32">(<param><decl><type><name><name pos:line="499" pos:column="33">String</name><index pos:line="499" pos:column="39">[]</index></name></type> <name pos:line="499" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="499" pos:column="47">{
	
<comment type="line" pos:line="501" pos:column="1">//		int offerID = 345678;</comment>
<comment type="line" pos:line="502" pos:column="1">//		String examName = "Assgn1";</comment>
<comment type="line" pos:line="503" pos:column="1">//		</comment>
<comment type="line" pos:line="504" pos:column="1">//		int totalMarks = 10; </comment>
<comment type="line" pos:line="505" pos:column="1">//		CourseOffered offeredCourse = null;</comment>
<comment type="line" pos:line="506" pos:column="1">//		try {</comment>
<comment type="line" pos:line="507" pos:column="1">//			offeredCourse = new CourseOffered(offerID);</comment>
<comment type="line" pos:line="508" pos:column="1">//		} catch (Course.CourseDoesNotExistException e) {</comment>
<comment type="line" pos:line="509" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="510" pos:column="1">//		} catch (CourseOffered.CourseOfferingDoesNotExistException e) {</comment>
<comment type="line" pos:line="511" pos:column="1">//			e.printStackTrace();</comment>
<comment type="line" pos:line="512" pos:column="1">//		}</comment>
<comment type="line" pos:line="513" pos:column="1">////		</comment>
<comment type="line" pos:line="514" pos:column="1">//		@SuppressWarnings("unused")</comment>
<comment type="line" pos:line="515" pos:column="1">//		CourseExamStructure examStruct = new CourseExamStructure(offeredCourse,examName,totalMarks);</comment>
<comment type="line" pos:line="516" pos:column="1">////		</comment>
		<comment type="line" pos:line="517" pos:column="17">// To add a new exam</comment>
<comment type="line" pos:line="518" pos:column="1">//		boolean examAdded = examStruct.addNewExam();</comment>
<comment type="line" pos:line="519" pos:column="1">//		if(examAdded == true){</comment>
<comment type="line" pos:line="520" pos:column="1">//			System.out.println("Exam Added");</comment>
<comment type="line" pos:line="521" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="522" pos:column="1">//			System.out.println("Exam Not Added");</comment>
<comment type="line" pos:line="523" pos:column="1">//		}</comment>
		
<comment type="line" pos:line="525" pos:column="1">//		To test modifying the exam name</comment>
<comment type="line" pos:line="526" pos:column="1">//		String newExamName = "Hw2";</comment>
<comment type="line" pos:line="527" pos:column="1">//		boolean nameModified = examStruct.modifyExistingExamName(newExamName);</comment>
<comment type="line" pos:line="528" pos:column="1">//		if(nameModified == true){</comment>
<comment type="line" pos:line="529" pos:column="1">//			System.out.println("Exam Name Modified");</comment>
<comment type="line" pos:line="530" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="531" pos:column="1">//			System.out.println("Exam Name Not Modified");</comment>
<comment type="line" pos:line="532" pos:column="1">//		}</comment>
		
<comment type="line" pos:line="534" pos:column="1">//		To test deleting an exam </comment>
<comment type="line" pos:line="535" pos:column="1">//		boolean examDeleted = examStruct.deleteExistingExam();</comment>
<comment type="line" pos:line="536" pos:column="1">//		if(examDeleted == true){</comment>
<comment type="line" pos:line="537" pos:column="1">//			System.out.println("Exam Deleted");</comment>
<comment type="line" pos:line="538" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="539" pos:column="1">//			System.out.println("Exam Not Deleted");</comment>
<comment type="line" pos:line="540" pos:column="1">//		}</comment>
		
<comment type="line" pos:line="542" pos:column="1">//		To test modifying the exam mks</comment>
<comment type="line" pos:line="543" pos:column="1">//		int newExamMks = 20;</comment>
<comment type="line" pos:line="544" pos:column="1">//		boolean mksModified = examStruct.modifyExistingExamTotalMarks(newExamMks);</comment>
<comment type="line" pos:line="545" pos:column="1">//		if(mksModified == true){</comment>
<comment type="line" pos:line="546" pos:column="1">//			System.out.println("Exam Mks Modified");</comment>
<comment type="line" pos:line="547" pos:column="1">//		} else {</comment>
<comment type="line" pos:line="548" pos:column="1">//			System.out.println("Exam Mks Not Modified");</comment>
<comment type="line" pos:line="549" pos:column="1">//		}</comment>
		
	}</block></function>
}</block></class>
</unit>
