<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\xinco\src\com\bluecubs\xinco\core\server\XincoCoreLanguageServer.java" pos:tabs="8"><comment type="block" format="javadoc" pos:line="1" pos:column="1">/**
 *Copyright 2009 blueCubs.com
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 *
 *************************************************************
 * This project supports the blueCubs vision of giving back
 * to the community in exchange for free software!
 * More information on: http://www.bluecubs.org
 *************************************************************
 *
 * Name:            XincoCoreLanguageServer
 *
 * Description:     language
 *
 * Original Author: Alexander Manes
 * Date:            2004
 *
 * Modifications:
 *
 * Who?             When?             What?
 * -                -                 -
 *
 *************************************************************
 */</comment>

<package pos:line="37" pos:column="1">package <name><name pos:line="37" pos:column="9">com</name><op:operator pos:line="37" pos:column="12">.</op:operator><name pos:line="37" pos:column="13">bluecubs</name><op:operator pos:line="37" pos:column="21">.</op:operator><name pos:line="37" pos:column="22">xinco</name><op:operator pos:line="37" pos:column="27">.</op:operator><name pos:line="37" pos:column="28">core</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">server</name></name>;</package>

<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">java</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">sql</name></name>.*;</import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">java</name><op:operator pos:line="40" pos:column="12">.</op:operator><name pos:line="40" pos:column="13">util</name><op:operator pos:line="40" pos:column="17">.</op:operator><name pos:line="40" pos:column="18">Vector</name></name>;</import>

<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">com</name><op:operator pos:line="42" pos:column="11">.</op:operator><name pos:line="42" pos:column="12">bluecubs</name><op:operator pos:line="42" pos:column="20">.</op:operator><name pos:line="42" pos:column="21">xinco</name><op:operator pos:line="42" pos:column="26">.</op:operator><name pos:line="42" pos:column="27">core</name></name>.*;</import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">java</name><op:operator pos:line="43" pos:column="12">.</op:operator><name pos:line="43" pos:column="13">util</name><op:operator pos:line="43" pos:column="17">.</op:operator><name pos:line="43" pos:column="18">ResourceBundle</name></name>;</import>

<class><specifier pos:line="45" pos:column="1">public</specifier> class <name pos:line="45" pos:column="14">XincoCoreLanguageServer</name> <super><extends pos:line="45" pos:column="38">extends <name pos:line="45" pos:column="46">XincoCoreLanguage</name></extends></super> <block pos:line="45" pos:column="64">{
    
    <comment type="line" pos:line="47" pos:column="5">//create language object for data structures</comment>
    <constructor><specifier pos:line="48" pos:column="5">public</specifier> <name pos:line="48" pos:column="12">XincoCoreLanguageServer</name><parameter_list pos:line="48" pos:column="35">(<param><decl><type><name pos:line="48" pos:column="36">int</name></type> <name pos:line="48" pos:column="40">attrID</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="48">XincoDBManager</name></type> <name pos:line="48" pos:column="63">DBM</name></decl></param>)</parameter_list> <throws pos:line="48" pos:column="68">throws <argument><expr><name pos:line="48" pos:column="75">XincoException</name></expr></argument></throws> <block pos:line="48" pos:column="90">{
        
        <try pos:line="50" pos:column="9">try <block pos:line="50" pos:column="13">{
            
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">Statement</name></type> <name pos:line="52" pos:column="23">stmt</name> <init pos:line="52" pos:column="28">= <expr><call><name><name pos:line="52" pos:column="30">DBM</name><op:operator pos:line="52" pos:column="33">.</op:operator><name pos:line="52" pos:column="34">con</name><op:operator pos:line="52" pos:column="37">.</op:operator><name pos:line="52" pos:column="38">createStatement</name></name><argument_list pos:line="52" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">ResultSet</name></type> <name pos:line="53" pos:column="23">rs</name> <init pos:line="53" pos:column="26">= <expr><call><name><name pos:line="53" pos:column="28">stmt</name><op:operator pos:line="53" pos:column="32">.</op:operator><name pos:line="53" pos:column="33">executeQuery</name></name><argument_list pos:line="53" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="46">"SELECT * FROM xinco_core_language WHERE id="</lit:literal> <op:operator pos:line="53" pos:column="92">+</op:operator> <name pos:line="53" pos:column="94">attrID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line" pos:line="55" pos:column="13">//throw exception if no result found</comment>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">int</name></type> <name pos:line="56" pos:column="17">RowCount</name> <init pos:line="56" pos:column="26">= <expr><lit:literal type="number" pos:line="56" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="57" pos:column="13">while <condition pos:line="57" pos:column="19">(<expr><call><name><name pos:line="57" pos:column="20">rs</name><op:operator pos:line="57" pos:column="22">.</op:operator><name pos:line="57" pos:column="23">next</name></name><argument_list pos:line="57" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="57" pos:column="31">{
                <expr_stmt><expr><name pos:line="58" pos:column="17">RowCount</name><op:operator pos:line="58" pos:column="25">++</op:operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="59" pos:column="17">setId</name><argument_list pos:line="59" pos:column="22">(<argument><expr><call><name><name pos:line="59" pos:column="23">rs</name><op:operator pos:line="59" pos:column="25">.</op:operator><name pos:line="59" pos:column="26">getInt</name></name><argument_list pos:line="59" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="33">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="60" pos:column="17">setSign</name><argument_list pos:line="60" pos:column="24">(<argument><expr><call><name><name pos:line="60" pos:column="25">rs</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">getString</name></name><argument_list pos:line="60" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="38">"sign"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">setDesignation</name><argument_list pos:line="61" pos:column="31">(<argument><expr><call><name><name pos:line="61" pos:column="32">rs</name><op:operator pos:line="61" pos:column="34">.</op:operator><name pos:line="61" pos:column="35">getString</name></name><argument_list pos:line="61" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="45">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name pos:line="63" pos:column="17">RowCount</name> <op:operator pos:line="63" pos:column="26">&lt;</op:operator> <lit:literal type="number" pos:line="63" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="63" pos:column="30"> <block pos:line="63" pos:column="31">{
                <throw pos:line="64" pos:column="17">throw <expr><op:operator pos:line="64" pos:column="23">new</op:operator> <call><name pos:line="64" pos:column="27">XincoException</name><argument_list pos:line="64" pos:column="41">()</argument_list></call></expr>;</throw>
            }</block></then></if>
            
            <expr_stmt><expr><call><name><name pos:line="67" pos:column="13">stmt</name><op:operator pos:line="67" pos:column="17">.</op:operator><name pos:line="67" pos:column="18">close</name></name><argument_list pos:line="67" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            
        }</block> <catch pos:line="69" pos:column="11">catch <parameter_list pos:line="69" pos:column="17">(<param><decl><type><name pos:line="69" pos:column="18">Exception</name></type> <name pos:line="69" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="31">{
            <throw pos:line="70" pos:column="13">throw <expr><op:operator pos:line="70" pos:column="19">new</op:operator> <call><name pos:line="70" pos:column="23">XincoException</name><argument_list pos:line="70" pos:column="37">()</argument_list></call></expr>;</throw>
        }</block></catch></try>
        
    }</block></constructor>
    
    <comment type="line" pos:line="75" pos:column="5">//create language object for data structures</comment>
    <constructor><specifier pos:line="76" pos:column="5">public</specifier> <name pos:line="76" pos:column="12">XincoCoreLanguageServer</name><parameter_list pos:line="76" pos:column="35">(<param><decl><type><name pos:line="76" pos:column="36">int</name></type> <name pos:line="76" pos:column="40">attrID</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="48">String</name></type> <name pos:line="76" pos:column="55">attrS</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="62">String</name></type> <name pos:line="76" pos:column="69">attrD</name></decl></param>)</parameter_list> <throws pos:line="76" pos:column="76">throws <argument><expr><name pos:line="76" pos:column="83">XincoException</name></expr></argument></throws> <block pos:line="76" pos:column="98">{
        
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">setId</name><argument_list pos:line="78" pos:column="14">(<argument><expr><name pos:line="78" pos:column="15">attrID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">setSign</name><argument_list pos:line="79" pos:column="16">(<argument><expr><name pos:line="79" pos:column="17">attrS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">setDesignation</name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">attrD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="line" pos:line="84" pos:column="5">//write to db</comment>
    <function><type><specifier pos:line="85" pos:column="5">public</specifier> <name pos:line="85" pos:column="12">int</name></type> <name pos:line="85" pos:column="16">write2DB</name><parameter_list pos:line="85" pos:column="24">(<param><decl><type><name pos:line="85" pos:column="25">XincoDBManager</name></type> <name pos:line="85" pos:column="40">DBM</name></decl></param>)</parameter_list> <throws pos:line="85" pos:column="45">throws <argument><expr><name pos:line="85" pos:column="52">XincoException</name></expr></argument></throws> <block pos:line="85" pos:column="67">{
        
        <try pos:line="87" pos:column="9">try <block pos:line="87" pos:column="13">{
            
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">Statement</name></type> <name pos:line="89" pos:column="23">stmt</name></decl>;</decl_stmt>
            
            <if pos:line="91" pos:column="13">if <condition pos:line="91" pos:column="16">(<expr><call><name pos:line="91" pos:column="17">getId</name><argument_list pos:line="91" pos:column="22">()</argument_list></call> <op:operator pos:line="91" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="91" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="91" pos:column="29"> <block pos:line="91" pos:column="30">{
                <expr_stmt><expr><name pos:line="92" pos:column="17">stmt</name> <op:operator pos:line="92" pos:column="22">=</op:operator> <call><name><name pos:line="92" pos:column="24">DBM</name><op:operator pos:line="92" pos:column="27">.</op:operator><name pos:line="92" pos:column="28">con</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">createStatement</name></name><argument_list pos:line="92" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="93" pos:column="17">XincoCoreAuditServer</name></type> <name pos:line="93" pos:column="38">audit</name><init pos:line="93" pos:column="43">= <expr><op:operator pos:line="93" pos:column="45">new</op:operator> <call><name pos:line="93" pos:column="49">XincoCoreAuditServer</name><argument_list pos:line="93" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">ResourceBundle</name></type> <name pos:line="94" pos:column="32">xerb</name> <init pos:line="94" pos:column="37">= <expr><call><name><name pos:line="94" pos:column="39">ResourceBundle</name><op:operator pos:line="94" pos:column="53">.</op:operator><name pos:line="94" pos:column="54">getBundle</name></name><argument_list pos:line="94" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="64">"com.bluecubs.xinco.messages.XincoMessages"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="95" pos:column="17">audit</name><op:operator pos:line="95" pos:column="22">.</op:operator><name pos:line="95" pos:column="23">updateAuditTrail</name></name><argument_list pos:line="95" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="40">"xinco_core_language"</lit:literal></expr></argument>,<argument><expr><op:operator pos:line="95" pos:column="62">new</op:operator> <name><name pos:line="95" pos:column="66">String</name> <index pos:line="95" pos:column="73">[]</index></name> <block pos:line="95" pos:column="76">{<expr><lit:literal type="string" pos:line="95" pos:column="77">"id ="</lit:literal><op:operator pos:line="95" pos:column="83">+</op:operator><call><name pos:line="95" pos:column="84">getId</name><argument_list pos:line="95" pos:column="89">()</argument_list></call></expr>}</block></expr></argument>,
                        <argument><expr><name pos:line="96" pos:column="25">DBM</name></expr></argument>,<argument><expr><call><name><name pos:line="96" pos:column="29">xerb</name><op:operator pos:line="96" pos:column="33">.</op:operator><name pos:line="96" pos:column="34">getString</name></name><argument_list pos:line="96" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="44">"audit.language.change"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name pos:line="96" pos:column="69">this</name><op:operator pos:line="96" pos:column="73">.</op:operator><name pos:line="96" pos:column="74">getChangerID</name></name><argument_list pos:line="96" pos:column="86">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="97" pos:column="17">stmt</name><op:operator pos:line="97" pos:column="21">.</op:operator><name pos:line="97" pos:column="22">executeUpdate</name></name><argument_list pos:line="97" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="36">"UPDATE xinco_core_language SET sign='"</lit:literal> <op:operator pos:line="97" pos:column="76">+</op:operator> <call><name pos:line="97" pos:column="78">getSign</name><argument_list pos:line="97" pos:column="85">()</argument_list></call><op:operator pos:line="97" pos:column="87">.</op:operator><call><name pos:line="97" pos:column="88">replaceAll</name><argument_list pos:line="97" pos:column="98">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="99">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="97" pos:column="103">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="112">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="114">"', designation='"</lit:literal> <op:operator pos:line="97" pos:column="133">+</op:operator> <call><name pos:line="97" pos:column="135">getDesignation</name><argument_list pos:line="97" pos:column="149">()</argument_list></call><op:operator pos:line="97" pos:column="151">.</op:operator><call><name pos:line="97" pos:column="152">replaceAll</name><argument_list pos:line="97" pos:column="162">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="163">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="97" pos:column="167">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="176">+</op:operator> <lit:literal type="string" pos:line="97" pos:column="178">"' WHERE id="</lit:literal> <op:operator pos:line="97" pos:column="192">+</op:operator> <call><name pos:line="97" pos:column="194">getId</name><argument_list pos:line="97" pos:column="199">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="98" pos:column="17">stmt</name><op:operator pos:line="98" pos:column="21">.</op:operator><name pos:line="98" pos:column="22">close</name></name><argument_list pos:line="98" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="99" pos:column="15">else <block pos:line="99" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="100" pos:column="17">setId</name><argument_list pos:line="100" pos:column="22">(<argument><expr><call><name><name pos:line="100" pos:column="23">DBM</name><op:operator pos:line="100" pos:column="26">.</op:operator><name pos:line="100" pos:column="27">getNewID</name></name><argument_list pos:line="100" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="36">"xinco_core_language"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><name pos:line="102" pos:column="17">stmt</name> <op:operator pos:line="102" pos:column="22">=</op:operator> <call><name><name pos:line="102" pos:column="24">DBM</name><op:operator pos:line="102" pos:column="27">.</op:operator><name pos:line="102" pos:column="28">con</name><op:operator pos:line="102" pos:column="31">.</op:operator><name pos:line="102" pos:column="32">createStatement</name></name><argument_list pos:line="102" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="103" pos:column="17">stmt</name><op:operator pos:line="103" pos:column="21">.</op:operator><name pos:line="103" pos:column="22">executeUpdate</name></name><argument_list pos:line="103" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="36">"INSERT INTO xinco_core_language VALUES ("</lit:literal> <op:operator pos:line="103" pos:column="79">+</op:operator> <call><name pos:line="103" pos:column="81">getId</name><argument_list pos:line="103" pos:column="86">()</argument_list></call> <op:operator pos:line="103" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="103" pos:column="91">", '"</lit:literal> <op:operator pos:line="103" pos:column="97">+</op:operator> <call><name pos:line="103" pos:column="99">getSign</name><argument_list pos:line="103" pos:column="106">()</argument_list></call><op:operator pos:line="103" pos:column="108">.</op:operator><call><name pos:line="103" pos:column="109">replaceAll</name><argument_list pos:line="103" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="120">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="103" pos:column="124">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="133">+</op:operator> <lit:literal type="string" pos:line="103" pos:column="135">"', '"</lit:literal> <op:operator pos:line="103" pos:column="142">+</op:operator> <call><name pos:line="103" pos:column="144">getDesignation</name><argument_list pos:line="103" pos:column="158">()</argument_list></call><op:operator pos:line="103" pos:column="160">.</op:operator><call><name pos:line="103" pos:column="161">replaceAll</name><argument_list pos:line="103" pos:column="171">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="172">"'"</lit:literal></expr></argument>,<argument><expr><lit:literal type="string" pos:line="103" pos:column="176">"\\\\'"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="185">+</op:operator> <lit:literal type="string" pos:line="103" pos:column="187">"')"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="104" pos:column="17">stmt</name><op:operator pos:line="104" pos:column="21">.</op:operator><name pos:line="104" pos:column="22">close</name></name><argument_list pos:line="104" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <expr_stmt><expr><call><name><name pos:line="107" pos:column="13">DBM</name><op:operator pos:line="107" pos:column="16">.</op:operator><name pos:line="107" pos:column="17">con</name><op:operator pos:line="107" pos:column="20">.</op:operator><name pos:line="107" pos:column="21">commit</name></name><argument_list pos:line="107" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            
        }</block> <catch pos:line="109" pos:column="11">catch <parameter_list pos:line="109" pos:column="17">(<param><decl><type><name pos:line="109" pos:column="18">Exception</name></type> <name pos:line="109" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="31">{
            <try pos:line="110" pos:column="13">try <block pos:line="110" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="111" pos:column="17">DBM</name><op:operator pos:line="111" pos:column="20">.</op:operator><name pos:line="111" pos:column="21">con</name><op:operator pos:line="111" pos:column="24">.</op:operator><name pos:line="111" pos:column="25">rollback</name></name><argument_list pos:line="111" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="112" pos:column="15">catch <parameter_list pos:line="112" pos:column="21">(<param><decl><type><name pos:line="112" pos:column="22">Exception</name></type> <name pos:line="112" pos:column="32">erollback</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="43">{
            }</block></catch></try>
            <throw pos:line="114" pos:column="13">throw <expr><op:operator pos:line="114" pos:column="19">new</op:operator> <call><name pos:line="114" pos:column="23">XincoException</name><argument_list pos:line="114" pos:column="37">()</argument_list></call></expr>;</throw>
        }</block></catch></try>
        
        <return pos:line="117" pos:column="9">return <expr><call><name pos:line="117" pos:column="16">getId</name><argument_list pos:line="117" pos:column="21">()</argument_list></call></expr>;</return>
        
    }</block></function>
    
    <comment type="line" pos:line="121" pos:column="5">//delete from db</comment>
    <function><type><specifier pos:line="122" pos:column="5">public</specifier> <specifier pos:line="122" pos:column="12">static</specifier> <name pos:line="122" pos:column="19">int</name></type> <name pos:line="122" pos:column="23">deleteFromDB</name><parameter_list pos:line="122" pos:column="35">(<param><decl><type><name pos:line="122" pos:column="36">XincoCoreLanguage</name></type> <name pos:line="122" pos:column="54">attrCL</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="62">XincoDBManager</name></type> <name pos:line="122" pos:column="77">DBM</name></decl></param>,<param><decl><type><name pos:line="122" pos:column="81">int</name></type> <name pos:line="122" pos:column="85">userID</name></decl></param>)</parameter_list> <throws pos:line="122" pos:column="93">throws <argument><expr><name pos:line="122" pos:column="100">XincoException</name></expr></argument></throws> <block pos:line="122" pos:column="115">{
        
        <try pos:line="124" pos:column="9">try <block pos:line="124" pos:column="13">{
            
            <decl_stmt><decl><type><name pos:line="126" pos:column="13">Statement</name></type> <name pos:line="126" pos:column="23">stmt</name> <init pos:line="126" pos:column="28">= <expr><lit:literal type="null" pos:line="126" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name pos:line="128" pos:column="13">stmt</name> <op:operator pos:line="128" pos:column="18">=</op:operator> <call><name><name pos:line="128" pos:column="20">DBM</name><op:operator pos:line="128" pos:column="23">.</op:operator><name pos:line="128" pos:column="24">con</name><op:operator pos:line="128" pos:column="27">.</op:operator><name pos:line="128" pos:column="28">createStatement</name></name><argument_list pos:line="128" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="129" pos:column="13">XincoCoreAuditServer</name></type> <name pos:line="129" pos:column="34">audit</name><init pos:line="129" pos:column="39">= <expr><op:operator pos:line="129" pos:column="41">new</op:operator> <call><name pos:line="129" pos:column="45">XincoCoreAuditServer</name><argument_list pos:line="129" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">audit</name><op:operator pos:line="130" pos:column="18">.</op:operator><name pos:line="130" pos:column="19">updateAuditTrail</name></name><argument_list pos:line="130" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="36">"xinco_core_language"</lit:literal></expr></argument>,<argument><expr><op:operator pos:line="130" pos:column="58">new</op:operator> <name><name pos:line="130" pos:column="62">String</name> <index pos:line="130" pos:column="69">[]</index></name> <block pos:line="130" pos:column="72">{<expr><lit:literal type="string" pos:line="130" pos:column="73">"id ="</lit:literal><op:operator pos:line="130" pos:column="79">+</op:operator><call><name><name pos:line="130" pos:column="80">attrCL</name><op:operator pos:line="130" pos:column="86">.</op:operator><name pos:line="130" pos:column="87">getId</name></name><argument_list pos:line="130" pos:column="92">()</argument_list></call></expr>}</block></expr></argument>,
                    <argument><expr><name pos:line="131" pos:column="21">DBM</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="131" pos:column="25">"audit.general.delete"</lit:literal></expr></argument>,<argument><expr><name pos:line="131" pos:column="48">userID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="132" pos:column="13">stmt</name><op:operator pos:line="132" pos:column="17">.</op:operator><name pos:line="132" pos:column="18">executeUpdate</name></name><argument_list pos:line="132" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="32">"DELETE FROM xinco_core_language WHERE id="</lit:literal> <op:operator pos:line="132" pos:column="76">+</op:operator> <call><name><name pos:line="132" pos:column="78">attrCL</name><op:operator pos:line="132" pos:column="84">.</op:operator><name pos:line="132" pos:column="85">getId</name></name><argument_list pos:line="132" pos:column="90">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="133" pos:column="13">stmt</name><op:operator pos:line="133" pos:column="17">.</op:operator><name pos:line="133" pos:column="18">close</name></name><argument_list pos:line="133" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">DBM</name><op:operator pos:line="135" pos:column="16">.</op:operator><name pos:line="135" pos:column="17">con</name><op:operator pos:line="135" pos:column="20">.</op:operator><name pos:line="135" pos:column="21">commit</name></name><argument_list pos:line="135" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            
        }</block> <catch pos:line="137" pos:column="11">catch <parameter_list pos:line="137" pos:column="17">(<param><decl><type><name pos:line="137" pos:column="18">Exception</name></type> <name pos:line="137" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="137" pos:column="31">{
            <try pos:line="138" pos:column="13">try <block pos:line="138" pos:column="17">{
                <expr_stmt><expr><call><name><name pos:line="139" pos:column="17">DBM</name><op:operator pos:line="139" pos:column="20">.</op:operator><name pos:line="139" pos:column="21">con</name><op:operator pos:line="139" pos:column="24">.</op:operator><name pos:line="139" pos:column="25">rollback</name></name><argument_list pos:line="139" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch pos:line="140" pos:column="15">catch <parameter_list pos:line="140" pos:column="21">(<param><decl><type><name pos:line="140" pos:column="22">Exception</name></type> <name pos:line="140" pos:column="32">erollback</name></decl></param>)</parameter_list> <block pos:line="140" pos:column="43">{
            }</block></catch></try>
            <throw pos:line="142" pos:column="13">throw <expr><op:operator pos:line="142" pos:column="19">new</op:operator> <call><name pos:line="142" pos:column="23">XincoException</name><argument_list pos:line="142" pos:column="37">()</argument_list></call></expr>;</throw>
        }</block></catch></try>
        
        <return pos:line="145" pos:column="9">return <expr><lit:literal type="number" pos:line="145" pos:column="16">0</lit:literal></expr>;</return>
        
    }</block></function>
    
    <comment type="line" pos:line="149" pos:column="5">//create complete list of languages</comment>
    <function><type><specifier pos:line="150" pos:column="5">public</specifier> <specifier pos:line="150" pos:column="12">static</specifier> <name pos:line="150" pos:column="19">Vector</name></type> <name pos:line="150" pos:column="26">getXincoCoreLanguages</name><parameter_list pos:line="150" pos:column="47">(<param><decl><type><name pos:line="150" pos:column="48">XincoDBManager</name></type> <name pos:line="150" pos:column="63">DBM</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="68">{
        
        <decl_stmt><decl><type><name pos:line="152" pos:column="9">Vector</name></type> <name pos:line="152" pos:column="16">coreLanguages</name> <init pos:line="152" pos:column="30">= <expr><op:operator pos:line="152" pos:column="32">new</op:operator> <call><name pos:line="152" pos:column="36">Vector</name><argument_list pos:line="152" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <try pos:line="154" pos:column="9">try <block pos:line="154" pos:column="13">{
            
            <decl_stmt><decl><type><name pos:line="156" pos:column="13">Statement</name></type> <name pos:line="156" pos:column="23">stmt</name> <init pos:line="156" pos:column="28">= <expr><call><name><name pos:line="156" pos:column="30">DBM</name><op:operator pos:line="156" pos:column="33">.</op:operator><name pos:line="156" pos:column="34">con</name><op:operator pos:line="156" pos:column="37">.</op:operator><name pos:line="156" pos:column="38">createStatement</name></name><argument_list pos:line="156" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="157" pos:column="13">ResultSet</name></type> <name pos:line="157" pos:column="23">rs</name> <init pos:line="157" pos:column="26">= <expr><call><name><name pos:line="157" pos:column="28">stmt</name><op:operator pos:line="157" pos:column="32">.</op:operator><name pos:line="157" pos:column="33">executeQuery</name></name><argument_list pos:line="157" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="157" pos:column="46">"SELECT * FROM xinco_core_language ORDER BY designation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <while pos:line="159" pos:column="13">while <condition pos:line="159" pos:column="19">(<expr><call><name><name pos:line="159" pos:column="20">rs</name><op:operator pos:line="159" pos:column="22">.</op:operator><name pos:line="159" pos:column="23">next</name></name><argument_list pos:line="159" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="159" pos:column="31">{
                <expr_stmt><expr><call><name><name pos:line="160" pos:column="17">coreLanguages</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">addElement</name></name><argument_list pos:line="160" pos:column="41">(<argument><expr><op:operator pos:line="160" pos:column="42">new</op:operator> <call><name pos:line="160" pos:column="46">XincoCoreLanguageServer</name><argument_list pos:line="160" pos:column="69">(<argument><expr><call><name><name pos:line="160" pos:column="70">rs</name><op:operator pos:line="160" pos:column="72">.</op:operator><name pos:line="160" pos:column="73">getInt</name></name><argument_list pos:line="160" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="80">"id"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="160" pos:column="87">rs</name><op:operator pos:line="160" pos:column="89">.</op:operator><name pos:line="160" pos:column="90">getString</name></name><argument_list pos:line="160" pos:column="99">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="100">"sign"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="160" pos:column="109">rs</name><op:operator pos:line="160" pos:column="111">.</op:operator><name pos:line="160" pos:column="112">getString</name></name><argument_list pos:line="160" pos:column="121">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="122">"designation"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            
            <expr_stmt><expr><call><name><name pos:line="163" pos:column="13">stmt</name><op:operator pos:line="163" pos:column="17">.</op:operator><name pos:line="163" pos:column="18">close</name></name><argument_list pos:line="163" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            
        }</block> <catch pos:line="165" pos:column="11">catch <parameter_list pos:line="165" pos:column="17">(<param><decl><type><name pos:line="165" pos:column="18">Exception</name></type> <name pos:line="165" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="31">{
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">coreLanguages</name><op:operator pos:line="166" pos:column="26">.</op:operator><name pos:line="166" pos:column="27">removeAllElements</name></name><argument_list pos:line="166" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return pos:line="169" pos:column="9">return <expr><name pos:line="169" pos:column="16">coreLanguages</name></expr>;</return>
    }</block></function>
    
    <comment type="line" pos:line="172" pos:column="5">//check if language is in use by other objects</comment>
    <function><type><specifier pos:line="173" pos:column="5">public</specifier> <specifier pos:line="173" pos:column="12">static</specifier> <name pos:line="173" pos:column="19">boolean</name></type> <name pos:line="173" pos:column="27">isLanguageUsed</name><parameter_list pos:line="173" pos:column="41">(<param><decl><type><name pos:line="173" pos:column="42">XincoCoreLanguage</name></type> <name pos:line="173" pos:column="60">xcl</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="65">XincoDBManager</name></type> <name pos:line="173" pos:column="80">DBM</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="85">{
        
        <decl_stmt><decl><type><name pos:line="175" pos:column="9">boolean</name></type> <name pos:line="175" pos:column="17">is_used</name> <init pos:line="175" pos:column="25">= <expr><lit:literal type="boolean" pos:line="175" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>
        
        <try pos:line="177" pos:column="9">try <block pos:line="177" pos:column="13">{
            
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">Statement</name></type> <name pos:line="179" pos:column="23">stmt</name> <init pos:line="179" pos:column="28">= <expr><lit:literal type="null" pos:line="179" pos:column="30">null</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">ResultSet</name></type> <name pos:line="180" pos:column="23">rs</name> <init pos:line="180" pos:column="26">= <expr><lit:literal type="null" pos:line="180" pos:column="28">null</lit:literal></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name pos:line="182" pos:column="13">stmt</name> <op:operator pos:line="182" pos:column="18">=</op:operator> <call><name><name pos:line="182" pos:column="20">DBM</name><op:operator pos:line="182" pos:column="23">.</op:operator><name pos:line="182" pos:column="24">con</name><op:operator pos:line="182" pos:column="27">.</op:operator><name pos:line="182" pos:column="28">createStatement</name></name><argument_list pos:line="182" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="183" pos:column="13">rs</name> <op:operator pos:line="183" pos:column="16">=</op:operator> <call><name><name pos:line="183" pos:column="18">stmt</name><op:operator pos:line="183" pos:column="22">.</op:operator><name pos:line="183" pos:column="23">executeQuery</name></name><argument_list pos:line="183" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="36">"SELECT 1 FROM xinco_core_node WHERE xinco_core_language_id = "</lit:literal> <op:operator pos:line="183" pos:column="100">+</op:operator> <call><name><name pos:line="183" pos:column="102">xcl</name><op:operator pos:line="183" pos:column="105">.</op:operator><name pos:line="183" pos:column="106">getId</name></name><argument_list pos:line="183" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:line="184" pos:column="13">while <condition pos:line="184" pos:column="19">(<expr><call><name><name pos:line="184" pos:column="20">rs</name><op:operator pos:line="184" pos:column="22">.</op:operator><name pos:line="184" pos:column="23">next</name></name><argument_list pos:line="184" pos:column="27">()</argument_list></call></expr>)</condition> <block pos:line="184" pos:column="31">{
                <expr_stmt><expr><name pos:line="185" pos:column="17">is_used</name> <op:operator pos:line="185" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="185" pos:column="27">true</lit:literal></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name pos:line="187" pos:column="13">stmt</name><op:operator pos:line="187" pos:column="17">.</op:operator><name pos:line="187" pos:column="18">close</name></name><argument_list pos:line="187" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            
            <if pos:line="189" pos:column="13">if <condition pos:line="189" pos:column="16">(<expr><op:operator pos:line="189" pos:column="17">!</op:operator><name pos:line="189" pos:column="18">is_used</name></expr>)</condition><then pos:line="189" pos:column="26"> <block pos:line="189" pos:column="27">{
                <expr_stmt><expr><name pos:line="190" pos:column="17">stmt</name> <op:operator pos:line="190" pos:column="22">=</op:operator> <call><name><name pos:line="190" pos:column="24">DBM</name><op:operator pos:line="190" pos:column="27">.</op:operator><name pos:line="190" pos:column="28">con</name><op:operator pos:line="190" pos:column="31">.</op:operator><name pos:line="190" pos:column="32">createStatement</name></name><argument_list pos:line="190" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="191" pos:column="17">rs</name> <op:operator pos:line="191" pos:column="20">=</op:operator> <call><name><name pos:line="191" pos:column="22">stmt</name><op:operator pos:line="191" pos:column="26">.</op:operator><name pos:line="191" pos:column="27">executeQuery</name></name><argument_list pos:line="191" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="40">"SELECT 1 FROM xinco_core_data WHERE xinco_core_language_id = "</lit:literal> <op:operator pos:line="191" pos:column="104">+</op:operator> <call><name><name pos:line="191" pos:column="106">xcl</name><op:operator pos:line="191" pos:column="109">.</op:operator><name pos:line="191" pos:column="110">getId</name></name><argument_list pos:line="191" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while pos:line="192" pos:column="17">while <condition pos:line="192" pos:column="23">(<expr><call><name><name pos:line="192" pos:column="24">rs</name><op:operator pos:line="192" pos:column="26">.</op:operator><name pos:line="192" pos:column="27">next</name></name><argument_list pos:line="192" pos:column="31">()</argument_list></call></expr>)</condition> <block pos:line="192" pos:column="35">{
                    <expr_stmt><expr><name pos:line="193" pos:column="21">is_used</name> <op:operator pos:line="193" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="193" pos:column="31">true</lit:literal></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name pos:line="195" pos:column="17">stmt</name><op:operator pos:line="195" pos:column="21">.</op:operator><name pos:line="195" pos:column="22">close</name></name><argument_list pos:line="195" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
        }</block> <catch pos:line="198" pos:column="11">catch <parameter_list pos:line="198" pos:column="17">(<param><decl><type><name pos:line="198" pos:column="18">Exception</name></type> <name pos:line="198" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="198" pos:column="31">{
            <expr_stmt><expr><name pos:line="199" pos:column="13">is_used</name> <op:operator pos:line="199" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="199" pos:column="23">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="199" pos:column="29">// rather lock language in case of error!</comment>
        }</block></catch></try>
        
        <return pos:line="202" pos:column="9">return <expr><name pos:line="202" pos:column="16">is_used</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
