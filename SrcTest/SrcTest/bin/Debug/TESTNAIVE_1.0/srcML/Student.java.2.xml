<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Student.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">sql</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Connection</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">sql</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">java</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">sql</name><op:operator pos:line="5" pos:column="16">.</op:operator><name pos:line="5" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">SQLException</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">util</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">util</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">LinkedHashMap</name></name>;</import>

<comment type="block" format="javadoc" pos:line="10" pos:column="1">/**
 * @author Akshay
 * 
 */</comment>

<comment type="block" format="javadoc" pos:line="15" pos:column="1">/*************** STUDENT.JAVA CLASS WAS WRITTEN BY AKSHAY THIRKATEH ********************************/</comment>

<class><specifier pos:line="17" pos:column="1">public</specifier> class <name pos:line="17" pos:column="14">Student</name> <super><extends pos:line="17" pos:column="22">extends <name pos:line="17" pos:column="30">People</name></extends></super> <block pos:line="17" pos:column="37">{

	<comment type="line" pos:line="19" pos:column="9">// class variables that are specific to student class</comment>
	<decl_stmt><decl><type><specifier pos:line="20" pos:column="9">protected</specifier> <name pos:line="20" pos:column="19">double</name></type> <name pos:line="20" pos:column="26">GPA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="21" pos:column="9">protected</specifier> <name pos:line="21" pos:column="19">int</name></type> <name pos:line="21" pos:column="23">level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="22" pos:column="9">public</specifier> <name pos:line="22" pos:column="16">JobApplication</name></type> <name pos:line="22" pos:column="31">jobApplication</name> <init pos:line="22" pos:column="46">= <expr><lit:literal type="null" pos:line="22" pos:column="48">null</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="block" pos:line="24" pos:column="9">/*student class constructor with the UIN passed 
	 * 
	 * it throws an exception
	 * */</comment>
	<constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">Student</name><parameter_list pos:line="28" pos:column="23">(<param><decl><type><name pos:line="28" pos:column="24">int</name></type> <name pos:line="28" pos:column="28">UIN</name></decl></param>)</parameter_list> <throws pos:line="28" pos:column="33">throws <argument><expr><name pos:line="28" pos:column="40">PersonDoesNotExistException</name></expr></argument></throws> <block pos:line="28" pos:column="68">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">super</name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<try pos:line="31" pos:column="17">try <block pos:line="31" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">Connection</name></type> <name pos:line="32" pos:column="36">conn</name> <init pos:line="32" pos:column="41">= <expr><call><name><name pos:line="32" pos:column="43">Database</name><op:operator pos:line="32" pos:column="51">.</op:operator><name pos:line="32" pos:column="52">getConnection</name></name><argument_list pos:line="32" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="32" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">String</name></type> <name pos:line="33" pos:column="32">SQLStudentGPASelect</name> <init pos:line="33" pos:column="52">= <expr><lit:literal type="string" pos:line="33" pos:column="54">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="34" pos:column="25">try <block pos:line="34" pos:column="29">{

				<if pos:line="36" pos:column="33">if <condition pos:line="36" pos:column="36">(<expr><name pos:line="36" pos:column="37">conn</name> <op:operator pos:line="36" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="36" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="36" pos:column="50"> <block pos:line="36" pos:column="51">{

					<expr_stmt><expr><name pos:line="38" pos:column="41">SQLStudentGPASelect</name> <op:operator pos:line="38" pos:column="61">=</op:operator> <lit:literal type="string" pos:line="38" pos:column="63">"Select * From student where UIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="38" pos:column="100">//write query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="41" pos:column="33">PreparedStatement</name></type> <name pos:line="41" pos:column="51">stmtForSelect</name> <init pos:line="41" pos:column="65">= <expr><call><name><name pos:line="41" pos:column="67">conn</name><op:operator pos:line="41" pos:column="71">.</op:operator><name pos:line="41" pos:column="72">prepareStatement</name></name><argument_list pos:line="41" pos:column="88">(<argument><expr><name pos:line="41" pos:column="89">SQLStudentGPASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="42" pos:column="33">stmtForSelect</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">setInt</name></name><argument_list pos:line="42" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="42" pos:column="62">//set the UIN</comment>

				<decl_stmt><decl><type><name pos:line="44" pos:column="33">ResultSet</name></type> <name pos:line="44" pos:column="43">rs</name> <init pos:line="44" pos:column="46">= <expr><call><name><name pos:line="44" pos:column="48">stmtForSelect</name><op:operator pos:line="44" pos:column="61">.</op:operator><name pos:line="44" pos:column="62">executeQuery</name></name><argument_list pos:line="44" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="44" pos:column="77">//execute the query</comment>

				<if pos:line="46" pos:column="33">if <condition pos:line="46" pos:column="36">(<expr><call><name><name pos:line="46" pos:column="37">rs</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">first</name></name><argument_list pos:line="46" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="46" pos:column="48"> <block pos:line="46" pos:column="49">{
					
					<expr_stmt><expr><call><name><name pos:line="48" pos:column="41">DBAnnotation</name><op:operator pos:line="48" pos:column="53">.</op:operator><name pos:line="48" pos:column="54">annoate</name></name><argument_list pos:line="48" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="62">"retrievedStudentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="85">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="96">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="48" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="49" pos:column="41">int</name></type> <name pos:line="49" pos:column="45">retrievedStudentUIN</name> <init pos:line="49" pos:column="65">= <expr><call><name><name pos:line="49" pos:column="67">rs</name><op:operator pos:line="49" pos:column="69">.</op:operator><name pos:line="49" pos:column="70">getInt</name></name><argument_list pos:line="49" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="77">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="49" pos:column="84">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name pos:line="51" pos:column="41">DBAnnotation</name><op:operator pos:line="51" pos:column="53">.</op:operator><name pos:line="51" pos:column="54">annoate</name></name><argument_list pos:line="51" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="51" pos:column="62">"retrievedStudentGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="85">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="96">"GPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="51" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="52" pos:column="41">double</name></type> <name pos:line="52" pos:column="48">retrievedStudentGPA</name> <init pos:line="52" pos:column="68">= <expr><call><name><name pos:line="52" pos:column="70">rs</name><op:operator pos:line="52" pos:column="72">.</op:operator><name pos:line="52" pos:column="73">getDouble</name></name><argument_list pos:line="52" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="52" pos:column="83">"GPA"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="52" pos:column="90">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name pos:line="54" pos:column="41">DBAnnotation</name><op:operator pos:line="54" pos:column="53">.</op:operator><name pos:line="54" pos:column="54">annoate</name></name><argument_list pos:line="54" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="62">"retrievedStudentLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="87">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="98">"Level"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="54" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="55" pos:column="41">int</name></type> <name pos:line="55" pos:column="45">retrievedStudentLevel</name> <init pos:line="55" pos:column="67">= <expr><call><name><name pos:line="55" pos:column="69">rs</name><op:operator pos:line="55" pos:column="71">.</op:operator><name pos:line="55" pos:column="72">getInt</name></name><argument_list pos:line="55" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="79">"Level"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="55" pos:column="88">//retrieve the values</comment>

					<comment type="line" pos:line="57" pos:column="41">//set the class variables to UIN specific </comment>
					
					<expr_stmt><expr><name><name pos:line="59" pos:column="41">this</name><op:operator pos:line="59" pos:column="45">.</op:operator><name pos:line="59" pos:column="46">UIN</name></name> <op:operator pos:line="59" pos:column="50">=</op:operator> <name pos:line="59" pos:column="52">retrievedStudentUIN</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="60" pos:column="41">this</name><op:operator pos:line="60" pos:column="45">.</op:operator><name pos:line="60" pos:column="46">GPA</name></name> <op:operator pos:line="60" pos:column="50">=</op:operator> <name pos:line="60" pos:column="52">retrievedStudentGPA</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="61" pos:column="41">this</name><op:operator pos:line="61" pos:column="45">.</op:operator><name pos:line="61" pos:column="46">level</name></name> <op:operator pos:line="61" pos:column="52">=</op:operator> <name pos:line="61" pos:column="54">retrievedStudentLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="62" pos:column="41">this</name><op:operator pos:line="62" pos:column="45">.</op:operator><name pos:line="62" pos:column="46">jobApplication</name></name> <op:operator pos:line="62" pos:column="61">=</op:operator> <op:operator pos:line="62" pos:column="63">new</op:operator> <call><name pos:line="62" pos:column="67">JobApplication</name><argument_list pos:line="62" pos:column="81">(<argument><expr><name pos:line="62" pos:column="82">retrievedStudentUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></then>

				<else pos:line="66" pos:column="33">else <block pos:line="66" pos:column="38">{

					<expr_stmt><expr><call><name><name pos:line="68" pos:column="41">System</name><op:operator pos:line="68" pos:column="47">.</op:operator><name pos:line="68" pos:column="48">out</name><op:operator pos:line="68" pos:column="51">.</op:operator><name pos:line="68" pos:column="52">println</name></name><argument_list pos:line="68" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="60">"UIN does not exist in the student table"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<throw pos:line="69" pos:column="41">throw <expr><op:operator pos:line="69" pos:column="47">new</op:operator> <call><name pos:line="69" pos:column="51">PersonDoesNotExistException</name><argument_list pos:line="69" pos:column="78">()</argument_list></call></expr>;</throw><comment type="line" pos:line="69" pos:column="81">//throw the exception</comment>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="74" pos:column="25">//catch block</comment>
			<catch pos:line="75" pos:column="25">catch <parameter_list pos:line="75" pos:column="31">(<param><decl><type><name pos:line="75" pos:column="32">SQLException</name></type> <name pos:line="75" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="76" pos:column="33">System</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">out</name><op:operator pos:line="76" pos:column="43">.</op:operator><name pos:line="76" pos:column="44">print</name></name><argument_list pos:line="76" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="50">"SQL exception in student const"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="77" pos:column="33">System</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">out</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">println</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><name pos:line="77" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">e</name><op:operator pos:line="78" pos:column="34">.</op:operator><name pos:line="78" pos:column="35">printStackTrace</name></name><argument_list pos:line="78" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		<comment type="line" pos:line="81" pos:column="17">//catch block</comment>
		<catch pos:line="82" pos:column="17">catch <parameter_list pos:line="82" pos:column="23">(<param><decl><type><name pos:line="82" pos:column="24">PersonDoesNotExistException</name></type> <name pos:line="82" pos:column="52">e</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="55">{
			<expr_stmt><expr><call><name><name pos:line="83" pos:column="25">System</name><op:operator pos:line="83" pos:column="31">.</op:operator><name pos:line="83" pos:column="32">out</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">println</name></name><argument_list pos:line="83" pos:column="43">(<argument><expr><name pos:line="83" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">e</name><op:operator pos:line="84" pos:column="26">.</op:operator><name pos:line="84" pos:column="27">printStackTrace</name></name><argument_list pos:line="84" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<throw pos:line="85" pos:column="25">throw <expr><op:operator pos:line="85" pos:column="31">new</op:operator> <call><name pos:line="85" pos:column="35">PersonDoesNotExistException</name><argument_list pos:line="85" pos:column="62">()</argument_list></call></expr>;</throw>

		}</block></catch>

		<finally pos:line="89" pos:column="17">finally <block pos:line="89" pos:column="25">{

			<comment type="line" pos:line="91" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></constructor>

	<comment type="line" pos:line="96" pos:column="9">// TODO Auto-generated constructor stub</comment>
	
	<comment type="line" pos:line="98" pos:column="9">//student construtor with name, username and dpet ID and positionID</comment>
	<constructor><specifier pos:line="99" pos:column="9">public</specifier> <name pos:line="99" pos:column="16">Student</name><parameter_list pos:line="99" pos:column="23">(<param><decl><type><name pos:line="99" pos:column="24">String</name></type> <name pos:line="99" pos:column="31">name</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="37">String</name></type> <name pos:line="99" pos:column="44">userName</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="54">int</name></type> <name pos:line="99" pos:column="58">deptID</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="66">int</name></type> <name pos:line="99" pos:column="70">positionID</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="82">{
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">super</name><argument_list pos:line="100" pos:column="22">(<argument><expr><name pos:line="100" pos:column="23">name</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="29">userName</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="39">deptID</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="47">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="101" pos:column="17">// TODO Auto-generated constructor stub</comment>
	}</block></constructor>

	<comment type="block" pos:line="104" pos:column="9">/*-------------------------GETTERS AND SETTERS START----------------------------------*/</comment>
	<function><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">double</name></type> <name pos:line="105" pos:column="23">getGPA</name><parameter_list pos:line="105" pos:column="29">()</parameter_list> <block pos:line="105" pos:column="32">{
		<return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">GPA</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="109" pos:column="9">public</specifier> <name pos:line="109" pos:column="16">void</name></type> <name pos:line="109" pos:column="21">setGPA</name><parameter_list pos:line="109" pos:column="27">(<param><decl><type><name pos:line="109" pos:column="28">double</name></type> <name pos:line="109" pos:column="35">gPA</name></decl></param>)</parameter_list> <block pos:line="109" pos:column="40">{
		<expr_stmt><expr><name pos:line="110" pos:column="17">GPA</name> <op:operator pos:line="110" pos:column="21">=</op:operator> <name pos:line="110" pos:column="23">gPA</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">int</name></type> <name pos:line="113" pos:column="20">getLevel</name><parameter_list pos:line="113" pos:column="28">()</parameter_list> <block pos:line="113" pos:column="31">{
		<return pos:line="114" pos:column="17">return <expr><name pos:line="114" pos:column="24">level</name></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="117" pos:column="9">public</specifier> <name pos:line="117" pos:column="16">void</name></type> <name pos:line="117" pos:column="21">setLevel</name><parameter_list pos:line="117" pos:column="29">(<param><decl><type><name pos:line="117" pos:column="30">int</name></type> <name pos:line="117" pos:column="34">level</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="41">{
		<expr_stmt><expr><name><name pos:line="118" pos:column="17">this</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">level</name></name> <op:operator pos:line="118" pos:column="28">=</op:operator> <name pos:line="118" pos:column="30">level</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="121" pos:column="9">/*-------------------------GETTERS AND SETTERS END----------------------------------*/</comment>
	
	<function><type><specifier pos:line="123" pos:column="9">public</specifier> <specifier pos:line="123" pos:column="16">static</specifier> <name pos:line="123" pos:column="23">boolean</name></type> <name pos:line="123" pos:column="31">addStudentToDb</name><parameter_list pos:line="123" pos:column="45">(<param><decl><type><name pos:line="123" pos:column="46">String</name></type> <name pos:line="123" pos:column="53">name</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="59">Department</name></type> <name pos:line="123" pos:column="70">dept</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="76">int</name></type> <name pos:line="123" pos:column="80">level</name></decl></param>)</parameter_list>
			<throws pos:line="124" pos:column="25">throws <argument><expr><name pos:line="124" pos:column="32">levelNotExistException</name></expr></argument></throws> <block pos:line="124" pos:column="55">{

		<decl_stmt><decl><type><name pos:line="126" pos:column="17">boolean</name></type> <name pos:line="126" pos:column="25">isAdded</name> <init pos:line="126" pos:column="33">= <expr><lit:literal type="boolean" pos:line="126" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name pos:line="128" pos:column="21">dept</name> <op:operator pos:line="128" pos:column="26">==</op:operator> <lit:literal type="null" pos:line="128" pos:column="29">null</lit:literal></expr>)</condition><then pos:line="128" pos:column="34"> <block pos:line="128" pos:column="35">{
			<throw pos:line="129" pos:column="25">throw <expr><op:operator pos:line="129" pos:column="31">new</op:operator> <call><name pos:line="129" pos:column="35">NullPointerException</name><argument_list pos:line="129" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="129" pos:column="58">//if dept is null then throw an exception</comment>
		}</block></then></if>

		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name><name pos:line="132" pos:column="21">level</name> <argument_list pos:line="132" pos:column="27">&lt; <argument><lit:literal type="number" pos:line="132" pos:column="29">0</lit:literal> <op:operator pos:line="132" pos:column="31">||</op:operator> <name pos:line="132" pos:column="34">level</name></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="132" pos:column="42">4</lit:literal></expr>)</condition><then pos:line="132" pos:column="44"> <block pos:line="132" pos:column="45">{
			<throw pos:line="133" pos:column="25">throw <expr><op:operator pos:line="133" pos:column="31">new</op:operator> <call><name pos:line="133" pos:column="35">levelNotExistException</name><argument_list pos:line="133" pos:column="57">()</argument_list></call></expr>;</throw><comment type="line" pos:line="133" pos:column="60">//throw an exception</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="136" pos:column="17">int</name></type> <name pos:line="136" pos:column="21">addedUIN</name></decl>;</decl_stmt>
		<try pos:line="137" pos:column="17">try <block pos:line="137" pos:column="21">{
			<expr_stmt><expr><name pos:line="138" pos:column="25">addedUIN</name> <op:operator pos:line="138" pos:column="34">=</op:operator> <call><name pos:line="138" pos:column="36">addIntoDatabase</name><argument_list pos:line="138" pos:column="51">(<argument><expr><name pos:line="138" pos:column="52">name</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="58">dept</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="138" pos:column="64">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="138" pos:column="67">//add into database</comment>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><name pos:line="139" pos:column="29">addedUIN</name> <op:operator pos:line="139" pos:column="38">!=</op:operator> <op:operator pos:line="139" pos:column="41">-</op:operator><lit:literal type="number" pos:line="139" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="139" pos:column="44"> <block pos:line="139" pos:column="45">{

				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">System</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">out</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">println</name></name><argument_list pos:line="141" pos:column="51">(<argument><expr><name pos:line="141" pos:column="52">addedUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">System</name><op:operator pos:line="142" pos:column="39">.</op:operator><name pos:line="142" pos:column="40">out</name><op:operator pos:line="142" pos:column="43">.</op:operator><name pos:line="142" pos:column="44">println</name></name><argument_list pos:line="142" pos:column="51">(<argument><expr><name pos:line="142" pos:column="52">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<try pos:line="144" pos:column="33">try <block pos:line="144" pos:column="37">{
					<expr_stmt><expr><name pos:line="145" pos:column="41">isAdded</name> <op:operator pos:line="145" pos:column="49">=</op:operator> <call><name pos:line="145" pos:column="51">addIntoStudentTable</name><argument_list pos:line="145" pos:column="70">(<argument><expr><name pos:line="145" pos:column="71">addedUIN</name></expr></argument>, <argument><expr><name pos:line="145" pos:column="81">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="145" pos:column="88">//add into the student table</comment>

				}</block> <catch pos:line="147" pos:column="35">catch <parameter_list pos:line="147" pos:column="41">(<param><decl><type><name pos:line="147" pos:column="42">levelNotExistException</name></type> <name pos:line="147" pos:column="65">e</name></decl></param>)</parameter_list> <block pos:line="147" pos:column="68">{
					<comment type="line" pos:line="148" pos:column="41">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name pos:line="149" pos:column="41">e</name><op:operator pos:line="149" pos:column="42">.</op:operator><name pos:line="149" pos:column="43">printStackTrace</name></name><argument_list pos:line="149" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>

				<decl_stmt><decl><type><name pos:line="152" pos:column="33">Connection</name></type> <name pos:line="152" pos:column="44">conn</name> <init pos:line="152" pos:column="49">= <expr><call><name><name pos:line="152" pos:column="51">Database</name><op:operator pos:line="152" pos:column="59">.</op:operator><name pos:line="152" pos:column="60">getConnection</name></name><argument_list pos:line="152" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="153" pos:column="33">Database</name><op:operator pos:line="153" pos:column="41">.</op:operator><name pos:line="153" pos:column="42">commitTransaction</name></name><argument_list pos:line="153" pos:column="59">(<argument><expr><name pos:line="153" pos:column="60">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="153" pos:column="66">//commit transaction</comment>

			}</block></then></if>
		}</block> <catch pos:line="156" pos:column="19">catch <parameter_list pos:line="156" pos:column="25">(<param><decl><type><name pos:line="156" pos:column="26">loginDetailsnotAdded</name></type> <name pos:line="156" pos:column="47">e1</name></decl></param>)</parameter_list> <block pos:line="156" pos:column="51">{
			<comment type="line" pos:line="157" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="158" pos:column="25">e1</name><op:operator pos:line="158" pos:column="27">.</op:operator><name pos:line="158" pos:column="28">printStackTrace</name></name><argument_list pos:line="158" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>

		<return pos:line="161" pos:column="17">return <expr><name pos:line="161" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>
	
	<comment type="block" pos:line="165" pos:column="9">/*add into the student table with the UIN and level passed
	 * 
	 * the return type is boolean 
	 * 
	 * it throws an exception
	 * */</comment>
	<function><type><specifier pos:line="171" pos:column="9">private</specifier> <specifier pos:line="171" pos:column="17">static</specifier> <name pos:line="171" pos:column="24">boolean</name></type> <name pos:line="171" pos:column="32">addIntoStudentTable</name><parameter_list pos:line="171" pos:column="51">(<param><decl><type><name pos:line="171" pos:column="52">int</name></type> <name pos:line="171" pos:column="56">UIN</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="61">int</name></type> <name pos:line="171" pos:column="65">level</name></decl></param>)</parameter_list> <throws pos:line="171" pos:column="72">throws <argument><expr><name pos:line="171" pos:column="79">levelNotExistException</name></expr></argument></throws> <block pos:line="171" pos:column="102">{

		<decl_stmt><decl><type><name pos:line="173" pos:column="17">boolean</name></type> <name pos:line="173" pos:column="25">isAdded</name> <init pos:line="173" pos:column="33">= <expr><lit:literal type="boolean" pos:line="173" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="174" pos:column="17">float</name></type> <name pos:line="174" pos:column="23">gpa</name><init pos:line="174" pos:column="26">=<expr><lit:literal type="number" pos:line="174" pos:column="27">4</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="176" pos:column="17">if <condition pos:line="176" pos:column="20">(<expr><name pos:line="176" pos:column="21">level</name> <op:operator pos:line="176" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="176" pos:column="29">3</lit:literal> <op:operator pos:line="176" pos:column="31">||</op:operator> <name pos:line="176" pos:column="34">level</name> <op:operator pos:line="176" pos:column="40">&lt;</op:operator> <lit:literal type="number" pos:line="176" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="176" pos:column="44"> <block pos:line="176" pos:column="45">{
			<throw pos:line="177" pos:column="25">throw <expr><op:operator pos:line="177" pos:column="31">new</op:operator> <call><name pos:line="177" pos:column="35">levelNotExistException</name><argument_list pos:line="177" pos:column="57">()</argument_list></call></expr>;</throw><comment type="line" pos:line="177" pos:column="60">//level not exists exception</comment>
		}</block></then></if>

		<try pos:line="180" pos:column="17">try <block pos:line="180" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="181" pos:column="25">Connection</name></type> <name pos:line="181" pos:column="36">conn</name> <init pos:line="181" pos:column="41">= <expr><call><name><name pos:line="181" pos:column="43">Database</name><op:operator pos:line="181" pos:column="51">.</op:operator><name pos:line="181" pos:column="52">getConnection</name></name><argument_list pos:line="181" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="181" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="182" pos:column="25">String</name></type> <name pos:line="182" pos:column="32">SQLPeopleSelect</name> <init pos:line="182" pos:column="48">= <expr><lit:literal type="string" pos:line="182" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="184" pos:column="25">try <block pos:line="184" pos:column="29">{

				<expr_stmt><expr><name pos:line="186" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="186" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="186" pos:column="51">"Select UIN From student where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="187" pos:column="33">PreparedStatement</name></type> <name pos:line="187" pos:column="51">stmt</name> <init pos:line="187" pos:column="56">= <expr><call><name><name pos:line="187" pos:column="58">conn</name><op:operator pos:line="187" pos:column="62">.</op:operator><name pos:line="187" pos:column="63">prepareStatement</name></name><argument_list pos:line="187" pos:column="79">(<argument><expr><name pos:line="187" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="188" pos:column="33">stmt</name><op:operator pos:line="188" pos:column="37">.</op:operator><name pos:line="188" pos:column="38">setInt</name></name><argument_list pos:line="188" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="188" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="189" pos:column="33">ResultSet</name></type> <name pos:line="189" pos:column="43">rs</name> <init pos:line="189" pos:column="46">= <expr><call><name><name pos:line="189" pos:column="48">stmt</name><op:operator pos:line="189" pos:column="52">.</op:operator><name pos:line="189" pos:column="53">executeQuery</name></name><argument_list pos:line="189" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="189" pos:column="68">//execute the query</comment>

				<if pos:line="191" pos:column="33">if <condition pos:line="191" pos:column="36">(<expr><call><name><name pos:line="191" pos:column="37">rs</name><op:operator pos:line="191" pos:column="39">.</op:operator><name pos:line="191" pos:column="40">first</name></name><argument_list pos:line="191" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="191" pos:column="48"> <block pos:line="191" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="192" pos:column="41">System</name><op:operator pos:line="192" pos:column="47">.</op:operator><name pos:line="192" pos:column="48">out</name><op:operator pos:line="192" pos:column="51">.</op:operator><name pos:line="192" pos:column="52">println</name></name><argument_list pos:line="192" pos:column="59">(<argument><expr><name pos:line="192" pos:column="60">UIN</name> <op:operator pos:line="192" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="192" pos:column="66">"already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>

				<else pos:line="195" pos:column="33">else <block pos:line="195" pos:column="38">{
					<comment type="line" pos:line="196" pos:column="41">//insert new data into the student table</comment>
					<expr_stmt><expr><call><name><name pos:line="197" pos:column="41">System</name><op:operator pos:line="197" pos:column="47">.</op:operator><name pos:line="197" pos:column="48">out</name><op:operator pos:line="197" pos:column="51">.</op:operator><name pos:line="197" pos:column="52">println</name></name><argument_list pos:line="197" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="60">"Adding new data into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="198" pos:column="41">String</name></type> <name pos:line="198" pos:column="48">SQLPeopleInsert</name> <init pos:line="198" pos:column="64">= <expr><lit:literal type="string" pos:line="198" pos:column="66">"Insert into student (UIN, GPA, Level) Values (?,?,?);"</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="199" pos:column="41">stmt</name> <op:operator pos:line="199" pos:column="46">=</op:operator> <call><name><name pos:line="199" pos:column="48">conn</name><op:operator pos:line="199" pos:column="52">.</op:operator><name pos:line="199" pos:column="53">prepareStatement</name></name><argument_list pos:line="199" pos:column="69">(<argument><expr><name pos:line="199" pos:column="70">SQLPeopleInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="200" pos:column="41">stmt</name><op:operator pos:line="200" pos:column="45">.</op:operator><name pos:line="200" pos:column="46">setInt</name></name><argument_list pos:line="200" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="200" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="200" pos:column="61">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="201" pos:column="41">stmt</name><op:operator pos:line="201" pos:column="45">.</op:operator><name pos:line="201" pos:column="46">setFloat</name></name><argument_list pos:line="201" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="201" pos:column="55">2</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="58">gpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="201" pos:column="63">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="202" pos:column="41">stmt</name><op:operator pos:line="202" pos:column="45">.</op:operator><name pos:line="202" pos:column="46">setInt</name></name><argument_list pos:line="202" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="202" pos:column="53">3</lit:literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="56">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="202" pos:column="63">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="203" pos:column="41">System</name><op:operator pos:line="203" pos:column="47">.</op:operator><name pos:line="203" pos:column="48">out</name><op:operator pos:line="203" pos:column="51">.</op:operator><name pos:line="203" pos:column="52">println</name></name><argument_list pos:line="203" pos:column="59">(<argument><expr><name pos:line="203" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="204" pos:column="41">int</name></type> <name pos:line="204" pos:column="45">i</name> <init pos:line="204" pos:column="47">= <expr><call><name><name pos:line="204" pos:column="49">stmt</name><op:operator pos:line="204" pos:column="53">.</op:operator><name pos:line="204" pos:column="54">executeUpdate</name></name><argument_list pos:line="204" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="204" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="206" pos:column="41">DBAnnotation</name><op:operator pos:line="206" pos:column="53">.</op:operator><name pos:line="206" pos:column="54">annoate</name></name><argument_list pos:line="206" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="69">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="206" pos:column="80">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="206" pos:column="87">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="207" pos:column="41">DBAnnotation</name><op:operator pos:line="207" pos:column="53">.</op:operator><name pos:line="207" pos:column="54">annoate</name></name><argument_list pos:line="207" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="62">"gpa"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="69">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="80">"GPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="207" pos:column="87">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="208" pos:column="41">DBAnnotation</name><op:operator pos:line="208" pos:column="53">.</op:operator><name pos:line="208" pos:column="54">annoate</name></name><argument_list pos:line="208" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="62">"level"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="71">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="82">"Level"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="208" pos:column="91">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="210" pos:column="41">System</name><op:operator pos:line="210" pos:column="47">.</op:operator><name pos:line="210" pos:column="48">out</name><op:operator pos:line="210" pos:column="51">.</op:operator><name pos:line="210" pos:column="52">println</name></name><argument_list pos:line="210" pos:column="59">(<argument><expr><name pos:line="210" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="211" pos:column="41">System</name><op:operator pos:line="211" pos:column="47">.</op:operator><name pos:line="211" pos:column="48">out</name><op:operator pos:line="211" pos:column="51">.</op:operator><name pos:line="211" pos:column="52">println</name></name><argument_list pos:line="211" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="211" pos:column="60">"Inserted"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="212" pos:column="41">isAdded</name> <op:operator pos:line="212" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="212" pos:column="51">true</lit:literal></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="217" pos:column="25">//catch block </comment>
			<catch pos:line="218" pos:column="25">catch <parameter_list pos:line="218" pos:column="31">(<param><decl><type><name pos:line="218" pos:column="32">SQLException</name></type> <name pos:line="218" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="218" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">System</name><op:operator pos:line="219" pos:column="39">.</op:operator><name pos:line="219" pos:column="40">out</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">println</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="220" pos:column="33">e</name><op:operator pos:line="220" pos:column="34">.</op:operator><name pos:line="220" pos:column="35">printStackTrace</name></name><argument_list pos:line="220" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">System</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">out</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">println</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="225" pos:column="17">//catch block</comment>
		<catch pos:line="226" pos:column="17">catch <parameter_list pos:line="226" pos:column="23">(<param><decl><type><name pos:line="226" pos:column="24">Exception</name></type> <name pos:line="226" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="226" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="227" pos:column="25">System</name><op:operator pos:line="227" pos:column="31">.</op:operator><name pos:line="227" pos:column="32">out</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">println</name></name><argument_list pos:line="227" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="227" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="228" pos:column="25">e</name><op:operator pos:line="228" pos:column="26">.</op:operator><name pos:line="228" pos:column="27">printStackTrace</name></name><argument_list pos:line="228" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="229" pos:column="25">System</name><op:operator pos:line="229" pos:column="31">.</op:operator><name pos:line="229" pos:column="32">out</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">println</name></name><argument_list pos:line="229" pos:column="43">(<argument><expr><name pos:line="229" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="232" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="234" pos:column="17">finally <block pos:line="234" pos:column="25">{

			<comment type="line" pos:line="236" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>
		<return pos:line="238" pos:column="17">return <expr><name pos:line="238" pos:column="24">isAdded</name></expr>;</return>

	}</block></function>
	<comment type="line" pos:line="241" pos:column="9">//delete student function</comment>
	<function><type><specifier pos:line="242" pos:column="9">public</specifier> <specifier pos:line="242" pos:column="16">static</specifier> <name pos:line="242" pos:column="23">void</name></type> <name pos:line="242" pos:column="28">deleteStudent</name><parameter_list pos:line="242" pos:column="41">(<param><decl><type><name pos:line="242" pos:column="42">int</name></type> <name pos:line="242" pos:column="46">UIN</name></decl></param>)</parameter_list> <block pos:line="242" pos:column="51">{
	}</block></function>

	<comment type="line" pos:line="245" pos:column="9">//delete student function</comment>
	<function><type><specifier pos:line="246" pos:column="9">public</specifier> <specifier pos:line="246" pos:column="16">static</specifier> <name pos:line="246" pos:column="23">void</name></type> <name pos:line="246" pos:column="28">deleteStudent</name><parameter_list pos:line="246" pos:column="41">(<param><decl><type><name pos:line="246" pos:column="42">String</name></type> <name pos:line="246" pos:column="49">userName</name></decl></param>)</parameter_list> <block pos:line="246" pos:column="59">{
	}</block></function>

	<comment type="line" pos:line="249" pos:column="9">//check if student with the UIN passed</comment>
	<function><type><specifier pos:line="250" pos:column="9">public</specifier> <specifier pos:line="250" pos:column="16">static</specifier> <name pos:line="250" pos:column="23">boolean</name></type> <name pos:line="250" pos:column="31">checkIfStudent</name><parameter_list pos:line="250" pos:column="45">(<param><decl><type><name pos:line="250" pos:column="46">int</name></type> <name pos:line="250" pos:column="50">UIN</name></decl></param>)</parameter_list> <block pos:line="250" pos:column="55">{

		<try pos:line="252" pos:column="17">try <block pos:line="252" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="253" pos:column="25">Connection</name></type> <name pos:line="253" pos:column="36">conn</name> <init pos:line="253" pos:column="41">= <expr><call><name><name pos:line="253" pos:column="43">Database</name><op:operator pos:line="253" pos:column="51">.</op:operator><name pos:line="253" pos:column="52">getConnection</name></name><argument_list pos:line="253" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="253" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="254" pos:column="25">String</name></type> <name pos:line="254" pos:column="32">SQLPeopleSelect</name> <init pos:line="254" pos:column="48">= <expr><lit:literal type="string" pos:line="254" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="255" pos:column="25">try <block pos:line="255" pos:column="29">{

				<if pos:line="257" pos:column="33">if <condition pos:line="257" pos:column="36">(<expr><name pos:line="257" pos:column="37">conn</name> <op:operator pos:line="257" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="257" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="257" pos:column="50"> <block pos:line="257" pos:column="51">{

					<expr_stmt><expr><name pos:line="259" pos:column="41">SQLPeopleSelect</name> <op:operator pos:line="259" pos:column="57">=</op:operator> <lit:literal type="string" pos:line="259" pos:column="59">"Select PositionID From People where UIN=?;"</lit:literal></expr>;</expr_stmt><comment type="line" pos:line="259" pos:column="104">//write query</comment>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="262" pos:column="33">PreparedStatement</name></type> <name pos:line="262" pos:column="51">stmtForSelect</name> <init pos:line="262" pos:column="65">= <expr><call><name><name pos:line="262" pos:column="67">conn</name><op:operator pos:line="262" pos:column="71">.</op:operator><name pos:line="262" pos:column="72">prepareStatement</name></name><argument_list pos:line="262" pos:column="88">(<argument><expr><name pos:line="262" pos:column="89">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">stmtForSelect</name><op:operator pos:line="263" pos:column="46">.</op:operator><name pos:line="263" pos:column="47">setInt</name></name><argument_list pos:line="263" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="263" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="263" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="263" pos:column="62">//set the values</comment>

				<decl_stmt><decl><type><name pos:line="265" pos:column="33">ResultSet</name></type> <name pos:line="265" pos:column="43">rs</name> <init pos:line="265" pos:column="46">= <expr><call><name><name pos:line="265" pos:column="48">stmtForSelect</name><op:operator pos:line="265" pos:column="61">.</op:operator><name pos:line="265" pos:column="62">executeQuery</name></name><argument_list pos:line="265" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="265" pos:column="77">//execute the query</comment>

				<if pos:line="267" pos:column="33">if <condition pos:line="267" pos:column="36">(<expr><call><name><name pos:line="267" pos:column="37">rs</name><op:operator pos:line="267" pos:column="39">.</op:operator><name pos:line="267" pos:column="40">first</name></name><argument_list pos:line="267" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="267" pos:column="48"> <block pos:line="267" pos:column="49">{
					
					<expr_stmt><expr><call><name><name pos:line="269" pos:column="41">DBAnnotation</name><op:operator pos:line="269" pos:column="53">.</op:operator><name pos:line="269" pos:column="54">annoate</name></name><argument_list pos:line="269" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="62">"peopleRetrievedPositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="91">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="101">"PositionID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="269" pos:column="115">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="270" pos:column="41">int</name></type> <name pos:line="270" pos:column="45">peopleRetrievedPositionID</name> <init pos:line="270" pos:column="71">= <expr><call><name><name pos:line="270" pos:column="73">rs</name><op:operator pos:line="270" pos:column="75">.</op:operator><name pos:line="270" pos:column="76">getInt</name></name><argument_list pos:line="270" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="270" pos:column="83">"PositionID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="270" pos:column="97">//retrieve the values</comment>
					
					<expr_stmt><expr><call><name><name pos:line="272" pos:column="41">System</name><op:operator pos:line="272" pos:column="47">.</op:operator><name pos:line="272" pos:column="48">out</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">println</name></name><argument_list pos:line="272" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="272" pos:column="60">"UIN:"</lit:literal> <op:operator pos:line="272" pos:column="67">+</op:operator> <name pos:line="272" pos:column="69">UIN</name> <op:operator pos:line="272" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="272" pos:column="75">" Position ID:"</lit:literal><op:operator pos:line="272" pos:column="90">+</op:operator> <name pos:line="272" pos:column="92">peopleRetrievedPositionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line" pos:line="274" pos:column="41">//check the position ID</comment>
					<if pos:line="275" pos:column="41">if <condition pos:line="275" pos:column="44">(<expr><name pos:line="275" pos:column="45">peopleRetrievedPositionID</name> <op:operator pos:line="275" pos:column="71">==</op:operator> <lit:literal type="number" pos:line="275" pos:column="74">3</lit:literal> <op:operator pos:line="275" pos:column="76">||</op:operator> <name pos:line="275" pos:column="79">peopleRetrievedPositionID</name> <op:operator pos:line="275" pos:column="105">==</op:operator> <lit:literal type="number" pos:line="275" pos:column="108">4</lit:literal></expr>)</condition><then pos:line="275" pos:column="110"> <block pos:line="275" pos:column="111">{
						<expr_stmt><expr><call><name><name pos:line="276" pos:column="49">System</name><op:operator pos:line="276" pos:column="55">.</op:operator><name pos:line="276" pos:column="56">out</name><op:operator pos:line="276" pos:column="59">.</op:operator><name pos:line="276" pos:column="60">println</name></name><argument_list pos:line="276" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="68">"Student UIN exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="277" pos:column="49">return <expr><lit:literal type="boolean" pos:line="277" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then> <else pos:line="278" pos:column="43">else <block pos:line="278" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="279" pos:column="49">System</name><op:operator pos:line="279" pos:column="55">.</op:operator><name pos:line="279" pos:column="56">out</name><op:operator pos:line="279" pos:column="59">.</op:operator><name pos:line="279" pos:column="60">println</name></name><argument_list pos:line="279" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="68">"UIN exists, but it is not a student"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="280" pos:column="49">return <expr><lit:literal type="boolean" pos:line="280" pos:column="56">false</lit:literal></expr>;</return>

					}</block></else></if>

				}</block></then>

				<else pos:line="286" pos:column="33">else <block pos:line="286" pos:column="38">{

					<expr_stmt><expr><call><name><name pos:line="288" pos:column="41">System</name><op:operator pos:line="288" pos:column="47">.</op:operator><name pos:line="288" pos:column="48">out</name><op:operator pos:line="288" pos:column="51">.</op:operator><name pos:line="288" pos:column="52">println</name></name><argument_list pos:line="288" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="60">"UIN does not exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="289" pos:column="41">return <expr><lit:literal type="boolean" pos:line="289" pos:column="48">false</lit:literal></expr>;</return>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="294" pos:column="25">//catch block</comment>
			<catch pos:line="295" pos:column="25">catch <parameter_list pos:line="295" pos:column="31">(<param><decl><type><name pos:line="295" pos:column="32">SQLException</name></type> <name pos:line="295" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="295" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="296" pos:column="33">e</name><op:operator pos:line="296" pos:column="34">.</op:operator><name pos:line="296" pos:column="35">printStackTrace</name></name><argument_list pos:line="296" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="297" pos:column="33">System</name><op:operator pos:line="297" pos:column="39">.</op:operator><name pos:line="297" pos:column="40">out</name><op:operator pos:line="297" pos:column="43">.</op:operator><name pos:line="297" pos:column="44">println</name></name><argument_list pos:line="297" pos:column="51">(<argument><expr><name pos:line="297" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>


		}</block>
		<comment type="line" pos:line="303" pos:column="17">//catch block</comment>
		<catch pos:line="304" pos:column="17">catch <parameter_list pos:line="304" pos:column="23">(<param><decl><type><name pos:line="304" pos:column="24">Exception</name></type> <name pos:line="304" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="304" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="305" pos:column="25">System</name><op:operator pos:line="305" pos:column="31">.</op:operator><name pos:line="305" pos:column="32">out</name><op:operator pos:line="305" pos:column="35">.</op:operator><name pos:line="305" pos:column="36">println</name></name><argument_list pos:line="305" pos:column="43">(<argument><expr><name pos:line="305" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="306" pos:column="25">e</name><op:operator pos:line="306" pos:column="26">.</op:operator><name pos:line="306" pos:column="27">printStackTrace</name></name><argument_list pos:line="306" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="309" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="311" pos:column="17">finally <block pos:line="311" pos:column="25">{

			<comment type="line" pos:line="313" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="316" pos:column="17">return <expr><lit:literal type="boolean" pos:line="316" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>

	<comment type="line" pos:line="319" pos:column="9">//update GPA for the UIN with the new GPA</comment>
	<function><type><specifier pos:line="320" pos:column="9">public</specifier> <specifier pos:line="320" pos:column="16">static</specifier> <name pos:line="320" pos:column="23">boolean</name></type> <name pos:line="320" pos:column="31">updateGPA</name><parameter_list pos:line="320" pos:column="40">(<param><decl><type><name pos:line="320" pos:column="41">int</name></type> <name pos:line="320" pos:column="45">UIN</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="50">double</name></type> <name pos:line="320" pos:column="57">newGPA</name></decl></param>)</parameter_list> <throws pos:line="320" pos:column="65">throws <argument><expr><name pos:line="320" pos:column="72">GPAnotValidException</name></expr></argument></throws> <block pos:line="320" pos:column="93">{

		<comment type="line" pos:line="322" pos:column="17">// if(level&gt;3 || level&lt;1){</comment>
		<comment type="line" pos:line="323" pos:column="17">// throw new levelNotExistException();</comment>
		<comment type="line" pos:line="324" pos:column="17">// }</comment>
		<decl_stmt><decl><type><name pos:line="325" pos:column="17">boolean</name></type> <name pos:line="325" pos:column="25">updateGPA</name> <init pos:line="325" pos:column="35">= <expr><lit:literal type="boolean" pos:line="325" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<if pos:line="327" pos:column="17">if <condition pos:line="327" pos:column="20">(<expr><name pos:line="327" pos:column="21">newGPA</name> <op:operator pos:line="327" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="327" pos:column="30">4.00</lit:literal> <op:operator pos:line="327" pos:column="35">||</op:operator> <name pos:line="327" pos:column="38">newGPA</name> <op:operator pos:line="327" pos:column="45">&lt;</op:operator> <lit:literal type="number" pos:line="327" pos:column="47">1.0</lit:literal></expr>)</condition><then pos:line="327" pos:column="51">

			<throw pos:line="329" pos:column="25">throw <expr><op:operator pos:line="329" pos:column="31">new</op:operator> <call><name pos:line="329" pos:column="35">GPAnotValidException</name><argument_list pos:line="329" pos:column="55">()</argument_list></call></expr>;</throw></then></if><comment type="line" pos:line="329" pos:column="58">//throw an exception</comment>

		<try pos:line="331" pos:column="17">try <block pos:line="331" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="332" pos:column="25">Connection</name></type> <name pos:line="332" pos:column="36">conn</name> <init pos:line="332" pos:column="41">= <expr><call><name><name pos:line="332" pos:column="43">Database</name><op:operator pos:line="332" pos:column="51">.</op:operator><name pos:line="332" pos:column="52">getConnection</name></name><argument_list pos:line="332" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="332" pos:column="68">//get the connection</comment>

			<try pos:line="334" pos:column="25">try <block pos:line="334" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="336" pos:column="33">boolean</name></type> <name pos:line="336" pos:column="41">ifExisting</name> <init pos:line="336" pos:column="52">= <expr><call><name pos:line="336" pos:column="54">updateGPACheck</name><argument_list pos:line="336" pos:column="68">(<argument><expr><name pos:line="336" pos:column="69">UIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="336" pos:column="74">//check if the UIN exists</comment>

				<if pos:line="338" pos:column="33">if <condition pos:line="338" pos:column="36">(<expr><name pos:line="338" pos:column="37">ifExisting</name></expr>)</condition><then pos:line="338" pos:column="48"> <block pos:line="338" pos:column="49">{

					<expr_stmt><expr><call><name><name pos:line="340" pos:column="41">System</name><op:operator pos:line="340" pos:column="47">.</op:operator><name pos:line="340" pos:column="48">out</name><op:operator pos:line="340" pos:column="51">.</op:operator><name pos:line="340" pos:column="52">println</name></name><argument_list pos:line="340" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="340" pos:column="60">"Updating GPA into the database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="341" pos:column="41">String</name></type> <name pos:line="341" pos:column="48">SQLupdateGPA</name> <init pos:line="341" pos:column="61">= <expr><lit:literal type="string" pos:line="341" pos:column="63">"UPDATE student SET GPA=? where UIN=?;"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="342" pos:column="41">PreparedStatement</name></type> <name pos:line="342" pos:column="59">stmt</name> <init pos:line="342" pos:column="64">= <expr><call><name><name pos:line="342" pos:column="66">conn</name><op:operator pos:line="342" pos:column="70">.</op:operator><name pos:line="342" pos:column="71">prepareStatement</name></name><argument_list pos:line="342" pos:column="87">(<argument><expr><name pos:line="342" pos:column="88">SQLupdateGPA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="343" pos:column="41">stmt</name><op:operator pos:line="343" pos:column="45">.</op:operator><name pos:line="343" pos:column="46">setDouble</name></name><argument_list pos:line="343" pos:column="55">(<argument><expr><lit:literal type="number" pos:line="343" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="343" pos:column="59">newGPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="343" pos:column="67">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="344" pos:column="41">stmt</name><op:operator pos:line="344" pos:column="45">.</op:operator><name pos:line="344" pos:column="46">setInt</name></name><argument_list pos:line="344" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="344" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="344" pos:column="56">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="344" pos:column="61">//set the values</comment>
					<expr_stmt><expr><call><name><name pos:line="345" pos:column="41">System</name><op:operator pos:line="345" pos:column="47">.</op:operator><name pos:line="345" pos:column="48">out</name><op:operator pos:line="345" pos:column="51">.</op:operator><name pos:line="345" pos:column="52">println</name></name><argument_list pos:line="345" pos:column="59">(<argument><expr><name pos:line="345" pos:column="60">stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="346" pos:column="41">int</name></type> <name pos:line="346" pos:column="45">i</name> <init pos:line="346" pos:column="47">= <expr><call><name><name pos:line="346" pos:column="49">stmt</name><op:operator pos:line="346" pos:column="53">.</op:operator><name pos:line="346" pos:column="54">executeUpdate</name></name><argument_list pos:line="346" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="346" pos:column="70">//execute the query</comment>
					
					<expr_stmt><expr><call><name><name pos:line="348" pos:column="41">DBAnnotation</name><op:operator pos:line="348" pos:column="53">.</op:operator><name pos:line="348" pos:column="54">annoate</name></name><argument_list pos:line="348" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="62">"newGPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="348" pos:column="72">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="348" pos:column="83">"GPA"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="348" pos:column="90">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="349" pos:column="41">DBAnnotation</name><op:operator pos:line="349" pos:column="53">.</op:operator><name pos:line="349" pos:column="54">annoate</name></name><argument_list pos:line="349" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="349" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="349" pos:column="69">"student"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="349" pos:column="80">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="349" pos:column="87">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name><name pos:line="351" pos:column="41">System</name><op:operator pos:line="351" pos:column="47">.</op:operator><name pos:line="351" pos:column="48">out</name><op:operator pos:line="351" pos:column="51">.</op:operator><name pos:line="351" pos:column="52">println</name></name><argument_list pos:line="351" pos:column="59">(<argument><expr><name pos:line="351" pos:column="60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="352" pos:column="41">System</name><op:operator pos:line="352" pos:column="47">.</op:operator><name pos:line="352" pos:column="48">out</name><op:operator pos:line="352" pos:column="51">.</op:operator><name pos:line="352" pos:column="52">println</name></name><argument_list pos:line="352" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="352" pos:column="60">"Updated"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="353" pos:column="41">updateGPA</name> <op:operator pos:line="353" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="353" pos:column="53">true</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="355" pos:column="41">// Connection conn=Database.getConnection();</comment>
					<expr_stmt><expr><call><name><name pos:line="356" pos:column="41">Database</name><op:operator pos:line="356" pos:column="49">.</op:operator><name pos:line="356" pos:column="50">commitTransaction</name></name><argument_list pos:line="356" pos:column="67">(<argument><expr><name pos:line="356" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="356" pos:column="74">//commit the transaction</comment>

				}</block></then>

				<else pos:line="360" pos:column="33">else <block pos:line="360" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="361" pos:column="41">System</name><op:operator pos:line="361" pos:column="47">.</op:operator><name pos:line="361" pos:column="48">out</name><op:operator pos:line="361" pos:column="51">.</op:operator><name pos:line="361" pos:column="52">println</name></name><argument_list pos:line="361" pos:column="59">(<argument><expr><name pos:line="361" pos:column="60">UIN</name> <op:operator pos:line="361" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="361" pos:column="66">"already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="366" pos:column="25">//catch block</comment>
			<catch pos:line="367" pos:column="25">catch <parameter_list pos:line="367" pos:column="31">(<param><decl><type><name pos:line="367" pos:column="32">SQLException</name></type> <name pos:line="367" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="367" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="368" pos:column="33">System</name><op:operator pos:line="368" pos:column="39">.</op:operator><name pos:line="368" pos:column="40">out</name><op:operator pos:line="368" pos:column="43">.</op:operator><name pos:line="368" pos:column="44">println</name></name><argument_list pos:line="368" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="368" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="369" pos:column="33">e</name><op:operator pos:line="369" pos:column="34">.</op:operator><name pos:line="369" pos:column="35">printStackTrace</name></name><argument_list pos:line="369" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="370" pos:column="33">System</name><op:operator pos:line="370" pos:column="39">.</op:operator><name pos:line="370" pos:column="40">out</name><op:operator pos:line="370" pos:column="43">.</op:operator><name pos:line="370" pos:column="44">println</name></name><argument_list pos:line="370" pos:column="51">(<argument><expr><name pos:line="370" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="374" pos:column="17">//catch block</comment>
		<catch pos:line="375" pos:column="17">catch <parameter_list pos:line="375" pos:column="23">(<param><decl><type><name pos:line="375" pos:column="24">Exception</name></type> <name pos:line="375" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="375" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="376" pos:column="25">System</name><op:operator pos:line="376" pos:column="31">.</op:operator><name pos:line="376" pos:column="32">out</name><op:operator pos:line="376" pos:column="35">.</op:operator><name pos:line="376" pos:column="36">println</name></name><argument_list pos:line="376" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="376" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="377" pos:column="25">e</name><op:operator pos:line="377" pos:column="26">.</op:operator><name pos:line="377" pos:column="27">printStackTrace</name></name><argument_list pos:line="377" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="378" pos:column="25">System</name><op:operator pos:line="378" pos:column="31">.</op:operator><name pos:line="378" pos:column="32">out</name><op:operator pos:line="378" pos:column="35">.</op:operator><name pos:line="378" pos:column="36">println</name></name><argument_list pos:line="378" pos:column="43">(<argument><expr><name pos:line="378" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		<comment type="block" pos:line="381" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
												here the finally block does not contain any general statements*/</comment>
		<finally pos:line="383" pos:column="17">finally <block pos:line="383" pos:column="25">{

			<comment type="line" pos:line="385" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="388" pos:column="17">return <expr><name pos:line="388" pos:column="24">updateGPA</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="391" pos:column="9">/*this function checks that if the UIN exists in the student Table*/</comment>
	<function><type><specifier pos:line="392" pos:column="9">public</specifier> <specifier pos:line="392" pos:column="16">static</specifier> <name pos:line="392" pos:column="23">boolean</name></type> <name pos:line="392" pos:column="31">updateGPACheck</name><parameter_list pos:line="392" pos:column="45">(<param><decl><type><name pos:line="392" pos:column="46">int</name></type> <name pos:line="392" pos:column="50">UIN</name></decl></param>)</parameter_list> <block pos:line="392" pos:column="55">{

		<decl_stmt><decl><type><name pos:line="394" pos:column="17">boolean</name></type> <name pos:line="394" pos:column="25">isExisting</name> <init pos:line="394" pos:column="36">= <expr><lit:literal type="boolean" pos:line="394" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="396" pos:column="17">try <block pos:line="396" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="397" pos:column="25">Connection</name></type> <name pos:line="397" pos:column="36">conn</name> <init pos:line="397" pos:column="41">= <expr><call><name><name pos:line="397" pos:column="43">Database</name><op:operator pos:line="397" pos:column="51">.</op:operator><name pos:line="397" pos:column="52">getConnection</name></name><argument_list pos:line="397" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="397" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="398" pos:column="25">String</name></type> <name pos:line="398" pos:column="32">SQLPeopleSelect</name> <init pos:line="398" pos:column="48">= <expr><lit:literal type="string" pos:line="398" pos:column="50">""</lit:literal></expr></init></decl>;</decl_stmt>

			<try pos:line="400" pos:column="25">try <block pos:line="400" pos:column="29">{

				<expr_stmt><expr><name pos:line="402" pos:column="33">SQLPeopleSelect</name> <op:operator pos:line="402" pos:column="49">=</op:operator> <lit:literal type="string" pos:line="402" pos:column="51">"Select UIN From student where UIN=?;"</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="403" pos:column="33">PreparedStatement</name></type> <name pos:line="403" pos:column="51">stmt</name> <init pos:line="403" pos:column="56">= <expr><call><name><name pos:line="403" pos:column="58">conn</name><op:operator pos:line="403" pos:column="62">.</op:operator><name pos:line="403" pos:column="63">prepareStatement</name></name><argument_list pos:line="403" pos:column="79">(<argument><expr><name pos:line="403" pos:column="80">SQLPeopleSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="404" pos:column="33">stmt</name><op:operator pos:line="404" pos:column="37">.</op:operator><name pos:line="404" pos:column="38">setInt</name></name><argument_list pos:line="404" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="404" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="404" pos:column="48">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="404" pos:column="53">//set the UIN</comment>
				<decl_stmt><decl><type><name pos:line="405" pos:column="33">ResultSet</name></type> <name pos:line="405" pos:column="43">rs</name> <init pos:line="405" pos:column="46">= <expr><call><name><name pos:line="405" pos:column="48">stmt</name><op:operator pos:line="405" pos:column="52">.</op:operator><name pos:line="405" pos:column="53">executeQuery</name></name><argument_list pos:line="405" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="405" pos:column="68">//query fire</comment>

				<if pos:line="407" pos:column="33">if <condition pos:line="407" pos:column="36">(<expr><call><name><name pos:line="407" pos:column="37">rs</name><op:operator pos:line="407" pos:column="39">.</op:operator><name pos:line="407" pos:column="40">first</name></name><argument_list pos:line="407" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="407" pos:column="48"> <block pos:line="407" pos:column="49">{
					<comment type="line" pos:line="408" pos:column="41">//if exists then return true</comment>
					<return pos:line="409" pos:column="41">return <expr><lit:literal type="boolean" pos:line="409" pos:column="48">true</lit:literal></expr>;</return>

				}</block></then>

				<else pos:line="413" pos:column="33">else <block pos:line="413" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="414" pos:column="41">System</name><op:operator pos:line="414" pos:column="47">.</op:operator><name pos:line="414" pos:column="48">out</name><op:operator pos:line="414" pos:column="51">.</op:operator><name pos:line="414" pos:column="52">println</name></name><argument_list pos:line="414" pos:column="59">(<argument><expr><name pos:line="414" pos:column="60">UIN</name> <op:operator pos:line="414" pos:column="64">+</op:operator> <lit:literal type="string" pos:line="414" pos:column="66">"already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>

			}</block>
			<comment type="line" pos:line="419" pos:column="25">//catch block</comment>
			<catch pos:line="420" pos:column="25">catch <parameter_list pos:line="420" pos:column="31">(<param><decl><type><name pos:line="420" pos:column="32">SQLException</name></type> <name pos:line="420" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="420" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="421" pos:column="33">System</name><op:operator pos:line="421" pos:column="39">.</op:operator><name pos:line="421" pos:column="40">out</name><op:operator pos:line="421" pos:column="43">.</op:operator><name pos:line="421" pos:column="44">println</name></name><argument_list pos:line="421" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="421" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="422" pos:column="33">e</name><op:operator pos:line="422" pos:column="34">.</op:operator><name pos:line="422" pos:column="35">printStackTrace</name></name><argument_list pos:line="422" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="423" pos:column="33">System</name><op:operator pos:line="423" pos:column="39">.</op:operator><name pos:line="423" pos:column="40">out</name><op:operator pos:line="423" pos:column="43">.</op:operator><name pos:line="423" pos:column="44">println</name></name><argument_list pos:line="423" pos:column="51">(<argument><expr><name pos:line="423" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="427" pos:column="17">//catch block</comment>
		<catch pos:line="428" pos:column="17">catch <parameter_list pos:line="428" pos:column="23">(<param><decl><type><name pos:line="428" pos:column="24">Exception</name></type> <name pos:line="428" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="428" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="429" pos:column="25">System</name><op:operator pos:line="429" pos:column="31">.</op:operator><name pos:line="429" pos:column="32">out</name><op:operator pos:line="429" pos:column="35">.</op:operator><name pos:line="429" pos:column="36">println</name></name><argument_list pos:line="429" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="429" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="430" pos:column="25">e</name><op:operator pos:line="430" pos:column="26">.</op:operator><name pos:line="430" pos:column="27">printStackTrace</name></name><argument_list pos:line="430" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="431" pos:column="25">System</name><op:operator pos:line="431" pos:column="31">.</op:operator><name pos:line="431" pos:column="32">out</name><op:operator pos:line="431" pos:column="35">.</op:operator><name pos:line="431" pos:column="36">println</name></name><argument_list pos:line="431" pos:column="43">(<argument><expr><name pos:line="431" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>

		<finally pos:line="435" pos:column="17">finally <block pos:line="435" pos:column="25">{

			<comment type="line" pos:line="437" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="440" pos:column="17">return <expr><name pos:line="440" pos:column="24">isExisting</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="443" pos:column="9">/*get all students*/</comment>
	<function><type><specifier pos:line="444" pos:column="9">public</specifier> <specifier pos:line="444" pos:column="16">static</specifier> <name><name pos:line="444" pos:column="23">ArrayList</name><argument_list pos:line="444" pos:column="32">&lt;<argument><name pos:line="444" pos:column="33">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="444" pos:column="42">getAllStudents</name><parameter_list pos:line="444" pos:column="56">()</parameter_list> <block pos:line="444" pos:column="59">{


		<decl_stmt><decl><type><name><name pos:line="447" pos:column="17">ArrayList</name><argument_list pos:line="447" pos:column="26">&lt;<argument><name pos:line="447" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="447" pos:column="36">allStudents</name> <init pos:line="447" pos:column="48">= <expr><op:operator pos:line="447" pos:column="50">new</op:operator> <call><name><name pos:line="447" pos:column="54">ArrayList</name><argument_list pos:line="447" pos:column="63">&lt;<argument><name pos:line="447" pos:column="64">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="447" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="447" pos:column="75">//initialize the arraylist</comment>

		<try pos:line="449" pos:column="17">try <block pos:line="449" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="450" pos:column="25">Connection</name></type> <name pos:line="450" pos:column="36">conn</name> <init pos:line="450" pos:column="41">= <expr><call><name><name pos:line="450" pos:column="43">Database</name><op:operator pos:line="450" pos:column="51">.</op:operator><name pos:line="450" pos:column="52">getConnection</name></name><argument_list pos:line="450" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="450" pos:column="68">//get the connection</comment>

			<try pos:line="452" pos:column="25">try <block pos:line="452" pos:column="29">{
				<if pos:line="453" pos:column="33">if <condition pos:line="453" pos:column="36">(<expr><name pos:line="453" pos:column="37">conn</name> <op:operator pos:line="453" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="453" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="453" pos:column="50"> <block pos:line="453" pos:column="51">{

					<comment type="line" pos:line="455" pos:column="41">// Retrieve all the professors from one department</comment>
					<decl_stmt><decl><type><name pos:line="456" pos:column="41">String</name></type> <name pos:line="456" pos:column="48">ProfessorSelect</name> <init pos:line="456" pos:column="64">= <expr><lit:literal type="string" pos:line="456" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="457" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="457" pos:column="59">" FROM people"</lit:literal> <op:operator pos:line="457" pos:column="74">+</op:operator> <lit:literal type="string" pos:line="457" pos:column="76">" WHERE PositionID=3"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="458" pos:column="41">PreparedStatement</name></type> <name pos:line="458" pos:column="59">statement</name> <init pos:line="458" pos:column="69">= <expr><call><name><name pos:line="458" pos:column="71">conn</name><op:operator pos:line="458" pos:column="75">.</op:operator><name pos:line="458" pos:column="76">prepareStatement</name></name><argument_list pos:line="458" pos:column="92">(<argument><expr><name pos:line="458" pos:column="93">ProfessorSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="459" pos:column="41">ResultSet</name></type> <name pos:line="459" pos:column="51">rs</name> <init pos:line="459" pos:column="54">= <expr><call><name><name pos:line="459" pos:column="56">statement</name><op:operator pos:line="459" pos:column="65">.</op:operator><name pos:line="459" pos:column="66">executeQuery</name></name><argument_list pos:line="459" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="459" pos:column="81">//execute the query</comment>

					<while pos:line="461" pos:column="41">while <condition pos:line="461" pos:column="47">(<expr><call><name><name pos:line="461" pos:column="48">rs</name><op:operator pos:line="461" pos:column="50">.</op:operator><name pos:line="461" pos:column="51">next</name></name><argument_list pos:line="461" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="461" pos:column="59">{
						
						<expr_stmt><expr><call><name><name pos:line="463" pos:column="49">DBAnnotation</name><op:operator pos:line="463" pos:column="61">.</op:operator><name pos:line="463" pos:column="62">annoate</name></name><argument_list pos:line="463" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="463" pos:column="70">"retreivedStudentUserUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="97">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="107">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="463" pos:column="114">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="464" pos:column="49">int</name></type> <name pos:line="464" pos:column="53">retreivedStudentUserUIN</name> <init pos:line="464" pos:column="77">= <expr><call><name><name pos:line="464" pos:column="79">rs</name><op:operator pos:line="464" pos:column="81">.</op:operator><name pos:line="464" pos:column="82">getInt</name></name><argument_list pos:line="464" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="464" pos:column="89">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="464" pos:column="96">//retrieve the UIN</comment>
						
						<decl_stmt><decl><type><name pos:line="466" pos:column="49">Student</name></type> <name pos:line="466" pos:column="57">stud</name> <init pos:line="466" pos:column="62">= <expr><op:operator pos:line="466" pos:column="64">new</op:operator> <call><name pos:line="466" pos:column="68">Student</name><argument_list pos:line="466" pos:column="75">(<argument><expr><name pos:line="466" pos:column="76">retreivedStudentUserUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="467" pos:column="49">allStudents</name><op:operator pos:line="467" pos:column="60">.</op:operator><name pos:line="467" pos:column="61">add</name></name><argument_list pos:line="467" pos:column="64">(<argument><expr><name pos:line="467" pos:column="65">stud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="467" pos:column="71">//add it to the arraylist</comment>
						
						<expr_stmt><expr><call><name><name pos:line="469" pos:column="49">DBAnnotation</name><op:operator pos:line="469" pos:column="61">.</op:operator><name pos:line="469" pos:column="62">annoate</name></name><argument_list pos:line="469" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="469" pos:column="70">"getStudentUserName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="469" pos:column="92">"people"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="469" pos:column="102">"Username"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="469" pos:column="114">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="470" pos:column="49">String</name></type> <name pos:line="470" pos:column="56">getStudentUserName</name><init pos:line="470" pos:column="74">=<expr><call><name><name pos:line="470" pos:column="75">stud</name><op:operator pos:line="470" pos:column="79">.</op:operator><name pos:line="470" pos:column="80">getUserName</name></name><argument_list pos:line="470" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="471" pos:column="49">System</name><op:operator pos:line="471" pos:column="55">.</op:operator><name pos:line="471" pos:column="56">out</name><op:operator pos:line="471" pos:column="59">.</op:operator><name pos:line="471" pos:column="60">println</name></name><argument_list pos:line="471" pos:column="67">(<argument><expr><name pos:line="471" pos:column="68">getStudentUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>

				}</block></then></if>

			}</block>
			<comment type="line" pos:line="477" pos:column="25">//catch block</comment>
			<catch pos:line="478" pos:column="25">catch <parameter_list pos:line="478" pos:column="31">(<param><decl><type><name pos:line="478" pos:column="32">SQLException</name></type> <name pos:line="478" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="478" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="479" pos:column="33">System</name><op:operator pos:line="479" pos:column="39">.</op:operator><name pos:line="479" pos:column="40">out</name><op:operator pos:line="479" pos:column="43">.</op:operator><name pos:line="479" pos:column="44">println</name></name><argument_list pos:line="479" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="479" pos:column="52">"Error fetching all the professors"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="480" pos:column="33">System</name><op:operator pos:line="480" pos:column="39">.</op:operator><name pos:line="480" pos:column="40">out</name><op:operator pos:line="480" pos:column="43">.</op:operator><name pos:line="480" pos:column="44">println</name></name><argument_list pos:line="480" pos:column="51">(<argument><expr><call><name><name pos:line="480" pos:column="52">e</name><op:operator pos:line="480" pos:column="53">.</op:operator><name pos:line="480" pos:column="54">getMessage</name></name><argument_list pos:line="480" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="481" pos:column="33">e</name><op:operator pos:line="481" pos:column="34">.</op:operator><name pos:line="481" pos:column="35">printStackTrace</name></name><argument_list pos:line="481" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch> 
			<comment type="line" pos:line="484" pos:column="25">//catch block</comment>
			<catch pos:line="485" pos:column="25">catch <parameter_list pos:line="485" pos:column="31">(<param><decl><type><name><name pos:line="485" pos:column="32">People</name><op:operator pos:line="485" pos:column="38">.</op:operator><name pos:line="485" pos:column="39">PersonDoesNotExistException</name></name></type> <name pos:line="485" pos:column="67">e</name></decl></param>)</parameter_list> <block pos:line="485" pos:column="70">{
				<comment type="line" pos:line="486" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="487" pos:column="33">e</name><op:operator pos:line="487" pos:column="34">.</op:operator><name pos:line="487" pos:column="35">printStackTrace</name></name><argument_list pos:line="487" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>


			<return pos:line="491" pos:column="25">return <expr><name pos:line="491" pos:column="32">allStudents</name></expr>;</return>
		}</block>
		<comment type="block" pos:line="493" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="495" pos:column="17">finally <block pos:line="495" pos:column="25">{
		}</block></finally></try>

	}</block></function>

	<comment type="block" pos:line="500" pos:column="9">/*get all student courses*/</comment>
	<function><type><specifier pos:line="501" pos:column="9">public</specifier> <name><name pos:line="501" pos:column="16">LinkedHashMap</name><argument_list pos:line="501" pos:column="29">&lt;<argument><name pos:line="501" pos:column="30">Integer</name></argument>, <argument><name pos:line="501" pos:column="39">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="501" pos:column="54">getStudentCourses</name><parameter_list pos:line="501" pos:column="71">()</parameter_list> <throws pos:line="501" pos:column="74">throws <argument><expr><name><name pos:line="501" pos:column="81">Course</name><op:operator pos:line="501" pos:column="87">.</op:operator><name pos:line="501" pos:column="88">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="501" pos:column="117">CourseOffered</name><op:operator pos:line="501" pos:column="130">.</op:operator><name pos:line="501" pos:column="131">CourseOfferingDoesNotExistException</name></name></expr></argument></throws> <block pos:line="501" pos:column="167">{

		<decl_stmt><decl><type><name><name pos:line="503" pos:column="17">LinkedHashMap</name><argument_list pos:line="503" pos:column="30">&lt;<argument><name pos:line="503" pos:column="31">Integer</name></argument>, <argument><name pos:line="503" pos:column="40">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="503" pos:column="55">studentCourses</name> <init pos:line="503" pos:column="70">= <expr><op:operator pos:line="503" pos:column="72">new</op:operator> <call><name><name pos:line="503" pos:column="76">LinkedHashMap</name><argument_list pos:line="503" pos:column="89">&lt;<argument><name pos:line="503" pos:column="90">Integer</name></argument>, <argument><name pos:line="503" pos:column="99">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="503" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="503" pos:column="116">//initilaize the hashmap</comment>

		<try pos:line="505" pos:column="17">try <block pos:line="505" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="506" pos:column="25">Connection</name></type> <name pos:line="506" pos:column="36">conn</name> <init pos:line="506" pos:column="41">= <expr><call><name><name pos:line="506" pos:column="43">Database</name><op:operator pos:line="506" pos:column="51">.</op:operator><name pos:line="506" pos:column="52">getConnection</name></name><argument_list pos:line="506" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="506" pos:column="68">//get the connection</comment>

			<try pos:line="508" pos:column="25">try <block pos:line="508" pos:column="29">{
				<if pos:line="509" pos:column="33">if <condition pos:line="509" pos:column="36">(<expr><name pos:line="509" pos:column="37">conn</name> <op:operator pos:line="509" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="509" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="509" pos:column="50"> <block pos:line="509" pos:column="51">{

					<comment type="line" pos:line="511" pos:column="41">// Retrieve the current semester ID</comment>
					<decl_stmt><decl><type><name pos:line="512" pos:column="41">String</name></type> <name pos:line="512" pos:column="48">SemesterSelect</name> <init pos:line="512" pos:column="63">= <expr><lit:literal type="string" pos:line="512" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="513" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="513" pos:column="59">" FROM studentenrollment"</lit:literal>
							<op:operator pos:line="514" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="514" pos:column="59">" WHERE UIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="515" pos:column="41">PreparedStatement</name></type> <name pos:line="515" pos:column="59">statement</name> <init pos:line="515" pos:column="69">= <expr><call><name><name pos:line="515" pos:column="71">conn</name><op:operator pos:line="515" pos:column="75">.</op:operator><name pos:line="515" pos:column="76">prepareStatement</name></name><argument_list pos:line="515" pos:column="92">(<argument><expr><name pos:line="515" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="516" pos:column="41">statement</name><op:operator pos:line="516" pos:column="50">.</op:operator><name pos:line="516" pos:column="51">setInt</name></name><argument_list pos:line="516" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="516" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="516" pos:column="61">this</name><op:operator pos:line="516" pos:column="65">.</op:operator><name pos:line="516" pos:column="66">getUIN</name></name><argument_list pos:line="516" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="516" pos:column="76">//set the UIN</comment>
					<decl_stmt><decl><type><name pos:line="517" pos:column="41">ResultSet</name></type> <name pos:line="517" pos:column="51">rs</name> <init pos:line="517" pos:column="54">= <expr><call><name><name pos:line="517" pos:column="56">statement</name><op:operator pos:line="517" pos:column="65">.</op:operator><name pos:line="517" pos:column="66">executeQuery</name></name><argument_list pos:line="517" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

					<while pos:line="519" pos:column="41">while <condition pos:line="519" pos:column="47">(<expr><call><name><name pos:line="519" pos:column="48">rs</name><op:operator pos:line="519" pos:column="50">.</op:operator><name pos:line="519" pos:column="51">next</name></name><argument_list pos:line="519" pos:column="55">()</argument_list></call></expr>)</condition> <block pos:line="519" pos:column="59">{
						
						<expr_stmt><expr><call><name><name pos:line="521" pos:column="49">DBAnnotation</name><op:operator pos:line="521" pos:column="61">.</op:operator><name pos:line="521" pos:column="62">annoate</name></name><argument_list pos:line="521" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="521" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="521" pos:column="81">"studentenrollment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="521" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="521" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="522" pos:column="49">int</name></type> <name pos:line="522" pos:column="53">offerID</name> <init pos:line="522" pos:column="61">= <expr><call><name><name pos:line="522" pos:column="63">rs</name><op:operator pos:line="522" pos:column="65">.</op:operator><name pos:line="522" pos:column="66">getInt</name></name><argument_list pos:line="522" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="522" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="524" pos:column="49">CourseOffered</name></type> <name pos:line="524" pos:column="63">course</name> <init pos:line="524" pos:column="70">= <expr><op:operator pos:line="524" pos:column="72">new</op:operator> <call><name pos:line="524" pos:column="76">CourseOffered</name><argument_list pos:line="524" pos:column="89">(<argument><expr><name pos:line="524" pos:column="90">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="524" pos:column="99">//set the object</comment>
						
						<expr_stmt><expr><call><name><name pos:line="526" pos:column="49">DBAnnotation</name><op:operator pos:line="526" pos:column="61">.</op:operator><name pos:line="526" pos:column="62">annoate</name></name><argument_list pos:line="526" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="70">"getOfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="526" pos:column="84">"coursesoffered"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="526" pos:column="102">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="526" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="527" pos:column="49">int</name></type> <name pos:line="527" pos:column="53">getOfferID</name><init pos:line="527" pos:column="63">=<expr><call><name><name pos:line="527" pos:column="64">course</name><op:operator pos:line="527" pos:column="70">.</op:operator><name pos:line="527" pos:column="71">getOfferID</name></name><argument_list pos:line="527" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="529" pos:column="49">studentCourses</name><op:operator pos:line="529" pos:column="63">.</op:operator><name pos:line="529" pos:column="64">put</name></name><argument_list pos:line="529" pos:column="67">(<argument><expr><name pos:line="529" pos:column="68">getOfferID</name></expr></argument>, <argument><expr><name pos:line="529" pos:column="80">course</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="529" pos:column="88">//add it to the hashmap</comment>
					}</block></while>

				}</block></then></if>

			}</block>

			<catch pos:line="536" pos:column="25">catch <parameter_list pos:line="536" pos:column="31">(<param><decl><type><name pos:line="536" pos:column="32">SQLException</name></type> <name pos:line="536" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="536" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="537" pos:column="33">System</name><op:operator pos:line="537" pos:column="39">.</op:operator><name pos:line="537" pos:column="40">out</name><op:operator pos:line="537" pos:column="43">.</op:operator><name pos:line="537" pos:column="44">println</name></name><argument_list pos:line="537" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="537" pos:column="52">"Error addind course offering"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="538" pos:column="33">System</name><op:operator pos:line="538" pos:column="39">.</op:operator><name pos:line="538" pos:column="40">out</name><op:operator pos:line="538" pos:column="43">.</op:operator><name pos:line="538" pos:column="44">println</name></name><argument_list pos:line="538" pos:column="51">(<argument><expr><call><name><name pos:line="538" pos:column="52">e</name><op:operator pos:line="538" pos:column="53">.</op:operator><name pos:line="538" pos:column="54">getMessage</name></name><argument_list pos:line="538" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="539" pos:column="33">e</name><op:operator pos:line="539" pos:column="34">.</op:operator><name pos:line="539" pos:column="35">printStackTrace</name></name><argument_list pos:line="539" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

			<return pos:line="543" pos:column="25">return <expr><name pos:line="543" pos:column="32">studentCourses</name></expr>;</return>
		}</block>
		<comment type="block" pos:line="545" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
										here the finally block does not contain any general statements*/</comment>
		<finally pos:line="547" pos:column="17">finally <block pos:line="547" pos:column="25">{
		}</block></finally></try>

	}</block></function>
	
	<comment type="block" pos:line="552" pos:column="9">/*update student name when the username is passed*/</comment>
	<function><type><specifier pos:line="553" pos:column="9">public</specifier> <name pos:line="553" pos:column="16">boolean</name></type> <name pos:line="553" pos:column="24">updateStudentUserName</name><parameter_list pos:line="553" pos:column="45">(<param><decl><type><name pos:line="553" pos:column="46">String</name></type> <name pos:line="553" pos:column="53">userName</name></decl></param>)</parameter_list> <block pos:line="553" pos:column="63">{

		<if pos:line="555" pos:column="17">if <condition pos:line="555" pos:column="20">(<expr><name pos:line="555" pos:column="21">userName</name><op:operator pos:line="555" pos:column="29">==</op:operator><lit:literal type="null" pos:line="555" pos:column="31">null</lit:literal></expr>)</condition><then pos:line="555" pos:column="36"> <block pos:line="555" pos:column="37">{
			<throw pos:line="556" pos:column="25">throw <expr><op:operator pos:line="556" pos:column="31">new</op:operator> <call><name pos:line="556" pos:column="35">NullPointerException</name><argument_list pos:line="556" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="556" pos:column="58">//check if its null</comment>
		}</block></then></if>
		
		<if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><call><name><name pos:line="559" pos:column="21">userName</name><op:operator pos:line="559" pos:column="29">.</op:operator><name pos:line="559" pos:column="30">equals</name></name><argument_list pos:line="559" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="37">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="559" pos:column="41"> <block pos:line="559" pos:column="42">{
			<throw pos:line="560" pos:column="25">throw <expr><op:operator pos:line="560" pos:column="31">new</op:operator> <call><name pos:line="560" pos:column="35">NullPointerException</name><argument_list pos:line="560" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="560" pos:column="58">//check if its null</comment>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="562" pos:column="17">boolean</name></type> <name pos:line="562" pos:column="25">isUpdated</name> <init pos:line="562" pos:column="35">= <expr><lit:literal type="boolean" pos:line="562" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="564" pos:column="17">try <block pos:line="564" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="565" pos:column="25">Connection</name></type> <name pos:line="565" pos:column="36">conn</name> <init pos:line="565" pos:column="41">= <expr><call><name><name pos:line="565" pos:column="43">Database</name><op:operator pos:line="565" pos:column="51">.</op:operator><name pos:line="565" pos:column="52">getConnection</name></name><argument_list pos:line="565" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="565" pos:column="68">//get the connection</comment>

			<try pos:line="567" pos:column="25">try <block pos:line="567" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="569" pos:column="33">boolean</name></type> <name pos:line="569" pos:column="41">ifAddedInLogin</name> <init pos:line="569" pos:column="56">= <expr><call><name><name pos:line="569" pos:column="58">People</name><op:operator pos:line="569" pos:column="64">.</op:operator><name pos:line="569" pos:column="65">updateUserNameIntoLoginTable</name></name><argument_list pos:line="569" pos:column="93">(<argument><expr><name pos:line="569" pos:column="94">userName</name></expr></argument>, <argument><expr><call><name><name pos:line="569" pos:column="104">this</name><op:operator pos:line="569" pos:column="108">.</op:operator><name pos:line="569" pos:column="109">getUserName</name></name><argument_list pos:line="569" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="569" pos:column="124">//update in the login table</comment>
				<if pos:line="570" pos:column="33">if <condition pos:line="570" pos:column="36">(<expr><name pos:line="570" pos:column="37">ifAddedInLogin</name></expr>)</condition><then pos:line="570" pos:column="52">
					<expr_stmt><expr><name pos:line="571" pos:column="41">isUpdated</name> <op:operator pos:line="571" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="571" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="574" pos:column="25">//catch block</comment>
			<catch pos:line="575" pos:column="25">catch <parameter_list pos:line="575" pos:column="31">(<param><decl><type><name pos:line="575" pos:column="32">Exception</name></type> <name pos:line="575" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="575" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="576" pos:column="33">System</name><op:operator pos:line="576" pos:column="39">.</op:operator><name pos:line="576" pos:column="40">out</name><op:operator pos:line="576" pos:column="43">.</op:operator><name pos:line="576" pos:column="44">println</name></name><argument_list pos:line="576" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="576" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="577" pos:column="33">e</name><op:operator pos:line="577" pos:column="34">.</op:operator><name pos:line="577" pos:column="35">printStackTrace</name></name><argument_list pos:line="577" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="578" pos:column="33">System</name><op:operator pos:line="578" pos:column="39">.</op:operator><name pos:line="578" pos:column="40">out</name><op:operator pos:line="578" pos:column="43">.</op:operator><name pos:line="578" pos:column="44">println</name></name><argument_list pos:line="578" pos:column="51">(<argument><expr><name pos:line="578" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		
		<comment type="line" pos:line="583" pos:column="17">//catch block</comment>
		<catch pos:line="584" pos:column="17">catch <parameter_list pos:line="584" pos:column="23">(<param><decl><type><name pos:line="584" pos:column="24">Exception</name></type> <name pos:line="584" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="584" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="585" pos:column="25">System</name><op:operator pos:line="585" pos:column="31">.</op:operator><name pos:line="585" pos:column="32">out</name><op:operator pos:line="585" pos:column="35">.</op:operator><name pos:line="585" pos:column="36">println</name></name><argument_list pos:line="585" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="585" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="586" pos:column="25">e</name><op:operator pos:line="586" pos:column="26">.</op:operator><name pos:line="586" pos:column="27">printStackTrace</name></name><argument_list pos:line="586" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="587" pos:column="25">System</name><op:operator pos:line="587" pos:column="31">.</op:operator><name pos:line="587" pos:column="32">out</name><op:operator pos:line="587" pos:column="35">.</op:operator><name pos:line="587" pos:column="36">println</name></name><argument_list pos:line="587" pos:column="43">(<argument><expr><name pos:line="587" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="591" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
											here the finally block does not contain any general statements*/</comment>
		<finally pos:line="593" pos:column="17">finally <block pos:line="593" pos:column="25">{

			<comment type="line" pos:line="595" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="598" pos:column="17">return <expr><name pos:line="598" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="602" pos:column="9">/*update the student name which passed the new name to this function*/</comment>
	<function><type><specifier pos:line="603" pos:column="9">public</specifier> <name pos:line="603" pos:column="16">boolean</name></type> <name pos:line="603" pos:column="24">updateStudentName</name><parameter_list pos:line="603" pos:column="41">(<param><decl><type><name pos:line="603" pos:column="42">String</name></type> <name pos:line="603" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="603" pos:column="55">{

		<if pos:line="605" pos:column="17">if <condition pos:line="605" pos:column="20">(<expr><name pos:line="605" pos:column="21">name</name><op:operator pos:line="605" pos:column="25">==</op:operator><lit:literal type="null" pos:line="605" pos:column="27">null</lit:literal></expr>)</condition><then pos:line="605" pos:column="32"> <block pos:line="605" pos:column="33">{
			<throw pos:line="606" pos:column="25">throw <expr><op:operator pos:line="606" pos:column="31">new</op:operator> <call><name pos:line="606" pos:column="35">NullPointerException</name><argument_list pos:line="606" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="606" pos:column="58">//throw an exception</comment>
		}</block></then></if>
		
		<if pos:line="609" pos:column="17">if <condition pos:line="609" pos:column="20">(<expr><call><name><name pos:line="609" pos:column="21">name</name><op:operator pos:line="609" pos:column="25">.</op:operator><name pos:line="609" pos:column="26">equals</name></name><argument_list pos:line="609" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="609" pos:column="33">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="609" pos:column="37"> <block pos:line="609" pos:column="38">{
			<throw pos:line="610" pos:column="25">throw <expr><op:operator pos:line="610" pos:column="31">new</op:operator> <call><name pos:line="610" pos:column="35">NullPointerException</name><argument_list pos:line="610" pos:column="55">()</argument_list></call></expr>;</throw><comment type="line" pos:line="610" pos:column="58">//throw an exception</comment>
		}</block></then></if>
		

		<decl_stmt><decl><type><name pos:line="614" pos:column="17">boolean</name></type> <name pos:line="614" pos:column="25">isUpdated</name> <init pos:line="614" pos:column="35">= <expr><lit:literal type="boolean" pos:line="614" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="616" pos:column="17">try <block pos:line="616" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="617" pos:column="25">Connection</name></type> <name pos:line="617" pos:column="36">conn</name> <init pos:line="617" pos:column="41">= <expr><call><name><name pos:line="617" pos:column="43">Database</name><op:operator pos:line="617" pos:column="51">.</op:operator><name pos:line="617" pos:column="52">getConnection</name></name><argument_list pos:line="617" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="617" pos:column="68">//get the connection</comment>

			<try pos:line="619" pos:column="25">try <block pos:line="619" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="621" pos:column="33">boolean</name></type> <name pos:line="621" pos:column="41">ifUpdatedInPeople</name> <init pos:line="621" pos:column="59">= <expr><call><name><name pos:line="621" pos:column="61">People</name><op:operator pos:line="621" pos:column="67">.</op:operator><name pos:line="621" pos:column="68">updateNameIntoPeopleTable</name></name><argument_list pos:line="621" pos:column="93">(<argument><expr><name pos:line="621" pos:column="94">name</name></expr></argument>, <argument><expr><call><name><name pos:line="621" pos:column="100">this</name><op:operator pos:line="621" pos:column="104">.</op:operator><name pos:line="621" pos:column="105">getUIN</name></name><argument_list pos:line="621" pos:column="111">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="621" pos:column="115">//update in people table</comment>
				<if pos:line="622" pos:column="33">if <condition pos:line="622" pos:column="36">(<expr><name pos:line="622" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="622" pos:column="55">
					<expr_stmt><expr><name pos:line="623" pos:column="41">isUpdated</name> <op:operator pos:line="623" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="623" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="626" pos:column="25">//catch block </comment>
			<catch pos:line="627" pos:column="25">catch <parameter_list pos:line="627" pos:column="31">(<param><decl><type><name pos:line="627" pos:column="32">Exception</name></type> <name pos:line="627" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="627" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="628" pos:column="33">System</name><op:operator pos:line="628" pos:column="39">.</op:operator><name pos:line="628" pos:column="40">out</name><op:operator pos:line="628" pos:column="43">.</op:operator><name pos:line="628" pos:column="44">println</name></name><argument_list pos:line="628" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="628" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="629" pos:column="33">e</name><op:operator pos:line="629" pos:column="34">.</op:operator><name pos:line="629" pos:column="35">printStackTrace</name></name><argument_list pos:line="629" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="630" pos:column="33">System</name><op:operator pos:line="630" pos:column="39">.</op:operator><name pos:line="630" pos:column="40">out</name><op:operator pos:line="630" pos:column="43">.</op:operator><name pos:line="630" pos:column="44">println</name></name><argument_list pos:line="630" pos:column="51">(<argument><expr><name pos:line="630" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<throw pos:line="631" pos:column="33">throw <expr><op:operator pos:line="631" pos:column="39">new</op:operator> <call><name pos:line="631" pos:column="43">NullPointerException</name><argument_list pos:line="631" pos:column="63">()</argument_list></call></expr>;</throw>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="635" pos:column="17">//catch block </comment>
		<catch pos:line="636" pos:column="17">catch <parameter_list pos:line="636" pos:column="23">(<param><decl><type><name pos:line="636" pos:column="24">Exception</name></type> <name pos:line="636" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="636" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="637" pos:column="25">System</name><op:operator pos:line="637" pos:column="31">.</op:operator><name pos:line="637" pos:column="32">out</name><op:operator pos:line="637" pos:column="35">.</op:operator><name pos:line="637" pos:column="36">println</name></name><argument_list pos:line="637" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="637" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="638" pos:column="25">e</name><op:operator pos:line="638" pos:column="26">.</op:operator><name pos:line="638" pos:column="27">printStackTrace</name></name><argument_list pos:line="638" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="639" pos:column="25">System</name><op:operator pos:line="639" pos:column="31">.</op:operator><name pos:line="639" pos:column="32">out</name><op:operator pos:line="639" pos:column="35">.</op:operator><name pos:line="639" pos:column="36">println</name></name><argument_list pos:line="639" pos:column="43">(<argument><expr><name pos:line="639" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<throw pos:line="640" pos:column="25">throw <expr><op:operator pos:line="640" pos:column="31">new</op:operator> <call><name pos:line="640" pos:column="35">NullPointerException</name><argument_list pos:line="640" pos:column="55">()</argument_list></call></expr>;</throw>

		}</block></catch>
		
		<comment type="block" pos:line="644" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="646" pos:column="17">finally <block pos:line="646" pos:column="25">{

			<comment type="line" pos:line="648" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="651" pos:column="17">return <expr><name pos:line="651" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="655" pos:column="9">/*update the student Dept when it is passed to it the new dpet ID*/</comment>
	<function><type><specifier pos:line="656" pos:column="9">public</specifier> <name pos:line="656" pos:column="16">boolean</name></type> <name pos:line="656" pos:column="24">updateStudentDept</name><parameter_list pos:line="656" pos:column="41">(<param><decl><type><name pos:line="656" pos:column="42">int</name></type> <name pos:line="656" pos:column="46">deptID</name></decl></param>)</parameter_list> <block pos:line="656" pos:column="54">{

		<comment type="line" pos:line="658" pos:column="17">// ask simant how to check for the dept</comment>

		<decl_stmt><decl><type><name pos:line="660" pos:column="17">boolean</name></type> <name pos:line="660" pos:column="25">isUpdated</name> <init pos:line="660" pos:column="35">= <expr><lit:literal type="boolean" pos:line="660" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>

		<try pos:line="662" pos:column="17">try <block pos:line="662" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="663" pos:column="25">Connection</name></type> <name pos:line="663" pos:column="36">conn</name> <init pos:line="663" pos:column="41">= <expr><call><name><name pos:line="663" pos:column="43">Database</name><op:operator pos:line="663" pos:column="51">.</op:operator><name pos:line="663" pos:column="52">getConnection</name></name><argument_list pos:line="663" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="663" pos:column="68">//get the connection </comment>

			<try pos:line="665" pos:column="25">try <block pos:line="665" pos:column="29">{

				<decl_stmt><decl><type><name pos:line="667" pos:column="33">boolean</name></type> <name pos:line="667" pos:column="41">ifUpdatedInPeople</name> <init pos:line="667" pos:column="59">= <expr><call><name><name pos:line="667" pos:column="61">People</name><op:operator pos:line="667" pos:column="67">.</op:operator><name pos:line="667" pos:column="68">updateDeptIntoPeopleTable</name></name><argument_list pos:line="667" pos:column="93">(<argument><expr><name pos:line="667" pos:column="94">deptID</name></expr></argument>, <argument><expr><call><name><name pos:line="667" pos:column="102">this</name><op:operator pos:line="667" pos:column="106">.</op:operator><name pos:line="667" pos:column="107">getUIN</name></name><argument_list pos:line="667" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="667" pos:column="117">//update in the people table</comment>
				<if pos:line="668" pos:column="33">if <condition pos:line="668" pos:column="36">(<expr><name pos:line="668" pos:column="37">ifUpdatedInPeople</name></expr>)</condition><then pos:line="668" pos:column="55">
					<expr_stmt><expr><name pos:line="669" pos:column="41">isUpdated</name> <op:operator pos:line="669" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="669" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>

			}</block>
			<comment type="line" pos:line="672" pos:column="25">//catch block </comment>
			<catch pos:line="673" pos:column="25">catch <parameter_list pos:line="673" pos:column="31">(<param><decl><type><name pos:line="673" pos:column="32">Exception</name></type> <name pos:line="673" pos:column="42">e</name></decl></param>)</parameter_list> <block pos:line="673" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="674" pos:column="33">System</name><op:operator pos:line="674" pos:column="39">.</op:operator><name pos:line="674" pos:column="40">out</name><op:operator pos:line="674" pos:column="43">.</op:operator><name pos:line="674" pos:column="44">println</name></name><argument_list pos:line="674" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="674" pos:column="52">"Error adding/updating to database"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="675" pos:column="33">e</name><op:operator pos:line="675" pos:column="34">.</op:operator><name pos:line="675" pos:column="35">printStackTrace</name></name><argument_list pos:line="675" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="676" pos:column="33">System</name><op:operator pos:line="676" pos:column="39">.</op:operator><name pos:line="676" pos:column="40">out</name><op:operator pos:line="676" pos:column="43">.</op:operator><name pos:line="676" pos:column="44">println</name></name><argument_list pos:line="676" pos:column="51">(<argument><expr><name pos:line="676" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="680" pos:column="17">//CATCH block</comment>
		<catch pos:line="681" pos:column="17">catch <parameter_list pos:line="681" pos:column="23">(<param><decl><type><name pos:line="681" pos:column="24">Exception</name></type> <name pos:line="681" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="681" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="682" pos:column="25">System</name><op:operator pos:line="682" pos:column="31">.</op:operator><name pos:line="682" pos:column="32">out</name><op:operator pos:line="682" pos:column="35">.</op:operator><name pos:line="682" pos:column="36">println</name></name><argument_list pos:line="682" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="682" pos:column="44">"Connection failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="683" pos:column="25">e</name><op:operator pos:line="683" pos:column="26">.</op:operator><name pos:line="683" pos:column="27">printStackTrace</name></name><argument_list pos:line="683" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="684" pos:column="25">System</name><op:operator pos:line="684" pos:column="31">.</op:operator><name pos:line="684" pos:column="32">out</name><op:operator pos:line="684" pos:column="35">.</op:operator><name pos:line="684" pos:column="36">println</name></name><argument_list pos:line="684" pos:column="43">(<argument><expr><name pos:line="684" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="688" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
													here the finally block does not contain any general statements*/</comment>
		<finally pos:line="690" pos:column="17">finally <block pos:line="690" pos:column="25">{

			<comment type="line" pos:line="692" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

		<return pos:line="695" pos:column="17">return <expr><name pos:line="695" pos:column="24">isUpdated</name></expr>;</return>

	}</block></function>

	<comment type="block" pos:line="699" pos:column="9">/*calculates the GPA from the grades it has for the passed UIN*/</comment>
	<function><type><specifier pos:line="700" pos:column="9">public</specifier> <specifier pos:line="700" pos:column="16">static</specifier> <name pos:line="700" pos:column="23">void</name></type> <name pos:line="700" pos:column="28">calculateGPA</name><parameter_list pos:line="700" pos:column="40">(<param><decl><type><name pos:line="700" pos:column="41">int</name></type> <name pos:line="700" pos:column="45">UIN</name></decl></param>)</parameter_list> <block pos:line="700" pos:column="50">{

		<decl_stmt><decl><type><name><name pos:line="702" pos:column="17">ArrayList</name><argument_list pos:line="702" pos:column="26">&lt;<argument><name pos:line="702" pos:column="27">String</name></argument>&gt;</argument_list></name></type> <name pos:line="702" pos:column="35">getGrades</name> <init pos:line="702" pos:column="45">= <expr><op:operator pos:line="702" pos:column="47">new</op:operator> <call><name><name pos:line="702" pos:column="51">ArrayList</name><argument_list pos:line="702" pos:column="60">&lt;<argument><name pos:line="702" pos:column="61">String</name></argument>&gt;</argument_list></name><argument_list pos:line="702" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="702" pos:column="71">//get the grades</comment>
		<decl_stmt><decl><type><name pos:line="703" pos:column="17">double</name></type> <name pos:line="703" pos:column="24">finalGrade</name> <init pos:line="703" pos:column="35">= <expr><lit:literal type="number" pos:line="703" pos:column="37">0.0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="704" pos:column="17">int</name></type> <name pos:line="704" pos:column="21">count</name> <init pos:line="704" pos:column="27">= <expr><lit:literal type="number" pos:line="704" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="705" pos:column="17">int</name></type> <name pos:line="705" pos:column="21">maxLevel</name> <init pos:line="705" pos:column="30">= <expr><call><name><name pos:line="705" pos:column="32">GradeSystem</name><op:operator pos:line="705" pos:column="43">.</op:operator><name pos:line="705" pos:column="44">getMaxGradeLevel</name></name><argument_list pos:line="705" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="705" pos:column="63">//get the max grade level</comment>

		<try pos:line="707" pos:column="17">try <block pos:line="707" pos:column="21">{
			<decl_stmt><decl><type><name pos:line="708" pos:column="25">Connection</name></type> <name pos:line="708" pos:column="36">conn</name> <init pos:line="708" pos:column="41">= <expr><call><name><name pos:line="708" pos:column="43">Database</name><op:operator pos:line="708" pos:column="51">.</op:operator><name pos:line="708" pos:column="52">getConnection</name></name><argument_list pos:line="708" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="708" pos:column="68">//get the connection</comment>
			<decl_stmt><decl><type><name pos:line="709" pos:column="25">String</name></type> <name pos:line="709" pos:column="32">SQLStudentGPASelect</name> <init pos:line="709" pos:column="52">= <expr><lit:literal type="string" pos:line="709" pos:column="54">""</lit:literal></expr></init></decl>;</decl_stmt>
			<try pos:line="710" pos:column="25">try <block pos:line="710" pos:column="29">{

				<if pos:line="712" pos:column="33">if <condition pos:line="712" pos:column="36">(<expr><name pos:line="712" pos:column="37">conn</name> <op:operator pos:line="712" pos:column="42">!=</op:operator> <lit:literal type="null" pos:line="712" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="712" pos:column="50"> <block pos:line="712" pos:column="51">{

					<expr_stmt><expr><name pos:line="714" pos:column="41">SQLStudentGPASelect</name> <op:operator pos:line="714" pos:column="61">=</op:operator> <lit:literal type="string" pos:line="714" pos:column="63">"Select * From studentenrollment natural join gradingsystem where UIN=?;"</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="717" pos:column="33">PreparedStatement</name></type> <name pos:line="717" pos:column="51">stmtForSelect</name> <init pos:line="717" pos:column="65">= <expr><call><name><name pos:line="717" pos:column="67">conn</name><op:operator pos:line="717" pos:column="71">.</op:operator><name pos:line="717" pos:column="72">prepareStatement</name></name><argument_list pos:line="717" pos:column="88">(<argument><expr><name pos:line="717" pos:column="89">SQLStudentGPASelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="718" pos:column="33">stmtForSelect</name><op:operator pos:line="718" pos:column="46">.</op:operator><name pos:line="718" pos:column="47">setInt</name></name><argument_list pos:line="718" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="718" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="718" pos:column="57">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="718" pos:column="62">//pass the UIN</comment>

				<decl_stmt><decl><type><name pos:line="720" pos:column="33">ResultSet</name></type> <name pos:line="720" pos:column="43">rs</name> <init pos:line="720" pos:column="46">= <expr><call><name><name pos:line="720" pos:column="48">stmtForSelect</name><op:operator pos:line="720" pos:column="61">.</op:operator><name pos:line="720" pos:column="62">executeQuery</name></name><argument_list pos:line="720" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="720" pos:column="77">//execute the query</comment>

				<while pos:line="722" pos:column="33">while <condition pos:line="722" pos:column="39">(<expr><call><name><name pos:line="722" pos:column="40">rs</name><op:operator pos:line="722" pos:column="42">.</op:operator><name pos:line="722" pos:column="43">next</name></name><argument_list pos:line="722" pos:column="47">()</argument_list></call></expr>)</condition> <block pos:line="722" pos:column="51">{

					<comment type="line" pos:line="724" pos:column="41">//calculate the final GPA</comment>
					<expr_stmt><expr><call><name><name pos:line="725" pos:column="41">DBAnnotation</name><op:operator pos:line="725" pos:column="53">.</op:operator><name pos:line="725" pos:column="54">annoate</name></name><argument_list pos:line="725" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="725" pos:column="62">"retrievedStudentGradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="725" pos:column="92">"gradingsystem"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="725" pos:column="109">"GradeLevel"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="725" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="726" pos:column="41">double</name></type> <name pos:line="726" pos:column="48">retrievedStudentGradeLevel</name> <init pos:line="726" pos:column="75">= <expr><call><name><name pos:line="726" pos:column="77">rs</name><op:operator pos:line="726" pos:column="79">.</op:operator><name pos:line="726" pos:column="80">getDouble</name></name><argument_list pos:line="726" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="726" pos:column="90">"GradeLevel"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="726" pos:column="104">//get the grade</comment>
					
					<decl_stmt><decl><type><name pos:line="728" pos:column="41">double</name></type> <name pos:line="728" pos:column="48">normalizedLevel</name> <init pos:line="728" pos:column="64">= <expr><name pos:line="728" pos:column="66">maxLevel</name><op:operator pos:line="728" pos:column="74">-</op:operator> <name pos:line="728" pos:column="76">retrievedStudentGradeLevel</name> <op:operator pos:line="728" pos:column="103">+</op:operator> <lit:literal type="number" pos:line="728" pos:column="105">1</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="729" pos:column="41">retrievedStudentGradeLevel</name> <op:operator pos:line="729" pos:column="68">=</op:operator> <op:operator pos:line="729" pos:column="70">(</op:operator><name pos:line="729" pos:column="71">normalizedLevel</name> <op:operator pos:line="729" pos:column="87">*</op:operator> <lit:literal type="number" pos:line="729" pos:column="89">4.0</lit:literal><op:operator pos:line="729" pos:column="92">)</op:operator> <op:operator pos:line="729" pos:column="94">/</op:operator> <lit:literal type="number" pos:line="729" pos:column="96">7.0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="730" pos:column="41">finalGrade</name> <op:operator pos:line="730" pos:column="52">+=</op:operator> <name pos:line="730" pos:column="55">retrievedStudentGradeLevel</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="731" pos:column="41">count</name><op:operator pos:line="731" pos:column="46">++</op:operator></expr>;</expr_stmt>

				}</block></while>

				<comment type="line" pos:line="735" pos:column="33">//calculate the GPA</comment>
				<if pos:line="736" pos:column="33">if <condition pos:line="736" pos:column="36">(<expr><name pos:line="736" pos:column="37">count</name> <op:operator pos:line="736" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="736" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="736" pos:column="47"> <block pos:line="736" pos:column="48">{
					<expr_stmt><expr><name pos:line="737" pos:column="41">finalGrade</name> <op:operator pos:line="737" pos:column="52">=</op:operator> <name pos:line="737" pos:column="54">finalGrade</name> <op:operator pos:line="737" pos:column="65">/</op:operator> <name pos:line="737" pos:column="67">count</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="738" pos:column="41">updateGPA</name><argument_list pos:line="738" pos:column="50">(<argument><expr><name pos:line="738" pos:column="51">UIN</name></expr></argument>, <argument><expr><name pos:line="738" pos:column="56">finalGrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="738" pos:column="68">//update the new GPA</comment>
				}</block></then>

				<else pos:line="741" pos:column="33">else <block pos:line="741" pos:column="38">{
					<expr_stmt><expr><call><name pos:line="742" pos:column="41">updateGPA</name><argument_list pos:line="742" pos:column="50">(<argument><expr><name pos:line="742" pos:column="51">UIN</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="742" pos:column="56">4.0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="742" pos:column="61">//update the gpa</comment>
				}</block></else></if>

			}</block>
			<comment type="line" pos:line="746" pos:column="25">//catch block</comment>
			<catch pos:line="747" pos:column="25">catch <parameter_list pos:line="747" pos:column="31">(<param><decl><type><name pos:line="747" pos:column="32">SQLException</name></type> <name pos:line="747" pos:column="45">e</name></decl></param>)</parameter_list> <block pos:line="747" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="748" pos:column="33">System</name><op:operator pos:line="748" pos:column="39">.</op:operator><name pos:line="748" pos:column="40">out</name><op:operator pos:line="748" pos:column="43">.</op:operator><name pos:line="748" pos:column="44">print</name></name><argument_list pos:line="748" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="748" pos:column="50">"SQL exception in student const"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="749" pos:column="33">System</name><op:operator pos:line="749" pos:column="39">.</op:operator><name pos:line="749" pos:column="40">out</name><op:operator pos:line="749" pos:column="43">.</op:operator><name pos:line="749" pos:column="44">println</name></name><argument_list pos:line="749" pos:column="51">(<argument><expr><name pos:line="749" pos:column="52">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="750" pos:column="33">e</name><op:operator pos:line="750" pos:column="34">.</op:operator><name pos:line="750" pos:column="35">printStackTrace</name></name><argument_list pos:line="750" pos:column="50">()</argument_list></call></expr>;</expr_stmt>

			}</block></catch></try>

		}</block>
		<comment type="line" pos:line="755" pos:column="17">//catch block</comment>
		<catch pos:line="756" pos:column="17">catch <parameter_list pos:line="756" pos:column="23">(<param><decl><type><name pos:line="756" pos:column="24">Exception</name></type> <name pos:line="756" pos:column="34">e</name></decl></param>)</parameter_list> <block pos:line="756" pos:column="37">{
			<expr_stmt><expr><call><name><name pos:line="757" pos:column="25">System</name><op:operator pos:line="757" pos:column="31">.</op:operator><name pos:line="757" pos:column="32">out</name><op:operator pos:line="757" pos:column="35">.</op:operator><name pos:line="757" pos:column="36">println</name></name><argument_list pos:line="757" pos:column="43">(<argument><expr><name pos:line="757" pos:column="44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="758" pos:column="25">e</name><op:operator pos:line="758" pos:column="26">.</op:operator><name pos:line="758" pos:column="27">printStackTrace</name></name><argument_list pos:line="758" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

		}</block></catch>
		
		<comment type="block" pos:line="762" pos:column="17">/*The code thats placed in the finally block gets executed no matter what. But 
														here the finally block does not contain any general statements*/</comment>
		<finally pos:line="764" pos:column="17">finally <block pos:line="764" pos:column="25">{

			<comment type="line" pos:line="766" pos:column="25">// System.out.println("retrieved");</comment>
		}</block></finally></try>

	}</block></function>
	
	<comment type="line" pos:line="771" pos:column="9">//new exceptions added that can be thrown </comment>
	<class><specifier pos:line="772" pos:column="9">public</specifier> <specifier pos:line="772" pos:column="16">static</specifier> class <name pos:line="772" pos:column="29">levelNotExistException</name> <super><extends pos:line="772" pos:column="52">extends <name pos:line="772" pos:column="60">Exception</name></extends></super> <block pos:line="772" pos:column="70">{
		<decl_stmt><decl><type><specifier pos:line="773" pos:column="17">private</specifier> <specifier pos:line="773" pos:column="25">static</specifier> <specifier pos:line="773" pos:column="32">final</specifier> <name pos:line="773" pos:column="38">long</name></type> <name pos:line="773" pos:column="43">serialVersionUID</name> <init pos:line="773" pos:column="60">= <expr><lit:literal type="number" pos:line="773" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="774" pos:column="17">private</specifier> <name pos:line="774" pos:column="25">String</name></type> <name pos:line="774" pos:column="32">message</name> <init pos:line="774" pos:column="40">= <expr><lit:literal type="null" pos:line="774" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="776" pos:column="17">public</specifier> <name pos:line="776" pos:column="24">levelNotExistException</name><parameter_list pos:line="776" pos:column="46">()</parameter_list> <block pos:line="776" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="777" pos:column="25">super</name><argument_list pos:line="777" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="778" pos:column="25">this</name><op:operator pos:line="778" pos:column="29">.</op:operator><name pos:line="778" pos:column="30">message</name></name> <op:operator pos:line="778" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="778" pos:column="40">"level does not exist"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="781" pos:column="17">public</specifier> <name pos:line="781" pos:column="24">levelNotExistException</name><parameter_list pos:line="781" pos:column="46">(<param><decl><type><name pos:line="781" pos:column="47">String</name></type> <name pos:line="781" pos:column="54">message</name></decl></param>)</parameter_list> <block pos:line="781" pos:column="63">{
			<expr_stmt><expr><call><name pos:line="782" pos:column="25">super</name><argument_list pos:line="782" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="783" pos:column="25">this</name><op:operator pos:line="783" pos:column="29">.</op:operator><name pos:line="783" pos:column="30">message</name></name> <op:operator pos:line="783" pos:column="38">=</op:operator> <name pos:line="783" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="786" pos:column="17">@<name pos:line="786" pos:column="18">Override</name></annotation>
		<specifier pos:line="787" pos:column="17">public</specifier> <name pos:line="787" pos:column="24">String</name></type> <name pos:line="787" pos:column="31">toString</name><parameter_list pos:line="787" pos:column="39">()</parameter_list> <block pos:line="787" pos:column="42">{
			<return pos:line="788" pos:column="25">return <expr><name pos:line="788" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="791" pos:column="17">@<name pos:line="791" pos:column="18">Override</name></annotation>
		<specifier pos:line="792" pos:column="17">public</specifier> <name pos:line="792" pos:column="24">String</name></type> <name pos:line="792" pos:column="31">getMessage</name><parameter_list pos:line="792" pos:column="41">()</parameter_list> <block pos:line="792" pos:column="44">{
			<return pos:line="793" pos:column="25">return <expr><name pos:line="793" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line" pos:line="797" pos:column="9">//new exceptions added that can be thrown </comment>
	<class><specifier pos:line="798" pos:column="9">static</specifier> class <name pos:line="798" pos:column="22">GPAnotValidException</name> <super><extends pos:line="798" pos:column="43">extends <name pos:line="798" pos:column="51">Exception</name></extends></super> <block pos:line="798" pos:column="61">{
		<decl_stmt><decl><type><specifier pos:line="799" pos:column="17">private</specifier> <specifier pos:line="799" pos:column="25">static</specifier> <specifier pos:line="799" pos:column="32">final</specifier> <name pos:line="799" pos:column="38">long</name></type> <name pos:line="799" pos:column="43">serialVersionUID</name> <init pos:line="799" pos:column="60">= <expr><lit:literal type="number" pos:line="799" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="800" pos:column="17">private</specifier> <name pos:line="800" pos:column="25">String</name></type> <name pos:line="800" pos:column="32">message</name> <init pos:line="800" pos:column="40">= <expr><lit:literal type="null" pos:line="800" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="802" pos:column="17">public</specifier> <name pos:line="802" pos:column="24">GPAnotValidException</name><parameter_list pos:line="802" pos:column="44">()</parameter_list> <block pos:line="802" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="803" pos:column="25">super</name><argument_list pos:line="803" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="804" pos:column="25">this</name><op:operator pos:line="804" pos:column="29">.</op:operator><name pos:line="804" pos:column="30">message</name></name> <op:operator pos:line="804" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="804" pos:column="40">"GPA is not valid"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="807" pos:column="17">public</specifier> <name pos:line="807" pos:column="24">GPAnotValidException</name><parameter_list pos:line="807" pos:column="44">(<param><decl><type><name pos:line="807" pos:column="45">String</name></type> <name pos:line="807" pos:column="52">message</name></decl></param>)</parameter_list> <block pos:line="807" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="808" pos:column="25">super</name><argument_list pos:line="808" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="809" pos:column="25">this</name><op:operator pos:line="809" pos:column="29">.</op:operator><name pos:line="809" pos:column="30">message</name></name> <op:operator pos:line="809" pos:column="38">=</op:operator> <name pos:line="809" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="812" pos:column="17">@<name pos:line="812" pos:column="18">Override</name></annotation>
		<specifier pos:line="813" pos:column="17">public</specifier> <name pos:line="813" pos:column="24">String</name></type> <name pos:line="813" pos:column="31">toString</name><parameter_list pos:line="813" pos:column="39">()</parameter_list> <block pos:line="813" pos:column="42">{
			<return pos:line="814" pos:column="25">return <expr><name pos:line="814" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="817" pos:column="17">@<name pos:line="817" pos:column="18">Override</name></annotation>
		<specifier pos:line="818" pos:column="17">public</specifier> <name pos:line="818" pos:column="24">String</name></type> <name pos:line="818" pos:column="31">getMessage</name><parameter_list pos:line="818" pos:column="41">()</parameter_list> <block pos:line="818" pos:column="44">{
			<return pos:line="819" pos:column="25">return <expr><name pos:line="819" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<comment type="line" pos:line="823" pos:column="9">//new exceptions added that can be thrown </comment>
	<class><specifier pos:line="824" pos:column="9">public</specifier> <specifier pos:line="824" pos:column="16">static</specifier> class <name pos:line="824" pos:column="29">AccessDeniedException</name> <super><extends pos:line="824" pos:column="51">extends <name pos:line="824" pos:column="59">Exception</name></extends></super> <block pos:line="824" pos:column="69">{
		<decl_stmt><decl><type><specifier pos:line="825" pos:column="17">private</specifier> <specifier pos:line="825" pos:column="25">static</specifier> <specifier pos:line="825" pos:column="32">final</specifier> <name pos:line="825" pos:column="38">long</name></type> <name pos:line="825" pos:column="43">serialVersionUID</name> <init pos:line="825" pos:column="60">= <expr><lit:literal type="number" pos:line="825" pos:column="62">1L</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="826" pos:column="17">private</specifier> <name pos:line="826" pos:column="25">String</name></type> <name pos:line="826" pos:column="32">message</name> <init pos:line="826" pos:column="40">= <expr><lit:literal type="null" pos:line="826" pos:column="42">null</lit:literal></expr></init></decl>;</decl_stmt>

		<constructor><specifier pos:line="828" pos:column="17">public</specifier> <name pos:line="828" pos:column="24">AccessDeniedException</name><parameter_list pos:line="828" pos:column="45">()</parameter_list> <block pos:line="828" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="829" pos:column="25">super</name><argument_list pos:line="829" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="830" pos:column="25">this</name><op:operator pos:line="830" pos:column="29">.</op:operator><name pos:line="830" pos:column="30">message</name></name> <op:operator pos:line="830" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="830" pos:column="40">"You do not have the access"</lit:literal></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="833" pos:column="17">public</specifier> <name pos:line="833" pos:column="24">AccessDeniedException</name><parameter_list pos:line="833" pos:column="45">(<param><decl><type><name pos:line="833" pos:column="46">String</name></type> <name pos:line="833" pos:column="53">message</name></decl></param>)</parameter_list> <block pos:line="833" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="834" pos:column="25">super</name><argument_list pos:line="834" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="835" pos:column="25">this</name><op:operator pos:line="835" pos:column="29">.</op:operator><name pos:line="835" pos:column="30">message</name></name> <op:operator pos:line="835" pos:column="38">=</op:operator> <name pos:line="835" pos:column="40">message</name></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><annotation pos:line="838" pos:column="17">@<name pos:line="838" pos:column="18">Override</name></annotation>
		<specifier pos:line="839" pos:column="17">public</specifier> <name pos:line="839" pos:column="24">String</name></type> <name pos:line="839" pos:column="31">toString</name><parameter_list pos:line="839" pos:column="39">()</parameter_list> <block pos:line="839" pos:column="42">{
			<return pos:line="840" pos:column="25">return <expr><name pos:line="840" pos:column="32">message</name></expr>;</return>
		}</block></function>

		<function><type><annotation pos:line="843" pos:column="17">@<name pos:line="843" pos:column="18">Override</name></annotation>
		<specifier pos:line="844" pos:column="17">public</specifier> <name pos:line="844" pos:column="24">String</name></type> <name pos:line="844" pos:column="31">getMessage</name><parameter_list pos:line="844" pos:column="41">()</parameter_list> <block pos:line="844" pos:column="44">{
			<return pos:line="845" pos:column="25">return <expr><name pos:line="845" pos:column="32">message</name></expr>;</return>
		}</block></function>
	}</block></class>

	<function><type><annotation pos:line="849" pos:column="9">@<name pos:line="849" pos:column="10">Override</name></annotation>
	<specifier pos:line="850" pos:column="9">public</specifier> <name pos:line="850" pos:column="16">boolean</name></type> <name pos:line="850" pos:column="24">equals</name><parameter_list pos:line="850" pos:column="30">(<param><decl><type><name pos:line="850" pos:column="31">Object</name></type> <name pos:line="850" pos:column="38">arg0</name></decl></param>)</parameter_list> <block pos:line="850" pos:column="44">{
		<comment type="line" pos:line="851" pos:column="17">// TODO Auto-generated method stub</comment>
		<if pos:line="852" pos:column="17">if <condition pos:line="852" pos:column="20">(<expr><name pos:line="852" pos:column="21">arg0</name> <op:operator pos:line="852" pos:column="26">instanceof</op:operator> <name pos:line="852" pos:column="37">Student</name></expr>)</condition><then pos:line="852" pos:column="45"> <block pos:line="852" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="853" pos:column="25">Student</name></type> <name pos:line="853" pos:column="33">temp</name> <init pos:line="853" pos:column="38">= <expr><op:operator pos:line="853" pos:column="40">(</op:operator><name pos:line="853" pos:column="41">Student</name><op:operator pos:line="853" pos:column="48">)</op:operator> <name pos:line="853" pos:column="50">arg0</name></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="854" pos:column="25">// ask sim to add a return stmt here</comment>
		}</block></then></if>
		<return pos:line="856" pos:column="17">return <expr><call><name><name pos:line="856" pos:column="24">super</name><op:operator pos:line="856" pos:column="29">.</op:operator><name pos:line="856" pos:column="30">equals</name></name><argument_list pos:line="856" pos:column="36">(<argument><expr><name pos:line="856" pos:column="37">arg0</name></expr></argument>)</argument_list></call></expr>;</return>

	}</block></function>

	<function><type><annotation pos:line="860" pos:column="9">@<name pos:line="860" pos:column="10">Override</name></annotation>
	<specifier pos:line="861" pos:column="9">public</specifier> <name pos:line="861" pos:column="16">int</name></type> <name pos:line="861" pos:column="20">hashCode</name><parameter_list pos:line="861" pos:column="28">()</parameter_list> <block pos:line="861" pos:column="31">{
		<comment type="line" pos:line="862" pos:column="17">// TODO Auto-generated method stub</comment>
		<return pos:line="863" pos:column="17">return <expr><call><name><name pos:line="863" pos:column="24">super</name><op:operator pos:line="863" pos:column="29">.</op:operator><name pos:line="863" pos:column="30">hashCode</name></name><argument_list pos:line="863" pos:column="38">()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="866" pos:column="9">/*
	 * All student functions add, update, retrieve are specified in the this class
	 * 
	 * local main class is used for testing functions and specific executions
	 */</comment>
	<function><type><specifier pos:line="871" pos:column="9">public</specifier> <specifier pos:line="871" pos:column="16">static</specifier> <name pos:line="871" pos:column="23">void</name></type> <name pos:line="871" pos:column="28">main</name><parameter_list pos:line="871" pos:column="32">(<param><decl><type><name><name pos:line="871" pos:column="33">String</name><index pos:line="871" pos:column="39">[]</index></name></type> <name pos:line="871" pos:column="42">args</name></decl></param>)</parameter_list> <block pos:line="871" pos:column="48">{

	}</block></function>

}</block></class>
</unit>
