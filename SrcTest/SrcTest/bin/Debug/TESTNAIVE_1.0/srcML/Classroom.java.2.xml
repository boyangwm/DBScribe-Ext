<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\Classroom.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">util</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">util</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">Arrays</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Collections</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">java</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">util</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">LinkedHashMap</name></name>;</import>

<class><specifier pos:line="15" pos:column="1">public</specifier> class <name pos:line="15" pos:column="14">Classroom</name> <block pos:line="15" pos:column="24">{
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">ClassroomName</name></type> <name pos:line="16" pos:column="31">classroomName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <name pos:line="17" pos:column="17">ClassroomLocation</name></type> <name pos:line="17" pos:column="35">classroomLocation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="18" pos:column="9">private</specifier> <name pos:line="18" pos:column="17">int</name></type> <name pos:line="18" pos:column="21">classroomCapacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <name pos:line="19" pos:column="17">int</name></type> <name pos:line="19" pos:column="21">classroomID</name></decl>;</decl_stmt>
	
	
	
	
	<comment type="block" format="javadoc" pos:line="24" pos:column="9">/**
	 * @return the classroomID
	 */</comment>
	<function><type><specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">int</name></type> <name pos:line="27" pos:column="20">getClassroomID</name><parameter_list pos:line="27" pos:column="34">()</parameter_list> <block pos:line="27" pos:column="37">{
		<return pos:line="28" pos:column="17">return <expr><name pos:line="28" pos:column="24">classroomID</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="31" pos:column="9">/**
	 * @return the classroomName
	 */</comment>
	<function><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">ClassroomName</name></type> <name pos:line="34" pos:column="30">getClassroomName</name><parameter_list pos:line="34" pos:column="46">()</parameter_list> <block pos:line="34" pos:column="49">{
		<return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">classroomName</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="38" pos:column="9">/**
	 * @return the classroomLocation
	 */</comment>
	<function><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">ClassroomLocation</name></type> <name pos:line="41" pos:column="34">getClassroomLocation</name><parameter_list pos:line="41" pos:column="54">()</parameter_list> <block pos:line="41" pos:column="57">{
		<return pos:line="42" pos:column="17">return <expr><name pos:line="42" pos:column="24">classroomLocation</name></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc" pos:line="45" pos:column="9">/**
	 * @return the classroomCapacity
	 */</comment>
	<function><type><specifier pos:line="48" pos:column="9">public</specifier> <name pos:line="48" pos:column="16">int</name></type> <name pos:line="48" pos:column="20">getClassroomCapacity</name><parameter_list pos:line="48" pos:column="40">()</parameter_list> <block pos:line="48" pos:column="43">{
		<return pos:line="49" pos:column="17">return <expr><name pos:line="49" pos:column="24">classroomCapacity</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="52" pos:column="9">/*
	 * Retrieve the class room details using the class room id and initialize the instance variables
	 */</comment>
	<constructor><specifier pos:line="55" pos:column="9">public</specifier> <name pos:line="55" pos:column="16">Classroom</name><parameter_list pos:line="55" pos:column="25">(<param><decl><type><name pos:line="55" pos:column="26">int</name></type> <name pos:line="55" pos:column="30">classroomID</name></decl></param>)</parameter_list><block pos:line="55" pos:column="42">{
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">this</name><op:operator pos:line="56" pos:column="21">.</op:operator><name pos:line="56" pos:column="22">classroomID</name></name> <op:operator pos:line="56" pos:column="34">=</op:operator> <name pos:line="56" pos:column="36">classroomID</name></expr>;</expr_stmt>
		<try pos:line="57" pos:column="17">try<block pos:line="57" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">Connection</name></type> <name pos:line="58" pos:column="36">conn</name> <init pos:line="58" pos:column="41">= <expr><call><name><name pos:line="58" pos:column="43">Database</name><op:operator pos:line="58" pos:column="51">.</op:operator><name pos:line="58" pos:column="52">getConnection</name></name><argument_list pos:line="58" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="60" pos:column="25">try<block pos:line="60" pos:column="28">{
				<if pos:line="61" pos:column="33">if<condition pos:line="61" pos:column="35">(<expr><name pos:line="61" pos:column="36">conn</name> <op:operator pos:line="61" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="61" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="61" pos:column="49">{
					<comment type="block" pos:line="62" pos:column="41">/*
					 * Try to retrieve the classroom from the database
					 */</comment>
					<decl_stmt><decl><type><name pos:line="65" pos:column="41">String</name></type> <name pos:line="65" pos:column="48">ClassroomSelect</name> <init pos:line="65" pos:column="64">= <expr><lit:literal type="string" pos:line="65" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="66" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="66" pos:column="59">" FROM classroom"</lit:literal>
							<op:operator pos:line="67" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="67" pos:column="59">" WHERE classroomID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="68" pos:column="41">PreparedStatement</name></type> <name pos:line="68" pos:column="59">statement</name> <init pos:line="68" pos:column="69">= <expr><call><name><name pos:line="68" pos:column="71">conn</name><op:operator pos:line="68" pos:column="75">.</op:operator><name pos:line="68" pos:column="76">prepareStatement</name></name><argument_list pos:line="68" pos:column="92">(<argument><expr><name pos:line="68" pos:column="93">ClassroomSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="69" pos:column="41">statement</name><op:operator pos:line="69" pos:column="50">.</op:operator><name pos:line="69" pos:column="51">setInt</name></name><argument_list pos:line="69" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="69" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="61">classroomID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="70" pos:column="41">ResultSet</name></type> <name pos:line="70" pos:column="51">rs</name> <init pos:line="70" pos:column="54">= <expr><call><name><name pos:line="70" pos:column="56">statement</name><op:operator pos:line="70" pos:column="65">.</op:operator><name pos:line="70" pos:column="66">executeQuery</name></name><argument_list pos:line="70" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="72" pos:column="41">/*
					 * If the classroom is found, initialize the class instance variables with the retrieved values
					 */</comment>
					<if pos:line="75" pos:column="41">if<condition pos:line="75" pos:column="43">(<expr><call><name><name pos:line="75" pos:column="44">rs</name><op:operator pos:line="75" pos:column="46">.</op:operator><name pos:line="75" pos:column="47">first</name></name><argument_list pos:line="75" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="75" pos:column="55">{

						<expr_stmt><expr><call><name><name pos:line="77" pos:column="49">DBAnnotation</name><op:operator pos:line="77" pos:column="61">.</op:operator><name pos:line="77" pos:column="62">annoate</name></name><argument_list pos:line="77" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="70">"classroomCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="91">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="77" pos:column="104">"ClasssroomCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="77" pos:column="126">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="78" pos:column="49">int</name></type> <name pos:line="78" pos:column="53">classroomCapacity</name> <init pos:line="78" pos:column="71">= <expr><call><name><name pos:line="78" pos:column="73">rs</name><op:operator pos:line="78" pos:column="75">.</op:operator><name pos:line="78" pos:column="76">getInt</name></name><argument_list pos:line="78" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="83">"ClassroomCapacity"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="80" pos:column="49">DBAnnotation</name><op:operator pos:line="80" pos:column="61">.</op:operator><name pos:line="80" pos:column="62">annoate</name></name><argument_list pos:line="80" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="70">"classroomName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="87">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="100">"ClasssroomName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="80" pos:column="118">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="81" pos:column="49">String</name></type> <name pos:line="81" pos:column="56">classroomName</name> <init pos:line="81" pos:column="70">= <expr><call><name><name pos:line="81" pos:column="72">rs</name><op:operator pos:line="81" pos:column="74">.</op:operator><name pos:line="81" pos:column="75">getString</name></name><argument_list pos:line="81" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="85">"ClassroomName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 						
						
						<expr_stmt><expr><call><name><name pos:line="83" pos:column="49">DBAnnotation</name><op:operator pos:line="83" pos:column="61">.</op:operator><name pos:line="83" pos:column="62">annoate</name></name><argument_list pos:line="83" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="70">"classroomLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="91">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="83" pos:column="104">"ClasssroomLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="83" pos:column="126">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="84" pos:column="49">String</name></type> <name pos:line="84" pos:column="56">classroomLocation</name> <init pos:line="84" pos:column="74">= <expr><call><name><name pos:line="84" pos:column="76">rs</name><op:operator pos:line="84" pos:column="78">.</op:operator><name pos:line="84" pos:column="79">getString</name></name><argument_list pos:line="84" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="89">"ClassroomLocation"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><name><name pos:line="86" pos:column="49">this</name><op:operator pos:line="86" pos:column="53">.</op:operator><name pos:line="86" pos:column="54">classroomCapacity</name></name> <op:operator pos:line="86" pos:column="72">=</op:operator> <name pos:line="86" pos:column="74">classroomCapacity</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="87" pos:column="49">this</name><op:operator pos:line="87" pos:column="53">.</op:operator><name pos:line="87" pos:column="54">classroomName</name></name> <op:operator pos:line="87" pos:column="68">=</op:operator> <call><name><name pos:line="87" pos:column="70">ClassroomName</name><op:operator pos:line="87" pos:column="83">.</op:operator><name pos:line="87" pos:column="84">valueOf</name></name><argument_list pos:line="87" pos:column="91">(<argument><expr><name pos:line="87" pos:column="92">classroomName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="88" pos:column="49">this</name><op:operator pos:line="88" pos:column="53">.</op:operator><name pos:line="88" pos:column="54">classroomLocation</name></name> <op:operator pos:line="88" pos:column="72">=</op:operator> <call><name><name pos:line="88" pos:column="74">ClassroomLocation</name><op:operator pos:line="88" pos:column="91">.</op:operator><name pos:line="88" pos:column="92">valueOf</name></name><argument_list pos:line="88" pos:column="99">(<argument><expr><name pos:line="88" pos:column="100">classroomLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="91" pos:column="41">else<block pos:line="91" pos:column="45">{
						<comment type="block" pos:line="92" pos:column="49">/*
						 * Throw the exception if the class room is not found
						 */</comment>
						<throw pos:line="95" pos:column="49">throw <expr><op:operator pos:line="95" pos:column="55">new</op:operator> <call><name pos:line="95" pos:column="59">IllegalArgumentException</name><argument_list pos:line="95" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="84">"Classroom does ot exist"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="102" pos:column="25">catch<parameter_list pos:line="102" pos:column="30">(<param><decl><type><name pos:line="102" pos:column="31">SQLException</name></type> <name pos:line="102" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="102" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">System</name><op:operator pos:line="103" pos:column="39">.</op:operator><name pos:line="103" pos:column="40">out</name><op:operator pos:line="103" pos:column="43">.</op:operator><name pos:line="103" pos:column="44">println</name></name><argument_list pos:line="103" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="52">"Error retreiving classroom"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">System</name><op:operator pos:line="104" pos:column="39">.</op:operator><name pos:line="104" pos:column="40">out</name><op:operator pos:line="104" pos:column="43">.</op:operator><name pos:line="104" pos:column="44">println</name></name><argument_list pos:line="104" pos:column="51">(<argument><expr><call><name><name pos:line="104" pos:column="52">e</name><op:operator pos:line="104" pos:column="53">.</op:operator><name pos:line="104" pos:column="54">getMessage</name></name><argument_list pos:line="104" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">e</name><op:operator pos:line="105" pos:column="34">.</op:operator><name pos:line="105" pos:column="35">printStackTrace</name></name><argument_list pos:line="105" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="110" pos:column="17">finally<block pos:line="110" pos:column="24">{
		}</block></finally></try>

	}</block></constructor>
		
	
	<comment type="block" pos:line="116" pos:column="9">/*
	 * Add a new classroom to the classroom list
	 * Not used currently in the main code
	 */</comment>
	<function><type><specifier pos:line="120" pos:column="9">public</specifier> <specifier pos:line="120" pos:column="16">static</specifier> <name pos:line="120" pos:column="23">boolean</name></type> <name pos:line="120" pos:column="31">addNewClassroom</name><parameter_list pos:line="120" pos:column="46">(<param><decl><type><name pos:line="120" pos:column="47">ClassroomName</name></type> <name pos:line="120" pos:column="61">classroomName</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="76">ClassroomLocation</name></type> <name pos:line="120" pos:column="94">classroomLocation</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="113">int</name></type> <name pos:line="120" pos:column="117">capacity</name></decl></param>)</parameter_list><block pos:line="120" pos:column="126">{
		<if pos:line="121" pos:column="17">if<condition pos:line="121" pos:column="19">(<expr><name pos:line="121" pos:column="20">classroomName</name> <op:operator pos:line="121" pos:column="34">==</op:operator> <lit:literal type="null" pos:line="121" pos:column="37">null</lit:literal> <op:operator pos:line="121" pos:column="42">||</op:operator> <name pos:line="121" pos:column="45">classroomLocation</name> <op:operator pos:line="121" pos:column="63">==</op:operator> <lit:literal type="null" pos:line="121" pos:column="66">null</lit:literal> <op:operator pos:line="121" pos:column="71">||</op:operator> <name pos:line="121" pos:column="74">capacity</name> <op:operator pos:line="121" pos:column="83">&lt;=</op:operator><lit:literal type="number" pos:line="121" pos:column="85">0</lit:literal></expr>)</condition><then pos:line="121" pos:column="87">
			<return pos:line="122" pos:column="25">return <expr><lit:literal type="boolean" pos:line="122" pos:column="32">false</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">boolean</name></type> <name pos:line="124" pos:column="25">isAdded</name> <init pos:line="124" pos:column="33">= <expr><lit:literal type="boolean" pos:line="124" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="125" pos:column="17">try<block pos:line="125" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="126" pos:column="25">Connection</name></type> <name pos:line="126" pos:column="36">conn</name> <init pos:line="126" pos:column="41">= <expr><call><name><name pos:line="126" pos:column="43">Database</name><op:operator pos:line="126" pos:column="51">.</op:operator><name pos:line="126" pos:column="52">getConnection</name></name><argument_list pos:line="126" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="127" pos:column="25">String</name></type> <name pos:line="127" pos:column="32">name</name> <init pos:line="127" pos:column="37">= <expr><call><name><name pos:line="127" pos:column="39">classroomName</name><op:operator pos:line="127" pos:column="52">.</op:operator><name pos:line="127" pos:column="53">toString</name></name><argument_list pos:line="127" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="128" pos:column="25">String</name></type> <name pos:line="128" pos:column="32">location</name> <init pos:line="128" pos:column="41">= <expr><call><name><name pos:line="128" pos:column="43">classroomLocation</name><op:operator pos:line="128" pos:column="60">.</op:operator><name pos:line="128" pos:column="61">toString</name></name><argument_list pos:line="128" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="130" pos:column="25">try<block pos:line="130" pos:column="28">{
				<if pos:line="131" pos:column="33">if<condition pos:line="131" pos:column="35">(<expr><name pos:line="131" pos:column="36">conn</name> <op:operator pos:line="131" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="131" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="131" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="132" pos:column="41">String</name></type> <name pos:line="132" pos:column="48">classroomSelect</name> <init pos:line="132" pos:column="64">= <expr><lit:literal type="string" pos:line="132" pos:column="66">"Select ClassroomName"</lit:literal>
							<op:operator pos:line="133" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="133" pos:column="59">" FROM classroom"</lit:literal>
							<op:operator pos:line="134" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="134" pos:column="59">" WHERE ClassroomName= ? AND ClassroomLocation= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="135" pos:column="41">PreparedStatement</name></type> <name pos:line="135" pos:column="59">statement</name> <init pos:line="135" pos:column="69">= <expr><call><name><name pos:line="135" pos:column="71">conn</name><op:operator pos:line="135" pos:column="75">.</op:operator><name pos:line="135" pos:column="76">prepareStatement</name></name><argument_list pos:line="135" pos:column="92">(<argument><expr><name pos:line="135" pos:column="93">classroomSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="136" pos:column="41">statement</name><op:operator pos:line="136" pos:column="50">.</op:operator><name pos:line="136" pos:column="51">setString</name></name><argument_list pos:line="136" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="136" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="64">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="137" pos:column="41">statement</name><op:operator pos:line="137" pos:column="50">.</op:operator><name pos:line="137" pos:column="51">setString</name></name><argument_list pos:line="137" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="137" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="64">location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="138" pos:column="41">ResultSet</name></type> <name pos:line="138" pos:column="51">rs</name> <init pos:line="138" pos:column="54">= <expr><call><name><name pos:line="138" pos:column="56">statement</name><op:operator pos:line="138" pos:column="65">.</op:operator><name pos:line="138" pos:column="66">executeQuery</name></name><argument_list pos:line="138" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="140" pos:column="41">if<condition pos:line="140" pos:column="43">(<expr><call><name><name pos:line="140" pos:column="44">rs</name><op:operator pos:line="140" pos:column="46">.</op:operator><name pos:line="140" pos:column="47">first</name></name><argument_list pos:line="140" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="140" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="141" pos:column="49">System</name><op:operator pos:line="141" pos:column="55">.</op:operator><name pos:line="141" pos:column="56">out</name><op:operator pos:line="141" pos:column="59">.</op:operator><name pos:line="141" pos:column="60">println</name></name><argument_list pos:line="141" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="68">"Class room already exists"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="142" pos:column="49">isAdded</name> <op:operator pos:line="142" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="59">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="145" pos:column="41">else<block pos:line="145" pos:column="45">{
						<decl_stmt><decl><type><name pos:line="146" pos:column="49">String</name></type> <name pos:line="146" pos:column="56">classroomInsert</name> <init pos:line="146" pos:column="72">= <expr><lit:literal type="string" pos:line="146" pos:column="74">"Insert into classroom"</lit:literal>
								<op:operator pos:line="147" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="147" pos:column="67">" (ClassroomName, ClassroomLocation, ClassroomCapacity)"</lit:literal>
								<op:operator pos:line="148" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="148" pos:column="67">" Values(?,?,?)"</lit:literal></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name pos:line="149" pos:column="49">statement</name> <op:operator pos:line="149" pos:column="59">=</op:operator> <call><name><name pos:line="149" pos:column="61">conn</name><op:operator pos:line="149" pos:column="65">.</op:operator><name pos:line="149" pos:column="66">prepareStatement</name></name><argument_list pos:line="149" pos:column="82">(<argument><expr><name pos:line="149" pos:column="83">classroomInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="150" pos:column="49">statement</name><op:operator pos:line="150" pos:column="58">.</op:operator><name pos:line="150" pos:column="59">setString</name></name><argument_list pos:line="150" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="72">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="151" pos:column="49">statement</name><op:operator pos:line="151" pos:column="58">.</op:operator><name pos:line="151" pos:column="59">setString</name></name><argument_list pos:line="151" pos:column="68">(<argument><expr><lit:literal type="number" pos:line="151" pos:column="69">2</lit:literal></expr></argument>, <argument><expr><name pos:line="151" pos:column="72">location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="152" pos:column="49">statement</name><op:operator pos:line="152" pos:column="58">.</op:operator><name pos:line="152" pos:column="59">setInt</name></name><argument_list pos:line="152" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="152" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><name pos:line="152" pos:column="69">capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="153" pos:column="49">statement</name><op:operator pos:line="153" pos:column="58">.</op:operator><name pos:line="153" pos:column="59">executeUpdate</name></name><argument_list pos:line="153" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="154" pos:column="49">Database</name><op:operator pos:line="154" pos:column="57">.</op:operator><name pos:line="154" pos:column="58">commitTransaction</name></name><argument_list pos:line="154" pos:column="75">(<argument><expr><name pos:line="154" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="155" pos:column="49">isAdded</name> <op:operator pos:line="155" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="155" pos:column="59">true</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
			}</block>
			
			<catch pos:line="160" pos:column="25">catch<parameter_list pos:line="160" pos:column="30">(<param><decl><type><name pos:line="160" pos:column="31">SQLException</name></type> <name pos:line="160" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="160" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="161" pos:column="33">System</name><op:operator pos:line="161" pos:column="39">.</op:operator><name pos:line="161" pos:column="40">out</name><op:operator pos:line="161" pos:column="43">.</op:operator><name pos:line="161" pos:column="44">println</name></name><argument_list pos:line="161" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="52">"Error adding classroom:"</lit:literal><op:operator pos:line="161" pos:column="77">+</op:operator><name pos:line="161" pos:column="78">name</name><op:operator pos:line="161" pos:column="82">+</op:operator><lit:literal type="string" pos:line="161" pos:column="83">" "</lit:literal><op:operator pos:line="161" pos:column="86">+</op:operator><name pos:line="161" pos:column="87">location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">System</name><op:operator pos:line="162" pos:column="39">.</op:operator><name pos:line="162" pos:column="40">out</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">println</name></name><argument_list pos:line="162" pos:column="51">(<argument><expr><call><name><name pos:line="162" pos:column="52">e</name><op:operator pos:line="162" pos:column="53">.</op:operator><name pos:line="162" pos:column="54">getMessage</name></name><argument_list pos:line="162" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="163" pos:column="33">//e.printStackTrace();</comment>
			}</block></catch></try>
			
		}</block>
		
		<finally pos:line="168" pos:column="17">finally<block pos:line="168" pos:column="24">{
		}</block></finally></try>
		<return pos:line="170" pos:column="17">return <expr><name pos:line="170" pos:column="24">isAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="173" pos:column="9">/*
	 * Returns the empty time slot from the classroom
	 */</comment>
	<function><type><specifier pos:line="176" pos:column="9">public</specifier> <name pos:line="176" pos:column="16">Timeslots</name></type> <name pos:line="176" pos:column="26">getEmptySlot</name><parameter_list pos:line="176" pos:column="38">(<param><decl><type><name pos:line="176" pos:column="39">int</name></type> <name pos:line="176" pos:column="43">timeSlotType</name></decl></param>)</parameter_list><block pos:line="176" pos:column="56">{
		<comment type="block" pos:line="177" pos:column="17">/*
		 * Checks of the timeslot type is a valid type
		 */</comment>
		<if pos:line="180" pos:column="17">if<condition pos:line="180" pos:column="19">(<expr><op:operator pos:line="180" pos:column="20">!</op:operator><call><name pos:line="180" pos:column="21">checkTimeSlotType</name><argument_list pos:line="180" pos:column="38">(<argument><expr><name pos:line="180" pos:column="39">timeSlotType</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="180" pos:column="53">{
			<expr_stmt><expr><call><name><name pos:line="181" pos:column="25">System</name><op:operator pos:line="181" pos:column="31">.</op:operator><name pos:line="181" pos:column="32">out</name><op:operator pos:line="181" pos:column="35">.</op:operator><name pos:line="181" pos:column="36">println</name></name><argument_list pos:line="181" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="44">"Timeslot type is incorrect"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="182" pos:column="25">return <expr><lit:literal type="null" pos:line="182" pos:column="32">null</lit:literal></expr>;</return>
		}</block></then></if>
		
		<comment type="block" pos:line="185" pos:column="17">/*
		 * Calls the function to find all empty timeslot for the classroom
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="188" pos:column="17">ArrayList</name><argument_list pos:line="188" pos:column="26">&lt;<argument><name pos:line="188" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="38">emptySlots</name> <init pos:line="188" pos:column="49">= <expr><call><name pos:line="188" pos:column="51">findOpenSlotsForClassroom</name><argument_list pos:line="188" pos:column="76">(<argument><expr><name pos:line="188" pos:column="77">timeSlotType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">int</name></type> <name pos:line="189" pos:column="21">size</name> <init pos:line="189" pos:column="26">= <expr><call><name><name pos:line="189" pos:column="28">emptySlots</name><op:operator pos:line="189" pos:column="38">.</op:operator><name pos:line="189" pos:column="39">size</name></name><argument_list pos:line="189" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="190" pos:column="17">if<condition pos:line="190" pos:column="19">(<expr><name pos:line="190" pos:column="20">size</name><op:operator pos:line="190" pos:column="24">&gt;</op:operator><lit:literal type="number" pos:line="190" pos:column="25">0</lit:literal></expr>)</condition><then><block pos:line="190" pos:column="27">{
			<expr_stmt><expr><call><name><name pos:line="191" pos:column="25">System</name><op:operator pos:line="191" pos:column="31">.</op:operator><name pos:line="191" pos:column="32">out</name><op:operator pos:line="191" pos:column="35">.</op:operator><name pos:line="191" pos:column="36">println</name></name><argument_list pos:line="191" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="44">"--------------Found and empty time slot---------------"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block" pos:line="192" pos:column="25">/*
			 * if empty timeslot is found it returns a random empty time slot from the list
			 */</comment>
			<expr_stmt><expr><call><name><name pos:line="195" pos:column="25">Collections</name><op:operator pos:line="195" pos:column="36">.</op:operator><name pos:line="195" pos:column="37">shuffle</name></name><argument_list pos:line="195" pos:column="44">(<argument><expr><name pos:line="195" pos:column="45">emptySlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="196" pos:column="25">return <expr><call><name><name pos:line="196" pos:column="32">emptySlots</name><op:operator pos:line="196" pos:column="42">.</op:operator><name pos:line="196" pos:column="43">get</name></name><argument_list pos:line="196" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="196" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then>
		<comment type="block" pos:line="198" pos:column="17">/*
		 * No empty timeslot is found
		 */</comment>
		<else pos:line="201" pos:column="17">else <return pos:line="201" pos:column="22">return <expr><lit:literal type="null" pos:line="201" pos:column="29">null</lit:literal></expr>;</return></else></if>
	}</block></function>
	
	
	<comment type="block" pos:line="205" pos:column="9">/*
	 * Method to check the validity of the time slot type parameter
	 */</comment>
	<function><type><specifier pos:line="208" pos:column="9">public</specifier> <specifier pos:line="208" pos:column="16">static</specifier> <name pos:line="208" pos:column="23">boolean</name></type> <name pos:line="208" pos:column="31">checkTimeSlotType</name><parameter_list pos:line="208" pos:column="48">(<param><decl><type><name pos:line="208" pos:column="49">int</name></type> <name pos:line="208" pos:column="53">timeSlotType</name></decl></param>)</parameter_list><block pos:line="208" pos:column="66">{
		<return pos:line="209" pos:column="17">return <expr><op:operator pos:line="209" pos:column="24">(</op:operator><name pos:line="209" pos:column="25">timeSlotType</name> <op:operator pos:line="209" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="209" pos:column="41">1</lit:literal> <op:operator pos:line="209" pos:column="43">||</op:operator> <name pos:line="209" pos:column="46">timeSlotType</name> <op:operator pos:line="209" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="209" pos:column="62">2</lit:literal><op:operator pos:line="209" pos:column="63">)</op:operator></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="212" pos:column="9">/*
	 * Returns a classroom object with at least one empty time slot for scheduling a course
	 */</comment>
	<function><type><specifier pos:line="215" pos:column="9">public</specifier> <specifier pos:line="215" pos:column="16">static</specifier> <name pos:line="215" pos:column="23">Classroom</name></type> <name pos:line="215" pos:column="33">getEmptyClassroom</name><parameter_list pos:line="215" pos:column="50">(<param><decl><type><name pos:line="215" pos:column="51">ClassroomLocation</name></type> <name pos:line="215" pos:column="69">location</name></decl></param>, <param><decl><type><name pos:line="215" pos:column="79">int</name></type> <name pos:line="215" pos:column="83">timeSlotType</name></decl></param>, <param><decl><type><name pos:line="215" pos:column="97">int</name></type> <name pos:line="215" pos:column="101">expectedCapacity</name></decl></param>)</parameter_list><block pos:line="215" pos:column="118">{

		<if pos:line="217" pos:column="17">if<condition pos:line="217" pos:column="19">(<expr><name pos:line="217" pos:column="20">location</name> <op:operator pos:line="217" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="217" pos:column="32">null</lit:literal> <op:operator pos:line="217" pos:column="37">||</op:operator> <name pos:line="217" pos:column="40">expectedCapacity</name><op:operator pos:line="217" pos:column="56">&lt;=</op:operator><lit:literal type="number" pos:line="217" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="217" pos:column="60">
			<return pos:line="218" pos:column="25">return <expr><lit:literal type="null" pos:line="218" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<if pos:line="220" pos:column="17">if<condition pos:line="220" pos:column="19">(<expr><op:operator pos:line="220" pos:column="20">!</op:operator><call><name pos:line="220" pos:column="21">checkTimeSlotType</name><argument_list pos:line="220" pos:column="38">(<argument><expr><name pos:line="220" pos:column="39">timeSlotType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="220" pos:column="53">
			<return pos:line="221" pos:column="25">return <expr><lit:literal type="null" pos:line="221" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="223" pos:column="17">ArrayList</name><argument_list pos:line="223" pos:column="26">&lt;<argument><name pos:line="223" pos:column="27">ClassroomName</name></argument>&gt;</argument_list></name></type> <name pos:line="223" pos:column="42">names</name> <init pos:line="223" pos:column="48">= <expr><op:operator pos:line="223" pos:column="50">new</op:operator> <call><name><name pos:line="223" pos:column="54">ArrayList</name><argument_list pos:line="223" pos:column="63">&lt;<argument><name pos:line="223" pos:column="64">ClassroomName</name></argument>&gt;</argument_list></name><argument_list pos:line="223" pos:column="78">(<argument><expr><call><name><name pos:line="223" pos:column="79">Arrays</name><op:operator pos:line="223" pos:column="85">.</op:operator><name pos:line="223" pos:column="86">asList</name></name><argument_list pos:line="223" pos:column="92">(<argument><expr><call><name><name pos:line="223" pos:column="93">ClassroomName</name><op:operator pos:line="223" pos:column="106">.</op:operator><name pos:line="223" pos:column="107">values</name></name><argument_list pos:line="223" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block" pos:line="224" pos:column="17">/*
		 * Shuffle all the classrooms names for randomness in scheduling
		 */</comment>
		<expr_stmt><expr><call><name><name pos:line="227" pos:column="17">Collections</name><op:operator pos:line="227" pos:column="28">.</op:operator><name pos:line="227" pos:column="29">shuffle</name></name><argument_list pos:line="227" pos:column="36">(<argument><expr><name pos:line="227" pos:column="37">names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="228" pos:column="17">Classroom</name></type> <name pos:line="228" pos:column="27">c</name> <init pos:line="228" pos:column="29">= <expr><lit:literal type="null" pos:line="228" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="229" pos:column="17">ArrayList</name><argument_list pos:line="229" pos:column="26">&lt;<argument><name pos:line="229" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="229" pos:column="38">times</name> <init pos:line="229" pos:column="44">= <expr><lit:literal type="null" pos:line="229" pos:column="46">null</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="block" pos:line="230" pos:column="17">/*
		 * Start searching for the classroom with a empty timeslot
		 * Search one classroom at a time
		 */</comment>
		<for pos:line="234" pos:column="17">for(<init><decl><type><name pos:line="234" pos:column="21">ClassroomName</name></type> <name pos:line="234" pos:column="35">name</name><range pos:line="234" pos:column="39">:<expr><name pos:line="234" pos:column="40">names</name></expr></range></decl></init>)<block pos:line="234" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="235" pos:column="25">int</name></type> <name pos:line="235" pos:column="29">classID</name> <init pos:line="235" pos:column="37">= <expr><call><name pos:line="235" pos:column="39">getClassID</name><argument_list pos:line="235" pos:column="49">(<argument><expr><name pos:line="235" pos:column="50">name</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="56">location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="236" pos:column="25">if<condition pos:line="236" pos:column="27">(<expr><name pos:line="236" pos:column="28">classID</name> <op:operator pos:line="236" pos:column="36">!=</op:operator> <op:operator pos:line="236" pos:column="39">-</op:operator><lit:literal type="number" pos:line="236" pos:column="40">1</lit:literal></expr>)</condition><then><block pos:line="236" pos:column="42">{
				<expr_stmt><expr><name pos:line="237" pos:column="33">c</name> <op:operator pos:line="237" pos:column="35">=</op:operator> <op:operator pos:line="237" pos:column="37">new</op:operator> <call><name pos:line="237" pos:column="41">Classroom</name><argument_list pos:line="237" pos:column="50">(<argument><expr><name pos:line="237" pos:column="51">classID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="238" pos:column="33">if<condition pos:line="238" pos:column="35">(<expr><name pos:line="238" pos:column="36">c</name><op:operator pos:line="238" pos:column="37">!=</op:operator><lit:literal type="null" pos:line="238" pos:column="39">null</lit:literal></expr>)</condition><then><block pos:line="238" pos:column="44">{
					<comment type="line" pos:line="239" pos:column="41">//System.out.println("Call findEmptySlotsForClassroom for just checking. Not retreiving");</comment>
					<comment type="block" pos:line="240" pos:column="41">/*
					 * Check the capacity of the classroom and the required capacity
					 */</comment>
					<expr_stmt><expr><call><name><name pos:line="243" pos:column="41">DBAnnotation</name><op:operator pos:line="243" pos:column="53">.</op:operator><name pos:line="243" pos:column="54">annoate</name></name><argument_list pos:line="243" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="62">"classCap"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="74">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="87">"ClassroomCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="243" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="244" pos:column="41">int</name></type> <name pos:line="244" pos:column="45">classCap</name> <init pos:line="244" pos:column="54">= <expr><call><name><name pos:line="244" pos:column="56">c</name><op:operator pos:line="244" pos:column="57">.</op:operator><name pos:line="244" pos:column="58">getClassroomCapacity</name></name><argument_list pos:line="244" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="245" pos:column="41">if<condition pos:line="245" pos:column="43">(<expr><name pos:line="245" pos:column="44">classCap</name> <op:operator pos:line="245" pos:column="53">&gt;=</op:operator> <name pos:line="245" pos:column="56">expectedCapacity</name></expr>)</condition><then><block pos:line="245" pos:column="73">{
						<comment type="block" pos:line="246" pos:column="49">/*
						 * Find empty timeslot for the classroom
						 */</comment>
						<expr_stmt><expr><name pos:line="249" pos:column="49">times</name> <op:operator pos:line="249" pos:column="55">=</op:operator> <call><name><name pos:line="249" pos:column="57">c</name><op:operator pos:line="249" pos:column="58">.</op:operator><name pos:line="249" pos:column="59">findOpenSlotsForClassroom</name></name><argument_list pos:line="249" pos:column="84">(<argument><expr><name pos:line="249" pos:column="85">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<comment type="block" pos:line="250" pos:column="49">/*
						 * If atleast one empty slot is found, return the classroom in which it was found
						 */</comment>
						<if pos:line="253" pos:column="49">if<condition pos:line="253" pos:column="51">(<expr><call><name><name pos:line="253" pos:column="52">times</name><op:operator pos:line="253" pos:column="57">.</op:operator><name pos:line="253" pos:column="58">size</name></name><argument_list pos:line="253" pos:column="62">()</argument_list></call><op:operator pos:line="253" pos:column="64">&gt;</op:operator><lit:literal type="number" pos:line="253" pos:column="65">0</lit:literal></expr>)</condition><then><block pos:line="253" pos:column="67">{
							<expr_stmt><expr><call><name><name pos:line="254" pos:column="57">DBAnnotation</name><op:operator pos:line="254" pos:column="69">.</op:operator><name pos:line="254" pos:column="70">annoate</name></name><argument_list pos:line="254" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="78">"loc"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="85">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="98">"ClassroomLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="254" pos:column="119">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="255" pos:column="57">ClassroomLocation</name></type> <name pos:line="255" pos:column="75">loc</name> <init pos:line="255" pos:column="79">= <expr><call><name><name pos:line="255" pos:column="81">c</name><op:operator pos:line="255" pos:column="82">.</op:operator><name pos:line="255" pos:column="83">getClassroomLocation</name></name><argument_list pos:line="255" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="257" pos:column="57">DBAnnotation</name><op:operator pos:line="257" pos:column="69">.</op:operator><name pos:line="257" pos:column="70">annoate</name></name><argument_list pos:line="257" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="78">"cName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="257" pos:column="87">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="257" pos:column="100">"ClassroomName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="257" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="258" pos:column="57">ClassroomName</name></type> <name pos:line="258" pos:column="71">cName</name> <init pos:line="258" pos:column="77">= <expr><call><name><name pos:line="258" pos:column="79">c</name><op:operator pos:line="258" pos:column="80">.</op:operator><name pos:line="258" pos:column="81">getClassroomName</name></name><argument_list pos:line="258" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="260" pos:column="57">System</name><op:operator pos:line="260" pos:column="63">.</op:operator><name pos:line="260" pos:column="64">out</name><op:operator pos:line="260" pos:column="67">.</op:operator><name pos:line="260" pos:column="68">println</name></name><argument_list pos:line="260" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="76">"Found a classroom with empty time slots:"</lit:literal><op:operator pos:line="260" pos:column="118">+</op:operator><call><name><name pos:line="260" pos:column="119">cName</name><op:operator pos:line="260" pos:column="124">.</op:operator><name pos:line="260" pos:column="125">toString</name></name><argument_list pos:line="260" pos:column="133">()</argument_list></call><op:operator pos:line="260" pos:column="135">+</op:operator><lit:literal type="string" pos:line="260" pos:column="136">" "</lit:literal>
									<op:operator pos:line="261" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="261" pos:column="75">""</lit:literal><op:operator pos:line="261" pos:column="77">+</op:operator> <call><name><name pos:line="261" pos:column="79">loc</name><op:operator pos:line="261" pos:column="82">.</op:operator><name pos:line="261" pos:column="83">toString</name></name><argument_list pos:line="261" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break pos:line="262" pos:column="57">break;</break>
						}</block></then></if>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="265" pos:column="41">c</name> <op:operator pos:line="265" pos:column="43">=</op:operator> <lit:literal type="null" pos:line="265" pos:column="45">null</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		
		<return pos:line="270" pos:column="17">return <expr><name pos:line="270" pos:column="24">c</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="273" pos:column="9">/*
	 * Get the classroom id for the specified location and name
	 */</comment>
	<function><type><specifier pos:line="276" pos:column="9">public</specifier> <specifier pos:line="276" pos:column="16">static</specifier> <name pos:line="276" pos:column="23">int</name></type> <name pos:line="276" pos:column="27">getClassID</name><parameter_list pos:line="276" pos:column="37">(<param><decl><type><name pos:line="276" pos:column="38">ClassroomName</name></type> <name pos:line="276" pos:column="52">name</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="58">ClassroomLocation</name></type> <name pos:line="276" pos:column="76">location</name></decl></param>)</parameter_list><block pos:line="276" pos:column="85">{
		<if pos:line="277" pos:column="17">if<condition pos:line="277" pos:column="19">(<expr><name pos:line="277" pos:column="20">location</name> <op:operator pos:line="277" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="277" pos:column="32">null</lit:literal> <op:operator pos:line="277" pos:column="37">||</op:operator> <name pos:line="277" pos:column="40">name</name><op:operator pos:line="277" pos:column="44">==</op:operator><lit:literal type="null" pos:line="277" pos:column="46">null</lit:literal></expr>)</condition><then pos:line="277" pos:column="51">
			<return pos:line="278" pos:column="25">return <expr><op:operator pos:line="278" pos:column="32">-</op:operator><lit:literal type="number" pos:line="278" pos:column="33">1</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name pos:line="280" pos:column="17">String</name></type> <name pos:line="280" pos:column="24">classroomName</name> <init pos:line="280" pos:column="38">= <expr><call><name><name pos:line="280" pos:column="40">name</name><op:operator pos:line="280" pos:column="44">.</op:operator><name pos:line="280" pos:column="45">toString</name></name><argument_list pos:line="280" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="281" pos:column="17">String</name></type> <name pos:line="281" pos:column="24">classroomLocation</name> <init pos:line="281" pos:column="42">= <expr><call><name><name pos:line="281" pos:column="44">location</name><op:operator pos:line="281" pos:column="52">.</op:operator><name pos:line="281" pos:column="53">toString</name></name><argument_list pos:line="281" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="282" pos:column="17">int</name></type> <name pos:line="282" pos:column="21">id</name> <init pos:line="282" pos:column="24">= <expr><op:operator pos:line="282" pos:column="26">-</op:operator><lit:literal type="number" pos:line="282" pos:column="27">1</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="283" pos:column="17">try<block pos:line="283" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="284" pos:column="25">Connection</name></type> <name pos:line="284" pos:column="36">conn</name> <init pos:line="284" pos:column="41">= <expr><call><name><name pos:line="284" pos:column="43">Database</name><op:operator pos:line="284" pos:column="51">.</op:operator><name pos:line="284" pos:column="52">getConnection</name></name><argument_list pos:line="284" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="286" pos:column="25">try<block pos:line="286" pos:column="28">{
				<if pos:line="287" pos:column="33">if<condition pos:line="287" pos:column="35">(<expr><name pos:line="287" pos:column="36">conn</name> <op:operator pos:line="287" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="287" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="287" pos:column="49">{
					
					<comment type="block" pos:line="289" pos:column="41">/*
					 * try to look for the classroom and location combination
					 */</comment>
					<decl_stmt><decl><type><name pos:line="292" pos:column="41">String</name></type> <name pos:line="292" pos:column="48">ClassroomSelect</name> <init pos:line="292" pos:column="64">= <expr><lit:literal type="string" pos:line="292" pos:column="66">"Select ClassroomID"</lit:literal>
							<op:operator pos:line="293" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="293" pos:column="59">" FROM classroom"</lit:literal>
							<op:operator pos:line="294" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="294" pos:column="59">" WHERE classroomName= ? and classroomLocation= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="295" pos:column="41">PreparedStatement</name></type> <name pos:line="295" pos:column="59">statement</name> <init pos:line="295" pos:column="69">= <expr><call><name><name pos:line="295" pos:column="71">conn</name><op:operator pos:line="295" pos:column="75">.</op:operator><name pos:line="295" pos:column="76">prepareStatement</name></name><argument_list pos:line="295" pos:column="92">(<argument><expr><name pos:line="295" pos:column="93">ClassroomSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="296" pos:column="41">statement</name><op:operator pos:line="296" pos:column="50">.</op:operator><name pos:line="296" pos:column="51">setString</name></name><argument_list pos:line="296" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="296" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="296" pos:column="64">classroomName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="297" pos:column="41">statement</name><op:operator pos:line="297" pos:column="50">.</op:operator><name pos:line="297" pos:column="51">setString</name></name><argument_list pos:line="297" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="297" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="297" pos:column="64">classroomLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="298" pos:column="41">ResultSet</name></type> <name pos:line="298" pos:column="51">rs</name> <init pos:line="298" pos:column="54">= <expr><call><name><name pos:line="298" pos:column="56">statement</name><op:operator pos:line="298" pos:column="65">.</op:operator><name pos:line="298" pos:column="66">executeQuery</name></name><argument_list pos:line="298" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="300" pos:column="41">/*
					 * If found, return the classroom id
					 */</comment>
					
					<if pos:line="304" pos:column="41">if<condition pos:line="304" pos:column="43">(<expr><call><name><name pos:line="304" pos:column="44">rs</name><op:operator pos:line="304" pos:column="46">.</op:operator><name pos:line="304" pos:column="47">first</name></name><argument_list pos:line="304" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="304" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="305" pos:column="49">DBAnnotation</name><op:operator pos:line="305" pos:column="61">.</op:operator><name pos:line="305" pos:column="62">annoate</name></name><argument_list pos:line="305" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="70">"classID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="305" pos:column="81">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="305" pos:column="94">"ClasssroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="305" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="306" pos:column="49">int</name></type> <name pos:line="306" pos:column="53">classID</name> <init pos:line="306" pos:column="61">= <expr><call><name><name pos:line="306" pos:column="63">rs</name><op:operator pos:line="306" pos:column="65">.</op:operator><name pos:line="306" pos:column="66">getInt</name></name><argument_list pos:line="306" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="73">"ClassroomID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name pos:line="307" pos:column="49">id</name> <op:operator pos:line="307" pos:column="52">=</op:operator> <name pos:line="307" pos:column="54">classID</name></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="310" pos:column="41">else<block pos:line="310" pos:column="45">{
						<comment type="block" pos:line="311" pos:column="49">/*
						 * Throw if the arguments are not valid
						 */</comment>
						<throw pos:line="314" pos:column="49">throw <expr><op:operator pos:line="314" pos:column="55">new</op:operator> <call><name pos:line="314" pos:column="59">IllegalArgumentException</name><argument_list pos:line="314" pos:column="83">()</argument_list></call></expr>;</throw>
					}</block></else></if>
										
					
				}</block></then>
				
				<else pos:line="320" pos:column="33">else<block pos:line="320" pos:column="37">{
					<throw pos:line="321" pos:column="41">throw <expr><op:operator pos:line="321" pos:column="47">new</op:operator> <call><name pos:line="321" pos:column="51">SQLException</name><argument_list pos:line="321" pos:column="63">()</argument_list></call></expr>;</throw>
				}</block></else></if>
			}</block>
			
			<catch pos:line="325" pos:column="25">catch<parameter_list pos:line="325" pos:column="30">(<param><decl><type><name pos:line="325" pos:column="31">SQLException</name></type> <name pos:line="325" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="325" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="326" pos:column="33">System</name><op:operator pos:line="326" pos:column="39">.</op:operator><name pos:line="326" pos:column="40">out</name><op:operator pos:line="326" pos:column="43">.</op:operator><name pos:line="326" pos:column="44">println</name></name><argument_list pos:line="326" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="326" pos:column="52">"Error retreiving classroom"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="327" pos:column="33">System</name><op:operator pos:line="327" pos:column="39">.</op:operator><name pos:line="327" pos:column="40">out</name><op:operator pos:line="327" pos:column="43">.</op:operator><name pos:line="327" pos:column="44">println</name></name><argument_list pos:line="327" pos:column="51">(<argument><expr><call><name><name pos:line="327" pos:column="52">e</name><op:operator pos:line="327" pos:column="53">.</op:operator><name pos:line="327" pos:column="54">getMessage</name></name><argument_list pos:line="327" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="328" pos:column="33">e</name><op:operator pos:line="328" pos:column="34">.</op:operator><name pos:line="328" pos:column="35">printStackTrace</name></name><argument_list pos:line="328" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
			
		}</block>
		
		<finally pos:line="334" pos:column="17">finally<block pos:line="334" pos:column="24">{
		}</block></finally></try>
		<comment type="block" pos:line="336" pos:column="17">/*
		 * Return the found id if the id was found, else return -1
		 */</comment>
		<return pos:line="339" pos:column="17">return <expr><name pos:line="339" pos:column="24">id</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="342" pos:column="9">/*
	 * Returns a empty hash map of empty classrooms as keys and array list of empty time slots as values
	 * Follows the same procedure as discussed above for finding out the empty classroom
	 * The only difference is that this function does not break when the first empty classroom is found
	 * It finds all the empty classrooms and returns
	 */</comment>
	<function><type><specifier pos:line="348" pos:column="9">public</specifier> <specifier pos:line="348" pos:column="16">static</specifier> <name><name pos:line="348" pos:column="23">LinkedHashMap</name><argument_list pos:line="348" pos:column="36">&lt;<argument><name pos:line="348" pos:column="37">Integer</name></argument>, <argument><name pos:line="348" pos:column="46">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="348" pos:column="57">getAllEmptyClassroom</name><parameter_list pos:line="348" pos:column="77">(<param><decl><type><name pos:line="348" pos:column="78">ClassroomLocation</name></type> <name pos:line="348" pos:column="96">location</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="106">int</name></type> <name pos:line="348" pos:column="110">timeSlotType</name></decl></param>, <param><decl><type><name pos:line="348" pos:column="124">int</name></type> <name pos:line="348" pos:column="128">expectedCapacity</name></decl></param>)</parameter_list><block pos:line="348" pos:column="145">{
		<if pos:line="349" pos:column="17">if<condition pos:line="349" pos:column="19">(<expr><name pos:line="349" pos:column="20">location</name> <op:operator pos:line="349" pos:column="29">==</op:operator> <lit:literal type="null" pos:line="349" pos:column="32">null</lit:literal> <op:operator pos:line="349" pos:column="37">||</op:operator> <op:operator pos:line="349" pos:column="40">!</op:operator><call><name pos:line="349" pos:column="41">checkTimeSlotType</name><argument_list pos:line="349" pos:column="58">(<argument><expr><name pos:line="349" pos:column="59">timeSlotType</name></expr></argument>)</argument_list></call> <op:operator pos:line="349" pos:column="73">||</op:operator> <name pos:line="349" pos:column="76">expectedCapacity</name><op:operator pos:line="349" pos:column="92">&lt;=</op:operator><lit:literal type="number" pos:line="349" pos:column="94">0</lit:literal></expr>)</condition><then pos:line="349" pos:column="96">
			<return pos:line="350" pos:column="25">return <expr><lit:literal type="null" pos:line="350" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name><name pos:line="352" pos:column="17">ArrayList</name><argument_list pos:line="352" pos:column="26">&lt;<argument><name pos:line="352" pos:column="27">ClassroomName</name></argument>&gt;</argument_list></name></type> <name pos:line="352" pos:column="42">names</name> <init pos:line="352" pos:column="48">= <expr><op:operator pos:line="352" pos:column="50">new</op:operator> <call><name><name pos:line="352" pos:column="54">ArrayList</name><argument_list pos:line="352" pos:column="63">&lt;<argument><name pos:line="352" pos:column="64">ClassroomName</name></argument>&gt;</argument_list></name><argument_list pos:line="352" pos:column="78">(<argument><expr><call><name><name pos:line="352" pos:column="79">Arrays</name><op:operator pos:line="352" pos:column="85">.</op:operator><name pos:line="352" pos:column="86">asList</name></name><argument_list pos:line="352" pos:column="92">(<argument><expr><call><name><name pos:line="352" pos:column="93">ClassroomName</name><op:operator pos:line="352" pos:column="106">.</op:operator><name pos:line="352" pos:column="107">values</name></name><argument_list pos:line="352" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="353" pos:column="17">LinkedHashMap</name><argument_list pos:line="353" pos:column="30">&lt;<argument><name pos:line="353" pos:column="31">Integer</name></argument>, <argument><name pos:line="353" pos:column="40">Classroom</name></argument>&gt;</argument_list></name></type> <name pos:line="353" pos:column="51">classrooms</name> <init pos:line="353" pos:column="62">= <expr><op:operator pos:line="353" pos:column="64">new</op:operator> <call><name><name pos:line="353" pos:column="68">LinkedHashMap</name><argument_list pos:line="353" pos:column="81">&lt;<argument><name pos:line="353" pos:column="82">Integer</name></argument>, <argument><name pos:line="353" pos:column="91">Classroom</name></argument>&gt;</argument_list></name><argument_list pos:line="353" pos:column="101">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="354" pos:column="17">Collections</name><op:operator pos:line="354" pos:column="28">.</op:operator><name pos:line="354" pos:column="29">shuffle</name></name><argument_list pos:line="354" pos:column="36">(<argument><expr><name pos:line="354" pos:column="37">names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="355" pos:column="17">Classroom</name></type> <name pos:line="355" pos:column="27">c</name> <init pos:line="355" pos:column="29">= <expr><lit:literal type="null" pos:line="355" pos:column="31">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="356" pos:column="17">ArrayList</name><argument_list pos:line="356" pos:column="26">&lt;<argument><name pos:line="356" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="356" pos:column="38">times</name> <init pos:line="356" pos:column="44">= <expr><lit:literal type="null" pos:line="356" pos:column="46">null</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="357" pos:column="17">for(<init><decl><type><name pos:line="357" pos:column="21">ClassroomName</name></type> <name pos:line="357" pos:column="35">name</name><range pos:line="357" pos:column="39">:<expr><name pos:line="357" pos:column="40">names</name></expr></range></decl></init>)<block pos:line="357" pos:column="46">{
			<expr_stmt><expr><name pos:line="358" pos:column="25">c</name> <op:operator pos:line="358" pos:column="27">=</op:operator> <lit:literal type="null" pos:line="358" pos:column="29">null</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="359" pos:column="25">int</name></type> <name pos:line="359" pos:column="29">classID</name> <init pos:line="359" pos:column="37">= <expr><call><name pos:line="359" pos:column="39">getClassID</name><argument_list pos:line="359" pos:column="49">(<argument><expr><name pos:line="359" pos:column="50">name</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="56">location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="360" pos:column="25">if<condition pos:line="360" pos:column="27">(<expr><name pos:line="360" pos:column="28">classID</name> <op:operator pos:line="360" pos:column="36">!=</op:operator> <op:operator pos:line="360" pos:column="39">-</op:operator><lit:literal type="number" pos:line="360" pos:column="40">1</lit:literal></expr>)</condition><then><block pos:line="360" pos:column="42">{
				<expr_stmt><expr><name pos:line="361" pos:column="33">c</name> <op:operator pos:line="361" pos:column="35">=</op:operator> <op:operator pos:line="361" pos:column="37">new</op:operator> <call><name pos:line="361" pos:column="41">Classroom</name><argument_list pos:line="361" pos:column="50">(<argument><expr><name pos:line="361" pos:column="51">classID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="362" pos:column="33">if<condition pos:line="362" pos:column="35">(<expr><name pos:line="362" pos:column="36">c</name><op:operator pos:line="362" pos:column="37">!=</op:operator><lit:literal type="null" pos:line="362" pos:column="39">null</lit:literal></expr>)</condition><then><block pos:line="362" pos:column="44">{
					<comment type="line" pos:line="363" pos:column="41">//System.out.println("Call findEmptySlotsForClassroom for just checking. Not retreiving");</comment>
					<expr_stmt><expr><call><name><name pos:line="364" pos:column="41">DBAnnotation</name><op:operator pos:line="364" pos:column="53">.</op:operator><name pos:line="364" pos:column="54">annoate</name></name><argument_list pos:line="364" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="364" pos:column="62">"classCap"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="364" pos:column="74">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="364" pos:column="87">"ClassroomCapacity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="364" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="365" pos:column="41">int</name></type> <name pos:line="365" pos:column="45">classCap</name> <init pos:line="365" pos:column="54">= <expr><call><name><name pos:line="365" pos:column="56">c</name><op:operator pos:line="365" pos:column="57">.</op:operator><name pos:line="365" pos:column="58">getClassroomCapacity</name></name><argument_list pos:line="365" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="366" pos:column="41">if<condition pos:line="366" pos:column="43">(<expr><name pos:line="366" pos:column="44">classCap</name> <op:operator pos:line="366" pos:column="53">&gt;=</op:operator> <name pos:line="366" pos:column="56">expectedCapacity</name></expr>)</condition><then><block pos:line="366" pos:column="73">{
						<expr_stmt><expr><name pos:line="367" pos:column="49">times</name> <op:operator pos:line="367" pos:column="55">=</op:operator> <call><name><name pos:line="367" pos:column="57">c</name><op:operator pos:line="367" pos:column="58">.</op:operator><name pos:line="367" pos:column="59">findOpenSlotsForClassroom</name></name><argument_list pos:line="367" pos:column="84">(<argument><expr><name pos:line="367" pos:column="85">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="368" pos:column="49">if<condition pos:line="368" pos:column="51">(<expr><call><name><name pos:line="368" pos:column="52">times</name><op:operator pos:line="368" pos:column="57">.</op:operator><name pos:line="368" pos:column="58">size</name></name><argument_list pos:line="368" pos:column="62">()</argument_list></call><op:operator pos:line="368" pos:column="64">&gt;</op:operator><lit:literal type="number" pos:line="368" pos:column="65">0</lit:literal></expr>)</condition><then><block pos:line="368" pos:column="67">{
							<expr_stmt><expr><call><name><name pos:line="369" pos:column="57">DBAnnotation</name><op:operator pos:line="369" pos:column="69">.</op:operator><name pos:line="369" pos:column="70">annoate</name></name><argument_list pos:line="369" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="369" pos:column="78">"loc"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="85">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="369" pos:column="98">"ClassroomLocation"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="369" pos:column="119">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="370" pos:column="57">ClassroomLocation</name></type> <name pos:line="370" pos:column="75">loc</name> <init pos:line="370" pos:column="79">= <expr><call><name><name pos:line="370" pos:column="81">c</name><op:operator pos:line="370" pos:column="82">.</op:operator><name pos:line="370" pos:column="83">getClassroomLocation</name></name><argument_list pos:line="370" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="372" pos:column="57">DBAnnotation</name><op:operator pos:line="372" pos:column="69">.</op:operator><name pos:line="372" pos:column="70">annoate</name></name><argument_list pos:line="372" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="372" pos:column="78">"cName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="372" pos:column="87">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="372" pos:column="100">"ClassroomName"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="372" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="373" pos:column="57">ClassroomName</name></type> <name pos:line="373" pos:column="71">cName</name> <init pos:line="373" pos:column="77">= <expr><call><name><name pos:line="373" pos:column="79">c</name><op:operator pos:line="373" pos:column="80">.</op:operator><name pos:line="373" pos:column="81">getClassroomName</name></name><argument_list pos:line="373" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="375" pos:column="57">System</name><op:operator pos:line="375" pos:column="63">.</op:operator><name pos:line="375" pos:column="64">out</name><op:operator pos:line="375" pos:column="67">.</op:operator><name pos:line="375" pos:column="68">println</name></name><argument_list pos:line="375" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="375" pos:column="76">"Found a classroom with empty time slots:"</lit:literal><op:operator pos:line="375" pos:column="118">+</op:operator><call><name><name pos:line="375" pos:column="119">cName</name><op:operator pos:line="375" pos:column="124">.</op:operator><name pos:line="375" pos:column="125">toString</name></name><argument_list pos:line="375" pos:column="133">()</argument_list></call><op:operator pos:line="375" pos:column="135">+</op:operator><lit:literal type="string" pos:line="375" pos:column="136">" "</lit:literal>
									<op:operator pos:line="376" pos:column="73">+</op:operator> <lit:literal type="string" pos:line="376" pos:column="75">""</lit:literal><op:operator pos:line="376" pos:column="77">+</op:operator> <call><name><name pos:line="376" pos:column="79">loc</name><op:operator pos:line="376" pos:column="82">.</op:operator><name pos:line="376" pos:column="83">toString</name></name><argument_list pos:line="376" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
							<expr_stmt><expr><call><name><name pos:line="378" pos:column="57">DBAnnotation</name><op:operator pos:line="378" pos:column="69">.</op:operator><name pos:line="378" pos:column="70">annoate</name></name><argument_list pos:line="378" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="378" pos:column="78">"cID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="378" pos:column="85">"classroom"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="378" pos:column="98">"ClassroomID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="378" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="379" pos:column="57">int</name></type> <name pos:line="379" pos:column="61">cID</name> <init pos:line="379" pos:column="65">= <expr><call><name><name pos:line="379" pos:column="67">c</name><op:operator pos:line="379" pos:column="68">.</op:operator><name pos:line="379" pos:column="69">getClassroomID</name></name><argument_list pos:line="379" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="380" pos:column="57">classrooms</name><op:operator pos:line="380" pos:column="67">.</op:operator><name pos:line="380" pos:column="68">put</name></name><argument_list pos:line="380" pos:column="71">(<argument><expr><name pos:line="380" pos:column="72">cID</name></expr></argument>, <argument><expr><name pos:line="380" pos:column="77">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		
		<return pos:line="387" pos:column="17">return <expr><name pos:line="387" pos:column="24">classrooms</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="390" pos:column="9">/*
	 * Finds an open time slot of a specified type inside the specified classroom 
	 */</comment>
	<function><type><specifier pos:line="393" pos:column="9">public</specifier> <name><name pos:line="393" pos:column="16">ArrayList</name><argument_list pos:line="393" pos:column="25">&lt;<argument><name pos:line="393" pos:column="26">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="393" pos:column="37">findOpenSlotsForClassroom</name><parameter_list pos:line="393" pos:column="62">(<param><decl><type><name pos:line="393" pos:column="63">int</name></type> <name pos:line="393" pos:column="67">timeSlotType</name></decl></param>)</parameter_list><block pos:line="393" pos:column="80">{
		<if pos:line="394" pos:column="17">if<condition pos:line="394" pos:column="19">(<expr><op:operator pos:line="394" pos:column="20">!</op:operator><call><name pos:line="394" pos:column="21">checkTimeSlotType</name><argument_list pos:line="394" pos:column="38">(<argument><expr><name pos:line="394" pos:column="39">timeSlotType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="394" pos:column="53">
			<return pos:line="395" pos:column="25">return <expr><lit:literal type="null" pos:line="395" pos:column="32">null</lit:literal></expr>;</return></then></if>
		
		<expr_stmt><expr><call><name><name pos:line="397" pos:column="17">System</name><op:operator pos:line="397" pos:column="23">.</op:operator><name pos:line="397" pos:column="24">out</name><op:operator pos:line="397" pos:column="27">.</op:operator><name pos:line="397" pos:column="28">println</name></name><argument_list pos:line="397" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="397" pos:column="36">"Looking for open time slots in classroom:"</lit:literal><op:operator pos:line="397" pos:column="79">+</op:operator><call><name><name pos:line="397" pos:column="80">this</name><op:operator pos:line="397" pos:column="84">.</op:operator><name pos:line="397" pos:column="85">getClassroomName</name></name><argument_list pos:line="397" pos:column="101">()</argument_list></call><op:operator pos:line="397" pos:column="103">.</op:operator><call><name pos:line="397" pos:column="104">toString</name><argument_list pos:line="397" pos:column="112">()</argument_list></call><op:operator pos:line="397" pos:column="114">+</op:operator><lit:literal type="string" pos:line="397" pos:column="115">" at location:"</lit:literal><op:operator pos:line="397" pos:column="130">+</op:operator><call><name><name pos:line="397" pos:column="131">this</name><op:operator pos:line="397" pos:column="135">.</op:operator><name pos:line="397" pos:column="136">getClassroomLocation</name></name><argument_list pos:line="397" pos:column="156">()</argument_list></call><op:operator pos:line="397" pos:column="158">.</op:operator><call><name pos:line="397" pos:column="159">toString</name><argument_list pos:line="397" pos:column="167">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name pos:line="399" pos:column="17">ArrayList</name><argument_list pos:line="399" pos:column="26">&lt;<argument><name pos:line="399" pos:column="27">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="399" pos:column="38">timeslots</name> <init pos:line="399" pos:column="48">= <expr><op:operator pos:line="399" pos:column="50">new</op:operator> <call><name><name pos:line="399" pos:column="54">ArrayList</name><argument_list pos:line="399" pos:column="63">&lt;<argument><name pos:line="399" pos:column="64">Timeslots</name></argument>&gt;</argument_list></name><argument_list pos:line="399" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="400" pos:column="17">int</name></type> <name pos:line="400" pos:column="21">classroomID</name> <init pos:line="400" pos:column="33">= <expr><call><name><name pos:line="400" pos:column="35">this</name><op:operator pos:line="400" pos:column="39">.</op:operator><name pos:line="400" pos:column="40">getClassroomID</name></name><argument_list pos:line="400" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="401" pos:column="17">try<block pos:line="401" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="402" pos:column="25">Connection</name></type> <name pos:line="402" pos:column="36">conn</name> <init pos:line="402" pos:column="41">= <expr><call><name><name pos:line="402" pos:column="43">Database</name><op:operator pos:line="402" pos:column="51">.</op:operator><name pos:line="402" pos:column="52">getConnection</name></name><argument_list pos:line="402" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="404" pos:column="25">try<block pos:line="404" pos:column="28">{
				<if pos:line="405" pos:column="33">if<condition pos:line="405" pos:column="35">(<expr><name pos:line="405" pos:column="36">conn</name> <op:operator pos:line="405" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="405" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="405" pos:column="49">{
					<comment type="block" pos:line="406" pos:column="41">/*
					 * Retrieves the occupied time slots from the database table
					 */</comment>
					<decl_stmt><decl><type><name pos:line="409" pos:column="41">String</name></type> <name pos:line="409" pos:column="48">ClassroomSelect</name> <init pos:line="409" pos:column="64">= <expr><lit:literal type="string" pos:line="409" pos:column="66">"SELECT TimeslotID FROM courseschedule natural join timeslots "</lit:literal>
							<op:operator pos:line="410" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="410" pos:column="59">"where ClassroomID = ? and TimeslotType = ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="411" pos:column="41">PreparedStatement</name></type> <name pos:line="411" pos:column="59">statement</name> <init pos:line="411" pos:column="69">= <expr><call><name><name pos:line="411" pos:column="71">conn</name><op:operator pos:line="411" pos:column="75">.</op:operator><name pos:line="411" pos:column="76">prepareStatement</name></name><argument_list pos:line="411" pos:column="92">(<argument><expr><name pos:line="411" pos:column="93">ClassroomSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="412" pos:column="41">statement</name><op:operator pos:line="412" pos:column="50">.</op:operator><name pos:line="412" pos:column="51">setInt</name></name><argument_list pos:line="412" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="412" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="412" pos:column="61">classroomID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="413" pos:column="41">statement</name><op:operator pos:line="413" pos:column="50">.</op:operator><name pos:line="413" pos:column="51">setInt</name></name><argument_list pos:line="413" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="413" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="413" pos:column="61">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="414" pos:column="41">ResultSet</name></type> <name pos:line="414" pos:column="51">rs</name> <init pos:line="414" pos:column="54">= <expr><call><name><name pos:line="414" pos:column="56">statement</name><op:operator pos:line="414" pos:column="65">.</op:operator><name pos:line="414" pos:column="66">executeQuery</name></name><argument_list pos:line="414" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name pos:line="415" pos:column="41">ArrayList</name><argument_list pos:line="415" pos:column="50">&lt;<argument><name pos:line="415" pos:column="51">Timeslots</name></argument>&gt;</argument_list></name></type> <name pos:line="415" pos:column="62">occupiedTimeslots</name> <init pos:line="415" pos:column="80">= <expr><op:operator pos:line="415" pos:column="82">new</op:operator> <call><name><name pos:line="415" pos:column="86">ArrayList</name><argument_list pos:line="415" pos:column="95">&lt;<argument><name pos:line="415" pos:column="96">Timeslots</name></argument>&gt;</argument_list></name><argument_list pos:line="415" pos:column="106">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="417" pos:column="41">/*
					 * Add all the occupied time slots in the array list for checking for conflicts
					 */</comment>
					<while pos:line="420" pos:column="41">while<condition pos:line="420" pos:column="46">(<expr><call><name><name pos:line="420" pos:column="47">rs</name><op:operator pos:line="420" pos:column="49">.</op:operator><name pos:line="420" pos:column="50">next</name></name><argument_list pos:line="420" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="420" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="421" pos:column="49">DBAnnotation</name><op:operator pos:line="421" pos:column="61">.</op:operator><name pos:line="421" pos:column="62">annoate</name></name><argument_list pos:line="421" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="421" pos:column="70">"timeslotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="421" pos:column="84">"timeslots"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="421" pos:column="97">"TimeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="421" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="422" pos:column="49">int</name></type> <name pos:line="422" pos:column="53">timeslotID</name> <init pos:line="422" pos:column="64">= <expr><call><name><name pos:line="422" pos:column="66">rs</name><op:operator pos:line="422" pos:column="68">.</op:operator><name pos:line="422" pos:column="69">getInt</name></name><argument_list pos:line="422" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="422" pos:column="76">"TimeSlotID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="423" pos:column="49">Timeslots</name></type> <name pos:line="423" pos:column="59">t</name> <init pos:line="423" pos:column="61">= <expr><op:operator pos:line="423" pos:column="63">new</op:operator> <call><name pos:line="423" pos:column="67">Timeslots</name><argument_list pos:line="423" pos:column="76">(<argument><expr><name pos:line="423" pos:column="77">timeslotID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="line" pos:line="424" pos:column="49">//System.out.println("Slot:"+t.getTimeSlotID()+" start:"+t.getStartHour()+" end:"+t.getEndHour());</comment>
						<expr_stmt><expr><call><name><name pos:line="425" pos:column="49">occupiedTimeslots</name><op:operator pos:line="425" pos:column="66">.</op:operator><name pos:line="425" pos:column="67">add</name></name><argument_list pos:line="425" pos:column="70">(<argument><expr><name pos:line="425" pos:column="71">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					
					<comment type="block" pos:line="428" pos:column="41">/*
					 * Get all the time slots from the database
					 */</comment>
					<decl_stmt><decl><type><name pos:line="431" pos:column="41">String</name></type> <name pos:line="431" pos:column="48">timeSlotSelect</name> <init pos:line="431" pos:column="63">= <expr><lit:literal type="string" pos:line="431" pos:column="65">"SELECT TimeslotID "</lit:literal>
							<op:operator pos:line="432" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="432" pos:column="59">"From timeslots "</lit:literal>
							<op:operator pos:line="433" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="433" pos:column="59">"where TimeslotType = ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="434" pos:column="41">statement</name> <op:operator pos:line="434" pos:column="51">=</op:operator> <call><name><name pos:line="434" pos:column="53">conn</name><op:operator pos:line="434" pos:column="57">.</op:operator><name pos:line="434" pos:column="58">prepareStatement</name></name><argument_list pos:line="434" pos:column="74">(<argument><expr><name pos:line="434" pos:column="75">timeSlotSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="435" pos:column="41">statement</name><op:operator pos:line="435" pos:column="50">.</op:operator><name pos:line="435" pos:column="51">setInt</name></name><argument_list pos:line="435" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="435" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="435" pos:column="61">timeSlotType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="436" pos:column="41">rs</name> <op:operator pos:line="436" pos:column="44">=</op:operator> <call><name><name pos:line="436" pos:column="46">statement</name><op:operator pos:line="436" pos:column="55">.</op:operator><name pos:line="436" pos:column="56">executeQuery</name></name><argument_list pos:line="436" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="block" pos:line="438" pos:column="41">/*
					 *For each of the time slots check against the occupied time slots for conflicts
					 *If any conflict is found, discard the timeslot
					 *Loop till all the time slots are processed
					 *If no conflict is found, add it to empty timeslot list 
					 */</comment>
					<while pos:line="444" pos:column="41">while<condition pos:line="444" pos:column="46">(<expr><call><name><name pos:line="444" pos:column="47">rs</name><op:operator pos:line="444" pos:column="49">.</op:operator><name pos:line="444" pos:column="50">next</name></name><argument_list pos:line="444" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="444" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="445" pos:column="49">DBAnnotation</name><op:operator pos:line="445" pos:column="61">.</op:operator><name pos:line="445" pos:column="62">annoate</name></name><argument_list pos:line="445" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="445" pos:column="70">"timeslotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="445" pos:column="84">"timeslots"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="445" pos:column="97">"TimeSlotID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="445" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="446" pos:column="49">int</name></type> <name pos:line="446" pos:column="53">timeslotID</name> <init pos:line="446" pos:column="64">= <expr><call><name><name pos:line="446" pos:column="66">rs</name><op:operator pos:line="446" pos:column="68">.</op:operator><name pos:line="446" pos:column="69">getInt</name></name><argument_list pos:line="446" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="446" pos:column="76">"TimeSlotID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<decl_stmt><decl><type><name pos:line="448" pos:column="49">Timeslots</name></type> <name pos:line="448" pos:column="59">t</name> <init pos:line="448" pos:column="61">= <expr><op:operator pos:line="448" pos:column="63">new</op:operator> <call><name pos:line="448" pos:column="67">Timeslots</name><argument_list pos:line="448" pos:column="76">(<argument><expr><name pos:line="448" pos:column="77">timeslotID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="449" pos:column="49">boolean</name></type> <name pos:line="449" pos:column="57">conflict</name> <init pos:line="449" pos:column="66">= <expr><lit:literal type="boolean" pos:line="449" pos:column="68">false</lit:literal></expr></init></decl>;</decl_stmt>
						<for pos:line="450" pos:column="49">for(<init><decl><type><name pos:line="450" pos:column="53">Timeslots</name></type> <name pos:line="450" pos:column="63">slot</name><range pos:line="450" pos:column="67">:<expr><name pos:line="450" pos:column="68">occupiedTimeslots</name></expr></range></decl></init>)<block pos:line="450" pos:column="86">{
							<if pos:line="451" pos:column="57">if<condition pos:line="451" pos:column="59">(<expr><call><name><name pos:line="451" pos:column="60">Timeslots</name><op:operator pos:line="451" pos:column="69">.</op:operator><name pos:line="451" pos:column="70">isConflict</name></name><argument_list pos:line="451" pos:column="80">(<argument><expr><name pos:line="451" pos:column="81">t</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="84">slot</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="451" pos:column="90">{
								<comment type="line" pos:line="452" pos:column="65">//System.out.println("Conflict detect");</comment>
								<expr_stmt><expr><name pos:line="453" pos:column="65">conflict</name> <op:operator pos:line="453" pos:column="74">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="76">true</lit:literal></expr>;</expr_stmt>
								<break pos:line="454" pos:column="65">break;</break>
							}</block></then></if>
							
							<comment type="line" pos:line="457" pos:column="57">//System.out.println("No conflicts, its an open time slot!");</comment>
						}</block></for>
						
						<if pos:line="460" pos:column="49">if<condition pos:line="460" pos:column="51">(<expr><op:operator pos:line="460" pos:column="52">!</op:operator><name pos:line="460" pos:column="53">conflict</name></expr>)</condition><then><block pos:line="460" pos:column="62">{
							<expr_stmt><expr><call><name><name pos:line="461" pos:column="57">timeslots</name><op:operator pos:line="461" pos:column="66">.</op:operator><name pos:line="461" pos:column="67">add</name></name><argument_list pos:line="461" pos:column="70">(<argument><expr><name pos:line="461" pos:column="71">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></while>
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="468" pos:column="25">catch<parameter_list pos:line="468" pos:column="30">(<param><decl><type><name pos:line="468" pos:column="31">SQLException</name></type> <name pos:line="468" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="468" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="469" pos:column="33">System</name><op:operator pos:line="469" pos:column="39">.</op:operator><name pos:line="469" pos:column="40">out</name><op:operator pos:line="469" pos:column="43">.</op:operator><name pos:line="469" pos:column="44">println</name></name><argument_list pos:line="469" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="469" pos:column="52">"Error retreiving classroom"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="470" pos:column="33">System</name><op:operator pos:line="470" pos:column="39">.</op:operator><name pos:line="470" pos:column="40">out</name><op:operator pos:line="470" pos:column="43">.</op:operator><name pos:line="470" pos:column="44">println</name></name><argument_list pos:line="470" pos:column="51">(<argument><expr><call><name><name pos:line="470" pos:column="52">e</name><op:operator pos:line="470" pos:column="53">.</op:operator><name pos:line="470" pos:column="54">getMessage</name></name><argument_list pos:line="470" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="471" pos:column="33">e</name><op:operator pos:line="471" pos:column="34">.</op:operator><name pos:line="471" pos:column="35">printStackTrace</name></name><argument_list pos:line="471" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch>
			
			<finally pos:line="474" pos:column="25">finally<block pos:line="474" pos:column="32">{
				<comment type="line" pos:line="475" pos:column="33">//Database.closeConnection(conn);</comment>
			}</block></finally></try>
			
		}</block>
		
		<finally pos:line="480" pos:column="17">finally<block pos:line="480" pos:column="24">{
		}</block></finally></try>
		
		<comment type="block" pos:line="483" pos:column="17">/*
		 * return all the empty time slot found
		 */</comment>
		<return pos:line="486" pos:column="17">return <expr><name pos:line="486" pos:column="24">timeslots</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="489" pos:column="9">/*
	 * checks if the specified combination of the classroom an time slot is empty
	 */</comment>
	<function><type><specifier pos:line="492" pos:column="9">public</specifier> <specifier pos:line="492" pos:column="16">static</specifier> <name pos:line="492" pos:column="23">boolean</name></type> <name pos:line="492" pos:column="31">isEmpty</name><parameter_list pos:line="492" pos:column="38">(<param><decl><type><name pos:line="492" pos:column="39">Classroom</name></type> <name pos:line="492" pos:column="49">classroom</name></decl></param>, <param><decl><type><name pos:line="492" pos:column="60">Timeslots</name></type> <name pos:line="492" pos:column="70">t</name></decl></param>)</parameter_list><block pos:line="492" pos:column="72">{
		<if pos:line="493" pos:column="17">if<condition pos:line="493" pos:column="19">(<expr><name pos:line="493" pos:column="20">classroom</name> <op:operator pos:line="493" pos:column="30">==</op:operator> <lit:literal type="null" pos:line="493" pos:column="33">null</lit:literal> <op:operator pos:line="493" pos:column="38">||</op:operator> <name pos:line="493" pos:column="41">t</name><op:operator pos:line="493" pos:column="42">==</op:operator> <lit:literal type="null" pos:line="493" pos:column="45">null</lit:literal></expr>)</condition><then pos:line="493" pos:column="50">
			<return pos:line="494" pos:column="25">return <expr><lit:literal type="boolean" pos:line="494" pos:column="32">false</lit:literal></expr>;</return></then></if>
		
		<decl_stmt><decl><type><name pos:line="496" pos:column="17">int</name></type> <name pos:line="496" pos:column="21">classroomID</name> <init pos:line="496" pos:column="33">= <expr><call><name><name pos:line="496" pos:column="35">classroom</name><op:operator pos:line="496" pos:column="44">.</op:operator><name pos:line="496" pos:column="45">getClassroomID</name></name><argument_list pos:line="496" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="497" pos:column="17">int</name></type> <name pos:line="497" pos:column="21">timeslotID</name> <init pos:line="497" pos:column="32">= <expr><call><name><name pos:line="497" pos:column="34">t</name><op:operator pos:line="497" pos:column="35">.</op:operator><name pos:line="497" pos:column="36">getTimeSlotID</name></name><argument_list pos:line="497" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="498" pos:column="17">boolean</name></type> <name pos:line="498" pos:column="25">isEmpty</name><init pos:line="498" pos:column="32">= <expr><lit:literal type="boolean" pos:line="498" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="499" pos:column="17">try<block pos:line="499" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="500" pos:column="25">Connection</name></type> <name pos:line="500" pos:column="36">conn</name> <init pos:line="500" pos:column="41">= <expr><call><name><name pos:line="500" pos:column="43">Database</name><op:operator pos:line="500" pos:column="51">.</op:operator><name pos:line="500" pos:column="52">getConnection</name></name><argument_list pos:line="500" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="502" pos:column="25">try<block pos:line="502" pos:column="28">{
				<if pos:line="503" pos:column="33">if<condition pos:line="503" pos:column="35">(<expr><name pos:line="503" pos:column="36">conn</name> <op:operator pos:line="503" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="503" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="503" pos:column="49">{
					<comment type="block" pos:line="504" pos:column="41">/*
					 * Try to find if some course is scheduled in the specified combination of classroom and time slot
					 */</comment>
					<decl_stmt><decl><type><name pos:line="507" pos:column="41">String</name></type> <name pos:line="507" pos:column="48">ClassroomSelect</name> <init pos:line="507" pos:column="64">= <expr><lit:literal type="string" pos:line="507" pos:column="66">"Select *"</lit:literal>
							<op:operator pos:line="508" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="508" pos:column="59">" FROM courseschedule"</lit:literal>
							<op:operator pos:line="509" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="509" pos:column="59">" WHERE classroomID= ? and TimeSlotID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="510" pos:column="41">PreparedStatement</name></type> <name pos:line="510" pos:column="59">statement</name> <init pos:line="510" pos:column="69">= <expr><call><name><name pos:line="510" pos:column="71">conn</name><op:operator pos:line="510" pos:column="75">.</op:operator><name pos:line="510" pos:column="76">prepareStatement</name></name><argument_list pos:line="510" pos:column="92">(<argument><expr><name pos:line="510" pos:column="93">ClassroomSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="511" pos:column="41">statement</name><op:operator pos:line="511" pos:column="50">.</op:operator><name pos:line="511" pos:column="51">setInt</name></name><argument_list pos:line="511" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="511" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="511" pos:column="61">classroomID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="512" pos:column="41">statement</name><op:operator pos:line="512" pos:column="50">.</op:operator><name pos:line="512" pos:column="51">setInt</name></name><argument_list pos:line="512" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="512" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="512" pos:column="61">timeslotID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="513" pos:column="41">ResultSet</name></type> <name pos:line="513" pos:column="51">rs</name> <init pos:line="513" pos:column="54">= <expr><call><name><name pos:line="513" pos:column="56">statement</name><op:operator pos:line="513" pos:column="65">.</op:operator><name pos:line="513" pos:column="66">executeQuery</name></name><argument_list pos:line="513" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="515" pos:column="41">/*
					 * If a existing xombiation matching the same is found, return false
					 */</comment>
					<if pos:line="518" pos:column="41">if<condition pos:line="518" pos:column="43">(<expr><call><name><name pos:line="518" pos:column="44">rs</name><op:operator pos:line="518" pos:column="46">.</op:operator><name pos:line="518" pos:column="47">first</name></name><argument_list pos:line="518" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="518" pos:column="55">{
						<expr_stmt><expr><name pos:line="519" pos:column="49">isEmpty</name> <op:operator pos:line="519" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="519" pos:column="59">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<comment type="block" pos:line="522" pos:column="41">/*
					 * else return true
					 */</comment>
					<else pos:line="525" pos:column="41">else<block pos:line="525" pos:column="45">{
						<expr_stmt><expr><name pos:line="526" pos:column="49">isEmpty</name> <op:operator pos:line="526" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="526" pos:column="59">true</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
										
					
				}</block></then></if>
			}</block>
			
			<catch pos:line="533" pos:column="25">catch<parameter_list pos:line="533" pos:column="30">(<param><decl><type><name pos:line="533" pos:column="31">SQLException</name></type> <name pos:line="533" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="533" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="534" pos:column="33">System</name><op:operator pos:line="534" pos:column="39">.</op:operator><name pos:line="534" pos:column="40">out</name><op:operator pos:line="534" pos:column="43">.</op:operator><name pos:line="534" pos:column="44">println</name></name><argument_list pos:line="534" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="534" pos:column="52">"Error"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="535" pos:column="33">System</name><op:operator pos:line="535" pos:column="39">.</op:operator><name pos:line="535" pos:column="40">out</name><op:operator pos:line="535" pos:column="43">.</op:operator><name pos:line="535" pos:column="44">println</name></name><argument_list pos:line="535" pos:column="51">(<argument><expr><call><name><name pos:line="535" pos:column="52">e</name><op:operator pos:line="535" pos:column="53">.</op:operator><name pos:line="535" pos:column="54">getMessage</name></name><argument_list pos:line="535" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="536" pos:column="33">e</name><op:operator pos:line="536" pos:column="34">.</op:operator><name pos:line="536" pos:column="35">printStackTrace</name></name><argument_list pos:line="536" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		
		<finally pos:line="540" pos:column="17">finally<block pos:line="540" pos:column="24">{
			
		}</block></finally></try>
		
		<return pos:line="544" pos:column="17">return <expr><name pos:line="544" pos:column="24">isEmpty</name></expr>;</return>
		
	}</block></function>
	
	<function><type><annotation pos:line="548" pos:column="9">@<name pos:line="548" pos:column="10">Override</name></annotation>
	<specifier pos:line="549" pos:column="9">public</specifier> <name pos:line="549" pos:column="16">String</name></type> <name pos:line="549" pos:column="23">toString</name><parameter_list pos:line="549" pos:column="31">()</parameter_list><block pos:line="549" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="550" pos:column="17">String</name></type> <name pos:line="550" pos:column="24">toReturn</name> <init pos:line="550" pos:column="33">= <expr><lit:literal type="string" pos:line="550" pos:column="35">""</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="551" pos:column="17">toReturn</name><op:operator pos:line="551" pos:column="25">+=</op:operator> <lit:literal type="string" pos:line="551" pos:column="28">"Classroom Location:"</lit:literal><op:operator pos:line="551" pos:column="49">+</op:operator><call><name><name pos:line="551" pos:column="50">this</name><op:operator pos:line="551" pos:column="54">.</op:operator><name pos:line="551" pos:column="55">getClassroomLocation</name></name><argument_list pos:line="551" pos:column="75">()</argument_list></call><op:operator pos:line="551" pos:column="77">.</op:operator><call><name pos:line="551" pos:column="78">toString</name><argument_list pos:line="551" pos:column="86">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="552" pos:column="17">toReturn</name><op:operator pos:line="552" pos:column="25">+=</op:operator> <lit:literal type="string" pos:line="552" pos:column="28">"\nClassroom Name:"</lit:literal><op:operator pos:line="552" pos:column="47">+</op:operator><call><name><name pos:line="552" pos:column="48">this</name><op:operator pos:line="552" pos:column="52">.</op:operator><name pos:line="552" pos:column="53">getClassroomName</name></name><argument_list pos:line="552" pos:column="69">()</argument_list></call><op:operator pos:line="552" pos:column="71">.</op:operator><call><name pos:line="552" pos:column="72">toString</name><argument_list pos:line="552" pos:column="80">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="553" pos:column="17">toReturn</name><op:operator pos:line="553" pos:column="25">+=</op:operator> <lit:literal type="string" pos:line="553" pos:column="28">"\nClassroomID:"</lit:literal><op:operator pos:line="553" pos:column="44">+</op:operator><call><name><name pos:line="553" pos:column="45">this</name><op:operator pos:line="553" pos:column="49">.</op:operator><name pos:line="553" pos:column="50">getClassroomID</name></name><argument_list pos:line="553" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="554" pos:column="17">return <expr><name pos:line="554" pos:column="24">toReturn</name></expr>;</return>
	}</block></function>
		
	
	<comment type="block" pos:line="558" pos:column="9">/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */</comment>
	<function><type><annotation pos:line="561" pos:column="9">@<name pos:line="561" pos:column="10">Override</name></annotation>
	<specifier pos:line="562" pos:column="9">public</specifier> <name pos:line="562" pos:column="16">boolean</name></type> <name pos:line="562" pos:column="24">equals</name><parameter_list pos:line="562" pos:column="30">(<param><decl><type><name pos:line="562" pos:column="31">Object</name></type> <name pos:line="562" pos:column="38">obj</name></decl></param>)</parameter_list> <block pos:line="562" pos:column="43">{
		<if pos:line="563" pos:column="17">if<condition pos:line="563" pos:column="19">(<expr><name pos:line="563" pos:column="20">obj</name> <op:operator pos:line="563" pos:column="24">instanceof</op:operator> <name pos:line="563" pos:column="35">Classroom</name></expr>)</condition><then><block pos:line="563" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="564" pos:column="25">Classroom</name></type> <name pos:line="564" pos:column="35">c</name> <init pos:line="564" pos:column="37">= <expr><op:operator pos:line="564" pos:column="39">(</op:operator><name pos:line="564" pos:column="40">Classroom</name><op:operator pos:line="564" pos:column="49">)</op:operator><name pos:line="564" pos:column="50">obj</name></expr></init></decl>;</decl_stmt>
			<if pos:line="565" pos:column="25">if<condition pos:line="565" pos:column="27">(<expr><call><name><name pos:line="565" pos:column="28">this</name><op:operator pos:line="565" pos:column="32">.</op:operator><name pos:line="565" pos:column="33">getClassroomID</name></name><argument_list pos:line="565" pos:column="47">()</argument_list></call> <op:operator pos:line="565" pos:column="50">==</op:operator> <call><name><name pos:line="565" pos:column="53">c</name><op:operator pos:line="565" pos:column="54">.</op:operator><name pos:line="565" pos:column="55">getClassroomID</name></name><argument_list pos:line="565" pos:column="69">()</argument_list></call></expr>)</condition><then pos:line="565" pos:column="72">
				<return pos:line="566" pos:column="33">return <expr><lit:literal type="boolean" pos:line="566" pos:column="40">true</lit:literal></expr>;</return></then>
			<else pos:line="567" pos:column="25">else <return pos:line="567" pos:column="30">return <expr><lit:literal type="boolean" pos:line="567" pos:column="37">false</lit:literal></expr>;</return></else></if>
		}</block></then>
		
		<else pos:line="570" pos:column="17">else <return pos:line="570" pos:column="22">return <expr><lit:literal type="boolean" pos:line="570" pos:column="29">false</lit:literal></expr>;</return></else></if>
	}</block></function>

	<comment type="block" pos:line="573" pos:column="9">/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */</comment>
	<function><type><annotation pos:line="576" pos:column="9">@<name pos:line="576" pos:column="10">Override</name></annotation>
	<specifier pos:line="577" pos:column="9">public</specifier> <name pos:line="577" pos:column="16">int</name></type> <name pos:line="577" pos:column="20">hashCode</name><parameter_list pos:line="577" pos:column="28">()</parameter_list> <block pos:line="577" pos:column="31">{
		<return pos:line="578" pos:column="17">return <expr><op:operator pos:line="578" pos:column="24">(</op:operator><call><name><name pos:line="578" pos:column="25">this</name><op:operator pos:line="578" pos:column="29">.</op:operator><name pos:line="578" pos:column="30">getClassroomID</name></name><argument_list pos:line="578" pos:column="44">()</argument_list></call><op:operator pos:line="578" pos:column="46">*</op:operator><lit:literal type="number" pos:line="578" pos:column="47">31</lit:literal><op:operator pos:line="578" pos:column="49">)</op:operator></expr>;</return>
	}</block></function>
	
	
	
}</block></class>
</unit>
