<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\GitHub\testProgram\UMAS\src\com\umas\code\WaitList.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">com</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">umas</name><op:operator pos:line="1" pos:column="17">.</op:operator><name pos:line="1" pos:column="18">code</name></name>;</package>


<comment type="block" format="javadoc" pos:line="4" pos:column="1">/****************@author Simant Purohit*********************************/</comment>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">java</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">sql</name><op:operator pos:line="6" pos:column="16">.</op:operator><name pos:line="6" pos:column="17">Connection</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">java</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">sql</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">PreparedStatement</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">java</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">sql</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">ResultSet</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">java</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">sql</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">SQLException</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">java</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">sql</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Timestamp</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">java</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">util</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">ArrayList</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">java</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">util</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">HashMap</name></name>;</import>

<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">org</name><op:operator pos:line="14" pos:column="11">.</op:operator><name pos:line="14" pos:column="12">joda</name><op:operator pos:line="14" pos:column="16">.</op:operator><name pos:line="14" pos:column="17">time</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Period</name></name>;</import>




<class><specifier pos:line="19" pos:column="1">public</specifier> class <name pos:line="19" pos:column="14">WaitList</name> <block pos:line="19" pos:column="23">{
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">int</name></type> <name pos:line="20" pos:column="13">offerID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">int</name></type> <name pos:line="21" pos:column="13">UIN</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">int</name></type> <name pos:line="22" pos:column="13">queuePos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">CourseOffered</name></type> <name pos:line="23" pos:column="23">courseoffered</name></decl>;</decl_stmt>
	
	<constructor><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">WaitList</name><parameter_list pos:line="25" pos:column="25">()</parameter_list><block pos:line="25" pos:column="27">{
		<comment type="line" pos:line="26" pos:column="17">//Wait List class cannot be initialized directly</comment>
	}</block></constructor>
	
	
	<comment type="block" format="javadoc" pos:line="30" pos:column="9">/**
	 * @return the offerID
	 */</comment>
	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">int</name></type> <name pos:line="33" pos:column="20">getOfferID</name><parameter_list pos:line="33" pos:column="30">()</parameter_list> <block pos:line="33" pos:column="33">{
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">offerID</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="36" pos:column="9">/**
	 * @param offerID the offerID to set
	 */</comment>
	<function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">setOfferID</name><parameter_list pos:line="39" pos:column="31">(<param><decl><type><name pos:line="39" pos:column="32">int</name></type> <name pos:line="39" pos:column="36">offerID</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="45">{
		<expr_stmt><expr><name><name pos:line="40" pos:column="17">this</name><op:operator pos:line="40" pos:column="21">.</op:operator><name pos:line="40" pos:column="22">offerID</name></name> <op:operator pos:line="40" pos:column="30">=</op:operator> <name pos:line="40" pos:column="32">offerID</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="42" pos:column="9">/**
	 * @return the uIN
	 */</comment>
	<function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">int</name></type> <name pos:line="45" pos:column="20">getUIN</name><parameter_list pos:line="45" pos:column="26">()</parameter_list> <block pos:line="45" pos:column="29">{
		<return pos:line="46" pos:column="17">return <expr><name pos:line="46" pos:column="24">UIN</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="48" pos:column="9">/**
	 * @param uIN the uIN to set
	 */</comment>
	<function><type><specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">setUIN</name><parameter_list pos:line="51" pos:column="27">(<param><decl><type><name pos:line="51" pos:column="28">int</name></type> <name pos:line="51" pos:column="32">uIN</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="37">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">UIN</name> <op:operator pos:line="52" pos:column="21">=</op:operator> <name pos:line="52" pos:column="23">uIN</name></expr>;</expr_stmt>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="54" pos:column="9">/**
	 * @return the queuePos
	 */</comment>
	<function><type><specifier pos:line="57" pos:column="9">public</specifier> <name pos:line="57" pos:column="16">int</name></type> <name pos:line="57" pos:column="20">getQueuePos</name><parameter_list pos:line="57" pos:column="31">()</parameter_list> <block pos:line="57" pos:column="34">{
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">queuePos</name></expr>;</return>
	}</block></function>
	<comment type="block" format="javadoc" pos:line="60" pos:column="9">/**
	 * @param queuePos the queuePos to set
	 */</comment>
	<function><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">setQueuePos</name><parameter_list pos:line="63" pos:column="32">(<param><decl><type><name pos:line="63" pos:column="33">int</name></type> <name pos:line="63" pos:column="37">queuePos</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">this</name><op:operator pos:line="64" pos:column="21">.</op:operator><name pos:line="64" pos:column="22">queuePos</name></name> <op:operator pos:line="64" pos:column="31">=</op:operator> <name pos:line="64" pos:column="33">queuePos</name></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * Adds the specified student to the wait list for the offerid mentioned
	 */</comment>
	<function><type><specifier pos:line="70" pos:column="9">public</specifier> <specifier pos:line="70" pos:column="16">static</specifier> <name pos:line="70" pos:column="23">boolean</name></type> <name pos:line="70" pos:column="31">addStudentToWaitList</name><parameter_list pos:line="70" pos:column="51">(<param><decl><type><name pos:line="70" pos:column="52">Student</name></type> <name pos:line="70" pos:column="60">student</name></decl></param>, <param><decl><type><name pos:line="70" pos:column="69">int</name></type> <name pos:line="70" pos:column="73">offerID</name></decl></param>)</parameter_list> <throws pos:line="70" pos:column="82">throws <argument><expr><name><name pos:line="70" pos:column="89">Course</name><op:operator pos:line="70" pos:column="95">.</op:operator><name pos:line="70" pos:column="96">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="125">CourseOffered</name><op:operator pos:line="70" pos:column="138">.</op:operator><name pos:line="70" pos:column="139">CourseOfferingDoesNotExistException</name></name></expr></argument></throws><block pos:line="70" pos:column="174">{
		<comment type="block" pos:line="71" pos:column="17">/*
		 * check if the student is eligible to be added to the wait list
		 */</comment>
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">boolean</name></type> <name pos:line="74" pos:column="25">isAdded</name> <init pos:line="74" pos:column="33">= <expr><lit:literal type="boolean" pos:line="74" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="75" pos:column="17">if<condition pos:line="75" pos:column="19">(<expr><call><name pos:line="75" pos:column="20">canBeAddedToWaitList</name><argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">student</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="50">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="75" pos:column="59">{
			<comment type="block" pos:line="76" pos:column="25">/*
			 * get the queue position for the addition
			 */</comment>
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">int</name></type> <name pos:line="79" pos:column="29">queuePos</name> <init pos:line="79" pos:column="38">= <expr><call><name pos:line="79" pos:column="40">getLastQueuePos</name><argument_list pos:line="79" pos:column="55">(<argument><expr><name pos:line="79" pos:column="56">offerID</name></expr></argument>)</argument_list></call> <op:operator pos:line="79" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="79" pos:column="67">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="80" pos:column="25">int</name></type> <name pos:line="80" pos:column="29">UIN</name> <init pos:line="80" pos:column="33">= <expr><call><name><name pos:line="80" pos:column="35">student</name><op:operator pos:line="80" pos:column="42">.</op:operator><name pos:line="80" pos:column="43">getUIN</name></name><argument_list pos:line="80" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="82" pos:column="25">try<block pos:line="82" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="83" pos:column="33">Connection</name></type> <name pos:line="83" pos:column="44">conn</name> <init pos:line="83" pos:column="49">= <expr><call><name><name pos:line="83" pos:column="51">Database</name><op:operator pos:line="83" pos:column="59">.</op:operator><name pos:line="83" pos:column="60">getConnection</name></name><argument_list pos:line="83" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<try pos:line="85" pos:column="33">try<block pos:line="85" pos:column="36">{
					<if pos:line="86" pos:column="41">if<condition pos:line="86" pos:column="43">(<expr><name pos:line="86" pos:column="44">conn</name> <op:operator pos:line="86" pos:column="49">!=</op:operator> <lit:literal type="null" pos:line="86" pos:column="52">null</lit:literal></expr>)</condition><then><block pos:line="86" pos:column="57">{
						<comment type="block" pos:line="87" pos:column="49">/*
						 * Insert the student in the waitlist
						 */</comment>
						<expr_stmt><expr><call><name><name pos:line="90" pos:column="49">System</name><op:operator pos:line="90" pos:column="55">.</op:operator><name pos:line="90" pos:column="56">out</name><op:operator pos:line="90" pos:column="59">.</op:operator><name pos:line="90" pos:column="60">println</name></name><argument_list pos:line="90" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="68">"Inserting student in wait list"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="91" pos:column="49">String</name></type> <name pos:line="91" pos:column="56">WaitListInsert</name> <init pos:line="91" pos:column="71">= <expr><lit:literal type="string" pos:line="91" pos:column="73">"INSERT INTO waitlist "</lit:literal>
								<op:operator pos:line="92" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="67">"(UIN, OfferID, QueuePos) "</lit:literal>
								<op:operator pos:line="93" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="93" pos:column="67">"Values(?,?,?)"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="94" pos:column="49">PreparedStatement</name></type> <name pos:line="94" pos:column="67">statement</name> <init pos:line="94" pos:column="77">= <expr><call><name><name pos:line="94" pos:column="79">conn</name><op:operator pos:line="94" pos:column="83">.</op:operator><name pos:line="94" pos:column="84">prepareStatement</name></name><argument_list pos:line="94" pos:column="100">(<argument><expr><name pos:line="94" pos:column="101">WaitListInsert</name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="117">ResultSet</name><op:operator pos:line="94" pos:column="126">.</op:operator><name pos:line="94" pos:column="127">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="95" pos:column="49">statement</name><op:operator pos:line="95" pos:column="58">.</op:operator><name pos:line="95" pos:column="59">setInt</name></name><argument_list pos:line="95" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="95" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="69">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="96" pos:column="49">statement</name><op:operator pos:line="96" pos:column="58">.</op:operator><name pos:line="96" pos:column="59">setInt</name></name><argument_list pos:line="96" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="96" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="69">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="97" pos:column="49">statement</name><op:operator pos:line="97" pos:column="58">.</op:operator><name pos:line="97" pos:column="59">setInt</name></name><argument_list pos:line="97" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="97" pos:column="66">3</lit:literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="69">queuePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="98" pos:column="49">statement</name><op:operator pos:line="98" pos:column="58">.</op:operator><name pos:line="98" pos:column="59">executeUpdate</name></name><argument_list pos:line="98" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="100" pos:column="49">DBAnnotation</name><op:operator pos:line="100" pos:column="61">.</op:operator><name pos:line="100" pos:column="62">annoate</name></name><argument_list pos:line="100" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="70">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="77">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="89">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="100" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="101" pos:column="49">DBAnnotation</name><op:operator pos:line="101" pos:column="61">.</op:operator><name pos:line="101" pos:column="62">annoate</name></name><argument_list pos:line="101" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="81">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="93">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="101" pos:column="104">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="102" pos:column="49">DBAnnotation</name><op:operator pos:line="102" pos:column="61">.</op:operator><name pos:line="102" pos:column="62">annoate</name></name><argument_list pos:line="102" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="70">"queuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="82">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="94">"QueuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="102" pos:column="106">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
						
						<expr_stmt><expr><call><name><name pos:line="104" pos:column="49">Database</name><op:operator pos:line="104" pos:column="57">.</op:operator><name pos:line="104" pos:column="58">commitTransaction</name></name><argument_list pos:line="104" pos:column="75">(<argument><expr><name pos:line="104" pos:column="76">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="105" pos:column="49">isAdded</name> <op:operator pos:line="105" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="105" pos:column="59">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block>
				
				<catch pos:line="109" pos:column="33">catch<parameter_list pos:line="109" pos:column="38">(<param><decl><type><name pos:line="109" pos:column="39">SQLException</name></type> <name pos:line="109" pos:column="52">e</name></decl></param>)</parameter_list><block pos:line="109" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="110" pos:column="41">System</name><op:operator pos:line="110" pos:column="47">.</op:operator><name pos:line="110" pos:column="48">out</name><op:operator pos:line="110" pos:column="51">.</op:operator><name pos:line="110" pos:column="52">println</name></name><argument_list pos:line="110" pos:column="59">(<argument><expr><call><name><name pos:line="110" pos:column="60">e</name><op:operator pos:line="110" pos:column="61">.</op:operator><name pos:line="110" pos:column="62">getMessage</name></name><argument_list pos:line="110" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">e</name><op:operator pos:line="111" pos:column="42">.</op:operator><name pos:line="111" pos:column="43">printStackTrace</name></name><argument_list pos:line="111" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>			
			}</block>
			
			<finally pos:line="115" pos:column="25">finally<block pos:line="115" pos:column="32">{
			}</block></finally></try>
			
		}</block></then></if>
		<return pos:line="119" pos:column="17">return <expr><name pos:line="119" pos:column="24">isAdded</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="122" pos:column="9">/*
	 * returns the last queue position number for the specified offer id
	 */</comment>
	<function><type><specifier pos:line="125" pos:column="9">private</specifier> <specifier pos:line="125" pos:column="17">static</specifier> <name pos:line="125" pos:column="24">int</name></type> <name pos:line="125" pos:column="28">getLastQueuePos</name><parameter_list pos:line="125" pos:column="43">(<param><decl><type><name pos:line="125" pos:column="44">int</name></type> <name pos:line="125" pos:column="48">OfferID</name></decl></param>)</parameter_list><block pos:line="125" pos:column="56">{
		<decl_stmt><decl><type><name pos:line="126" pos:column="17">int</name></type> <name pos:line="126" pos:column="21">queuePos</name> <init pos:line="126" pos:column="30">= <expr><lit:literal type="number" pos:line="126" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="127" pos:column="17">try<block pos:line="127" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="128" pos:column="25">Connection</name></type> <name pos:line="128" pos:column="36">conn</name> <init pos:line="128" pos:column="41">= <expr><call><name><name pos:line="128" pos:column="43">Database</name><op:operator pos:line="128" pos:column="51">.</op:operator><name pos:line="128" pos:column="52">getConnection</name></name><argument_list pos:line="128" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="130" pos:column="25">try<block pos:line="130" pos:column="28">{
				<if pos:line="131" pos:column="33">if<condition pos:line="131" pos:column="35">(<expr><name pos:line="131" pos:column="36">conn</name> <op:operator pos:line="131" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="131" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="131" pos:column="49">{
					<comment type="block" pos:line="132" pos:column="41">/*
					 * Retrieve the max queue number for the offer id
					 */</comment>
					<decl_stmt><decl><type><name pos:line="135" pos:column="41">String</name></type> <name pos:line="135" pos:column="48">SemesterSelect</name> <init pos:line="135" pos:column="63">= <expr><lit:literal type="string" pos:line="135" pos:column="65">"Select max(QueuePos) as QueuePos"</lit:literal>
							<op:operator pos:line="136" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="136" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="137" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="137" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="138" pos:column="41">PreparedStatement</name></type> <name pos:line="138" pos:column="59">statement</name> <init pos:line="138" pos:column="69">= <expr><call><name><name pos:line="138" pos:column="71">conn</name><op:operator pos:line="138" pos:column="75">.</op:operator><name pos:line="138" pos:column="76">prepareStatement</name></name><argument_list pos:line="138" pos:column="92">(<argument><expr><name pos:line="138" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="139" pos:column="41">statement</name><op:operator pos:line="139" pos:column="50">.</op:operator><name pos:line="139" pos:column="51">setInt</name></name><argument_list pos:line="139" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="139" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="61">OfferID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="140" pos:column="41">ResultSet</name></type> <name pos:line="140" pos:column="51">rs</name> <init pos:line="140" pos:column="54">= <expr><call><name><name pos:line="140" pos:column="56">statement</name><op:operator pos:line="140" pos:column="65">.</op:operator><name pos:line="140" pos:column="66">executeQuery</name></name><argument_list pos:line="140" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="block" pos:line="141" pos:column="41">/*
					 * if found, return the found queue number
					 * else zero (0) is returned as no student was found on the wait list
					 */</comment>
					<if pos:line="145" pos:column="41">if<condition pos:line="145" pos:column="43">(<expr><call><name><name pos:line="145" pos:column="44">rs</name><op:operator pos:line="145" pos:column="46">.</op:operator><name pos:line="145" pos:column="47">first</name></name><argument_list pos:line="145" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="145" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="146" pos:column="49">DBAnnotation</name><op:operator pos:line="146" pos:column="61">.</op:operator><name pos:line="146" pos:column="62">annoate</name></name><argument_list pos:line="146" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="70">"queuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="82">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="146" pos:column="94">"QueuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="146" pos:column="106">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="147" pos:column="49">queuePos</name> <op:operator pos:line="147" pos:column="58">=</op:operator> <call><name><name pos:line="147" pos:column="60">rs</name><op:operator pos:line="147" pos:column="62">.</op:operator><name pos:line="147" pos:column="63">getInt</name></name><argument_list pos:line="147" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="70">"QueuePos"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>					
				}</block></then></if>
			}</block>
			
			<catch pos:line="152" pos:column="25">catch<parameter_list pos:line="152" pos:column="30">(<param><decl><type><name pos:line="152" pos:column="31">SQLException</name></type> <name pos:line="152" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="152" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="153" pos:column="33">System</name><op:operator pos:line="153" pos:column="39">.</op:operator><name pos:line="153" pos:column="40">out</name><op:operator pos:line="153" pos:column="43">.</op:operator><name pos:line="153" pos:column="44">println</name></name><argument_list pos:line="153" pos:column="51">(<argument><expr><call><name><name pos:line="153" pos:column="52">e</name><op:operator pos:line="153" pos:column="53">.</op:operator><name pos:line="153" pos:column="54">getMessage</name></name><argument_list pos:line="153" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="154" pos:column="33">e</name><op:operator pos:line="154" pos:column="34">.</op:operator><name pos:line="154" pos:column="35">printStackTrace</name></name><argument_list pos:line="154" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="158" pos:column="17">finally<block pos:line="158" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="161" pos:column="17">return <expr><name pos:line="161" pos:column="24">queuePos</name></expr>;</return>
		
	}</block></function>
	
	<comment type="block" pos:line="165" pos:column="9">/*
	 * Works same as the above function, just gives the minimum queue position
	 */</comment>
	<function><type><specifier pos:line="168" pos:column="9">private</specifier> <specifier pos:line="168" pos:column="17">static</specifier> <name pos:line="168" pos:column="24">int</name></type> <name pos:line="168" pos:column="28">getFirstQueuePosition</name><parameter_list pos:line="168" pos:column="49">(<param><decl><type><name pos:line="168" pos:column="50">int</name></type> <name pos:line="168" pos:column="54">OfferID</name></decl></param>)</parameter_list><block pos:line="168" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">int</name></type> <name pos:line="169" pos:column="21">queuePos</name> <init pos:line="169" pos:column="30">= <expr><lit:literal type="number" pos:line="169" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="170" pos:column="17">try<block pos:line="170" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="171" pos:column="25">Connection</name></type> <name pos:line="171" pos:column="36">conn</name> <init pos:line="171" pos:column="41">= <expr><call><name><name pos:line="171" pos:column="43">Database</name><op:operator pos:line="171" pos:column="51">.</op:operator><name pos:line="171" pos:column="52">getConnection</name></name><argument_list pos:line="171" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="173" pos:column="25">try<block pos:line="173" pos:column="28">{
				<if pos:line="174" pos:column="33">if<condition pos:line="174" pos:column="35">(<expr><name pos:line="174" pos:column="36">conn</name> <op:operator pos:line="174" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="174" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="174" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="175" pos:column="41">String</name></type> <name pos:line="175" pos:column="48">SemesterSelect</name> <init pos:line="175" pos:column="63">= <expr><lit:literal type="string" pos:line="175" pos:column="65">"Select min(QueuePos) as QueuePos"</lit:literal>
							<op:operator pos:line="176" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="176" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="177" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="177" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="178" pos:column="41">PreparedStatement</name></type> <name pos:line="178" pos:column="59">statement</name> <init pos:line="178" pos:column="69">= <expr><call><name><name pos:line="178" pos:column="71">conn</name><op:operator pos:line="178" pos:column="75">.</op:operator><name pos:line="178" pos:column="76">prepareStatement</name></name><argument_list pos:line="178" pos:column="92">(<argument><expr><name pos:line="178" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="179" pos:column="41">statement</name><op:operator pos:line="179" pos:column="50">.</op:operator><name pos:line="179" pos:column="51">setInt</name></name><argument_list pos:line="179" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="179" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="61">OfferID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="180" pos:column="41">ResultSet</name></type> <name pos:line="180" pos:column="51">rs</name> <init pos:line="180" pos:column="54">= <expr><call><name><name pos:line="180" pos:column="56">statement</name><op:operator pos:line="180" pos:column="65">.</op:operator><name pos:line="180" pos:column="66">executeQuery</name></name><argument_list pos:line="180" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="181" pos:column="41">if<condition pos:line="181" pos:column="43">(<expr><call><name><name pos:line="181" pos:column="44">rs</name><op:operator pos:line="181" pos:column="46">.</op:operator><name pos:line="181" pos:column="47">first</name></name><argument_list pos:line="181" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="181" pos:column="55">{
						<expr_stmt><expr><call><name><name pos:line="182" pos:column="49">DBAnnotation</name><op:operator pos:line="182" pos:column="61">.</op:operator><name pos:line="182" pos:column="62">annoate</name></name><argument_list pos:line="182" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="70">"queuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="82">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="182" pos:column="94">"QueuePos"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="182" pos:column="106">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="183" pos:column="49">queuePos</name> <op:operator pos:line="183" pos:column="58">=</op:operator> <call><name><name pos:line="183" pos:column="60">rs</name><op:operator pos:line="183" pos:column="62">.</op:operator><name pos:line="183" pos:column="63">getInt</name></name><argument_list pos:line="183" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="183" pos:column="70">"QueuePos"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>					
				}</block></then></if>
			}</block>
			
			<catch pos:line="188" pos:column="25">catch<parameter_list pos:line="188" pos:column="30">(<param><decl><type><name pos:line="188" pos:column="31">SQLException</name></type> <name pos:line="188" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="188" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="189" pos:column="33">System</name><op:operator pos:line="189" pos:column="39">.</op:operator><name pos:line="189" pos:column="40">out</name><op:operator pos:line="189" pos:column="43">.</op:operator><name pos:line="189" pos:column="44">println</name></name><argument_list pos:line="189" pos:column="51">(<argument><expr><call><name><name pos:line="189" pos:column="52">e</name><op:operator pos:line="189" pos:column="53">.</op:operator><name pos:line="189" pos:column="54">getMessage</name></name><argument_list pos:line="189" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="190" pos:column="33">e</name><op:operator pos:line="190" pos:column="34">.</op:operator><name pos:line="190" pos:column="35">printStackTrace</name></name><argument_list pos:line="190" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="194" pos:column="17">finally<block pos:line="194" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="197" pos:column="17">return <expr><name pos:line="197" pos:column="24">queuePos</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="200" pos:column="9">/*
	 * Retrieves all the students who are emailed and allowed to register for the specified offerid
	 */</comment>
	<function><type><specifier pos:line="203" pos:column="9">public</specifier> <specifier pos:line="203" pos:column="16">static</specifier> <name><name pos:line="203" pos:column="23">ArrayList</name><argument_list pos:line="203" pos:column="32">&lt;<argument><name pos:line="203" pos:column="33">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="42">getStudentsOnEmailList</name><parameter_list pos:line="203" pos:column="64">(<param><decl><type><name pos:line="203" pos:column="65">int</name></type> <name pos:line="203" pos:column="69">offerID</name></decl></param>)</parameter_list><block pos:line="203" pos:column="77">{
		<decl_stmt><decl><type><name><name pos:line="204" pos:column="17">ArrayList</name><argument_list pos:line="204" pos:column="26">&lt;<argument><name pos:line="204" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="36">students</name> <init pos:line="204" pos:column="45">= <expr><op:operator pos:line="204" pos:column="47">new</op:operator> <call><name><name pos:line="204" pos:column="51">ArrayList</name><argument_list pos:line="204" pos:column="60">&lt;<argument><name pos:line="204" pos:column="61">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="204" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try pos:line="206" pos:column="17">try<block pos:line="206" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="207" pos:column="25">Connection</name></type> <name pos:line="207" pos:column="36">conn</name> <init pos:line="207" pos:column="41">= <expr><call><name><name pos:line="207" pos:column="43">Database</name><op:operator pos:line="207" pos:column="51">.</op:operator><name pos:line="207" pos:column="52">getConnection</name></name><argument_list pos:line="207" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="209" pos:column="25">try<block pos:line="209" pos:column="28">{
				<if pos:line="210" pos:column="33">if<condition pos:line="210" pos:column="35">(<expr><name pos:line="210" pos:column="36">conn</name> <op:operator pos:line="210" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="210" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="210" pos:column="49">{
					<comment type="block" pos:line="211" pos:column="41">/*
					 * Get all the emailed students for the offer id
					 */</comment>
					<decl_stmt><decl><type><name pos:line="214" pos:column="41">String</name></type> <name pos:line="214" pos:column="48">SemesterSelect</name> <init pos:line="214" pos:column="63">= <expr><lit:literal type="string" pos:line="214" pos:column="65">"Select StudentUIN"</lit:literal>
							<op:operator pos:line="215" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="215" pos:column="59">" FROM emailedwaitlist"</lit:literal>
							<op:operator pos:line="216" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="216" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="217" pos:column="41">PreparedStatement</name></type> <name pos:line="217" pos:column="59">statement</name> <init pos:line="217" pos:column="69">= <expr><call><name><name pos:line="217" pos:column="71">conn</name><op:operator pos:line="217" pos:column="75">.</op:operator><name pos:line="217" pos:column="76">prepareStatement</name></name><argument_list pos:line="217" pos:column="92">(<argument><expr><name pos:line="217" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">statement</name><op:operator pos:line="218" pos:column="50">.</op:operator><name pos:line="218" pos:column="51">setInt</name></name><argument_list pos:line="218" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="218" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="218" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="219" pos:column="41">ResultSet</name></type> <name pos:line="219" pos:column="51">rs</name> <init pos:line="219" pos:column="54">= <expr><call><name><name pos:line="219" pos:column="56">statement</name><op:operator pos:line="219" pos:column="65">.</op:operator><name pos:line="219" pos:column="66">executeQuery</name></name><argument_list pos:line="219" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<comment type="block" pos:line="221" pos:column="41">/*
					 * Add all student to array list
					 */</comment>
					<while pos:line="224" pos:column="41">while<condition pos:line="224" pos:column="46">(<expr><call><name><name pos:line="224" pos:column="47">rs</name><op:operator pos:line="224" pos:column="49">.</op:operator><name pos:line="224" pos:column="50">next</name></name><argument_list pos:line="224" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="224" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="225" pos:column="49">DBAnnotation</name><op:operator pos:line="225" pos:column="61">.</op:operator><name pos:line="225" pos:column="62">annoate</name></name><argument_list pos:line="225" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="70">"sUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="78">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="97">"StudentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="225" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="226" pos:column="49">int</name></type> <name pos:line="226" pos:column="53">sUIN</name> <init pos:line="226" pos:column="58">= <expr><call><name><name pos:line="226" pos:column="60">rs</name><op:operator pos:line="226" pos:column="62">.</op:operator><name pos:line="226" pos:column="63">getInt</name></name><argument_list pos:line="226" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="226" pos:column="70">"StudentUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="227" pos:column="49">students</name><op:operator pos:line="227" pos:column="57">.</op:operator><name pos:line="227" pos:column="58">add</name></name><argument_list pos:line="227" pos:column="61">(<argument><expr><op:operator pos:line="227" pos:column="62">new</op:operator> <call><name pos:line="227" pos:column="66">Student</name><argument_list pos:line="227" pos:column="73">(<argument><expr><name pos:line="227" pos:column="74">sUIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="232" pos:column="25">catch<parameter_list pos:line="232" pos:column="30">(<param><decl><type><name pos:line="232" pos:column="31">SQLException</name></type> <name pos:line="232" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="232" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="233" pos:column="33">System</name><op:operator pos:line="233" pos:column="39">.</op:operator><name pos:line="233" pos:column="40">out</name><op:operator pos:line="233" pos:column="43">.</op:operator><name pos:line="233" pos:column="44">println</name></name><argument_list pos:line="233" pos:column="51">(<argument><expr><call><name><name pos:line="233" pos:column="52">e</name><op:operator pos:line="233" pos:column="53">.</op:operator><name pos:line="233" pos:column="54">getMessage</name></name><argument_list pos:line="233" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="234" pos:column="33">e</name><op:operator pos:line="234" pos:column="34">.</op:operator><name pos:line="234" pos:column="35">printStackTrace</name></name><argument_list pos:line="234" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="235" pos:column="27">catch <parameter_list pos:line="235" pos:column="33">(<param><decl><type><name><name pos:line="235" pos:column="34">People</name><op:operator pos:line="235" pos:column="40">.</op:operator><name pos:line="235" pos:column="41">PersonDoesNotExistException</name></name></type> <name pos:line="235" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="235" pos:column="72">{
				<comment type="line" pos:line="236" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="237" pos:column="33">e</name><op:operator pos:line="237" pos:column="34">.</op:operator><name pos:line="237" pos:column="35">printStackTrace</name></name><argument_list pos:line="237" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="241" pos:column="17">finally<block pos:line="241" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="244" pos:column="17">return <expr><name pos:line="244" pos:column="24">students</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="247" pos:column="9">/*
	 * Get all wait list student for the specified offer id
	 */</comment>
	<function><type><specifier pos:line="250" pos:column="9">public</specifier> <specifier pos:line="250" pos:column="16">static</specifier> <name><name pos:line="250" pos:column="23">ArrayList</name><argument_list pos:line="250" pos:column="32">&lt;<argument><name pos:line="250" pos:column="33">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="250" pos:column="42">getStudentsOnWaitList</name><parameter_list pos:line="250" pos:column="63">(<param><decl><type><name pos:line="250" pos:column="64">int</name></type> <name pos:line="250" pos:column="68">offerID</name></decl></param>)</parameter_list><block pos:line="250" pos:column="76">{
		<decl_stmt><decl><type><name><name pos:line="251" pos:column="17">ArrayList</name><argument_list pos:line="251" pos:column="26">&lt;<argument><name pos:line="251" pos:column="27">Student</name></argument>&gt;</argument_list></name></type> <name pos:line="251" pos:column="36">students</name> <init pos:line="251" pos:column="45">= <expr><op:operator pos:line="251" pos:column="47">new</op:operator> <call><name><name pos:line="251" pos:column="51">ArrayList</name><argument_list pos:line="251" pos:column="60">&lt;<argument><name pos:line="251" pos:column="61">Student</name></argument>&gt;</argument_list></name><argument_list pos:line="251" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="252" pos:column="17">if<condition pos:line="252" pos:column="19">(<expr><call><name pos:line="252" pos:column="20">isWaitListEmpty</name><argument_list pos:line="252" pos:column="35">(<argument><expr><name pos:line="252" pos:column="36">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="252" pos:column="45">{
			<return pos:line="253" pos:column="25">return <expr><name pos:line="253" pos:column="32">students</name></expr>;</return>
		}</block></then></if>
		
		<try pos:line="256" pos:column="17">try<block pos:line="256" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="257" pos:column="25">Connection</name></type> <name pos:line="257" pos:column="36">conn</name> <init pos:line="257" pos:column="41">= <expr><call><name><name pos:line="257" pos:column="43">Database</name><op:operator pos:line="257" pos:column="51">.</op:operator><name pos:line="257" pos:column="52">getConnection</name></name><argument_list pos:line="257" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="259" pos:column="25">try<block pos:line="259" pos:column="28">{
				<if pos:line="260" pos:column="33">if<condition pos:line="260" pos:column="35">(<expr><name pos:line="260" pos:column="36">conn</name> <op:operator pos:line="260" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="260" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="260" pos:column="49">{
					<comment type="block" pos:line="261" pos:column="41">/*
					 * Select all wait list students for the offer id
					 */</comment>
					<decl_stmt><decl><type><name pos:line="264" pos:column="41">String</name></type> <name pos:line="264" pos:column="48">SemesterSelect</name> <init pos:line="264" pos:column="63">= <expr><lit:literal type="string" pos:line="264" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="265" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="265" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="266" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="266" pos:column="59">" WHERE offerID= ?"</lit:literal>
							<op:operator pos:line="267" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="267" pos:column="59">" ORDER BY QueuePos"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="268" pos:column="41">PreparedStatement</name></type> <name pos:line="268" pos:column="59">statement</name> <init pos:line="268" pos:column="69">= <expr><call><name><name pos:line="268" pos:column="71">conn</name><op:operator pos:line="268" pos:column="75">.</op:operator><name pos:line="268" pos:column="76">prepareStatement</name></name><argument_list pos:line="268" pos:column="92">(<argument><expr><name pos:line="268" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="269" pos:column="41">statement</name><op:operator pos:line="269" pos:column="50">.</op:operator><name pos:line="269" pos:column="51">setInt</name></name><argument_list pos:line="269" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="269" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="269" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="270" pos:column="41">ResultSet</name></type> <name pos:line="270" pos:column="51">rs</name> <init pos:line="270" pos:column="54">= <expr><call><name><name pos:line="270" pos:column="56">statement</name><op:operator pos:line="270" pos:column="65">.</op:operator><name pos:line="270" pos:column="66">executeQuery</name></name><argument_list pos:line="270" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<comment type="block" pos:line="271" pos:column="41">/*
					 * add all retrieved students to wait list
					 */</comment>
					<while pos:line="274" pos:column="41">while<condition pos:line="274" pos:column="46">(<expr><call><name><name pos:line="274" pos:column="47">rs</name><op:operator pos:line="274" pos:column="49">.</op:operator><name pos:line="274" pos:column="50">next</name></name><argument_list pos:line="274" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="274" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="275" pos:column="49">DBAnnotation</name><op:operator pos:line="275" pos:column="61">.</op:operator><name pos:line="275" pos:column="62">annoate</name></name><argument_list pos:line="275" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="275" pos:column="70">"sUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="78">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="90">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="275" pos:column="97">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="276" pos:column="49">int</name></type> <name pos:line="276" pos:column="53">sUIN</name> <init pos:line="276" pos:column="58">= <expr><call><name><name pos:line="276" pos:column="60">rs</name><op:operator pos:line="276" pos:column="62">.</op:operator><name pos:line="276" pos:column="63">getInt</name></name><argument_list pos:line="276" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="70">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="277" pos:column="49">students</name><op:operator pos:line="277" pos:column="57">.</op:operator><name pos:line="277" pos:column="58">add</name></name><argument_list pos:line="277" pos:column="61">(<argument><expr><op:operator pos:line="277" pos:column="62">new</op:operator> <call><name pos:line="277" pos:column="66">Student</name><argument_list pos:line="277" pos:column="73">(<argument><expr><name pos:line="277" pos:column="74">sUIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="282" pos:column="25">catch<parameter_list pos:line="282" pos:column="30">(<param><decl><type><name pos:line="282" pos:column="31">SQLException</name></type> <name pos:line="282" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="282" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="283" pos:column="33">System</name><op:operator pos:line="283" pos:column="39">.</op:operator><name pos:line="283" pos:column="40">out</name><op:operator pos:line="283" pos:column="43">.</op:operator><name pos:line="283" pos:column="44">println</name></name><argument_list pos:line="283" pos:column="51">(<argument><expr><call><name><name pos:line="283" pos:column="52">e</name><op:operator pos:line="283" pos:column="53">.</op:operator><name pos:line="283" pos:column="54">getMessage</name></name><argument_list pos:line="283" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="284" pos:column="33">e</name><op:operator pos:line="284" pos:column="34">.</op:operator><name pos:line="284" pos:column="35">printStackTrace</name></name><argument_list pos:line="284" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="285" pos:column="27">catch <parameter_list pos:line="285" pos:column="33">(<param><decl><type><name><name pos:line="285" pos:column="34">People</name><op:operator pos:line="285" pos:column="40">.</op:operator><name pos:line="285" pos:column="41">PersonDoesNotExistException</name></name></type> <name pos:line="285" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="285" pos:column="72">{
				<comment type="line" pos:line="286" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="287" pos:column="33">e</name><op:operator pos:line="287" pos:column="34">.</op:operator><name pos:line="287" pos:column="35">printStackTrace</name></name><argument_list pos:line="287" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="291" pos:column="17">finally<block pos:line="291" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="294" pos:column="17">return <expr><name pos:line="294" pos:column="24">students</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="297" pos:column="9">/*
	 * Get all wait list courses of the student specified
	 */</comment>
	<function><type><specifier pos:line="300" pos:column="9">public</specifier> <specifier pos:line="300" pos:column="16">static</specifier> <name><name pos:line="300" pos:column="23">ArrayList</name><argument_list pos:line="300" pos:column="32">&lt;<argument><name pos:line="300" pos:column="33">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="300" pos:column="48">getWaitListCoursesOfStudent</name><parameter_list pos:line="300" pos:column="75">(<param><decl><type><name pos:line="300" pos:column="76">Student</name></type> <name pos:line="300" pos:column="84">s</name></decl></param>)</parameter_list><block pos:line="300" pos:column="86">{
		<decl_stmt><decl><type><name><name pos:line="301" pos:column="17">ArrayList</name><argument_list pos:line="301" pos:column="26">&lt;<argument><name pos:line="301" pos:column="27">CourseOffered</name></argument>&gt;</argument_list></name></type> <name pos:line="301" pos:column="42">waitListCourses</name> <init pos:line="301" pos:column="58">= <expr><op:operator pos:line="301" pos:column="60">new</op:operator> <call><name><name pos:line="301" pos:column="64">ArrayList</name><argument_list pos:line="301" pos:column="73">&lt;<argument><name pos:line="301" pos:column="74">CourseOffered</name></argument>&gt;</argument_list></name><argument_list pos:line="301" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try pos:line="302" pos:column="17">try<block pos:line="302" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="303" pos:column="25">Connection</name></type> <name pos:line="303" pos:column="36">conn</name> <init pos:line="303" pos:column="41">= <expr><call><name><name pos:line="303" pos:column="43">Database</name><op:operator pos:line="303" pos:column="51">.</op:operator><name pos:line="303" pos:column="52">getConnection</name></name><argument_list pos:line="303" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="305" pos:column="25">try<block pos:line="305" pos:column="28">{
				<if pos:line="306" pos:column="33">if<condition pos:line="306" pos:column="35">(<expr><name pos:line="306" pos:column="36">conn</name> <op:operator pos:line="306" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="306" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="306" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="307" pos:column="41">String</name></type> <name pos:line="307" pos:column="48">SQLSelect</name> <init pos:line="307" pos:column="58">= <expr><lit:literal type="string" pos:line="307" pos:column="60">"Select *"</lit:literal>
							<op:operator pos:line="308" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="308" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="309" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="309" pos:column="59">" WHERE UIN= ?"</lit:literal>
							<op:operator pos:line="310" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="310" pos:column="59">" ORDER BY QueuePos"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="311" pos:column="41">PreparedStatement</name></type> <name pos:line="311" pos:column="59">statement</name> <init pos:line="311" pos:column="69">= <expr><call><name><name pos:line="311" pos:column="71">conn</name><op:operator pos:line="311" pos:column="75">.</op:operator><name pos:line="311" pos:column="76">prepareStatement</name></name><argument_list pos:line="311" pos:column="92">(<argument><expr><name pos:line="311" pos:column="93">SQLSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="312" pos:column="41">statement</name><op:operator pos:line="312" pos:column="50">.</op:operator><name pos:line="312" pos:column="51">setInt</name></name><argument_list pos:line="312" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="312" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="312" pos:column="61">s</name><op:operator pos:line="312" pos:column="62">.</op:operator><name pos:line="312" pos:column="63">getUIN</name></name><argument_list pos:line="312" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="313" pos:column="41">ResultSet</name></type> <name pos:line="313" pos:column="51">rs</name> <init pos:line="313" pos:column="54">= <expr><call><name><name pos:line="313" pos:column="56">statement</name><op:operator pos:line="313" pos:column="65">.</op:operator><name pos:line="313" pos:column="66">executeQuery</name></name><argument_list pos:line="313" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while pos:line="314" pos:column="41">while<condition pos:line="314" pos:column="46">(<expr><call><name><name pos:line="314" pos:column="47">rs</name><op:operator pos:line="314" pos:column="49">.</op:operator><name pos:line="314" pos:column="50">next</name></name><argument_list pos:line="314" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="314" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="315" pos:column="49">DBAnnotation</name><op:operator pos:line="315" pos:column="61">.</op:operator><name pos:line="315" pos:column="62">annoate</name></name><argument_list pos:line="315" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="81">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="93">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="315" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="316" pos:column="49">int</name></type> <name pos:line="316" pos:column="53">offerID</name> <init pos:line="316" pos:column="61">= <expr><call><name><name pos:line="316" pos:column="63">rs</name><op:operator pos:line="316" pos:column="65">.</op:operator><name pos:line="316" pos:column="66">getInt</name></name><argument_list pos:line="316" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="316" pos:column="73">"OfferID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="317" pos:column="49">waitListCourses</name><op:operator pos:line="317" pos:column="64">.</op:operator><name pos:line="317" pos:column="65">add</name></name><argument_list pos:line="317" pos:column="68">(<argument><expr><op:operator pos:line="317" pos:column="69">new</op:operator> <call><name pos:line="317" pos:column="73">CourseOffered</name><argument_list pos:line="317" pos:column="86">(<argument><expr><name pos:line="317" pos:column="87">offerID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
			}</block>
			
			<catch pos:line="322" pos:column="25">catch<parameter_list pos:line="322" pos:column="30">(<param><decl><type><name pos:line="322" pos:column="31">SQLException</name></type> <name pos:line="322" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="322" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="323" pos:column="33">System</name><op:operator pos:line="323" pos:column="39">.</op:operator><name pos:line="323" pos:column="40">out</name><op:operator pos:line="323" pos:column="43">.</op:operator><name pos:line="323" pos:column="44">println</name></name><argument_list pos:line="323" pos:column="51">(<argument><expr><call><name><name pos:line="323" pos:column="52">e</name><op:operator pos:line="323" pos:column="53">.</op:operator><name pos:line="323" pos:column="54">getMessage</name></name><argument_list pos:line="323" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="324" pos:column="33">e</name><op:operator pos:line="324" pos:column="34">.</op:operator><name pos:line="324" pos:column="35">printStackTrace</name></name><argument_list pos:line="324" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="325" pos:column="27">catch <parameter_list pos:line="325" pos:column="33">(<param><decl><type><name><name pos:line="325" pos:column="34">Course</name><op:operator pos:line="325" pos:column="40">.</op:operator><name pos:line="325" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="325" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="325" pos:column="72">{
				<comment type="line" pos:line="326" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="327" pos:column="33">e</name><op:operator pos:line="327" pos:column="34">.</op:operator><name pos:line="327" pos:column="35">printStackTrace</name></name><argument_list pos:line="327" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="328" pos:column="27">catch <parameter_list pos:line="328" pos:column="33">(<param><decl><type><name><name pos:line="328" pos:column="34">CourseOffered</name><op:operator pos:line="328" pos:column="47">.</op:operator><name pos:line="328" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="328" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="328" pos:column="87">{
				<comment type="line" pos:line="329" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="330" pos:column="33">e</name><op:operator pos:line="330" pos:column="34">.</op:operator><name pos:line="330" pos:column="35">printStackTrace</name></name><argument_list pos:line="330" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="334" pos:column="17">finally<block pos:line="334" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="337" pos:column="17">return <expr><name pos:line="337" pos:column="24">waitListCourses</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="340" pos:column="9">/*
	 * Checks if the course can accommodate a new student if the student was moved from wait list 
	 * to email list ad allowed to register
	 */</comment>
	<function><type><specifier pos:line="344" pos:column="9">private</specifier> <specifier pos:line="344" pos:column="17">static</specifier> <name pos:line="344" pos:column="24">boolean</name></type> <name pos:line="344" pos:column="32">canCourseAccomodateNewStudentFromWaitList</name><parameter_list pos:line="344" pos:column="73">(<param><decl><type><name pos:line="344" pos:column="74">int</name></type> <name pos:line="344" pos:column="78">offerID</name></decl></param>)</parameter_list><block pos:line="344" pos:column="86">{
		<decl_stmt><decl><type><name pos:line="345" pos:column="17">CourseOffered</name></type> <name pos:line="345" pos:column="31">c</name> <init pos:line="345" pos:column="33">= <expr><lit:literal type="null" pos:line="345" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="block" pos:line="346" pos:column="17">/*
		 * mathematical calculations to check if the course can accommodate a new student
		 */</comment>
		<try pos:line="349" pos:column="17">try <block pos:line="349" pos:column="21">{
			<expr_stmt><expr><name pos:line="350" pos:column="25">c</name> <op:operator pos:line="350" pos:column="27">=</op:operator> <op:operator pos:line="350" pos:column="29">new</op:operator> <call><name pos:line="350" pos:column="33">CourseOffered</name><argument_list pos:line="350" pos:column="46">(<argument><expr><name pos:line="350" pos:column="47">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="351" pos:column="25">int</name></type> <name pos:line="351" pos:column="29">seatRem</name> <init pos:line="351" pos:column="37">= <expr><call><name><name pos:line="351" pos:column="39">c</name><op:operator pos:line="351" pos:column="40">.</op:operator><name pos:line="351" pos:column="41">getTotalCapacity</name></name><argument_list pos:line="351" pos:column="57">()</argument_list></call> <op:operator pos:line="351" pos:column="60">-</op:operator> <call><name><name pos:line="351" pos:column="62">c</name><op:operator pos:line="351" pos:column="63">.</op:operator><name pos:line="351" pos:column="64">getCurrentlyFilled</name></name><argument_list pos:line="351" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="352" pos:column="25">int</name></type> <name pos:line="352" pos:column="29">studentsEmailed</name> <init pos:line="352" pos:column="45">= <expr><call><name pos:line="352" pos:column="47">getStudentsOnEmailList</name><argument_list pos:line="352" pos:column="69">(<argument><expr><name pos:line="352" pos:column="70">offerID</name></expr></argument>)</argument_list></call><op:operator pos:line="352" pos:column="78">.</op:operator><call><name pos:line="352" pos:column="79">size</name><argument_list pos:line="352" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="353" pos:column="25">if<condition pos:line="353" pos:column="27">(<expr><name pos:line="353" pos:column="28">studentsEmailed</name><op:operator pos:line="353" pos:column="43">+</op:operator><lit:literal type="number" pos:line="353" pos:column="44">1</lit:literal> <op:operator pos:line="353" pos:column="46">&lt;=</op:operator> <name pos:line="353" pos:column="49">seatRem</name></expr>)</condition><then pos:line="353" pos:column="57">
				<return pos:line="354" pos:column="33">return <expr><lit:literal type="boolean" pos:line="354" pos:column="40">true</lit:literal></expr>;</return></then>
			<else pos:line="355" pos:column="25">else
				<return pos:line="356" pos:column="33">return <expr><lit:literal type="boolean" pos:line="356" pos:column="40">false</lit:literal></expr>;</return></else></if>
		}</block> <catch pos:line="357" pos:column="19">catch <parameter_list pos:line="357" pos:column="25">(<param><decl><type><name><name pos:line="357" pos:column="26">Course</name><op:operator pos:line="357" pos:column="32">.</op:operator><name pos:line="357" pos:column="33">CourseDoesNotExistException</name></name></type> <name pos:line="357" pos:column="61">e</name></decl></param>)</parameter_list> <block pos:line="357" pos:column="64">{
			<comment type="line" pos:line="358" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="359" pos:column="25">e</name><op:operator pos:line="359" pos:column="26">.</op:operator><name pos:line="359" pos:column="27">printStackTrace</name></name><argument_list pos:line="359" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="360" pos:column="25">return <expr><lit:literal type="boolean" pos:line="360" pos:column="32">false</lit:literal></expr>;</return>
		}</block></catch> <catch pos:line="361" pos:column="19">catch <parameter_list pos:line="361" pos:column="25">(<param><decl><type><name><name pos:line="361" pos:column="26">CourseOffered</name><op:operator pos:line="361" pos:column="39">.</op:operator><name pos:line="361" pos:column="40">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="361" pos:column="76">e</name></decl></param>)</parameter_list> <block pos:line="361" pos:column="79">{
			<comment type="line" pos:line="362" pos:column="25">// TODO Auto-generated catch block</comment>
			<expr_stmt><expr><call><name><name pos:line="363" pos:column="25">e</name><op:operator pos:line="363" pos:column="26">.</op:operator><name pos:line="363" pos:column="27">printStackTrace</name></name><argument_list pos:line="363" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="364" pos:column="25">return <expr><lit:literal type="boolean" pos:line="364" pos:column="32">false</lit:literal></expr>;</return>
		}</block></catch></try>
		
		
		
	}</block></function>
	
	<comment type="block" pos:line="371" pos:column="9">/*
	 * Checks if the student is eligible to be put on waitlist
	 */</comment>
 	<function><type><specifier pos:line="374" pos:column="9">public</specifier> <specifier pos:line="374" pos:column="16">static</specifier> <name pos:line="374" pos:column="23">boolean</name></type> <name pos:line="374" pos:column="31">canBeAddedToWaitList</name><parameter_list pos:line="374" pos:column="51">(<param><decl><type><name pos:line="374" pos:column="52">Student</name></type> <name pos:line="374" pos:column="60">student</name></decl></param>, <param><decl><type><name pos:line="374" pos:column="69">int</name></type> <name pos:line="374" pos:column="73">offerID</name></decl></param>)</parameter_list> <throws pos:line="374" pos:column="82">throws <argument><expr><name><name pos:line="374" pos:column="89">Course</name><op:operator pos:line="374" pos:column="95">.</op:operator><name pos:line="374" pos:column="96">CourseDoesNotExistException</name></name></expr></argument>, <argument><expr><name><name pos:line="374" pos:column="125">CourseOffered</name><op:operator pos:line="374" pos:column="138">.</op:operator><name pos:line="374" pos:column="139">CourseOfferingDoesNotExistException</name></name></expr></argument></throws><block pos:line="374" pos:column="174">{
		<decl_stmt><decl><type><name pos:line="375" pos:column="17">boolean</name></type> <name pos:line="375" pos:column="25">canBeAdded</name> <init pos:line="375" pos:column="36">= <expr><lit:literal type="boolean" pos:line="375" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="376" pos:column="17">CourseOffered</name></type> <name pos:line="376" pos:column="31">courseOffered</name> <init pos:line="376" pos:column="45">= <expr><op:operator pos:line="376" pos:column="47">new</op:operator> <call><name pos:line="376" pos:column="51">CourseOffered</name><argument_list pos:line="376" pos:column="64">(<argument><expr><name pos:line="376" pos:column="65">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="377" pos:column="17">if<condition pos:line="377" pos:column="19">(<expr><call><name><name pos:line="377" pos:column="20">courseOffered</name><op:operator pos:line="377" pos:column="33">.</op:operator><name pos:line="377" pos:column="34">isCourseRegistrableBy</name></name><argument_list pos:line="377" pos:column="55">(<argument><expr><name pos:line="377" pos:column="56">student</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="377" pos:column="65">{
			<expr_stmt><expr><name pos:line="378" pos:column="25">canBeAdded</name> <op:operator pos:line="378" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="378" pos:column="38">false</lit:literal></expr>;</expr_stmt>
			<return pos:line="379" pos:column="25">return <expr><name pos:line="379" pos:column="32">canBeAdded</name></expr>;</return>
		}</block></then></if>
		
		<if pos:line="382" pos:column="17">if<condition pos:line="382" pos:column="19">(<expr><op:operator pos:line="382" pos:column="20">!</op:operator><call><name pos:line="382" pos:column="21">isStudentRegistered</name><argument_list pos:line="382" pos:column="40">(<argument><expr><name pos:line="382" pos:column="41">student</name></expr></argument>, <argument><expr><name pos:line="382" pos:column="50">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="382" pos:column="59">{
			<if pos:line="383" pos:column="25">if<condition pos:line="383" pos:column="27">(<expr><op:operator pos:line="383" pos:column="28">!</op:operator><call><name pos:line="383" pos:column="29">isStudentOnWaitList</name><argument_list pos:line="383" pos:column="48">(<argument><expr><name pos:line="383" pos:column="49">student</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="58">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="383" pos:column="67">{
				<if pos:line="384" pos:column="33">if<condition pos:line="384" pos:column="35">(<expr><op:operator pos:line="384" pos:column="36">!</op:operator><call><name pos:line="384" pos:column="37">isStudentEmailed</name><argument_list pos:line="384" pos:column="53">(<argument><expr><name pos:line="384" pos:column="54">student</name></expr></argument>, <argument><expr><name pos:line="384" pos:column="63">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="384" pos:column="72">{
					<expr_stmt><expr><name pos:line="385" pos:column="41">canBeAdded</name> <op:operator pos:line="385" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="385" pos:column="54">true</lit:literal></expr>;</expr_stmt>
					<return pos:line="386" pos:column="41">return <expr><name pos:line="386" pos:column="48">canBeAdded</name></expr>;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>
		
		<return pos:line="391" pos:column="17">return <expr><name pos:line="391" pos:column="24">canBeAdded</name></expr>;</return>
	}</block></function>
	
 	<comment type="block" pos:line="394" pos:column="9">/*
 	 * Removes the specified student from the waitlist of the offer id
 	 * this can be called directly by the automatic scanner which scans for students
 	 * who are eligible to be put from wait to email list ad allowed to register
 	 */</comment>
	<function><type><specifier pos:line="399" pos:column="9">public</specifier> <specifier pos:line="399" pos:column="16">static</specifier> <name pos:line="399" pos:column="23">boolean</name></type> <name pos:line="399" pos:column="31">removeFromWaitList</name><parameter_list pos:line="399" pos:column="49">(<param><decl><type><name pos:line="399" pos:column="50">Student</name></type> <name pos:line="399" pos:column="58">student</name></decl></param>, <param><decl><type><name pos:line="399" pos:column="67">int</name></type> <name pos:line="399" pos:column="71">offerID</name></decl></param>)</parameter_list><block pos:line="399" pos:column="79">{
		<decl_stmt><decl><type><name pos:line="400" pos:column="17">int</name></type> <name pos:line="400" pos:column="21">UIN</name> <init pos:line="400" pos:column="25">= <expr><call><name><name pos:line="400" pos:column="27">student</name><op:operator pos:line="400" pos:column="34">.</op:operator><name pos:line="400" pos:column="35">getUIN</name></name><argument_list pos:line="400" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="401" pos:column="17">boolean</name></type> <name pos:line="401" pos:column="25">isRemoved</name> <init pos:line="401" pos:column="35">= <expr><lit:literal type="boolean" pos:line="401" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="402" pos:column="17">try<block pos:line="402" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="403" pos:column="25">Connection</name></type> <name pos:line="403" pos:column="36">conn</name> <init pos:line="403" pos:column="41">= <expr><call><name><name pos:line="403" pos:column="43">Database</name><op:operator pos:line="403" pos:column="51">.</op:operator><name pos:line="403" pos:column="52">getConnection</name></name><argument_list pos:line="403" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="405" pos:column="25">try<block pos:line="405" pos:column="28">{
				<if pos:line="406" pos:column="33">if<condition pos:line="406" pos:column="35">(<expr><name pos:line="406" pos:column="36">conn</name> <op:operator pos:line="406" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="406" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="406" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="407" pos:column="41">System</name><op:operator pos:line="407" pos:column="47">.</op:operator><name pos:line="407" pos:column="48">out</name><op:operator pos:line="407" pos:column="51">.</op:operator><name pos:line="407" pos:column="52">println</name></name><argument_list pos:line="407" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="407" pos:column="60">"Deleting student from wait list"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="408" pos:column="41">String</name></type> <name pos:line="408" pos:column="48">WaitListInsert</name> <init pos:line="408" pos:column="63">= <expr><lit:literal type="string" pos:line="408" pos:column="65">"DELETE FROM waitlist "</lit:literal>
							<op:operator pos:line="409" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="409" pos:column="59">"WHERE UIN= ? and OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="410" pos:column="41">PreparedStatement</name></type> <name pos:line="410" pos:column="59">statement</name> <init pos:line="410" pos:column="69">= <expr><call><name><name pos:line="410" pos:column="71">conn</name><op:operator pos:line="410" pos:column="75">.</op:operator><name pos:line="410" pos:column="76">prepareStatement</name></name><argument_list pos:line="410" pos:column="92">(<argument><expr><name pos:line="410" pos:column="93">WaitListInsert</name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="109">ResultSet</name><op:operator pos:line="410" pos:column="118">.</op:operator><name pos:line="410" pos:column="119">CONCUR_UPDATABLE</name></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="137">ResultSet</name><op:operator pos:line="410" pos:column="146">.</op:operator><name pos:line="410" pos:column="147">TYPE_FORWARD_ONLY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="411" pos:column="41">statement</name><op:operator pos:line="411" pos:column="50">.</op:operator><name pos:line="411" pos:column="51">setInt</name></name><argument_list pos:line="411" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="411" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="412" pos:column="41">statement</name><op:operator pos:line="412" pos:column="50">.</op:operator><name pos:line="412" pos:column="51">setInt</name></name><argument_list pos:line="412" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="412" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="412" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="413" pos:column="41">statement</name><op:operator pos:line="413" pos:column="50">.</op:operator><name pos:line="413" pos:column="51">executeUpdate</name></name><argument_list pos:line="413" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="414" pos:column="41">DBAnnotation</name><op:operator pos:line="414" pos:column="53">.</op:operator><name pos:line="414" pos:column="54">annoate</name></name><argument_list pos:line="414" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="414" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="414" pos:column="69">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="414" pos:column="81">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="414" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="415" pos:column="41">DBAnnotation</name><op:operator pos:line="415" pos:column="53">.</op:operator><name pos:line="415" pos:column="54">annoate</name></name><argument_list pos:line="415" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="415" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="415" pos:column="73">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="415" pos:column="85">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="415" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="416" pos:column="41">isRemoved</name> <op:operator pos:line="416" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="416" pos:column="53">true</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="417" pos:column="41">//Database.commitTransaction(conn);											</comment>
				}</block></then></if>
			}</block>
			
			<catch pos:line="421" pos:column="25">catch<parameter_list pos:line="421" pos:column="30">(<param><decl><type><name pos:line="421" pos:column="31">SQLException</name></type> <name pos:line="421" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="421" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="422" pos:column="33">System</name><op:operator pos:line="422" pos:column="39">.</op:operator><name pos:line="422" pos:column="40">out</name><op:operator pos:line="422" pos:column="43">.</op:operator><name pos:line="422" pos:column="44">println</name></name><argument_list pos:line="422" pos:column="51">(<argument><expr><call><name><name pos:line="422" pos:column="52">e</name><op:operator pos:line="422" pos:column="53">.</op:operator><name pos:line="422" pos:column="54">getMessage</name></name><argument_list pos:line="422" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="423" pos:column="33">e</name><op:operator pos:line="423" pos:column="34">.</op:operator><name pos:line="423" pos:column="35">printStackTrace</name></name><argument_list pos:line="423" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="427" pos:column="17">finally<block pos:line="427" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="430" pos:column="17">return <expr><name pos:line="430" pos:column="24">isRemoved</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="433" pos:column="9">/*
	 * this function is externally called when a student removes self from waitlist
	 */</comment>
	<function><type><specifier pos:line="436" pos:column="9">public</specifier> <specifier pos:line="436" pos:column="16">static</specifier> <name pos:line="436" pos:column="23">boolean</name></type> <name pos:line="436" pos:column="31">removeFromWaitListAndCommit</name><parameter_list pos:line="436" pos:column="58">(<param><decl><type><name pos:line="436" pos:column="59">Student</name></type> <name pos:line="436" pos:column="67">student</name></decl></param>, <param><decl><type><name pos:line="436" pos:column="76">int</name></type> <name pos:line="436" pos:column="80">offerID</name></decl></param>)</parameter_list><block pos:line="436" pos:column="88">{
		<decl_stmt><decl><type><name pos:line="437" pos:column="17">int</name></type> <name pos:line="437" pos:column="21">UIN</name> <init pos:line="437" pos:column="25">= <expr><call><name><name pos:line="437" pos:column="27">student</name><op:operator pos:line="437" pos:column="34">.</op:operator><name pos:line="437" pos:column="35">getUIN</name></name><argument_list pos:line="437" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="438" pos:column="17">boolean</name></type> <name pos:line="438" pos:column="25">isRemoved</name> <init pos:line="438" pos:column="35">= <expr><lit:literal type="boolean" pos:line="438" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="439" pos:column="17">try<block pos:line="439" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="440" pos:column="25">Connection</name></type> <name pos:line="440" pos:column="36">conn</name> <init pos:line="440" pos:column="41">= <expr><call><name><name pos:line="440" pos:column="43">Database</name><op:operator pos:line="440" pos:column="51">.</op:operator><name pos:line="440" pos:column="52">getConnection</name></name><argument_list pos:line="440" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="442" pos:column="25">try<block pos:line="442" pos:column="28">{
				<if pos:line="443" pos:column="33">if<condition pos:line="443" pos:column="35">(<expr><name pos:line="443" pos:column="36">conn</name> <op:operator pos:line="443" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="443" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="443" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="444" pos:column="41">System</name><op:operator pos:line="444" pos:column="47">.</op:operator><name pos:line="444" pos:column="48">out</name><op:operator pos:line="444" pos:column="51">.</op:operator><name pos:line="444" pos:column="52">println</name></name><argument_list pos:line="444" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="444" pos:column="60">"Deleting student from wait list"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="445" pos:column="41">String</name></type> <name pos:line="445" pos:column="48">WaitListInsert</name> <init pos:line="445" pos:column="63">= <expr><lit:literal type="string" pos:line="445" pos:column="65">"DELETE FROM waitlist "</lit:literal>
							<op:operator pos:line="446" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="446" pos:column="59">"WHERE UIN= ? and OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="447" pos:column="41">PreparedStatement</name></type> <name pos:line="447" pos:column="59">statement</name> <init pos:line="447" pos:column="69">= <expr><call><name><name pos:line="447" pos:column="71">conn</name><op:operator pos:line="447" pos:column="75">.</op:operator><name pos:line="447" pos:column="76">prepareStatement</name></name><argument_list pos:line="447" pos:column="92">(<argument><expr><name pos:line="447" pos:column="93">WaitListInsert</name></expr></argument>, <argument><expr><name><name pos:line="447" pos:column="109">ResultSet</name><op:operator pos:line="447" pos:column="118">.</op:operator><name pos:line="447" pos:column="119">CONCUR_UPDATABLE</name></name></expr></argument>, <argument><expr><name><name pos:line="447" pos:column="137">ResultSet</name><op:operator pos:line="447" pos:column="146">.</op:operator><name pos:line="447" pos:column="147">TYPE_FORWARD_ONLY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="448" pos:column="41">statement</name><op:operator pos:line="448" pos:column="50">.</op:operator><name pos:line="448" pos:column="51">setInt</name></name><argument_list pos:line="448" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="448" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="448" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="449" pos:column="41">statement</name><op:operator pos:line="449" pos:column="50">.</op:operator><name pos:line="449" pos:column="51">setInt</name></name><argument_list pos:line="449" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="449" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="449" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="450" pos:column="41">DBAnnotation</name><op:operator pos:line="450" pos:column="53">.</op:operator><name pos:line="450" pos:column="54">annoate</name></name><argument_list pos:line="450" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="450" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="450" pos:column="69">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="450" pos:column="81">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="450" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="451" pos:column="41">DBAnnotation</name><op:operator pos:line="451" pos:column="53">.</op:operator><name pos:line="451" pos:column="54">annoate</name></name><argument_list pos:line="451" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="451" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="451" pos:column="73">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="451" pos:column="85">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="451" pos:column="96">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="452" pos:column="41">statement</name><op:operator pos:line="452" pos:column="50">.</op:operator><name pos:line="452" pos:column="51">executeUpdate</name></name><argument_list pos:line="452" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="453" pos:column="41">isRemoved</name> <op:operator pos:line="453" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="453" pos:column="53">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="454" pos:column="41">Database</name><op:operator pos:line="454" pos:column="49">.</op:operator><name pos:line="454" pos:column="50">commitTransaction</name></name><argument_list pos:line="454" pos:column="67">(<argument><expr><name pos:line="454" pos:column="68">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>											
				}</block></then></if>
			}</block>
			
			<catch pos:line="458" pos:column="25">catch<parameter_list pos:line="458" pos:column="30">(<param><decl><type><name pos:line="458" pos:column="31">SQLException</name></type> <name pos:line="458" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="458" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="459" pos:column="33">System</name><op:operator pos:line="459" pos:column="39">.</op:operator><name pos:line="459" pos:column="40">out</name><op:operator pos:line="459" pos:column="43">.</op:operator><name pos:line="459" pos:column="44">println</name></name><argument_list pos:line="459" pos:column="51">(<argument><expr><call><name><name pos:line="459" pos:column="52">e</name><op:operator pos:line="459" pos:column="53">.</op:operator><name pos:line="459" pos:column="54">getMessage</name></name><argument_list pos:line="459" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="460" pos:column="33">e</name><op:operator pos:line="460" pos:column="34">.</op:operator><name pos:line="460" pos:column="35">printStackTrace</name></name><argument_list pos:line="460" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="464" pos:column="17">finally<block pos:line="464" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="467" pos:column="17">return <expr><name pos:line="467" pos:column="24">isRemoved</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="470" pos:column="9">/*
	 * This function removes the eligibility of the students to register for the course because of the timeout in registration
	 */</comment>
	<function><type><specifier pos:line="473" pos:column="9">public</specifier> <specifier pos:line="473" pos:column="16">static</specifier> <name pos:line="473" pos:column="23">void</name></type> <name pos:line="473" pos:column="28">removeFromEmailedList</name><parameter_list pos:line="473" pos:column="49">(<param><decl><type><name pos:line="473" pos:column="50">int</name></type> <name pos:line="473" pos:column="54">UIN</name></decl></param>, <param><decl><type><name pos:line="473" pos:column="59">int</name></type> <name pos:line="473" pos:column="63">offerID</name></decl></param>)</parameter_list><block pos:line="473" pos:column="71">{
		<try pos:line="474" pos:column="17">try<block pos:line="474" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="475" pos:column="25">Connection</name></type> <name pos:line="475" pos:column="36">conn</name> <init pos:line="475" pos:column="41">= <expr><call><name><name pos:line="475" pos:column="43">Database</name><op:operator pos:line="475" pos:column="51">.</op:operator><name pos:line="475" pos:column="52">getConnection</name></name><argument_list pos:line="475" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="477" pos:column="25">try<block pos:line="477" pos:column="28">{
				<if pos:line="478" pos:column="33">if<condition pos:line="478" pos:column="35">(<expr><name pos:line="478" pos:column="36">conn</name> <op:operator pos:line="478" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="478" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="478" pos:column="49">{
					<expr_stmt><expr><call><name><name pos:line="479" pos:column="41">System</name><op:operator pos:line="479" pos:column="47">.</op:operator><name pos:line="479" pos:column="48">out</name><op:operator pos:line="479" pos:column="51">.</op:operator><name pos:line="479" pos:column="52">println</name></name><argument_list pos:line="479" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="479" pos:column="60">"Deleting student from email wait list"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="480" pos:column="41">String</name></type> <name pos:line="480" pos:column="48">WaitListInsert</name> <init pos:line="480" pos:column="63">= <expr><lit:literal type="string" pos:line="480" pos:column="65">"DELETE FROM emailedwaitlist "</lit:literal>
							<op:operator pos:line="481" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="481" pos:column="59">"WHERE StudentUIN= ? and OfferID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="482" pos:column="41">PreparedStatement</name></type> <name pos:line="482" pos:column="59">statement</name> <init pos:line="482" pos:column="69">= <expr><call><name><name pos:line="482" pos:column="71">conn</name><op:operator pos:line="482" pos:column="75">.</op:operator><name pos:line="482" pos:column="76">prepareStatement</name></name><argument_list pos:line="482" pos:column="92">(<argument><expr><name pos:line="482" pos:column="93">WaitListInsert</name></expr></argument>, <argument><expr><name><name pos:line="482" pos:column="109">ResultSet</name><op:operator pos:line="482" pos:column="118">.</op:operator><name pos:line="482" pos:column="119">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="483" pos:column="41">statement</name><op:operator pos:line="483" pos:column="50">.</op:operator><name pos:line="483" pos:column="51">setInt</name></name><argument_list pos:line="483" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="483" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="483" pos:column="61">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="484" pos:column="41">statement</name><op:operator pos:line="484" pos:column="50">.</op:operator><name pos:line="484" pos:column="51">setInt</name></name><argument_list pos:line="484" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="484" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><name pos:line="484" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="485" pos:column="41">DBAnnotation</name><op:operator pos:line="485" pos:column="53">.</op:operator><name pos:line="485" pos:column="54">annoate</name></name><argument_list pos:line="485" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="485" pos:column="62">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="485" pos:column="69">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="485" pos:column="88">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="485" pos:column="95">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="486" pos:column="41">DBAnnotation</name><op:operator pos:line="486" pos:column="53">.</op:operator><name pos:line="486" pos:column="54">annoate</name></name><argument_list pos:line="486" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="486" pos:column="62">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="73">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="486" pos:column="92">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="486" pos:column="103">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="487" pos:column="41">statement</name><op:operator pos:line="487" pos:column="50">.</op:operator><name pos:line="487" pos:column="51">executeUpdate</name></name><argument_list pos:line="487" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="488" pos:column="41">//Database.commitTransaction(conn);											</comment>
				}</block></then></if>
			}</block>
			
			<catch pos:line="492" pos:column="25">catch<parameter_list pos:line="492" pos:column="30">(<param><decl><type><name pos:line="492" pos:column="31">SQLException</name></type> <name pos:line="492" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="492" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="493" pos:column="33">System</name><op:operator pos:line="493" pos:column="39">.</op:operator><name pos:line="493" pos:column="40">out</name><op:operator pos:line="493" pos:column="43">.</op:operator><name pos:line="493" pos:column="44">println</name></name><argument_list pos:line="493" pos:column="51">(<argument><expr><call><name><name pos:line="493" pos:column="52">e</name><op:operator pos:line="493" pos:column="53">.</op:operator><name pos:line="493" pos:column="54">getMessage</name></name><argument_list pos:line="493" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="494" pos:column="33">e</name><op:operator pos:line="494" pos:column="34">.</op:operator><name pos:line="494" pos:column="35">printStackTrace</name></name><argument_list pos:line="494" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="498" pos:column="17">finally<block pos:line="498" pos:column="24">{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="502" pos:column="9">/*
	 * Checks for the first student on the queue of the wait list for the specified offer
	 * Removes the student from wait list
	 * Adds to email list
	 * allows the student to register
	 * sends an intimation email to student
	 */</comment>
	<function><type><specifier pos:line="509" pos:column="9">public</specifier> <specifier pos:line="509" pos:column="16">static</specifier> <name pos:line="509" pos:column="23">void</name></type> <name pos:line="509" pos:column="28">emailFirstStudentOnWaitList</name><parameter_list pos:line="509" pos:column="55">(<param><decl><type><name pos:line="509" pos:column="56">int</name></type> <name pos:line="509" pos:column="60">offerID</name></decl></param>)</parameter_list><block pos:line="509" pos:column="68">{
		<if pos:line="510" pos:column="17">if<condition pos:line="510" pos:column="19">(<expr><op:operator pos:line="510" pos:column="20">!</op:operator><call><name pos:line="510" pos:column="21">canCourseAccomodateNewStudentFromWaitList</name><argument_list pos:line="510" pos:column="62">(<argument><expr><name pos:line="510" pos:column="63">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="510" pos:column="72">{
			<expr_stmt><expr><call><name><name pos:line="511" pos:column="25">System</name><op:operator pos:line="511" pos:column="31">.</op:operator><name pos:line="511" pos:column="32">out</name><op:operator pos:line="511" pos:column="35">.</op:operator><name pos:line="511" pos:column="36">println</name></name><argument_list pos:line="511" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="511" pos:column="44">"Course cannot accomodate new student, not sending email"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="512" pos:column="25">return;</return>
		}</block></then></if>
		
		<decl_stmt><decl><type><name pos:line="515" pos:column="17">Student</name></type> <name pos:line="515" pos:column="25">student</name> <init pos:line="515" pos:column="33">= <expr><call><name pos:line="515" pos:column="35">getStudentFirstOnWaitList</name><argument_list pos:line="515" pos:column="60">(<argument><expr><name pos:line="515" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="517" pos:column="17">if<condition pos:line="517" pos:column="19">(<expr><name pos:line="517" pos:column="20">student</name><op:operator pos:line="517" pos:column="27">!=</op:operator><lit:literal type="null" pos:line="517" pos:column="29">null</lit:literal></expr>)</condition><then><block pos:line="517" pos:column="34">{
			<comment type="line" pos:line="518" pos:column="25">//add the student to emailed list</comment>
			<try pos:line="519" pos:column="25">try<block pos:line="519" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="520" pos:column="33">Connection</name></type> <name pos:line="520" pos:column="44">conn</name> <init pos:line="520" pos:column="49">= <expr><call><name><name pos:line="520" pos:column="51">Database</name><op:operator pos:line="520" pos:column="59">.</op:operator><name pos:line="520" pos:column="60">getConnection</name></name><argument_list pos:line="520" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<try pos:line="522" pos:column="33">try<block pos:line="522" pos:column="36">{
					<if pos:line="523" pos:column="41">if<condition pos:line="523" pos:column="43">(<expr><name pos:line="523" pos:column="44">conn</name> <op:operator pos:line="523" pos:column="49">!=</op:operator> <lit:literal type="null" pos:line="523" pos:column="52">null</lit:literal></expr>)</condition><then><block pos:line="523" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="524" pos:column="49">System</name><op:operator pos:line="524" pos:column="55">.</op:operator><name pos:line="524" pos:column="56">out</name><op:operator pos:line="524" pos:column="59">.</op:operator><name pos:line="524" pos:column="60">println</name></name><argument_list pos:line="524" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="524" pos:column="68">"Inserting student in wait list"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="525" pos:column="49">String</name></type> <name pos:line="525" pos:column="56">WaitListInsert</name> <init pos:line="525" pos:column="71">= <expr><lit:literal type="string" pos:line="525" pos:column="73">"INSERT INTO emailedwaitlist "</lit:literal>
								<op:operator pos:line="526" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="526" pos:column="67">"(StudentUIN, OfferID, TimeEmailed) "</lit:literal>
								<op:operator pos:line="527" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="527" pos:column="67">"Values(?,?,?)"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="528" pos:column="49">PreparedStatement</name></type> <name pos:line="528" pos:column="67">statement</name> <init pos:line="528" pos:column="77">= <expr><call><name><name pos:line="528" pos:column="79">conn</name><op:operator pos:line="528" pos:column="83">.</op:operator><name pos:line="528" pos:column="84">prepareStatement</name></name><argument_list pos:line="528" pos:column="100">(<argument><expr><name pos:line="528" pos:column="101">WaitListInsert</name></expr></argument>, <argument><expr><name><name pos:line="528" pos:column="117">ResultSet</name><op:operator pos:line="528" pos:column="126">.</op:operator><name pos:line="528" pos:column="127">CONCUR_UPDATABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="529" pos:column="49">int</name></type> <name pos:line="529" pos:column="53">studentUIN</name> <init pos:line="529" pos:column="64">= <expr><call><name><name pos:line="529" pos:column="66">student</name><op:operator pos:line="529" pos:column="73">.</op:operator><name pos:line="529" pos:column="74">getUIN</name></name><argument_list pos:line="529" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="530" pos:column="49">statement</name><op:operator pos:line="530" pos:column="58">.</op:operator><name pos:line="530" pos:column="59">setInt</name></name><argument_list pos:line="530" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="530" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="530" pos:column="69">studentUIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="531" pos:column="49">statement</name><op:operator pos:line="531" pos:column="58">.</op:operator><name pos:line="531" pos:column="59">setInt</name></name><argument_list pos:line="531" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="531" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="531" pos:column="69">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="532" pos:column="49">long</name></type> <name pos:line="532" pos:column="54">timeStamp</name> <init pos:line="532" pos:column="64">= <expr><call><name><name pos:line="532" pos:column="66">System</name><op:operator pos:line="532" pos:column="72">.</op:operator><name pos:line="532" pos:column="73">currentTimeMillis</name></name><argument_list pos:line="532" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="533" pos:column="49">Timestamp</name></type> <name pos:line="533" pos:column="59">t</name> <init pos:line="533" pos:column="61">= <expr><op:operator pos:line="533" pos:column="63">new</op:operator> <call><name pos:line="533" pos:column="67">Timestamp</name><argument_list pos:line="533" pos:column="76">(<argument><expr><name pos:line="533" pos:column="77">timeStamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="534" pos:column="49">statement</name><op:operator pos:line="534" pos:column="58">.</op:operator><name pos:line="534" pos:column="59">setTimestamp</name></name><argument_list pos:line="534" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="534" pos:column="72">3</lit:literal></expr></argument>, <argument><expr><name pos:line="534" pos:column="75">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="535" pos:column="49">statement</name><op:operator pos:line="535" pos:column="58">.</op:operator><name pos:line="535" pos:column="59">executeUpdate</name></name><argument_list pos:line="535" pos:column="72">()</argument_list></call></expr>;</expr_stmt>											
						<expr_stmt><expr><call><name><name pos:line="536" pos:column="49">DBAnnotation</name><op:operator pos:line="536" pos:column="61">.</op:operator><name pos:line="536" pos:column="62">annoate</name></name><argument_list pos:line="536" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="536" pos:column="70">"studentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="536" pos:column="84">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="536" pos:column="103">"StudentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="536" pos:column="117">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="537" pos:column="49">DBAnnotation</name><op:operator pos:line="537" pos:column="61">.</op:operator><name pos:line="537" pos:column="62">annoate</name></name><argument_list pos:line="537" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="537" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="537" pos:column="81">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="537" pos:column="100">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="537" pos:column="111">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="538" pos:column="49">DBAnnotation</name><op:operator pos:line="538" pos:column="61">.</op:operator><name pos:line="538" pos:column="62">annoate</name></name><argument_list pos:line="538" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="538" pos:column="70">"t"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="538" pos:column="75">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="538" pos:column="94">"TimeEmailed"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="538" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block>
				
				<catch pos:line="542" pos:column="33">catch<parameter_list pos:line="542" pos:column="38">(<param><decl><type><name pos:line="542" pos:column="39">SQLException</name></type> <name pos:line="542" pos:column="52">e</name></decl></param>)</parameter_list><block pos:line="542" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="543" pos:column="41">System</name><op:operator pos:line="543" pos:column="47">.</op:operator><name pos:line="543" pos:column="48">out</name><op:operator pos:line="543" pos:column="51">.</op:operator><name pos:line="543" pos:column="52">println</name></name><argument_list pos:line="543" pos:column="59">(<argument><expr><call><name><name pos:line="543" pos:column="60">e</name><op:operator pos:line="543" pos:column="61">.</op:operator><name pos:line="543" pos:column="62">getMessage</name></name><argument_list pos:line="543" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="544" pos:column="41">e</name><op:operator pos:line="544" pos:column="42">.</op:operator><name pos:line="544" pos:column="43">printStackTrace</name></name><argument_list pos:line="544" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>			
			}</block>
			
			<finally pos:line="548" pos:column="25">finally<block pos:line="548" pos:column="32">{
			}</block></finally></try>
			<comment type="line" pos:line="550" pos:column="25">//remove the student from wait list</comment>
			<expr_stmt><expr><call><name pos:line="551" pos:column="25">removeFromWaitList</name><argument_list pos:line="551" pos:column="43">(<argument><expr><name pos:line="551" pos:column="44">student</name></expr></argument>, <argument><expr><name pos:line="551" pos:column="53">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line" pos:line="553" pos:column="25">//email the student using the username</comment>
			<decl_stmt><decl><type><name pos:line="554" pos:column="25">Email</name></type> <name pos:line="554" pos:column="31">email</name> <init pos:line="554" pos:column="37">= <expr><call><name><name pos:line="554" pos:column="39">Email</name><op:operator pos:line="554" pos:column="44">.</op:operator><name pos:line="554" pos:column="45">getInstance</name></name><argument_list pos:line="554" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="554" pos:column="57">"umas.uic@gmail.com"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="554" pos:column="79">"cs597project"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="555" pos:column="25">String</name></type> <name pos:line="555" pos:column="32">recepient</name> <init pos:line="555" pos:column="42">= <expr><call><name><name pos:line="555" pos:column="44">student</name><op:operator pos:line="555" pos:column="51">.</op:operator><name pos:line="555" pos:column="52">getUserName</name></name><argument_list pos:line="555" pos:column="63">()</argument_list></call><op:operator pos:line="555" pos:column="65">+</op:operator><lit:literal type="string" pos:line="555" pos:column="66">"@umas.edu"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="556" pos:column="25">String</name></type> <name pos:line="556" pos:column="32">subject</name> <init pos:line="556" pos:column="40">= <expr><lit:literal type="string" pos:line="556" pos:column="42">"Registration open"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="557" pos:column="25">String</name></type> <name pos:line="557" pos:column="32">body</name> <init pos:line="557" pos:column="37">= <expr><lit:literal type="string" pos:line="557" pos:column="39">"You can now register for course:"</lit:literal><op:operator pos:line="557" pos:column="73">+</op:operator><name pos:line="557" pos:column="74">offerID</name><op:operator pos:line="557" pos:column="81">+</op:operator><lit:literal type="string" pos:line="557" pos:column="82">". \nYou have a 12 hour time limit for registratoin"</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="558" pos:column="25">if<condition pos:line="558" pos:column="27">(<expr><call><name><name pos:line="558" pos:column="28">email</name><op:operator pos:line="558" pos:column="33">.</op:operator><name pos:line="558" pos:column="34">sendEmail</name></name><argument_list pos:line="558" pos:column="43">(<argument><expr><name pos:line="558" pos:column="44">recepient</name></expr></argument>, <argument><expr><name pos:line="558" pos:column="55">subject</name></expr></argument>, <argument><expr><name pos:line="558" pos:column="64">body</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="558" pos:column="70">{
				<expr_stmt><expr><call><name><name pos:line="559" pos:column="33">System</name><op:operator pos:line="559" pos:column="39">.</op:operator><name pos:line="559" pos:column="40">out</name><op:operator pos:line="559" pos:column="43">.</op:operator><name pos:line="559" pos:column="44">println</name></name><argument_list pos:line="559" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="52">"Email sent!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="560" pos:column="33">Database</name><op:operator pos:line="560" pos:column="41">.</op:operator><name pos:line="560" pos:column="42">commitTransaction</name></name><argument_list pos:line="560" pos:column="59">(<argument><expr><call><name><name pos:line="560" pos:column="60">Database</name><op:operator pos:line="560" pos:column="68">.</op:operator><name pos:line="560" pos:column="69">getConnection</name></name><argument_list pos:line="560" pos:column="82">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			
		}</block></then></if>
	}</block></function>
	
	<comment type="block" pos:line="566" pos:column="9">/*
	 * Retrieves the first student from the wait list of the specified course
	 */</comment>
	<function><type><specifier pos:line="569" pos:column="9">private</specifier> <specifier pos:line="569" pos:column="17">static</specifier> <name pos:line="569" pos:column="24">Student</name></type> <name pos:line="569" pos:column="32">getStudentFirstOnWaitList</name><parameter_list pos:line="569" pos:column="57">(<param><decl><type><name pos:line="569" pos:column="58">int</name></type> <name pos:line="569" pos:column="62">offerID</name></decl></param>)</parameter_list><block pos:line="569" pos:column="70">{
		<decl_stmt><decl><type><name pos:line="570" pos:column="17">Student</name></type> <name pos:line="570" pos:column="25">student</name> <init pos:line="570" pos:column="33">= <expr><lit:literal type="null" pos:line="570" pos:column="35">null</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="571" pos:column="17">int</name></type> <name pos:line="571" pos:column="21">queuePos</name> <init pos:line="571" pos:column="30">= <expr><call><name pos:line="571" pos:column="32">getFirstQueuePosition</name><argument_list pos:line="571" pos:column="53">(<argument><expr><name pos:line="571" pos:column="54">offerID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="573" pos:column="17">if<condition pos:line="573" pos:column="19">(<expr><op:operator pos:line="573" pos:column="20">!</op:operator><call><name pos:line="573" pos:column="21">isWaitListEmpty</name><argument_list pos:line="573" pos:column="36">(<argument><expr><name pos:line="573" pos:column="37">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="573" pos:column="46">{
			<try pos:line="574" pos:column="25">try<block pos:line="574" pos:column="28">{
				<decl_stmt><decl><type><name pos:line="575" pos:column="33">Connection</name></type> <name pos:line="575" pos:column="44">conn</name> <init pos:line="575" pos:column="49">= <expr><call><name><name pos:line="575" pos:column="51">Database</name><op:operator pos:line="575" pos:column="59">.</op:operator><name pos:line="575" pos:column="60">getConnection</name></name><argument_list pos:line="575" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<try pos:line="577" pos:column="33">try<block pos:line="577" pos:column="36">{
					<if pos:line="578" pos:column="41">if<condition pos:line="578" pos:column="43">(<expr><name pos:line="578" pos:column="44">conn</name> <op:operator pos:line="578" pos:column="49">!=</op:operator> <lit:literal type="null" pos:line="578" pos:column="52">null</lit:literal></expr>)</condition><then><block pos:line="578" pos:column="57">{
						<decl_stmt><decl><type><name pos:line="579" pos:column="49">String</name></type> <name pos:line="579" pos:column="56">SemesterSelect</name> <init pos:line="579" pos:column="71">= <expr><lit:literal type="string" pos:line="579" pos:column="73">"Select UIN"</lit:literal>
								<op:operator pos:line="580" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="580" pos:column="67">" FROM waitlist"</lit:literal>
								<op:operator pos:line="581" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="581" pos:column="67">" WHERE offerID= ? and QueuePos= ?"</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="582" pos:column="49">PreparedStatement</name></type> <name pos:line="582" pos:column="67">statement</name> <init pos:line="582" pos:column="77">= <expr><call><name><name pos:line="582" pos:column="79">conn</name><op:operator pos:line="582" pos:column="83">.</op:operator><name pos:line="582" pos:column="84">prepareStatement</name></name><argument_list pos:line="582" pos:column="100">(<argument><expr><name pos:line="582" pos:column="101">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="583" pos:column="49">statement</name><op:operator pos:line="583" pos:column="58">.</op:operator><name pos:line="583" pos:column="59">setInt</name></name><argument_list pos:line="583" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="583" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="583" pos:column="69">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="584" pos:column="49">statement</name><op:operator pos:line="584" pos:column="58">.</op:operator><name pos:line="584" pos:column="59">setInt</name></name><argument_list pos:line="584" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="584" pos:column="66">2</lit:literal></expr></argument>, <argument><expr><name pos:line="584" pos:column="69">queuePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="585" pos:column="49">ResultSet</name></type> <name pos:line="585" pos:column="59">rs</name> <init pos:line="585" pos:column="62">= <expr><call><name><name pos:line="585" pos:column="64">statement</name><op:operator pos:line="585" pos:column="73">.</op:operator><name pos:line="585" pos:column="74">executeQuery</name></name><argument_list pos:line="585" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="586" pos:column="49">if<condition pos:line="586" pos:column="51">(<expr><call><name><name pos:line="586" pos:column="52">rs</name><op:operator pos:line="586" pos:column="54">.</op:operator><name pos:line="586" pos:column="55">first</name></name><argument_list pos:line="586" pos:column="60">()</argument_list></call></expr>)</condition><then><block pos:line="586" pos:column="63">{
							<comment type="line" pos:line="587" pos:column="57">//return the student</comment>
							<expr_stmt><expr><call><name><name pos:line="588" pos:column="57">DBAnnotation</name><op:operator pos:line="588" pos:column="69">.</op:operator><name pos:line="588" pos:column="70">annoate</name></name><argument_list pos:line="588" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="588" pos:column="78">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="85">"waitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="588" pos:column="97">"UIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="588" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="589" pos:column="57">int</name></type> <name pos:line="589" pos:column="61">UIN</name> <init pos:line="589" pos:column="65">= <expr><call><name><name pos:line="589" pos:column="67">rs</name><op:operator pos:line="589" pos:column="69">.</op:operator><name pos:line="589" pos:column="70">getInt</name></name><argument_list pos:line="589" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="589" pos:column="77">"UIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name pos:line="590" pos:column="57">student</name> <op:operator pos:line="590" pos:column="65">=</op:operator> <op:operator pos:line="590" pos:column="67">new</op:operator> <call><name pos:line="590" pos:column="71">Student</name><argument_list pos:line="590" pos:column="78">(<argument><expr><name pos:line="590" pos:column="79">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
																	
					}</block></then></if>
				}</block>
				
				<catch pos:line="596" pos:column="33">catch<parameter_list pos:line="596" pos:column="38">(<param><decl><type><name pos:line="596" pos:column="39">SQLException</name></type> <name pos:line="596" pos:column="52">e</name></decl></param>)</parameter_list><block pos:line="596" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="597" pos:column="41">System</name><op:operator pos:line="597" pos:column="47">.</op:operator><name pos:line="597" pos:column="48">out</name><op:operator pos:line="597" pos:column="51">.</op:operator><name pos:line="597" pos:column="52">println</name></name><argument_list pos:line="597" pos:column="59">(<argument><expr><call><name><name pos:line="597" pos:column="60">e</name><op:operator pos:line="597" pos:column="61">.</op:operator><name pos:line="597" pos:column="62">getMessage</name></name><argument_list pos:line="597" pos:column="72">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="598" pos:column="41">e</name><op:operator pos:line="598" pos:column="42">.</op:operator><name pos:line="598" pos:column="43">printStackTrace</name></name><argument_list pos:line="598" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch pos:line="599" pos:column="35">catch <parameter_list pos:line="599" pos:column="41">(<param><decl><type><name><name pos:line="599" pos:column="42">People</name><op:operator pos:line="599" pos:column="48">.</op:operator><name pos:line="599" pos:column="49">PersonDoesNotExistException</name></name></type> <name pos:line="599" pos:column="77">e</name></decl></param>)</parameter_list> <block pos:line="599" pos:column="80">{
					<comment type="line" pos:line="600" pos:column="41">// TODO Auto-generated catch block</comment>
					<expr_stmt><expr><call><name><name pos:line="601" pos:column="41">e</name><op:operator pos:line="601" pos:column="42">.</op:operator><name pos:line="601" pos:column="43">printStackTrace</name></name><argument_list pos:line="601" pos:column="58">()</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>			
			}</block>
			
			<finally pos:line="605" pos:column="25">finally<block pos:line="605" pos:column="32">{
				
			}</block></finally></try>
			
		}</block></then></if>
		
		<return pos:line="611" pos:column="17">return <expr><name pos:line="611" pos:column="24">student</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="614" pos:column="9">/*
	 * Checks if the student is already registered for the course
	 */</comment>
	<function><type><specifier pos:line="617" pos:column="9">public</specifier> <specifier pos:line="617" pos:column="16">static</specifier> <name pos:line="617" pos:column="23">boolean</name></type> <name pos:line="617" pos:column="31">isStudentRegistered</name><parameter_list pos:line="617" pos:column="50">(<param><decl><type><name pos:line="617" pos:column="51">Student</name></type> <name pos:line="617" pos:column="59">student</name></decl></param>, <param><decl><type><name pos:line="617" pos:column="68">int</name></type> <name pos:line="617" pos:column="72">offerID</name></decl></param>)</parameter_list><block pos:line="617" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="618" pos:column="17">boolean</name></type> <name pos:line="618" pos:column="25">isRegistered</name> <init pos:line="618" pos:column="38">= <expr><lit:literal type="boolean" pos:line="618" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="619" pos:column="17">try<block pos:line="619" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="620" pos:column="25">Connection</name></type> <name pos:line="620" pos:column="36">conn</name> <init pos:line="620" pos:column="41">= <expr><call><name><name pos:line="620" pos:column="43">Database</name><op:operator pos:line="620" pos:column="51">.</op:operator><name pos:line="620" pos:column="52">getConnection</name></name><argument_list pos:line="620" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="622" pos:column="25">try<block pos:line="622" pos:column="28">{
				<if pos:line="623" pos:column="33">if<condition pos:line="623" pos:column="35">(<expr><name pos:line="623" pos:column="36">conn</name> <op:operator pos:line="623" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="623" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="623" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="624" pos:column="41">String</name></type> <name pos:line="624" pos:column="48">SemesterSelect</name> <init pos:line="624" pos:column="63">= <expr><lit:literal type="string" pos:line="624" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="625" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="625" pos:column="59">" FROM studentenrollment"</lit:literal>
							<op:operator pos:line="626" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="626" pos:column="59">" WHERE offerID= ? and UIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="627" pos:column="41">PreparedStatement</name></type> <name pos:line="627" pos:column="59">statement</name> <init pos:line="627" pos:column="69">= <expr><call><name><name pos:line="627" pos:column="71">conn</name><op:operator pos:line="627" pos:column="75">.</op:operator><name pos:line="627" pos:column="76">prepareStatement</name></name><argument_list pos:line="627" pos:column="92">(<argument><expr><name pos:line="627" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="628" pos:column="41">statement</name><op:operator pos:line="628" pos:column="50">.</op:operator><name pos:line="628" pos:column="51">setInt</name></name><argument_list pos:line="628" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="628" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="628" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="629" pos:column="41">statement</name><op:operator pos:line="629" pos:column="50">.</op:operator><name pos:line="629" pos:column="51">setInt</name></name><argument_list pos:line="629" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="629" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="629" pos:column="61">student</name><op:operator pos:line="629" pos:column="68">.</op:operator><name pos:line="629" pos:column="69">getUIN</name></name><argument_list pos:line="629" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="630" pos:column="41">ResultSet</name></type> <name pos:line="630" pos:column="51">rs</name> <init pos:line="630" pos:column="54">= <expr><call><name><name pos:line="630" pos:column="56">statement</name><op:operator pos:line="630" pos:column="65">.</op:operator><name pos:line="630" pos:column="66">executeQuery</name></name><argument_list pos:line="630" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="631" pos:column="41">if<condition pos:line="631" pos:column="43">(<expr><call><name><name pos:line="631" pos:column="44">rs</name><op:operator pos:line="631" pos:column="46">.</op:operator><name pos:line="631" pos:column="47">first</name></name><argument_list pos:line="631" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="631" pos:column="55">{
						<expr_stmt><expr><name pos:line="632" pos:column="49">isRegistered</name> <op:operator pos:line="632" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="632" pos:column="64">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="635" pos:column="41">else<block pos:line="635" pos:column="45">{
						<expr_stmt><expr><name pos:line="636" pos:column="49">isRegistered</name> <op:operator pos:line="636" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="636" pos:column="64">false</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="642" pos:column="25">catch<parameter_list pos:line="642" pos:column="30">(<param><decl><type><name pos:line="642" pos:column="31">SQLException</name></type> <name pos:line="642" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="642" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="643" pos:column="33">System</name><op:operator pos:line="643" pos:column="39">.</op:operator><name pos:line="643" pos:column="40">out</name><op:operator pos:line="643" pos:column="43">.</op:operator><name pos:line="643" pos:column="44">println</name></name><argument_list pos:line="643" pos:column="51">(<argument><expr><call><name><name pos:line="643" pos:column="52">e</name><op:operator pos:line="643" pos:column="53">.</op:operator><name pos:line="643" pos:column="54">getMessage</name></name><argument_list pos:line="643" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="644" pos:column="33">e</name><op:operator pos:line="644" pos:column="34">.</op:operator><name pos:line="644" pos:column="35">printStackTrace</name></name><argument_list pos:line="644" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="648" pos:column="17">finally<block pos:line="648" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="651" pos:column="17">return <expr><name pos:line="651" pos:column="24">isRegistered</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="654" pos:column="9">/*
	 * checks if the student is on the wait list
	 */</comment>
	<function><type><specifier pos:line="657" pos:column="9">public</specifier> <specifier pos:line="657" pos:column="16">static</specifier> <name pos:line="657" pos:column="23">boolean</name></type> <name pos:line="657" pos:column="31">isStudentOnWaitList</name><parameter_list pos:line="657" pos:column="50">(<param><decl><type><name pos:line="657" pos:column="51">Student</name></type> <name pos:line="657" pos:column="59">student</name></decl></param>, <param><decl><type><name pos:line="657" pos:column="68">int</name></type> <name pos:line="657" pos:column="72">offerID</name></decl></param>)</parameter_list><block pos:line="657" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="658" pos:column="17">boolean</name></type> <name pos:line="658" pos:column="25">isOnWaitList</name> <init pos:line="658" pos:column="38">= <expr><lit:literal type="boolean" pos:line="658" pos:column="40">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="659" pos:column="17">try<block pos:line="659" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="660" pos:column="25">Connection</name></type> <name pos:line="660" pos:column="36">conn</name> <init pos:line="660" pos:column="41">= <expr><call><name><name pos:line="660" pos:column="43">Database</name><op:operator pos:line="660" pos:column="51">.</op:operator><name pos:line="660" pos:column="52">getConnection</name></name><argument_list pos:line="660" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="662" pos:column="25">try<block pos:line="662" pos:column="28">{
				<if pos:line="663" pos:column="33">if<condition pos:line="663" pos:column="35">(<expr><name pos:line="663" pos:column="36">conn</name> <op:operator pos:line="663" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="663" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="663" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="664" pos:column="41">String</name></type> <name pos:line="664" pos:column="48">SemesterSelect</name> <init pos:line="664" pos:column="63">= <expr><lit:literal type="string" pos:line="664" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="665" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="665" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="666" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="666" pos:column="59">" WHERE offerID= ? and UIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="667" pos:column="41">PreparedStatement</name></type> <name pos:line="667" pos:column="59">statement</name> <init pos:line="667" pos:column="69">= <expr><call><name><name pos:line="667" pos:column="71">conn</name><op:operator pos:line="667" pos:column="75">.</op:operator><name pos:line="667" pos:column="76">prepareStatement</name></name><argument_list pos:line="667" pos:column="92">(<argument><expr><name pos:line="667" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="668" pos:column="41">statement</name><op:operator pos:line="668" pos:column="50">.</op:operator><name pos:line="668" pos:column="51">setInt</name></name><argument_list pos:line="668" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="668" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="668" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="669" pos:column="41">statement</name><op:operator pos:line="669" pos:column="50">.</op:operator><name pos:line="669" pos:column="51">setInt</name></name><argument_list pos:line="669" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="669" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="669" pos:column="61">student</name><op:operator pos:line="669" pos:column="68">.</op:operator><name pos:line="669" pos:column="69">getUIN</name></name><argument_list pos:line="669" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="670" pos:column="41">ResultSet</name></type> <name pos:line="670" pos:column="51">rs</name> <init pos:line="670" pos:column="54">= <expr><call><name><name pos:line="670" pos:column="56">statement</name><op:operator pos:line="670" pos:column="65">.</op:operator><name pos:line="670" pos:column="66">executeQuery</name></name><argument_list pos:line="670" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="671" pos:column="41">if<condition pos:line="671" pos:column="43">(<expr><call><name><name pos:line="671" pos:column="44">rs</name><op:operator pos:line="671" pos:column="46">.</op:operator><name pos:line="671" pos:column="47">first</name></name><argument_list pos:line="671" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="671" pos:column="55">{
						<expr_stmt><expr><name pos:line="672" pos:column="49">isOnWaitList</name> <op:operator pos:line="672" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="672" pos:column="64">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="675" pos:column="41">else<block pos:line="675" pos:column="45">{
						<expr_stmt><expr><name pos:line="676" pos:column="49">isOnWaitList</name> <op:operator pos:line="676" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="676" pos:column="64">false</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="682" pos:column="25">catch<parameter_list pos:line="682" pos:column="30">(<param><decl><type><name pos:line="682" pos:column="31">SQLException</name></type> <name pos:line="682" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="682" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="683" pos:column="33">System</name><op:operator pos:line="683" pos:column="39">.</op:operator><name pos:line="683" pos:column="40">out</name><op:operator pos:line="683" pos:column="43">.</op:operator><name pos:line="683" pos:column="44">println</name></name><argument_list pos:line="683" pos:column="51">(<argument><expr><call><name><name pos:line="683" pos:column="52">e</name><op:operator pos:line="683" pos:column="53">.</op:operator><name pos:line="683" pos:column="54">getMessage</name></name><argument_list pos:line="683" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="684" pos:column="33">e</name><op:operator pos:line="684" pos:column="34">.</op:operator><name pos:line="684" pos:column="35">printStackTrace</name></name><argument_list pos:line="684" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="688" pos:column="17">finally<block pos:line="688" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="691" pos:column="17">return <expr><name pos:line="691" pos:column="24">isOnWaitList</name></expr>;</return>
	}</block></function>

	<comment type="block" pos:line="694" pos:column="9">/*
	 * checks if the wait list is empty
	 */</comment>
	<function><type><specifier pos:line="697" pos:column="9">public</specifier> <specifier pos:line="697" pos:column="16">static</specifier> <name pos:line="697" pos:column="23">boolean</name></type> <name pos:line="697" pos:column="31">isWaitListEmpty</name><parameter_list pos:line="697" pos:column="46">(<param><decl><type><name pos:line="697" pos:column="47">int</name></type> <name pos:line="697" pos:column="51">offerID</name></decl></param>)</parameter_list><block pos:line="697" pos:column="59">{
		<decl_stmt><decl><type><name pos:line="698" pos:column="17">boolean</name></type> <name pos:line="698" pos:column="25">isEmpty</name> <init pos:line="698" pos:column="33">= <expr><lit:literal type="boolean" pos:line="698" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="699" pos:column="17">try<block pos:line="699" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="700" pos:column="25">Connection</name></type> <name pos:line="700" pos:column="36">conn</name> <init pos:line="700" pos:column="41">= <expr><call><name><name pos:line="700" pos:column="43">Database</name><op:operator pos:line="700" pos:column="51">.</op:operator><name pos:line="700" pos:column="52">getConnection</name></name><argument_list pos:line="700" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="702" pos:column="25">try<block pos:line="702" pos:column="28">{
				<if pos:line="703" pos:column="33">if<condition pos:line="703" pos:column="35">(<expr><name pos:line="703" pos:column="36">conn</name> <op:operator pos:line="703" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="703" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="703" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="704" pos:column="41">String</name></type> <name pos:line="704" pos:column="48">SemesterSelect</name> <init pos:line="704" pos:column="63">= <expr><lit:literal type="string" pos:line="704" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="705" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="705" pos:column="59">" FROM waitlist"</lit:literal>
							<op:operator pos:line="706" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="706" pos:column="59">" WHERE offerID= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="707" pos:column="41">PreparedStatement</name></type> <name pos:line="707" pos:column="59">statement</name> <init pos:line="707" pos:column="69">= <expr><call><name><name pos:line="707" pos:column="71">conn</name><op:operator pos:line="707" pos:column="75">.</op:operator><name pos:line="707" pos:column="76">prepareStatement</name></name><argument_list pos:line="707" pos:column="92">(<argument><expr><name pos:line="707" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="708" pos:column="41">statement</name><op:operator pos:line="708" pos:column="50">.</op:operator><name pos:line="708" pos:column="51">setInt</name></name><argument_list pos:line="708" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="708" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="708" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="709" pos:column="41">ResultSet</name></type> <name pos:line="709" pos:column="51">rs</name> <init pos:line="709" pos:column="54">= <expr><call><name><name pos:line="709" pos:column="56">statement</name><op:operator pos:line="709" pos:column="65">.</op:operator><name pos:line="709" pos:column="66">executeQuery</name></name><argument_list pos:line="709" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="710" pos:column="41">if<condition pos:line="710" pos:column="43">(<expr><call><name><name pos:line="710" pos:column="44">rs</name><op:operator pos:line="710" pos:column="46">.</op:operator><name pos:line="710" pos:column="47">first</name></name><argument_list pos:line="710" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="710" pos:column="55">{
						<expr_stmt><expr><name pos:line="711" pos:column="49">isEmpty</name> <op:operator pos:line="711" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="711" pos:column="59">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="714" pos:column="41">else<block pos:line="714" pos:column="45">{
						<expr_stmt><expr><name pos:line="715" pos:column="49">isEmpty</name> <op:operator pos:line="715" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="715" pos:column="59">true</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="721" pos:column="25">catch<parameter_list pos:line="721" pos:column="30">(<param><decl><type><name pos:line="721" pos:column="31">SQLException</name></type> <name pos:line="721" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="721" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="722" pos:column="33">System</name><op:operator pos:line="722" pos:column="39">.</op:operator><name pos:line="722" pos:column="40">out</name><op:operator pos:line="722" pos:column="43">.</op:operator><name pos:line="722" pos:column="44">println</name></name><argument_list pos:line="722" pos:column="51">(<argument><expr><call><name><name pos:line="722" pos:column="52">e</name><op:operator pos:line="722" pos:column="53">.</op:operator><name pos:line="722" pos:column="54">getMessage</name></name><argument_list pos:line="722" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="723" pos:column="33">e</name><op:operator pos:line="723" pos:column="34">.</op:operator><name pos:line="723" pos:column="35">printStackTrace</name></name><argument_list pos:line="723" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="727" pos:column="17">finally<block pos:line="727" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="730" pos:column="17">return <expr><name pos:line="730" pos:column="24">isEmpty</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="733" pos:column="9">/*
	 * empty the wait and email lists for initialization of the new semester
	 */</comment>
	<function><type><specifier pos:line="736" pos:column="9">public</specifier> <specifier pos:line="736" pos:column="16">static</specifier> <name pos:line="736" pos:column="23">boolean</name></type> <name pos:line="736" pos:column="31">emptyWaitAndEmailList</name><parameter_list pos:line="736" pos:column="52">()</parameter_list><block pos:line="736" pos:column="54">{
		<try pos:line="737" pos:column="17">try<block pos:line="737" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="738" pos:column="25">Connection</name></type> <name pos:line="738" pos:column="36">conn</name> <init pos:line="738" pos:column="41">= <expr><call><name><name pos:line="738" pos:column="43">Database</name><op:operator pos:line="738" pos:column="51">.</op:operator><name pos:line="738" pos:column="52">getConnection</name></name><argument_list pos:line="738" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="740" pos:column="25">try<block pos:line="740" pos:column="28">{
				<if pos:line="741" pos:column="33">if<condition pos:line="741" pos:column="35">(<expr><name pos:line="741" pos:column="36">conn</name> <op:operator pos:line="741" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="741" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="741" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="742" pos:column="41">String</name></type> <name pos:line="742" pos:column="48">listDelete</name> <init pos:line="742" pos:column="59">= <expr><lit:literal type="string" pos:line="742" pos:column="61">"Delete from waitlist"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="743" pos:column="41">PreparedStatement</name></type> <name pos:line="743" pos:column="59">statement</name> <init pos:line="743" pos:column="69">= <expr><call><name><name pos:line="743" pos:column="71">conn</name><op:operator pos:line="743" pos:column="75">.</op:operator><name pos:line="743" pos:column="76">prepareStatement</name></name><argument_list pos:line="743" pos:column="92">(<argument><expr><name pos:line="743" pos:column="93">listDelete</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="744" pos:column="41">statement</name><op:operator pos:line="744" pos:column="50">.</op:operator><name pos:line="744" pos:column="51">executeUpdate</name></name><argument_list pos:line="744" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><name pos:line="746" pos:column="41">listDelete</name> <op:operator pos:line="746" pos:column="52">=</op:operator> <lit:literal type="string" pos:line="746" pos:column="54">"Delete from emailedwaitlist"</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="747" pos:column="41">statement</name> <op:operator pos:line="747" pos:column="51">=</op:operator> <call><name><name pos:line="747" pos:column="53">conn</name><op:operator pos:line="747" pos:column="57">.</op:operator><name pos:line="747" pos:column="58">prepareStatement</name></name><argument_list pos:line="747" pos:column="74">(<argument><expr><name pos:line="747" pos:column="75">listDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="748" pos:column="41">statement</name><op:operator pos:line="748" pos:column="50">.</op:operator><name pos:line="748" pos:column="51">executeUpdate</name></name><argument_list pos:line="748" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
					
					<return pos:line="750" pos:column="41">return <expr><lit:literal type="boolean" pos:line="750" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block>
			
			<catch pos:line="754" pos:column="25">catch<parameter_list pos:line="754" pos:column="30">(<param><decl><type><name pos:line="754" pos:column="31">SQLException</name></type> <name pos:line="754" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="754" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="755" pos:column="33">System</name><op:operator pos:line="755" pos:column="39">.</op:operator><name pos:line="755" pos:column="40">out</name><op:operator pos:line="755" pos:column="43">.</op:operator><name pos:line="755" pos:column="44">println</name></name><argument_list pos:line="755" pos:column="51">(<argument><expr><call><name><name pos:line="755" pos:column="52">e</name><op:operator pos:line="755" pos:column="53">.</op:operator><name pos:line="755" pos:column="54">getMessage</name></name><argument_list pos:line="755" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="756" pos:column="33">e</name><op:operator pos:line="756" pos:column="34">.</op:operator><name pos:line="756" pos:column="35">printStackTrace</name></name><argument_list pos:line="756" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>			
		}</block>
		
		<finally pos:line="760" pos:column="17">finally<block pos:line="760" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="763" pos:column="17">return <expr><lit:literal type="boolean" pos:line="763" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="766" pos:column="9">/*
	 * checks if the student has already been sent email to register
	 */</comment>
	<function><type><specifier pos:line="769" pos:column="9">public</specifier> <specifier pos:line="769" pos:column="16">static</specifier> <name pos:line="769" pos:column="23">boolean</name></type> <name pos:line="769" pos:column="31">isStudentEmailed</name><parameter_list pos:line="769" pos:column="47">(<param><decl><type><name pos:line="769" pos:column="48">Student</name></type> <name pos:line="769" pos:column="56">student</name></decl></param>, <param><decl><type><name pos:line="769" pos:column="65">int</name></type> <name pos:line="769" pos:column="69">offerID</name></decl></param>)</parameter_list><block pos:line="769" pos:column="77">{
		<decl_stmt><decl><type><name pos:line="770" pos:column="17">boolean</name></type> <name pos:line="770" pos:column="25">isEmailed</name> <init pos:line="770" pos:column="35">= <expr><lit:literal type="boolean" pos:line="770" pos:column="37">false</lit:literal></expr></init></decl>;</decl_stmt>
		<try pos:line="771" pos:column="17">try<block pos:line="771" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="772" pos:column="25">Connection</name></type> <name pos:line="772" pos:column="36">conn</name> <init pos:line="772" pos:column="41">= <expr><call><name><name pos:line="772" pos:column="43">Database</name><op:operator pos:line="772" pos:column="51">.</op:operator><name pos:line="772" pos:column="52">getConnection</name></name><argument_list pos:line="772" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="774" pos:column="25">try<block pos:line="774" pos:column="28">{
				<if pos:line="775" pos:column="33">if<condition pos:line="775" pos:column="35">(<expr><name pos:line="775" pos:column="36">conn</name> <op:operator pos:line="775" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="775" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="775" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="776" pos:column="41">String</name></type> <name pos:line="776" pos:column="48">SemesterSelect</name> <init pos:line="776" pos:column="63">= <expr><lit:literal type="string" pos:line="776" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="777" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="777" pos:column="59">" FROM emailedwaitlist"</lit:literal>
							<op:operator pos:line="778" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="778" pos:column="59">" WHERE offerID= ? and StudentUIN= ?"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="779" pos:column="41">PreparedStatement</name></type> <name pos:line="779" pos:column="59">statement</name> <init pos:line="779" pos:column="69">= <expr><call><name><name pos:line="779" pos:column="71">conn</name><op:operator pos:line="779" pos:column="75">.</op:operator><name pos:line="779" pos:column="76">prepareStatement</name></name><argument_list pos:line="779" pos:column="92">(<argument><expr><name pos:line="779" pos:column="93">SemesterSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="780" pos:column="41">statement</name><op:operator pos:line="780" pos:column="50">.</op:operator><name pos:line="780" pos:column="51">setInt</name></name><argument_list pos:line="780" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="780" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="780" pos:column="61">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="781" pos:column="41">statement</name><op:operator pos:line="781" pos:column="50">.</op:operator><name pos:line="781" pos:column="51">setInt</name></name><argument_list pos:line="781" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="781" pos:column="58">2</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="781" pos:column="61">student</name><op:operator pos:line="781" pos:column="68">.</op:operator><name pos:line="781" pos:column="69">getUIN</name></name><argument_list pos:line="781" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="782" pos:column="41">ResultSet</name></type> <name pos:line="782" pos:column="51">rs</name> <init pos:line="782" pos:column="54">= <expr><call><name><name pos:line="782" pos:column="56">statement</name><op:operator pos:line="782" pos:column="65">.</op:operator><name pos:line="782" pos:column="66">executeQuery</name></name><argument_list pos:line="782" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<if pos:line="784" pos:column="41">if<condition pos:line="784" pos:column="43">(<expr><call><name><name pos:line="784" pos:column="44">rs</name><op:operator pos:line="784" pos:column="46">.</op:operator><name pos:line="784" pos:column="47">first</name></name><argument_list pos:line="784" pos:column="52">()</argument_list></call></expr>)</condition><then><block pos:line="784" pos:column="55">{
						<expr_stmt><expr><name pos:line="785" pos:column="49">isEmailed</name> <op:operator pos:line="785" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="785" pos:column="61">true</lit:literal></expr>;</expr_stmt>
					}</block></then>
					
					<else pos:line="788" pos:column="41">else<block pos:line="788" pos:column="45">{
						<expr_stmt><expr><name pos:line="789" pos:column="49">isEmailed</name> <op:operator pos:line="789" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="789" pos:column="61">false</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="795" pos:column="25">catch<parameter_list pos:line="795" pos:column="30">(<param><decl><type><name pos:line="795" pos:column="31">SQLException</name></type> <name pos:line="795" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="795" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="796" pos:column="33">System</name><op:operator pos:line="796" pos:column="39">.</op:operator><name pos:line="796" pos:column="40">out</name><op:operator pos:line="796" pos:column="43">.</op:operator><name pos:line="796" pos:column="44">println</name></name><argument_list pos:line="796" pos:column="51">(<argument><expr><call><name><name pos:line="796" pos:column="52">e</name><op:operator pos:line="796" pos:column="53">.</op:operator><name pos:line="796" pos:column="54">getMessage</name></name><argument_list pos:line="796" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="797" pos:column="33">e</name><op:operator pos:line="797" pos:column="34">.</op:operator><name pos:line="797" pos:column="35">printStackTrace</name></name><argument_list pos:line="797" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		
		<finally pos:line="801" pos:column="17">finally<block pos:line="801" pos:column="24">{
		}</block></finally></try>
		
		<return pos:line="804" pos:column="17">return <expr><name pos:line="804" pos:column="24">isEmailed</name></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="807" pos:column="9">/*
	 *checks the registration ticket expiration status of the emailed students and thus allows new students to register 
	 */</comment>
	<function><type><specifier pos:line="810" pos:column="9">private</specifier> <specifier pos:line="810" pos:column="17">static</specifier> <name pos:line="810" pos:column="24">void</name></type> <name pos:line="810" pos:column="29">checkTheStatusOfEmailedStudents</name><parameter_list pos:line="810" pos:column="60">()</parameter_list><block pos:line="810" pos:column="62">{
		<try pos:line="811" pos:column="17">try<block pos:line="811" pos:column="20">{
			<decl_stmt><decl><type><name pos:line="812" pos:column="25">Connection</name></type> <name pos:line="812" pos:column="36">conn</name> <init pos:line="812" pos:column="41">= <expr><call><name><name pos:line="812" pos:column="43">Database</name><op:operator pos:line="812" pos:column="51">.</op:operator><name pos:line="812" pos:column="52">getConnection</name></name><argument_list pos:line="812" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<try pos:line="814" pos:column="25">try<block pos:line="814" pos:column="28">{
				<if pos:line="815" pos:column="33">if<condition pos:line="815" pos:column="35">(<expr><name pos:line="815" pos:column="36">conn</name> <op:operator pos:line="815" pos:column="41">!=</op:operator> <lit:literal type="null" pos:line="815" pos:column="44">null</lit:literal></expr>)</condition><then><block pos:line="815" pos:column="49">{
					<decl_stmt><decl><type><name pos:line="816" pos:column="41">String</name></type> <name pos:line="816" pos:column="48">waitListSelect</name> <init pos:line="816" pos:column="63">= <expr><lit:literal type="string" pos:line="816" pos:column="65">"Select *"</lit:literal>
							<op:operator pos:line="817" pos:column="57">+</op:operator> <lit:literal type="string" pos:line="817" pos:column="59">" FROM emailedwaitlist"</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="818" pos:column="41">PreparedStatement</name></type> <name pos:line="818" pos:column="59">statement</name> <init pos:line="818" pos:column="69">= <expr><call><name><name pos:line="818" pos:column="71">conn</name><op:operator pos:line="818" pos:column="75">.</op:operator><name pos:line="818" pos:column="76">prepareStatement</name></name><argument_list pos:line="818" pos:column="92">(<argument><expr><name pos:line="818" pos:column="93">waitListSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="819" pos:column="41">ResultSet</name></type> <name pos:line="819" pos:column="51">rs</name> <init pos:line="819" pos:column="54">= <expr><call><name><name pos:line="819" pos:column="56">statement</name><op:operator pos:line="819" pos:column="65">.</op:operator><name pos:line="819" pos:column="66">executeQuery</name></name><argument_list pos:line="819" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<while pos:line="821" pos:column="41">while<condition pos:line="821" pos:column="46">(<expr><call><name><name pos:line="821" pos:column="47">rs</name><op:operator pos:line="821" pos:column="49">.</op:operator><name pos:line="821" pos:column="50">next</name></name><argument_list pos:line="821" pos:column="54">()</argument_list></call></expr>)</condition><block pos:line="821" pos:column="57">{
						<expr_stmt><expr><call><name><name pos:line="822" pos:column="49">DBAnnotation</name><op:operator pos:line="822" pos:column="61">.</op:operator><name pos:line="822" pos:column="62">annoate</name></name><argument_list pos:line="822" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="822" pos:column="70">"t1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="822" pos:column="76">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="822" pos:column="95">"TimeEmailed"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="822" pos:column="110">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="823" pos:column="49">Timestamp</name></type> <name pos:line="823" pos:column="59">t1</name> <init pos:line="823" pos:column="62">= <expr><call><name><name pos:line="823" pos:column="64">rs</name><op:operator pos:line="823" pos:column="66">.</op:operator><name pos:line="823" pos:column="67">getTimestamp</name></name><argument_list pos:line="823" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="823" pos:column="80">"TimeEmailed"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt pos:line="823" pos:column="95">;</empty_stmt>
						
						<decl_stmt><decl><type><name pos:line="825" pos:column="49">Timestamp</name></type> <name pos:line="825" pos:column="59">t2</name> <init pos:line="825" pos:column="62">= <expr><op:operator pos:line="825" pos:column="64">new</op:operator> <call><name pos:line="825" pos:column="68">Timestamp</name><argument_list pos:line="825" pos:column="77">(<argument><expr><call><name><name pos:line="825" pos:column="78">System</name><op:operator pos:line="825" pos:column="84">.</op:operator><name pos:line="825" pos:column="85">currentTimeMillis</name></name><argument_list pos:line="825" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="826" pos:column="49">long</name></type> <name pos:line="826" pos:column="54">hoursElapsed</name> <init pos:line="826" pos:column="67">= <expr><call><name pos:line="826" pos:column="69">findTimeDifference</name><argument_list pos:line="826" pos:column="87">(<argument><expr><name pos:line="826" pos:column="88">t1</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="92">t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="828" pos:column="49">DBAnnotation</name><op:operator pos:line="828" pos:column="61">.</op:operator><name pos:line="828" pos:column="62">annoate</name></name><argument_list pos:line="828" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="828" pos:column="70">"studentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="828" pos:column="84">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="828" pos:column="103">"StudentUIN"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="828" pos:column="117">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="829" pos:column="49">int</name></type> <name pos:line="829" pos:column="53">studentUIN</name> <init pos:line="829" pos:column="64">= <expr><call><name><name pos:line="829" pos:column="66">rs</name><op:operator pos:line="829" pos:column="68">.</op:operator><name pos:line="829" pos:column="69">getInt</name></name><argument_list pos:line="829" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="829" pos:column="76">"StudentUIN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="830" pos:column="49">Student</name></type> <name pos:line="830" pos:column="57">s</name> <init pos:line="830" pos:column="59">= <expr><op:operator pos:line="830" pos:column="61">new</op:operator> <call><name pos:line="830" pos:column="65">Student</name><argument_list pos:line="830" pos:column="72">(<argument><expr><name pos:line="830" pos:column="73">studentUIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						<expr_stmt><expr><call><name><name pos:line="832" pos:column="49">DBAnnotation</name><op:operator pos:line="832" pos:column="61">.</op:operator><name pos:line="832" pos:column="62">annoate</name></name><argument_list pos:line="832" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="832" pos:column="70">"offerID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="832" pos:column="81">"emailedwaitlist"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="832" pos:column="100">"OfferID"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="832" pos:column="111">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="833" pos:column="49">int</name></type> <name pos:line="833" pos:column="53">offerID</name> <init pos:line="833" pos:column="61">= <expr><call><name><name pos:line="833" pos:column="63">rs</name><op:operator pos:line="833" pos:column="65">.</op:operator><name pos:line="833" pos:column="66">getInt</name></name><argument_list pos:line="833" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="833" pos:column="73">"offerID"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
						
						<if pos:line="836" pos:column="49">if<condition pos:line="836" pos:column="51">(<expr><call><name pos:line="836" pos:column="52">isStudentRegistered</name><argument_list pos:line="836" pos:column="71">(<argument><expr><name pos:line="836" pos:column="72">s</name></expr></argument>, <argument><expr><name pos:line="836" pos:column="75">offerID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="836" pos:column="84">{
							<expr_stmt><expr><call><name pos:line="837" pos:column="57">removeFromEmailedList</name><argument_list pos:line="837" pos:column="78">(<argument><expr><name pos:line="837" pos:column="79">studentUIN</name></expr></argument>, <argument><expr><name pos:line="837" pos:column="91">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="838" pos:column="57">Email</name></type> <name pos:line="838" pos:column="63">email</name> <init pos:line="838" pos:column="69">= <expr><call><name><name pos:line="838" pos:column="71">Email</name><op:operator pos:line="838" pos:column="76">.</op:operator><name pos:line="838" pos:column="77">getInstance</name></name><argument_list pos:line="838" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="838" pos:column="89">"umas.uic@gmail.com"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="838" pos:column="111">"cs597project"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="839" pos:column="57">email</name><op:operator pos:line="839" pos:column="62">.</op:operator><name pos:line="839" pos:column="63">sendEmail</name></name><argument_list pos:line="839" pos:column="72">(<argument><expr><call><name><name pos:line="839" pos:column="73">s</name><op:operator pos:line="839" pos:column="74">.</op:operator><name pos:line="839" pos:column="75">getUserName</name></name><argument_list pos:line="839" pos:column="86">()</argument_list></call><op:operator pos:line="839" pos:column="88">+</op:operator><lit:literal type="string" pos:line="839" pos:column="89">"@umas.edu"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="839" pos:column="102">"Your registered for the course"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="839" pos:column="136">"You registrated for course:"</lit:literal><op:operator pos:line="839" pos:column="165">+</op:operator><name pos:line="839" pos:column="166">offerID</name><op:operator pos:line="839" pos:column="173">+</op:operator><lit:literal type="string" pos:line="839" pos:column="174">" after waitlist"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="line" pos:line="840" pos:column="57">//email new student for the same offer id</comment>
							<expr_stmt><expr><call><name pos:line="841" pos:column="57">emailFirstStudentOnWaitList</name><argument_list pos:line="841" pos:column="84">(<argument><expr><name pos:line="841" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="842" pos:column="57">Database</name><op:operator pos:line="842" pos:column="65">.</op:operator><name pos:line="842" pos:column="66">commitTransaction</name></name><argument_list pos:line="842" pos:column="83">(<argument><expr><call><name><name pos:line="842" pos:column="84">Database</name><op:operator pos:line="842" pos:column="92">.</op:operator><name pos:line="842" pos:column="93">getConnection</name></name><argument_list pos:line="842" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						
						<else pos:line="845" pos:column="49">else <if pos:line="845" pos:column="54">if<condition pos:line="845" pos:column="56">(<expr><name pos:line="845" pos:column="57">hoursElapsed</name> <op:operator pos:line="845" pos:column="70">&gt;=</op:operator> <lit:literal type="number" pos:line="845" pos:column="73">1</lit:literal></expr>)</condition><then><block pos:line="845" pos:column="75">{
							<comment type="line" pos:line="846" pos:column="57">//remove student from e-mailed list and email the student</comment>
							<decl_stmt><decl><type><name pos:line="847" pos:column="57">int</name></type> <name pos:line="847" pos:column="61">UIN</name> <init pos:line="847" pos:column="65">= <expr><call><name><name pos:line="847" pos:column="67">s</name><op:operator pos:line="847" pos:column="68">.</op:operator><name pos:line="847" pos:column="69">getUIN</name></name><argument_list pos:line="847" pos:column="75">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="848" pos:column="57">System</name><op:operator pos:line="848" pos:column="63">.</op:operator><name pos:line="848" pos:column="64">out</name><op:operator pos:line="848" pos:column="67">.</op:operator><name pos:line="848" pos:column="68">println</name></name><argument_list pos:line="848" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="848" pos:column="76">"Removing student from email list:"</lit:literal><op:operator pos:line="848" pos:column="111">+</op:operator><name pos:line="848" pos:column="112">UIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="849" pos:column="57">removeFromEmailedList</name><argument_list pos:line="849" pos:column="78">(<argument><expr><name pos:line="849" pos:column="79">UIN</name></expr></argument>, <argument><expr><name pos:line="849" pos:column="84">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<decl_stmt><decl><type><name pos:line="850" pos:column="57">Email</name></type> <name pos:line="850" pos:column="63">email</name> <init pos:line="850" pos:column="69">= <expr><call><name><name pos:line="850" pos:column="71">Email</name><op:operator pos:line="850" pos:column="76">.</op:operator><name pos:line="850" pos:column="77">getInstance</name></name><argument_list pos:line="850" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="850" pos:column="89">"umas.uic@gmail.com"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="850" pos:column="111">"cs597project"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="851" pos:column="57">email</name><op:operator pos:line="851" pos:column="62">.</op:operator><name pos:line="851" pos:column="63">sendEmail</name></name><argument_list pos:line="851" pos:column="72">(<argument><expr><call><name><name pos:line="851" pos:column="73">s</name><op:operator pos:line="851" pos:column="74">.</op:operator><name pos:line="851" pos:column="75">getUserName</name></name><argument_list pos:line="851" pos:column="86">()</argument_list></call><op:operator pos:line="851" pos:column="88">+</op:operator><lit:literal type="string" pos:line="851" pos:column="89">"@umas.edu"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="851" pos:column="102">"Your regitration ticket expired"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="851" pos:column="137">"Your registration ticket for course:"</lit:literal><op:operator pos:line="851" pos:column="175">+</op:operator><name pos:line="851" pos:column="176">offerID</name><op:operator pos:line="851" pos:column="183">+</op:operator><lit:literal type="string" pos:line="851" pos:column="184">" has expired"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="line" pos:line="852" pos:column="57">//email new student for the same offer id</comment>
							<expr_stmt><expr><call><name pos:line="853" pos:column="57">emailFirstStudentOnWaitList</name><argument_list pos:line="853" pos:column="84">(<argument><expr><name pos:line="853" pos:column="85">offerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="854" pos:column="57">Database</name><op:operator pos:line="854" pos:column="65">.</op:operator><name pos:line="854" pos:column="66">commitTransaction</name></name><argument_list pos:line="854" pos:column="83">(<argument><expr><call><name><name pos:line="854" pos:column="84">Database</name><op:operator pos:line="854" pos:column="92">.</op:operator><name pos:line="854" pos:column="93">getConnection</name></name><argument_list pos:line="854" pos:column="106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						
						
						<else pos:line="858" pos:column="49">else<block pos:line="858" pos:column="53">{
							<continue pos:line="859" pos:column="57">continue;</continue>
						}</block></else></if></else></if>
					}</block></while>
										
				}</block></then></if>
			}</block>
			
			<catch pos:line="866" pos:column="25">catch<parameter_list pos:line="866" pos:column="30">(<param><decl><type><name pos:line="866" pos:column="31">SQLException</name></type> <name pos:line="866" pos:column="44">e</name></decl></param>)</parameter_list><block pos:line="866" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="867" pos:column="33">System</name><op:operator pos:line="867" pos:column="39">.</op:operator><name pos:line="867" pos:column="40">out</name><op:operator pos:line="867" pos:column="43">.</op:operator><name pos:line="867" pos:column="44">println</name></name><argument_list pos:line="867" pos:column="51">(<argument><expr><call><name><name pos:line="867" pos:column="52">e</name><op:operator pos:line="867" pos:column="53">.</op:operator><name pos:line="867" pos:column="54">getMessage</name></name><argument_list pos:line="867" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="868" pos:column="33">e</name><op:operator pos:line="868" pos:column="34">.</op:operator><name pos:line="868" pos:column="35">printStackTrace</name></name><argument_list pos:line="868" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="869" pos:column="27">catch <parameter_list pos:line="869" pos:column="33">(<param><decl><type><name><name pos:line="869" pos:column="34">People</name><op:operator pos:line="869" pos:column="40">.</op:operator><name pos:line="869" pos:column="41">PersonDoesNotExistException</name></name></type> <name pos:line="869" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="869" pos:column="72">{
				<comment type="line" pos:line="870" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="871" pos:column="33">e</name><op:operator pos:line="871" pos:column="34">.</op:operator><name pos:line="871" pos:column="35">printStackTrace</name></name><argument_list pos:line="871" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block>
		
		<finally pos:line="875" pos:column="17">finally<block pos:line="875" pos:column="24">{
		}</block></finally></try>
	}</block></function>
	
	<comment type="block" pos:line="879" pos:column="9">/*
	 * find time difference between the time the student was emailed to register and the current time
	 */</comment>
	<function><type><specifier pos:line="882" pos:column="9">private</specifier> <specifier pos:line="882" pos:column="17">static</specifier> <name pos:line="882" pos:column="24">long</name></type> <name pos:line="882" pos:column="29">findTimeDifference</name><parameter_list pos:line="882" pos:column="47">(<param><decl><type><name pos:line="882" pos:column="48">Timestamp</name></type> <name pos:line="882" pos:column="58">t1</name></decl></param>, <param><decl><type><name pos:line="882" pos:column="62">Timestamp</name></type> <name pos:line="882" pos:column="72">t2</name></decl></param>)</parameter_list><block pos:line="882" pos:column="75">{
		<decl_stmt><decl><type><name pos:line="883" pos:column="17">Period</name></type> <name pos:line="883" pos:column="24">p</name> <init pos:line="883" pos:column="26">= <expr><op:operator pos:line="883" pos:column="28">new</op:operator> <call><name pos:line="883" pos:column="32">Period</name><argument_list pos:line="883" pos:column="38">(<argument><expr><call><name><name pos:line="883" pos:column="39">t1</name><op:operator pos:line="883" pos:column="41">.</op:operator><name pos:line="883" pos:column="42">getTime</name></name><argument_list pos:line="883" pos:column="49">()</argument_list></call></expr></argument>,<argument><expr><call><name><name pos:line="883" pos:column="52">t2</name><op:operator pos:line="883" pos:column="54">.</op:operator><name pos:line="883" pos:column="55">getTime</name></name><argument_list pos:line="883" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="884" pos:column="17">System</name><op:operator pos:line="884" pos:column="23">.</op:operator><name pos:line="884" pos:column="24">out</name><op:operator pos:line="884" pos:column="27">.</op:operator><name pos:line="884" pos:column="28">println</name></name><argument_list pos:line="884" pos:column="35">(<argument><expr><name pos:line="884" pos:column="36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="885" pos:column="17">System</name><op:operator pos:line="885" pos:column="23">.</op:operator><name pos:line="885" pos:column="24">out</name><op:operator pos:line="885" pos:column="27">.</op:operator><name pos:line="885" pos:column="28">println</name></name><argument_list pos:line="885" pos:column="35">(<argument><expr><name pos:line="885" pos:column="36">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="886" pos:column="17">System</name><op:operator pos:line="886" pos:column="23">.</op:operator><name pos:line="886" pos:column="24">out</name><op:operator pos:line="886" pos:column="27">.</op:operator><name pos:line="886" pos:column="28">println</name></name><argument_list pos:line="886" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="886" pos:column="36">"Hour difference:"</lit:literal><op:operator pos:line="886" pos:column="54">+</op:operator><call><name><name pos:line="886" pos:column="55">p</name><op:operator pos:line="886" pos:column="56">.</op:operator><name pos:line="886" pos:column="57">getHours</name></name><argument_list pos:line="886" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="887" pos:column="17">return <expr><call><name><name pos:line="887" pos:column="24">p</name><op:operator pos:line="887" pos:column="25">.</op:operator><name pos:line="887" pos:column="26">getHours</name></name><argument_list pos:line="887" pos:column="34">()</argument_list></call></expr>;</return>
	}</block></function>
	
	<comment type="block" pos:line="890" pos:column="9">/*
	 * performs a completer scan of the wait list and adds, update deletes student from  waitlist and email list
	 * as and when it is necessary
	 */</comment>
	<function><type><specifier pos:line="894" pos:column="9">public</specifier> <specifier pos:line="894" pos:column="16">static</specifier> <name pos:line="894" pos:column="23">void</name></type> <name pos:line="894" pos:column="28">scanWaitList</name><parameter_list pos:line="894" pos:column="40">()</parameter_list><block pos:line="894" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="895" pos:column="17">HashMap</name><argument_list pos:line="895" pos:column="24">&lt;<argument><name pos:line="895" pos:column="25">Integer</name></argument>, <argument><name pos:line="895" pos:column="34">CourseSchedule</name></argument>&gt;</argument_list></name></type> <name pos:line="895" pos:column="50">allScheduledCourses</name> <init pos:line="895" pos:column="70">= <expr><call><name><name pos:line="895" pos:column="72">CourseSchedule</name><op:operator pos:line="895" pos:column="86">.</op:operator><name pos:line="895" pos:column="87">getHaspMapForSchedule</name></name><argument_list pos:line="895" pos:column="108">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="896" pos:column="17">checkTheStatusOfEmailedStudents</name><argument_list pos:line="896" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
		<for pos:line="897" pos:column="17">for(<init><decl><type><name pos:line="897" pos:column="21">Integer</name></type> <name pos:line="897" pos:column="29">i</name><range pos:line="897" pos:column="30">:<expr><call><name><name pos:line="897" pos:column="31">allScheduledCourses</name><op:operator pos:line="897" pos:column="50">.</op:operator><name pos:line="897" pos:column="51">keySet</name></name><argument_list pos:line="897" pos:column="57">()</argument_list></call></expr></range></decl></init>)<block pos:line="897" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="898" pos:column="25">int</name></type> <name pos:line="898" pos:column="29">wailtListStudents</name> <init pos:line="898" pos:column="47">= <expr><call><name pos:line="898" pos:column="49">getStudentsOnWaitList</name><argument_list pos:line="898" pos:column="70">(<argument><expr><name pos:line="898" pos:column="71">i</name></expr></argument>)</argument_list></call><op:operator pos:line="898" pos:column="73">.</op:operator><call><name pos:line="898" pos:column="74">size</name><argument_list pos:line="898" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="899" pos:column="25">if<condition pos:line="899" pos:column="27">(<expr><name pos:line="899" pos:column="28">wailtListStudents</name> <op:operator pos:line="899" pos:column="46">&lt;=</op:operator> <lit:literal type="number" pos:line="899" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="899" pos:column="51">
				<continue pos:line="900" pos:column="33">continue;</continue></then></if>
			
			<try pos:line="902" pos:column="25">try <block pos:line="902" pos:column="29">{
				<decl_stmt><decl><type><name pos:line="903" pos:column="33">CourseOffered</name></type> <name pos:line="903" pos:column="47">co</name> <init pos:line="903" pos:column="50">= <expr><op:operator pos:line="903" pos:column="52">new</op:operator> <call><name pos:line="903" pos:column="56">CourseOffered</name><argument_list pos:line="903" pos:column="69">(<argument><expr><name pos:line="903" pos:column="70">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="904" pos:column="33">int</name></type> <name pos:line="904" pos:column="37">emailedStudents</name> <init pos:line="904" pos:column="53">= <expr><call><name pos:line="904" pos:column="55">getStudentsOnEmailList</name><argument_list pos:line="904" pos:column="77">(<argument><expr><name pos:line="904" pos:column="78">i</name></expr></argument>)</argument_list></call><op:operator pos:line="904" pos:column="80">.</op:operator><call><name pos:line="904" pos:column="81">size</name><argument_list pos:line="904" pos:column="85">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="905" pos:column="33">int</name></type> <name pos:line="905" pos:column="37">totalCap</name> <init pos:line="905" pos:column="46">= <expr><call><name><name pos:line="905" pos:column="48">co</name><op:operator pos:line="905" pos:column="50">.</op:operator><name pos:line="905" pos:column="51">getTotalCapacity</name></name><argument_list pos:line="905" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="906" pos:column="33">int</name></type> <name pos:line="906" pos:column="37">filled</name> <init pos:line="906" pos:column="44">= <expr><call><name><name pos:line="906" pos:column="46">co</name><op:operator pos:line="906" pos:column="48">.</op:operator><name pos:line="906" pos:column="49">getCurrentlyFilled</name></name><argument_list pos:line="906" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name pos:line="908" pos:column="33">int</name></type> <name pos:line="908" pos:column="37">numberOfNewStudentsToBeAccomodated</name> <init pos:line="908" pos:column="72">= <expr><op:operator pos:line="908" pos:column="74">(</op:operator><name pos:line="908" pos:column="75">totalCap</name><op:operator pos:line="908" pos:column="83">-</op:operator><name pos:line="908" pos:column="84">filled</name><op:operator pos:line="908" pos:column="90">)</op:operator> <op:operator pos:line="908" pos:column="92">-</op:operator> <name pos:line="908" pos:column="94">emailedStudents</name></expr></init></decl>;</decl_stmt>
				
				<if pos:line="910" pos:column="33">if<condition pos:line="910" pos:column="35">(<expr><name pos:line="910" pos:column="36">numberOfNewStudentsToBeAccomodated</name> <op:operator pos:line="910" pos:column="71">&gt;</op:operator> <lit:literal type="number" pos:line="910" pos:column="73">0</lit:literal></expr>)</condition><then><block pos:line="910" pos:column="75">{
					<expr_stmt><expr><call><name pos:line="911" pos:column="41">emailFirstStudentOnWaitList</name><argument_list pos:line="911" pos:column="68">(<argument><expr><name pos:line="911" pos:column="69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="912" pos:column="41">Thread</name><op:operator pos:line="912" pos:column="47">.</op:operator><name pos:line="912" pos:column="48">sleep</name></name><argument_list pos:line="912" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="912" pos:column="54">2000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				
				
			}</block> <catch pos:line="916" pos:column="27">catch <parameter_list pos:line="916" pos:column="33">(<param><decl><type><name><name pos:line="916" pos:column="34">Course</name><op:operator pos:line="916" pos:column="40">.</op:operator><name pos:line="916" pos:column="41">CourseDoesNotExistException</name></name></type> <name pos:line="916" pos:column="69">e</name></decl></param>)</parameter_list> <block pos:line="916" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="917" pos:column="33">e</name><op:operator pos:line="917" pos:column="34">.</op:operator><name pos:line="917" pos:column="35">printStackTrace</name></name><argument_list pos:line="917" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="918" pos:column="27">catch <parameter_list pos:line="918" pos:column="33">(<param><decl><type><name><name pos:line="918" pos:column="34">CourseOffered</name><op:operator pos:line="918" pos:column="47">.</op:operator><name pos:line="918" pos:column="48">CourseOfferingDoesNotExistException</name></name></type> <name pos:line="918" pos:column="84">e</name></decl></param>)</parameter_list> <block pos:line="918" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="919" pos:column="33">e</name><op:operator pos:line="919" pos:column="34">.</op:operator><name pos:line="919" pos:column="35">printStackTrace</name></name><argument_list pos:line="919" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch><catch pos:line="920" pos:column="26">catch <parameter_list pos:line="920" pos:column="32">(<param><decl><type><name pos:line="920" pos:column="33">InterruptedException</name></type> <name pos:line="920" pos:column="54">e</name></decl></param>)</parameter_list> <block pos:line="920" pos:column="57">{
				<comment type="line" pos:line="921" pos:column="33">// TODO Auto-generated catch block</comment>
				<expr_stmt><expr><call><name><name pos:line="922" pos:column="33">e</name><op:operator pos:line="922" pos:column="34">.</op:operator><name pos:line="922" pos:column="35">printStackTrace</name></name><argument_list pos:line="922" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
			
		}</block></for>
		
	}</block></function>
	
	<function><type><specifier pos:line="929" pos:column="9">public</specifier> <specifier pos:line="929" pos:column="16">static</specifier> <name pos:line="929" pos:column="23">void</name></type> <name pos:line="929" pos:column="28">main</name><parameter_list pos:line="929" pos:column="32">(<param><decl><type><name><name pos:line="929" pos:column="33">String</name><index pos:line="929" pos:column="39">[]</index></name></type> <name pos:line="929" pos:column="42">args</name></decl></param>)</parameter_list><block pos:line="929" pos:column="47">{
	}</block></function>
}</block></class>
</unit>
